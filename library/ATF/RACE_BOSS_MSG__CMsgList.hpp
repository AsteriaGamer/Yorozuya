// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CNetIndexList.hpp"
#include "RACE_BOSS_MSG__CMsg.hpp"


START_ATF_NAMESPACE
    namespace RACE_BOSS_MSG
    {
        struct CMsgList
        {
            ;
            char m_ucRace;
            CMsg **m_ppMsg;
            unsigned int m_uiSize;
            CNetIndexList m_kEmptyInxList;
            CNetIndexList m_kUseInxList;
            CNetIndexList m_kWaitInxList;
        public:
            void AddEmpty(struct CMsg* pkMsg)
            {
                using org_ptr = void (WINAPIV*)(struct CMsgList*, struct CMsg*);
                (org_ptr(0x14029eb20L))(this, pkMsg);
            };
            void AddUse(struct CMsg* pkMsg)
            {
                using org_ptr = void (WINAPIV*)(struct CMsgList*, struct CMsg*);
                (org_ptr(0x14029e9d0L))(this, pkMsg);
            };
            CMsgList(char ucRace, unsigned int uiSize)
            {
                using org_ptr = void (WINAPIV*)(struct CMsgList*, char, unsigned int);
                (org_ptr(0x14029e460L))(this, ucRace, uiSize);
            };
            void ctor_CMsgList(char ucRace, unsigned int uiSize)
            {
                using org_ptr = void (WINAPIV*)(struct CMsgList*, char, unsigned int);
                (org_ptr(0x14029e460L))(this, ucRace, uiSize);
            };
            int Cancel(unsigned int dwMsgID, struct CMsg** pkMsg)
            {
                using org_ptr = int (WINAPIV*)(struct CMsgList*, unsigned int, struct CMsg**);
                return (org_ptr(0x14029ec50L))(this, dwMsgID, pkMsg);
            };
            void CleanUp()
            {
                using org_ptr = void (WINAPIV*)(struct CMsgList*);
                (org_ptr(0x14029f050L))(this);
            };
            struct CMsg* GetEmpty()
            {
                using org_ptr = struct CMsg* (WINAPIV*)(struct CMsgList*);
                return (org_ptr(0x14029e880L))(this);
            };
            char GetRemainCnt()
            {
                using org_ptr = char (WINAPIV*)(struct CMsgList*);
                return (org_ptr(0x1402a2ae0L))(this);
            };
            struct CMsg* GetSendMsg()
            {
                using org_ptr = struct CMsg* (WINAPIV*)(struct CMsgList*);
                return (org_ptr(0x14029e920L))(this);
            };
            bool Init()
            {
                using org_ptr = bool (WINAPIV*)(struct CMsgList*);
                return (org_ptr(0x14029ee60L))(this);
            };
            bool Load(unsigned int dwCurTime)
            {
                using org_ptr = bool (WINAPIV*)(struct CMsgList*, unsigned int);
                return (org_ptr(0x14029e790L))(this, dwCurTime);
            };
            bool LoadIndexList(int iType, struct CNetIndexList* kInxList)
            {
                using org_ptr = bool (WINAPIV*)(struct CMsgList*, int, struct CNetIndexList*);
                return (org_ptr(0x14029f450L))(this, iType, kInxList);
            };
            bool LoadMsgList(struct CNetIndexList* kInxList, unsigned int dwCurTime)
            {
                using org_ptr = bool (WINAPIV*)(struct CMsgList*, struct CNetIndexList*, unsigned int);
                return (org_ptr(0x14029f780L))(this, kInxList, dwCurTime);
            };
            void Refresh()
            {
                using org_ptr = void (WINAPIV*)(struct CMsgList*);
                (org_ptr(0x14029ed00L))(this);
            };
            void Release(struct CMsg* pkMsg)
            {
                using org_ptr = void (WINAPIV*)(struct CMsgList*, struct CMsg*);
                (org_ptr(0x14029eba0L))(this, pkMsg);
            };
            void RollBack()
            {
                using org_ptr = void (WINAPIV*)(struct CMsgList*);
                (org_ptr(0x14029ea60L))(this);
            };
            bool Save()
            {
                using org_ptr = bool (WINAPIV*)(struct CMsgList*);
                return (org_ptr(0x14029e6b0L))(this);
            };
            bool SaveIndexList(int iType, struct CNetIndexList* kInxList)
            {
                using org_ptr = bool (WINAPIV*)(struct CMsgList*, int, struct CNetIndexList*);
                return (org_ptr(0x14029f120L))(this, iType, kInxList);
            };
            bool SaveMsgList(struct CNetIndexList* kInxList)
            {
                using org_ptr = bool (WINAPIV*)(struct CMsgList*, struct CNetIndexList*);
                return (org_ptr(0x14029f690L))(this, kInxList);
            };
            ~CMsgList()
            {
                using org_ptr = void (WINAPIV*)(struct CMsgList*);
                (org_ptr(0x14029e5a0L))(this);
            };
            void dtor_CMsgList()
            {
                using org_ptr = void (WINAPIV*)(struct CMsgList*);
                (org_ptr(0x14029e5a0L))(this);
            };
        };
    }; // end namespace RACE_BOSS_MSG
END_ATF_NAMESPACE
