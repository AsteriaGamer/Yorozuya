// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "ATL__CTimeSpan.hpp"
#include "GUILD_BATTLE__CGuildBattleStateList.hpp"
#include "GUILD_BATTLE__CNormalGuildBattleState.hpp"
#include "GUILD_BATTLE__CNormalGuildBattleStateCountDown.hpp"
#include "GUILD_BATTLE__CNormalGuildBattleStateDivide.hpp"
#include "GUILD_BATTLE__CNormalGuildBattleStateFin.hpp"
#include "GUILD_BATTLE__CNormalGuildBattleStateInBattle.hpp"
#include "GUILD_BATTLE__CNormalGuildBattleStateNotify.hpp"
#include "GUILD_BATTLE__CNormalGuildBattleStateReady.hpp"
#include "GUILD_BATTLE__CNormalGuildBattleStateReturn.hpp"


START_ATF_NAMESPACE
    namespace GUILD_BATTLE
    {
        struct  CNormalGuildBattleStateList : CGuildBattleStateList
        {
            enum NGB_STATE
            {
                NGB_NOTIFY = 0x0,
                NGB_READY = 0x1,
                NGB_COUNT = 0x2,
                NGB_INBATTLE = 0x3,
                NGB_DIVIDE = 0x4,
                NGB_RETURN = 0x5,
                NGB_FIN = 0x6,
                NGB_MAX = 0x7,
            };
            CNormalGuildBattleStateNotify NOTIFY;
            CNormalGuildBattleStateReady READY;
            CNormalGuildBattleStateCountDown COUNT;
            CNormalGuildBattleStateInBattle INBATTLE;
            CNormalGuildBattleStateDivide DIVIDE;
            CNormalGuildBattleStateReturn RETURN;
            CNormalGuildBattleStateFin FIN;
            CNormalGuildBattleState *m_pStateList[7];
        public:
            bool AdvanceRegenState()
            {
                using org_ptr = bool (WINAPIV*)(struct CNormalGuildBattleStateList*);
                return (org_ptr(0x1403eb220L))(this);
            };
            CNormalGuildBattleStateList()
				: CGuildBattleStateList(7, 0, 1)
            {
                using org_ptr = void (WINAPIV*)(struct CNormalGuildBattleStateList*);
                (org_ptr(0x1403f1e80L))(this);
            };
            void ctor_CNormalGuildBattleStateList()
            {
                using org_ptr = void (WINAPIV*)(struct CNormalGuildBattleStateList*);
                (org_ptr(0x1403f1e80L))(this);
            };
            bool IsInBattle()
            {
                using org_ptr = bool (WINAPIV*)(struct CNormalGuildBattleStateList*);
                return (org_ptr(0x14007c0f0L))(this);
            };
            bool IsInBattleRegenState()
            {
                using org_ptr = bool (WINAPIV*)(struct CNormalGuildBattleStateList*);
                return (org_ptr(0x1403d9500L))(this);
            };
            bool IsReadyOrCountState()
            {
                using org_ptr = bool (WINAPIV*)(struct CNormalGuildBattleStateList*);
                return (org_ptr(0x14007c020L))(this);
            };
            void SetBattleTime(struct ATL::CTimeSpan kTime)
            {
                using org_ptr = void (WINAPIV*)(struct CNormalGuildBattleStateList*, struct ATL::CTimeSpan);
                (org_ptr(0x1403d9070L))(this, kTime);
            };
            bool SetGotoRegenState()
            {
                using org_ptr = bool (WINAPIV*)(struct CNormalGuildBattleStateList*);
                return (org_ptr(0x1403f3290L))(this);
            };
            void SetNextState()
            {
                using org_ptr = void (WINAPIV*)(struct CNormalGuildBattleStateList*);
                (org_ptr(0x140080340L))(this);
            };
            ~CNormalGuildBattleStateList()
            {
                using org_ptr = void (WINAPIV*)(struct CNormalGuildBattleStateList*);
                (org_ptr(0x14007f850L))(this);
            };
            void dtor_CNormalGuildBattleStateList()
            {
                using org_ptr = void (WINAPIV*)(struct CNormalGuildBattleStateList*);
                (org_ptr(0x14007f850L))(this);
            };
        };
    }; // end namespace GUILD_BATTLE
END_ATF_NAMESPACE
