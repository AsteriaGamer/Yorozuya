// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CPlayer.hpp"
#include "CRaceBuffHolyQuestResultInfo.hpp"
#include "CRaceBuffInfoByHolyQuestList.hpp"
#include "CRaceBuffInfoByHolyQuestfGroup.hpp"


START_ATF_NAMESPACE
    struct CRaceBuffByHolyQuestProcedure
    {
        enum REQUEST_TYPE
        {
            RT_WAIT = 0x0,
            RT_CANCEL_RACE_BUFF = 0x1,
            RT_SET_RACE_BATTLE_RESULT = 0x2,
            RT_SET_RACE_BUFF = 0x3,
            RT_TYPE_MAX = 0x4,
        };
        REQUEST_TYPE m_eState;
        unsigned int m_uiProccessIndex;
        CRaceBuffHolyQuestResultInfo m_kBuffHolyQestResultInfo;
        CRaceBuffInfoByHolyQuestList m_kBuffInfo;
    public:
        CRaceBuffByHolyQuestProcedure()
        {
            using org_ptr = void (WINAPIV*)(struct CRaceBuffByHolyQuestProcedure*);
            (org_ptr(0x1403b60f0L))(this);
        };
        void ctor_CRaceBuffByHolyQuestProcedure()
        {
            using org_ptr = void (WINAPIV*)(struct CRaceBuffByHolyQuestProcedure*);
            (org_ptr(0x1403b60f0L))(this);
        };
        int CancelPlayerRaceBuff(struct CPlayer* pkPlayer, CRaceBuffInfoByHolyQuestfGroup::RESULT_TYPE eReleaseType, unsigned int uiReleaseLv)
        {
            using org_ptr = int (WINAPIV*)(CRaceBuffByHolyQuestProcedure*, struct CPlayer*, CRaceBuffInfoByHolyQuestfGroup::RESULT_TYPE, unsigned int);
            return (org_ptr(0x1403b63d0L))(this, pkPlayer, eReleaseType, uiReleaseLv);
        };
        bool CreateComplete(struct CPlayer* pkPlayer)
        {
            using org_ptr = bool (WINAPIV*)(struct CRaceBuffByHolyQuestProcedure*, struct CPlayer*);
            return (org_ptr(0x1403b6260L))(this, pkPlayer);
        };
        int GetRaceBuffLevel(struct CPlayer* pOne)
        {
            using org_ptr = int (WINAPIV*)(struct CRaceBuffByHolyQuestProcedure*, struct CPlayer*);
            return (org_ptr(0x1403b64f0L))(this, pOne);
        };
        bool Init()
        {
            using org_ptr = bool (WINAPIV*)(struct CRaceBuffByHolyQuestProcedure*);
            return (org_ptr(0x1403b61a0L))(this);
        };
        void Loop()
        {
            using org_ptr = void (WINAPIV*)(struct CRaceBuffByHolyQuestProcedure*);
            (org_ptr(0x1403b6210L))(this);
        };
        void LoopSubProcSetRaceBuff()
        {
            using org_ptr = void (WINAPIV*)(struct CRaceBuffByHolyQuestProcedure*);
            (org_ptr(0x1403b6820L))(this);
        };
        bool Request(int iType)
        {
            using org_ptr = bool (WINAPIV*)(struct CRaceBuffByHolyQuestProcedure*, int);
            return (org_ptr(0x1403b6340L))(this, iType);
        };
        bool RequestSubProcCancelRaceBuff()
        {
            using org_ptr = bool (WINAPIV*)(struct CRaceBuffByHolyQuestProcedure*);
            return (org_ptr(0x1403b6590L))(this);
        };
        bool RequestSubProcSetRaceBattleResult()
        {
            using org_ptr = bool (WINAPIV*)(struct CRaceBuffByHolyQuestProcedure*);
            return (org_ptr(0x1403b66e0L))(this);
        };
        bool RequestSubProcSetRaceBuff()
        {
            using org_ptr = bool (WINAPIV*)(struct CRaceBuffByHolyQuestProcedure*);
            return (org_ptr(0x1403b67a0L))(this);
        };
        ~CRaceBuffByHolyQuestProcedure()
        {
            using org_ptr = void (WINAPIV*)(struct CRaceBuffByHolyQuestProcedure*);
            (org_ptr(0x1403b7f30L))(this);
        };
        void dtor_CRaceBuffByHolyQuestProcedure()
        {
            using org_ptr = void (WINAPIV*)(struct CRaceBuffByHolyQuestProcedure*);
            (org_ptr(0x1403b7f30L))(this);
        };
    };
END_ATF_NAMESPACE
