// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CCharacter.hpp"
#include "CPlayer.hpp"
#include "CUnmannedTraderSchedule.hpp"

START_ATF_NAMESPACE
    #pragma pack(push, 8)
    struct CRecallRequest
    {
		typedef CUnmannedTraderSchedule::STATE STATE;

        unsigned __int16 m_usID;
        STATE m_eState;
        CPlayer *m_pkOwner;
        unsigned int m_dwOwnerSerial;
        CPlayer *m_pkDest;
        unsigned int m_dwDestSerial;
        unsigned int m_dwCloseTime;
        bool m_bRecallParty;
        bool m_bStone;
        bool m_bBattleModeUse;
    public:
        CRecallRequest(uint16_t usID)
        {
            using org_ptr = void (WINAPIV*)(struct CRecallRequest*, uint16_t);
            (org_ptr(0x14024d4d0L))(this, usID);
        };
        void ctor_CRecallRequest(uint16_t usID)
        {
            using org_ptr = void (WINAPIV*)(struct CRecallRequest*, uint16_t);
            (org_ptr(0x14024d4d0L))(this, usID);
        };
        void Clear()
        {
            using org_ptr = void (WINAPIV*)(struct CRecallRequest*);
            (org_ptr(0x14024dc90L))(this);
        };
        void Close(bool bDone)
        {
            using org_ptr = void (WINAPIV*)(struct CRecallRequest*, bool);
            (org_ptr(0x14024dd10L))(this, bDone);
        };
        uint16_t GetID()
        {
            using org_ptr = uint16_t (WINAPIV*)(struct CRecallRequest*);
            return (org_ptr(0x14024fc80L))(this);
        };
        struct CPlayer* GetOwner()
        {
            using org_ptr = struct CPlayer* (WINAPIV*)(struct CRecallRequest*);
            return (org_ptr(0x14024fca0L))(this);
        };
        bool IsBattleModeUse()
        {
            using org_ptr = bool (WINAPIV*)(struct CRecallRequest*);
            return (org_ptr(0x14024fd00L))(this);
        };
        bool IsClose()
        {
            using org_ptr = bool (WINAPIV*)(struct CRecallRequest*);
            return (org_ptr(0x14024dc20L))(this);
        };
        bool IsRecallAfterStoneState()
        {
            using org_ptr = bool (WINAPIV*)(struct CRecallRequest*);
            return (org_ptr(0x14024fce0L))(this);
        };
        bool IsRecallParty()
        {
            using org_ptr = bool (WINAPIV*)(struct CRecallRequest*);
            return (org_ptr(0x14024fcc0L))(this);
        };
        bool IsTimeOut()
        {
            using org_ptr = bool (WINAPIV*)(struct CRecallRequest*);
            return (org_ptr(0x14024ffe0L))(this);
        };
        bool IsWait()
        {
            using org_ptr = bool (WINAPIV*)(struct CRecallRequest*);
            return (org_ptr(0x14024ff80L))(this);
        };
        char Recall(struct CPlayer* pkDest, bool bStone)
        {
            using org_ptr = char (WINAPIV*)(struct CRecallRequest*, struct CPlayer*, bool);
            return (org_ptr(0x14024dac0L))(this, pkDest, bStone);
        };
        char Regist(struct CPlayer* pkObj, struct CCharacter* pkDest, bool bRecallParty, bool bStone, bool bBattleModeUse)
        {
            using org_ptr = char (WINAPIV*)(struct CRecallRequest*, struct CPlayer*, struct CCharacter*, bool, bool, bool);
            return (org_ptr(0x14024d530L))(this, pkObj, pkDest, bRecallParty, bStone, bBattleModeUse);
        };
        ~CRecallRequest()
        {
            using org_ptr = void (WINAPIV*)(struct CRecallRequest*);
            (org_ptr(0x14024d520L))(this);
        };
        void dtor_CRecallRequest()
        {
            using org_ptr = void (WINAPIV*)(struct CRecallRequest*);
            (org_ptr(0x14024d520L))(this);
        };
    };
    #pragma pack(pop)
END_ATF_NAMESPACE
