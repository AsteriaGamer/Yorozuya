// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "US__CScope_Lock_info.hpp"


START_ATF_NAMESPACE
    namespace US
    {
        namespace detail
        {
            static info::US__CScope_Lockctor_CScope_Lock2_ptr US__CScope_Lockctor_CScope_Lock2_next(nullptr);
            static info::US__CScope_Lockctor_CScope_Lock2_clbk US__CScope_Lockctor_CScope_Lock2_user(nullptr);
            static info::US__CScope_Lockdtor_CScope_Lock4_ptr US__CScope_Lockdtor_CScope_Lock4_next(nullptr);
            static info::US__CScope_Lockdtor_CScope_Lock4_clbk US__CScope_Lockdtor_CScope_Lock4_user(nullptr);
            
            static void US__CScope_Lockctor_CScope_Lock2_wrapper(struct US::CScope_Lock<US::CriticalSection>* _this, struct US::CriticalSection* mtx)
            {
               US__CScope_Lockctor_CScope_Lock2_user(_this, mtx);
            };
            static void US__CScope_Lockdtor_CScope_Lock4_wrapper(struct US::CScope_Lock<US::CriticalSection>* _this)
            {
               US__CScope_Lockdtor_CScope_Lock4_user(_this);
            };
            
            static hook_record CScope_Lock<US::CriticalSection>_functions[] = {
            {   (LPVOID)0x14041e470L,
                (LPVOID *)&US__CScope_Lockctor_CScope_Lock2_user,
                (LPVOID *)&US__CScope_Lockctor_CScope_Lock2_next,
                (LPVOID)cast_pointer_function(US__CScope_Lockctor_CScope_Lock2_wrapper),
                (LPVOID)cast_pointer_function((void(US::CScope_Lock<US::CriticalSection>::*)(struct US::CriticalSection*))&US::CScope_Lock<US::CriticalSection>::ctor_CScope_Lock) },
            {   (LPVOID)0x14041e580L,
                (LPVOID *)&US__CScope_Lockdtor_CScope_Lock4_user,
                (LPVOID *)&US__CScope_Lockdtor_CScope_Lock4_next,
                (LPVOID)cast_pointer_function(US__CScope_Lockdtor_CScope_Lock4_wrapper),
                (LPVOID)cast_pointer_function((void(US::CScope_Lock<US::CriticalSection>::*)())&US::CScope_Lock<US::CriticalSection>::dtor_CScope_Lock) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace US
END_ATF_NAMESPACE
