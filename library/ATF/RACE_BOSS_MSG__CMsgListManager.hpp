// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "RACE_BOSS_MSG__CMsg.hpp"
#include "RACE_BOSS_MSG__CMsgList.hpp"


START_ATF_NAMESPACE
    namespace RACE_BOSS_MSG
    {
        struct CMsgListManager
        {
            bool m_bEmpty;
            CMsgList *m_pkMsgList[3];
        public:
            CMsgListManager()
            {
                using org_ptr = void (WINAPIV*)(struct CMsgListManager*);
                (org_ptr(0x14029f880L))(this);
            };
            void ctor_CMsgListManager()
            {
                using org_ptr = void (WINAPIV*)(struct CMsgListManager*);
                (org_ptr(0x14029f880L))(this);
            };
            int Cancel(char ucRace, unsigned int dwMsgID, struct CMsg** pkMsg)
            {
                using org_ptr = int (WINAPIV*)(struct CMsgListManager*, char, unsigned int, struct CMsg**);
                return (org_ptr(0x14029fab0L))(this, ucRace, dwMsgID, pkMsg);
            };
            void CleanUp()
            {
                using org_ptr = void (WINAPIV*)(struct CMsgListManager*);
                (org_ptr(0x1402a0190L))(this);
            };
            void CleanUpCancel(char ucRace, struct CMsg* pkMsg)
            {
                using org_ptr = void (WINAPIV*)(struct CMsgListManager*, char, struct CMsg*);
                (org_ptr(0x14029fcc0L))(this, ucRace, pkMsg);
            };
            char GetRemainCnt(char ucRace)
            {
                using org_ptr = char (WINAPIV*)(struct CMsgListManager*, char);
                return (org_ptr(0x14029fb30L))(this, ucRace);
            };
            struct CMsg* GetSendMsg(char* ucRace)
            {
                using org_ptr = struct CMsg* (WINAPIV*)(struct CMsgListManager*, char*);
                return (org_ptr(0x14029fba0L))(this, ucRace);
            };
            bool Init()
            {
                using org_ptr = bool (WINAPIV*)(struct CMsgListManager*);
                return (org_ptr(0x1402a0090L))(this);
            };
            bool IsHaveBeenSave()
            {
                using org_ptr = bool (WINAPIV*)(struct CMsgListManager*);
                return (org_ptr(0x14029ff50L))(this);
            };
            bool Load(unsigned int dwCurTime)
            {
                using org_ptr = bool (WINAPIV*)(struct CMsgListManager*, unsigned int);
                return (org_ptr(0x14029fec0L))(this, dwCurTime);
            };
            void Refresh()
            {
                using org_ptr = void (WINAPIV*)(struct CMsgListManager*);
                (org_ptr(0x1402a0020L))(this);
            };
            void Release(char ucRace, struct CMsg* pkMsg)
            {
                using org_ptr = void (WINAPIV*)(struct CMsgListManager*, char, struct CMsg*);
                (org_ptr(0x14029fc50L))(this, ucRace, pkMsg);
            };
            void Save(char ucRace)
            {
                using org_ptr = void (WINAPIV*)(struct CMsgListManager*, char);
                (org_ptr(0x14029fe30L))(this, ucRace);
            };
            void Save()
            {
                using org_ptr = void (WINAPIV*)(struct CMsgListManager*);
                (org_ptr(0x14029fd80L))(this);
            };
            int Send(char ucRace, unsigned int dwSerial, char* pwszName, char* pwszMsg, struct CMsg** pkSend, unsigned int dbWebSendDBID)
            {
                using org_ptr = int (WINAPIV*)(struct CMsgListManager*, char, unsigned int, char*, char*, struct CMsg**, unsigned int);
                return (org_ptr(0x14029f930L))(this, ucRace, dwSerial, pwszName, pwszMsg, pkSend, dbWebSendDBID);
            };
            ~CMsgListManager()
            {
                using org_ptr = void (WINAPIV*)(struct CMsgListManager*);
                (org_ptr(0x14029f8f0L))(this);
            };
            void dtor_CMsgListManager()
            {
                using org_ptr = void (WINAPIV*)(struct CMsgListManager*);
                (org_ptr(0x14029f8f0L))(this);
            };
        };
    }; // end namespace RACE_BOSS_MSG
END_ATF_NAMESPACE
