// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "lua_tinker__void2ptr.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace info
        {
            using lua_tinker__void2ptrinvoke2_ptr = struct lua_tinker::var_base* (WINAPIV*)(void*);
            using lua_tinker__void2ptrinvoke2_clbk = struct lua_tinker::var_base* (WINAPIV*)(void*, lua_tinker__void2ptrinvoke2_ptr);
            
        }; // end namespace info
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__void2ptr.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace info
        {
            using lua_tinker__void2ptrinvoke2_ptr = struct CLuaSignalReActor* (WINAPIV*)(void*);
            using lua_tinker__void2ptrinvoke2_clbk = struct CLuaSignalReActor* (WINAPIV*)(void*, lua_tinker__void2ptrinvoke2_ptr);
            
        }; // end namespace info
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__void2ptr.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace info
        {
            using lua_tinker__void2ptrinvoke2_ptr = struct CLuaEventMgr* (WINAPIV*)(void*);
            using lua_tinker__void2ptrinvoke2_clbk = struct CLuaEventMgr* (WINAPIV*)(void*, lua_tinker__void2ptrinvoke2_ptr);
            
        }; // end namespace info
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__void2ptr.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace info
        {
            using lua_tinker__void2ptrinvoke2_ptr = struct LuaParam3* (WINAPIV*)(void*);
            using lua_tinker__void2ptrinvoke2_clbk = struct LuaParam3* (WINAPIV*)(void*, lua_tinker__void2ptrinvoke2_ptr);
            
        }; // end namespace info
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__void2ptr.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace info
        {
            using lua_tinker__void2ptrinvoke2_ptr = struct lua_tinker::user* (WINAPIV*)(void*);
            using lua_tinker__void2ptrinvoke2_clbk = struct lua_tinker::user* (WINAPIV*)(void*, lua_tinker__void2ptrinvoke2_ptr);
            
        }; // end namespace info
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__void2ptr.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace info
        {
            using lua_tinker__void2ptrinvoke2_ptr = struct CMonster* (WINAPIV*)(void*);
            using lua_tinker__void2ptrinvoke2_clbk = struct CMonster* (WINAPIV*)(void*, lua_tinker__void2ptrinvoke2_ptr);
            
        }; // end namespace info
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__void2ptr.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace info
        {
            using lua_tinker__void2ptrinvoke2_ptr = struct CLuaEventNode* (WINAPIV*)(void*);
            using lua_tinker__void2ptrinvoke2_clbk = struct CLuaEventNode* (WINAPIV*)(void*, lua_tinker__void2ptrinvoke2_ptr);
            
        }; // end namespace info
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__void2ptr.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace info
        {
            using lua_tinker__void2ptrinvoke2_ptr = struct CLuaScript* (WINAPIV*)(void*);
            using lua_tinker__void2ptrinvoke2_clbk = struct CLuaScript* (WINAPIV*)(void*, lua_tinker__void2ptrinvoke2_ptr);
            
        }; // end namespace info
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
