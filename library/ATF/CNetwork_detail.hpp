// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CNetwork_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        info::CNetworkctor_CNetwork2_ptr CNetworkctor_CNetwork2_next(nullptr);
        info::CNetworkctor_CNetwork2_clbk CNetworkctor_CNetwork2_user(nullptr);
        info::CNetworkFreeDLL4_ptr CNetworkFreeDLL4_next(nullptr);
        info::CNetworkFreeDLL4_clbk CNetworkFreeDLL4_user(nullptr);
        info::CNetworkInitNetwork6_ptr CNetworkInitNetwork6_next(nullptr);
        info::CNetworkInitNetwork6_clbk CNetworkInitNetwork6_user(nullptr);
        info::CNetworkLoadDll8_ptr CNetworkLoadDll8_next(nullptr);
        info::CNetworkLoadDll8_clbk CNetworkLoadDll8_user(nullptr);
        info::CNetworkdtor_CNetwork13_ptr CNetworkdtor_CNetwork13_next(nullptr);
        info::CNetworkdtor_CNetwork13_clbk CNetworkdtor_CNetwork13_user(nullptr);
        
        void CNetworkctor_CNetwork2_wrapper(struct CNetwork* _this)
        {
           CNetworkctor_CNetwork2_user(_this, CNetworkctor_CNetwork2_next);
        };
        void CNetworkFreeDLL4_wrapper(struct CNetwork* _this)
        {
           CNetworkFreeDLL4_user(_this, CNetworkFreeDLL4_next);
        };
        void CNetworkInitNetwork6_wrapper(struct CNetwork* _this)
        {
           CNetworkInitNetwork6_user(_this, CNetworkInitNetwork6_next);
        };
        bool CNetworkLoadDll8_wrapper(struct CNetwork* _this, char* dll_name)
        {
           return CNetworkLoadDll8_user(_this, dll_name, CNetworkLoadDll8_next);
        };
        void CNetworkdtor_CNetwork13_wrapper(struct CNetwork* _this)
        {
           CNetworkdtor_CNetwork13_user(_this, CNetworkdtor_CNetwork13_next);
        };
        
        hook_record CNetwork_functions[] = {
        {   (LPVOID)0x140410a80L,
            (LPVOID *)&CNetworkctor_CNetwork2_user,
            (LPVOID *)&CNetworkctor_CNetwork2_next,
            (LPVOID)cast_pointer_function(CNetworkctor_CNetwork2_wrapper),
            (LPVOID)cast_pointer_function((void(CNetwork::*)())&CNetwork::ctor_CNetwork) },
        {   (LPVOID)0x140410eb0L,
            (LPVOID *)&CNetworkFreeDLL4_user,
            (LPVOID *)&CNetworkFreeDLL4_next,
            (LPVOID)cast_pointer_function(CNetworkFreeDLL4_wrapper),
            (LPVOID)cast_pointer_function((void(CNetwork::*)())&CNetwork::FreeDLL) },
        {   (LPVOID)0x140410f00L,
            (LPVOID *)&CNetworkInitNetwork6_user,
            (LPVOID *)&CNetworkInitNetwork6_next,
            (LPVOID)cast_pointer_function(CNetworkInitNetwork6_wrapper),
            (LPVOID)cast_pointer_function((void(CNetwork::*)())&CNetwork::InitNetwork) },
        {   (LPVOID)0x140410c60L,
            (LPVOID *)&CNetworkLoadDll8_user,
            (LPVOID *)&CNetworkLoadDll8_next,
            (LPVOID)cast_pointer_function(CNetworkLoadDll8_wrapper),
            (LPVOID)cast_pointer_function((bool(CNetwork::*)(char*))&CNetwork::LoadDll) },
        {   (LPVOID)0x140410ab0L,
            (LPVOID *)&CNetworkdtor_CNetwork13_user,
            (LPVOID *)&CNetworkdtor_CNetwork13_next,
            (LPVOID)cast_pointer_function(CNetworkdtor_CNetwork13_wrapper),
            (LPVOID)cast_pointer_function((void(CNetwork::*)())&CNetwork::dtor_CNetwork) },
        
        };
        
    }; // end namespace detail
END_ATF_NAMESPACE
