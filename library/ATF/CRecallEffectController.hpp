// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CCharacter.hpp"
#include "CMyTimer.hpp"
#include "CNetIndexList.hpp"
#include "CPlayer.hpp"
#include "CRecallRequest.hpp"


START_ATF_NAMESPACE
    struct CRecallEffectController
    {
        unsigned int m_uiInfoTotCnt;
        CRecallRequest **m_ppkReqeust;
        CMyTimer *m_pkTimer;
        CNetIndexList *m_pkEmptyInxList;
        CNetIndexList *m_pkUseInxList;
    public:
        CRecallEffectController()
        {
            using org_ptr = void (WINAPIV*)(struct CRecallEffectController*);
            (org_ptr(0x14024dd80L))(this);
        };
        void ctor_CRecallEffectController()
        {
            using org_ptr = void (WINAPIV*)(struct CRecallEffectController*);
            (org_ptr(0x14024dd80L))(this);
        };
        void CleanUp()
        {
            using org_ptr = void (WINAPIV*)(struct CRecallEffectController*);
            (org_ptr(0x14024eb70L))(this);
        };
        void Close(struct CRecallRequest* pkRequest, bool bDone)
        {
            using org_ptr = void (WINAPIV*)(struct CRecallEffectController*, struct CRecallRequest*, bool);
            (org_ptr(0x14024eea0L))(this, pkRequest, bDone);
        };
        void DecideRecall(uint16_t dwRequestID, char byAgree, struct CPlayer* pkObj)
        {
            using org_ptr = void (WINAPIV*)(struct CRecallEffectController*, uint16_t, char, struct CPlayer*);
            (org_ptr(0x14024e430L))(this, dwRequestID, byAgree, pkObj);
        };
        static void Destroy()
        {
            using org_ptr = void (WINAPIV*)();
            (org_ptr(0x14024dec0L))();
        };
        struct CRecallRequest* GetEmpty()
        {
            using org_ptr = struct CRecallRequest* (WINAPIV*)(struct CRecallEffectController*);
            return (org_ptr(0x14024f040L))(this);
        };
        char GetResistedRecall(uint16_t wID, struct CRecallRequest** pkRequest)
        {
            using org_ptr = char (WINAPIV*)(struct CRecallEffectController*, uint16_t, struct CRecallRequest**);
            return (org_ptr(0x14024f0f0L))(this, wID, pkRequest);
        };
        bool Init(unsigned int uiSize)
        {
            using org_ptr = bool (WINAPIV*)(struct CRecallEffectController*, unsigned int);
            return (org_ptr(0x14024df40L))(this, uiSize);
        };
        static struct CRecallEffectController* Instance()
        {
            using org_ptr = struct CRecallEffectController* (WINAPIV*)();
            return (org_ptr(0x14024de00L))();
        };
        void OnLoop()
        {
            using org_ptr = void (WINAPIV*)(struct CRecallEffectController*);
            (org_ptr(0x14024eb10L))(this);
        };
        char ProcessRequestRecall(struct CPlayer* pkPerformer, struct CCharacter* pkDest, struct CRecallRequest** pkRequest, bool bRecallParty, bool bStone, bool bBattleModeUse)
        {
            using org_ptr = char (WINAPIV*)(struct CRecallEffectController*, struct CPlayer*, struct CCharacter*, struct CRecallRequest**, bool, bool, bool);
            return (org_ptr(0x14024ef50L))(this, pkPerformer, pkDest, pkRequest, bRecallParty, bStone, bBattleModeUse);
        };
        bool RequestRecall(struct CPlayer* pkPerformer, struct CCharacter* pkDest, bool bRecallParty, bool bStone, bool bBattleModeUse)
        {
            using org_ptr = bool (WINAPIV*)(struct CRecallEffectController*, struct CPlayer*, struct CCharacter*, bool, bool, bool);
            return (org_ptr(0x14024e340L))(this, pkPerformer, pkDest, bRecallParty, bStone, bBattleModeUse);
        };
        void SendDecideRecallErrorResultToDest(char byErr, struct CPlayer* pkDest, int nCallerMapCode)
        {
            using org_ptr = void (WINAPIV*)(struct CRecallEffectController*, char, struct CPlayer*, int);
            (org_ptr(0x14024f3a0L))(this, byErr, pkDest, nCallerMapCode);
        };
        void SendRecallReqeustResult(char byRet, struct CPlayer* pkObj)
        {
            using org_ptr = void (WINAPIV*)(struct CRecallEffectController*, char, struct CPlayer*);
            (org_ptr(0x14024f1e0L))(this, byRet, pkObj);
        };
        void SendRecallReqeustToDest(uint16_t wRequestID, struct CPlayer* pkPerformer, struct CPlayer* pkDest)
        {
            using org_ptr = void (WINAPIV*)(struct CRecallEffectController*, uint16_t, struct CPlayer*, struct CPlayer*);
            (org_ptr(0x14024f2c0L))(this, wRequestID, pkPerformer, pkDest);
        };
        void UpdateClose()
        {
            using org_ptr = void (WINAPIV*)(struct CRecallEffectController*);
            (org_ptr(0x14024edb0L))(this);
        };
        ~CRecallEffectController()
        {
            using org_ptr = void (WINAPIV*)(struct CRecallEffectController*);
            (org_ptr(0x14024ddc0L))(this);
        };
        void dtor_CRecallEffectController()
        {
            using org_ptr = void (WINAPIV*)(struct CRecallEffectController*);
            (org_ptr(0x14024ddc0L))(this);
        };
    };
END_ATF_NAMESPACE
