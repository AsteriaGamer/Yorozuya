// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CCryptParam.hpp"
#include "CTSingleton.hpp"
#include "CryptoPP.hpp"

/*
START_ATF_NAMESPACE
    struct  CCryptor : CTSingleton<CCryptor>
    {
        CCryptParam *m_pkParam;
        CryptoPP::SHA256 *m_pHash;
        CryptoPP::AutoSeededRandomPool *m_prng;
    public:
        CCryptor()
        {
            using org_ptr = void (WINAPIV*)(struct CCryptor*);
            (org_ptr(0x1401bf910L))(this);
        };
        void ctor_CCryptor()
        {
            using org_ptr = void (WINAPIV*)(struct CCryptor*);
            (org_ptr(0x1401bf910L))(this);
        };
        uint64_t CiphertextLength(uint64_t tMaxUseSize)
        {
            using org_ptr = uint64_t (WINAPIV*)(struct CCryptor*, uint64_t);
            return (org_ptr(0x14046b3b0L))(this, tMaxUseSize);
        };
        bool CreateKey()
        {
            using org_ptr = bool (WINAPIV*)(struct CCryptor*);
            return (org_ptr(0x14046b510L))(this);
        };
        bool Decrypt(char* pCipherText, uint64_t tCipherTextLength, char* pText, uint64_t tLength)
        {
            using org_ptr = bool (WINAPIV*)(struct CCryptor*, char*, uint64_t, char*, uint64_t);
            return (org_ptr(0x14046b4f0L))(this, pCipherText, tCipherTextLength, pText, tLength);
        };
        bool Encrypt(char* pText, uint64_t tLength, char* pCipherText, uint64_t tCipherTextLength)
        {
            using org_ptr = bool (WINAPIV*)(struct CCryptor*, char*, uint64_t, char*, uint64_t);
            return (org_ptr(0x14046b470L))(this, pText, tLength, pCipherText, tCipherTextLength);
        };
        void GenerateBlock(char* output, uint64_t size)
        {
            using org_ptr = void (WINAPIV*)(struct CCryptor*, char*, uint64_t);
            (org_ptr(0x14046b550L))(this, output, size);
        };
        bool GetKeyStr(char* szKeyStr, uint64_t tBuffSize)
        {
            using org_ptr = bool (WINAPIV*)(struct CCryptor*, char*, uint64_t);
            return (org_ptr(0x14046b530L))(this, szKeyStr, tBuffSize);
        };
        bool Init(char* szKeyPath, bool bUseCreate)
        {
            using org_ptr = bool (WINAPIV*)(struct CCryptor*, char*, bool);
            return (org_ptr(0x14046b0d0L))(this, szKeyPath, bUseCreate);
        };
        bool MakeHash(char* pBuff, uint64_t tBufSize, char* pHash, uint64_t tHashSize)
        {
            using org_ptr = bool (WINAPIV*)(struct CCryptor*, char*, uint64_t, char*, uint64_t);
            return (org_ptr(0x14046b5c0L))(this, pBuff, tBufSize, pHash, tHashSize);
        };
        uint64_t MaxPlaintextLength(uint64_t ciphertextLength)
        {
            using org_ptr = uint64_t (WINAPIV*)(struct CCryptor*, uint64_t);
            return (org_ptr(0x14046b410L))(this, ciphertextLength);
        };
        bool SaveKey()
        {
            using org_ptr = bool (WINAPIV*)(struct CCryptor*);
            return (org_ptr(0x14046b520L))(this);
        };
        bool VerifyHash(char* pBuff, uint64_t tBufSize, char* pHash, uint64_t tHashSize)
        {
            using org_ptr = bool (WINAPIV*)(struct CCryptor*, char*, uint64_t, char*, uint64_t);
            return (org_ptr(0x14046b780L))(this, pBuff, tBufSize, pHash, tHashSize);
        };
        ~CCryptor()
        {
            using org_ptr = void (WINAPIV*)(struct CCryptor*);
            (org_ptr(0x14046af70L))(this);
        };
        void dtor_CCryptor()
        {
            using org_ptr = void (WINAPIV*)(struct CCryptor*);
            (org_ptr(0x14046af70L))(this);
        };
    };
END_ATF_NAMESPACE
*/