// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CDarkHole.hpp"
#include "CDarkHoleChannel.hpp"
#include "CDarkHoleDungeonQuestSetup.hpp"
#include "CPlayer.hpp"


START_ATF_NAMESPACE
    struct  CDarkHoleDungeonQuest : CDarkHoleDungeonQuestSetup
    {
        bool m_bLoad;
        CDarkHoleChannel m_Channel[128];
        unsigned int m_dwCheckLastTime;
        unsigned int m_dwChannelSerialCounter;
    public:
        CDarkHoleDungeonQuest()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleDungeonQuest*);
            (org_ptr(0x140265eb0L))(this);
        };
        void ctor_CDarkHoleDungeonQuest()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleDungeonQuest*);
            (org_ptr(0x140265eb0L))(this);
        };
        struct CDarkHoleChannel* CanOpenChannel(int nQuestIndex)
        {
            using org_ptr = struct CDarkHoleChannel* (WINAPIV*)(struct CDarkHoleDungeonQuest*, int);
            return (org_ptr(0x140266440L))(this, nQuestIndex);
        };
        void CheckQuestOnLoop()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleDungeonQuest*);
            (org_ptr(0x1402664e0L))(this);
        };
        struct CDarkHoleChannel* GetChannel(unsigned int dwChannelIndex)
        {
            using org_ptr = struct CDarkHoleChannel* (WINAPIV*)(struct CDarkHoleDungeonQuest*, unsigned int);
            return (org_ptr(0x140099510L))(this, dwChannelIndex);
        };
        bool LoadDarkHoleQuest()
        {
            using org_ptr = bool (WINAPIV*)(struct CDarkHoleDungeonQuest*);
            return (org_ptr(0x140266170L))(this);
        };
        struct CDarkHoleChannel* OpenChannel(int nQuestIndex, struct CPlayer* pOpener, struct CDarkHole* pHoleObj)
        {
            using org_ptr = struct CDarkHoleChannel* (WINAPIV*)(struct CDarkHoleDungeonQuest*, int, struct CPlayer*, struct CDarkHole*);
            return (org_ptr(0x140266330L))(this, nQuestIndex, pOpener, pHoleObj);
        };
        int SearchEmptyDarkHoleChannel()
        {
            using org_ptr = int (WINAPIV*)(struct CDarkHoleDungeonQuest*);
            return (org_ptr(0x1402666d0L))(this);
        };
        int SearchEmptyDarkHoleLayer(int nQuestIndex)
        {
            using org_ptr = int (WINAPIV*)(struct CDarkHoleDungeonQuest*, int);
            return (org_ptr(0x140266760L))(this, nQuestIndex);
        };
        struct CDarkHoleChannel* SearchOncePlayedChannel(unsigned int dwMemberSerial)
        {
            using org_ptr = struct CDarkHoleChannel* (WINAPIV*)(struct CDarkHoleDungeonQuest*, unsigned int);
            return (org_ptr(0x1402665c0L))(this, dwMemberSerial);
        };
        ~CDarkHoleDungeonQuest()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleDungeonQuest*);
            (org_ptr(0x140265fe0L))(this);
        };
        void dtor_CDarkHoleDungeonQuest()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleDungeonQuest*);
            (org_ptr(0x140265fe0L))(this);
        };
    };
END_ATF_NAMESPACE
