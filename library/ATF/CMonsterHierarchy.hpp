// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CMonster.hpp"
#include "CMonsterHierarchyVtbl.hpp"
#include "_monster_create_setdata.hpp"


START_ATF_NAMESPACE
    #pragma pack(push, 8)
    struct CMonsterHierarchy
    {
        CMonsterHierarchyVtbl *vfptr;
        unsigned int m_dwTotalCount;
        CMonster *m_pThisMon;
        CMonster *m_pParentMon;
        unsigned int m_dwParentSerial;
        CMonster *m_pChildMon[3][10];
        unsigned int m_dwMonCount[3];
        char m_byChildMonSetNum;
        unsigned int m_dwChildRecallTime;
    public:
        CMonsterHierarchy()
        {
            using org_ptr = void (WINAPIV*)(struct CMonsterHierarchy*);
            (org_ptr(0x14014b660L))(this);
        };
        void ctor_CMonsterHierarchy()
        {
            using org_ptr = void (WINAPIV*)(struct CMonsterHierarchy*);
            (org_ptr(0x14014b660L))(this);
        };
        char ChildKindCount()
        {
            using org_ptr = char (WINAPIV*)(struct CMonsterHierarchy*);
            return (org_ptr(0x14014c320L))(this);
        };
        struct CMonster* GetChild(int nKind, int nIndex)
        {
            using org_ptr = struct CMonster* (WINAPIV*)(struct CMonsterHierarchy*, int, int);
            return (org_ptr(0x140157da0L))(this, nKind, nIndex);
        };
        unsigned int GetChildCount(int nKindIndex)
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CMonsterHierarchy*, int);
            return (org_ptr(0x140161530L))(this, nKindIndex);
        };
        struct CMonster* GetParent()
        {
            using org_ptr = struct CMonster* (WINAPIV*)(struct CMonsterHierarchy*);
            return (org_ptr(0x14014c300L))(this);
        };
        void Init()
        {
            using org_ptr = void (WINAPIV*)(struct CMonsterHierarchy*);
            (org_ptr(0x140157370L))(this);
        };
        void OnChildMonsterCreate(struct _monster_create_setdata* pData)
        {
            using org_ptr = void (WINAPIV*)(struct CMonsterHierarchy*, struct _monster_create_setdata*);
            (org_ptr(0x140157450L))(this, pData);
        };
        void OnChildMonsterDestroy()
        {
            using org_ptr = void (WINAPIV*)(struct CMonsterHierarchy*);
            (org_ptr(0x140157870L))(this);
        };
        void OnChildRegenLoop()
        {
            using org_ptr = void (WINAPIV*)(struct CMonsterHierarchy*);
            (org_ptr(0x140157590L))(this);
        };
        void OnlyOnceInit(struct CMonster* pThis)
        {
            using org_ptr = void (WINAPIV*)(struct CMonsterHierarchy*, struct CMonster*);
            (org_ptr(0x140157300L))(this, pThis);
        };
        int PopChildMon(struct CMonster* pMon)
        {
            using org_ptr = int (WINAPIV*)(struct CMonsterHierarchy*, struct CMonster*);
            return (org_ptr(0x140157aa0L))(this, pMon);
        };
        void PopChildMonAll()
        {
            using org_ptr = void (WINAPIV*)(struct CMonsterHierarchy*);
            (org_ptr(0x140157be0L))(this);
        };
        int PushChildMon(int nKind, struct CMonster* pMon)
        {
            using org_ptr = int (WINAPIV*)(struct CMonsterHierarchy*, int, struct CMonster*);
            return (org_ptr(0x140157990L))(this, nKind, pMon);
        };
        int SearchChildMon(struct CMonster* pMon)
        {
            using org_ptr = int (WINAPIV*)(struct CMonsterHierarchy*, struct CMonster*);
            return (org_ptr(0x140157d00L))(this, pMon);
        };
        int SetParent(struct CMonster* pMon)
        {
            using org_ptr = int (WINAPIV*)(struct CMonsterHierarchy*, struct CMonster*);
            return (org_ptr(0x140157960L))(this, pMon);
        };
        ~CMonsterHierarchy()
        {
            using org_ptr = void (WINAPIV*)(struct CMonsterHierarchy*);
            (org_ptr(0x140157350L))(this);
        };
        void dtor_CMonsterHierarchy()
        {
            using org_ptr = void (WINAPIV*)(struct CMonsterHierarchy*);
            (org_ptr(0x140157350L))(this);
        };
    };
    #pragma pack(pop)
END_ATF_NAMESPACE
