// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CryptoPP_info.hpp"

/*
START_ATF_NAMESPACE
    namespace detail
    {
        static info::CryptoPPAdd1_ptr CryptoPPAdd1_next(nullptr);
        static info::CryptoPPAdd1_clbk CryptoPPAdd1_user(nullptr);
        static info::CryptoPPAlmostInverse2_ptr CryptoPPAlmostInverse2_next(nullptr);
        static info::CryptoPPAlmostInverse2_clbk CryptoPPAlmostInverse2_user(nullptr);
        static info::CryptoPPAndWords3_ptr CryptoPPAndWords3_next(nullptr);
        static info::CryptoPPAndWords3_clbk CryptoPPAndWords3_user(nullptr);
        static info::CryptoPPAssignFromHelper5_ptr CryptoPPAssignFromHelper5_next(nullptr);
        static info::CryptoPPAssignFromHelper5_clbk CryptoPPAssignFromHelper5_user(nullptr);
        static info::CryptoPPAssignFromHelper7_ptr CryptoPPAssignFromHelper7_next(nullptr);
        static info::CryptoPPAssignFromHelper7_clbk CryptoPPAssignFromHelper7_user(nullptr);
        static info::CryptoPPAssignFromHelper9_ptr CryptoPPAssignFromHelper9_next(nullptr);
        static info::CryptoPPAssignFromHelper9_clbk CryptoPPAssignFromHelper9_user(nullptr);
        static info::CryptoPPAssignFromHelper11_ptr CryptoPPAssignFromHelper11_next(nullptr);
        static info::CryptoPPAssignFromHelper11_clbk CryptoPPAssignFromHelper11_user(nullptr);
        static info::CryptoPPAssignIntToInteger12_ptr CryptoPPAssignIntToInteger12_next(nullptr);
        static info::CryptoPPAssignIntToInteger12_clbk CryptoPPAssignIntToInteger12_user(nullptr);
        static info::CryptoPPAsymmetricMultiply13_ptr CryptoPPAsymmetricMultiply13_next(nullptr);
        static info::CryptoPPAsymmetricMultiply13_clbk CryptoPPAsymmetricMultiply13_user(nullptr);
        static info::CryptoPPBERDecodeError14_ptr CryptoPPBERDecodeError14_next(nullptr);
        static info::CryptoPPBERDecodeError14_clbk CryptoPPBERDecodeError14_user(nullptr);
        static info::CryptoPPBERDecodeGF2NP15_ptr CryptoPPBERDecodeGF2NP15_next(nullptr);
        static info::CryptoPPBERDecodeGF2NP15_clbk CryptoPPBERDecodeGF2NP15_user(nullptr);
        static info::CryptoPPBERDecodeNull16_ptr CryptoPPBERDecodeNull16_next(nullptr);
        static info::CryptoPPBERDecodeNull16_clbk CryptoPPBERDecodeNull16_user(nullptr);
        static info::CryptoPPBERDecodeOctetString17_ptr CryptoPPBERDecodeOctetString17_next(nullptr);
        static info::CryptoPPBERDecodeOctetString17_clbk CryptoPPBERDecodeOctetString17_user(nullptr);
        static info::CryptoPPBERDecodeUnsigned18_ptr CryptoPPBERDecodeUnsigned18_next(nullptr);
        static info::CryptoPPBERDecodeUnsigned18_clbk CryptoPPBERDecodeUnsigned18_user(nullptr);
        static info::CryptoPPBERLengthDecode19_ptr CryptoPPBERLengthDecode19_next(nullptr);
        static info::CryptoPPBERLengthDecode19_clbk CryptoPPBERLengthDecode19_user(nullptr);
        static info::CryptoPPBERLengthDecode20_ptr CryptoPPBERLengthDecode20_next(nullptr);
        static info::CryptoPPBERLengthDecode20_clbk CryptoPPBERLengthDecode20_user(nullptr);
        static info::CryptoPPBaseline_Multiply1621_ptr CryptoPPBaseline_Multiply1621_next(nullptr);
        static info::CryptoPPBaseline_Multiply1621_clbk CryptoPPBaseline_Multiply1621_user(nullptr);
        static info::CryptoPPBaseline_Multiply222_ptr CryptoPPBaseline_Multiply222_next(nullptr);
        static info::CryptoPPBaseline_Multiply222_clbk CryptoPPBaseline_Multiply222_user(nullptr);
        static info::CryptoPPBaseline_Multiply423_ptr CryptoPPBaseline_Multiply423_next(nullptr);
        static info::CryptoPPBaseline_Multiply423_clbk CryptoPPBaseline_Multiply423_user(nullptr);
        static info::CryptoPPBaseline_Multiply824_ptr CryptoPPBaseline_Multiply824_next(nullptr);
        static info::CryptoPPBaseline_Multiply824_clbk CryptoPPBaseline_Multiply824_user(nullptr);
        static info::CryptoPPBaseline_MultiplyBottom1625_ptr CryptoPPBaseline_MultiplyBottom1625_next(nullptr);
        static info::CryptoPPBaseline_MultiplyBottom1625_clbk CryptoPPBaseline_MultiplyBottom1625_user(nullptr);
        static info::CryptoPPBaseline_MultiplyBottom226_ptr CryptoPPBaseline_MultiplyBottom226_next(nullptr);
        static info::CryptoPPBaseline_MultiplyBottom226_clbk CryptoPPBaseline_MultiplyBottom226_user(nullptr);
        static info::CryptoPPBaseline_MultiplyBottom427_ptr CryptoPPBaseline_MultiplyBottom427_next(nullptr);
        static info::CryptoPPBaseline_MultiplyBottom427_clbk CryptoPPBaseline_MultiplyBottom427_user(nullptr);
        static info::CryptoPPBaseline_MultiplyBottom828_ptr CryptoPPBaseline_MultiplyBottom828_next(nullptr);
        static info::CryptoPPBaseline_MultiplyBottom828_clbk CryptoPPBaseline_MultiplyBottom828_user(nullptr);
        static info::CryptoPPBaseline_MultiplyTop1629_ptr CryptoPPBaseline_MultiplyTop1629_next(nullptr);
        static info::CryptoPPBaseline_MultiplyTop1629_clbk CryptoPPBaseline_MultiplyTop1629_user(nullptr);
        static info::CryptoPPBaseline_MultiplyTop230_ptr CryptoPPBaseline_MultiplyTop230_next(nullptr);
        static info::CryptoPPBaseline_MultiplyTop230_clbk CryptoPPBaseline_MultiplyTop230_user(nullptr);
        static info::CryptoPPBaseline_MultiplyTop431_ptr CryptoPPBaseline_MultiplyTop431_next(nullptr);
        static info::CryptoPPBaseline_MultiplyTop431_clbk CryptoPPBaseline_MultiplyTop431_user(nullptr);
        static info::CryptoPPBaseline_MultiplyTop832_ptr CryptoPPBaseline_MultiplyTop832_next(nullptr);
        static info::CryptoPPBaseline_MultiplyTop832_clbk CryptoPPBaseline_MultiplyTop832_user(nullptr);
        static info::CryptoPPBaseline_Square1633_ptr CryptoPPBaseline_Square1633_next(nullptr);
        static info::CryptoPPBaseline_Square1633_clbk CryptoPPBaseline_Square1633_user(nullptr);
        static info::CryptoPPBaseline_Square234_ptr CryptoPPBaseline_Square234_next(nullptr);
        static info::CryptoPPBaseline_Square234_clbk CryptoPPBaseline_Square234_user(nullptr);
        static info::CryptoPPBaseline_Square435_ptr CryptoPPBaseline_Square435_next(nullptr);
        static info::CryptoPPBaseline_Square435_clbk CryptoPPBaseline_Square435_user(nullptr);
        static info::CryptoPPBaseline_Square836_ptr CryptoPPBaseline_Square836_next(nullptr);
        static info::CryptoPPBaseline_Square836_clbk CryptoPPBaseline_Square836_user(nullptr);
        static info::CryptoPPBitsToBytes37_ptr CryptoPPBitsToBytes37_next(nullptr);
        static info::CryptoPPBitsToBytes37_clbk CryptoPPBitsToBytes37_user(nullptr);
        static info::CryptoPPBitsToWords38_ptr CryptoPPBitsToWords38_next(nullptr);
        static info::CryptoPPBitsToWords38_clbk CryptoPPBitsToWords38_user(nullptr);
        static info::CryptoPPByteReverse40_ptr CryptoPPByteReverse40_next(nullptr);
        static info::CryptoPPByteReverse40_clbk CryptoPPByteReverse40_user(nullptr);
        static info::CryptoPPByteReverse41_ptr CryptoPPByteReverse41_next(nullptr);
        static info::CryptoPPByteReverse41_clbk CryptoPPByteReverse41_user(nullptr);
        static info::CryptoPPByteReverse42_ptr CryptoPPByteReverse42_next(nullptr);
        static info::CryptoPPByteReverse42_clbk CryptoPPByteReverse42_user(nullptr);
        static info::CryptoPPBytesToWords43_ptr CryptoPPBytesToWords43_next(nullptr);
        static info::CryptoPPBytesToWords43_clbk CryptoPPBytesToWords43_user(nullptr);
        static info::CryptoPPCRT44_ptr CryptoPPCRT44_next(nullptr);
        static info::CryptoPPCRT44_clbk CryptoPPCRT44_user(nullptr);
        static info::CryptoPPCRT45_ptr CryptoPPCRT45_next(nullptr);
        static info::CryptoPPCRT45_clbk CryptoPPCRT45_user(nullptr);
        static info::CryptoPPCallNewHandler46_ptr CryptoPPCallNewHandler46_next(nullptr);
        static info::CryptoPPCallNewHandler46_clbk CryptoPPCallNewHandler46_user(nullptr);
        static info::CryptoPPConditionalByteReverse48_ptr CryptoPPConditionalByteReverse48_next(nullptr);
        static info::CryptoPPConditionalByteReverse48_clbk CryptoPPConditionalByteReverse48_user(nullptr);
        static info::CryptoPPCopyOrZero49_ptr CryptoPPCopyOrZero49_next(nullptr);
        static info::CryptoPPCopyOrZero49_clbk CryptoPPCopyOrZero49_user(nullptr);
        static info::CryptoPPCopyWords50_ptr CryptoPPCopyWords50_next(nullptr);
        static info::CryptoPPCopyWords50_clbk CryptoPPCopyWords50_user(nullptr);
        static info::CryptoPPCountWords51_ptr CryptoPPCountWords51_next(nullptr);
        static info::CryptoPPCountWords51_clbk CryptoPPCountWords51_user(nullptr);
        static info::CryptoPPCpuId52_ptr CryptoPPCpuId52_next(nullptr);
        static info::CryptoPPCpuId52_clbk CryptoPPCpuId52_user(nullptr);
        static info::CryptoPPDEREncodeBitString53_ptr CryptoPPDEREncodeBitString53_next(nullptr);
        static info::CryptoPPDEREncodeBitString53_clbk CryptoPPDEREncodeBitString53_user(nullptr);
        static info::CryptoPPDEREncodeNull54_ptr CryptoPPDEREncodeNull54_next(nullptr);
        static info::CryptoPPDEREncodeNull54_clbk CryptoPPDEREncodeNull54_user(nullptr);
        static info::CryptoPPDEREncodeOctetString55_ptr CryptoPPDEREncodeOctetString55_next(nullptr);
        static info::CryptoPPDEREncodeOctetString55_clbk CryptoPPDEREncodeOctetString55_user(nullptr);
        static info::CryptoPPDERLengthEncode56_ptr CryptoPPDERLengthEncode56_next(nullptr);
        static info::CryptoPPDERLengthEncode56_clbk CryptoPPDERLengthEncode56_user(nullptr);
        static info::CryptoPPDERReencode57_ptr CryptoPPDERReencode57_next(nullptr);
        static info::CryptoPPDERReencode57_clbk CryptoPPDERReencode57_user(nullptr);
        static info::CryptoPPDES_VC60Workaround58_ptr CryptoPPDES_VC60Workaround58_next(nullptr);
        static info::CryptoPPDES_VC60Workaround58_clbk CryptoPPDES_VC60Workaround58_user(nullptr);
        static info::CryptoPPDetectX86Features59_ptr CryptoPPDetectX86Features59_next(nullptr);
        static info::CryptoPPDetectX86Features59_clbk CryptoPPDetectX86Features59_user(nullptr);
        static info::CryptoPPDiscreteLogWorkFactor60_ptr CryptoPPDiscreteLogWorkFactor60_next(nullptr);
        static info::CryptoPPDiscreteLogWorkFactor60_clbk CryptoPPDiscreteLogWorkFactor60_user(nullptr);
        static info::CryptoPPDivide61_ptr CryptoPPDivide61_next(nullptr);
        static info::CryptoPPDivide61_clbk CryptoPPDivide61_user(nullptr);
        static info::CryptoPPDivideByPower2Mod62_ptr CryptoPPDivideByPower2Mod62_next(nullptr);
        static info::CryptoPPDivideByPower2Mod62_clbk CryptoPPDivideByPower2Mod62_user(nullptr);
        static info::CryptoPPDivideFourWordsByTwo63_ptr CryptoPPDivideFourWordsByTwo63_next(nullptr);
        static info::CryptoPPDivideFourWordsByTwo63_clbk CryptoPPDivideFourWordsByTwo63_user(nullptr);
        static info::CryptoPPDivideFourWordsByTwo64_ptr CryptoPPDivideFourWordsByTwo64_next(nullptr);
        static info::CryptoPPDivideFourWordsByTwo64_clbk CryptoPPDivideFourWordsByTwo64_user(nullptr);
        static info::CryptoPPEncryptionPairwiseConsistencyTest_FIPS_140_Only65_ptr CryptoPPEncryptionPairwiseConsistencyTest_FIPS_140_Only65_next(nullptr);
        static info::CryptoPPEncryptionPairwiseConsistencyTest_FIPS_140_Only65_clbk CryptoPPEncryptionPairwiseConsistencyTest_FIPS_140_Only65_user(nullptr);
        static info::CryptoPPEuclideanMultiplicativeInverse66_ptr CryptoPPEuclideanMultiplicativeInverse66_next(nullptr);
        static info::CryptoPPEuclideanMultiplicativeInverse66_clbk CryptoPPEuclideanMultiplicativeInverse66_user(nullptr);
        static info::CryptoPPFIPS_140_2_ComplianceEnabled67_ptr CryptoPPFIPS_140_2_ComplianceEnabled67_next(nullptr);
        static info::CryptoPPFIPS_140_2_ComplianceEnabled67_clbk CryptoPPFIPS_140_2_ComplianceEnabled67_user(nullptr);
        static info::CryptoPPFactoringWorkFactor68_ptr CryptoPPFactoringWorkFactor68_next(nullptr);
        static info::CryptoPPFactoringWorkFactor68_clbk CryptoPPFactoringWorkFactor68_user(nullptr);
        static info::CryptoPPFiles_TestInstantiations69_ptr CryptoPPFiles_TestInstantiations69_next(nullptr);
        static info::CryptoPPFiles_TestInstantiations69_clbk CryptoPPFiles_TestInstantiations69_user(nullptr);
        static info::CryptoPPFirstPrime70_ptr CryptoPPFirstPrime70_next(nullptr);
        static info::CryptoPPFirstPrime70_clbk CryptoPPFirstPrime70_user(nullptr);
        static info::CryptoPPGCD71_ptr CryptoPPGCD71_next(nullptr);
        static info::CryptoPPGCD71_clbk CryptoPPGCD71_user(nullptr);
        static info::CryptoPPGetAlignmentOf73_ptr CryptoPPGetAlignmentOf73_next(nullptr);
        static info::CryptoPPGetAlignmentOf73_clbk CryptoPPGetAlignmentOf73_user(nullptr);
        static info::CryptoPPGetCacheLineSize74_ptr CryptoPPGetCacheLineSize74_next(nullptr);
        static info::CryptoPPGetCacheLineSize74_clbk CryptoPPGetCacheLineSize74_user(nullptr);
        static info::CryptoPPGetNativeByteOrder76_ptr CryptoPPGetNativeByteOrder76_next(nullptr);
        static info::CryptoPPGetNativeByteOrder76_clbk CryptoPPGetNativeByteOrder76_user(nullptr);
        static info::CryptoPPGetPrimeTable77_ptr CryptoPPGetPrimeTable77_next(nullptr);
        static info::CryptoPPGetPrimeTable77_clbk CryptoPPGetPrimeTable77_user(nullptr);
        static info::CryptoPPGetValueHelper79_ptr CryptoPPGetValueHelper79_next(nullptr);
        static info::CryptoPPGetValueHelper79_clbk CryptoPPGetValueHelper79_user(nullptr);
        static info::CryptoPPGetValueHelper81_ptr CryptoPPGetValueHelper81_next(nullptr);
        static info::CryptoPPGetValueHelper81_clbk CryptoPPGetValueHelper81_user(nullptr);
        static info::CryptoPPGetValueHelper83_ptr CryptoPPGetValueHelper83_next(nullptr);
        static info::CryptoPPGetValueHelper83_clbk CryptoPPGetValueHelper83_user(nullptr);
        static info::CryptoPPGetValueHelper85_ptr CryptoPPGetValueHelper85_next(nullptr);
        static info::CryptoPPGetValueHelper85_clbk CryptoPPGetValueHelper85_user(nullptr);
        static info::CryptoPPGetValueHelper87_ptr CryptoPPGetValueHelper87_next(nullptr);
        static info::CryptoPPGetValueHelper87_clbk CryptoPPGetValueHelper87_user(nullptr);
        static info::CryptoPPHack_DefaultValueFromConstReferenceType89_ptr CryptoPPHack_DefaultValueFromConstReferenceType89_next(nullptr);
        static info::CryptoPPHack_DefaultValueFromConstReferenceType89_clbk CryptoPPHack_DefaultValueFromConstReferenceType89_user(nullptr);
        static info::CryptoPPHack_DefaultValueFromConstReferenceType91_ptr CryptoPPHack_DefaultValueFromConstReferenceType91_next(nullptr);
        static info::CryptoPPHack_DefaultValueFromConstReferenceType91_clbk CryptoPPHack_DefaultValueFromConstReferenceType91_user(nullptr);
        static info::CryptoPPHack_GetValueIntoConstReference93_ptr CryptoPPHack_GetValueIntoConstReference93_next(nullptr);
        static info::CryptoPPHack_GetValueIntoConstReference93_clbk CryptoPPHack_GetValueIntoConstReference93_user(nullptr);
        static info::CryptoPPHack_GetValueIntoConstReference95_ptr CryptoPPHack_GetValueIntoConstReference95_next(nullptr);
        static info::CryptoPPHack_GetValueIntoConstReference95_clbk CryptoPPHack_GetValueIntoConstReference95_user(nullptr);
        static info::CryptoPPHalfMontgomeryReduce96_ptr CryptoPPHalfMontgomeryReduce96_next(nullptr);
        static info::CryptoPPHalfMontgomeryReduce96_clbk CryptoPPHalfMontgomeryReduce96_user(nullptr);
        static info::CryptoPPIncrementCounterByOne97_ptr CryptoPPIncrementCounterByOne97_next(nullptr);
        static info::CryptoPPIncrementCounterByOne97_clbk CryptoPPIncrementCounterByOne97_user(nullptr);
        static info::CryptoPPIncrementCounterByOne98_ptr CryptoPPIncrementCounterByOne98_next(nullptr);
        static info::CryptoPPIncrementCounterByOne98_clbk CryptoPPIncrementCounterByOne98_user(nullptr);
        static info::CryptoPPInverseLucas99_ptr CryptoPPInverseLucas99_next(nullptr);
        static info::CryptoPPInverseLucas99_clbk CryptoPPInverseLucas99_user(nullptr);
        static info::CryptoPPInverseLucas100_ptr CryptoPPInverseLucas100_next(nullptr);
        static info::CryptoPPInverseLucas100_clbk CryptoPPInverseLucas100_user(nullptr);
        static info::CryptoPPIsAlignedOn102_ptr CryptoPPIsAlignedOn102_next(nullptr);
        static info::CryptoPPIsAlignedOn102_clbk CryptoPPIsAlignedOn102_user(nullptr);
        static info::CryptoPPIsFermatProbablePrime103_ptr CryptoPPIsFermatProbablePrime103_next(nullptr);
        static info::CryptoPPIsFermatProbablePrime103_clbk CryptoPPIsFermatProbablePrime103_user(nullptr);
        static info::CryptoPPIsLucasProbablePrime104_ptr CryptoPPIsLucasProbablePrime104_next(nullptr);
        static info::CryptoPPIsLucasProbablePrime104_clbk CryptoPPIsLucasProbablePrime104_user(nullptr);
        static info::CryptoPPIsPowerOf2106_ptr CryptoPPIsPowerOf2106_next(nullptr);
        static info::CryptoPPIsPowerOf2106_clbk CryptoPPIsPowerOf2106_user(nullptr);
        static info::CryptoPPIsPrime107_ptr CryptoPPIsPrime107_next(nullptr);
        static info::CryptoPPIsPrime107_clbk CryptoPPIsPrime107_user(nullptr);
        static info::CryptoPPIsSmallPrime108_ptr CryptoPPIsSmallPrime108_next(nullptr);
        static info::CryptoPPIsSmallPrime108_clbk CryptoPPIsSmallPrime108_user(nullptr);
        static info::CryptoPPIsStrongLucasProbablePrime109_ptr CryptoPPIsStrongLucasProbablePrime109_next(nullptr);
        static info::CryptoPPIsStrongLucasProbablePrime109_clbk CryptoPPIsStrongLucasProbablePrime109_user(nullptr);
        static info::CryptoPPIsStrongProbablePrime110_ptr CryptoPPIsStrongProbablePrime110_next(nullptr);
        static info::CryptoPPIsStrongProbablePrime110_clbk CryptoPPIsStrongProbablePrime110_user(nullptr);
        static info::CryptoPPJacobi111_ptr CryptoPPJacobi111_next(nullptr);
        static info::CryptoPPJacobi111_clbk CryptoPPJacobi111_user(nullptr);
        static info::CryptoPPLucas112_ptr CryptoPPLucas112_next(nullptr);
        static info::CryptoPPLucas112_clbk CryptoPPLucas112_user(nullptr);
        static info::CryptoPPMakeParameters114_ptr CryptoPPMakeParameters114_next(nullptr);
        static info::CryptoPPMakeParameters114_clbk CryptoPPMakeParameters114_user(nullptr);
        static info::CryptoPPMaurerProvablePrime115_ptr CryptoPPMaurerProvablePrime115_next(nullptr);
        static info::CryptoPPMaurerProvablePrime115_clbk CryptoPPMaurerProvablePrime115_user(nullptr);
        static info::CryptoPPMihailescuProvablePrime116_ptr CryptoPPMihailescuProvablePrime116_next(nullptr);
        static info::CryptoPPMihailescuProvablePrime116_clbk CryptoPPMihailescuProvablePrime116_user(nullptr);
        static info::CryptoPPModPowerOf2118_ptr CryptoPPModPowerOf2118_next(nullptr);
        static info::CryptoPPModPowerOf2118_clbk CryptoPPModPowerOf2118_user(nullptr);
        static info::CryptoPPModes_TestInstantiations119_ptr CryptoPPModes_TestInstantiations119_next(nullptr);
        static info::CryptoPPModes_TestInstantiations119_clbk CryptoPPModes_TestInstantiations119_user(nullptr);
        static info::CryptoPPModularExponentiation120_ptr CryptoPPModularExponentiation120_next(nullptr);
        static info::CryptoPPModularExponentiation120_clbk CryptoPPModularExponentiation120_user(nullptr);
        static info::CryptoPPModularRoot121_ptr CryptoPPModularRoot121_next(nullptr);
        static info::CryptoPPModularRoot121_clbk CryptoPPModularRoot121_user(nullptr);
        static info::CryptoPPModularRoot122_ptr CryptoPPModularRoot122_next(nullptr);
        static info::CryptoPPModularRoot122_clbk CryptoPPModularRoot122_user(nullptr);
        static info::CryptoPPModularSquareRoot123_ptr CryptoPPModularSquareRoot123_next(nullptr);
        static info::CryptoPPModularSquareRoot123_clbk CryptoPPModularSquareRoot123_user(nullptr);
        static info::CryptoPPMontgomeryReduce124_ptr CryptoPPMontgomeryReduce124_next(nullptr);
        static info::CryptoPPMontgomeryReduce124_clbk CryptoPPMontgomeryReduce124_user(nullptr);
        static info::CryptoPPMultiply125_ptr CryptoPPMultiply125_next(nullptr);
        static info::CryptoPPMultiply125_clbk CryptoPPMultiply125_user(nullptr);
        static info::CryptoPPMultiply126_ptr CryptoPPMultiply126_next(nullptr);
        static info::CryptoPPMultiply126_clbk CryptoPPMultiply126_user(nullptr);
        static info::CryptoPPMultiplyBottom127_ptr CryptoPPMultiplyBottom127_next(nullptr);
        static info::CryptoPPMultiplyBottom127_clbk CryptoPPMultiplyBottom127_user(nullptr);
        static info::CryptoPPMultiplyByPower2Mod128_ptr CryptoPPMultiplyByPower2Mod128_next(nullptr);
        static info::CryptoPPMultiplyByPower2Mod128_clbk CryptoPPMultiplyByPower2Mod128_user(nullptr);
        static info::CryptoPPMultiplyTop129_ptr CryptoPPMultiplyTop129_next(nullptr);
        static info::CryptoPPMultiplyTop129_clbk CryptoPPMultiplyTop129_user(nullptr);
        static info::CryptoPPNativeByteOrderIs131_ptr CryptoPPNativeByteOrderIs131_next(nullptr);
        static info::CryptoPPNativeByteOrderIs131_clbk CryptoPPNativeByteOrderIs131_user(nullptr);
        static info::CryptoPPNullRNG132_ptr CryptoPPNullRNG132_next(nullptr);
        static info::CryptoPPNullRNG132_clbk CryptoPPNullRNG132_user(nullptr);
        static info::CryptoPPOS_GenerateRandomBlock133_ptr CryptoPPOS_GenerateRandomBlock133_next(nullptr);
        static info::CryptoPPOS_GenerateRandomBlock133_clbk CryptoPPOS_GenerateRandomBlock133_user(nullptr);
        static info::CryptoPPP1363_MGF1KDF2_Common134_ptr CryptoPPP1363_MGF1KDF2_Common134_next(nullptr);
        static info::CryptoPPP1363_MGF1KDF2_Common134_clbk CryptoPPP1363_MGF1KDF2_Common134_user(nullptr);
        static info::CryptoPPPositiveAdd135_ptr CryptoPPPositiveAdd135_next(nullptr);
        static info::CryptoPPPositiveAdd135_clbk CryptoPPPositiveAdd135_user(nullptr);
        static info::CryptoPPPositiveDivide136_ptr CryptoPPPositiveDivide136_next(nullptr);
        static info::CryptoPPPositiveDivide136_clbk CryptoPPPositiveDivide136_user(nullptr);
        static info::CryptoPPPositiveMultiply137_ptr CryptoPPPositiveMultiply137_next(nullptr);
        static info::CryptoPPPositiveMultiply137_clbk CryptoPPPositiveMultiply137_user(nullptr);
        static info::CryptoPPPositiveSubtract138_ptr CryptoPPPositiveSubtract138_next(nullptr);
        static info::CryptoPPPositiveSubtract138_clbk CryptoPPPositiveSubtract138_user(nullptr);
        static info::CryptoPPPowerUpSelfTestInProgressOnThisThread139_ptr CryptoPPPowerUpSelfTestInProgressOnThisThread139_next(nullptr);
        static info::CryptoPPPowerUpSelfTestInProgressOnThisThread139_clbk CryptoPPPowerUpSelfTestInProgressOnThisThread139_user(nullptr);
        static info::CryptoPPPrimeSearchInterval140_ptr CryptoPPPrimeSearchInterval140_next(nullptr);
        static info::CryptoPPPrimeSearchInterval140_clbk CryptoPPPrimeSearchInterval140_user(nullptr);
        static info::CryptoPPPutWord142_ptr CryptoPPPutWord142_next(nullptr);
        static info::CryptoPPPutWord142_clbk CryptoPPPutWord142_user(nullptr);
        static info::CryptoPPRabinMillerTest143_ptr CryptoPPRabinMillerTest143_next(nullptr);
        static info::CryptoPPRabinMillerTest143_clbk CryptoPPRabinMillerTest143_user(nullptr);
        static info::CryptoPPRecursiveInverseModPower2144_ptr CryptoPPRecursiveInverseModPower2144_next(nullptr);
        static info::CryptoPPRecursiveInverseModPower2144_clbk CryptoPPRecursiveInverseModPower2144_user(nullptr);
        static info::CryptoPPRecursiveMultiply145_ptr CryptoPPRecursiveMultiply145_next(nullptr);
        static info::CryptoPPRecursiveMultiply145_clbk CryptoPPRecursiveMultiply145_user(nullptr);
        static info::CryptoPPRecursiveMultiplyBottom146_ptr CryptoPPRecursiveMultiplyBottom146_next(nullptr);
        static info::CryptoPPRecursiveMultiplyBottom146_clbk CryptoPPRecursiveMultiplyBottom146_user(nullptr);
        static info::CryptoPPRecursiveSquare147_ptr CryptoPPRecursiveSquare147_next(nullptr);
        static info::CryptoPPRecursiveSquare147_clbk CryptoPPRecursiveSquare147_user(nullptr);
        static info::CryptoPPReverseCipherDir148_ptr CryptoPPReverseCipherDir148_next(nullptr);
        static info::CryptoPPReverseCipherDir148_clbk CryptoPPReverseCipherDir148_user(nullptr);
        static info::CryptoPPSTDMIN150_ptr CryptoPPSTDMIN150_next(nullptr);
        static info::CryptoPPSTDMIN150_clbk CryptoPPSTDMIN150_user(nullptr);
        static info::CryptoPPSaturatingSubtract152_ptr CryptoPPSaturatingSubtract152_next(nullptr);
        static info::CryptoPPSaturatingSubtract152_clbk CryptoPPSaturatingSubtract152_user(nullptr);
        static info::CryptoPPSerpent_KeySchedule153_ptr CryptoPPSerpent_KeySchedule153_next(nullptr);
        static info::CryptoPPSerpent_KeySchedule153_clbk CryptoPPSerpent_KeySchedule153_user(nullptr);
        static info::CryptoPPSetPowerUpSelfTestInProgressOnThisThread154_ptr CryptoPPSetPowerUpSelfTestInProgressOnThisThread154_next(nullptr);
        static info::CryptoPPSetPowerUpSelfTestInProgressOnThisThread154_clbk CryptoPPSetPowerUpSelfTestInProgressOnThisThread154_user(nullptr);
        static info::CryptoPPSetWords155_ptr CryptoPPSetWords155_next(nullptr);
        static info::CryptoPPSetWords155_clbk CryptoPPSetWords155_user(nullptr);
        static info::CryptoPPShiftWordsLeftByBits156_ptr CryptoPPShiftWordsLeftByBits156_next(nullptr);
        static info::CryptoPPShiftWordsLeftByBits156_clbk CryptoPPShiftWordsLeftByBits156_user(nullptr);
        static info::CryptoPPShiftWordsLeftByWords157_ptr CryptoPPShiftWordsLeftByWords157_next(nullptr);
        static info::CryptoPPShiftWordsLeftByWords157_clbk CryptoPPShiftWordsLeftByWords157_user(nullptr);
        static info::CryptoPPShiftWordsRightByBits158_ptr CryptoPPShiftWordsRightByBits158_next(nullptr);
        static info::CryptoPPShiftWordsRightByBits158_clbk CryptoPPShiftWordsRightByBits158_user(nullptr);
        static info::CryptoPPShiftWordsRightByWords159_ptr CryptoPPShiftWordsRightByWords159_next(nullptr);
        static info::CryptoPPShiftWordsRightByWords159_clbk CryptoPPShiftWordsRightByWords159_user(nullptr);
        static info::CryptoPPSignaturePairwiseConsistencyTest_FIPS_140_Only160_ptr CryptoPPSignaturePairwiseConsistencyTest_FIPS_140_Only160_next(nullptr);
        static info::CryptoPPSignaturePairwiseConsistencyTest_FIPS_140_Only160_clbk CryptoPPSignaturePairwiseConsistencyTest_FIPS_140_Only160_user(nullptr);
        static info::CryptoPPSimulatePowerUpSelfTestFailure161_ptr CryptoPPSimulatePowerUpSelfTestFailure161_next(nullptr);
        static info::CryptoPPSimulatePowerUpSelfTestFailure161_clbk CryptoPPSimulatePowerUpSelfTestFailure161_user(nullptr);
        static info::CryptoPPSmallDivisorsTest162_ptr CryptoPPSmallDivisorsTest162_next(nullptr);
        static info::CryptoPPSmallDivisorsTest162_clbk CryptoPPSmallDivisorsTest162_user(nullptr);
        static info::CryptoPPSolveModularQuadraticEquation163_ptr CryptoPPSolveModularQuadraticEquation163_next(nullptr);
        static info::CryptoPPSolveModularQuadraticEquation163_clbk CryptoPPSolveModularQuadraticEquation163_user(nullptr);
        static info::CryptoPPSquare164_ptr CryptoPPSquare164_next(nullptr);
        static info::CryptoPPSquare164_clbk CryptoPPSquare164_user(nullptr);
        static info::CryptoPPStandardReallocate166_ptr CryptoPPStandardReallocate166_next(nullptr);
        static info::CryptoPPStandardReallocate166_clbk CryptoPPStandardReallocate166_user(nullptr);
        static info::CryptoPPSubtract167_ptr CryptoPPSubtract167_next(nullptr);
        static info::CryptoPPSubtract167_clbk CryptoPPSubtract167_user(nullptr);
        static info::CryptoPPTestInstantiations_gfpcrypt168_ptr CryptoPPTestInstantiations_gfpcrypt168_next(nullptr);
        static info::CryptoPPTestInstantiations_gfpcrypt168_clbk CryptoPPTestInstantiations_gfpcrypt168_user(nullptr);
        static info::CryptoPPTheBitBucket169_ptr CryptoPPTheBitBucket169_next(nullptr);
        static info::CryptoPPTheBitBucket169_clbk CryptoPPTheBitBucket169_user(nullptr);
        static info::CryptoPPTrialDivision170_ptr CryptoPPTrialDivision170_next(nullptr);
        static info::CryptoPPTrialDivision170_clbk CryptoPPTrialDivision170_user(nullptr);
        static info::CryptoPPVerifyPrime171_ptr CryptoPPVerifyPrime171_next(nullptr);
        static info::CryptoPPVerifyPrime171_clbk CryptoPPVerifyPrime171_user(nullptr);
        static info::CryptoPPXorWords172_ptr CryptoPPXorWords172_next(nullptr);
        static info::CryptoPPXorWords172_clbk CryptoPPXorWords172_user(nullptr);
        static info::CryptoPPXorWords173_ptr CryptoPPXorWords173_next(nullptr);
        static info::CryptoPPXorWords173_clbk CryptoPPXorWords173_user(nullptr);
        static info::CryptoPPa_exp_b_mod_c174_ptr CryptoPPa_exp_b_mod_c174_next(nullptr);
        static info::CryptoPPa_exp_b_mod_c174_clbk CryptoPPa_exp_b_mod_c174_user(nullptr);
        static info::CryptoPPa_times_b_mod_c175_ptr CryptoPPa_times_b_mod_c175_next(nullptr);
        static info::CryptoPPa_times_b_mod_c175_clbk CryptoPPa_times_b_mod_c175_user(nullptr);
        static info::CryptoPPxorbuf188_ptr CryptoPPxorbuf188_next(nullptr);
        static info::CryptoPPxorbuf188_clbk CryptoPPxorbuf188_user(nullptr);
        static info::CryptoPPxorbuf189_ptr CryptoPPxorbuf189_next(nullptr);
        static info::CryptoPPxorbuf189_clbk CryptoPPxorbuf189_user(nullptr);
        
        static info::CryptoPP__Clonablector_Clonable2_ptr CryptoPP__Clonablector_Clonable2_next(nullptr);
        static info::CryptoPP__Clonablector_Clonable2_clbk CryptoPP__Clonablector_Clonable2_user(nullptr);
        static info::CryptoPP__Clonablector_Clonable3_ptr CryptoPP__Clonablector_Clonable3_next(nullptr);
        static info::CryptoPP__Clonablector_Clonable3_clbk CryptoPP__Clonablector_Clonable3_user(nullptr);
        static info::CryptoPP__ClonableClone5_ptr CryptoPP__ClonableClone5_next(nullptr);
        static info::CryptoPP__ClonableClone5_clbk CryptoPP__ClonableClone5_user(nullptr);
        static info::CryptoPP__Clonabledtor_Clonable7_ptr CryptoPP__Clonabledtor_Clonable7_next(nullptr);
        static info::CryptoPP__Clonabledtor_Clonable7_clbk CryptoPP__Clonabledtor_Clonable7_user(nullptr);
        
        static info::CryptoPP__Algorithmctor_Algorithm2_ptr CryptoPP__Algorithmctor_Algorithm2_next(nullptr);
        static info::CryptoPP__Algorithmctor_Algorithm2_clbk CryptoPP__Algorithmctor_Algorithm2_user(nullptr);
        static info::CryptoPP__Algorithmctor_Algorithm3_ptr CryptoPP__Algorithmctor_Algorithm3_next(nullptr);
        static info::CryptoPP__Algorithmctor_Algorithm3_clbk CryptoPP__Algorithmctor_Algorithm3_user(nullptr);
        static info::CryptoPP__AlgorithmAlgorithmName5_ptr CryptoPP__AlgorithmAlgorithmName5_next(nullptr);
        static info::CryptoPP__AlgorithmAlgorithmName5_clbk CryptoPP__AlgorithmAlgorithmName5_user(nullptr);
        static info::CryptoPP__Algorithmdtor_Algorithm7_ptr CryptoPP__Algorithmdtor_Algorithm7_next(nullptr);
        static info::CryptoPP__Algorithmdtor_Algorithm7_clbk CryptoPP__Algorithmdtor_Algorithm7_user(nullptr);
        
        static info::CryptoPP__RandomNumberGeneratorCanIncorporateEntropy1_ptr CryptoPP__RandomNumberGeneratorCanIncorporateEntropy1_next(nullptr);
        static info::CryptoPP__RandomNumberGeneratorCanIncorporateEntropy1_clbk CryptoPP__RandomNumberGeneratorCanIncorporateEntropy1_user(nullptr);
        static info::CryptoPP__RandomNumberGeneratorDiscardBytes2_ptr CryptoPP__RandomNumberGeneratorDiscardBytes2_next(nullptr);
        static info::CryptoPP__RandomNumberGeneratorDiscardBytes2_clbk CryptoPP__RandomNumberGeneratorDiscardBytes2_user(nullptr);
        static info::CryptoPP__RandomNumberGeneratorGenerateBit3_ptr CryptoPP__RandomNumberGeneratorGenerateBit3_next(nullptr);
        static info::CryptoPP__RandomNumberGeneratorGenerateBit3_clbk CryptoPP__RandomNumberGeneratorGenerateBit3_user(nullptr);
        static info::CryptoPP__RandomNumberGeneratorGenerateBlock4_ptr CryptoPP__RandomNumberGeneratorGenerateBlock4_next(nullptr);
        static info::CryptoPP__RandomNumberGeneratorGenerateBlock4_clbk CryptoPP__RandomNumberGeneratorGenerateBlock4_user(nullptr);
        static info::CryptoPP__RandomNumberGeneratorGenerateByte5_ptr CryptoPP__RandomNumberGeneratorGenerateByte5_next(nullptr);
        static info::CryptoPP__RandomNumberGeneratorGenerateByte5_clbk CryptoPP__RandomNumberGeneratorGenerateByte5_user(nullptr);
        static info::CryptoPP__RandomNumberGeneratorGenerateWord326_ptr CryptoPP__RandomNumberGeneratorGenerateWord326_next(nullptr);
        static info::CryptoPP__RandomNumberGeneratorGenerateWord326_clbk CryptoPP__RandomNumberGeneratorGenerateWord326_user(nullptr);
        static info::CryptoPP__RandomNumberGeneratorIncorporateEntropy7_ptr CryptoPP__RandomNumberGeneratorIncorporateEntropy7_next(nullptr);
        static info::CryptoPP__RandomNumberGeneratorIncorporateEntropy7_clbk CryptoPP__RandomNumberGeneratorIncorporateEntropy7_user(nullptr);
        static info::CryptoPP__RandomNumberGeneratorctor_RandomNumberGenerator8_ptr CryptoPP__RandomNumberGeneratorctor_RandomNumberGenerator8_next(nullptr);
        static info::CryptoPP__RandomNumberGeneratorctor_RandomNumberGenerator8_clbk CryptoPP__RandomNumberGeneratorctor_RandomNumberGenerator8_user(nullptr);
        static info::CryptoPP__RandomNumberGeneratordtor_RandomNumberGenerator10_ptr CryptoPP__RandomNumberGeneratordtor_RandomNumberGenerator10_next(nullptr);
        static info::CryptoPP__RandomNumberGeneratordtor_RandomNumberGenerator10_clbk CryptoPP__RandomNumberGeneratordtor_RandomNumberGenerator10_user(nullptr);
        
        static info::CryptoPP__NotCopyablector_NotCopyable2_ptr CryptoPP__NotCopyablector_NotCopyable2_next(nullptr);
        static info::CryptoPP__NotCopyablector_NotCopyable2_clbk CryptoPP__NotCopyablector_NotCopyable2_user(nullptr);
        
        static info::CryptoPP__BlockTransformationBlockAlignment1_ptr CryptoPP__BlockTransformationBlockAlignment1_next(nullptr);
        static info::CryptoPP__BlockTransformationBlockAlignment1_clbk CryptoPP__BlockTransformationBlockAlignment1_user(nullptr);
        static info::CryptoPP__BlockTransformationctor_BlockTransformation3_ptr CryptoPP__BlockTransformationctor_BlockTransformation3_next(nullptr);
        static info::CryptoPP__BlockTransformationctor_BlockTransformation3_clbk CryptoPP__BlockTransformationctor_BlockTransformation3_user(nullptr);
        static info::CryptoPP__BlockTransformationctor_BlockTransformation5_ptr CryptoPP__BlockTransformationctor_BlockTransformation5_next(nullptr);
        static info::CryptoPP__BlockTransformationctor_BlockTransformation5_clbk CryptoPP__BlockTransformationctor_BlockTransformation5_user(nullptr);
        static info::CryptoPP__BlockTransformationGetCipherDirection6_ptr CryptoPP__BlockTransformationGetCipherDirection6_next(nullptr);
        static info::CryptoPP__BlockTransformationGetCipherDirection6_clbk CryptoPP__BlockTransformationGetCipherDirection6_user(nullptr);
        static info::CryptoPP__BlockTransformationIsPermutation8_ptr CryptoPP__BlockTransformationIsPermutation8_next(nullptr);
        static info::CryptoPP__BlockTransformationIsPermutation8_clbk CryptoPP__BlockTransformationIsPermutation8_user(nullptr);
        static info::CryptoPP__BlockTransformationOptimalNumberOfParallelBlocks10_ptr CryptoPP__BlockTransformationOptimalNumberOfParallelBlocks10_next(nullptr);
        static info::CryptoPP__BlockTransformationOptimalNumberOfParallelBlocks10_clbk CryptoPP__BlockTransformationOptimalNumberOfParallelBlocks10_user(nullptr);
        static info::CryptoPP__BlockTransformationProcessAndXorMultipleBlocks11_ptr CryptoPP__BlockTransformationProcessAndXorMultipleBlocks11_next(nullptr);
        static info::CryptoPP__BlockTransformationProcessAndXorMultipleBlocks11_clbk CryptoPP__BlockTransformationProcessAndXorMultipleBlocks11_user(nullptr);
        static info::CryptoPP__BlockTransformationProcessBlock12_ptr CryptoPP__BlockTransformationProcessBlock12_next(nullptr);
        static info::CryptoPP__BlockTransformationProcessBlock12_clbk CryptoPP__BlockTransformationProcessBlock12_user(nullptr);
        static info::CryptoPP__BlockTransformationProcessBlock13_ptr CryptoPP__BlockTransformationProcessBlock13_next(nullptr);
        static info::CryptoPP__BlockTransformationProcessBlock13_clbk CryptoPP__BlockTransformationProcessBlock13_user(nullptr);
        static info::CryptoPP__BlockTransformationdtor_BlockTransformation15_ptr CryptoPP__BlockTransformationdtor_BlockTransformation15_next(nullptr);
        static info::CryptoPP__BlockTransformationdtor_BlockTransformation15_clbk CryptoPP__BlockTransformationdtor_BlockTransformation15_user(nullptr);
        
        static info::CryptoPP__SimpleKeyingInterfaceAssertValidKeyLength1_ptr CryptoPP__SimpleKeyingInterfaceAssertValidKeyLength1_next(nullptr);
        static info::CryptoPP__SimpleKeyingInterfaceAssertValidKeyLength1_clbk CryptoPP__SimpleKeyingInterfaceAssertValidKeyLength1_user(nullptr);
        static info::CryptoPP__SimpleKeyingInterfaceGetIVAndThrowIfInvalid2_ptr CryptoPP__SimpleKeyingInterfaceGetIVAndThrowIfInvalid2_next(nullptr);
        static info::CryptoPP__SimpleKeyingInterfaceGetIVAndThrowIfInvalid2_clbk CryptoPP__SimpleKeyingInterfaceGetIVAndThrowIfInvalid2_user(nullptr);
        static info::CryptoPP__SimpleKeyingInterfaceGetNextIV3_ptr CryptoPP__SimpleKeyingInterfaceGetNextIV3_next(nullptr);
        static info::CryptoPP__SimpleKeyingInterfaceGetNextIV3_clbk CryptoPP__SimpleKeyingInterfaceGetNextIV3_user(nullptr);
        static info::CryptoPP__SimpleKeyingInterfaceIsResynchronizable4_ptr CryptoPP__SimpleKeyingInterfaceIsResynchronizable4_next(nullptr);
        static info::CryptoPP__SimpleKeyingInterfaceIsResynchronizable4_clbk CryptoPP__SimpleKeyingInterfaceIsResynchronizable4_user(nullptr);
        static info::CryptoPP__SimpleKeyingInterfaceIsValidKeyLength6_ptr CryptoPP__SimpleKeyingInterfaceIsValidKeyLength6_next(nullptr);
        static info::CryptoPP__SimpleKeyingInterfaceIsValidKeyLength6_clbk CryptoPP__SimpleKeyingInterfaceIsValidKeyLength6_user(nullptr);
        static info::CryptoPP__SimpleKeyingInterfaceResynchronize8_ptr CryptoPP__SimpleKeyingInterfaceResynchronize8_next(nullptr);
        static info::CryptoPP__SimpleKeyingInterfaceResynchronize8_clbk CryptoPP__SimpleKeyingInterfaceResynchronize8_user(nullptr);
        static info::CryptoPP__SimpleKeyingInterfaceSetKey9_ptr CryptoPP__SimpleKeyingInterfaceSetKey9_next(nullptr);
        static info::CryptoPP__SimpleKeyingInterfaceSetKey9_clbk CryptoPP__SimpleKeyingInterfaceSetKey9_user(nullptr);
        static info::CryptoPP__SimpleKeyingInterfaceSetKeyWithIV10_ptr CryptoPP__SimpleKeyingInterfaceSetKeyWithIV10_next(nullptr);
        static info::CryptoPP__SimpleKeyingInterfaceSetKeyWithIV10_clbk CryptoPP__SimpleKeyingInterfaceSetKeyWithIV10_user(nullptr);
        static info::CryptoPP__SimpleKeyingInterfaceSetKeyWithRounds11_ptr CryptoPP__SimpleKeyingInterfaceSetKeyWithRounds11_next(nullptr);
        static info::CryptoPP__SimpleKeyingInterfaceSetKeyWithRounds11_clbk CryptoPP__SimpleKeyingInterfaceSetKeyWithRounds11_user(nullptr);
        static info::CryptoPP__SimpleKeyingInterfacector_SimpleKeyingInterface13_ptr CryptoPP__SimpleKeyingInterfacector_SimpleKeyingInterface13_next(nullptr);
        static info::CryptoPP__SimpleKeyingInterfacector_SimpleKeyingInterface13_clbk CryptoPP__SimpleKeyingInterfacector_SimpleKeyingInterface13_user(nullptr);
        static info::CryptoPP__SimpleKeyingInterfacector_SimpleKeyingInterface15_ptr CryptoPP__SimpleKeyingInterfacector_SimpleKeyingInterface15_next(nullptr);
        static info::CryptoPP__SimpleKeyingInterfacector_SimpleKeyingInterface15_clbk CryptoPP__SimpleKeyingInterfacector_SimpleKeyingInterface15_user(nullptr);
        static info::CryptoPP__SimpleKeyingInterfaceThrowIfInvalidIV16_ptr CryptoPP__SimpleKeyingInterfaceThrowIfInvalidIV16_next(nullptr);
        static info::CryptoPP__SimpleKeyingInterfaceThrowIfInvalidIV16_clbk CryptoPP__SimpleKeyingInterfaceThrowIfInvalidIV16_user(nullptr);
        static info::CryptoPP__SimpleKeyingInterfaceThrowIfInvalidKeyLength17_ptr CryptoPP__SimpleKeyingInterfaceThrowIfInvalidKeyLength17_next(nullptr);
        static info::CryptoPP__SimpleKeyingInterfaceThrowIfInvalidKeyLength17_clbk CryptoPP__SimpleKeyingInterfaceThrowIfInvalidKeyLength17_user(nullptr);
        static info::CryptoPP__SimpleKeyingInterfaceThrowIfResynchronizable18_ptr CryptoPP__SimpleKeyingInterfaceThrowIfResynchronizable18_next(nullptr);
        static info::CryptoPP__SimpleKeyingInterfaceThrowIfResynchronizable18_clbk CryptoPP__SimpleKeyingInterfaceThrowIfResynchronizable18_user(nullptr);
        static info::CryptoPP__SimpleKeyingInterfacedtor_SimpleKeyingInterface20_ptr CryptoPP__SimpleKeyingInterfacedtor_SimpleKeyingInterface20_next(nullptr);
        static info::CryptoPP__SimpleKeyingInterfacedtor_SimpleKeyingInterface20_clbk CryptoPP__SimpleKeyingInterfacedtor_SimpleKeyingInterface20_user(nullptr);
        
        static info::CryptoPP__NameValuePairsGetIntValue1_ptr CryptoPP__NameValuePairsGetIntValue1_next(nullptr);
        static info::CryptoPP__NameValuePairsGetIntValue1_clbk CryptoPP__NameValuePairsGetIntValue1_user(nullptr);
        static info::CryptoPP__NameValuePairsGetIntValueWithDefault2_ptr CryptoPP__NameValuePairsGetIntValueWithDefault2_next(nullptr);
        static info::CryptoPP__NameValuePairsGetIntValueWithDefault2_clbk CryptoPP__NameValuePairsGetIntValueWithDefault2_user(nullptr);
        static info::CryptoPP__NameValuePairsGetRequiredIntParameter3_ptr CryptoPP__NameValuePairsGetRequiredIntParameter3_next(nullptr);
        static info::CryptoPP__NameValuePairsGetRequiredIntParameter3_clbk CryptoPP__NameValuePairsGetRequiredIntParameter3_user(nullptr);
        static info::CryptoPP__NameValuePairsGetThisObject5_ptr CryptoPP__NameValuePairsGetThisObject5_next(nullptr);
        static info::CryptoPP__NameValuePairsGetThisObject5_clbk CryptoPP__NameValuePairsGetThisObject5_user(nullptr);
        static info::CryptoPP__NameValuePairsGetThisObject7_ptr CryptoPP__NameValuePairsGetThisObject7_next(nullptr);
        static info::CryptoPP__NameValuePairsGetThisObject7_clbk CryptoPP__NameValuePairsGetThisObject7_user(nullptr);
        static info::CryptoPP__NameValuePairsGetThisObject9_ptr CryptoPP__NameValuePairsGetThisObject9_next(nullptr);
        static info::CryptoPP__NameValuePairsGetThisObject9_clbk CryptoPP__NameValuePairsGetThisObject9_user(nullptr);
        static info::CryptoPP__NameValuePairsGetThisObject11_ptr CryptoPP__NameValuePairsGetThisObject11_next(nullptr);
        static info::CryptoPP__NameValuePairsGetThisObject11_clbk CryptoPP__NameValuePairsGetThisObject11_user(nullptr);
        static info::CryptoPP__NameValuePairsGetThisObject13_ptr CryptoPP__NameValuePairsGetThisObject13_next(nullptr);
        static info::CryptoPP__NameValuePairsGetThisObject13_clbk CryptoPP__NameValuePairsGetThisObject13_user(nullptr);
        static info::CryptoPP__NameValuePairsGetThisPointer15_ptr CryptoPP__NameValuePairsGetThisPointer15_next(nullptr);
        static info::CryptoPP__NameValuePairsGetThisPointer15_clbk CryptoPP__NameValuePairsGetThisPointer15_user(nullptr);
        static info::CryptoPP__NameValuePairsGetValue17_ptr CryptoPP__NameValuePairsGetValue17_next(nullptr);
        static info::CryptoPP__NameValuePairsGetValue17_clbk CryptoPP__NameValuePairsGetValue17_user(nullptr);
        static info::CryptoPP__NameValuePairsGetValue19_ptr CryptoPP__NameValuePairsGetValue19_next(nullptr);
        static info::CryptoPP__NameValuePairsGetValue19_clbk CryptoPP__NameValuePairsGetValue19_user(nullptr);
        static info::CryptoPP__NameValuePairsGetValue21_ptr CryptoPP__NameValuePairsGetValue21_next(nullptr);
        static info::CryptoPP__NameValuePairsGetValue21_clbk CryptoPP__NameValuePairsGetValue21_user(nullptr);
        static info::CryptoPP__NameValuePairsGetValue23_ptr CryptoPP__NameValuePairsGetValue23_next(nullptr);
        static info::CryptoPP__NameValuePairsGetValue23_clbk CryptoPP__NameValuePairsGetValue23_user(nullptr);
        static info::CryptoPP__NameValuePairsGetValue25_ptr CryptoPP__NameValuePairsGetValue25_next(nullptr);
        static info::CryptoPP__NameValuePairsGetValue25_clbk CryptoPP__NameValuePairsGetValue25_user(nullptr);
        static info::CryptoPP__NameValuePairsGetValue27_ptr CryptoPP__NameValuePairsGetValue27_next(nullptr);
        static info::CryptoPP__NameValuePairsGetValue27_clbk CryptoPP__NameValuePairsGetValue27_user(nullptr);
        static info::CryptoPP__NameValuePairsGetValue29_ptr CryptoPP__NameValuePairsGetValue29_next(nullptr);
        static info::CryptoPP__NameValuePairsGetValue29_clbk CryptoPP__NameValuePairsGetValue29_user(nullptr);
        static info::CryptoPP__NameValuePairsGetValue31_ptr CryptoPP__NameValuePairsGetValue31_next(nullptr);
        static info::CryptoPP__NameValuePairsGetValue31_clbk CryptoPP__NameValuePairsGetValue31_user(nullptr);
        static info::CryptoPP__NameValuePairsGetValue33_ptr CryptoPP__NameValuePairsGetValue33_next(nullptr);
        static info::CryptoPP__NameValuePairsGetValue33_clbk CryptoPP__NameValuePairsGetValue33_user(nullptr);
        static info::CryptoPP__NameValuePairsctor_NameValuePairs35_ptr CryptoPP__NameValuePairsctor_NameValuePairs35_next(nullptr);
        static info::CryptoPP__NameValuePairsctor_NameValuePairs35_clbk CryptoPP__NameValuePairsctor_NameValuePairs35_user(nullptr);
        static info::CryptoPP__NameValuePairsctor_NameValuePairs37_ptr CryptoPP__NameValuePairsctor_NameValuePairs37_next(nullptr);
        static info::CryptoPP__NameValuePairsctor_NameValuePairs37_clbk CryptoPP__NameValuePairsctor_NameValuePairs37_user(nullptr);
        static info::CryptoPP__NameValuePairsThrowIfTypeMismatch39_ptr CryptoPP__NameValuePairsThrowIfTypeMismatch39_next(nullptr);
        static info::CryptoPP__NameValuePairsThrowIfTypeMismatch39_clbk CryptoPP__NameValuePairsThrowIfTypeMismatch39_user(nullptr);
        static info::CryptoPP__NameValuePairsdtor_NameValuePairs43_ptr CryptoPP__NameValuePairsdtor_NameValuePairs43_next(nullptr);
        static info::CryptoPP__NameValuePairsdtor_NameValuePairs43_clbk CryptoPP__NameValuePairsdtor_NameValuePairs43_user(nullptr);
        
        static info::CryptoPP__NameValuePairs__ValueTypeMismatchctor_ValueTypeMismatch2_ptr CryptoPP__NameValuePairs__ValueTypeMismatchctor_ValueTypeMismatch2_next(nullptr);
        static info::CryptoPP__NameValuePairs__ValueTypeMismatchctor_ValueTypeMismatch2_clbk CryptoPP__NameValuePairs__ValueTypeMismatchctor_ValueTypeMismatch2_user(nullptr);
        static info::CryptoPP__NameValuePairs__ValueTypeMismatchctor_ValueTypeMismatch4_ptr CryptoPP__NameValuePairs__ValueTypeMismatchctor_ValueTypeMismatch4_next(nullptr);
        static info::CryptoPP__NameValuePairs__ValueTypeMismatchctor_ValueTypeMismatch4_clbk CryptoPP__NameValuePairs__ValueTypeMismatchctor_ValueTypeMismatch4_user(nullptr);
        static info::CryptoPP__NameValuePairs__ValueTypeMismatchdtor_ValueTypeMismatch9_ptr CryptoPP__NameValuePairs__ValueTypeMismatchdtor_ValueTypeMismatch9_next(nullptr);
        static info::CryptoPP__NameValuePairs__ValueTypeMismatchdtor_ValueTypeMismatch9_clbk CryptoPP__NameValuePairs__ValueTypeMismatchdtor_ValueTypeMismatch9_user(nullptr);
        
        static info::CryptoPP__SimpleKeyedTransformationGetAlgorithm2_ptr CryptoPP__SimpleKeyedTransformationGetAlgorithm2_next(nullptr);
        static info::CryptoPP__SimpleKeyedTransformationGetAlgorithm2_clbk CryptoPP__SimpleKeyedTransformationGetAlgorithm2_user(nullptr);
        static info::CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_ptr CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_next(nullptr);
        static info::CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_clbk CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_user(nullptr);
        static info::CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation6_ptr CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation6_next(nullptr);
        static info::CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation6_clbk CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation6_user(nullptr);
        static info::CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation8_ptr CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation8_next(nullptr);
        static info::CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation8_clbk CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation8_user(nullptr);
        
        static info::CryptoPP__RandomPoolCanIncorporateEntropy2_ptr CryptoPP__RandomPoolCanIncorporateEntropy2_next(nullptr);
        static info::CryptoPP__RandomPoolCanIncorporateEntropy2_clbk CryptoPP__RandomPoolCanIncorporateEntropy2_user(nullptr);
        static info::CryptoPP__RandomPoolIncorporateEntropy3_ptr CryptoPP__RandomPoolIncorporateEntropy3_next(nullptr);
        static info::CryptoPP__RandomPoolIncorporateEntropy3_clbk CryptoPP__RandomPoolIncorporateEntropy3_user(nullptr);
        static info::CryptoPP__RandomPoolctor_RandomPool4_ptr CryptoPP__RandomPoolctor_RandomPool4_next(nullptr);
        static info::CryptoPP__RandomPoolctor_RandomPool4_clbk CryptoPP__RandomPoolctor_RandomPool4_user(nullptr);
        static info::CryptoPP__RandomPooldtor_RandomPool6_ptr CryptoPP__RandomPooldtor_RandomPool6_next(nullptr);
        static info::CryptoPP__RandomPooldtor_RandomPool6_clbk CryptoPP__RandomPooldtor_RandomPool6_user(nullptr);
        
        static info::CryptoPP__AutoSeededRandomPoolctor_AutoSeededRandomPool2_ptr CryptoPP__AutoSeededRandomPoolctor_AutoSeededRandomPool2_next(nullptr);
        static info::CryptoPP__AutoSeededRandomPoolctor_AutoSeededRandomPool2_clbk CryptoPP__AutoSeededRandomPoolctor_AutoSeededRandomPool2_user(nullptr);
        static info::CryptoPP__AutoSeededRandomPoolReseed3_ptr CryptoPP__AutoSeededRandomPoolReseed3_next(nullptr);
        static info::CryptoPP__AutoSeededRandomPoolReseed3_clbk CryptoPP__AutoSeededRandomPoolReseed3_user(nullptr);
        static info::CryptoPP__AutoSeededRandomPooldtor_AutoSeededRandomPool8_ptr CryptoPP__AutoSeededRandomPooldtor_AutoSeededRandomPool8_next(nullptr);
        static info::CryptoPP__AutoSeededRandomPooldtor_AutoSeededRandomPool8_clbk CryptoPP__AutoSeededRandomPooldtor_AutoSeededRandomPool8_user(nullptr);
        
        static info::CryptoPP__GeneratableCryptoMaterialctor_GeneratableCryptoMaterial1_ptr CryptoPP__GeneratableCryptoMaterialctor_GeneratableCryptoMaterial1_next(nullptr);
        static info::CryptoPP__GeneratableCryptoMaterialctor_GeneratableCryptoMaterial1_clbk CryptoPP__GeneratableCryptoMaterialctor_GeneratableCryptoMaterial1_user(nullptr);
        static info::CryptoPP__GeneratableCryptoMaterialctor_GeneratableCryptoMaterial3_ptr CryptoPP__GeneratableCryptoMaterialctor_GeneratableCryptoMaterial3_next(nullptr);
        static info::CryptoPP__GeneratableCryptoMaterialctor_GeneratableCryptoMaterial3_clbk CryptoPP__GeneratableCryptoMaterialctor_GeneratableCryptoMaterial3_user(nullptr);
        static info::CryptoPP__GeneratableCryptoMaterialGenerateRandom5_ptr CryptoPP__GeneratableCryptoMaterialGenerateRandom5_next(nullptr);
        static info::CryptoPP__GeneratableCryptoMaterialGenerateRandom5_clbk CryptoPP__GeneratableCryptoMaterialGenerateRandom5_user(nullptr);
        static info::CryptoPP__GeneratableCryptoMaterialGenerateRandomWithKeySize6_ptr CryptoPP__GeneratableCryptoMaterialGenerateRandomWithKeySize6_next(nullptr);
        static info::CryptoPP__GeneratableCryptoMaterialGenerateRandomWithKeySize6_clbk CryptoPP__GeneratableCryptoMaterialGenerateRandomWithKeySize6_user(nullptr);
        static info::CryptoPP__GeneratableCryptoMaterialdtor_GeneratableCryptoMaterial10_ptr CryptoPP__GeneratableCryptoMaterialdtor_GeneratableCryptoMaterial10_next(nullptr);
        static info::CryptoPP__GeneratableCryptoMaterialdtor_GeneratableCryptoMaterial10_clbk CryptoPP__GeneratableCryptoMaterialdtor_GeneratableCryptoMaterial10_user(nullptr);
        
        static info::CryptoPP__CryptoParametersctor_CryptoParameters1_ptr CryptoPP__CryptoParametersctor_CryptoParameters1_next(nullptr);
        static info::CryptoPP__CryptoParametersctor_CryptoParameters1_clbk CryptoPP__CryptoParametersctor_CryptoParameters1_user(nullptr);
        static info::CryptoPP__CryptoParametersctor_CryptoParameters3_ptr CryptoPP__CryptoParametersctor_CryptoParameters3_next(nullptr);
        static info::CryptoPP__CryptoParametersctor_CryptoParameters3_clbk CryptoPP__CryptoParametersctor_CryptoParameters3_user(nullptr);
        static info::CryptoPP__CryptoParametersdtor_CryptoParameters7_ptr CryptoPP__CryptoParametersdtor_CryptoParameters7_next(nullptr);
        static info::CryptoPP__CryptoParametersdtor_CryptoParameters7_clbk CryptoPP__CryptoParametersdtor_CryptoParameters7_user(nullptr);
        
        static info::CryptoPP__DL_GroupParametersctor_DL_GroupParameters2_ptr CryptoPP__DL_GroupParametersctor_DL_GroupParameters2_next(nullptr);
        static info::CryptoPP__DL_GroupParametersctor_DL_GroupParameters2_clbk CryptoPP__DL_GroupParametersctor_DL_GroupParameters2_user(nullptr);
        static info::CryptoPP__DL_GroupParametersExponentiateBase4_ptr CryptoPP__DL_GroupParametersExponentiateBase4_next(nullptr);
        static info::CryptoPP__DL_GroupParametersExponentiateBase4_clbk CryptoPP__DL_GroupParametersExponentiateBase4_user(nullptr);
        static info::CryptoPP__DL_GroupParametersExponentiateElement6_ptr CryptoPP__DL_GroupParametersExponentiateElement6_next(nullptr);
        static info::CryptoPP__DL_GroupParametersExponentiateElement6_clbk CryptoPP__DL_GroupParametersExponentiateElement6_user(nullptr);
        static info::CryptoPP__DL_GroupParametersGetCofactor8_ptr CryptoPP__DL_GroupParametersGetCofactor8_next(nullptr);
        static info::CryptoPP__DL_GroupParametersGetCofactor8_clbk CryptoPP__DL_GroupParametersGetCofactor8_user(nullptr);
        static info::CryptoPP__DL_GroupParametersGetGroupOrder10_ptr CryptoPP__DL_GroupParametersGetGroupOrder10_next(nullptr);
        static info::CryptoPP__DL_GroupParametersGetGroupOrder10_clbk CryptoPP__DL_GroupParametersGetGroupOrder10_user(nullptr);
        static info::CryptoPP__DL_GroupParametersGetSubgroupGenerator12_ptr CryptoPP__DL_GroupParametersGetSubgroupGenerator12_next(nullptr);
        static info::CryptoPP__DL_GroupParametersGetSubgroupGenerator12_clbk CryptoPP__DL_GroupParametersGetSubgroupGenerator12_user(nullptr);
        static info::CryptoPP__DL_GroupParametersGetVoidValue14_ptr CryptoPP__DL_GroupParametersGetVoidValue14_next(nullptr);
        static info::CryptoPP__DL_GroupParametersGetVoidValue14_clbk CryptoPP__DL_GroupParametersGetVoidValue14_user(nullptr);
        static info::CryptoPP__DL_GroupParametersLoadPrecomputation16_ptr CryptoPP__DL_GroupParametersLoadPrecomputation16_next(nullptr);
        static info::CryptoPP__DL_GroupParametersLoadPrecomputation16_clbk CryptoPP__DL_GroupParametersLoadPrecomputation16_user(nullptr);
        static info::CryptoPP__DL_GroupParametersPrecompute18_ptr CryptoPP__DL_GroupParametersPrecompute18_next(nullptr);
        static info::CryptoPP__DL_GroupParametersPrecompute18_clbk CryptoPP__DL_GroupParametersPrecompute18_user(nullptr);
        static info::CryptoPP__DL_GroupParametersSavePrecomputation20_ptr CryptoPP__DL_GroupParametersSavePrecomputation20_next(nullptr);
        static info::CryptoPP__DL_GroupParametersSavePrecomputation20_clbk CryptoPP__DL_GroupParametersSavePrecomputation20_user(nullptr);
        static info::CryptoPP__DL_GroupParametersSetSubgroupGenerator22_ptr CryptoPP__DL_GroupParametersSetSubgroupGenerator22_next(nullptr);
        static info::CryptoPP__DL_GroupParametersSetSubgroupGenerator22_clbk CryptoPP__DL_GroupParametersSetSubgroupGenerator22_user(nullptr);
        static info::CryptoPP__DL_GroupParametersSupportsPrecomputation24_ptr CryptoPP__DL_GroupParametersSupportsPrecomputation24_next(nullptr);
        static info::CryptoPP__DL_GroupParametersSupportsPrecomputation24_clbk CryptoPP__DL_GroupParametersSupportsPrecomputation24_user(nullptr);
        static info::CryptoPP__DL_GroupParametersValidate26_ptr CryptoPP__DL_GroupParametersValidate26_next(nullptr);
        static info::CryptoPP__DL_GroupParametersValidate26_clbk CryptoPP__DL_GroupParametersValidate26_user(nullptr);
        static info::CryptoPP__DL_GroupParametersdtor_DL_GroupParameters30_ptr CryptoPP__DL_GroupParametersdtor_DL_GroupParameters30_next(nullptr);
        static info::CryptoPP__DL_GroupParametersdtor_DL_GroupParameters30_clbk CryptoPP__DL_GroupParametersdtor_DL_GroupParameters30_user(nullptr);
        
        static info::CryptoPP__DL_Keyctor_DL_Key2_ptr CryptoPP__DL_Keyctor_DL_Key2_next(nullptr);
        static info::CryptoPP__DL_Keyctor_DL_Key2_clbk CryptoPP__DL_Keyctor_DL_Key2_user(nullptr);
        
        static info::CryptoPP__DL_PrivateKeyAssignFrom2_ptr CryptoPP__DL_PrivateKeyAssignFrom2_next(nullptr);
        static info::CryptoPP__DL_PrivateKeyAssignFrom2_clbk CryptoPP__DL_PrivateKeyAssignFrom2_user(nullptr);
        static info::CryptoPP__DL_PrivateKeyctor_DL_PrivateKey4_ptr CryptoPP__DL_PrivateKeyctor_DL_PrivateKey4_next(nullptr);
        static info::CryptoPP__DL_PrivateKeyctor_DL_PrivateKey4_clbk CryptoPP__DL_PrivateKeyctor_DL_PrivateKey4_user(nullptr);
        static info::CryptoPP__DL_PrivateKeyGetVoidValue6_ptr CryptoPP__DL_PrivateKeyGetVoidValue6_next(nullptr);
        static info::CryptoPP__DL_PrivateKeyGetVoidValue6_clbk CryptoPP__DL_PrivateKeyGetVoidValue6_user(nullptr);
        static info::CryptoPP__DL_PrivateKeyMakePublicKey8_ptr CryptoPP__DL_PrivateKeyMakePublicKey8_next(nullptr);
        static info::CryptoPP__DL_PrivateKeyMakePublicKey8_clbk CryptoPP__DL_PrivateKeyMakePublicKey8_user(nullptr);
        
        static info::CryptoPP__ASN1Objectctor_ASN1Object1_ptr CryptoPP__ASN1Objectctor_ASN1Object1_next(nullptr);
        static info::CryptoPP__ASN1Objectctor_ASN1Object1_clbk CryptoPP__ASN1Objectctor_ASN1Object1_user(nullptr);
        static info::CryptoPP__ASN1Objectctor_ASN1Object3_ptr CryptoPP__ASN1Objectctor_ASN1Object3_next(nullptr);
        static info::CryptoPP__ASN1Objectctor_ASN1Object3_clbk CryptoPP__ASN1Objectctor_ASN1Object3_user(nullptr);
        static info::CryptoPP__ASN1ObjectBEREncode5_ptr CryptoPP__ASN1ObjectBEREncode5_next(nullptr);
        static info::CryptoPP__ASN1ObjectBEREncode5_clbk CryptoPP__ASN1ObjectBEREncode5_user(nullptr);
        static info::CryptoPP__ASN1Objectdtor_ASN1Object9_ptr CryptoPP__ASN1Objectdtor_ASN1Object9_next(nullptr);
        static info::CryptoPP__ASN1Objectdtor_ASN1Object9_clbk CryptoPP__ASN1Objectdtor_ASN1Object9_user(nullptr);
        
        static info::CryptoPP__Waitablector_Waitable1_ptr CryptoPP__Waitablector_Waitable1_next(nullptr);
        static info::CryptoPP__Waitablector_Waitable1_clbk CryptoPP__Waitablector_Waitable1_user(nullptr);
        static info::CryptoPP__Waitablector_Waitable3_ptr CryptoPP__Waitablector_Waitable3_next(nullptr);
        static info::CryptoPP__Waitablector_Waitable3_clbk CryptoPP__Waitablector_Waitable3_user(nullptr);
        static info::CryptoPP__Waitabledtor_Waitable5_ptr CryptoPP__Waitabledtor_Waitable5_next(nullptr);
        static info::CryptoPP__Waitabledtor_Waitable5_clbk CryptoPP__Waitabledtor_Waitable5_user(nullptr);
        
        static info::CryptoPP__BufferedTransformationAnyMessages1_ptr CryptoPP__BufferedTransformationAnyMessages1_next(nullptr);
        static info::CryptoPP__BufferedTransformationAnyMessages1_clbk CryptoPP__BufferedTransformationAnyMessages1_user(nullptr);
        static info::CryptoPP__BufferedTransformationAnyRetrievable2_ptr CryptoPP__BufferedTransformationAnyRetrievable2_next(nullptr);
        static info::CryptoPP__BufferedTransformationAnyRetrievable2_clbk CryptoPP__BufferedTransformationAnyRetrievable2_user(nullptr);
        static info::CryptoPP__BufferedTransformationAttach3_ptr CryptoPP__BufferedTransformationAttach3_next(nullptr);
        static info::CryptoPP__BufferedTransformationAttach3_clbk CryptoPP__BufferedTransformationAttach3_user(nullptr);
        static info::CryptoPP__BufferedTransformationAttachable5_ptr CryptoPP__BufferedTransformationAttachable5_next(nullptr);
        static info::CryptoPP__BufferedTransformationAttachable5_clbk CryptoPP__BufferedTransformationAttachable5_user(nullptr);
        static info::CryptoPP__BufferedTransformationAttachedTransformation8_ptr CryptoPP__BufferedTransformationAttachedTransformation8_next(nullptr);
        static info::CryptoPP__BufferedTransformationAttachedTransformation8_clbk CryptoPP__BufferedTransformationAttachedTransformation8_user(nullptr);
        static info::CryptoPP__BufferedTransformationAttachedTransformation9_ptr CryptoPP__BufferedTransformationAttachedTransformation9_next(nullptr);
        static info::CryptoPP__BufferedTransformationAttachedTransformation9_clbk CryptoPP__BufferedTransformationAttachedTransformation9_user(nullptr);
        static info::CryptoPP__BufferedTransformationctor_BufferedTransformation10_ptr CryptoPP__BufferedTransformationctor_BufferedTransformation10_next(nullptr);
        static info::CryptoPP__BufferedTransformationctor_BufferedTransformation10_clbk CryptoPP__BufferedTransformationctor_BufferedTransformation10_user(nullptr);
        static info::CryptoPP__BufferedTransformationctor_BufferedTransformation12_ptr CryptoPP__BufferedTransformationctor_BufferedTransformation12_next(nullptr);
        static info::CryptoPP__BufferedTransformationctor_BufferedTransformation12_clbk CryptoPP__BufferedTransformationctor_BufferedTransformation12_user(nullptr);
        static info::CryptoPP__BufferedTransformationCanModifyInput14_ptr CryptoPP__BufferedTransformationCanModifyInput14_next(nullptr);
        static info::CryptoPP__BufferedTransformationCanModifyInput14_clbk CryptoPP__BufferedTransformationCanModifyInput14_user(nullptr);
        static info::CryptoPP__BufferedTransformationCreatePutSpace16_ptr CryptoPP__BufferedTransformationCreatePutSpace16_next(nullptr);
        static info::CryptoPP__BufferedTransformationCreatePutSpace16_clbk CryptoPP__BufferedTransformationCreatePutSpace16_user(nullptr);
        static info::CryptoPP__BufferedTransformationDetach18_ptr CryptoPP__BufferedTransformationDetach18_next(nullptr);
        static info::CryptoPP__BufferedTransformationDetach18_clbk CryptoPP__BufferedTransformationDetach18_user(nullptr);
        static info::CryptoPP__BufferedTransformationFlush19_ptr CryptoPP__BufferedTransformationFlush19_next(nullptr);
        static info::CryptoPP__BufferedTransformationFlush19_clbk CryptoPP__BufferedTransformationFlush19_user(nullptr);
        static info::CryptoPP__BufferedTransformationGet20_ptr CryptoPP__BufferedTransformationGet20_next(nullptr);
        static info::CryptoPP__BufferedTransformationGet20_clbk CryptoPP__BufferedTransformationGet20_user(nullptr);
        static info::CryptoPP__BufferedTransformationGet21_ptr CryptoPP__BufferedTransformationGet21_next(nullptr);
        static info::CryptoPP__BufferedTransformationGet21_clbk CryptoPP__BufferedTransformationGet21_user(nullptr);
        static info::CryptoPP__BufferedTransformationGetAutoSignalPropagation22_ptr CryptoPP__BufferedTransformationGetAutoSignalPropagation22_next(nullptr);
        static info::CryptoPP__BufferedTransformationGetAutoSignalPropagation22_clbk CryptoPP__BufferedTransformationGetAutoSignalPropagation22_user(nullptr);
        static info::CryptoPP__BufferedTransformationGetMaxWaitObjectCount23_ptr CryptoPP__BufferedTransformationGetMaxWaitObjectCount23_next(nullptr);
        static info::CryptoPP__BufferedTransformationGetMaxWaitObjectCount23_clbk CryptoPP__BufferedTransformationGetMaxWaitObjectCount23_user(nullptr);
        static info::CryptoPP__BufferedTransformationGetNextMessage24_ptr CryptoPP__BufferedTransformationGetNextMessage24_next(nullptr);
        static info::CryptoPP__BufferedTransformationGetNextMessage24_clbk CryptoPP__BufferedTransformationGetNextMessage24_user(nullptr);
        static info::CryptoPP__BufferedTransformationGetNextMessageSeries26_ptr CryptoPP__BufferedTransformationGetNextMessageSeries26_next(nullptr);
        static info::CryptoPP__BufferedTransformationGetNextMessageSeries26_clbk CryptoPP__BufferedTransformationGetNextMessageSeries26_user(nullptr);
        static info::CryptoPP__BufferedTransformationGetWaitObjects27_ptr CryptoPP__BufferedTransformationGetWaitObjects27_next(nullptr);
        static info::CryptoPP__BufferedTransformationGetWaitObjects27_clbk CryptoPP__BufferedTransformationGetWaitObjects27_user(nullptr);
        static info::CryptoPP__BufferedTransformationGetWord1628_ptr CryptoPP__BufferedTransformationGetWord1628_next(nullptr);
        static info::CryptoPP__BufferedTransformationGetWord1628_clbk CryptoPP__BufferedTransformationGetWord1628_user(nullptr);
        static info::CryptoPP__BufferedTransformationGetWord3229_ptr CryptoPP__BufferedTransformationGetWord3229_next(nullptr);
        static info::CryptoPP__BufferedTransformationGetWord3229_clbk CryptoPP__BufferedTransformationGetWord3229_user(nullptr);
        static info::CryptoPP__BufferedTransformationInitialize30_ptr CryptoPP__BufferedTransformationInitialize30_next(nullptr);
        static info::CryptoPP__BufferedTransformationInitialize30_clbk CryptoPP__BufferedTransformationInitialize30_user(nullptr);
        static info::CryptoPP__BufferedTransformationIsolatedInitialize31_ptr CryptoPP__BufferedTransformationIsolatedInitialize31_next(nullptr);
        static info::CryptoPP__BufferedTransformationIsolatedInitialize31_clbk CryptoPP__BufferedTransformationIsolatedInitialize31_user(nullptr);
        static info::CryptoPP__BufferedTransformationIsolatedMessageSeriesEnd32_ptr CryptoPP__BufferedTransformationIsolatedMessageSeriesEnd32_next(nullptr);
        static info::CryptoPP__BufferedTransformationIsolatedMessageSeriesEnd32_clbk CryptoPP__BufferedTransformationIsolatedMessageSeriesEnd32_user(nullptr);
        static info::CryptoPP__BufferedTransformationMaxRetrievable33_ptr CryptoPP__BufferedTransformationMaxRetrievable33_next(nullptr);
        static info::CryptoPP__BufferedTransformationMaxRetrievable33_clbk CryptoPP__BufferedTransformationMaxRetrievable33_user(nullptr);
        static info::CryptoPP__BufferedTransformationMessageEnd34_ptr CryptoPP__BufferedTransformationMessageEnd34_next(nullptr);
        static info::CryptoPP__BufferedTransformationMessageEnd34_clbk CryptoPP__BufferedTransformationMessageEnd34_user(nullptr);
        static info::CryptoPP__BufferedTransformationMessageSeriesEnd35_ptr CryptoPP__BufferedTransformationMessageSeriesEnd35_next(nullptr);
        static info::CryptoPP__BufferedTransformationMessageSeriesEnd35_clbk CryptoPP__BufferedTransformationMessageSeriesEnd35_user(nullptr);
        static info::CryptoPP__BufferedTransformationNumberOfMessageSeries37_ptr CryptoPP__BufferedTransformationNumberOfMessageSeries37_next(nullptr);
        static info::CryptoPP__BufferedTransformationNumberOfMessageSeries37_clbk CryptoPP__BufferedTransformationNumberOfMessageSeries37_user(nullptr);
        static info::CryptoPP__BufferedTransformationNumberOfMessages38_ptr CryptoPP__BufferedTransformationNumberOfMessages38_next(nullptr);
        static info::CryptoPP__BufferedTransformationNumberOfMessages38_clbk CryptoPP__BufferedTransformationNumberOfMessages38_user(nullptr);
        static info::CryptoPP__BufferedTransformationNumberOfMessagesInThisSeries40_ptr CryptoPP__BufferedTransformationNumberOfMessagesInThisSeries40_next(nullptr);
        static info::CryptoPP__BufferedTransformationNumberOfMessagesInThisSeries40_clbk CryptoPP__BufferedTransformationNumberOfMessagesInThisSeries40_user(nullptr);
        static info::CryptoPP__BufferedTransformationPeek41_ptr CryptoPP__BufferedTransformationPeek41_next(nullptr);
        static info::CryptoPP__BufferedTransformationPeek41_clbk CryptoPP__BufferedTransformationPeek41_user(nullptr);
        static info::CryptoPP__BufferedTransformationPeek42_ptr CryptoPP__BufferedTransformationPeek42_next(nullptr);
        static info::CryptoPP__BufferedTransformationPeek42_clbk CryptoPP__BufferedTransformationPeek42_user(nullptr);
        static info::CryptoPP__BufferedTransformationPeekWord1643_ptr CryptoPP__BufferedTransformationPeekWord1643_next(nullptr);
        static info::CryptoPP__BufferedTransformationPeekWord1643_clbk CryptoPP__BufferedTransformationPeekWord1643_user(nullptr);
        static info::CryptoPP__BufferedTransformationPeekWord3244_ptr CryptoPP__BufferedTransformationPeekWord3244_next(nullptr);
        static info::CryptoPP__BufferedTransformationPeekWord3244_clbk CryptoPP__BufferedTransformationPeekWord3244_user(nullptr);
        static info::CryptoPP__BufferedTransformationPut45_ptr CryptoPP__BufferedTransformationPut45_next(nullptr);
        static info::CryptoPP__BufferedTransformationPut45_clbk CryptoPP__BufferedTransformationPut45_user(nullptr);
        static info::CryptoPP__BufferedTransformationPut46_ptr CryptoPP__BufferedTransformationPut46_next(nullptr);
        static info::CryptoPP__BufferedTransformationPut46_clbk CryptoPP__BufferedTransformationPut46_user(nullptr);
        static info::CryptoPP__BufferedTransformationPutModifiable47_ptr CryptoPP__BufferedTransformationPutModifiable47_next(nullptr);
        static info::CryptoPP__BufferedTransformationPutModifiable47_clbk CryptoPP__BufferedTransformationPutModifiable47_user(nullptr);
        static info::CryptoPP__BufferedTransformationPutModifiable249_ptr CryptoPP__BufferedTransformationPutModifiable249_next(nullptr);
        static info::CryptoPP__BufferedTransformationPutModifiable249_clbk CryptoPP__BufferedTransformationPutModifiable249_user(nullptr);
        static info::CryptoPP__BufferedTransformationPutWord1650_ptr CryptoPP__BufferedTransformationPutWord1650_next(nullptr);
        static info::CryptoPP__BufferedTransformationPutWord1650_clbk CryptoPP__BufferedTransformationPutWord1650_user(nullptr);
        static info::CryptoPP__BufferedTransformationPutWord3251_ptr CryptoPP__BufferedTransformationPutWord3251_next(nullptr);
        static info::CryptoPP__BufferedTransformationPutWord3251_clbk CryptoPP__BufferedTransformationPutWord3251_user(nullptr);
        static info::CryptoPP__BufferedTransformationSetAutoSignalPropagation52_ptr CryptoPP__BufferedTransformationSetAutoSignalPropagation52_next(nullptr);
        static info::CryptoPP__BufferedTransformationSetAutoSignalPropagation52_clbk CryptoPP__BufferedTransformationSetAutoSignalPropagation52_user(nullptr);
        static info::CryptoPP__BufferedTransformationSkip53_ptr CryptoPP__BufferedTransformationSkip53_next(nullptr);
        static info::CryptoPP__BufferedTransformationSkip53_clbk CryptoPP__BufferedTransformationSkip53_user(nullptr);
        static info::CryptoPP__BufferedTransformationSkipAll54_ptr CryptoPP__BufferedTransformationSkipAll54_next(nullptr);
        static info::CryptoPP__BufferedTransformationSkipAll54_clbk CryptoPP__BufferedTransformationSkipAll54_user(nullptr);
        static info::CryptoPP__BufferedTransformationSkipMessages55_ptr CryptoPP__BufferedTransformationSkipMessages55_next(nullptr);
        static info::CryptoPP__BufferedTransformationSkipMessages55_clbk CryptoPP__BufferedTransformationSkipMessages55_user(nullptr);
        static info::CryptoPP__BufferedTransformationTotalBytesRetrievable56_ptr CryptoPP__BufferedTransformationTotalBytesRetrievable56_next(nullptr);
        static info::CryptoPP__BufferedTransformationTotalBytesRetrievable56_clbk CryptoPP__BufferedTransformationTotalBytesRetrievable56_user(nullptr);
        static info::CryptoPP__BufferedTransformationdtor_BufferedTransformation58_ptr CryptoPP__BufferedTransformationdtor_BufferedTransformation58_next(nullptr);
        static info::CryptoPP__BufferedTransformationdtor_BufferedTransformation58_clbk CryptoPP__BufferedTransformationdtor_BufferedTransformation58_user(nullptr);
        
        static info::CryptoPP__BufferedTransformation__BlockingInputOnlyctor_BlockingInputOnly1_ptr CryptoPP__BufferedTransformation__BlockingInputOnlyctor_BlockingInputOnly1_next(nullptr);
        static info::CryptoPP__BufferedTransformation__BlockingInputOnlyctor_BlockingInputOnly1_clbk CryptoPP__BufferedTransformation__BlockingInputOnlyctor_BlockingInputOnly1_user(nullptr);
        static info::CryptoPP__BufferedTransformation__BlockingInputOnlydtor_BlockingInputOnly2_ptr CryptoPP__BufferedTransformation__BlockingInputOnlydtor_BlockingInputOnly2_next(nullptr);
        static info::CryptoPP__BufferedTransformation__BlockingInputOnlydtor_BlockingInputOnly2_clbk CryptoPP__BufferedTransformation__BlockingInputOnlydtor_BlockingInputOnly2_user(nullptr);
        
        static info::CryptoPP__BufferedTransformation__NoChannelSupportctor_NoChannelSupport1_ptr CryptoPP__BufferedTransformation__NoChannelSupportctor_NoChannelSupport1_next(nullptr);
        static info::CryptoPP__BufferedTransformation__NoChannelSupportctor_NoChannelSupport1_clbk CryptoPP__BufferedTransformation__NoChannelSupportctor_NoChannelSupport1_user(nullptr);
        static info::CryptoPP__BufferedTransformation__NoChannelSupportctor_NoChannelSupport2_ptr CryptoPP__BufferedTransformation__NoChannelSupportctor_NoChannelSupport2_next(nullptr);
        static info::CryptoPP__BufferedTransformation__NoChannelSupportctor_NoChannelSupport2_clbk CryptoPP__BufferedTransformation__NoChannelSupportctor_NoChannelSupport2_user(nullptr);
        static info::CryptoPP__BufferedTransformation__NoChannelSupportdtor_NoChannelSupport3_ptr CryptoPP__BufferedTransformation__NoChannelSupportdtor_NoChannelSupport3_next(nullptr);
        static info::CryptoPP__BufferedTransformation__NoChannelSupportdtor_NoChannelSupport3_clbk CryptoPP__BufferedTransformation__NoChannelSupportdtor_NoChannelSupport3_user(nullptr);
        
        static info::CryptoPP__PrivateKeyctor_PrivateKey1_ptr CryptoPP__PrivateKeyctor_PrivateKey1_next(nullptr);
        static info::CryptoPP__PrivateKeyctor_PrivateKey1_clbk CryptoPP__PrivateKeyctor_PrivateKey1_user(nullptr);
        static info::CryptoPP__PrivateKeyctor_PrivateKey3_ptr CryptoPP__PrivateKeyctor_PrivateKey3_next(nullptr);
        static info::CryptoPP__PrivateKeyctor_PrivateKey3_clbk CryptoPP__PrivateKeyctor_PrivateKey3_user(nullptr);
        static info::CryptoPP__PrivateKeydtor_PrivateKey7_ptr CryptoPP__PrivateKeydtor_PrivateKey7_next(nullptr);
        static info::CryptoPP__PrivateKeydtor_PrivateKey7_clbk CryptoPP__PrivateKeydtor_PrivateKey7_user(nullptr);
        
        static info::CryptoPP__ASN1CryptoMaterialctor_ASN1CryptoMaterial2_ptr CryptoPP__ASN1CryptoMaterialctor_ASN1CryptoMaterial2_next(nullptr);
        static info::CryptoPP__ASN1CryptoMaterialctor_ASN1CryptoMaterial2_clbk CryptoPP__ASN1CryptoMaterialctor_ASN1CryptoMaterial2_user(nullptr);
        static info::CryptoPP__ASN1CryptoMaterialLoad4_ptr CryptoPP__ASN1CryptoMaterialLoad4_next(nullptr);
        static info::CryptoPP__ASN1CryptoMaterialLoad4_clbk CryptoPP__ASN1CryptoMaterialLoad4_user(nullptr);
        static info::CryptoPP__ASN1CryptoMaterialSave6_ptr CryptoPP__ASN1CryptoMaterialSave6_next(nullptr);
        static info::CryptoPP__ASN1CryptoMaterialSave6_clbk CryptoPP__ASN1CryptoMaterialSave6_user(nullptr);
        static info::CryptoPP__ASN1CryptoMaterialdtor_ASN1CryptoMaterial10_ptr CryptoPP__ASN1CryptoMaterialdtor_ASN1CryptoMaterial10_next(nullptr);
        static info::CryptoPP__ASN1CryptoMaterialdtor_ASN1CryptoMaterial10_clbk CryptoPP__ASN1CryptoMaterialdtor_ASN1CryptoMaterial10_user(nullptr);
        
        static info::CryptoPP__ByteQueueAnyRetrievable1_ptr CryptoPP__ByteQueueAnyRetrievable1_next(nullptr);
        static info::CryptoPP__ByteQueueAnyRetrievable1_clbk CryptoPP__ByteQueueAnyRetrievable1_user(nullptr);
        static info::CryptoPP__ByteQueuector_ByteQueue2_ptr CryptoPP__ByteQueuector_ByteQueue2_next(nullptr);
        static info::CryptoPP__ByteQueuector_ByteQueue2_clbk CryptoPP__ByteQueuector_ByteQueue2_user(nullptr);
        static info::CryptoPP__ByteQueuector_ByteQueue3_ptr CryptoPP__ByteQueuector_ByteQueue3_next(nullptr);
        static info::CryptoPP__ByteQueuector_ByteQueue3_clbk CryptoPP__ByteQueuector_ByteQueue3_user(nullptr);
        static info::CryptoPP__ByteQueueCleanupUsedNodes4_ptr CryptoPP__ByteQueueCleanupUsedNodes4_next(nullptr);
        static info::CryptoPP__ByteQueueCleanupUsedNodes4_clbk CryptoPP__ByteQueueCleanupUsedNodes4_user(nullptr);
        static info::CryptoPP__ByteQueueClear5_ptr CryptoPP__ByteQueueClear5_next(nullptr);
        static info::CryptoPP__ByteQueueClear5_clbk CryptoPP__ByteQueueClear5_user(nullptr);
        static info::CryptoPP__ByteQueueCopyFrom6_ptr CryptoPP__ByteQueueCopyFrom6_next(nullptr);
        static info::CryptoPP__ByteQueueCopyFrom6_clbk CryptoPP__ByteQueueCopyFrom6_user(nullptr);
        static info::CryptoPP__ByteQueueCreatePutSpace7_ptr CryptoPP__ByteQueueCreatePutSpace7_next(nullptr);
        static info::CryptoPP__ByteQueueCreatePutSpace7_clbk CryptoPP__ByteQueueCreatePutSpace7_user(nullptr);
        static info::CryptoPP__ByteQueueCurrentSize8_ptr CryptoPP__ByteQueueCurrentSize8_next(nullptr);
        static info::CryptoPP__ByteQueueCurrentSize8_clbk CryptoPP__ByteQueueCurrentSize8_user(nullptr);
        static info::CryptoPP__ByteQueueDestroy9_ptr CryptoPP__ByteQueueDestroy9_next(nullptr);
        static info::CryptoPP__ByteQueueDestroy9_clbk CryptoPP__ByteQueueDestroy9_user(nullptr);
        static info::CryptoPP__ByteQueueFinalizeLazyPut10_ptr CryptoPP__ByteQueueFinalizeLazyPut10_next(nullptr);
        static info::CryptoPP__ByteQueueFinalizeLazyPut10_clbk CryptoPP__ByteQueueFinalizeLazyPut10_user(nullptr);
        static info::CryptoPP__ByteQueueGet11_ptr CryptoPP__ByteQueueGet11_next(nullptr);
        static info::CryptoPP__ByteQueueGet11_clbk CryptoPP__ByteQueueGet11_user(nullptr);
        static info::CryptoPP__ByteQueueGet12_ptr CryptoPP__ByteQueueGet12_next(nullptr);
        static info::CryptoPP__ByteQueueGet12_clbk CryptoPP__ByteQueueGet12_user(nullptr);
        static info::CryptoPP__ByteQueueIsEmpty13_ptr CryptoPP__ByteQueueIsEmpty13_next(nullptr);
        static info::CryptoPP__ByteQueueIsEmpty13_clbk CryptoPP__ByteQueueIsEmpty13_user(nullptr);
        static info::CryptoPP__ByteQueueIsolatedInitialize14_ptr CryptoPP__ByteQueueIsolatedInitialize14_next(nullptr);
        static info::CryptoPP__ByteQueueIsolatedInitialize14_clbk CryptoPP__ByteQueueIsolatedInitialize14_user(nullptr);
        static info::CryptoPP__ByteQueueLazyPut15_ptr CryptoPP__ByteQueueLazyPut15_next(nullptr);
        static info::CryptoPP__ByteQueueLazyPut15_clbk CryptoPP__ByteQueueLazyPut15_user(nullptr);
        static info::CryptoPP__ByteQueueLazyPutModifiable16_ptr CryptoPP__ByteQueueLazyPutModifiable16_next(nullptr);
        static info::CryptoPP__ByteQueueLazyPutModifiable16_clbk CryptoPP__ByteQueueLazyPutModifiable16_user(nullptr);
        static info::CryptoPP__ByteQueueMaxRetrievable17_ptr CryptoPP__ByteQueueMaxRetrievable17_next(nullptr);
        static info::CryptoPP__ByteQueueMaxRetrievable17_clbk CryptoPP__ByteQueueMaxRetrievable17_user(nullptr);
        static info::CryptoPP__ByteQueuePeek18_ptr CryptoPP__ByteQueuePeek18_next(nullptr);
        static info::CryptoPP__ByteQueuePeek18_clbk CryptoPP__ByteQueuePeek18_user(nullptr);
        static info::CryptoPP__ByteQueuePeek19_ptr CryptoPP__ByteQueuePeek19_next(nullptr);
        static info::CryptoPP__ByteQueuePeek19_clbk CryptoPP__ByteQueuePeek19_user(nullptr);
        static info::CryptoPP__ByteQueuePut220_ptr CryptoPP__ByteQueuePut220_next(nullptr);
        static info::CryptoPP__ByteQueuePut220_clbk CryptoPP__ByteQueuePut220_user(nullptr);
        static info::CryptoPP__ByteQueueSetNodeSize21_ptr CryptoPP__ByteQueueSetNodeSize21_next(nullptr);
        static info::CryptoPP__ByteQueueSetNodeSize21_clbk CryptoPP__ByteQueueSetNodeSize21_user(nullptr);
        static info::CryptoPP__ByteQueueSpy22_ptr CryptoPP__ByteQueueSpy22_next(nullptr);
        static info::CryptoPP__ByteQueueSpy22_clbk CryptoPP__ByteQueueSpy22_user(nullptr);
        static info::CryptoPP__ByteQueueUndoLazyPut23_ptr CryptoPP__ByteQueueUndoLazyPut23_next(nullptr);
        static info::CryptoPP__ByteQueueUndoLazyPut23_clbk CryptoPP__ByteQueueUndoLazyPut23_user(nullptr);
        static info::CryptoPP__ByteQueueUnget24_ptr CryptoPP__ByteQueueUnget24_next(nullptr);
        static info::CryptoPP__ByteQueueUnget24_clbk CryptoPP__ByteQueueUnget24_user(nullptr);
        static info::CryptoPP__ByteQueueUnget25_ptr CryptoPP__ByteQueueUnget25_next(nullptr);
        static info::CryptoPP__ByteQueueUnget25_clbk CryptoPP__ByteQueueUnget25_user(nullptr);
        static info::CryptoPP__ByteQueueswap26_ptr CryptoPP__ByteQueueswap26_next(nullptr);
        static info::CryptoPP__ByteQueueswap26_clbk CryptoPP__ByteQueueswap26_user(nullptr);
        static info::CryptoPP__ByteQueuedtor_ByteQueue27_ptr CryptoPP__ByteQueuedtor_ByteQueue27_next(nullptr);
        static info::CryptoPP__ByteQueuedtor_ByteQueue27_clbk CryptoPP__ByteQueuedtor_ByteQueue27_user(nullptr);
        
        static info::CryptoPP__ByteQueue__WalkerGet1_ptr CryptoPP__ByteQueue__WalkerGet1_next(nullptr);
        static info::CryptoPP__ByteQueue__WalkerGet1_clbk CryptoPP__ByteQueue__WalkerGet1_user(nullptr);
        static info::CryptoPP__ByteQueue__WalkerGet2_ptr CryptoPP__ByteQueue__WalkerGet2_next(nullptr);
        static info::CryptoPP__ByteQueue__WalkerGet2_clbk CryptoPP__ByteQueue__WalkerGet2_user(nullptr);
        static info::CryptoPP__ByteQueue__WalkerGetCurrentPosition3_ptr CryptoPP__ByteQueue__WalkerGetCurrentPosition3_next(nullptr);
        static info::CryptoPP__ByteQueue__WalkerGetCurrentPosition3_clbk CryptoPP__ByteQueue__WalkerGetCurrentPosition3_user(nullptr);
        static info::CryptoPP__ByteQueue__WalkerIsolatedInitialize4_ptr CryptoPP__ByteQueue__WalkerIsolatedInitialize4_next(nullptr);
        static info::CryptoPP__ByteQueue__WalkerIsolatedInitialize4_clbk CryptoPP__ByteQueue__WalkerIsolatedInitialize4_user(nullptr);
        static info::CryptoPP__ByteQueue__WalkerMaxRetrievable5_ptr CryptoPP__ByteQueue__WalkerMaxRetrievable5_next(nullptr);
        static info::CryptoPP__ByteQueue__WalkerMaxRetrievable5_clbk CryptoPP__ByteQueue__WalkerMaxRetrievable5_user(nullptr);
        static info::CryptoPP__ByteQueue__WalkerPeek6_ptr CryptoPP__ByteQueue__WalkerPeek6_next(nullptr);
        static info::CryptoPP__ByteQueue__WalkerPeek6_clbk CryptoPP__ByteQueue__WalkerPeek6_user(nullptr);
        static info::CryptoPP__ByteQueue__WalkerPeek7_ptr CryptoPP__ByteQueue__WalkerPeek7_next(nullptr);
        static info::CryptoPP__ByteQueue__WalkerPeek7_clbk CryptoPP__ByteQueue__WalkerPeek7_user(nullptr);
        static info::CryptoPP__ByteQueue__Walkerctor_Walker8_ptr CryptoPP__ByteQueue__Walkerctor_Walker8_next(nullptr);
        static info::CryptoPP__ByteQueue__Walkerctor_Walker8_clbk CryptoPP__ByteQueue__Walkerctor_Walker8_user(nullptr);
        static info::CryptoPP__ByteQueue__Walkerctor_Walker9_ptr CryptoPP__ByteQueue__Walkerctor_Walker9_next(nullptr);
        static info::CryptoPP__ByteQueue__Walkerctor_Walker9_clbk CryptoPP__ByteQueue__Walkerctor_Walker9_user(nullptr);
        static info::CryptoPP__ByteQueue__Walkerdtor_Walker10_ptr CryptoPP__ByteQueue__Walkerdtor_Walker10_next(nullptr);
        static info::CryptoPP__ByteQueue__Walkerdtor_Walker10_clbk CryptoPP__ByteQueue__Walkerdtor_Walker10_user(nullptr);
        
        static info::CryptoPP__PKCS8PrivateKeyBERDecode1_ptr CryptoPP__PKCS8PrivateKeyBERDecode1_next(nullptr);
        static info::CryptoPP__PKCS8PrivateKeyBERDecode1_clbk CryptoPP__PKCS8PrivateKeyBERDecode1_user(nullptr);
        static info::CryptoPP__PKCS8PrivateKeyBERDecodeAlgorithmParameters3_ptr CryptoPP__PKCS8PrivateKeyBERDecodeAlgorithmParameters3_next(nullptr);
        static info::CryptoPP__PKCS8PrivateKeyBERDecodeAlgorithmParameters3_clbk CryptoPP__PKCS8PrivateKeyBERDecodeAlgorithmParameters3_user(nullptr);
        static info::CryptoPP__PKCS8PrivateKeyBERDecodeOptionalAttributes4_ptr CryptoPP__PKCS8PrivateKeyBERDecodeOptionalAttributes4_next(nullptr);
        static info::CryptoPP__PKCS8PrivateKeyBERDecodeOptionalAttributes4_clbk CryptoPP__PKCS8PrivateKeyBERDecodeOptionalAttributes4_user(nullptr);
        static info::CryptoPP__PKCS8PrivateKeyDEREncode5_ptr CryptoPP__PKCS8PrivateKeyDEREncode5_next(nullptr);
        static info::CryptoPP__PKCS8PrivateKeyDEREncode5_clbk CryptoPP__PKCS8PrivateKeyDEREncode5_user(nullptr);
        static info::CryptoPP__PKCS8PrivateKeyDEREncodeAlgorithmParameters7_ptr CryptoPP__PKCS8PrivateKeyDEREncodeAlgorithmParameters7_next(nullptr);
        static info::CryptoPP__PKCS8PrivateKeyDEREncodeAlgorithmParameters7_clbk CryptoPP__PKCS8PrivateKeyDEREncodeAlgorithmParameters7_user(nullptr);
        static info::CryptoPP__PKCS8PrivateKeyDEREncodeOptionalAttributes8_ptr CryptoPP__PKCS8PrivateKeyDEREncodeOptionalAttributes8_next(nullptr);
        static info::CryptoPP__PKCS8PrivateKeyDEREncodeOptionalAttributes8_clbk CryptoPP__PKCS8PrivateKeyDEREncodeOptionalAttributes8_user(nullptr);
        static info::CryptoPP__PKCS8PrivateKeyctor_PKCS8PrivateKey9_ptr CryptoPP__PKCS8PrivateKeyctor_PKCS8PrivateKey9_next(nullptr);
        static info::CryptoPP__PKCS8PrivateKeyctor_PKCS8PrivateKey9_clbk CryptoPP__PKCS8PrivateKeyctor_PKCS8PrivateKey9_user(nullptr);
        static info::CryptoPP__PKCS8PrivateKeyctor_PKCS8PrivateKey11_ptr CryptoPP__PKCS8PrivateKeyctor_PKCS8PrivateKey11_next(nullptr);
        static info::CryptoPP__PKCS8PrivateKeyctor_PKCS8PrivateKey11_clbk CryptoPP__PKCS8PrivateKeyctor_PKCS8PrivateKey11_user(nullptr);
        static info::CryptoPP__PKCS8PrivateKeydtor_PKCS8PrivateKey20_ptr CryptoPP__PKCS8PrivateKeydtor_PKCS8PrivateKey20_next(nullptr);
        static info::CryptoPP__PKCS8PrivateKeydtor_PKCS8PrivateKey20_clbk CryptoPP__PKCS8PrivateKeydtor_PKCS8PrivateKey20_user(nullptr);
        
        static info::CryptoPP__DL_GroupPrecomputationConvertIn2_ptr CryptoPP__DL_GroupPrecomputationConvertIn2_next(nullptr);
        static info::CryptoPP__DL_GroupPrecomputationConvertIn2_clbk CryptoPP__DL_GroupPrecomputationConvertIn2_user(nullptr);
        static info::CryptoPP__DL_GroupPrecomputationConvertOut4_ptr CryptoPP__DL_GroupPrecomputationConvertOut4_next(nullptr);
        static info::CryptoPP__DL_GroupPrecomputationConvertOut4_clbk CryptoPP__DL_GroupPrecomputationConvertOut4_user(nullptr);
        static info::CryptoPP__DL_GroupPrecomputationctor_DL_GroupPrecomputation6_ptr CryptoPP__DL_GroupPrecomputationctor_DL_GroupPrecomputation6_next(nullptr);
        static info::CryptoPP__DL_GroupPrecomputationctor_DL_GroupPrecomputation6_clbk CryptoPP__DL_GroupPrecomputationctor_DL_GroupPrecomputation6_user(nullptr);
        static info::CryptoPP__DL_GroupPrecomputationNeedConversions8_ptr CryptoPP__DL_GroupPrecomputationNeedConversions8_next(nullptr);
        static info::CryptoPP__DL_GroupPrecomputationNeedConversions8_clbk CryptoPP__DL_GroupPrecomputationNeedConversions8_user(nullptr);
        
        static info::CryptoPP__InitializeIntegerctor_InitializeInteger1_ptr CryptoPP__InitializeIntegerctor_InitializeInteger1_next(nullptr);
        static info::CryptoPP__InitializeIntegerctor_InitializeInteger1_clbk CryptoPP__InitializeIntegerctor_InitializeInteger1_user(nullptr);
        
        static info::CryptoPP__AllocatorWithCleanupdeallocate2_ptr CryptoPP__AllocatorWithCleanupdeallocate2_next(nullptr);
        static info::CryptoPP__AllocatorWithCleanupdeallocate2_clbk CryptoPP__AllocatorWithCleanupdeallocate2_user(nullptr);
        
        static info::CryptoPP__IntegerAbsoluteValue1_ptr CryptoPP__IntegerAbsoluteValue1_next(nullptr);
        static info::CryptoPP__IntegerAbsoluteValue1_clbk CryptoPP__IntegerAbsoluteValue1_user(nullptr);
        static info::CryptoPP__IntegerBERDecode2_ptr CryptoPP__IntegerBERDecode2_next(nullptr);
        static info::CryptoPP__IntegerBERDecode2_clbk CryptoPP__IntegerBERDecode2_user(nullptr);
        static info::CryptoPP__IntegerBERDecode3_ptr CryptoPP__IntegerBERDecode3_next(nullptr);
        static info::CryptoPP__IntegerBERDecode3_clbk CryptoPP__IntegerBERDecode3_user(nullptr);
        static info::CryptoPP__IntegerBERDecodeAsOctetString4_ptr CryptoPP__IntegerBERDecodeAsOctetString4_next(nullptr);
        static info::CryptoPP__IntegerBERDecodeAsOctetString4_clbk CryptoPP__IntegerBERDecodeAsOctetString4_user(nullptr);
        static info::CryptoPP__IntegerBitCount5_ptr CryptoPP__IntegerBitCount5_next(nullptr);
        static info::CryptoPP__IntegerBitCount5_clbk CryptoPP__IntegerBitCount5_user(nullptr);
        static info::CryptoPP__IntegerByteCount6_ptr CryptoPP__IntegerByteCount6_next(nullptr);
        static info::CryptoPP__IntegerByteCount6_clbk CryptoPP__IntegerByteCount6_user(nullptr);
        static info::CryptoPP__IntegerCompare7_ptr CryptoPP__IntegerCompare7_next(nullptr);
        static info::CryptoPP__IntegerCompare7_clbk CryptoPP__IntegerCompare7_user(nullptr);
        static info::CryptoPP__IntegerConvertToLong8_ptr CryptoPP__IntegerConvertToLong8_next(nullptr);
        static info::CryptoPP__IntegerConvertToLong8_clbk CryptoPP__IntegerConvertToLong8_user(nullptr);
        static info::CryptoPP__IntegerDEREncode9_ptr CryptoPP__IntegerDEREncode9_next(nullptr);
        static info::CryptoPP__IntegerDEREncode9_clbk CryptoPP__IntegerDEREncode9_user(nullptr);
        static info::CryptoPP__IntegerDEREncodeAsOctetString10_ptr CryptoPP__IntegerDEREncodeAsOctetString10_next(nullptr);
        static info::CryptoPP__IntegerDEREncodeAsOctetString10_clbk CryptoPP__IntegerDEREncodeAsOctetString10_user(nullptr);
        static info::CryptoPP__IntegerDecode11_ptr CryptoPP__IntegerDecode11_next(nullptr);
        static info::CryptoPP__IntegerDecode11_clbk CryptoPP__IntegerDecode11_user(nullptr);
        static info::CryptoPP__IntegerDecode12_ptr CryptoPP__IntegerDecode12_next(nullptr);
        static info::CryptoPP__IntegerDecode12_clbk CryptoPP__IntegerDecode12_user(nullptr);
        static info::CryptoPP__IntegerDivide13_ptr CryptoPP__IntegerDivide13_next(nullptr);
        static info::CryptoPP__IntegerDivide13_clbk CryptoPP__IntegerDivide13_user(nullptr);
        static info::CryptoPP__IntegerDivide14_ptr CryptoPP__IntegerDivide14_next(nullptr);
        static info::CryptoPP__IntegerDivide14_clbk CryptoPP__IntegerDivide14_user(nullptr);
        static info::CryptoPP__IntegerDivideByPowerOf215_ptr CryptoPP__IntegerDivideByPowerOf215_next(nullptr);
        static info::CryptoPP__IntegerDivideByPowerOf215_clbk CryptoPP__IntegerDivideByPowerOf215_user(nullptr);
        static info::CryptoPP__IntegerDividedBy16_ptr CryptoPP__IntegerDividedBy16_next(nullptr);
        static info::CryptoPP__IntegerDividedBy16_clbk CryptoPP__IntegerDividedBy16_user(nullptr);
        static info::CryptoPP__IntegerDividedBy17_ptr CryptoPP__IntegerDividedBy17_next(nullptr);
        static info::CryptoPP__IntegerDividedBy17_clbk CryptoPP__IntegerDividedBy17_user(nullptr);
        static info::CryptoPP__IntegerDoubled18_ptr CryptoPP__IntegerDoubled18_next(nullptr);
        static info::CryptoPP__IntegerDoubled18_clbk CryptoPP__IntegerDoubled18_user(nullptr);
        static info::CryptoPP__IntegerEncode19_ptr CryptoPP__IntegerEncode19_next(nullptr);
        static info::CryptoPP__IntegerEncode19_clbk CryptoPP__IntegerEncode19_user(nullptr);
        static info::CryptoPP__IntegerEncode20_ptr CryptoPP__IntegerEncode20_next(nullptr);
        static info::CryptoPP__IntegerEncode20_clbk CryptoPP__IntegerEncode20_user(nullptr);
        static info::CryptoPP__IntegerGcd21_ptr CryptoPP__IntegerGcd21_next(nullptr);
        static info::CryptoPP__IntegerGcd21_clbk CryptoPP__IntegerGcd21_user(nullptr);
        static info::CryptoPP__IntegerGenerateRandomNoThrow22_ptr CryptoPP__IntegerGenerateRandomNoThrow22_next(nullptr);
        static info::CryptoPP__IntegerGenerateRandomNoThrow22_clbk CryptoPP__IntegerGenerateRandomNoThrow22_user(nullptr);
        static info::CryptoPP__IntegerGetBit23_ptr CryptoPP__IntegerGetBit23_next(nullptr);
        static info::CryptoPP__IntegerGetBit23_clbk CryptoPP__IntegerGetBit23_user(nullptr);
        static info::CryptoPP__IntegerGetBits24_ptr CryptoPP__IntegerGetBits24_next(nullptr);
        static info::CryptoPP__IntegerGetBits24_clbk CryptoPP__IntegerGetBits24_user(nullptr);
        static info::CryptoPP__IntegerGetByte25_ptr CryptoPP__IntegerGetByte25_next(nullptr);
        static info::CryptoPP__IntegerGetByte25_clbk CryptoPP__IntegerGetByte25_user(nullptr);
        static info::CryptoPP__Integerctor_Integer26_ptr CryptoPP__Integerctor_Integer26_next(nullptr);
        static info::CryptoPP__Integerctor_Integer26_clbk CryptoPP__Integerctor_Integer26_user(nullptr);
        static info::CryptoPP__Integerctor_Integer27_ptr CryptoPP__Integerctor_Integer27_next(nullptr);
        static info::CryptoPP__Integerctor_Integer27_clbk CryptoPP__Integerctor_Integer27_user(nullptr);
        static info::CryptoPP__Integerctor_Integer28_ptr CryptoPP__Integerctor_Integer28_next(nullptr);
        static info::CryptoPP__Integerctor_Integer28_clbk CryptoPP__Integerctor_Integer28_user(nullptr);
        static info::CryptoPP__Integerctor_Integer29_ptr CryptoPP__Integerctor_Integer29_next(nullptr);
        static info::CryptoPP__Integerctor_Integer29_clbk CryptoPP__Integerctor_Integer29_user(nullptr);
        static info::CryptoPP__Integerctor_Integer30_ptr CryptoPP__Integerctor_Integer30_next(nullptr);
        static info::CryptoPP__Integerctor_Integer30_clbk CryptoPP__Integerctor_Integer30_user(nullptr);
        static info::CryptoPP__Integerctor_Integer31_ptr CryptoPP__Integerctor_Integer31_next(nullptr);
        static info::CryptoPP__Integerctor_Integer31_clbk CryptoPP__Integerctor_Integer31_user(nullptr);
        static info::CryptoPP__Integerctor_Integer32_ptr CryptoPP__Integerctor_Integer32_next(nullptr);
        static info::CryptoPP__Integerctor_Integer32_clbk CryptoPP__Integerctor_Integer32_user(nullptr);
        static info::CryptoPP__Integerctor_Integer33_ptr CryptoPP__Integerctor_Integer33_next(nullptr);
        static info::CryptoPP__Integerctor_Integer33_clbk CryptoPP__Integerctor_Integer33_user(nullptr);
        static info::CryptoPP__Integerctor_Integer34_ptr CryptoPP__Integerctor_Integer34_next(nullptr);
        static info::CryptoPP__Integerctor_Integer34_clbk CryptoPP__Integerctor_Integer34_user(nullptr);
        static info::CryptoPP__Integerctor_Integer35_ptr CryptoPP__Integerctor_Integer35_next(nullptr);
        static info::CryptoPP__Integerctor_Integer35_clbk CryptoPP__Integerctor_Integer35_user(nullptr);
        static info::CryptoPP__Integerctor_Integer36_ptr CryptoPP__Integerctor_Integer36_next(nullptr);
        static info::CryptoPP__Integerctor_Integer36_clbk CryptoPP__Integerctor_Integer36_user(nullptr);
        static info::CryptoPP__Integerctor_Integer37_ptr CryptoPP__Integerctor_Integer37_next(nullptr);
        static info::CryptoPP__Integerctor_Integer37_clbk CryptoPP__Integerctor_Integer37_user(nullptr);
        static info::CryptoPP__Integerctor_Integer38_ptr CryptoPP__Integerctor_Integer38_next(nullptr);
        static info::CryptoPP__Integerctor_Integer38_clbk CryptoPP__Integerctor_Integer38_user(nullptr);
        static info::CryptoPP__IntegerInverseMod39_ptr CryptoPP__IntegerInverseMod39_next(nullptr);
        static info::CryptoPP__IntegerInverseMod39_clbk CryptoPP__IntegerInverseMod39_user(nullptr);
        static info::CryptoPP__IntegerInverseMod40_ptr CryptoPP__IntegerInverseMod40_next(nullptr);
        static info::CryptoPP__IntegerInverseMod40_clbk CryptoPP__IntegerInverseMod40_user(nullptr);
        static info::CryptoPP__IntegerIsConvertableToLong41_ptr CryptoPP__IntegerIsConvertableToLong41_next(nullptr);
        static info::CryptoPP__IntegerIsConvertableToLong41_clbk CryptoPP__IntegerIsConvertableToLong41_user(nullptr);
        static info::CryptoPP__IntegerIsEven42_ptr CryptoPP__IntegerIsEven42_next(nullptr);
        static info::CryptoPP__IntegerIsEven42_clbk CryptoPP__IntegerIsEven42_user(nullptr);
        static info::CryptoPP__IntegerIsNegative44_ptr CryptoPP__IntegerIsNegative44_next(nullptr);
        static info::CryptoPP__IntegerIsNegative44_clbk CryptoPP__IntegerIsNegative44_user(nullptr);
        static info::CryptoPP__IntegerIsOdd45_ptr CryptoPP__IntegerIsOdd45_next(nullptr);
        static info::CryptoPP__IntegerIsOdd45_clbk CryptoPP__IntegerIsOdd45_user(nullptr);
        static info::CryptoPP__IntegerIsPositive47_ptr CryptoPP__IntegerIsPositive47_next(nullptr);
        static info::CryptoPP__IntegerIsPositive47_clbk CryptoPP__IntegerIsPositive47_user(nullptr);
        static info::CryptoPP__IntegerIsSquare48_ptr CryptoPP__IntegerIsSquare48_next(nullptr);
        static info::CryptoPP__IntegerIsSquare48_clbk CryptoPP__IntegerIsSquare48_user(nullptr);
        static info::CryptoPP__IntegerIsUnit49_ptr CryptoPP__IntegerIsUnit49_next(nullptr);
        static info::CryptoPP__IntegerIsUnit49_clbk CryptoPP__IntegerIsUnit49_user(nullptr);
        static info::CryptoPP__IntegerIsZero51_ptr CryptoPP__IntegerIsZero51_next(nullptr);
        static info::CryptoPP__IntegerIsZero51_clbk CryptoPP__IntegerIsZero51_user(nullptr);
        static info::CryptoPP__IntegerMinEncodedSize52_ptr CryptoPP__IntegerMinEncodedSize52_next(nullptr);
        static info::CryptoPP__IntegerMinEncodedSize52_clbk CryptoPP__IntegerMinEncodedSize52_user(nullptr);
        static info::CryptoPP__IntegerMinus53_ptr CryptoPP__IntegerMinus53_next(nullptr);
        static info::CryptoPP__IntegerMinus53_clbk CryptoPP__IntegerMinus53_user(nullptr);
        static info::CryptoPP__IntegerModulo54_ptr CryptoPP__IntegerModulo54_next(nullptr);
        static info::CryptoPP__IntegerModulo54_clbk CryptoPP__IntegerModulo54_user(nullptr);
        static info::CryptoPP__IntegerModulo55_ptr CryptoPP__IntegerModulo55_next(nullptr);
        static info::CryptoPP__IntegerModulo55_clbk CryptoPP__IntegerModulo55_user(nullptr);
        static info::CryptoPP__IntegerMultiplicativeInverse56_ptr CryptoPP__IntegerMultiplicativeInverse56_next(nullptr);
        static info::CryptoPP__IntegerMultiplicativeInverse56_clbk CryptoPP__IntegerMultiplicativeInverse56_user(nullptr);
        static info::CryptoPP__IntegerNegate57_ptr CryptoPP__IntegerNegate57_next(nullptr);
        static info::CryptoPP__IntegerNegate57_clbk CryptoPP__IntegerNegate57_user(nullptr);
        static info::CryptoPP__IntegerNotNegative59_ptr CryptoPP__IntegerNotNegative59_next(nullptr);
        static info::CryptoPP__IntegerNotNegative59_clbk CryptoPP__IntegerNotNegative59_user(nullptr);
        static info::CryptoPP__IntegerNotZero61_ptr CryptoPP__IntegerNotZero61_next(nullptr);
        static info::CryptoPP__IntegerNotZero61_clbk CryptoPP__IntegerNotZero61_user(nullptr);
        static info::CryptoPP__IntegerOne62_ptr CryptoPP__IntegerOne62_next(nullptr);
        static info::CryptoPP__IntegerOne62_clbk CryptoPP__IntegerOne62_user(nullptr);
        static info::CryptoPP__IntegerOpenPGPDecode63_ptr CryptoPP__IntegerOpenPGPDecode63_next(nullptr);
        static info::CryptoPP__IntegerOpenPGPDecode63_clbk CryptoPP__IntegerOpenPGPDecode63_user(nullptr);
        static info::CryptoPP__IntegerOpenPGPDecode64_ptr CryptoPP__IntegerOpenPGPDecode64_next(nullptr);
        static info::CryptoPP__IntegerOpenPGPDecode64_clbk CryptoPP__IntegerOpenPGPDecode64_user(nullptr);
        static info::CryptoPP__IntegerOpenPGPEncode65_ptr CryptoPP__IntegerOpenPGPEncode65_next(nullptr);
        static info::CryptoPP__IntegerOpenPGPEncode65_clbk CryptoPP__IntegerOpenPGPEncode65_user(nullptr);
        static info::CryptoPP__IntegerOpenPGPEncode66_ptr CryptoPP__IntegerOpenPGPEncode66_next(nullptr);
        static info::CryptoPP__IntegerOpenPGPEncode66_clbk CryptoPP__IntegerOpenPGPEncode66_user(nullptr);
        static info::CryptoPP__IntegerPlus67_ptr CryptoPP__IntegerPlus67_next(nullptr);
        static info::CryptoPP__IntegerPlus67_clbk CryptoPP__IntegerPlus67_user(nullptr);
        static info::CryptoPP__IntegerPositiveCompare68_ptr CryptoPP__IntegerPositiveCompare68_next(nullptr);
        static info::CryptoPP__IntegerPositiveCompare68_clbk CryptoPP__IntegerPositiveCompare68_user(nullptr);
        static info::CryptoPP__IntegerPower269_ptr CryptoPP__IntegerPower269_next(nullptr);
        static info::CryptoPP__IntegerPower269_clbk CryptoPP__IntegerPower269_user(nullptr);
        static info::CryptoPP__IntegerRandomize70_ptr CryptoPP__IntegerRandomize70_next(nullptr);
        static info::CryptoPP__IntegerRandomize70_clbk CryptoPP__IntegerRandomize70_user(nullptr);
        static info::CryptoPP__IntegerRandomize71_ptr CryptoPP__IntegerRandomize71_next(nullptr);
        static info::CryptoPP__IntegerRandomize71_clbk CryptoPP__IntegerRandomize71_user(nullptr);
        static info::CryptoPP__IntegerRandomize72_ptr CryptoPP__IntegerRandomize72_next(nullptr);
        static info::CryptoPP__IntegerRandomize72_clbk CryptoPP__IntegerRandomize72_user(nullptr);
        static info::CryptoPP__IntegerSetBit73_ptr CryptoPP__IntegerSetBit73_next(nullptr);
        static info::CryptoPP__IntegerSetBit73_clbk CryptoPP__IntegerSetBit73_user(nullptr);
        static info::CryptoPP__IntegerSetByte74_ptr CryptoPP__IntegerSetByte74_next(nullptr);
        static info::CryptoPP__IntegerSetByte74_clbk CryptoPP__IntegerSetByte74_user(nullptr);
        static info::CryptoPP__IntegerSquareRoot75_ptr CryptoPP__IntegerSquareRoot75_next(nullptr);
        static info::CryptoPP__IntegerSquareRoot75_clbk CryptoPP__IntegerSquareRoot75_user(nullptr);
        static info::CryptoPP__IntegerSquared77_ptr CryptoPP__IntegerSquared77_next(nullptr);
        static info::CryptoPP__IntegerSquared77_clbk CryptoPP__IntegerSquared77_user(nullptr);
        static info::CryptoPP__IntegerTimes78_ptr CryptoPP__IntegerTimes78_next(nullptr);
        static info::CryptoPP__IntegerTimes78_clbk CryptoPP__IntegerTimes78_user(nullptr);
        static info::CryptoPP__IntegerTwo79_ptr CryptoPP__IntegerTwo79_next(nullptr);
        static info::CryptoPP__IntegerTwo79_clbk CryptoPP__IntegerTwo79_user(nullptr);
        static info::CryptoPP__IntegerWordCount80_ptr CryptoPP__IntegerWordCount80_next(nullptr);
        static info::CryptoPP__IntegerWordCount80_clbk CryptoPP__IntegerWordCount80_user(nullptr);
        static info::CryptoPP__IntegerZero81_ptr CryptoPP__IntegerZero81_next(nullptr);
        static info::CryptoPP__IntegerZero81_clbk CryptoPP__IntegerZero81_user(nullptr);
        static info::CryptoPP__Integerswap82_ptr CryptoPP__Integerswap82_next(nullptr);
        static info::CryptoPP__Integerswap82_clbk CryptoPP__Integerswap82_user(nullptr);
        static info::CryptoPP__Integerdtor_Integer84_ptr CryptoPP__Integerdtor_Integer84_next(nullptr);
        static info::CryptoPP__Integerdtor_Integer84_clbk CryptoPP__Integerdtor_Integer84_user(nullptr);
        
        static info::CryptoPP__Integer__DivideByZeroctor_DivideByZero1_ptr CryptoPP__Integer__DivideByZeroctor_DivideByZero1_next(nullptr);
        static info::CryptoPP__Integer__DivideByZeroctor_DivideByZero1_clbk CryptoPP__Integer__DivideByZeroctor_DivideByZero1_user(nullptr);
        static info::CryptoPP__Integer__DivideByZeroctor_DivideByZero2_ptr CryptoPP__Integer__DivideByZeroctor_DivideByZero2_next(nullptr);
        static info::CryptoPP__Integer__DivideByZeroctor_DivideByZero2_clbk CryptoPP__Integer__DivideByZeroctor_DivideByZero2_user(nullptr);
        static info::CryptoPP__Integer__DivideByZerodtor_DivideByZero3_ptr CryptoPP__Integer__DivideByZerodtor_DivideByZero3_next(nullptr);
        static info::CryptoPP__Integer__DivideByZerodtor_DivideByZero3_clbk CryptoPP__Integer__DivideByZerodtor_DivideByZero3_user(nullptr);
        
        static info::CryptoPP__Integer__RandomNumberNotFoundctor_RandomNumberNotFound1_ptr CryptoPP__Integer__RandomNumberNotFoundctor_RandomNumberNotFound1_next(nullptr);
        static info::CryptoPP__Integer__RandomNumberNotFoundctor_RandomNumberNotFound1_clbk CryptoPP__Integer__RandomNumberNotFoundctor_RandomNumberNotFound1_user(nullptr);
        static info::CryptoPP__Integer__RandomNumberNotFoundctor_RandomNumberNotFound2_ptr CryptoPP__Integer__RandomNumberNotFoundctor_RandomNumberNotFound2_next(nullptr);
        static info::CryptoPP__Integer__RandomNumberNotFoundctor_RandomNumberNotFound2_clbk CryptoPP__Integer__RandomNumberNotFoundctor_RandomNumberNotFound2_user(nullptr);
        static info::CryptoPP__Integer__RandomNumberNotFounddtor_RandomNumberNotFound3_ptr CryptoPP__Integer__RandomNumberNotFounddtor_RandomNumberNotFound3_next(nullptr);
        static info::CryptoPP__Integer__RandomNumberNotFounddtor_RandomNumberNotFound3_clbk CryptoPP__Integer__RandomNumberNotFounddtor_RandomNumberNotFound3_user(nullptr);
        
        static info::CryptoPP__Integer__OpenPGPDecodeErrctor_OpenPGPDecodeErr1_ptr CryptoPP__Integer__OpenPGPDecodeErrctor_OpenPGPDecodeErr1_next(nullptr);
        static info::CryptoPP__Integer__OpenPGPDecodeErrctor_OpenPGPDecodeErr1_clbk CryptoPP__Integer__OpenPGPDecodeErrctor_OpenPGPDecodeErr1_user(nullptr);
        static info::CryptoPP__Integer__OpenPGPDecodeErrctor_OpenPGPDecodeErr2_ptr CryptoPP__Integer__OpenPGPDecodeErrctor_OpenPGPDecodeErr2_next(nullptr);
        static info::CryptoPP__Integer__OpenPGPDecodeErrctor_OpenPGPDecodeErr2_clbk CryptoPP__Integer__OpenPGPDecodeErrctor_OpenPGPDecodeErr2_user(nullptr);
        static info::CryptoPP__Integer__OpenPGPDecodeErrdtor_OpenPGPDecodeErr3_ptr CryptoPP__Integer__OpenPGPDecodeErrdtor_OpenPGPDecodeErr3_next(nullptr);
        static info::CryptoPP__Integer__OpenPGPDecodeErrdtor_OpenPGPDecodeErr3_clbk CryptoPP__Integer__OpenPGPDecodeErrdtor_OpenPGPDecodeErr3_user(nullptr);
        
        static info::CryptoPP__ECPPointctor_ECPPoint2_ptr CryptoPP__ECPPointctor_ECPPoint2_next(nullptr);
        static info::CryptoPP__ECPPointctor_ECPPoint2_clbk CryptoPP__ECPPointctor_ECPPoint2_user(nullptr);
        static info::CryptoPP__ECPPointctor_ECPPoint4_ptr CryptoPP__ECPPointctor_ECPPoint4_next(nullptr);
        static info::CryptoPP__ECPPointctor_ECPPoint4_clbk CryptoPP__ECPPointctor_ECPPoint4_user(nullptr);
        static info::CryptoPP__ECPPointctor_ECPPoint6_ptr CryptoPP__ECPPointctor_ECPPoint6_next(nullptr);
        static info::CryptoPP__ECPPointctor_ECPPoint6_clbk CryptoPP__ECPPointctor_ECPPoint6_user(nullptr);
        static info::CryptoPP__ECPPointdtor_ECPPoint12_ptr CryptoPP__ECPPointdtor_ECPPoint12_next(nullptr);
        static info::CryptoPP__ECPPointdtor_ECPPoint12_clbk CryptoPP__ECPPointdtor_ECPPoint12_user(nullptr);
        
        static info::CryptoPP__AbstractGroupCascadeScalarMultiply1_ptr CryptoPP__AbstractGroupCascadeScalarMultiply1_next(nullptr);
        static info::CryptoPP__AbstractGroupCascadeScalarMultiply1_clbk CryptoPP__AbstractGroupCascadeScalarMultiply1_user(nullptr);
        
        static info::CryptoPP__AbstractGroupctor_AbstractGroup2_ptr CryptoPP__AbstractGroupctor_AbstractGroup2_next(nullptr);
        static info::CryptoPP__AbstractGroupctor_AbstractGroup2_clbk CryptoPP__AbstractGroupctor_AbstractGroup2_user(nullptr);
        static info::CryptoPP__AbstractGroupCascadeScalarMultiply3_ptr CryptoPP__AbstractGroupCascadeScalarMultiply3_next(nullptr);
        static info::CryptoPP__AbstractGroupCascadeScalarMultiply3_clbk CryptoPP__AbstractGroupCascadeScalarMultiply3_user(nullptr);
        static info::CryptoPP__AbstractGroupInversionIsFast5_ptr CryptoPP__AbstractGroupInversionIsFast5_next(nullptr);
        static info::CryptoPP__AbstractGroupInversionIsFast5_clbk CryptoPP__AbstractGroupInversionIsFast5_user(nullptr);
        static info::CryptoPP__AbstractGroupdtor_AbstractGroup7_ptr CryptoPP__AbstractGroupdtor_AbstractGroup7_next(nullptr);
        static info::CryptoPP__AbstractGroupdtor_AbstractGroup7_clbk CryptoPP__AbstractGroupdtor_AbstractGroup7_user(nullptr);
        
        static info::CryptoPP__AbstractRingctor_AbstractRing2_ptr CryptoPP__AbstractRingctor_AbstractRing2_next(nullptr);
        static info::CryptoPP__AbstractRingctor_AbstractRing2_clbk CryptoPP__AbstractRingctor_AbstractRing2_user(nullptr);
        static info::CryptoPP__AbstractRingMultiplicativeGroup4_ptr CryptoPP__AbstractRingMultiplicativeGroup4_next(nullptr);
        static info::CryptoPP__AbstractRingMultiplicativeGroup4_clbk CryptoPP__AbstractRingMultiplicativeGroup4_user(nullptr);
        static info::CryptoPP__AbstractRingdtor_AbstractRing6_ptr CryptoPP__AbstractRingdtor_AbstractRing6_next(nullptr);
        static info::CryptoPP__AbstractRingdtor_AbstractRing6_clbk CryptoPP__AbstractRingdtor_AbstractRing6_user(nullptr);
        
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTAccumulate2_ptr CryptoPP__AbstractRing__MultiplicativeGroupTAccumulate2_next(nullptr);
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTAccumulate2_clbk CryptoPP__AbstractRing__MultiplicativeGroupTAccumulate2_user(nullptr);
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTAdd4_ptr CryptoPP__AbstractRing__MultiplicativeGroupTAdd4_next(nullptr);
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTAdd4_clbk CryptoPP__AbstractRing__MultiplicativeGroupTAdd4_user(nullptr);
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTCascadeScalarMultiply6_ptr CryptoPP__AbstractRing__MultiplicativeGroupTCascadeScalarMultiply6_next(nullptr);
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTCascadeScalarMultiply6_clbk CryptoPP__AbstractRing__MultiplicativeGroupTCascadeScalarMultiply6_user(nullptr);
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTDouble8_ptr CryptoPP__AbstractRing__MultiplicativeGroupTDouble8_next(nullptr);
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTDouble8_clbk CryptoPP__AbstractRing__MultiplicativeGroupTDouble8_user(nullptr);
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTEqual10_ptr CryptoPP__AbstractRing__MultiplicativeGroupTEqual10_next(nullptr);
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTEqual10_clbk CryptoPP__AbstractRing__MultiplicativeGroupTEqual10_user(nullptr);
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTGetRing12_ptr CryptoPP__AbstractRing__MultiplicativeGroupTGetRing12_next(nullptr);
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTGetRing12_clbk CryptoPP__AbstractRing__MultiplicativeGroupTGetRing12_user(nullptr);
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTIdentity14_ptr CryptoPP__AbstractRing__MultiplicativeGroupTIdentity14_next(nullptr);
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTIdentity14_clbk CryptoPP__AbstractRing__MultiplicativeGroupTIdentity14_user(nullptr);
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTInverse16_ptr CryptoPP__AbstractRing__MultiplicativeGroupTInverse16_next(nullptr);
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTInverse16_clbk CryptoPP__AbstractRing__MultiplicativeGroupTInverse16_user(nullptr);
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTctor_MultiplicativeGroupT18_ptr CryptoPP__AbstractRing__MultiplicativeGroupTctor_MultiplicativeGroupT18_next(nullptr);
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTctor_MultiplicativeGroupT18_clbk CryptoPP__AbstractRing__MultiplicativeGroupTctor_MultiplicativeGroupT18_user(nullptr);
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTReduce20_ptr CryptoPP__AbstractRing__MultiplicativeGroupTReduce20_next(nullptr);
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTReduce20_clbk CryptoPP__AbstractRing__MultiplicativeGroupTReduce20_user(nullptr);
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTScalarMultiply22_ptr CryptoPP__AbstractRing__MultiplicativeGroupTScalarMultiply22_next(nullptr);
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTScalarMultiply22_clbk CryptoPP__AbstractRing__MultiplicativeGroupTScalarMultiply22_user(nullptr);
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTSimultaneousMultiply24_ptr CryptoPP__AbstractRing__MultiplicativeGroupTSimultaneousMultiply24_next(nullptr);
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTSimultaneousMultiply24_clbk CryptoPP__AbstractRing__MultiplicativeGroupTSimultaneousMultiply24_user(nullptr);
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTSubtract26_ptr CryptoPP__AbstractRing__MultiplicativeGroupTSubtract26_next(nullptr);
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTSubtract26_clbk CryptoPP__AbstractRing__MultiplicativeGroupTSubtract26_user(nullptr);
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTdtor_MultiplicativeGroupT31_ptr CryptoPP__AbstractRing__MultiplicativeGroupTdtor_MultiplicativeGroupT31_next(nullptr);
        static info::CryptoPP__AbstractRing__MultiplicativeGroupTdtor_MultiplicativeGroupT31_clbk CryptoPP__AbstractRing__MultiplicativeGroupTdtor_MultiplicativeGroupT31_user(nullptr);
        
        static info::CryptoPP__ModularArithmeticAccumulate1_ptr CryptoPP__ModularArithmeticAccumulate1_next(nullptr);
        static info::CryptoPP__ModularArithmeticAccumulate1_clbk CryptoPP__ModularArithmeticAccumulate1_user(nullptr);
        static info::CryptoPP__ModularArithmeticAdd2_ptr CryptoPP__ModularArithmeticAdd2_next(nullptr);
        static info::CryptoPP__ModularArithmeticAdd2_clbk CryptoPP__ModularArithmeticAdd2_user(nullptr);
        static info::CryptoPP__ModularArithmeticBERDecodeElement3_ptr CryptoPP__ModularArithmeticBERDecodeElement3_next(nullptr);
        static info::CryptoPP__ModularArithmeticBERDecodeElement3_clbk CryptoPP__ModularArithmeticBERDecodeElement3_user(nullptr);
        static info::CryptoPP__ModularArithmeticCascadeExponentiate4_ptr CryptoPP__ModularArithmeticCascadeExponentiate4_next(nullptr);
        static info::CryptoPP__ModularArithmeticCascadeExponentiate4_clbk CryptoPP__ModularArithmeticCascadeExponentiate4_user(nullptr);
        static info::CryptoPP__ModularArithmeticClone6_ptr CryptoPP__ModularArithmeticClone6_next(nullptr);
        static info::CryptoPP__ModularArithmeticClone6_clbk CryptoPP__ModularArithmeticClone6_user(nullptr);
        static info::CryptoPP__ModularArithmeticConvertIn8_ptr CryptoPP__ModularArithmeticConvertIn8_next(nullptr);
        static info::CryptoPP__ModularArithmeticConvertIn8_clbk CryptoPP__ModularArithmeticConvertIn8_user(nullptr);
        static info::CryptoPP__ModularArithmeticConvertOut10_ptr CryptoPP__ModularArithmeticConvertOut10_next(nullptr);
        static info::CryptoPP__ModularArithmeticConvertOut10_clbk CryptoPP__ModularArithmeticConvertOut10_user(nullptr);
        static info::CryptoPP__ModularArithmeticDEREncode11_ptr CryptoPP__ModularArithmeticDEREncode11_next(nullptr);
        static info::CryptoPP__ModularArithmeticDEREncode11_clbk CryptoPP__ModularArithmeticDEREncode11_user(nullptr);
        static info::CryptoPP__ModularArithmeticDEREncodeElement12_ptr CryptoPP__ModularArithmeticDEREncodeElement12_next(nullptr);
        static info::CryptoPP__ModularArithmeticDEREncodeElement12_clbk CryptoPP__ModularArithmeticDEREncodeElement12_user(nullptr);
        static info::CryptoPP__ModularArithmeticDivide14_ptr CryptoPP__ModularArithmeticDivide14_next(nullptr);
        static info::CryptoPP__ModularArithmeticDivide14_clbk CryptoPP__ModularArithmeticDivide14_user(nullptr);
        static info::CryptoPP__ModularArithmeticDouble16_ptr CryptoPP__ModularArithmeticDouble16_next(nullptr);
        static info::CryptoPP__ModularArithmeticDouble16_clbk CryptoPP__ModularArithmeticDouble16_user(nullptr);
        static info::CryptoPP__ModularArithmeticEqual18_ptr CryptoPP__ModularArithmeticEqual18_next(nullptr);
        static info::CryptoPP__ModularArithmeticEqual18_clbk CryptoPP__ModularArithmeticEqual18_user(nullptr);
        static info::CryptoPP__ModularArithmeticGetModulus19_ptr CryptoPP__ModularArithmeticGetModulus19_next(nullptr);
        static info::CryptoPP__ModularArithmeticGetModulus19_clbk CryptoPP__ModularArithmeticGetModulus19_user(nullptr);
        static info::CryptoPP__ModularArithmeticHalf20_ptr CryptoPP__ModularArithmeticHalf20_next(nullptr);
        static info::CryptoPP__ModularArithmeticHalf20_clbk CryptoPP__ModularArithmeticHalf20_user(nullptr);
        static info::CryptoPP__ModularArithmeticIdentity22_ptr CryptoPP__ModularArithmeticIdentity22_next(nullptr);
        static info::CryptoPP__ModularArithmeticIdentity22_clbk CryptoPP__ModularArithmeticIdentity22_user(nullptr);
        static info::CryptoPP__ModularArithmeticInverse23_ptr CryptoPP__ModularArithmeticInverse23_next(nullptr);
        static info::CryptoPP__ModularArithmeticInverse23_clbk CryptoPP__ModularArithmeticInverse23_user(nullptr);
        static info::CryptoPP__ModularArithmeticIsMontgomeryRepresentation25_ptr CryptoPP__ModularArithmeticIsMontgomeryRepresentation25_next(nullptr);
        static info::CryptoPP__ModularArithmeticIsMontgomeryRepresentation25_clbk CryptoPP__ModularArithmeticIsMontgomeryRepresentation25_user(nullptr);
        static info::CryptoPP__ModularArithmeticIsUnit27_ptr CryptoPP__ModularArithmeticIsUnit27_next(nullptr);
        static info::CryptoPP__ModularArithmeticIsUnit27_clbk CryptoPP__ModularArithmeticIsUnit27_user(nullptr);
        static info::CryptoPP__ModularArithmeticMaxElementByteLength29_ptr CryptoPP__ModularArithmeticMaxElementByteLength29_next(nullptr);
        static info::CryptoPP__ModularArithmeticMaxElementByteLength29_clbk CryptoPP__ModularArithmeticMaxElementByteLength29_user(nullptr);
        static info::CryptoPP__ModularArithmeticctor_ModularArithmetic30_ptr CryptoPP__ModularArithmeticctor_ModularArithmetic30_next(nullptr);
        static info::CryptoPP__ModularArithmeticctor_ModularArithmetic30_clbk CryptoPP__ModularArithmeticctor_ModularArithmetic30_user(nullptr);
        static info::CryptoPP__ModularArithmeticctor_ModularArithmetic32_ptr CryptoPP__ModularArithmeticctor_ModularArithmetic32_next(nullptr);
        static info::CryptoPP__ModularArithmeticctor_ModularArithmetic32_clbk CryptoPP__ModularArithmeticctor_ModularArithmetic32_user(nullptr);
        static info::CryptoPP__ModularArithmeticctor_ModularArithmetic34_ptr CryptoPP__ModularArithmeticctor_ModularArithmetic34_next(nullptr);
        static info::CryptoPP__ModularArithmeticctor_ModularArithmetic34_clbk CryptoPP__ModularArithmeticctor_ModularArithmetic34_user(nullptr);
        static info::CryptoPP__ModularArithmeticMultiplicativeIdentity36_ptr CryptoPP__ModularArithmeticMultiplicativeIdentity36_next(nullptr);
        static info::CryptoPP__ModularArithmeticMultiplicativeIdentity36_clbk CryptoPP__ModularArithmeticMultiplicativeIdentity36_user(nullptr);
        static info::CryptoPP__ModularArithmeticMultiplicativeInverse38_ptr CryptoPP__ModularArithmeticMultiplicativeInverse38_next(nullptr);
        static info::CryptoPP__ModularArithmeticMultiplicativeInverse38_clbk CryptoPP__ModularArithmeticMultiplicativeInverse38_user(nullptr);
        static info::CryptoPP__ModularArithmeticMultiply40_ptr CryptoPP__ModularArithmeticMultiply40_next(nullptr);
        static info::CryptoPP__ModularArithmeticMultiply40_clbk CryptoPP__ModularArithmeticMultiply40_user(nullptr);
        static info::CryptoPP__ModularArithmeticReduce41_ptr CryptoPP__ModularArithmeticReduce41_next(nullptr);
        static info::CryptoPP__ModularArithmeticReduce41_clbk CryptoPP__ModularArithmeticReduce41_user(nullptr);
        static info::CryptoPP__ModularArithmeticSimultaneousExponentiate42_ptr CryptoPP__ModularArithmeticSimultaneousExponentiate42_next(nullptr);
        static info::CryptoPP__ModularArithmeticSimultaneousExponentiate42_clbk CryptoPP__ModularArithmeticSimultaneousExponentiate42_user(nullptr);
        static info::CryptoPP__ModularArithmeticSquare44_ptr CryptoPP__ModularArithmeticSquare44_next(nullptr);
        static info::CryptoPP__ModularArithmeticSquare44_clbk CryptoPP__ModularArithmeticSquare44_user(nullptr);
        static info::CryptoPP__ModularArithmeticSubtract45_ptr CryptoPP__ModularArithmeticSubtract45_next(nullptr);
        static info::CryptoPP__ModularArithmeticSubtract45_clbk CryptoPP__ModularArithmeticSubtract45_user(nullptr);
        static info::CryptoPP__ModularArithmeticdtor_ModularArithmetic50_ptr CryptoPP__ModularArithmeticdtor_ModularArithmetic50_next(nullptr);
        static info::CryptoPP__ModularArithmeticdtor_ModularArithmetic50_clbk CryptoPP__ModularArithmeticdtor_ModularArithmetic50_user(nullptr);
        
        static info::CryptoPP__ECPAdd1_ptr CryptoPP__ECPAdd1_next(nullptr);
        static info::CryptoPP__ECPAdd1_clbk CryptoPP__ECPAdd1_user(nullptr);
        static info::CryptoPP__ECPBERDecodePoint2_ptr CryptoPP__ECPBERDecodePoint2_next(nullptr);
        static info::CryptoPP__ECPBERDecodePoint2_clbk CryptoPP__ECPBERDecodePoint2_user(nullptr);
        static info::CryptoPP__ECPCascadeMultiply3_ptr CryptoPP__ECPCascadeMultiply3_next(nullptr);
        static info::CryptoPP__ECPCascadeMultiply3_clbk CryptoPP__ECPCascadeMultiply3_user(nullptr);
        static info::CryptoPP__ECPCascadeScalarMultiply4_ptr CryptoPP__ECPCascadeScalarMultiply4_next(nullptr);
        static info::CryptoPP__ECPCascadeScalarMultiply4_clbk CryptoPP__ECPCascadeScalarMultiply4_user(nullptr);
        static info::CryptoPP__ECPDEREncode5_ptr CryptoPP__ECPDEREncode5_next(nullptr);
        static info::CryptoPP__ECPDEREncode5_clbk CryptoPP__ECPDEREncode5_user(nullptr);
        static info::CryptoPP__ECPDEREncodePoint6_ptr CryptoPP__ECPDEREncodePoint6_next(nullptr);
        static info::CryptoPP__ECPDEREncodePoint6_clbk CryptoPP__ECPDEREncodePoint6_user(nullptr);
        static info::CryptoPP__ECPDecodePoint7_ptr CryptoPP__ECPDecodePoint7_next(nullptr);
        static info::CryptoPP__ECPDecodePoint7_clbk CryptoPP__ECPDecodePoint7_user(nullptr);
        static info::CryptoPP__ECPDecodePoint8_ptr CryptoPP__ECPDecodePoint8_next(nullptr);
        static info::CryptoPP__ECPDecodePoint8_clbk CryptoPP__ECPDecodePoint8_user(nullptr);
        static info::CryptoPP__ECPDouble9_ptr CryptoPP__ECPDouble9_next(nullptr);
        static info::CryptoPP__ECPDouble9_clbk CryptoPP__ECPDouble9_user(nullptr);
        static info::CryptoPP__ECPctor_ECP10_ptr CryptoPP__ECPctor_ECP10_next(nullptr);
        static info::CryptoPP__ECPctor_ECP10_clbk CryptoPP__ECPctor_ECP10_user(nullptr);
        static info::CryptoPP__ECPctor_ECP11_ptr CryptoPP__ECPctor_ECP11_next(nullptr);
        static info::CryptoPP__ECPctor_ECP11_clbk CryptoPP__ECPctor_ECP11_user(nullptr);
        static info::CryptoPP__ECPctor_ECP12_ptr CryptoPP__ECPctor_ECP12_next(nullptr);
        static info::CryptoPP__ECPctor_ECP12_clbk CryptoPP__ECPctor_ECP12_user(nullptr);
        static info::CryptoPP__ECPctor_ECP13_ptr CryptoPP__ECPctor_ECP13_next(nullptr);
        static info::CryptoPP__ECPctor_ECP13_clbk CryptoPP__ECPctor_ECP13_user(nullptr);
        static info::CryptoPP__ECPEncodePoint14_ptr CryptoPP__ECPEncodePoint14_next(nullptr);
        static info::CryptoPP__ECPEncodePoint14_clbk CryptoPP__ECPEncodePoint14_user(nullptr);
        static info::CryptoPP__ECPEncodePoint15_ptr CryptoPP__ECPEncodePoint15_next(nullptr);
        static info::CryptoPP__ECPEncodePoint15_clbk CryptoPP__ECPEncodePoint15_user(nullptr);
        static info::CryptoPP__ECPEncodedPointSize17_ptr CryptoPP__ECPEncodedPointSize17_next(nullptr);
        static info::CryptoPP__ECPEncodedPointSize17_clbk CryptoPP__ECPEncodedPointSize17_user(nullptr);
        static info::CryptoPP__ECPEqual18_ptr CryptoPP__ECPEqual18_next(nullptr);
        static info::CryptoPP__ECPEqual18_clbk CryptoPP__ECPEqual18_user(nullptr);
        static info::CryptoPP__ECPFieldSize19_ptr CryptoPP__ECPFieldSize19_next(nullptr);
        static info::CryptoPP__ECPFieldSize19_clbk CryptoPP__ECPFieldSize19_user(nullptr);
        static info::CryptoPP__ECPGetField21_ptr CryptoPP__ECPGetField21_next(nullptr);
        static info::CryptoPP__ECPGetField21_clbk CryptoPP__ECPGetField21_user(nullptr);
        static info::CryptoPP__ECPIdentity22_ptr CryptoPP__ECPIdentity22_next(nullptr);
        static info::CryptoPP__ECPIdentity22_clbk CryptoPP__ECPIdentity22_user(nullptr);
        static info::CryptoPP__ECPInverse23_ptr CryptoPP__ECPInverse23_next(nullptr);
        static info::CryptoPP__ECPInverse23_clbk CryptoPP__ECPInverse23_user(nullptr);
        static info::CryptoPP__ECPInversionIsFast24_ptr CryptoPP__ECPInversionIsFast24_next(nullptr);
        static info::CryptoPP__ECPInversionIsFast24_clbk CryptoPP__ECPInversionIsFast24_user(nullptr);
        static info::CryptoPP__ECPScalarMultiply25_ptr CryptoPP__ECPScalarMultiply25_next(nullptr);
        static info::CryptoPP__ECPScalarMultiply25_clbk CryptoPP__ECPScalarMultiply25_user(nullptr);
        static info::CryptoPP__ECPSimultaneousMultiply26_ptr CryptoPP__ECPSimultaneousMultiply26_next(nullptr);
        static info::CryptoPP__ECPSimultaneousMultiply26_clbk CryptoPP__ECPSimultaneousMultiply26_user(nullptr);
        static info::CryptoPP__ECPValidateParameters27_ptr CryptoPP__ECPValidateParameters27_next(nullptr);
        static info::CryptoPP__ECPValidateParameters27_clbk CryptoPP__ECPValidateParameters27_user(nullptr);
        static info::CryptoPP__ECPVerifyPoint28_ptr CryptoPP__ECPVerifyPoint28_next(nullptr);
        static info::CryptoPP__ECPVerifyPoint28_clbk CryptoPP__ECPVerifyPoint28_user(nullptr);
        static info::CryptoPP__ECPdtor_ECP29_ptr CryptoPP__ECPdtor_ECP29_next(nullptr);
        static info::CryptoPP__ECPdtor_ECP29_clbk CryptoPP__ECPdtor_ECP29_user(nullptr);
        
        static info::CryptoPP__member_ptrctor_member_ptr2_ptr CryptoPP__member_ptrctor_member_ptr2_next(nullptr);
        static info::CryptoPP__member_ptrctor_member_ptr2_clbk CryptoPP__member_ptrctor_member_ptr2_user(nullptr);
        static info::CryptoPP__member_ptrdtor_member_ptr8_ptr CryptoPP__member_ptrdtor_member_ptr8_next(nullptr);
        static info::CryptoPP__member_ptrdtor_member_ptr8_clbk CryptoPP__member_ptrdtor_member_ptr8_user(nullptr);
        
        static info::CryptoPP__value_ptrctor_value_ptr4_ptr CryptoPP__value_ptrctor_value_ptr4_next(nullptr);
        static info::CryptoPP__value_ptrctor_value_ptr4_clbk CryptoPP__value_ptrctor_value_ptr4_user(nullptr);
        static info::CryptoPP__value_ptrdtor_value_ptr6_ptr CryptoPP__value_ptrdtor_value_ptr6_next(nullptr);
        static info::CryptoPP__value_ptrdtor_value_ptr6_clbk CryptoPP__value_ptrdtor_value_ptr6_user(nullptr);
        
        static info::CryptoPP__EcPrecomputationBERDecodeElement2_ptr CryptoPP__EcPrecomputationBERDecodeElement2_next(nullptr);
        static info::CryptoPP__EcPrecomputationBERDecodeElement2_clbk CryptoPP__EcPrecomputationBERDecodeElement2_user(nullptr);
        static info::CryptoPP__EcPrecomputationConvertIn4_ptr CryptoPP__EcPrecomputationConvertIn4_next(nullptr);
        static info::CryptoPP__EcPrecomputationConvertIn4_clbk CryptoPP__EcPrecomputationConvertIn4_user(nullptr);
        static info::CryptoPP__EcPrecomputationConvertOut6_ptr CryptoPP__EcPrecomputationConvertOut6_next(nullptr);
        static info::CryptoPP__EcPrecomputationConvertOut6_clbk CryptoPP__EcPrecomputationConvertOut6_user(nullptr);
        static info::CryptoPP__EcPrecomputationDEREncodeElement8_ptr CryptoPP__EcPrecomputationDEREncodeElement8_next(nullptr);
        static info::CryptoPP__EcPrecomputationDEREncodeElement8_clbk CryptoPP__EcPrecomputationDEREncodeElement8_user(nullptr);
        static info::CryptoPP__EcPrecomputationctor_EcPrecomputation10_ptr CryptoPP__EcPrecomputationctor_EcPrecomputation10_next(nullptr);
        static info::CryptoPP__EcPrecomputationctor_EcPrecomputation10_clbk CryptoPP__EcPrecomputationctor_EcPrecomputation10_user(nullptr);
        static info::CryptoPP__EcPrecomputationGetCurve12_ptr CryptoPP__EcPrecomputationGetCurve12_next(nullptr);
        static info::CryptoPP__EcPrecomputationGetCurve12_clbk CryptoPP__EcPrecomputationGetCurve12_user(nullptr);
        static info::CryptoPP__EcPrecomputationGetGroup14_ptr CryptoPP__EcPrecomputationGetGroup14_next(nullptr);
        static info::CryptoPP__EcPrecomputationGetGroup14_clbk CryptoPP__EcPrecomputationGetGroup14_user(nullptr);
        static info::CryptoPP__EcPrecomputationNeedConversions16_ptr CryptoPP__EcPrecomputationNeedConversions16_next(nullptr);
        static info::CryptoPP__EcPrecomputationNeedConversions16_clbk CryptoPP__EcPrecomputationNeedConversions16_user(nullptr);
        static info::CryptoPP__EcPrecomputationdtor_EcPrecomputation20_ptr CryptoPP__EcPrecomputationdtor_EcPrecomputation20_next(nullptr);
        static info::CryptoPP__EcPrecomputationdtor_EcPrecomputation20_clbk CryptoPP__EcPrecomputationdtor_EcPrecomputation20_user(nullptr);
        
        static info::CryptoPP__DL_FixedBasePrecomputationctor_DL_FixedBasePrecomputation2_ptr CryptoPP__DL_FixedBasePrecomputationctor_DL_FixedBasePrecomputation2_next(nullptr);
        static info::CryptoPP__DL_FixedBasePrecomputationctor_DL_FixedBasePrecomputation2_clbk CryptoPP__DL_FixedBasePrecomputationctor_DL_FixedBasePrecomputation2_user(nullptr);
        
        static info::CryptoPP__DL_FixedBasePrecomputationImplctor_DL_FixedBasePrecomputationImpl2_ptr CryptoPP__DL_FixedBasePrecomputationImplctor_DL_FixedBasePrecomputationImpl2_next(nullptr);
        static info::CryptoPP__DL_FixedBasePrecomputationImplctor_DL_FixedBasePrecomputationImpl2_clbk CryptoPP__DL_FixedBasePrecomputationImplctor_DL_FixedBasePrecomputationImpl2_user(nullptr);
        static info::CryptoPP__DL_FixedBasePrecomputationImplGetBase4_ptr CryptoPP__DL_FixedBasePrecomputationImplGetBase4_next(nullptr);
        static info::CryptoPP__DL_FixedBasePrecomputationImplGetBase4_clbk CryptoPP__DL_FixedBasePrecomputationImplGetBase4_user(nullptr);
        static info::CryptoPP__DL_FixedBasePrecomputationImplIsInitialized6_ptr CryptoPP__DL_FixedBasePrecomputationImplIsInitialized6_next(nullptr);
        static info::CryptoPP__DL_FixedBasePrecomputationImplIsInitialized6_clbk CryptoPP__DL_FixedBasePrecomputationImplIsInitialized6_user(nullptr);
        static info::CryptoPP__DL_FixedBasePrecomputationImpldtor_DL_FixedBasePrecomputationImpl10_ptr CryptoPP__DL_FixedBasePrecomputationImpldtor_DL_FixedBasePrecomputationImpl10_next(nullptr);
        static info::CryptoPP__DL_FixedBasePrecomputationImpldtor_DL_FixedBasePrecomputationImpl10_clbk CryptoPP__DL_FixedBasePrecomputationImpldtor_DL_FixedBasePrecomputationImpl10_user(nullptr);
        
        static info::CryptoPP__OIDBERDecode1_ptr CryptoPP__OIDBERDecode1_next(nullptr);
        static info::CryptoPP__OIDBERDecode1_clbk CryptoPP__OIDBERDecode1_user(nullptr);
        static info::CryptoPP__OIDBERDecodeAndCheck2_ptr CryptoPP__OIDBERDecodeAndCheck2_next(nullptr);
        static info::CryptoPP__OIDBERDecodeAndCheck2_clbk CryptoPP__OIDBERDecodeAndCheck2_user(nullptr);
        static info::CryptoPP__OIDDEREncode3_ptr CryptoPP__OIDDEREncode3_next(nullptr);
        static info::CryptoPP__OIDDEREncode3_clbk CryptoPP__OIDDEREncode3_user(nullptr);
        static info::CryptoPP__OIDDecodeValue4_ptr CryptoPP__OIDDecodeValue4_next(nullptr);
        static info::CryptoPP__OIDDecodeValue4_clbk CryptoPP__OIDDecodeValue4_user(nullptr);
        static info::CryptoPP__OIDEncodeValue5_ptr CryptoPP__OIDEncodeValue5_next(nullptr);
        static info::CryptoPP__OIDEncodeValue5_clbk CryptoPP__OIDEncodeValue5_user(nullptr);
        static info::CryptoPP__OIDctor_OID6_ptr CryptoPP__OIDctor_OID6_next(nullptr);
        static info::CryptoPP__OIDctor_OID6_clbk CryptoPP__OIDctor_OID6_user(nullptr);
        static info::CryptoPP__OIDctor_OID7_ptr CryptoPP__OIDctor_OID7_next(nullptr);
        static info::CryptoPP__OIDctor_OID7_clbk CryptoPP__OIDctor_OID7_user(nullptr);
        static info::CryptoPP__OIDctor_OID8_ptr CryptoPP__OIDctor_OID8_next(nullptr);
        static info::CryptoPP__OIDctor_OID8_clbk CryptoPP__OIDctor_OID8_user(nullptr);
        static info::CryptoPP__OIDctor_OID10_ptr CryptoPP__OIDctor_OID10_next(nullptr);
        static info::CryptoPP__OIDctor_OID10_clbk CryptoPP__OIDctor_OID10_user(nullptr);
        static info::CryptoPP__OIDdtor_OID14_ptr CryptoPP__OIDdtor_OID14_next(nullptr);
        static info::CryptoPP__OIDdtor_OID14_clbk CryptoPP__OIDdtor_OID14_user(nullptr);
        
        static info::CryptoPP__DL_GroupParameters_ECAccessBasePrecomputation2_ptr CryptoPP__DL_GroupParameters_ECAccessBasePrecomputation2_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_ECAccessBasePrecomputation2_clbk CryptoPP__DL_GroupParameters_ECAccessBasePrecomputation2_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_ECCascadeExponentiate3_ptr CryptoPP__DL_GroupParameters_ECCascadeExponentiate3_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_ECCascadeExponentiate3_clbk CryptoPP__DL_GroupParameters_ECCascadeExponentiate3_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_ECctor_DL_GroupParameters_EC5_ptr CryptoPP__DL_GroupParameters_ECctor_DL_GroupParameters_EC5_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_ECctor_DL_GroupParameters_EC5_clbk CryptoPP__DL_GroupParameters_ECctor_DL_GroupParameters_EC5_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_ECDecodeElement7_ptr CryptoPP__DL_GroupParameters_ECDecodeElement7_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_ECDecodeElement7_clbk CryptoPP__DL_GroupParameters_ECDecodeElement7_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_ECEncodeElement9_ptr CryptoPP__DL_GroupParameters_ECEncodeElement9_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_ECEncodeElement9_clbk CryptoPP__DL_GroupParameters_ECEncodeElement9_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_ECFastSubgroupCheckAvailable11_ptr CryptoPP__DL_GroupParameters_ECFastSubgroupCheckAvailable11_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_ECFastSubgroupCheckAvailable11_clbk CryptoPP__DL_GroupParameters_ECFastSubgroupCheckAvailable11_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_ECGetBasePrecomputation13_ptr CryptoPP__DL_GroupParameters_ECGetBasePrecomputation13_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_ECGetBasePrecomputation13_clbk CryptoPP__DL_GroupParameters_ECGetBasePrecomputation13_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_ECGetCurve15_ptr CryptoPP__DL_GroupParameters_ECGetCurve15_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_ECGetCurve15_clbk CryptoPP__DL_GroupParameters_ECGetCurve15_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_ECGetEncodedElementSize17_ptr CryptoPP__DL_GroupParameters_ECGetEncodedElementSize17_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_ECGetEncodedElementSize17_clbk CryptoPP__DL_GroupParameters_ECGetEncodedElementSize17_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_ECGetMaxExponent19_ptr CryptoPP__DL_GroupParameters_ECGetMaxExponent19_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_ECGetMaxExponent19_clbk CryptoPP__DL_GroupParameters_ECGetMaxExponent19_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_ECGetSubgroupOrder21_ptr CryptoPP__DL_GroupParameters_ECGetSubgroupOrder21_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_ECGetSubgroupOrder21_clbk CryptoPP__DL_GroupParameters_ECGetSubgroupOrder21_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_ECIsIdentity23_ptr CryptoPP__DL_GroupParameters_ECIsIdentity23_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_ECIsIdentity23_clbk CryptoPP__DL_GroupParameters_ECIsIdentity23_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_ECdtor_DL_GroupParameters_EC32_ptr CryptoPP__DL_GroupParameters_ECdtor_DL_GroupParameters_EC32_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_ECdtor_DL_GroupParameters_EC32_clbk CryptoPP__DL_GroupParameters_ECdtor_DL_GroupParameters_EC32_user(nullptr);
        
        static info::CryptoPP__DL_KeyImplAccessGroupParameters2_ptr CryptoPP__DL_KeyImplAccessGroupParameters2_next(nullptr);
        static info::CryptoPP__DL_KeyImplAccessGroupParameters2_clbk CryptoPP__DL_KeyImplAccessGroupParameters2_user(nullptr);
        static info::CryptoPP__DL_KeyImplBERDecodeAlgorithmParameters4_ptr CryptoPP__DL_KeyImplBERDecodeAlgorithmParameters4_next(nullptr);
        static info::CryptoPP__DL_KeyImplBERDecodeAlgorithmParameters4_clbk CryptoPP__DL_KeyImplBERDecodeAlgorithmParameters4_user(nullptr);
        static info::CryptoPP__DL_KeyImplDEREncodeAlgorithmParameters6_ptr CryptoPP__DL_KeyImplDEREncodeAlgorithmParameters6_next(nullptr);
        static info::CryptoPP__DL_KeyImplDEREncodeAlgorithmParameters6_clbk CryptoPP__DL_KeyImplDEREncodeAlgorithmParameters6_user(nullptr);
        static info::CryptoPP__DL_KeyImplctor_DL_KeyImpl8_ptr CryptoPP__DL_KeyImplctor_DL_KeyImpl8_next(nullptr);
        static info::CryptoPP__DL_KeyImplctor_DL_KeyImpl8_clbk CryptoPP__DL_KeyImplctor_DL_KeyImpl8_user(nullptr);
        static info::CryptoPP__DL_KeyImplGetAlgorithmID10_ptr CryptoPP__DL_KeyImplGetAlgorithmID10_next(nullptr);
        static info::CryptoPP__DL_KeyImplGetAlgorithmID10_clbk CryptoPP__DL_KeyImplGetAlgorithmID10_user(nullptr);
        static info::CryptoPP__DL_KeyImplGetGroupParameters12_ptr CryptoPP__DL_KeyImplGetGroupParameters12_next(nullptr);
        static info::CryptoPP__DL_KeyImplGetGroupParameters12_clbk CryptoPP__DL_KeyImplGetGroupParameters12_user(nullptr);
        static info::CryptoPP__DL_KeyImpldtor_DL_KeyImpl21_ptr CryptoPP__DL_KeyImpldtor_DL_KeyImpl21_next(nullptr);
        static info::CryptoPP__DL_KeyImpldtor_DL_KeyImpl21_clbk CryptoPP__DL_KeyImpldtor_DL_KeyImpl21_user(nullptr);
        
        static info::CryptoPP__DL_PrivateKey_ECctor_DL_PrivateKey_EC2_ptr CryptoPP__DL_PrivateKey_ECctor_DL_PrivateKey_EC2_next(nullptr);
        static info::CryptoPP__DL_PrivateKey_ECctor_DL_PrivateKey_EC2_clbk CryptoPP__DL_PrivateKey_ECctor_DL_PrivateKey_EC2_user(nullptr);
        static info::CryptoPP__DL_PrivateKey_ECdtor_DL_PrivateKey_EC9_ptr CryptoPP__DL_PrivateKey_ECdtor_DL_PrivateKey_EC9_next(nullptr);
        static info::CryptoPP__DL_PrivateKey_ECdtor_DL_PrivateKey_EC9_clbk CryptoPP__DL_PrivateKey_ECdtor_DL_PrivateKey_EC9_user(nullptr);
        
        static info::CryptoPP__DL_PublicKeyAssignFrom2_ptr CryptoPP__DL_PublicKeyAssignFrom2_next(nullptr);
        static info::CryptoPP__DL_PublicKeyAssignFrom2_clbk CryptoPP__DL_PublicKeyAssignFrom2_user(nullptr);
        static info::CryptoPP__DL_PublicKeyCascadeExponentiateBaseAndPublicElement4_ptr CryptoPP__DL_PublicKeyCascadeExponentiateBaseAndPublicElement4_next(nullptr);
        static info::CryptoPP__DL_PublicKeyCascadeExponentiateBaseAndPublicElement4_clbk CryptoPP__DL_PublicKeyCascadeExponentiateBaseAndPublicElement4_user(nullptr);
        static info::CryptoPP__DL_PublicKeyctor_DL_PublicKey6_ptr CryptoPP__DL_PublicKeyctor_DL_PublicKey6_next(nullptr);
        static info::CryptoPP__DL_PublicKeyctor_DL_PublicKey6_clbk CryptoPP__DL_PublicKeyctor_DL_PublicKey6_user(nullptr);
        static info::CryptoPP__DL_PublicKeyExponentiatePublicElement8_ptr CryptoPP__DL_PublicKeyExponentiatePublicElement8_next(nullptr);
        static info::CryptoPP__DL_PublicKeyExponentiatePublicElement8_clbk CryptoPP__DL_PublicKeyExponentiatePublicElement8_user(nullptr);
        static info::CryptoPP__DL_PublicKeyGetPublicElement10_ptr CryptoPP__DL_PublicKeyGetPublicElement10_next(nullptr);
        static info::CryptoPP__DL_PublicKeyGetPublicElement10_clbk CryptoPP__DL_PublicKeyGetPublicElement10_user(nullptr);
        static info::CryptoPP__DL_PublicKeyGetVoidValue12_ptr CryptoPP__DL_PublicKeyGetVoidValue12_next(nullptr);
        static info::CryptoPP__DL_PublicKeyGetVoidValue12_clbk CryptoPP__DL_PublicKeyGetVoidValue12_user(nullptr);
        static info::CryptoPP__DL_PublicKeySetPublicElement14_ptr CryptoPP__DL_PublicKeySetPublicElement14_next(nullptr);
        static info::CryptoPP__DL_PublicKeySetPublicElement14_clbk CryptoPP__DL_PublicKeySetPublicElement14_user(nullptr);
        
        static info::CryptoPP__PublicKeyctor_PublicKey2_ptr CryptoPP__PublicKeyctor_PublicKey2_next(nullptr);
        static info::CryptoPP__PublicKeyctor_PublicKey2_clbk CryptoPP__PublicKeyctor_PublicKey2_user(nullptr);
        static info::CryptoPP__PublicKeydtor_PublicKey6_ptr CryptoPP__PublicKeydtor_PublicKey6_next(nullptr);
        static info::CryptoPP__PublicKeydtor_PublicKey6_clbk CryptoPP__PublicKeydtor_PublicKey6_user(nullptr);
        
        static info::CryptoPP__ASN1CryptoMaterialctor_ASN1CryptoMaterial2_ptr CryptoPP__ASN1CryptoMaterialctor_ASN1CryptoMaterial2_next(nullptr);
        static info::CryptoPP__ASN1CryptoMaterialctor_ASN1CryptoMaterial2_clbk CryptoPP__ASN1CryptoMaterialctor_ASN1CryptoMaterial2_user(nullptr);
        static info::CryptoPP__ASN1CryptoMaterialLoad4_ptr CryptoPP__ASN1CryptoMaterialLoad4_next(nullptr);
        static info::CryptoPP__ASN1CryptoMaterialLoad4_clbk CryptoPP__ASN1CryptoMaterialLoad4_user(nullptr);
        static info::CryptoPP__ASN1CryptoMaterialSave6_ptr CryptoPP__ASN1CryptoMaterialSave6_next(nullptr);
        static info::CryptoPP__ASN1CryptoMaterialSave6_clbk CryptoPP__ASN1CryptoMaterialSave6_user(nullptr);
        static info::CryptoPP__ASN1CryptoMaterialdtor_ASN1CryptoMaterial10_ptr CryptoPP__ASN1CryptoMaterialdtor_ASN1CryptoMaterial10_next(nullptr);
        static info::CryptoPP__ASN1CryptoMaterialdtor_ASN1CryptoMaterial10_clbk CryptoPP__ASN1CryptoMaterialdtor_ASN1CryptoMaterial10_user(nullptr);
        
        static info::CryptoPP__X509PublicKeyBERDecode1_ptr CryptoPP__X509PublicKeyBERDecode1_next(nullptr);
        static info::CryptoPP__X509PublicKeyBERDecode1_clbk CryptoPP__X509PublicKeyBERDecode1_user(nullptr);
        static info::CryptoPP__X509PublicKeyBERDecodeAlgorithmParameters3_ptr CryptoPP__X509PublicKeyBERDecodeAlgorithmParameters3_next(nullptr);
        static info::CryptoPP__X509PublicKeyBERDecodeAlgorithmParameters3_clbk CryptoPP__X509PublicKeyBERDecodeAlgorithmParameters3_user(nullptr);
        static info::CryptoPP__X509PublicKeyDEREncode4_ptr CryptoPP__X509PublicKeyDEREncode4_next(nullptr);
        static info::CryptoPP__X509PublicKeyDEREncode4_clbk CryptoPP__X509PublicKeyDEREncode4_user(nullptr);
        static info::CryptoPP__X509PublicKeyDEREncodeAlgorithmParameters6_ptr CryptoPP__X509PublicKeyDEREncodeAlgorithmParameters6_next(nullptr);
        static info::CryptoPP__X509PublicKeyDEREncodeAlgorithmParameters6_clbk CryptoPP__X509PublicKeyDEREncodeAlgorithmParameters6_user(nullptr);
        static info::CryptoPP__X509PublicKeyctor_X509PublicKey8_ptr CryptoPP__X509PublicKeyctor_X509PublicKey8_next(nullptr);
        static info::CryptoPP__X509PublicKeyctor_X509PublicKey8_clbk CryptoPP__X509PublicKeyctor_X509PublicKey8_user(nullptr);
        static info::CryptoPP__X509PublicKeydtor_X509PublicKey17_ptr CryptoPP__X509PublicKeydtor_X509PublicKey17_next(nullptr);
        static info::CryptoPP__X509PublicKeydtor_X509PublicKey17_clbk CryptoPP__X509PublicKeydtor_X509PublicKey17_user(nullptr);
        
        static info::CryptoPP__DL_KeyImplAccessGroupParameters2_ptr CryptoPP__DL_KeyImplAccessGroupParameters2_next(nullptr);
        static info::CryptoPP__DL_KeyImplAccessGroupParameters2_clbk CryptoPP__DL_KeyImplAccessGroupParameters2_user(nullptr);
        static info::CryptoPP__DL_KeyImplBERDecodeAlgorithmParameters4_ptr CryptoPP__DL_KeyImplBERDecodeAlgorithmParameters4_next(nullptr);
        static info::CryptoPP__DL_KeyImplBERDecodeAlgorithmParameters4_clbk CryptoPP__DL_KeyImplBERDecodeAlgorithmParameters4_user(nullptr);
        static info::CryptoPP__DL_KeyImplDEREncodeAlgorithmParameters6_ptr CryptoPP__DL_KeyImplDEREncodeAlgorithmParameters6_next(nullptr);
        static info::CryptoPP__DL_KeyImplDEREncodeAlgorithmParameters6_clbk CryptoPP__DL_KeyImplDEREncodeAlgorithmParameters6_user(nullptr);
        static info::CryptoPP__DL_KeyImplctor_DL_KeyImpl8_ptr CryptoPP__DL_KeyImplctor_DL_KeyImpl8_next(nullptr);
        static info::CryptoPP__DL_KeyImplctor_DL_KeyImpl8_clbk CryptoPP__DL_KeyImplctor_DL_KeyImpl8_user(nullptr);
        static info::CryptoPP__DL_KeyImplGetAlgorithmID10_ptr CryptoPP__DL_KeyImplGetAlgorithmID10_next(nullptr);
        static info::CryptoPP__DL_KeyImplGetAlgorithmID10_clbk CryptoPP__DL_KeyImplGetAlgorithmID10_user(nullptr);
        static info::CryptoPP__DL_KeyImplGetGroupParameters12_ptr CryptoPP__DL_KeyImplGetGroupParameters12_next(nullptr);
        static info::CryptoPP__DL_KeyImplGetGroupParameters12_clbk CryptoPP__DL_KeyImplGetGroupParameters12_user(nullptr);
        static info::CryptoPP__DL_KeyImpldtor_DL_KeyImpl21_ptr CryptoPP__DL_KeyImpldtor_DL_KeyImpl21_next(nullptr);
        static info::CryptoPP__DL_KeyImpldtor_DL_KeyImpl21_clbk CryptoPP__DL_KeyImpldtor_DL_KeyImpl21_user(nullptr);
        
        static info::CryptoPP__DL_PublicKey_ECctor_DL_PublicKey_EC2_ptr CryptoPP__DL_PublicKey_ECctor_DL_PublicKey_EC2_next(nullptr);
        static info::CryptoPP__DL_PublicKey_ECctor_DL_PublicKey_EC2_clbk CryptoPP__DL_PublicKey_ECctor_DL_PublicKey_EC2_user(nullptr);
        static info::CryptoPP__DL_PublicKey_ECdtor_DL_PublicKey_EC9_ptr CryptoPP__DL_PublicKey_ECdtor_DL_PublicKey_EC9_next(nullptr);
        static info::CryptoPP__DL_PublicKey_ECdtor_DL_PublicKey_EC9_clbk CryptoPP__DL_PublicKey_ECdtor_DL_PublicKey_EC9_user(nullptr);
        
        static info::CryptoPP__VariableKeyLengthStaticGetValidKeyLength2_ptr CryptoPP__VariableKeyLengthStaticGetValidKeyLength2_next(nullptr);
        static info::CryptoPP__VariableKeyLengthStaticGetValidKeyLength2_clbk CryptoPP__VariableKeyLengthStaticGetValidKeyLength2_user(nullptr);
        
        static info::CryptoPP__Rijndael_InfoStaticAlgorithmName2_ptr CryptoPP__Rijndael_InfoStaticAlgorithmName2_next(nullptr);
        static info::CryptoPP__Rijndael_InfoStaticAlgorithmName2_clbk CryptoPP__Rijndael_InfoStaticAlgorithmName2_user(nullptr);
        
        static info::CryptoPP__TwoBasesctor_TwoBases2_ptr CryptoPP__TwoBasesctor_TwoBases2_next(nullptr);
        static info::CryptoPP__TwoBasesctor_TwoBases2_clbk CryptoPP__TwoBasesctor_TwoBases2_user(nullptr);
        static info::CryptoPP__TwoBasesctor_TwoBases4_ptr CryptoPP__TwoBasesctor_TwoBases4_next(nullptr);
        static info::CryptoPP__TwoBasesctor_TwoBases4_clbk CryptoPP__TwoBasesctor_TwoBases4_user(nullptr);
        static info::CryptoPP__TwoBasesdtor_TwoBases6_ptr CryptoPP__TwoBasesdtor_TwoBases6_next(nullptr);
        static info::CryptoPP__TwoBasesdtor_TwoBases6_clbk CryptoPP__TwoBasesdtor_TwoBases6_user(nullptr);
        
        static info::CryptoPP__ClonableImplctor_ClonableImpl2_ptr CryptoPP__ClonableImplctor_ClonableImpl2_next(nullptr);
        static info::CryptoPP__ClonableImplctor_ClonableImpl2_clbk CryptoPP__ClonableImplctor_ClonableImpl2_user(nullptr);
        static info::CryptoPP__ClonableImplctor_ClonableImpl4_ptr CryptoPP__ClonableImplctor_ClonableImpl4_next(nullptr);
        static info::CryptoPP__ClonableImplctor_ClonableImpl4_clbk CryptoPP__ClonableImplctor_ClonableImpl4_user(nullptr);
        static info::CryptoPP__ClonableImplClone6_ptr CryptoPP__ClonableImplClone6_next(nullptr);
        static info::CryptoPP__ClonableImplClone6_clbk CryptoPP__ClonableImplClone6_user(nullptr);
        static info::CryptoPP__ClonableImpldtor_ClonableImpl8_ptr CryptoPP__ClonableImpldtor_ClonableImpl8_next(nullptr);
        static info::CryptoPP__ClonableImpldtor_ClonableImpl8_clbk CryptoPP__ClonableImpldtor_ClonableImpl8_user(nullptr);
        
        static info::CryptoPP__BlockCipherFinalctor_BlockCipherFinal2_ptr CryptoPP__BlockCipherFinalctor_BlockCipherFinal2_next(nullptr);
        static info::CryptoPP__BlockCipherFinalctor_BlockCipherFinal2_clbk CryptoPP__BlockCipherFinalctor_BlockCipherFinal2_user(nullptr);
        static info::CryptoPP__BlockCipherFinalctor_BlockCipherFinal4_ptr CryptoPP__BlockCipherFinalctor_BlockCipherFinal4_next(nullptr);
        static info::CryptoPP__BlockCipherFinalctor_BlockCipherFinal4_clbk CryptoPP__BlockCipherFinalctor_BlockCipherFinal4_user(nullptr);
        static info::CryptoPP__BlockCipherFinalIsForwardTransformation6_ptr CryptoPP__BlockCipherFinalIsForwardTransformation6_next(nullptr);
        static info::CryptoPP__BlockCipherFinalIsForwardTransformation6_clbk CryptoPP__BlockCipherFinalIsForwardTransformation6_user(nullptr);
        static info::CryptoPP__BlockCipherFinaldtor_BlockCipherFinal11_ptr CryptoPP__BlockCipherFinaldtor_BlockCipherFinal11_next(nullptr);
        static info::CryptoPP__BlockCipherFinaldtor_BlockCipherFinal11_clbk CryptoPP__BlockCipherFinaldtor_BlockCipherFinal11_user(nullptr);
        
        static info::CryptoPP__StreamTransformationGetOptimalBlockSizeUsed2_ptr CryptoPP__StreamTransformationGetOptimalBlockSizeUsed2_next(nullptr);
        static info::CryptoPP__StreamTransformationGetOptimalBlockSizeUsed2_clbk CryptoPP__StreamTransformationGetOptimalBlockSizeUsed2_user(nullptr);
        static info::CryptoPP__StreamTransformationMandatoryBlockSize3_ptr CryptoPP__StreamTransformationMandatoryBlockSize3_next(nullptr);
        static info::CryptoPP__StreamTransformationMandatoryBlockSize3_clbk CryptoPP__StreamTransformationMandatoryBlockSize3_user(nullptr);
        static info::CryptoPP__StreamTransformationMinLastBlockSize4_ptr CryptoPP__StreamTransformationMinLastBlockSize4_next(nullptr);
        static info::CryptoPP__StreamTransformationMinLastBlockSize4_clbk CryptoPP__StreamTransformationMinLastBlockSize4_user(nullptr);
        static info::CryptoPP__StreamTransformationOptimalBlockSize6_ptr CryptoPP__StreamTransformationOptimalBlockSize6_next(nullptr);
        static info::CryptoPP__StreamTransformationOptimalBlockSize6_clbk CryptoPP__StreamTransformationOptimalBlockSize6_user(nullptr);
        static info::CryptoPP__StreamTransformationProcessLastBlock7_ptr CryptoPP__StreamTransformationProcessLastBlock7_next(nullptr);
        static info::CryptoPP__StreamTransformationProcessLastBlock7_clbk CryptoPP__StreamTransformationProcessLastBlock7_user(nullptr);
        static info::CryptoPP__StreamTransformationProcessString8_ptr CryptoPP__StreamTransformationProcessString8_next(nullptr);
        static info::CryptoPP__StreamTransformationProcessString8_clbk CryptoPP__StreamTransformationProcessString8_user(nullptr);
        static info::CryptoPP__StreamTransformationProcessString9_ptr CryptoPP__StreamTransformationProcessString9_next(nullptr);
        static info::CryptoPP__StreamTransformationProcessString9_clbk CryptoPP__StreamTransformationProcessString9_user(nullptr);
        static info::CryptoPP__StreamTransformationSeek11_ptr CryptoPP__StreamTransformationSeek11_next(nullptr);
        static info::CryptoPP__StreamTransformationSeek11_clbk CryptoPP__StreamTransformationSeek11_user(nullptr);
        static info::CryptoPP__StreamTransformationctor_StreamTransformation13_ptr CryptoPP__StreamTransformationctor_StreamTransformation13_next(nullptr);
        static info::CryptoPP__StreamTransformationctor_StreamTransformation13_clbk CryptoPP__StreamTransformationctor_StreamTransformation13_user(nullptr);
        static info::CryptoPP__StreamTransformationdtor_StreamTransformation15_ptr CryptoPP__StreamTransformationdtor_StreamTransformation15_next(nullptr);
        static info::CryptoPP__StreamTransformationdtor_StreamTransformation15_clbk CryptoPP__StreamTransformationdtor_StreamTransformation15_user(nullptr);
        
        static info::CryptoPP__SimpleKeyedTransformationGetAlgorithm2_ptr CryptoPP__SimpleKeyedTransformationGetAlgorithm2_next(nullptr);
        static info::CryptoPP__SimpleKeyedTransformationGetAlgorithm2_clbk CryptoPP__SimpleKeyedTransformationGetAlgorithm2_user(nullptr);
        static info::CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_ptr CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_next(nullptr);
        static info::CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_clbk CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_user(nullptr);
        static info::CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation6_ptr CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation6_next(nullptr);
        static info::CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation6_clbk CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation6_user(nullptr);
        
        static info::CryptoPP__CipherModeBaseBlockSize2_ptr CryptoPP__CipherModeBaseBlockSize2_next(nullptr);
        static info::CryptoPP__CipherModeBaseBlockSize2_clbk CryptoPP__CipherModeBaseBlockSize2_user(nullptr);
        static info::CryptoPP__CipherModeBasector_CipherModeBase4_ptr CryptoPP__CipherModeBasector_CipherModeBase4_next(nullptr);
        static info::CryptoPP__CipherModeBasector_CipherModeBase4_clbk CryptoPP__CipherModeBasector_CipherModeBase4_user(nullptr);
        static info::CryptoPP__CipherModeBaseDefaultKeyLength6_ptr CryptoPP__CipherModeBaseDefaultKeyLength6_next(nullptr);
        static info::CryptoPP__CipherModeBaseDefaultKeyLength6_clbk CryptoPP__CipherModeBaseDefaultKeyLength6_user(nullptr);
        static info::CryptoPP__CipherModeBaseGetValidKeyLength8_ptr CryptoPP__CipherModeBaseGetValidKeyLength8_next(nullptr);
        static info::CryptoPP__CipherModeBaseGetValidKeyLength8_clbk CryptoPP__CipherModeBaseGetValidKeyLength8_user(nullptr);
        static info::CryptoPP__CipherModeBaseIVSize10_ptr CryptoPP__CipherModeBaseIVSize10_next(nullptr);
        static info::CryptoPP__CipherModeBaseIVSize10_clbk CryptoPP__CipherModeBaseIVSize10_user(nullptr);
        static info::CryptoPP__CipherModeBaseIsValidKeyLength12_ptr CryptoPP__CipherModeBaseIsValidKeyLength12_next(nullptr);
        static info::CryptoPP__CipherModeBaseIsValidKeyLength12_clbk CryptoPP__CipherModeBaseIsValidKeyLength12_user(nullptr);
        static info::CryptoPP__CipherModeBaseMaxKeyLength14_ptr CryptoPP__CipherModeBaseMaxKeyLength14_next(nullptr);
        static info::CryptoPP__CipherModeBaseMaxKeyLength14_clbk CryptoPP__CipherModeBaseMaxKeyLength14_user(nullptr);
        static info::CryptoPP__CipherModeBaseMinKeyLength16_ptr CryptoPP__CipherModeBaseMinKeyLength16_next(nullptr);
        static info::CryptoPP__CipherModeBaseMinKeyLength16_clbk CryptoPP__CipherModeBaseMinKeyLength16_user(nullptr);
        static info::CryptoPP__CipherModeBaseOptimalDataAlignment18_ptr CryptoPP__CipherModeBaseOptimalDataAlignment18_next(nullptr);
        static info::CryptoPP__CipherModeBaseOptimalDataAlignment18_clbk CryptoPP__CipherModeBaseOptimalDataAlignment18_user(nullptr);
        static info::CryptoPP__CipherModeBaseResizeBuffers20_ptr CryptoPP__CipherModeBaseResizeBuffers20_next(nullptr);
        static info::CryptoPP__CipherModeBaseResizeBuffers20_clbk CryptoPP__CipherModeBaseResizeBuffers20_user(nullptr);
        static info::CryptoPP__CipherModeBaseSetFeedbackSize22_ptr CryptoPP__CipherModeBaseSetFeedbackSize22_next(nullptr);
        static info::CryptoPP__CipherModeBaseSetFeedbackSize22_clbk CryptoPP__CipherModeBaseSetFeedbackSize22_user(nullptr);
        static info::CryptoPP__CipherModeBasedtor_CipherModeBase24_ptr CryptoPP__CipherModeBasedtor_CipherModeBase24_next(nullptr);
        static info::CryptoPP__CipherModeBasedtor_CipherModeBase24_clbk CryptoPP__CipherModeBasedtor_CipherModeBase24_user(nullptr);
        
        static info::CryptoPP__BlockOrientedCipherModeBasector_BlockOrientedCipherModeBase2_ptr CryptoPP__BlockOrientedCipherModeBasector_BlockOrientedCipherModeBase2_next(nullptr);
        static info::CryptoPP__BlockOrientedCipherModeBasector_BlockOrientedCipherModeBase2_clbk CryptoPP__BlockOrientedCipherModeBasector_BlockOrientedCipherModeBase2_user(nullptr);
        static info::CryptoPP__BlockOrientedCipherModeBaseIsForwardTransformation4_ptr CryptoPP__BlockOrientedCipherModeBaseIsForwardTransformation4_next(nullptr);
        static info::CryptoPP__BlockOrientedCipherModeBaseIsForwardTransformation4_clbk CryptoPP__BlockOrientedCipherModeBaseIsForwardTransformation4_user(nullptr);
        static info::CryptoPP__BlockOrientedCipherModeBaseIsRandomAccess6_ptr CryptoPP__BlockOrientedCipherModeBaseIsRandomAccess6_next(nullptr);
        static info::CryptoPP__BlockOrientedCipherModeBaseIsRandomAccess6_clbk CryptoPP__BlockOrientedCipherModeBaseIsRandomAccess6_user(nullptr);
        static info::CryptoPP__BlockOrientedCipherModeBaseIsSelfInverting8_ptr CryptoPP__BlockOrientedCipherModeBaseIsSelfInverting8_next(nullptr);
        static info::CryptoPP__BlockOrientedCipherModeBaseIsSelfInverting8_clbk CryptoPP__BlockOrientedCipherModeBaseIsSelfInverting8_user(nullptr);
        static info::CryptoPP__BlockOrientedCipherModeBaseMandatoryBlockSize10_ptr CryptoPP__BlockOrientedCipherModeBaseMandatoryBlockSize10_next(nullptr);
        static info::CryptoPP__BlockOrientedCipherModeBaseMandatoryBlockSize10_clbk CryptoPP__BlockOrientedCipherModeBaseMandatoryBlockSize10_user(nullptr);
        static info::CryptoPP__BlockOrientedCipherModeBaseProcessData11_ptr CryptoPP__BlockOrientedCipherModeBaseProcessData11_next(nullptr);
        static info::CryptoPP__BlockOrientedCipherModeBaseProcessData11_clbk CryptoPP__BlockOrientedCipherModeBaseProcessData11_user(nullptr);
        static info::CryptoPP__BlockOrientedCipherModeBaseRequireAlignedInput12_ptr CryptoPP__BlockOrientedCipherModeBaseRequireAlignedInput12_next(nullptr);
        static info::CryptoPP__BlockOrientedCipherModeBaseRequireAlignedInput12_clbk CryptoPP__BlockOrientedCipherModeBaseRequireAlignedInput12_user(nullptr);
        static info::CryptoPP__BlockOrientedCipherModeBaseResizeBuffers14_ptr CryptoPP__BlockOrientedCipherModeBaseResizeBuffers14_next(nullptr);
        static info::CryptoPP__BlockOrientedCipherModeBaseResizeBuffers14_clbk CryptoPP__BlockOrientedCipherModeBaseResizeBuffers14_user(nullptr);
        static info::CryptoPP__BlockOrientedCipherModeBaseResynchronize16_ptr CryptoPP__BlockOrientedCipherModeBaseResynchronize16_next(nullptr);
        static info::CryptoPP__BlockOrientedCipherModeBaseResynchronize16_clbk CryptoPP__BlockOrientedCipherModeBaseResynchronize16_user(nullptr);
        static info::CryptoPP__BlockOrientedCipherModeBaseUncheckedSetKey17_ptr CryptoPP__BlockOrientedCipherModeBaseUncheckedSetKey17_next(nullptr);
        static info::CryptoPP__BlockOrientedCipherModeBaseUncheckedSetKey17_clbk CryptoPP__BlockOrientedCipherModeBaseUncheckedSetKey17_user(nullptr);
        static info::CryptoPP__BlockOrientedCipherModeBasedtor_BlockOrientedCipherModeBase19_ptr CryptoPP__BlockOrientedCipherModeBasedtor_BlockOrientedCipherModeBase19_next(nullptr);
        static info::CryptoPP__BlockOrientedCipherModeBasedtor_BlockOrientedCipherModeBase19_clbk CryptoPP__BlockOrientedCipherModeBasedtor_BlockOrientedCipherModeBase19_user(nullptr);
        
        static info::CryptoPP__CBC_ModeBasector_CBC_ModeBase2_ptr CryptoPP__CBC_ModeBasector_CBC_ModeBase2_next(nullptr);
        static info::CryptoPP__CBC_ModeBasector_CBC_ModeBase2_clbk CryptoPP__CBC_ModeBasector_CBC_ModeBase2_user(nullptr);
        static info::CryptoPP__CBC_ModeBaseIVRequirement4_ptr CryptoPP__CBC_ModeBaseIVRequirement4_next(nullptr);
        static info::CryptoPP__CBC_ModeBaseIVRequirement4_clbk CryptoPP__CBC_ModeBaseIVRequirement4_user(nullptr);
        static info::CryptoPP__CBC_ModeBaseMinLastBlockSize6_ptr CryptoPP__CBC_ModeBaseMinLastBlockSize6_next(nullptr);
        static info::CryptoPP__CBC_ModeBaseMinLastBlockSize6_clbk CryptoPP__CBC_ModeBaseMinLastBlockSize6_user(nullptr);
        static info::CryptoPP__CBC_ModeBaseStaticAlgorithmName8_ptr CryptoPP__CBC_ModeBaseStaticAlgorithmName8_next(nullptr);
        static info::CryptoPP__CBC_ModeBaseStaticAlgorithmName8_clbk CryptoPP__CBC_ModeBaseStaticAlgorithmName8_user(nullptr);
        static info::CryptoPP__CBC_ModeBasedtor_CBC_ModeBase10_ptr CryptoPP__CBC_ModeBasedtor_CBC_ModeBase10_next(nullptr);
        static info::CryptoPP__CBC_ModeBasedtor_CBC_ModeBase10_clbk CryptoPP__CBC_ModeBasedtor_CBC_ModeBase10_user(nullptr);
        
        static info::CryptoPP__CBC_Decryptionctor_CBC_Decryption2_ptr CryptoPP__CBC_Decryptionctor_CBC_Decryption2_next(nullptr);
        static info::CryptoPP__CBC_Decryptionctor_CBC_Decryption2_clbk CryptoPP__CBC_Decryptionctor_CBC_Decryption2_user(nullptr);
        static info::CryptoPP__CBC_DecryptionProcessBlocks3_ptr CryptoPP__CBC_DecryptionProcessBlocks3_next(nullptr);
        static info::CryptoPP__CBC_DecryptionProcessBlocks3_clbk CryptoPP__CBC_DecryptionProcessBlocks3_user(nullptr);
        static info::CryptoPP__CBC_DecryptionResizeBuffers5_ptr CryptoPP__CBC_DecryptionResizeBuffers5_next(nullptr);
        static info::CryptoPP__CBC_DecryptionResizeBuffers5_clbk CryptoPP__CBC_DecryptionResizeBuffers5_user(nullptr);
        static info::CryptoPP__CBC_Decryptiondtor_CBC_Decryption7_ptr CryptoPP__CBC_Decryptiondtor_CBC_Decryption7_next(nullptr);
        static info::CryptoPP__CBC_Decryptiondtor_CBC_Decryption7_clbk CryptoPP__CBC_Decryptiondtor_CBC_Decryption7_user(nullptr);
        
        static info::CryptoPP__CipherModeFinalTemplate_CipherHolderctor_CipherModeFinalTemplate_CipherHolder2_ptr CryptoPP__CipherModeFinalTemplate_CipherHolderctor_CipherModeFinalTemplate_CipherHolder2_next(nullptr);
        static info::CryptoPP__CipherModeFinalTemplate_CipherHolderctor_CipherModeFinalTemplate_CipherHolder2_clbk CryptoPP__CipherModeFinalTemplate_CipherHolderctor_CipherModeFinalTemplate_CipherHolder2_user(nullptr);
        static info::CryptoPP__CipherModeFinalTemplate_CipherHolderStaticAlgorithmName4_ptr CryptoPP__CipherModeFinalTemplate_CipherHolderStaticAlgorithmName4_next(nullptr);
        static info::CryptoPP__CipherModeFinalTemplate_CipherHolderStaticAlgorithmName4_clbk CryptoPP__CipherModeFinalTemplate_CipherHolderStaticAlgorithmName4_user(nullptr);
        static info::CryptoPP__CipherModeFinalTemplate_CipherHolderdtor_CipherModeFinalTemplate_CipherHolder9_ptr CryptoPP__CipherModeFinalTemplate_CipherHolderdtor_CipherModeFinalTemplate_CipherHolder9_next(nullptr);
        static info::CryptoPP__CipherModeFinalTemplate_CipherHolderdtor_CipherModeFinalTemplate_CipherHolder9_clbk CryptoPP__CipherModeFinalTemplate_CipherHolderdtor_CipherModeFinalTemplate_CipherHolder9_user(nullptr);
        
        static info::CryptoPP__PK_CryptoSystemFixedCiphertextLength2_ptr CryptoPP__PK_CryptoSystemFixedCiphertextLength2_next(nullptr);
        static info::CryptoPP__PK_CryptoSystemFixedCiphertextLength2_clbk CryptoPP__PK_CryptoSystemFixedCiphertextLength2_user(nullptr);
        static info::CryptoPP__PK_CryptoSystemFixedMaxPlaintextLength4_ptr CryptoPP__PK_CryptoSystemFixedMaxPlaintextLength4_next(nullptr);
        static info::CryptoPP__PK_CryptoSystemFixedMaxPlaintextLength4_clbk CryptoPP__PK_CryptoSystemFixedMaxPlaintextLength4_user(nullptr);
        static info::CryptoPP__PK_CryptoSystemctor_PK_CryptoSystem6_ptr CryptoPP__PK_CryptoSystemctor_PK_CryptoSystem6_next(nullptr);
        static info::CryptoPP__PK_CryptoSystemctor_PK_CryptoSystem6_clbk CryptoPP__PK_CryptoSystemctor_PK_CryptoSystem6_user(nullptr);
        static info::CryptoPP__PK_CryptoSystemdtor_PK_CryptoSystem8_ptr CryptoPP__PK_CryptoSystemdtor_PK_CryptoSystem8_next(nullptr);
        static info::CryptoPP__PK_CryptoSystemdtor_PK_CryptoSystem8_clbk CryptoPP__PK_CryptoSystemdtor_PK_CryptoSystem8_user(nullptr);
        
        static info::CryptoPP__AsymmetricAlgorithmctor_AsymmetricAlgorithm1_ptr CryptoPP__AsymmetricAlgorithmctor_AsymmetricAlgorithm1_next(nullptr);
        static info::CryptoPP__AsymmetricAlgorithmctor_AsymmetricAlgorithm1_clbk CryptoPP__AsymmetricAlgorithmctor_AsymmetricAlgorithm1_user(nullptr);
        static info::CryptoPP__AsymmetricAlgorithmctor_AsymmetricAlgorithm3_ptr CryptoPP__AsymmetricAlgorithmctor_AsymmetricAlgorithm3_next(nullptr);
        static info::CryptoPP__AsymmetricAlgorithmctor_AsymmetricAlgorithm3_clbk CryptoPP__AsymmetricAlgorithmctor_AsymmetricAlgorithm3_user(nullptr);
        static info::CryptoPP__AsymmetricAlgorithmdtor_AsymmetricAlgorithm5_ptr CryptoPP__AsymmetricAlgorithmdtor_AsymmetricAlgorithm5_next(nullptr);
        static info::CryptoPP__AsymmetricAlgorithmdtor_AsymmetricAlgorithm5_clbk CryptoPP__AsymmetricAlgorithmdtor_AsymmetricAlgorithm5_user(nullptr);
        
        static info::CryptoPP__PublicKeyAlgorithmAccessMaterial2_ptr CryptoPP__PublicKeyAlgorithmAccessMaterial2_next(nullptr);
        static info::CryptoPP__PublicKeyAlgorithmAccessMaterial2_clbk CryptoPP__PublicKeyAlgorithmAccessMaterial2_user(nullptr);
        static info::CryptoPP__PublicKeyAlgorithmGetMaterial4_ptr CryptoPP__PublicKeyAlgorithmGetMaterial4_next(nullptr);
        static info::CryptoPP__PublicKeyAlgorithmGetMaterial4_clbk CryptoPP__PublicKeyAlgorithmGetMaterial4_user(nullptr);
        static info::CryptoPP__PublicKeyAlgorithmGetPublicKey6_ptr CryptoPP__PublicKeyAlgorithmGetPublicKey6_next(nullptr);
        static info::CryptoPP__PublicKeyAlgorithmGetPublicKey6_clbk CryptoPP__PublicKeyAlgorithmGetPublicKey6_user(nullptr);
        static info::CryptoPP__PublicKeyAlgorithmctor_PublicKeyAlgorithm8_ptr CryptoPP__PublicKeyAlgorithmctor_PublicKeyAlgorithm8_next(nullptr);
        static info::CryptoPP__PublicKeyAlgorithmctor_PublicKeyAlgorithm8_clbk CryptoPP__PublicKeyAlgorithmctor_PublicKeyAlgorithm8_user(nullptr);
        static info::CryptoPP__PublicKeyAlgorithmdtor_PublicKeyAlgorithm10_ptr CryptoPP__PublicKeyAlgorithmdtor_PublicKeyAlgorithm10_next(nullptr);
        static info::CryptoPP__PublicKeyAlgorithmdtor_PublicKeyAlgorithm10_clbk CryptoPP__PublicKeyAlgorithmdtor_PublicKeyAlgorithm10_user(nullptr);
        
        static info::CryptoPP__PK_EncryptorCreateEncryptionFilter1_ptr CryptoPP__PK_EncryptorCreateEncryptionFilter1_next(nullptr);
        static info::CryptoPP__PK_EncryptorCreateEncryptionFilter1_clbk CryptoPP__PK_EncryptorCreateEncryptionFilter1_user(nullptr);
        static info::CryptoPP__PK_Encryptorctor_PK_Encryptor3_ptr CryptoPP__PK_Encryptorctor_PK_Encryptor3_next(nullptr);
        static info::CryptoPP__PK_Encryptorctor_PK_Encryptor3_clbk CryptoPP__PK_Encryptorctor_PK_Encryptor3_user(nullptr);
        static info::CryptoPP__PK_Encryptordtor_PK_Encryptor5_ptr CryptoPP__PK_Encryptordtor_PK_Encryptor5_next(nullptr);
        static info::CryptoPP__PK_Encryptordtor_PK_Encryptor5_clbk CryptoPP__PK_Encryptordtor_PK_Encryptor5_user(nullptr);
        
        static info::CryptoPP__DL_EncryptorBasector_DL_EncryptorBase2_ptr CryptoPP__DL_EncryptorBasector_DL_EncryptorBase2_next(nullptr);
        static info::CryptoPP__DL_EncryptorBasector_DL_EncryptorBase2_clbk CryptoPP__DL_EncryptorBasector_DL_EncryptorBase2_user(nullptr);
        static info::CryptoPP__DL_EncryptorBaseEncrypt4_ptr CryptoPP__DL_EncryptorBaseEncrypt4_next(nullptr);
        static info::CryptoPP__DL_EncryptorBaseEncrypt4_clbk CryptoPP__DL_EncryptorBaseEncrypt4_user(nullptr);
        static info::CryptoPP__DL_EncryptorBasedtor_DL_EncryptorBase6_ptr CryptoPP__DL_EncryptorBasedtor_DL_EncryptorBase6_next(nullptr);
        static info::CryptoPP__DL_EncryptorBasedtor_DL_EncryptorBase6_clbk CryptoPP__DL_EncryptorBasedtor_DL_EncryptorBase6_user(nullptr);
        
        static info::CryptoPP__PrivateKeyAlgorithmAccessMaterial2_ptr CryptoPP__PrivateKeyAlgorithmAccessMaterial2_next(nullptr);
        static info::CryptoPP__PrivateKeyAlgorithmAccessMaterial2_clbk CryptoPP__PrivateKeyAlgorithmAccessMaterial2_user(nullptr);
        static info::CryptoPP__PrivateKeyAlgorithmGetMaterial4_ptr CryptoPP__PrivateKeyAlgorithmGetMaterial4_next(nullptr);
        static info::CryptoPP__PrivateKeyAlgorithmGetMaterial4_clbk CryptoPP__PrivateKeyAlgorithmGetMaterial4_user(nullptr);
        static info::CryptoPP__PrivateKeyAlgorithmGetPrivateKey6_ptr CryptoPP__PrivateKeyAlgorithmGetPrivateKey6_next(nullptr);
        static info::CryptoPP__PrivateKeyAlgorithmGetPrivateKey6_clbk CryptoPP__PrivateKeyAlgorithmGetPrivateKey6_user(nullptr);
        static info::CryptoPP__PrivateKeyAlgorithmctor_PrivateKeyAlgorithm7_ptr CryptoPP__PrivateKeyAlgorithmctor_PrivateKeyAlgorithm7_next(nullptr);
        static info::CryptoPP__PrivateKeyAlgorithmctor_PrivateKeyAlgorithm7_clbk CryptoPP__PrivateKeyAlgorithmctor_PrivateKeyAlgorithm7_user(nullptr);
        static info::CryptoPP__PrivateKeyAlgorithmctor_PrivateKeyAlgorithm9_ptr CryptoPP__PrivateKeyAlgorithmctor_PrivateKeyAlgorithm9_next(nullptr);
        static info::CryptoPP__PrivateKeyAlgorithmctor_PrivateKeyAlgorithm9_clbk CryptoPP__PrivateKeyAlgorithmctor_PrivateKeyAlgorithm9_user(nullptr);
        static info::CryptoPP__PrivateKeyAlgorithmdtor_PrivateKeyAlgorithm11_ptr CryptoPP__PrivateKeyAlgorithmdtor_PrivateKeyAlgorithm11_next(nullptr);
        static info::CryptoPP__PrivateKeyAlgorithmdtor_PrivateKeyAlgorithm11_clbk CryptoPP__PrivateKeyAlgorithmdtor_PrivateKeyAlgorithm11_user(nullptr);
        
        static info::CryptoPP__PK_DecryptorCreateDecryptionFilter1_ptr CryptoPP__PK_DecryptorCreateDecryptionFilter1_next(nullptr);
        static info::CryptoPP__PK_DecryptorCreateDecryptionFilter1_clbk CryptoPP__PK_DecryptorCreateDecryptionFilter1_user(nullptr);
        static info::CryptoPP__PK_Decryptorctor_PK_Decryptor3_ptr CryptoPP__PK_Decryptorctor_PK_Decryptor3_next(nullptr);
        static info::CryptoPP__PK_Decryptorctor_PK_Decryptor3_clbk CryptoPP__PK_Decryptorctor_PK_Decryptor3_user(nullptr);
        static info::CryptoPP__PK_Decryptordtor_PK_Decryptor5_ptr CryptoPP__PK_Decryptordtor_PK_Decryptor5_next(nullptr);
        static info::CryptoPP__PK_Decryptordtor_PK_Decryptor5_clbk CryptoPP__PK_Decryptordtor_PK_Decryptor5_user(nullptr);
        
        static info::CryptoPP__DL_DecryptorBasector_DL_DecryptorBase2_ptr CryptoPP__DL_DecryptorBasector_DL_DecryptorBase2_next(nullptr);
        static info::CryptoPP__DL_DecryptorBasector_DL_DecryptorBase2_clbk CryptoPP__DL_DecryptorBasector_DL_DecryptorBase2_user(nullptr);
        static info::CryptoPP__DL_DecryptorBaseDecrypt4_ptr CryptoPP__DL_DecryptorBaseDecrypt4_next(nullptr);
        static info::CryptoPP__DL_DecryptorBaseDecrypt4_clbk CryptoPP__DL_DecryptorBaseDecrypt4_user(nullptr);
        static info::CryptoPP__DL_DecryptorBasedtor_DL_DecryptorBase6_ptr CryptoPP__DL_DecryptorBasedtor_DL_DecryptorBase6_next(nullptr);
        static info::CryptoPP__DL_DecryptorBasedtor_DL_DecryptorBase6_clbk CryptoPP__DL_DecryptorBasedtor_DL_DecryptorBase6_user(nullptr);
        
        static info::CryptoPP__HashTransformationBlockSize2_ptr CryptoPP__HashTransformationBlockSize2_next(nullptr);
        static info::CryptoPP__HashTransformationBlockSize2_clbk CryptoPP__HashTransformationBlockSize2_user(nullptr);
        static info::CryptoPP__HashTransformationCalculateDigest4_ptr CryptoPP__HashTransformationCalculateDigest4_next(nullptr);
        static info::CryptoPP__HashTransformationCalculateDigest4_clbk CryptoPP__HashTransformationCalculateDigest4_user(nullptr);
        static info::CryptoPP__HashTransformationCalculateTruncatedDigest6_ptr CryptoPP__HashTransformationCalculateTruncatedDigest6_next(nullptr);
        static info::CryptoPP__HashTransformationCalculateTruncatedDigest6_clbk CryptoPP__HashTransformationCalculateTruncatedDigest6_user(nullptr);
        static info::CryptoPP__HashTransformationCreateUpdateSpace8_ptr CryptoPP__HashTransformationCreateUpdateSpace8_next(nullptr);
        static info::CryptoPP__HashTransformationCreateUpdateSpace8_clbk CryptoPP__HashTransformationCreateUpdateSpace8_user(nullptr);
        static info::CryptoPP__HashTransformationFinal10_ptr CryptoPP__HashTransformationFinal10_next(nullptr);
        static info::CryptoPP__HashTransformationFinal10_clbk CryptoPP__HashTransformationFinal10_user(nullptr);
        static info::CryptoPP__HashTransformationctor_HashTransformation12_ptr CryptoPP__HashTransformationctor_HashTransformation12_next(nullptr);
        static info::CryptoPP__HashTransformationctor_HashTransformation12_clbk CryptoPP__HashTransformationctor_HashTransformation12_user(nullptr);
        static info::CryptoPP__HashTransformationctor_HashTransformation14_ptr CryptoPP__HashTransformationctor_HashTransformation14_next(nullptr);
        static info::CryptoPP__HashTransformationctor_HashTransformation14_clbk CryptoPP__HashTransformationctor_HashTransformation14_user(nullptr);
        static info::CryptoPP__HashTransformationOptimalBlockSize15_ptr CryptoPP__HashTransformationOptimalBlockSize15_next(nullptr);
        static info::CryptoPP__HashTransformationOptimalBlockSize15_clbk CryptoPP__HashTransformationOptimalBlockSize15_user(nullptr);
        static info::CryptoPP__HashTransformationOptimalDataAlignment17_ptr CryptoPP__HashTransformationOptimalDataAlignment17_next(nullptr);
        static info::CryptoPP__HashTransformationOptimalDataAlignment17_clbk CryptoPP__HashTransformationOptimalDataAlignment17_user(nullptr);
        static info::CryptoPP__HashTransformationRestart18_ptr CryptoPP__HashTransformationRestart18_next(nullptr);
        static info::CryptoPP__HashTransformationRestart18_clbk CryptoPP__HashTransformationRestart18_user(nullptr);
        static info::CryptoPP__HashTransformationThrowIfInvalidTruncatedSize19_ptr CryptoPP__HashTransformationThrowIfInvalidTruncatedSize19_next(nullptr);
        static info::CryptoPP__HashTransformationThrowIfInvalidTruncatedSize19_clbk CryptoPP__HashTransformationThrowIfInvalidTruncatedSize19_user(nullptr);
        static info::CryptoPP__HashTransformationTruncatedVerify20_ptr CryptoPP__HashTransformationTruncatedVerify20_next(nullptr);
        static info::CryptoPP__HashTransformationTruncatedVerify20_clbk CryptoPP__HashTransformationTruncatedVerify20_user(nullptr);
        static info::CryptoPP__HashTransformationVerify22_ptr CryptoPP__HashTransformationVerify22_next(nullptr);
        static info::CryptoPP__HashTransformationVerify22_clbk CryptoPP__HashTransformationVerify22_user(nullptr);
        static info::CryptoPP__HashTransformationVerifyDigest24_ptr CryptoPP__HashTransformationVerifyDigest24_next(nullptr);
        static info::CryptoPP__HashTransformationVerifyDigest24_clbk CryptoPP__HashTransformationVerifyDigest24_user(nullptr);
        static info::CryptoPP__HashTransformationVerifyTruncatedDigest26_ptr CryptoPP__HashTransformationVerifyTruncatedDigest26_next(nullptr);
        static info::CryptoPP__HashTransformationVerifyTruncatedDigest26_clbk CryptoPP__HashTransformationVerifyTruncatedDigest26_user(nullptr);
        static info::CryptoPP__HashTransformationdtor_HashTransformation28_ptr CryptoPP__HashTransformationdtor_HashTransformation28_next(nullptr);
        static info::CryptoPP__HashTransformationdtor_HashTransformation28_clbk CryptoPP__HashTransformationdtor_HashTransformation28_user(nullptr);
        
        static info::CryptoPP__SHA256InitState1_ptr CryptoPP__SHA256InitState1_next(nullptr);
        static info::CryptoPP__SHA256InitState1_clbk CryptoPP__SHA256InitState1_user(nullptr);
        static info::CryptoPP__SHA256ctor_SHA2563_ptr CryptoPP__SHA256ctor_SHA2563_next(nullptr);
        static info::CryptoPP__SHA256ctor_SHA2563_clbk CryptoPP__SHA256ctor_SHA2563_user(nullptr);
        static info::CryptoPP__SHA256ctor_SHA2565_ptr CryptoPP__SHA256ctor_SHA2565_next(nullptr);
        static info::CryptoPP__SHA256ctor_SHA2565_clbk CryptoPP__SHA256ctor_SHA2565_user(nullptr);
        static info::CryptoPP__SHA256StaticAlgorithmName7_ptr CryptoPP__SHA256StaticAlgorithmName7_next(nullptr);
        static info::CryptoPP__SHA256StaticAlgorithmName7_clbk CryptoPP__SHA256StaticAlgorithmName7_user(nullptr);
        static info::CryptoPP__SHA256Transform8_ptr CryptoPP__SHA256Transform8_next(nullptr);
        static info::CryptoPP__SHA256Transform8_clbk CryptoPP__SHA256Transform8_user(nullptr);
        static info::CryptoPP__SHA256dtor_SHA25613_ptr CryptoPP__SHA256dtor_SHA25613_next(nullptr);
        static info::CryptoPP__SHA256dtor_SHA25613_clbk CryptoPP__SHA256dtor_SHA25613_user(nullptr);
        
        static info::CryptoPP__Exceptionctor_Exception2_ptr CryptoPP__Exceptionctor_Exception2_next(nullptr);
        static info::CryptoPP__Exceptionctor_Exception2_clbk CryptoPP__Exceptionctor_Exception2_user(nullptr);
        static info::CryptoPP__Exceptionctor_Exception4_ptr CryptoPP__Exceptionctor_Exception4_next(nullptr);
        static info::CryptoPP__Exceptionctor_Exception4_clbk CryptoPP__Exceptionctor_Exception4_user(nullptr);
        static info::CryptoPP__Exceptionwhat9_ptr CryptoPP__Exceptionwhat9_next(nullptr);
        static info::CryptoPP__Exceptionwhat9_clbk CryptoPP__Exceptionwhat9_user(nullptr);
        static info::CryptoPP__Exceptiondtor_Exception11_ptr CryptoPP__Exceptiondtor_Exception11_next(nullptr);
        static info::CryptoPP__Exceptiondtor_Exception11_clbk CryptoPP__Exceptiondtor_Exception11_user(nullptr);
        
        static info::CryptoPP__PolynomialMod2AllOnes1_ptr CryptoPP__PolynomialMod2AllOnes1_next(nullptr);
        static info::CryptoPP__PolynomialMod2AllOnes1_clbk CryptoPP__PolynomialMod2AllOnes1_user(nullptr);
        static info::CryptoPP__PolynomialMod2And2_ptr CryptoPP__PolynomialMod2And2_next(nullptr);
        static info::CryptoPP__PolynomialMod2And2_clbk CryptoPP__PolynomialMod2And2_user(nullptr);
        static info::CryptoPP__PolynomialMod2BERDecodeAsOctetString3_ptr CryptoPP__PolynomialMod2BERDecodeAsOctetString3_next(nullptr);
        static info::CryptoPP__PolynomialMod2BERDecodeAsOctetString3_clbk CryptoPP__PolynomialMod2BERDecodeAsOctetString3_user(nullptr);
        static info::CryptoPP__PolynomialMod2BitCount4_ptr CryptoPP__PolynomialMod2BitCount4_next(nullptr);
        static info::CryptoPP__PolynomialMod2BitCount4_clbk CryptoPP__PolynomialMod2BitCount4_user(nullptr);
        static info::CryptoPP__PolynomialMod2ByteCount5_ptr CryptoPP__PolynomialMod2ByteCount5_next(nullptr);
        static info::CryptoPP__PolynomialMod2ByteCount5_clbk CryptoPP__PolynomialMod2ByteCount5_user(nullptr);
        static info::CryptoPP__PolynomialMod2CoefficientCount6_ptr CryptoPP__PolynomialMod2CoefficientCount6_next(nullptr);
        static info::CryptoPP__PolynomialMod2CoefficientCount6_clbk CryptoPP__PolynomialMod2CoefficientCount6_user(nullptr);
        static info::CryptoPP__PolynomialMod2DEREncodeAsOctetString7_ptr CryptoPP__PolynomialMod2DEREncodeAsOctetString7_next(nullptr);
        static info::CryptoPP__PolynomialMod2DEREncodeAsOctetString7_clbk CryptoPP__PolynomialMod2DEREncodeAsOctetString7_user(nullptr);
        static info::CryptoPP__PolynomialMod2Decode8_ptr CryptoPP__PolynomialMod2Decode8_next(nullptr);
        static info::CryptoPP__PolynomialMod2Decode8_clbk CryptoPP__PolynomialMod2Decode8_user(nullptr);
        static info::CryptoPP__PolynomialMod2Decode9_ptr CryptoPP__PolynomialMod2Decode9_next(nullptr);
        static info::CryptoPP__PolynomialMod2Decode9_clbk CryptoPP__PolynomialMod2Decode9_user(nullptr);
        static info::CryptoPP__PolynomialMod2Degree10_ptr CryptoPP__PolynomialMod2Degree10_next(nullptr);
        static info::CryptoPP__PolynomialMod2Degree10_clbk CryptoPP__PolynomialMod2Degree10_user(nullptr);
        static info::CryptoPP__PolynomialMod2Divide11_ptr CryptoPP__PolynomialMod2Divide11_next(nullptr);
        static info::CryptoPP__PolynomialMod2Divide11_clbk CryptoPP__PolynomialMod2Divide11_user(nullptr);
        static info::CryptoPP__PolynomialMod2DividedBy12_ptr CryptoPP__PolynomialMod2DividedBy12_next(nullptr);
        static info::CryptoPP__PolynomialMod2DividedBy12_clbk CryptoPP__PolynomialMod2DividedBy12_user(nullptr);
        static info::CryptoPP__PolynomialMod2Doubled13_ptr CryptoPP__PolynomialMod2Doubled13_next(nullptr);
        static info::CryptoPP__PolynomialMod2Doubled13_clbk CryptoPP__PolynomialMod2Doubled13_user(nullptr);
        static info::CryptoPP__PolynomialMod2Encode14_ptr CryptoPP__PolynomialMod2Encode14_next(nullptr);
        static info::CryptoPP__PolynomialMod2Encode14_clbk CryptoPP__PolynomialMod2Encode14_user(nullptr);
        static info::CryptoPP__PolynomialMod2Encode15_ptr CryptoPP__PolynomialMod2Encode15_next(nullptr);
        static info::CryptoPP__PolynomialMod2Encode15_clbk CryptoPP__PolynomialMod2Encode15_user(nullptr);
        static info::CryptoPP__PolynomialMod2Equals16_ptr CryptoPP__PolynomialMod2Equals16_next(nullptr);
        static info::CryptoPP__PolynomialMod2Equals16_clbk CryptoPP__PolynomialMod2Equals16_user(nullptr);
        static info::CryptoPP__PolynomialMod2Gcd17_ptr CryptoPP__PolynomialMod2Gcd17_next(nullptr);
        static info::CryptoPP__PolynomialMod2Gcd17_clbk CryptoPP__PolynomialMod2Gcd17_user(nullptr);
        static info::CryptoPP__PolynomialMod2GetBit18_ptr CryptoPP__PolynomialMod2GetBit18_next(nullptr);
        static info::CryptoPP__PolynomialMod2GetBit18_clbk CryptoPP__PolynomialMod2GetBit18_user(nullptr);
        static info::CryptoPP__PolynomialMod2GetByte19_ptr CryptoPP__PolynomialMod2GetByte19_next(nullptr);
        static info::CryptoPP__PolynomialMod2GetByte19_clbk CryptoPP__PolynomialMod2GetByte19_user(nullptr);
        static info::CryptoPP__PolynomialMod2GetCoefficient20_ptr CryptoPP__PolynomialMod2GetCoefficient20_next(nullptr);
        static info::CryptoPP__PolynomialMod2GetCoefficient20_clbk CryptoPP__PolynomialMod2GetCoefficient20_user(nullptr);
        static info::CryptoPP__PolynomialMod2InverseMod21_ptr CryptoPP__PolynomialMod2InverseMod21_next(nullptr);
        static info::CryptoPP__PolynomialMod2InverseMod21_clbk CryptoPP__PolynomialMod2InverseMod21_user(nullptr);
        static info::CryptoPP__PolynomialMod2IsIrreducible22_ptr CryptoPP__PolynomialMod2IsIrreducible22_next(nullptr);
        static info::CryptoPP__PolynomialMod2IsIrreducible22_clbk CryptoPP__PolynomialMod2IsIrreducible22_user(nullptr);
        static info::CryptoPP__PolynomialMod2IsUnit23_ptr CryptoPP__PolynomialMod2IsUnit23_next(nullptr);
        static info::CryptoPP__PolynomialMod2IsUnit23_clbk CryptoPP__PolynomialMod2IsUnit23_user(nullptr);
        static info::CryptoPP__PolynomialMod2IsZero24_ptr CryptoPP__PolynomialMod2IsZero24_next(nullptr);
        static info::CryptoPP__PolynomialMod2IsZero24_clbk CryptoPP__PolynomialMod2IsZero24_user(nullptr);
        static info::CryptoPP__PolynomialMod2Minus25_ptr CryptoPP__PolynomialMod2Minus25_next(nullptr);
        static info::CryptoPP__PolynomialMod2Minus25_clbk CryptoPP__PolynomialMod2Minus25_user(nullptr);
        static info::CryptoPP__PolynomialMod2Modulo26_ptr CryptoPP__PolynomialMod2Modulo26_next(nullptr);
        static info::CryptoPP__PolynomialMod2Modulo26_clbk CryptoPP__PolynomialMod2Modulo26_user(nullptr);
        static info::CryptoPP__PolynomialMod2Monomial27_ptr CryptoPP__PolynomialMod2Monomial27_next(nullptr);
        static info::CryptoPP__PolynomialMod2Monomial27_clbk CryptoPP__PolynomialMod2Monomial27_user(nullptr);
        static info::CryptoPP__PolynomialMod2MultiplicativeInverse28_ptr CryptoPP__PolynomialMod2MultiplicativeInverse28_next(nullptr);
        static info::CryptoPP__PolynomialMod2MultiplicativeInverse28_clbk CryptoPP__PolynomialMod2MultiplicativeInverse28_user(nullptr);
        static info::CryptoPP__PolynomialMod2One29_ptr CryptoPP__PolynomialMod2One29_next(nullptr);
        static info::CryptoPP__PolynomialMod2One29_clbk CryptoPP__PolynomialMod2One29_user(nullptr);
        static info::CryptoPP__PolynomialMod2Parity30_ptr CryptoPP__PolynomialMod2Parity30_next(nullptr);
        static info::CryptoPP__PolynomialMod2Parity30_clbk CryptoPP__PolynomialMod2Parity30_user(nullptr);
        static info::CryptoPP__PolynomialMod2Pentanomial31_ptr CryptoPP__PolynomialMod2Pentanomial31_next(nullptr);
        static info::CryptoPP__PolynomialMod2Pentanomial31_clbk CryptoPP__PolynomialMod2Pentanomial31_user(nullptr);
        static info::CryptoPP__PolynomialMod2Plus32_ptr CryptoPP__PolynomialMod2Plus32_next(nullptr);
        static info::CryptoPP__PolynomialMod2Plus32_clbk CryptoPP__PolynomialMod2Plus32_user(nullptr);
        static info::CryptoPP__PolynomialMod2ctor_PolynomialMod233_ptr CryptoPP__PolynomialMod2ctor_PolynomialMod233_next(nullptr);
        static info::CryptoPP__PolynomialMod2ctor_PolynomialMod233_clbk CryptoPP__PolynomialMod2ctor_PolynomialMod233_user(nullptr);
        static info::CryptoPP__PolynomialMod2ctor_PolynomialMod234_ptr CryptoPP__PolynomialMod2ctor_PolynomialMod234_next(nullptr);
        static info::CryptoPP__PolynomialMod2ctor_PolynomialMod234_clbk CryptoPP__PolynomialMod2ctor_PolynomialMod234_user(nullptr);
        static info::CryptoPP__PolynomialMod2ctor_PolynomialMod235_ptr CryptoPP__PolynomialMod2ctor_PolynomialMod235_next(nullptr);
        static info::CryptoPP__PolynomialMod2ctor_PolynomialMod235_clbk CryptoPP__PolynomialMod2ctor_PolynomialMod235_user(nullptr);
        static info::CryptoPP__PolynomialMod2ctor_PolynomialMod236_ptr CryptoPP__PolynomialMod2ctor_PolynomialMod236_next(nullptr);
        static info::CryptoPP__PolynomialMod2ctor_PolynomialMod236_clbk CryptoPP__PolynomialMod2ctor_PolynomialMod236_user(nullptr);
        static info::CryptoPP__PolynomialMod2ctor_PolynomialMod237_ptr CryptoPP__PolynomialMod2ctor_PolynomialMod237_next(nullptr);
        static info::CryptoPP__PolynomialMod2ctor_PolynomialMod237_clbk CryptoPP__PolynomialMod2ctor_PolynomialMod237_user(nullptr);
        static info::CryptoPP__PolynomialMod2Randomize38_ptr CryptoPP__PolynomialMod2Randomize38_next(nullptr);
        static info::CryptoPP__PolynomialMod2Randomize38_clbk CryptoPP__PolynomialMod2Randomize38_user(nullptr);
        static info::CryptoPP__PolynomialMod2SetBit39_ptr CryptoPP__PolynomialMod2SetBit39_next(nullptr);
        static info::CryptoPP__PolynomialMod2SetBit39_clbk CryptoPP__PolynomialMod2SetBit39_user(nullptr);
        static info::CryptoPP__PolynomialMod2SetByte40_ptr CryptoPP__PolynomialMod2SetByte40_next(nullptr);
        static info::CryptoPP__PolynomialMod2SetByte40_clbk CryptoPP__PolynomialMod2SetByte40_user(nullptr);
        static info::CryptoPP__PolynomialMod2SetCoefficient41_ptr CryptoPP__PolynomialMod2SetCoefficient41_next(nullptr);
        static info::CryptoPP__PolynomialMod2SetCoefficient41_clbk CryptoPP__PolynomialMod2SetCoefficient41_user(nullptr);
        static info::CryptoPP__PolynomialMod2Squared42_ptr CryptoPP__PolynomialMod2Squared42_next(nullptr);
        static info::CryptoPP__PolynomialMod2Squared42_clbk CryptoPP__PolynomialMod2Squared42_user(nullptr);
        static info::CryptoPP__PolynomialMod2Times43_ptr CryptoPP__PolynomialMod2Times43_next(nullptr);
        static info::CryptoPP__PolynomialMod2Times43_clbk CryptoPP__PolynomialMod2Times43_user(nullptr);
        static info::CryptoPP__PolynomialMod2Trinomial44_ptr CryptoPP__PolynomialMod2Trinomial44_next(nullptr);
        static info::CryptoPP__PolynomialMod2Trinomial44_clbk CryptoPP__PolynomialMod2Trinomial44_user(nullptr);
        static info::CryptoPP__PolynomialMod2WordCount45_ptr CryptoPP__PolynomialMod2WordCount45_next(nullptr);
        static info::CryptoPP__PolynomialMod2WordCount45_clbk CryptoPP__PolynomialMod2WordCount45_user(nullptr);
        static info::CryptoPP__PolynomialMod2Xor46_ptr CryptoPP__PolynomialMod2Xor46_next(nullptr);
        static info::CryptoPP__PolynomialMod2Xor46_clbk CryptoPP__PolynomialMod2Xor46_user(nullptr);
        static info::CryptoPP__PolynomialMod2Zero47_ptr CryptoPP__PolynomialMod2Zero47_next(nullptr);
        static info::CryptoPP__PolynomialMod2Zero47_clbk CryptoPP__PolynomialMod2Zero47_user(nullptr);
        static info::CryptoPP__PolynomialMod2swap48_ptr CryptoPP__PolynomialMod2swap48_next(nullptr);
        static info::CryptoPP__PolynomialMod2swap48_clbk CryptoPP__PolynomialMod2swap48_user(nullptr);
        static info::CryptoPP__PolynomialMod2dtor_PolynomialMod249_ptr CryptoPP__PolynomialMod2dtor_PolynomialMod249_next(nullptr);
        static info::CryptoPP__PolynomialMod2dtor_PolynomialMod249_clbk CryptoPP__PolynomialMod2dtor_PolynomialMod249_user(nullptr);
        
        static info::CryptoPP__PolynomialMod2__DivideByZeroctor_DivideByZero1_ptr CryptoPP__PolynomialMod2__DivideByZeroctor_DivideByZero1_next(nullptr);
        static info::CryptoPP__PolynomialMod2__DivideByZeroctor_DivideByZero1_clbk CryptoPP__PolynomialMod2__DivideByZeroctor_DivideByZero1_user(nullptr);
        static info::CryptoPP__PolynomialMod2__DivideByZeroctor_DivideByZero2_ptr CryptoPP__PolynomialMod2__DivideByZeroctor_DivideByZero2_next(nullptr);
        static info::CryptoPP__PolynomialMod2__DivideByZeroctor_DivideByZero2_clbk CryptoPP__PolynomialMod2__DivideByZeroctor_DivideByZero2_user(nullptr);
        static info::CryptoPP__PolynomialMod2__DivideByZerodtor_DivideByZero3_ptr CryptoPP__PolynomialMod2__DivideByZerodtor_DivideByZero3_next(nullptr);
        static info::CryptoPP__PolynomialMod2__DivideByZerodtor_DivideByZero3_clbk CryptoPP__PolynomialMod2__DivideByZerodtor_DivideByZero3_user(nullptr);
        
        static info::CryptoPP__EC2NPointctor_EC2NPoint1_ptr CryptoPP__EC2NPointctor_EC2NPoint1_next(nullptr);
        static info::CryptoPP__EC2NPointctor_EC2NPoint1_clbk CryptoPP__EC2NPointctor_EC2NPoint1_user(nullptr);
        static info::CryptoPP__EC2NPointctor_EC2NPoint2_ptr CryptoPP__EC2NPointctor_EC2NPoint2_next(nullptr);
        static info::CryptoPP__EC2NPointctor_EC2NPoint2_clbk CryptoPP__EC2NPointctor_EC2NPoint2_user(nullptr);
        static info::CryptoPP__EC2NPointdtor_EC2NPoint3_ptr CryptoPP__EC2NPointdtor_EC2NPoint3_next(nullptr);
        static info::CryptoPP__EC2NPointdtor_EC2NPoint3_clbk CryptoPP__EC2NPointdtor_EC2NPoint3_user(nullptr);
        
        static info::CryptoPP__PK_MessageAccumulatorDigestSize1_ptr CryptoPP__PK_MessageAccumulatorDigestSize1_next(nullptr);
        static info::CryptoPP__PK_MessageAccumulatorDigestSize1_clbk CryptoPP__PK_MessageAccumulatorDigestSize1_user(nullptr);
        static info::CryptoPP__PK_MessageAccumulatorctor_PK_MessageAccumulator2_ptr CryptoPP__PK_MessageAccumulatorctor_PK_MessageAccumulator2_next(nullptr);
        static info::CryptoPP__PK_MessageAccumulatorctor_PK_MessageAccumulator2_clbk CryptoPP__PK_MessageAccumulatorctor_PK_MessageAccumulator2_user(nullptr);
        static info::CryptoPP__PK_MessageAccumulatorTruncatedFinal3_ptr CryptoPP__PK_MessageAccumulatorTruncatedFinal3_next(nullptr);
        static info::CryptoPP__PK_MessageAccumulatorTruncatedFinal3_clbk CryptoPP__PK_MessageAccumulatorTruncatedFinal3_user(nullptr);
        static info::CryptoPP__PK_MessageAccumulatordtor_PK_MessageAccumulator4_ptr CryptoPP__PK_MessageAccumulatordtor_PK_MessageAccumulator4_next(nullptr);
        static info::CryptoPP__PK_MessageAccumulatordtor_PK_MessageAccumulator4_clbk CryptoPP__PK_MessageAccumulatordtor_PK_MessageAccumulator4_user(nullptr);
        
        static info::CryptoPP__PK_MessageAccumulatorBasector_PK_MessageAccumulatorBase1_ptr CryptoPP__PK_MessageAccumulatorBasector_PK_MessageAccumulatorBase1_next(nullptr);
        static info::CryptoPP__PK_MessageAccumulatorBasector_PK_MessageAccumulatorBase1_clbk CryptoPP__PK_MessageAccumulatorBasector_PK_MessageAccumulatorBase1_user(nullptr);
        static info::CryptoPP__PK_MessageAccumulatorBaseUpdate2_ptr CryptoPP__PK_MessageAccumulatorBaseUpdate2_next(nullptr);
        static info::CryptoPP__PK_MessageAccumulatorBaseUpdate2_clbk CryptoPP__PK_MessageAccumulatorBaseUpdate2_user(nullptr);
        static info::CryptoPP__PK_MessageAccumulatorBasedtor_PK_MessageAccumulatorBase3_ptr CryptoPP__PK_MessageAccumulatorBasedtor_PK_MessageAccumulatorBase3_next(nullptr);
        static info::CryptoPP__PK_MessageAccumulatorBasedtor_PK_MessageAccumulatorBase3_clbk CryptoPP__PK_MessageAccumulatorBasedtor_PK_MessageAccumulatorBase3_user(nullptr);
        
        static info::CryptoPP__ClonableImplctor_ClonableImpl2_ptr CryptoPP__ClonableImplctor_ClonableImpl2_next(nullptr);
        static info::CryptoPP__ClonableImplctor_ClonableImpl2_clbk CryptoPP__ClonableImplctor_ClonableImpl2_user(nullptr);
        static info::CryptoPP__ClonableImplctor_ClonableImpl4_ptr CryptoPP__ClonableImplctor_ClonableImpl4_next(nullptr);
        static info::CryptoPP__ClonableImplctor_ClonableImpl4_clbk CryptoPP__ClonableImplctor_ClonableImpl4_user(nullptr);
        static info::CryptoPP__ClonableImplClone6_ptr CryptoPP__ClonableImplClone6_next(nullptr);
        static info::CryptoPP__ClonableImplClone6_clbk CryptoPP__ClonableImplClone6_user(nullptr);
        static info::CryptoPP__ClonableImpldtor_ClonableImpl8_ptr CryptoPP__ClonableImpldtor_ClonableImpl8_next(nullptr);
        static info::CryptoPP__ClonableImpldtor_ClonableImpl8_clbk CryptoPP__ClonableImpldtor_ClonableImpl8_user(nullptr);
        
        static info::CryptoPP__BlockCipherFinalctor_BlockCipherFinal2_ptr CryptoPP__BlockCipherFinalctor_BlockCipherFinal2_next(nullptr);
        static info::CryptoPP__BlockCipherFinalctor_BlockCipherFinal2_clbk CryptoPP__BlockCipherFinalctor_BlockCipherFinal2_user(nullptr);
        static info::CryptoPP__BlockCipherFinalctor_BlockCipherFinal4_ptr CryptoPP__BlockCipherFinalctor_BlockCipherFinal4_next(nullptr);
        static info::CryptoPP__BlockCipherFinalctor_BlockCipherFinal4_clbk CryptoPP__BlockCipherFinalctor_BlockCipherFinal4_user(nullptr);
        static info::CryptoPP__BlockCipherFinalIsForwardTransformation6_ptr CryptoPP__BlockCipherFinalIsForwardTransformation6_next(nullptr);
        static info::CryptoPP__BlockCipherFinalIsForwardTransformation6_clbk CryptoPP__BlockCipherFinalIsForwardTransformation6_user(nullptr);
        static info::CryptoPP__BlockCipherFinaldtor_BlockCipherFinal11_ptr CryptoPP__BlockCipherFinaldtor_BlockCipherFinal11_next(nullptr);
        static info::CryptoPP__BlockCipherFinaldtor_BlockCipherFinal11_clbk CryptoPP__BlockCipherFinaldtor_BlockCipherFinal11_user(nullptr);
        
        static info::CryptoPP__CBC_Encryptionctor_CBC_Encryption2_ptr CryptoPP__CBC_Encryptionctor_CBC_Encryption2_next(nullptr);
        static info::CryptoPP__CBC_Encryptionctor_CBC_Encryption2_clbk CryptoPP__CBC_Encryptionctor_CBC_Encryption2_user(nullptr);
        static info::CryptoPP__CBC_EncryptionProcessBlocks3_ptr CryptoPP__CBC_EncryptionProcessBlocks3_next(nullptr);
        static info::CryptoPP__CBC_EncryptionProcessBlocks3_clbk CryptoPP__CBC_EncryptionProcessBlocks3_user(nullptr);
        static info::CryptoPP__CBC_Encryptiondtor_CBC_Encryption5_ptr CryptoPP__CBC_Encryptiondtor_CBC_Encryption5_next(nullptr);
        static info::CryptoPP__CBC_Encryptiondtor_CBC_Encryption5_clbk CryptoPP__CBC_Encryptiondtor_CBC_Encryption5_user(nullptr);
        
        static info::CryptoPP__CipherModeFinalTemplate_CipherHolderctor_CipherModeFinalTemplate_CipherHolder2_ptr CryptoPP__CipherModeFinalTemplate_CipherHolderctor_CipherModeFinalTemplate_CipherHolder2_next(nullptr);
        static info::CryptoPP__CipherModeFinalTemplate_CipherHolderctor_CipherModeFinalTemplate_CipherHolder2_clbk CryptoPP__CipherModeFinalTemplate_CipherHolderctor_CipherModeFinalTemplate_CipherHolder2_user(nullptr);
        static info::CryptoPP__CipherModeFinalTemplate_CipherHolderStaticAlgorithmName4_ptr CryptoPP__CipherModeFinalTemplate_CipherHolderStaticAlgorithmName4_next(nullptr);
        static info::CryptoPP__CipherModeFinalTemplate_CipherHolderStaticAlgorithmName4_clbk CryptoPP__CipherModeFinalTemplate_CipherHolderStaticAlgorithmName4_user(nullptr);
        static info::CryptoPP__CipherModeFinalTemplate_CipherHolderdtor_CipherModeFinalTemplate_CipherHolder9_ptr CryptoPP__CipherModeFinalTemplate_CipherHolderdtor_CipherModeFinalTemplate_CipherHolder9_next(nullptr);
        static info::CryptoPP__CipherModeFinalTemplate_CipherHolderdtor_CipherModeFinalTemplate_CipherHolder9_clbk CryptoPP__CipherModeFinalTemplate_CipherHolderdtor_CipherModeFinalTemplate_CipherHolder9_user(nullptr);
        
        static info::CryptoPP__DSAGeneratePrimes1_ptr CryptoPP__DSAGeneratePrimes1_next(nullptr);
        static info::CryptoPP__DSAGeneratePrimes1_clbk CryptoPP__DSAGeneratePrimes1_user(nullptr);
        static info::CryptoPP__DSAIsValidPrimeLength2_ptr CryptoPP__DSAIsValidPrimeLength2_next(nullptr);
        static info::CryptoPP__DSAIsValidPrimeLength2_clbk CryptoPP__DSAIsValidPrimeLength2_user(nullptr);
        static info::CryptoPP__DSAStaticAlgorithmName3_ptr CryptoPP__DSAStaticAlgorithmName3_next(nullptr);
        static info::CryptoPP__DSAStaticAlgorithmName3_clbk CryptoPP__DSAStaticAlgorithmName3_user(nullptr);
        
        static info::CryptoPP__DL_GroupParameters_IntegerBasedAssignFrom1_ptr CryptoPP__DL_GroupParameters_IntegerBasedAssignFrom1_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedAssignFrom1_clbk CryptoPP__DL_GroupParameters_IntegerBasedAssignFrom1_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedBERDecode2_ptr CryptoPP__DL_GroupParameters_IntegerBasedBERDecode2_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedBERDecode2_clbk CryptoPP__DL_GroupParameters_IntegerBasedBERDecode2_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedComputeGroupOrder3_ptr CryptoPP__DL_GroupParameters_IntegerBasedComputeGroupOrder3_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedComputeGroupOrder3_clbk CryptoPP__DL_GroupParameters_IntegerBasedComputeGroupOrder3_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedConvertElementToInteger4_ptr CryptoPP__DL_GroupParameters_IntegerBasedConvertElementToInteger4_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedConvertElementToInteger4_clbk CryptoPP__DL_GroupParameters_IntegerBasedConvertElementToInteger4_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedDEREncode5_ptr CryptoPP__DL_GroupParameters_IntegerBasedDEREncode5_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedDEREncode5_clbk CryptoPP__DL_GroupParameters_IntegerBasedDEREncode5_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedctor_DL_GroupParameters_IntegerBased6_ptr CryptoPP__DL_GroupParameters_IntegerBasedctor_DL_GroupParameters_IntegerBased6_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedctor_DL_GroupParameters_IntegerBased6_clbk CryptoPP__DL_GroupParameters_IntegerBasedctor_DL_GroupParameters_IntegerBased6_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedctor_DL_GroupParameters_IntegerBased7_ptr CryptoPP__DL_GroupParameters_IntegerBasedctor_DL_GroupParameters_IntegerBased7_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedctor_DL_GroupParameters_IntegerBased7_clbk CryptoPP__DL_GroupParameters_IntegerBasedctor_DL_GroupParameters_IntegerBased7_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedDecodeElement8_ptr CryptoPP__DL_GroupParameters_IntegerBasedDecodeElement8_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedDecodeElement8_clbk CryptoPP__DL_GroupParameters_IntegerBasedDecodeElement8_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedEncodeElement9_ptr CryptoPP__DL_GroupParameters_IntegerBasedEncodeElement9_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedEncodeElement9_clbk CryptoPP__DL_GroupParameters_IntegerBasedEncodeElement9_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedFastSubgroupCheckAvailable10_ptr CryptoPP__DL_GroupParameters_IntegerBasedFastSubgroupCheckAvailable10_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedFastSubgroupCheckAvailable10_clbk CryptoPP__DL_GroupParameters_IntegerBasedFastSubgroupCheckAvailable10_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedGenerateRandom11_ptr CryptoPP__DL_GroupParameters_IntegerBasedGenerateRandom11_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedGenerateRandom11_clbk CryptoPP__DL_GroupParameters_IntegerBasedGenerateRandom11_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedGetAlgorithmID12_ptr CryptoPP__DL_GroupParameters_IntegerBasedGetAlgorithmID12_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedGetAlgorithmID12_clbk CryptoPP__DL_GroupParameters_IntegerBasedGetAlgorithmID12_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedGetDefaultSubgroupOrderSize13_ptr CryptoPP__DL_GroupParameters_IntegerBasedGetDefaultSubgroupOrderSize13_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedGetDefaultSubgroupOrderSize13_clbk CryptoPP__DL_GroupParameters_IntegerBasedGetDefaultSubgroupOrderSize13_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedGetEncodedElementSize14_ptr CryptoPP__DL_GroupParameters_IntegerBasedGetEncodedElementSize14_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedGetEncodedElementSize14_clbk CryptoPP__DL_GroupParameters_IntegerBasedGetEncodedElementSize14_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedGetGroupOrder15_ptr CryptoPP__DL_GroupParameters_IntegerBasedGetGroupOrder15_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedGetGroupOrder15_clbk CryptoPP__DL_GroupParameters_IntegerBasedGetGroupOrder15_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedGetMaxExponent16_ptr CryptoPP__DL_GroupParameters_IntegerBasedGetMaxExponent16_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedGetMaxExponent16_clbk CryptoPP__DL_GroupParameters_IntegerBasedGetMaxExponent16_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedGetSubgroupOrder17_ptr CryptoPP__DL_GroupParameters_IntegerBasedGetSubgroupOrder17_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedGetSubgroupOrder17_clbk CryptoPP__DL_GroupParameters_IntegerBasedGetSubgroupOrder17_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedGetVoidValue18_ptr CryptoPP__DL_GroupParameters_IntegerBasedGetVoidValue18_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedGetVoidValue18_clbk CryptoPP__DL_GroupParameters_IntegerBasedGetVoidValue18_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedInitialize19_ptr CryptoPP__DL_GroupParameters_IntegerBasedInitialize19_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedInitialize19_clbk CryptoPP__DL_GroupParameters_IntegerBasedInitialize19_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedInitialize20_ptr CryptoPP__DL_GroupParameters_IntegerBasedInitialize20_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedInitialize20_clbk CryptoPP__DL_GroupParameters_IntegerBasedInitialize20_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedInitialize21_ptr CryptoPP__DL_GroupParameters_IntegerBasedInitialize21_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedInitialize21_clbk CryptoPP__DL_GroupParameters_IntegerBasedInitialize21_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedSetSubgroupOrder22_ptr CryptoPP__DL_GroupParameters_IntegerBasedSetSubgroupOrder22_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedSetSubgroupOrder22_clbk CryptoPP__DL_GroupParameters_IntegerBasedSetSubgroupOrder22_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedValidateGroup23_ptr CryptoPP__DL_GroupParameters_IntegerBasedValidateGroup23_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBasedValidateGroup23_clbk CryptoPP__DL_GroupParameters_IntegerBasedValidateGroup23_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBaseddtor_DL_GroupParameters_IntegerBased24_ptr CryptoPP__DL_GroupParameters_IntegerBaseddtor_DL_GroupParameters_IntegerBased24_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_IntegerBaseddtor_DL_GroupParameters_IntegerBased24_clbk CryptoPP__DL_GroupParameters_IntegerBaseddtor_DL_GroupParameters_IntegerBased24_user(nullptr);
        
        static info::CryptoPP__MontgomeryRepresentationCascadeExponentiate1_ptr CryptoPP__MontgomeryRepresentationCascadeExponentiate1_next(nullptr);
        static info::CryptoPP__MontgomeryRepresentationCascadeExponentiate1_clbk CryptoPP__MontgomeryRepresentationCascadeExponentiate1_user(nullptr);
        static info::CryptoPP__MontgomeryRepresentationClone2_ptr CryptoPP__MontgomeryRepresentationClone2_next(nullptr);
        static info::CryptoPP__MontgomeryRepresentationClone2_clbk CryptoPP__MontgomeryRepresentationClone2_user(nullptr);
        static info::CryptoPP__MontgomeryRepresentationConvertIn3_ptr CryptoPP__MontgomeryRepresentationConvertIn3_next(nullptr);
        static info::CryptoPP__MontgomeryRepresentationConvertIn3_clbk CryptoPP__MontgomeryRepresentationConvertIn3_user(nullptr);
        static info::CryptoPP__MontgomeryRepresentationConvertOut4_ptr CryptoPP__MontgomeryRepresentationConvertOut4_next(nullptr);
        static info::CryptoPP__MontgomeryRepresentationConvertOut4_clbk CryptoPP__MontgomeryRepresentationConvertOut4_user(nullptr);
        static info::CryptoPP__MontgomeryRepresentationIsMontgomeryRepresentation5_ptr CryptoPP__MontgomeryRepresentationIsMontgomeryRepresentation5_next(nullptr);
        static info::CryptoPP__MontgomeryRepresentationIsMontgomeryRepresentation5_clbk CryptoPP__MontgomeryRepresentationIsMontgomeryRepresentation5_user(nullptr);
        static info::CryptoPP__MontgomeryRepresentationctor_MontgomeryRepresentation6_ptr CryptoPP__MontgomeryRepresentationctor_MontgomeryRepresentation6_next(nullptr);
        static info::CryptoPP__MontgomeryRepresentationctor_MontgomeryRepresentation6_clbk CryptoPP__MontgomeryRepresentationctor_MontgomeryRepresentation6_user(nullptr);
        static info::CryptoPP__MontgomeryRepresentationctor_MontgomeryRepresentation7_ptr CryptoPP__MontgomeryRepresentationctor_MontgomeryRepresentation7_next(nullptr);
        static info::CryptoPP__MontgomeryRepresentationctor_MontgomeryRepresentation7_clbk CryptoPP__MontgomeryRepresentationctor_MontgomeryRepresentation7_user(nullptr);
        static info::CryptoPP__MontgomeryRepresentationMultiplicativeIdentity8_ptr CryptoPP__MontgomeryRepresentationMultiplicativeIdentity8_next(nullptr);
        static info::CryptoPP__MontgomeryRepresentationMultiplicativeIdentity8_clbk CryptoPP__MontgomeryRepresentationMultiplicativeIdentity8_user(nullptr);
        static info::CryptoPP__MontgomeryRepresentationMultiplicativeInverse9_ptr CryptoPP__MontgomeryRepresentationMultiplicativeInverse9_next(nullptr);
        static info::CryptoPP__MontgomeryRepresentationMultiplicativeInverse9_clbk CryptoPP__MontgomeryRepresentationMultiplicativeInverse9_user(nullptr);
        static info::CryptoPP__MontgomeryRepresentationMultiply10_ptr CryptoPP__MontgomeryRepresentationMultiply10_next(nullptr);
        static info::CryptoPP__MontgomeryRepresentationMultiply10_clbk CryptoPP__MontgomeryRepresentationMultiply10_user(nullptr);
        static info::CryptoPP__MontgomeryRepresentationSimultaneousExponentiate11_ptr CryptoPP__MontgomeryRepresentationSimultaneousExponentiate11_next(nullptr);
        static info::CryptoPP__MontgomeryRepresentationSimultaneousExponentiate11_clbk CryptoPP__MontgomeryRepresentationSimultaneousExponentiate11_user(nullptr);
        static info::CryptoPP__MontgomeryRepresentationSquare12_ptr CryptoPP__MontgomeryRepresentationSquare12_next(nullptr);
        static info::CryptoPP__MontgomeryRepresentationSquare12_clbk CryptoPP__MontgomeryRepresentationSquare12_user(nullptr);
        static info::CryptoPP__MontgomeryRepresentationdtor_MontgomeryRepresentation13_ptr CryptoPP__MontgomeryRepresentationdtor_MontgomeryRepresentation13_next(nullptr);
        static info::CryptoPP__MontgomeryRepresentationdtor_MontgomeryRepresentation13_clbk CryptoPP__MontgomeryRepresentationdtor_MontgomeryRepresentation13_user(nullptr);
        
        static info::CryptoPP__ModExpPrecomputationBERDecodeElement1_ptr CryptoPP__ModExpPrecomputationBERDecodeElement1_next(nullptr);
        static info::CryptoPP__ModExpPrecomputationBERDecodeElement1_clbk CryptoPP__ModExpPrecomputationBERDecodeElement1_user(nullptr);
        static info::CryptoPP__ModExpPrecomputationConvertIn2_ptr CryptoPP__ModExpPrecomputationConvertIn2_next(nullptr);
        static info::CryptoPP__ModExpPrecomputationConvertIn2_clbk CryptoPP__ModExpPrecomputationConvertIn2_user(nullptr);
        static info::CryptoPP__ModExpPrecomputationConvertOut3_ptr CryptoPP__ModExpPrecomputationConvertOut3_next(nullptr);
        static info::CryptoPP__ModExpPrecomputationConvertOut3_clbk CryptoPP__ModExpPrecomputationConvertOut3_user(nullptr);
        static info::CryptoPP__ModExpPrecomputationDEREncodeElement4_ptr CryptoPP__ModExpPrecomputationDEREncodeElement4_next(nullptr);
        static info::CryptoPP__ModExpPrecomputationDEREncodeElement4_clbk CryptoPP__ModExpPrecomputationDEREncodeElement4_user(nullptr);
        static info::CryptoPP__ModExpPrecomputationGetModulus5_ptr CryptoPP__ModExpPrecomputationGetModulus5_next(nullptr);
        static info::CryptoPP__ModExpPrecomputationGetModulus5_clbk CryptoPP__ModExpPrecomputationGetModulus5_user(nullptr);
        static info::CryptoPP__ModExpPrecomputationctor_ModExpPrecomputation6_ptr CryptoPP__ModExpPrecomputationctor_ModExpPrecomputation6_next(nullptr);
        static info::CryptoPP__ModExpPrecomputationctor_ModExpPrecomputation6_clbk CryptoPP__ModExpPrecomputationctor_ModExpPrecomputation6_user(nullptr);
        static info::CryptoPP__ModExpPrecomputationctor_ModExpPrecomputation7_ptr CryptoPP__ModExpPrecomputationctor_ModExpPrecomputation7_next(nullptr);
        static info::CryptoPP__ModExpPrecomputationctor_ModExpPrecomputation7_clbk CryptoPP__ModExpPrecomputationctor_ModExpPrecomputation7_user(nullptr);
        static info::CryptoPP__ModExpPrecomputationNeedConversions8_ptr CryptoPP__ModExpPrecomputationNeedConversions8_next(nullptr);
        static info::CryptoPP__ModExpPrecomputationNeedConversions8_clbk CryptoPP__ModExpPrecomputationNeedConversions8_user(nullptr);
        static info::CryptoPP__ModExpPrecomputationSetModulus9_ptr CryptoPP__ModExpPrecomputationSetModulus9_next(nullptr);
        static info::CryptoPP__ModExpPrecomputationSetModulus9_clbk CryptoPP__ModExpPrecomputationSetModulus9_user(nullptr);
        static info::CryptoPP__ModExpPrecomputationdtor_ModExpPrecomputation10_ptr CryptoPP__ModExpPrecomputationdtor_ModExpPrecomputation10_next(nullptr);
        static info::CryptoPP__ModExpPrecomputationdtor_ModExpPrecomputation10_clbk CryptoPP__ModExpPrecomputationdtor_ModExpPrecomputation10_user(nullptr);
        
        static info::CryptoPP__DL_GroupParameters_GFPCascadeExponentiate1_ptr CryptoPP__DL_GroupParameters_GFPCascadeExponentiate1_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_GFPCascadeExponentiate1_clbk CryptoPP__DL_GroupParameters_GFPCascadeExponentiate1_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_GFPctor_DL_GroupParameters_GFP2_ptr CryptoPP__DL_GroupParameters_GFPctor_DL_GroupParameters_GFP2_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_GFPctor_DL_GroupParameters_GFP2_clbk CryptoPP__DL_GroupParameters_GFPctor_DL_GroupParameters_GFP2_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_GFPctor_DL_GroupParameters_GFP3_ptr CryptoPP__DL_GroupParameters_GFPctor_DL_GroupParameters_GFP3_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_GFPctor_DL_GroupParameters_GFP3_clbk CryptoPP__DL_GroupParameters_GFPctor_DL_GroupParameters_GFP3_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_GFPGetFieldType4_ptr CryptoPP__DL_GroupParameters_GFPGetFieldType4_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_GFPGetFieldType4_clbk CryptoPP__DL_GroupParameters_GFPGetFieldType4_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_GFPGetVoidValue5_ptr CryptoPP__DL_GroupParameters_GFPGetVoidValue5_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_GFPGetVoidValue5_clbk CryptoPP__DL_GroupParameters_GFPGetVoidValue5_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_GFPIsIdentity6_ptr CryptoPP__DL_GroupParameters_GFPIsIdentity6_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_GFPIsIdentity6_clbk CryptoPP__DL_GroupParameters_GFPIsIdentity6_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_GFPMultiplyElements7_ptr CryptoPP__DL_GroupParameters_GFPMultiplyElements7_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_GFPMultiplyElements7_clbk CryptoPP__DL_GroupParameters_GFPMultiplyElements7_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_GFPSimultaneousExponentiate8_ptr CryptoPP__DL_GroupParameters_GFPSimultaneousExponentiate8_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_GFPSimultaneousExponentiate8_clbk CryptoPP__DL_GroupParameters_GFPSimultaneousExponentiate8_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_GFPdtor_DL_GroupParameters_GFP9_ptr CryptoPP__DL_GroupParameters_GFPdtor_DL_GroupParameters_GFP9_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_GFPdtor_DL_GroupParameters_GFP9_clbk CryptoPP__DL_GroupParameters_GFPdtor_DL_GroupParameters_GFP9_user(nullptr);
        
        static info::CryptoPP__DL_GroupParameters_DSActor_DL_GroupParameters_DSA1_ptr CryptoPP__DL_GroupParameters_DSActor_DL_GroupParameters_DSA1_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_DSActor_DL_GroupParameters_DSA1_clbk CryptoPP__DL_GroupParameters_DSActor_DL_GroupParameters_DSA1_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_DSActor_DL_GroupParameters_DSA2_ptr CryptoPP__DL_GroupParameters_DSActor_DL_GroupParameters_DSA2_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_DSActor_DL_GroupParameters_DSA2_clbk CryptoPP__DL_GroupParameters_DSActor_DL_GroupParameters_DSA2_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_DSAGenerateRandom3_ptr CryptoPP__DL_GroupParameters_DSAGenerateRandom3_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_DSAGenerateRandom3_clbk CryptoPP__DL_GroupParameters_DSAGenerateRandom3_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_DSAValidateGroup4_ptr CryptoPP__DL_GroupParameters_DSAValidateGroup4_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_DSAValidateGroup4_clbk CryptoPP__DL_GroupParameters_DSAValidateGroup4_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_DSAdtor_DL_GroupParameters_DSA5_ptr CryptoPP__DL_GroupParameters_DSAdtor_DL_GroupParameters_DSA5_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_DSAdtor_DL_GroupParameters_DSA5_clbk CryptoPP__DL_GroupParameters_DSAdtor_DL_GroupParameters_DSA5_user(nullptr);
        
        static info::CryptoPP__AbstractGroupCascadeScalarMultiply1_ptr CryptoPP__AbstractGroupCascadeScalarMultiply1_next(nullptr);
        static info::CryptoPP__AbstractGroupCascadeScalarMultiply1_clbk CryptoPP__AbstractGroupCascadeScalarMultiply1_user(nullptr);
        
        static info::CryptoPP__AbstractGroupCascadeScalarMultiply1_ptr CryptoPP__AbstractGroupCascadeScalarMultiply1_next(nullptr);
        static info::CryptoPP__AbstractGroupCascadeScalarMultiply1_clbk CryptoPP__AbstractGroupCascadeScalarMultiply1_user(nullptr);
        
        static info::CryptoPP__EuclideanDomainOfDivisionAlgorithm1_ptr CryptoPP__EuclideanDomainOfDivisionAlgorithm1_next(nullptr);
        static info::CryptoPP__EuclideanDomainOfDivisionAlgorithm1_clbk CryptoPP__EuclideanDomainOfDivisionAlgorithm1_user(nullptr);
        
        static info::CryptoPP__GF2NPBERDecodeElement1_ptr CryptoPP__GF2NPBERDecodeElement1_next(nullptr);
        static info::CryptoPP__GF2NPBERDecodeElement1_clbk CryptoPP__GF2NPBERDecodeElement1_user(nullptr);
        static info::CryptoPP__GF2NPClone2_ptr CryptoPP__GF2NPClone2_next(nullptr);
        static info::CryptoPP__GF2NPClone2_clbk CryptoPP__GF2NPClone2_user(nullptr);
        static info::CryptoPP__GF2NPDEREncode3_ptr CryptoPP__GF2NPDEREncode3_next(nullptr);
        static info::CryptoPP__GF2NPDEREncode3_clbk CryptoPP__GF2NPDEREncode3_user(nullptr);
        static info::CryptoPP__GF2NPDEREncodeElement4_ptr CryptoPP__GF2NPDEREncodeElement4_next(nullptr);
        static info::CryptoPP__GF2NPDEREncodeElement4_clbk CryptoPP__GF2NPDEREncodeElement4_user(nullptr);
        static info::CryptoPP__GF2NPEqual5_ptr CryptoPP__GF2NPEqual5_next(nullptr);
        static info::CryptoPP__GF2NPEqual5_clbk CryptoPP__GF2NPEqual5_user(nullptr);
        static info::CryptoPP__GF2NPctor_GF2NP6_ptr CryptoPP__GF2NPctor_GF2NP6_next(nullptr);
        static info::CryptoPP__GF2NPctor_GF2NP6_clbk CryptoPP__GF2NPctor_GF2NP6_user(nullptr);
        static info::CryptoPP__GF2NPctor_GF2NP7_ptr CryptoPP__GF2NPctor_GF2NP7_next(nullptr);
        static info::CryptoPP__GF2NPctor_GF2NP7_clbk CryptoPP__GF2NPctor_GF2NP7_user(nullptr);
        static info::CryptoPP__GF2NPHalfTrace8_ptr CryptoPP__GF2NPHalfTrace8_next(nullptr);
        static info::CryptoPP__GF2NPHalfTrace8_clbk CryptoPP__GF2NPHalfTrace8_user(nullptr);
        static info::CryptoPP__GF2NPIsUnit9_ptr CryptoPP__GF2NPIsUnit9_next(nullptr);
        static info::CryptoPP__GF2NPIsUnit9_clbk CryptoPP__GF2NPIsUnit9_user(nullptr);
        static info::CryptoPP__GF2NPMaxElementBitLength10_ptr CryptoPP__GF2NPMaxElementBitLength10_next(nullptr);
        static info::CryptoPP__GF2NPMaxElementBitLength10_clbk CryptoPP__GF2NPMaxElementBitLength10_user(nullptr);
        static info::CryptoPP__GF2NPMaxElementByteLength11_ptr CryptoPP__GF2NPMaxElementByteLength11_next(nullptr);
        static info::CryptoPP__GF2NPMaxElementByteLength11_clbk CryptoPP__GF2NPMaxElementByteLength11_user(nullptr);
        static info::CryptoPP__GF2NPSolveQuadraticEquation12_ptr CryptoPP__GF2NPSolveQuadraticEquation12_next(nullptr);
        static info::CryptoPP__GF2NPSolveQuadraticEquation12_clbk CryptoPP__GF2NPSolveQuadraticEquation12_user(nullptr);
        static info::CryptoPP__GF2NPSquareRoot13_ptr CryptoPP__GF2NPSquareRoot13_next(nullptr);
        static info::CryptoPP__GF2NPSquareRoot13_clbk CryptoPP__GF2NPSquareRoot13_user(nullptr);
        static info::CryptoPP__GF2NPdtor_GF2NP14_ptr CryptoPP__GF2NPdtor_GF2NP14_next(nullptr);
        static info::CryptoPP__GF2NPdtor_GF2NP14_clbk CryptoPP__GF2NPdtor_GF2NP14_user(nullptr);
        
        static info::CryptoPP__EC2NAdd1_ptr CryptoPP__EC2NAdd1_next(nullptr);
        static info::CryptoPP__EC2NAdd1_clbk CryptoPP__EC2NAdd1_user(nullptr);
        static info::CryptoPP__EC2NBERDecodePoint2_ptr CryptoPP__EC2NBERDecodePoint2_next(nullptr);
        static info::CryptoPP__EC2NBERDecodePoint2_clbk CryptoPP__EC2NBERDecodePoint2_user(nullptr);
        static info::CryptoPP__EC2NCascadeMultiply3_ptr CryptoPP__EC2NCascadeMultiply3_next(nullptr);
        static info::CryptoPP__EC2NCascadeMultiply3_clbk CryptoPP__EC2NCascadeMultiply3_user(nullptr);
        static info::CryptoPP__EC2NDEREncode4_ptr CryptoPP__EC2NDEREncode4_next(nullptr);
        static info::CryptoPP__EC2NDEREncode4_clbk CryptoPP__EC2NDEREncode4_user(nullptr);
        static info::CryptoPP__EC2NDEREncodePoint5_ptr CryptoPP__EC2NDEREncodePoint5_next(nullptr);
        static info::CryptoPP__EC2NDEREncodePoint5_clbk CryptoPP__EC2NDEREncodePoint5_user(nullptr);
        static info::CryptoPP__EC2NDecodePoint6_ptr CryptoPP__EC2NDecodePoint6_next(nullptr);
        static info::CryptoPP__EC2NDecodePoint6_clbk CryptoPP__EC2NDecodePoint6_user(nullptr);
        static info::CryptoPP__EC2NDecodePoint7_ptr CryptoPP__EC2NDecodePoint7_next(nullptr);
        static info::CryptoPP__EC2NDecodePoint7_clbk CryptoPP__EC2NDecodePoint7_user(nullptr);
        static info::CryptoPP__EC2NDouble8_ptr CryptoPP__EC2NDouble8_next(nullptr);
        static info::CryptoPP__EC2NDouble8_clbk CryptoPP__EC2NDouble8_user(nullptr);
        static info::CryptoPP__EC2Nctor_EC2N9_ptr CryptoPP__EC2Nctor_EC2N9_next(nullptr);
        static info::CryptoPP__EC2Nctor_EC2N9_clbk CryptoPP__EC2Nctor_EC2N9_user(nullptr);
        static info::CryptoPP__EC2Nctor_EC2N10_ptr CryptoPP__EC2Nctor_EC2N10_next(nullptr);
        static info::CryptoPP__EC2Nctor_EC2N10_clbk CryptoPP__EC2Nctor_EC2N10_user(nullptr);
        static info::CryptoPP__EC2Nctor_EC2N11_ptr CryptoPP__EC2Nctor_EC2N11_next(nullptr);
        static info::CryptoPP__EC2Nctor_EC2N11_clbk CryptoPP__EC2Nctor_EC2N11_user(nullptr);
        static info::CryptoPP__EC2NEncodePoint12_ptr CryptoPP__EC2NEncodePoint12_next(nullptr);
        static info::CryptoPP__EC2NEncodePoint12_clbk CryptoPP__EC2NEncodePoint12_user(nullptr);
        static info::CryptoPP__EC2NEncodePoint13_ptr CryptoPP__EC2NEncodePoint13_next(nullptr);
        static info::CryptoPP__EC2NEncodePoint13_clbk CryptoPP__EC2NEncodePoint13_user(nullptr);
        static info::CryptoPP__EC2NEncodedPointSize14_ptr CryptoPP__EC2NEncodedPointSize14_next(nullptr);
        static info::CryptoPP__EC2NEncodedPointSize14_clbk CryptoPP__EC2NEncodedPointSize14_user(nullptr);
        static info::CryptoPP__EC2NEqual15_ptr CryptoPP__EC2NEqual15_next(nullptr);
        static info::CryptoPP__EC2NEqual15_clbk CryptoPP__EC2NEqual15_user(nullptr);
        static info::CryptoPP__EC2NFieldSize16_ptr CryptoPP__EC2NFieldSize16_next(nullptr);
        static info::CryptoPP__EC2NFieldSize16_clbk CryptoPP__EC2NFieldSize16_user(nullptr);
        static info::CryptoPP__EC2NGetField17_ptr CryptoPP__EC2NGetField17_next(nullptr);
        static info::CryptoPP__EC2NGetField17_clbk CryptoPP__EC2NGetField17_user(nullptr);
        static info::CryptoPP__EC2NIdentity18_ptr CryptoPP__EC2NIdentity18_next(nullptr);
        static info::CryptoPP__EC2NIdentity18_clbk CryptoPP__EC2NIdentity18_user(nullptr);
        static info::CryptoPP__EC2NInverse19_ptr CryptoPP__EC2NInverse19_next(nullptr);
        static info::CryptoPP__EC2NInverse19_clbk CryptoPP__EC2NInverse19_user(nullptr);
        static info::CryptoPP__EC2NInversionIsFast20_ptr CryptoPP__EC2NInversionIsFast20_next(nullptr);
        static info::CryptoPP__EC2NInversionIsFast20_clbk CryptoPP__EC2NInversionIsFast20_user(nullptr);
        static info::CryptoPP__EC2NValidateParameters21_ptr CryptoPP__EC2NValidateParameters21_next(nullptr);
        static info::CryptoPP__EC2NValidateParameters21_clbk CryptoPP__EC2NValidateParameters21_user(nullptr);
        static info::CryptoPP__EC2NVerifyPoint22_ptr CryptoPP__EC2NVerifyPoint22_next(nullptr);
        static info::CryptoPP__EC2NVerifyPoint22_clbk CryptoPP__EC2NVerifyPoint22_user(nullptr);
        static info::CryptoPP__EC2Ndtor_EC2N23_ptr CryptoPP__EC2Ndtor_EC2N23_next(nullptr);
        static info::CryptoPP__EC2Ndtor_EC2N23_clbk CryptoPP__EC2Ndtor_EC2N23_user(nullptr);
        
        static info::CryptoPP__DL_GroupParameters_ECCascadeExponentiate1_ptr CryptoPP__DL_GroupParameters_ECCascadeExponentiate1_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_ECCascadeExponentiate1_clbk CryptoPP__DL_GroupParameters_ECCascadeExponentiate1_user(nullptr);
        
        static info::CryptoPP__DL_Algorithm_GDSASign1_ptr CryptoPP__DL_Algorithm_GDSASign1_next(nullptr);
        static info::CryptoPP__DL_Algorithm_GDSASign1_clbk CryptoPP__DL_Algorithm_GDSASign1_user(nullptr);
        static info::CryptoPP__DL_Algorithm_GDSAVerify2_ptr CryptoPP__DL_Algorithm_GDSAVerify2_next(nullptr);
        static info::CryptoPP__DL_Algorithm_GDSAVerify2_clbk CryptoPP__DL_Algorithm_GDSAVerify2_user(nullptr);
        
        static info::CryptoPP__member_ptrdtor_member_ptr2_ptr CryptoPP__member_ptrdtor_member_ptr2_next(nullptr);
        static info::CryptoPP__member_ptrdtor_member_ptr2_clbk CryptoPP__member_ptrdtor_member_ptr2_user(nullptr);
        
        static info::CryptoPP__FilterAttachable2_ptr CryptoPP__FilterAttachable2_next(nullptr);
        static info::CryptoPP__FilterAttachable2_clbk CryptoPP__FilterAttachable2_user(nullptr);
        static info::CryptoPP__FilterShouldPropagateMessageEnd4_ptr CryptoPP__FilterShouldPropagateMessageEnd4_next(nullptr);
        static info::CryptoPP__FilterShouldPropagateMessageEnd4_clbk CryptoPP__FilterShouldPropagateMessageEnd4_user(nullptr);
        static info::CryptoPP__FilterShouldPropagateMessageSeriesEnd6_ptr CryptoPP__FilterShouldPropagateMessageSeriesEnd6_next(nullptr);
        static info::CryptoPP__FilterShouldPropagateMessageSeriesEnd6_clbk CryptoPP__FilterShouldPropagateMessageSeriesEnd6_user(nullptr);
        static info::CryptoPP__Filterdtor_Filter8_ptr CryptoPP__Filterdtor_Filter8_next(nullptr);
        static info::CryptoPP__Filterdtor_Filter8_clbk CryptoPP__Filterdtor_Filter8_user(nullptr);
        
        static info::CryptoPP__PK_SignatureSchemeMaxSignatureLength1_ptr CryptoPP__PK_SignatureSchemeMaxSignatureLength1_next(nullptr);
        static info::CryptoPP__PK_SignatureSchemeMaxSignatureLength1_clbk CryptoPP__PK_SignatureSchemeMaxSignatureLength1_user(nullptr);
        static info::CryptoPP__PK_SignatureSchemector_PK_SignatureScheme2_ptr CryptoPP__PK_SignatureSchemector_PK_SignatureScheme2_next(nullptr);
        static info::CryptoPP__PK_SignatureSchemector_PK_SignatureScheme2_clbk CryptoPP__PK_SignatureSchemector_PK_SignatureScheme2_user(nullptr);
        static info::CryptoPP__PK_SignatureSchemector_PK_SignatureScheme3_ptr CryptoPP__PK_SignatureSchemector_PK_SignatureScheme3_next(nullptr);
        static info::CryptoPP__PK_SignatureSchemector_PK_SignatureScheme3_clbk CryptoPP__PK_SignatureSchemector_PK_SignatureScheme3_user(nullptr);
        static info::CryptoPP__PK_SignatureSchemeSignatureUpfront4_ptr CryptoPP__PK_SignatureSchemeSignatureUpfront4_next(nullptr);
        static info::CryptoPP__PK_SignatureSchemeSignatureUpfront4_clbk CryptoPP__PK_SignatureSchemeSignatureUpfront4_user(nullptr);
        static info::CryptoPP__PK_SignatureSchemedtor_PK_SignatureScheme5_ptr CryptoPP__PK_SignatureSchemedtor_PK_SignatureScheme5_next(nullptr);
        static info::CryptoPP__PK_SignatureSchemedtor_PK_SignatureScheme5_clbk CryptoPP__PK_SignatureSchemedtor_PK_SignatureScheme5_user(nullptr);
        
        static info::CryptoPP__PK_SignatureScheme__InvalidKeyLengthctor_InvalidKeyLength1_ptr CryptoPP__PK_SignatureScheme__InvalidKeyLengthctor_InvalidKeyLength1_next(nullptr);
        static info::CryptoPP__PK_SignatureScheme__InvalidKeyLengthctor_InvalidKeyLength1_clbk CryptoPP__PK_SignatureScheme__InvalidKeyLengthctor_InvalidKeyLength1_user(nullptr);
        static info::CryptoPP__PK_SignatureScheme__InvalidKeyLengthdtor_InvalidKeyLength2_ptr CryptoPP__PK_SignatureScheme__InvalidKeyLengthdtor_InvalidKeyLength2_next(nullptr);
        static info::CryptoPP__PK_SignatureScheme__InvalidKeyLengthdtor_InvalidKeyLength2_clbk CryptoPP__PK_SignatureScheme__InvalidKeyLengthdtor_InvalidKeyLength2_user(nullptr);
        
        static info::CryptoPP__PK_SignatureScheme__KeyTooShortctor_KeyTooShort1_ptr CryptoPP__PK_SignatureScheme__KeyTooShortctor_KeyTooShort1_next(nullptr);
        static info::CryptoPP__PK_SignatureScheme__KeyTooShortctor_KeyTooShort1_clbk CryptoPP__PK_SignatureScheme__KeyTooShortctor_KeyTooShort1_user(nullptr);
        static info::CryptoPP__PK_SignatureScheme__KeyTooShortctor_KeyTooShort2_ptr CryptoPP__PK_SignatureScheme__KeyTooShortctor_KeyTooShort2_next(nullptr);
        static info::CryptoPP__PK_SignatureScheme__KeyTooShortctor_KeyTooShort2_clbk CryptoPP__PK_SignatureScheme__KeyTooShortctor_KeyTooShort2_user(nullptr);
        static info::CryptoPP__PK_SignatureScheme__KeyTooShortdtor_KeyTooShort3_ptr CryptoPP__PK_SignatureScheme__KeyTooShortdtor_KeyTooShort3_next(nullptr);
        static info::CryptoPP__PK_SignatureScheme__KeyTooShortdtor_KeyTooShort3_clbk CryptoPP__PK_SignatureScheme__KeyTooShortdtor_KeyTooShort3_user(nullptr);
        
        static info::CryptoPP__PK_Signerctor_PK_Signer1_ptr CryptoPP__PK_Signerctor_PK_Signer1_next(nullptr);
        static info::CryptoPP__PK_Signerctor_PK_Signer1_clbk CryptoPP__PK_Signerctor_PK_Signer1_user(nullptr);
        static info::CryptoPP__PK_Signerctor_PK_Signer2_ptr CryptoPP__PK_Signerctor_PK_Signer2_next(nullptr);
        static info::CryptoPP__PK_Signerctor_PK_Signer2_clbk CryptoPP__PK_Signerctor_PK_Signer2_user(nullptr);
        static info::CryptoPP__PK_SignerSign3_ptr CryptoPP__PK_SignerSign3_next(nullptr);
        static info::CryptoPP__PK_SignerSign3_clbk CryptoPP__PK_SignerSign3_user(nullptr);
        static info::CryptoPP__PK_SignerSignMessage4_ptr CryptoPP__PK_SignerSignMessage4_next(nullptr);
        static info::CryptoPP__PK_SignerSignMessage4_clbk CryptoPP__PK_SignerSignMessage4_user(nullptr);
        static info::CryptoPP__PK_SignerSignMessageWithRecovery5_ptr CryptoPP__PK_SignerSignMessageWithRecovery5_next(nullptr);
        static info::CryptoPP__PK_SignerSignMessageWithRecovery5_clbk CryptoPP__PK_SignerSignMessageWithRecovery5_user(nullptr);
        static info::CryptoPP__PK_Signerdtor_PK_Signer6_ptr CryptoPP__PK_Signerdtor_PK_Signer6_next(nullptr);
        static info::CryptoPP__PK_Signerdtor_PK_Signer6_clbk CryptoPP__PK_Signerdtor_PK_Signer6_user(nullptr);
        
        static info::CryptoPP__PK_Verifierctor_PK_Verifier1_ptr CryptoPP__PK_Verifierctor_PK_Verifier1_next(nullptr);
        static info::CryptoPP__PK_Verifierctor_PK_Verifier1_clbk CryptoPP__PK_Verifierctor_PK_Verifier1_user(nullptr);
        static info::CryptoPP__PK_VerifierRecover2_ptr CryptoPP__PK_VerifierRecover2_next(nullptr);
        static info::CryptoPP__PK_VerifierRecover2_clbk CryptoPP__PK_VerifierRecover2_user(nullptr);
        static info::CryptoPP__PK_VerifierRecoverMessage3_ptr CryptoPP__PK_VerifierRecoverMessage3_next(nullptr);
        static info::CryptoPP__PK_VerifierRecoverMessage3_clbk CryptoPP__PK_VerifierRecoverMessage3_user(nullptr);
        static info::CryptoPP__PK_VerifierVerify4_ptr CryptoPP__PK_VerifierVerify4_next(nullptr);
        static info::CryptoPP__PK_VerifierVerify4_clbk CryptoPP__PK_VerifierVerify4_user(nullptr);
        static info::CryptoPP__PK_VerifierVerifyMessage5_ptr CryptoPP__PK_VerifierVerifyMessage5_next(nullptr);
        static info::CryptoPP__PK_VerifierVerifyMessage5_clbk CryptoPP__PK_VerifierVerifyMessage5_user(nullptr);
        static info::CryptoPP__PK_Verifierdtor_PK_Verifier6_ptr CryptoPP__PK_Verifierdtor_PK_Verifier6_next(nullptr);
        static info::CryptoPP__PK_Verifierdtor_PK_Verifier6_clbk CryptoPP__PK_Verifierdtor_PK_Verifier6_user(nullptr);
        
        static info::CryptoPP__VariableKeyLengthStaticGetValidKeyLength2_ptr CryptoPP__VariableKeyLengthStaticGetValidKeyLength2_next(nullptr);
        static info::CryptoPP__VariableKeyLengthStaticGetValidKeyLength2_clbk CryptoPP__VariableKeyLengthStaticGetValidKeyLength2_user(nullptr);
        
        static info::CryptoPP__SimpleKeyedTransformationGetAlgorithm2_ptr CryptoPP__SimpleKeyedTransformationGetAlgorithm2_next(nullptr);
        static info::CryptoPP__SimpleKeyedTransformationGetAlgorithm2_clbk CryptoPP__SimpleKeyedTransformationGetAlgorithm2_user(nullptr);
        static info::CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_ptr CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_next(nullptr);
        static info::CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_clbk CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_user(nullptr);
        static info::CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation6_ptr CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation6_next(nullptr);
        static info::CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation6_clbk CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation6_user(nullptr);
        
        static info::CryptoPP__HMAC_BaseAccessInnerHash1_ptr CryptoPP__HMAC_BaseAccessInnerHash1_next(nullptr);
        static info::CryptoPP__HMAC_BaseAccessInnerHash1_clbk CryptoPP__HMAC_BaseAccessInnerHash1_user(nullptr);
        static info::CryptoPP__HMAC_BaseAccessIpad2_ptr CryptoPP__HMAC_BaseAccessIpad2_next(nullptr);
        static info::CryptoPP__HMAC_BaseAccessIpad2_clbk CryptoPP__HMAC_BaseAccessIpad2_user(nullptr);
        static info::CryptoPP__HMAC_BaseAccessOpad3_ptr CryptoPP__HMAC_BaseAccessOpad3_next(nullptr);
        static info::CryptoPP__HMAC_BaseAccessOpad3_clbk CryptoPP__HMAC_BaseAccessOpad3_user(nullptr);
        static info::CryptoPP__HMAC_BaseDigestSize5_ptr CryptoPP__HMAC_BaseDigestSize5_next(nullptr);
        static info::CryptoPP__HMAC_BaseDigestSize5_clbk CryptoPP__HMAC_BaseDigestSize5_user(nullptr);
        static info::CryptoPP__HMAC_Basector_HMAC_Base7_ptr CryptoPP__HMAC_Basector_HMAC_Base7_next(nullptr);
        static info::CryptoPP__HMAC_Basector_HMAC_Base7_clbk CryptoPP__HMAC_Basector_HMAC_Base7_user(nullptr);
        static info::CryptoPP__HMAC_BaseKeyInnerHash8_ptr CryptoPP__HMAC_BaseKeyInnerHash8_next(nullptr);
        static info::CryptoPP__HMAC_BaseKeyInnerHash8_clbk CryptoPP__HMAC_BaseKeyInnerHash8_user(nullptr);
        static info::CryptoPP__HMAC_BaseOptimalBlockSize10_ptr CryptoPP__HMAC_BaseOptimalBlockSize10_next(nullptr);
        static info::CryptoPP__HMAC_BaseOptimalBlockSize10_clbk CryptoPP__HMAC_BaseOptimalBlockSize10_user(nullptr);
        static info::CryptoPP__HMAC_BaseRestart11_ptr CryptoPP__HMAC_BaseRestart11_next(nullptr);
        static info::CryptoPP__HMAC_BaseRestart11_clbk CryptoPP__HMAC_BaseRestart11_user(nullptr);
        static info::CryptoPP__HMAC_BaseTruncatedFinal12_ptr CryptoPP__HMAC_BaseTruncatedFinal12_next(nullptr);
        static info::CryptoPP__HMAC_BaseTruncatedFinal12_clbk CryptoPP__HMAC_BaseTruncatedFinal12_user(nullptr);
        static info::CryptoPP__HMAC_BaseUncheckedSetKey13_ptr CryptoPP__HMAC_BaseUncheckedSetKey13_next(nullptr);
        static info::CryptoPP__HMAC_BaseUncheckedSetKey13_clbk CryptoPP__HMAC_BaseUncheckedSetKey13_user(nullptr);
        static info::CryptoPP__HMAC_BaseUpdate14_ptr CryptoPP__HMAC_BaseUpdate14_next(nullptr);
        static info::CryptoPP__HMAC_BaseUpdate14_clbk CryptoPP__HMAC_BaseUpdate14_user(nullptr);
        static info::CryptoPP__HMAC_Basedtor_HMAC_Base16_ptr CryptoPP__HMAC_Basedtor_HMAC_Base16_next(nullptr);
        static info::CryptoPP__HMAC_Basedtor_HMAC_Base16_clbk CryptoPP__HMAC_Basedtor_HMAC_Base16_user(nullptr);
        
        static info::CryptoPP__Sinkctor_Sink1_ptr CryptoPP__Sinkctor_Sink1_next(nullptr);
        static info::CryptoPP__Sinkctor_Sink1_clbk CryptoPP__Sinkctor_Sink1_user(nullptr);
        static info::CryptoPP__Sinkdtor_Sink2_ptr CryptoPP__Sinkdtor_Sink2_next(nullptr);
        static info::CryptoPP__Sinkdtor_Sink2_clbk CryptoPP__Sinkdtor_Sink2_user(nullptr);
        
        static info::CryptoPP__InputRejectingChannelMessageSeriesEnd2_ptr CryptoPP__InputRejectingChannelMessageSeriesEnd2_next(nullptr);
        static info::CryptoPP__InputRejectingChannelMessageSeriesEnd2_clbk CryptoPP__InputRejectingChannelMessageSeriesEnd2_user(nullptr);
        static info::CryptoPP__InputRejectingChannelPut24_ptr CryptoPP__InputRejectingChannelPut24_next(nullptr);
        static info::CryptoPP__InputRejectingChannelPut24_clbk CryptoPP__InputRejectingChannelPut24_user(nullptr);
        static info::CryptoPP__InputRejectingctor_InputRejecting6_ptr CryptoPP__InputRejectingctor_InputRejecting6_next(nullptr);
        static info::CryptoPP__InputRejectingctor_InputRejecting6_clbk CryptoPP__InputRejectingctor_InputRejecting6_user(nullptr);
        static info::CryptoPP__InputRejectingIsolatedFlush8_ptr CryptoPP__InputRejectingIsolatedFlush8_next(nullptr);
        static info::CryptoPP__InputRejectingIsolatedFlush8_clbk CryptoPP__InputRejectingIsolatedFlush8_user(nullptr);
        static info::CryptoPP__InputRejectingIsolatedMessageSeriesEnd10_ptr CryptoPP__InputRejectingIsolatedMessageSeriesEnd10_next(nullptr);
        static info::CryptoPP__InputRejectingIsolatedMessageSeriesEnd10_clbk CryptoPP__InputRejectingIsolatedMessageSeriesEnd10_user(nullptr);
        static info::CryptoPP__InputRejectingPut212_ptr CryptoPP__InputRejectingPut212_next(nullptr);
        static info::CryptoPP__InputRejectingPut212_clbk CryptoPP__InputRejectingPut212_user(nullptr);
        static info::CryptoPP__InputRejectingdtor_InputRejecting14_ptr CryptoPP__InputRejectingdtor_InputRejecting14_next(nullptr);
        static info::CryptoPP__InputRejectingdtor_InputRejecting14_clbk CryptoPP__InputRejectingdtor_InputRejecting14_user(nullptr);
        
        static info::CryptoPP__InputRejecting__InputRejectedctor_InputRejected2_ptr CryptoPP__InputRejecting__InputRejectedctor_InputRejected2_next(nullptr);
        static info::CryptoPP__InputRejecting__InputRejectedctor_InputRejected2_clbk CryptoPP__InputRejecting__InputRejectedctor_InputRejected2_user(nullptr);
        static info::CryptoPP__InputRejecting__InputRejectedctor_InputRejected4_ptr CryptoPP__InputRejecting__InputRejectedctor_InputRejected4_next(nullptr);
        static info::CryptoPP__InputRejecting__InputRejectedctor_InputRejected4_clbk CryptoPP__InputRejecting__InputRejectedctor_InputRejected4_user(nullptr);
        static info::CryptoPP__InputRejecting__InputRejecteddtor_InputRejected9_ptr CryptoPP__InputRejecting__InputRejecteddtor_InputRejected9_next(nullptr);
        static info::CryptoPP__InputRejecting__InputRejecteddtor_InputRejected9_clbk CryptoPP__InputRejecting__InputRejecteddtor_InputRejected9_user(nullptr);
        
        static info::CryptoPP__StoreGetNextMessage1_ptr CryptoPP__StoreGetNextMessage1_next(nullptr);
        static info::CryptoPP__StoreGetNextMessage1_clbk CryptoPP__StoreGetNextMessage1_user(nullptr);
        static info::CryptoPP__StoreIsolatedInitialize3_ptr CryptoPP__StoreIsolatedInitialize3_next(nullptr);
        static info::CryptoPP__StoreIsolatedInitialize3_clbk CryptoPP__StoreIsolatedInitialize3_user(nullptr);
        static info::CryptoPP__StoreNumberOfMessages5_ptr CryptoPP__StoreNumberOfMessages5_next(nullptr);
        static info::CryptoPP__StoreNumberOfMessages5_clbk CryptoPP__StoreNumberOfMessages5_user(nullptr);
        static info::CryptoPP__Storector_Store7_ptr CryptoPP__Storector_Store7_next(nullptr);
        static info::CryptoPP__Storector_Store7_clbk CryptoPP__Storector_Store7_user(nullptr);
        static info::CryptoPP__Storedtor_Store9_ptr CryptoPP__Storedtor_Store9_next(nullptr);
        static info::CryptoPP__Storedtor_Store9_clbk CryptoPP__Storedtor_Store9_user(nullptr);
        
        static info::CryptoPP__ArraySinkctor_ArraySink1_ptr CryptoPP__ArraySinkctor_ArraySink1_next(nullptr);
        static info::CryptoPP__ArraySinkctor_ArraySink1_clbk CryptoPP__ArraySinkctor_ArraySink1_user(nullptr);
        static info::CryptoPP__ArraySinkAvailableSize2_ptr CryptoPP__ArraySinkAvailableSize2_next(nullptr);
        static info::CryptoPP__ArraySinkAvailableSize2_clbk CryptoPP__ArraySinkAvailableSize2_user(nullptr);
        static info::CryptoPP__ArraySinkCreatePutSpace3_ptr CryptoPP__ArraySinkCreatePutSpace3_next(nullptr);
        static info::CryptoPP__ArraySinkCreatePutSpace3_clbk CryptoPP__ArraySinkCreatePutSpace3_user(nullptr);
        static info::CryptoPP__ArraySinkIsolatedInitialize4_ptr CryptoPP__ArraySinkIsolatedInitialize4_next(nullptr);
        static info::CryptoPP__ArraySinkIsolatedInitialize4_clbk CryptoPP__ArraySinkIsolatedInitialize4_user(nullptr);
        static info::CryptoPP__ArraySinkPut25_ptr CryptoPP__ArraySinkPut25_next(nullptr);
        static info::CryptoPP__ArraySinkPut25_clbk CryptoPP__ArraySinkPut25_user(nullptr);
        static info::CryptoPP__ArraySinkTotalPutLength6_ptr CryptoPP__ArraySinkTotalPutLength6_next(nullptr);
        static info::CryptoPP__ArraySinkTotalPutLength6_clbk CryptoPP__ArraySinkTotalPutLength6_user(nullptr);
        static info::CryptoPP__ArraySinkdtor_ArraySink7_ptr CryptoPP__ArraySinkdtor_ArraySink7_next(nullptr);
        static info::CryptoPP__ArraySinkdtor_ArraySink7_clbk CryptoPP__ArraySinkdtor_ArraySink7_user(nullptr);
        
        static info::CryptoPP__StringStoreStoreInitialize1_ptr CryptoPP__StringStoreStoreInitialize1_next(nullptr);
        static info::CryptoPP__StringStoreStoreInitialize1_clbk CryptoPP__StringStoreStoreInitialize1_user(nullptr);
        static info::CryptoPP__StringStorector_StringStore2_ptr CryptoPP__StringStorector_StringStore2_next(nullptr);
        static info::CryptoPP__StringStorector_StringStore2_clbk CryptoPP__StringStorector_StringStore2_user(nullptr);
        static info::CryptoPP__StringStorector_StringStore3_ptr CryptoPP__StringStorector_StringStore3_next(nullptr);
        static info::CryptoPP__StringStorector_StringStore3_clbk CryptoPP__StringStorector_StringStore3_user(nullptr);
        static info::CryptoPP__StringStoredtor_StringStore4_ptr CryptoPP__StringStoredtor_StringStore4_next(nullptr);
        static info::CryptoPP__StringStoredtor_StringStore4_clbk CryptoPP__StringStoredtor_StringStore4_user(nullptr);
        
        static info::CryptoPP__GF2NTClone1_ptr CryptoPP__GF2NTClone1_next(nullptr);
        static info::CryptoPP__GF2NTClone1_clbk CryptoPP__GF2NTClone1_user(nullptr);
        static info::CryptoPP__GF2NTDEREncode2_ptr CryptoPP__GF2NTDEREncode2_next(nullptr);
        static info::CryptoPP__GF2NTDEREncode2_clbk CryptoPP__GF2NTDEREncode2_user(nullptr);
        static info::CryptoPP__GF2NTctor_GF2NT3_ptr CryptoPP__GF2NTctor_GF2NT3_next(nullptr);
        static info::CryptoPP__GF2NTctor_GF2NT3_clbk CryptoPP__GF2NTctor_GF2NT3_user(nullptr);
        static info::CryptoPP__GF2NTctor_GF2NT4_ptr CryptoPP__GF2NTctor_GF2NT4_next(nullptr);
        static info::CryptoPP__GF2NTctor_GF2NT4_clbk CryptoPP__GF2NTctor_GF2NT4_user(nullptr);
        static info::CryptoPP__GF2NTMultiplicativeInverse5_ptr CryptoPP__GF2NTMultiplicativeInverse5_next(nullptr);
        static info::CryptoPP__GF2NTMultiplicativeInverse5_clbk CryptoPP__GF2NTMultiplicativeInverse5_user(nullptr);
        static info::CryptoPP__GF2NTMultiply6_ptr CryptoPP__GF2NTMultiply6_next(nullptr);
        static info::CryptoPP__GF2NTMultiply6_clbk CryptoPP__GF2NTMultiply6_user(nullptr);
        static info::CryptoPP__GF2NTReduced7_ptr CryptoPP__GF2NTReduced7_next(nullptr);
        static info::CryptoPP__GF2NTReduced7_clbk CryptoPP__GF2NTReduced7_user(nullptr);
        static info::CryptoPP__GF2NTSquare8_ptr CryptoPP__GF2NTSquare8_next(nullptr);
        static info::CryptoPP__GF2NTSquare8_clbk CryptoPP__GF2NTSquare8_user(nullptr);
        static info::CryptoPP__GF2NTdtor_GF2NT9_ptr CryptoPP__GF2NTdtor_GF2NT9_next(nullptr);
        static info::CryptoPP__GF2NTdtor_GF2NT9_clbk CryptoPP__GF2NTdtor_GF2NT9_user(nullptr);
        
        static info::CryptoPP__MaskGeneratingFunctionctor_MaskGeneratingFunction1_ptr CryptoPP__MaskGeneratingFunctionctor_MaskGeneratingFunction1_next(nullptr);
        static info::CryptoPP__MaskGeneratingFunctionctor_MaskGeneratingFunction1_clbk CryptoPP__MaskGeneratingFunctionctor_MaskGeneratingFunction1_user(nullptr);
        static info::CryptoPP__MaskGeneratingFunctiondtor_MaskGeneratingFunction2_ptr CryptoPP__MaskGeneratingFunctiondtor_MaskGeneratingFunction2_next(nullptr);
        static info::CryptoPP__MaskGeneratingFunctiondtor_MaskGeneratingFunction2_clbk CryptoPP__MaskGeneratingFunctiondtor_MaskGeneratingFunction2_user(nullptr);
        
        static info::CryptoPP__P1363_MGF1GenerateAndMask1_ptr CryptoPP__P1363_MGF1GenerateAndMask1_next(nullptr);
        static info::CryptoPP__P1363_MGF1GenerateAndMask1_clbk CryptoPP__P1363_MGF1GenerateAndMask1_user(nullptr);
        static info::CryptoPP__P1363_MGF1ctor_P1363_MGF12_ptr CryptoPP__P1363_MGF1ctor_P1363_MGF12_next(nullptr);
        static info::CryptoPP__P1363_MGF1ctor_P1363_MGF12_clbk CryptoPP__P1363_MGF1ctor_P1363_MGF12_user(nullptr);
        static info::CryptoPP__P1363_MGF1StaticAlgorithmName3_ptr CryptoPP__P1363_MGF1StaticAlgorithmName3_next(nullptr);
        static info::CryptoPP__P1363_MGF1StaticAlgorithmName3_clbk CryptoPP__P1363_MGF1StaticAlgorithmName3_user(nullptr);
        static info::CryptoPP__P1363_MGF1dtor_P1363_MGF14_ptr CryptoPP__P1363_MGF1dtor_P1363_MGF14_next(nullptr);
        static info::CryptoPP__P1363_MGF1dtor_P1363_MGF14_clbk CryptoPP__P1363_MGF1dtor_P1363_MGF14_user(nullptr);
        
        static info::CryptoPP__CryptoMaterialctor_CryptoMaterial1_ptr CryptoPP__CryptoMaterialctor_CryptoMaterial1_next(nullptr);
        static info::CryptoPP__CryptoMaterialctor_CryptoMaterial1_clbk CryptoPP__CryptoMaterialctor_CryptoMaterial1_user(nullptr);
        static info::CryptoPP__CryptoMaterialctor_CryptoMaterial3_ptr CryptoPP__CryptoMaterialctor_CryptoMaterial3_next(nullptr);
        static info::CryptoPP__CryptoMaterialctor_CryptoMaterial3_clbk CryptoPP__CryptoMaterialctor_CryptoMaterial3_user(nullptr);
        static info::CryptoPP__CryptoMaterialDoQuickSanityCheck4_ptr CryptoPP__CryptoMaterialDoQuickSanityCheck4_next(nullptr);
        static info::CryptoPP__CryptoMaterialDoQuickSanityCheck4_clbk CryptoPP__CryptoMaterialDoQuickSanityCheck4_user(nullptr);
        static info::CryptoPP__CryptoMaterialLoad6_ptr CryptoPP__CryptoMaterialLoad6_next(nullptr);
        static info::CryptoPP__CryptoMaterialLoad6_clbk CryptoPP__CryptoMaterialLoad6_user(nullptr);
        static info::CryptoPP__CryptoMaterialLoadPrecomputation8_ptr CryptoPP__CryptoMaterialLoadPrecomputation8_next(nullptr);
        static info::CryptoPP__CryptoMaterialLoadPrecomputation8_clbk CryptoPP__CryptoMaterialLoadPrecomputation8_user(nullptr);
        static info::CryptoPP__CryptoMaterialPrecompute10_ptr CryptoPP__CryptoMaterialPrecompute10_next(nullptr);
        static info::CryptoPP__CryptoMaterialPrecompute10_clbk CryptoPP__CryptoMaterialPrecompute10_user(nullptr);
        static info::CryptoPP__CryptoMaterialSave12_ptr CryptoPP__CryptoMaterialSave12_next(nullptr);
        static info::CryptoPP__CryptoMaterialSave12_clbk CryptoPP__CryptoMaterialSave12_user(nullptr);
        static info::CryptoPP__CryptoMaterialSavePrecomputation14_ptr CryptoPP__CryptoMaterialSavePrecomputation14_next(nullptr);
        static info::CryptoPP__CryptoMaterialSavePrecomputation14_clbk CryptoPP__CryptoMaterialSavePrecomputation14_user(nullptr);
        static info::CryptoPP__CryptoMaterialSupportsPrecomputation16_ptr CryptoPP__CryptoMaterialSupportsPrecomputation16_next(nullptr);
        static info::CryptoPP__CryptoMaterialSupportsPrecomputation16_clbk CryptoPP__CryptoMaterialSupportsPrecomputation16_user(nullptr);
        static info::CryptoPP__CryptoMaterialThrowIfInvalid18_ptr CryptoPP__CryptoMaterialThrowIfInvalid18_next(nullptr);
        static info::CryptoPP__CryptoMaterialThrowIfInvalid18_clbk CryptoPP__CryptoMaterialThrowIfInvalid18_user(nullptr);
        static info::CryptoPP__CryptoMaterialdtor_CryptoMaterial22_ptr CryptoPP__CryptoMaterialdtor_CryptoMaterial22_next(nullptr);
        static info::CryptoPP__CryptoMaterialdtor_CryptoMaterial22_clbk CryptoPP__CryptoMaterialdtor_CryptoMaterial22_user(nullptr);
        
        static info::CryptoPP__CryptoMaterial__InvalidMaterialctor_InvalidMaterial2_ptr CryptoPP__CryptoMaterial__InvalidMaterialctor_InvalidMaterial2_next(nullptr);
        static info::CryptoPP__CryptoMaterial__InvalidMaterialctor_InvalidMaterial2_clbk CryptoPP__CryptoMaterial__InvalidMaterialctor_InvalidMaterial2_user(nullptr);
        static info::CryptoPP__CryptoMaterial__InvalidMaterialctor_InvalidMaterial4_ptr CryptoPP__CryptoMaterial__InvalidMaterialctor_InvalidMaterial4_next(nullptr);
        static info::CryptoPP__CryptoMaterial__InvalidMaterialctor_InvalidMaterial4_clbk CryptoPP__CryptoMaterial__InvalidMaterialctor_InvalidMaterial4_user(nullptr);
        static info::CryptoPP__CryptoMaterial__InvalidMaterialdtor_InvalidMaterial9_ptr CryptoPP__CryptoMaterial__InvalidMaterialdtor_InvalidMaterial9_next(nullptr);
        static info::CryptoPP__CryptoMaterial__InvalidMaterialdtor_InvalidMaterial9_clbk CryptoPP__CryptoMaterial__InvalidMaterialdtor_InvalidMaterial9_user(nullptr);
        
        static info::CryptoPP__SHA384InitState1_ptr CryptoPP__SHA384InitState1_next(nullptr);
        static info::CryptoPP__SHA384InitState1_clbk CryptoPP__SHA384InitState1_user(nullptr);
        
        static info::CryptoPP__DL_KeyAgreementAlgorithmctor_DL_KeyAgreementAlgorithm2_ptr CryptoPP__DL_KeyAgreementAlgorithmctor_DL_KeyAgreementAlgorithm2_next(nullptr);
        static info::CryptoPP__DL_KeyAgreementAlgorithmctor_DL_KeyAgreementAlgorithm2_clbk CryptoPP__DL_KeyAgreementAlgorithmctor_DL_KeyAgreementAlgorithm2_user(nullptr);
        
        static info::CryptoPP__OutputProxyCreatePutSpace1_ptr CryptoPP__OutputProxyCreatePutSpace1_next(nullptr);
        static info::CryptoPP__OutputProxyCreatePutSpace1_clbk CryptoPP__OutputProxyCreatePutSpace1_user(nullptr);
        static info::CryptoPP__OutputProxyFlush2_ptr CryptoPP__OutputProxyFlush2_next(nullptr);
        static info::CryptoPP__OutputProxyFlush2_clbk CryptoPP__OutputProxyFlush2_user(nullptr);
        static info::CryptoPP__OutputProxyInitialize3_ptr CryptoPP__OutputProxyInitialize3_next(nullptr);
        static info::CryptoPP__OutputProxyInitialize3_clbk CryptoPP__OutputProxyInitialize3_user(nullptr);
        static info::CryptoPP__OutputProxyMessageSeriesEnd4_ptr CryptoPP__OutputProxyMessageSeriesEnd4_next(nullptr);
        static info::CryptoPP__OutputProxyMessageSeriesEnd4_clbk CryptoPP__OutputProxyMessageSeriesEnd4_user(nullptr);
        static info::CryptoPP__OutputProxyctor_OutputProxy5_ptr CryptoPP__OutputProxyctor_OutputProxy5_next(nullptr);
        static info::CryptoPP__OutputProxyctor_OutputProxy5_clbk CryptoPP__OutputProxyctor_OutputProxy5_user(nullptr);
        static info::CryptoPP__OutputProxyPut26_ptr CryptoPP__OutputProxyPut26_next(nullptr);
        static info::CryptoPP__OutputProxyPut26_clbk CryptoPP__OutputProxyPut26_user(nullptr);
        static info::CryptoPP__OutputProxyPutModifiable27_ptr CryptoPP__OutputProxyPutModifiable27_next(nullptr);
        static info::CryptoPP__OutputProxyPutModifiable27_clbk CryptoPP__OutputProxyPutModifiable27_user(nullptr);
        static info::CryptoPP__OutputProxydtor_OutputProxy8_ptr CryptoPP__OutputProxydtor_OutputProxy8_next(nullptr);
        static info::CryptoPP__OutputProxydtor_OutputProxy8_clbk CryptoPP__OutputProxydtor_OutputProxy8_user(nullptr);
        
        static info::CryptoPP__InvalidDataFormatctor_InvalidDataFormat2_ptr CryptoPP__InvalidDataFormatctor_InvalidDataFormat2_next(nullptr);
        static info::CryptoPP__InvalidDataFormatctor_InvalidDataFormat2_clbk CryptoPP__InvalidDataFormatctor_InvalidDataFormat2_user(nullptr);
        static info::CryptoPP__InvalidDataFormatctor_InvalidDataFormat4_ptr CryptoPP__InvalidDataFormatctor_InvalidDataFormat4_next(nullptr);
        static info::CryptoPP__InvalidDataFormatctor_InvalidDataFormat4_clbk CryptoPP__InvalidDataFormatctor_InvalidDataFormat4_user(nullptr);
        static info::CryptoPP__InvalidDataFormatdtor_InvalidDataFormat9_ptr CryptoPP__InvalidDataFormatdtor_InvalidDataFormat9_next(nullptr);
        static info::CryptoPP__InvalidDataFormatdtor_InvalidDataFormat9_clbk CryptoPP__InvalidDataFormatdtor_InvalidDataFormat9_user(nullptr);
        
        static info::CryptoPP__DL_BadElementctor_DL_BadElement2_ptr CryptoPP__DL_BadElementctor_DL_BadElement2_next(nullptr);
        static info::CryptoPP__DL_BadElementctor_DL_BadElement2_clbk CryptoPP__DL_BadElementctor_DL_BadElement2_user(nullptr);
        static info::CryptoPP__DL_BadElementctor_DL_BadElement4_ptr CryptoPP__DL_BadElementctor_DL_BadElement4_next(nullptr);
        static info::CryptoPP__DL_BadElementctor_DL_BadElement4_clbk CryptoPP__DL_BadElementctor_DL_BadElement4_user(nullptr);
        static info::CryptoPP__DL_BadElementdtor_DL_BadElement9_ptr CryptoPP__DL_BadElementdtor_DL_BadElement9_next(nullptr);
        static info::CryptoPP__DL_BadElementdtor_DL_BadElement9_clbk CryptoPP__DL_BadElementdtor_DL_BadElement9_user(nullptr);
        
        static info::CryptoPP__AdditiveCipherAbstractPolicyctor_AdditiveCipherAbstractPolicy1_ptr CryptoPP__AdditiveCipherAbstractPolicyctor_AdditiveCipherAbstractPolicy1_next(nullptr);
        static info::CryptoPP__AdditiveCipherAbstractPolicyctor_AdditiveCipherAbstractPolicy1_clbk CryptoPP__AdditiveCipherAbstractPolicyctor_AdditiveCipherAbstractPolicy1_user(nullptr);
        static info::CryptoPP__AdditiveCipherAbstractPolicyCanOperateKeystream2_ptr CryptoPP__AdditiveCipherAbstractPolicyCanOperateKeystream2_next(nullptr);
        static info::CryptoPP__AdditiveCipherAbstractPolicyCanOperateKeystream2_clbk CryptoPP__AdditiveCipherAbstractPolicyCanOperateKeystream2_user(nullptr);
        static info::CryptoPP__AdditiveCipherAbstractPolicyGetOptimalBlockSize3_ptr CryptoPP__AdditiveCipherAbstractPolicyGetOptimalBlockSize3_next(nullptr);
        static info::CryptoPP__AdditiveCipherAbstractPolicyGetOptimalBlockSize3_clbk CryptoPP__AdditiveCipherAbstractPolicyGetOptimalBlockSize3_user(nullptr);
        static info::CryptoPP__AdditiveCipherAbstractPolicyOperateKeystream4_ptr CryptoPP__AdditiveCipherAbstractPolicyOperateKeystream4_next(nullptr);
        static info::CryptoPP__AdditiveCipherAbstractPolicyOperateKeystream4_clbk CryptoPP__AdditiveCipherAbstractPolicyOperateKeystream4_user(nullptr);
        static info::CryptoPP__AdditiveCipherAbstractPolicySeekToIteration5_ptr CryptoPP__AdditiveCipherAbstractPolicySeekToIteration5_next(nullptr);
        static info::CryptoPP__AdditiveCipherAbstractPolicySeekToIteration5_clbk CryptoPP__AdditiveCipherAbstractPolicySeekToIteration5_user(nullptr);
        static info::CryptoPP__AdditiveCipherAbstractPolicydtor_AdditiveCipherAbstractPolicy6_ptr CryptoPP__AdditiveCipherAbstractPolicydtor_AdditiveCipherAbstractPolicy6_next(nullptr);
        static info::CryptoPP__AdditiveCipherAbstractPolicydtor_AdditiveCipherAbstractPolicy6_clbk CryptoPP__AdditiveCipherAbstractPolicydtor_AdditiveCipherAbstractPolicy6_user(nullptr);
        
        static info::CryptoPP__MeterFilterAddRangeToSkip1_ptr CryptoPP__MeterFilterAddRangeToSkip1_next(nullptr);
        static info::CryptoPP__MeterFilterAddRangeToSkip1_clbk CryptoPP__MeterFilterAddRangeToSkip1_user(nullptr);
        static info::CryptoPP__MeterFilterIsolatedMessageSeriesEnd2_ptr CryptoPP__MeterFilterIsolatedMessageSeriesEnd2_next(nullptr);
        static info::CryptoPP__MeterFilterIsolatedMessageSeriesEnd2_clbk CryptoPP__MeterFilterIsolatedMessageSeriesEnd2_user(nullptr);
        static info::CryptoPP__MeterFilterPut23_ptr CryptoPP__MeterFilterPut23_next(nullptr);
        static info::CryptoPP__MeterFilterPut23_clbk CryptoPP__MeterFilterPut23_user(nullptr);
        static info::CryptoPP__MeterFilterPutMaybeModifiable4_ptr CryptoPP__MeterFilterPutMaybeModifiable4_next(nullptr);
        static info::CryptoPP__MeterFilterPutMaybeModifiable4_clbk CryptoPP__MeterFilterPutMaybeModifiable4_user(nullptr);
        static info::CryptoPP__MeterFilterPutModifiable25_ptr CryptoPP__MeterFilterPutModifiable25_next(nullptr);
        static info::CryptoPP__MeterFilterPutModifiable25_clbk CryptoPP__MeterFilterPutModifiable25_user(nullptr);
        static info::CryptoPP__MeterFilterResetMeter6_ptr CryptoPP__MeterFilterResetMeter6_next(nullptr);
        static info::CryptoPP__MeterFilterResetMeter6_clbk CryptoPP__MeterFilterResetMeter6_user(nullptr);
        
        static info::CryptoPP__RandomNumberSinkIsolatedInitialize1_ptr CryptoPP__RandomNumberSinkIsolatedInitialize1_next(nullptr);
        static info::CryptoPP__RandomNumberSinkIsolatedInitialize1_clbk CryptoPP__RandomNumberSinkIsolatedInitialize1_user(nullptr);
        static info::CryptoPP__RandomNumberSinkPut22_ptr CryptoPP__RandomNumberSinkPut22_next(nullptr);
        static info::CryptoPP__RandomNumberSinkPut22_clbk CryptoPP__RandomNumberSinkPut22_user(nullptr);
        
        static info::CryptoPP__FilterWithBufferedInputctor_FilterWithBufferedInput1_ptr CryptoPP__FilterWithBufferedInputctor_FilterWithBufferedInput1_next(nullptr);
        static info::CryptoPP__FilterWithBufferedInputctor_FilterWithBufferedInput1_clbk CryptoPP__FilterWithBufferedInputctor_FilterWithBufferedInput1_user(nullptr);
        static info::CryptoPP__FilterWithBufferedInputctor_FilterWithBufferedInput2_ptr CryptoPP__FilterWithBufferedInputctor_FilterWithBufferedInput2_next(nullptr);
        static info::CryptoPP__FilterWithBufferedInputctor_FilterWithBufferedInput2_clbk CryptoPP__FilterWithBufferedInputctor_FilterWithBufferedInput2_user(nullptr);
        static info::CryptoPP__FilterWithBufferedInputFlushDerived3_ptr CryptoPP__FilterWithBufferedInputFlushDerived3_next(nullptr);
        static info::CryptoPP__FilterWithBufferedInputFlushDerived3_clbk CryptoPP__FilterWithBufferedInputFlushDerived3_user(nullptr);
        static info::CryptoPP__FilterWithBufferedInputForceNextPut4_ptr CryptoPP__FilterWithBufferedInputForceNextPut4_next(nullptr);
        static info::CryptoPP__FilterWithBufferedInputForceNextPut4_clbk CryptoPP__FilterWithBufferedInputForceNextPut4_user(nullptr);
        static info::CryptoPP__FilterWithBufferedInputInitializeDerived5_ptr CryptoPP__FilterWithBufferedInputInitializeDerived5_next(nullptr);
        static info::CryptoPP__FilterWithBufferedInputInitializeDerived5_clbk CryptoPP__FilterWithBufferedInputInitializeDerived5_user(nullptr);
        static info::CryptoPP__FilterWithBufferedInputInitializeDerivedAndReturnNewSizes6_ptr CryptoPP__FilterWithBufferedInputInitializeDerivedAndReturnNewSizes6_next(nullptr);
        static info::CryptoPP__FilterWithBufferedInputInitializeDerivedAndReturnNewSizes6_clbk CryptoPP__FilterWithBufferedInputInitializeDerivedAndReturnNewSizes6_user(nullptr);
        static info::CryptoPP__FilterWithBufferedInputIsolatedFlush7_ptr CryptoPP__FilterWithBufferedInputIsolatedFlush7_next(nullptr);
        static info::CryptoPP__FilterWithBufferedInputIsolatedFlush7_clbk CryptoPP__FilterWithBufferedInputIsolatedFlush7_user(nullptr);
        static info::CryptoPP__FilterWithBufferedInputIsolatedInitialize8_ptr CryptoPP__FilterWithBufferedInputIsolatedInitialize8_next(nullptr);
        static info::CryptoPP__FilterWithBufferedInputIsolatedInitialize8_clbk CryptoPP__FilterWithBufferedInputIsolatedInitialize8_user(nullptr);
        static info::CryptoPP__FilterWithBufferedInputNextPut9_ptr CryptoPP__FilterWithBufferedInputNextPut9_next(nullptr);
        static info::CryptoPP__FilterWithBufferedInputNextPut9_clbk CryptoPP__FilterWithBufferedInputNextPut9_user(nullptr);
        static info::CryptoPP__FilterWithBufferedInputNextPutMaybeModifiable10_ptr CryptoPP__FilterWithBufferedInputNextPutMaybeModifiable10_next(nullptr);
        static info::CryptoPP__FilterWithBufferedInputNextPutMaybeModifiable10_clbk CryptoPP__FilterWithBufferedInputNextPutMaybeModifiable10_user(nullptr);
        static info::CryptoPP__FilterWithBufferedInputNextPutModifiable11_ptr CryptoPP__FilterWithBufferedInputNextPutModifiable11_next(nullptr);
        static info::CryptoPP__FilterWithBufferedInputNextPutModifiable11_clbk CryptoPP__FilterWithBufferedInputNextPutModifiable11_user(nullptr);
        static info::CryptoPP__FilterWithBufferedInputNextPutMultiple12_ptr CryptoPP__FilterWithBufferedInputNextPutMultiple12_next(nullptr);
        static info::CryptoPP__FilterWithBufferedInputNextPutMultiple12_clbk CryptoPP__FilterWithBufferedInputNextPutMultiple12_user(nullptr);
        static info::CryptoPP__FilterWithBufferedInputNextPutSingle13_ptr CryptoPP__FilterWithBufferedInputNextPutSingle13_next(nullptr);
        static info::CryptoPP__FilterWithBufferedInputNextPutSingle13_clbk CryptoPP__FilterWithBufferedInputNextPutSingle13_user(nullptr);
        static info::CryptoPP__FilterWithBufferedInputPut214_ptr CryptoPP__FilterWithBufferedInputPut214_next(nullptr);
        static info::CryptoPP__FilterWithBufferedInputPut214_clbk CryptoPP__FilterWithBufferedInputPut214_user(nullptr);
        static info::CryptoPP__FilterWithBufferedInputPutMaybeModifiable15_ptr CryptoPP__FilterWithBufferedInputPutMaybeModifiable15_next(nullptr);
        static info::CryptoPP__FilterWithBufferedInputPutMaybeModifiable15_clbk CryptoPP__FilterWithBufferedInputPutMaybeModifiable15_user(nullptr);
        static info::CryptoPP__FilterWithBufferedInputPutModifiable216_ptr CryptoPP__FilterWithBufferedInputPutModifiable216_next(nullptr);
        static info::CryptoPP__FilterWithBufferedInputPutModifiable216_clbk CryptoPP__FilterWithBufferedInputPutModifiable216_user(nullptr);
        static info::CryptoPP__FilterWithBufferedInputdtor_FilterWithBufferedInput17_ptr CryptoPP__FilterWithBufferedInputdtor_FilterWithBufferedInput17_next(nullptr);
        static info::CryptoPP__FilterWithBufferedInputdtor_FilterWithBufferedInput17_clbk CryptoPP__FilterWithBufferedInputdtor_FilterWithBufferedInput17_user(nullptr);
        
        static info::CryptoPP__FilterWithBufferedInput__BlockQueuector_BlockQueue1_ptr CryptoPP__FilterWithBufferedInput__BlockQueuector_BlockQueue1_next(nullptr);
        static info::CryptoPP__FilterWithBufferedInput__BlockQueuector_BlockQueue1_clbk CryptoPP__FilterWithBufferedInput__BlockQueuector_BlockQueue1_user(nullptr);
        static info::CryptoPP__FilterWithBufferedInput__BlockQueueCurrentSize2_ptr CryptoPP__FilterWithBufferedInput__BlockQueueCurrentSize2_next(nullptr);
        static info::CryptoPP__FilterWithBufferedInput__BlockQueueCurrentSize2_clbk CryptoPP__FilterWithBufferedInput__BlockQueueCurrentSize2_user(nullptr);
        static info::CryptoPP__FilterWithBufferedInput__BlockQueueGetAll3_ptr CryptoPP__FilterWithBufferedInput__BlockQueueGetAll3_next(nullptr);
        static info::CryptoPP__FilterWithBufferedInput__BlockQueueGetAll3_clbk CryptoPP__FilterWithBufferedInput__BlockQueueGetAll3_user(nullptr);
        static info::CryptoPP__FilterWithBufferedInput__BlockQueueGetBlock4_ptr CryptoPP__FilterWithBufferedInput__BlockQueueGetBlock4_next(nullptr);
        static info::CryptoPP__FilterWithBufferedInput__BlockQueueGetBlock4_clbk CryptoPP__FilterWithBufferedInput__BlockQueueGetBlock4_user(nullptr);
        static info::CryptoPP__FilterWithBufferedInput__BlockQueueGetContigousBlocks5_ptr CryptoPP__FilterWithBufferedInput__BlockQueueGetContigousBlocks5_next(nullptr);
        static info::CryptoPP__FilterWithBufferedInput__BlockQueueGetContigousBlocks5_clbk CryptoPP__FilterWithBufferedInput__BlockQueueGetContigousBlocks5_user(nullptr);
        static info::CryptoPP__FilterWithBufferedInput__BlockQueuePut6_ptr CryptoPP__FilterWithBufferedInput__BlockQueuePut6_next(nullptr);
        static info::CryptoPP__FilterWithBufferedInput__BlockQueuePut6_clbk CryptoPP__FilterWithBufferedInput__BlockQueuePut6_user(nullptr);
        static info::CryptoPP__FilterWithBufferedInput__BlockQueueResetQueue7_ptr CryptoPP__FilterWithBufferedInput__BlockQueueResetQueue7_next(nullptr);
        static info::CryptoPP__FilterWithBufferedInput__BlockQueueResetQueue7_clbk CryptoPP__FilterWithBufferedInput__BlockQueueResetQueue7_user(nullptr);
        static info::CryptoPP__FilterWithBufferedInput__BlockQueuedtor_BlockQueue8_ptr CryptoPP__FilterWithBufferedInput__BlockQueuedtor_BlockQueue8_next(nullptr);
        static info::CryptoPP__FilterWithBufferedInput__BlockQueuedtor_BlockQueue8_clbk CryptoPP__FilterWithBufferedInput__BlockQueuedtor_BlockQueue8_user(nullptr);
        
        static info::CryptoPP__ProxyFilterIsolatedFlush1_ptr CryptoPP__ProxyFilterIsolatedFlush1_next(nullptr);
        static info::CryptoPP__ProxyFilterIsolatedFlush1_clbk CryptoPP__ProxyFilterIsolatedFlush1_user(nullptr);
        static info::CryptoPP__ProxyFilterNextPutModifiable2_ptr CryptoPP__ProxyFilterNextPutModifiable2_next(nullptr);
        static info::CryptoPP__ProxyFilterNextPutModifiable2_clbk CryptoPP__ProxyFilterNextPutModifiable2_user(nullptr);
        static info::CryptoPP__ProxyFilterNextPutMultiple3_ptr CryptoPP__ProxyFilterNextPutMultiple3_next(nullptr);
        static info::CryptoPP__ProxyFilterNextPutMultiple3_clbk CryptoPP__ProxyFilterNextPutMultiple3_user(nullptr);
        static info::CryptoPP__ProxyFilterctor_ProxyFilter4_ptr CryptoPP__ProxyFilterctor_ProxyFilter4_next(nullptr);
        static info::CryptoPP__ProxyFilterctor_ProxyFilter4_clbk CryptoPP__ProxyFilterctor_ProxyFilter4_user(nullptr);
        static info::CryptoPP__ProxyFilterSetFilter5_ptr CryptoPP__ProxyFilterSetFilter5_next(nullptr);
        static info::CryptoPP__ProxyFilterSetFilter5_clbk CryptoPP__ProxyFilterSetFilter5_user(nullptr);
        static info::CryptoPP__ProxyFilterdtor_ProxyFilter6_ptr CryptoPP__ProxyFilterdtor_ProxyFilter6_next(nullptr);
        static info::CryptoPP__ProxyFilterdtor_ProxyFilter6_clbk CryptoPP__ProxyFilterdtor_ProxyFilter6_user(nullptr);
        
        static info::CryptoPP__CFB_CipherAbstractPolicyctor_CFB_CipherAbstractPolicy1_ptr CryptoPP__CFB_CipherAbstractPolicyctor_CFB_CipherAbstractPolicy1_next(nullptr);
        static info::CryptoPP__CFB_CipherAbstractPolicyctor_CFB_CipherAbstractPolicy1_clbk CryptoPP__CFB_CipherAbstractPolicyctor_CFB_CipherAbstractPolicy1_user(nullptr);
        static info::CryptoPP__CFB_CipherAbstractPolicyCanIterate2_ptr CryptoPP__CFB_CipherAbstractPolicyCanIterate2_next(nullptr);
        static info::CryptoPP__CFB_CipherAbstractPolicyCanIterate2_clbk CryptoPP__CFB_CipherAbstractPolicyCanIterate2_user(nullptr);
        static info::CryptoPP__CFB_CipherAbstractPolicyIterate3_ptr CryptoPP__CFB_CipherAbstractPolicyIterate3_next(nullptr);
        static info::CryptoPP__CFB_CipherAbstractPolicyIterate3_clbk CryptoPP__CFB_CipherAbstractPolicyIterate3_user(nullptr);
        static info::CryptoPP__CFB_CipherAbstractPolicydtor_CFB_CipherAbstractPolicy4_ptr CryptoPP__CFB_CipherAbstractPolicydtor_CFB_CipherAbstractPolicy4_next(nullptr);
        static info::CryptoPP__CFB_CipherAbstractPolicydtor_CFB_CipherAbstractPolicy4_clbk CryptoPP__CFB_CipherAbstractPolicydtor_CFB_CipherAbstractPolicy4_user(nullptr);
        
        static info::CryptoPP__CFB_ModePolicyctor_CFB_ModePolicy1_ptr CryptoPP__CFB_ModePolicyctor_CFB_ModePolicy1_next(nullptr);
        static info::CryptoPP__CFB_ModePolicyctor_CFB_ModePolicy1_clbk CryptoPP__CFB_ModePolicyctor_CFB_ModePolicy1_user(nullptr);
        static info::CryptoPP__CFB_ModePolicyCipherResynchronize2_ptr CryptoPP__CFB_ModePolicyCipherResynchronize2_next(nullptr);
        static info::CryptoPP__CFB_ModePolicyCipherResynchronize2_clbk CryptoPP__CFB_ModePolicyCipherResynchronize2_user(nullptr);
        static info::CryptoPP__CFB_ModePolicyGetBytesPerIteration3_ptr CryptoPP__CFB_ModePolicyGetBytesPerIteration3_next(nullptr);
        static info::CryptoPP__CFB_ModePolicyGetBytesPerIteration3_clbk CryptoPP__CFB_ModePolicyGetBytesPerIteration3_user(nullptr);
        static info::CryptoPP__CFB_ModePolicyGetRegisterBegin4_ptr CryptoPP__CFB_ModePolicyGetRegisterBegin4_next(nullptr);
        static info::CryptoPP__CFB_ModePolicyGetRegisterBegin4_clbk CryptoPP__CFB_ModePolicyGetRegisterBegin4_user(nullptr);
        static info::CryptoPP__CFB_ModePolicyIVRequirement5_ptr CryptoPP__CFB_ModePolicyIVRequirement5_next(nullptr);
        static info::CryptoPP__CFB_ModePolicyIVRequirement5_clbk CryptoPP__CFB_ModePolicyIVRequirement5_user(nullptr);
        static info::CryptoPP__CFB_ModePolicyResizeBuffers6_ptr CryptoPP__CFB_ModePolicyResizeBuffers6_next(nullptr);
        static info::CryptoPP__CFB_ModePolicyResizeBuffers6_clbk CryptoPP__CFB_ModePolicyResizeBuffers6_user(nullptr);
        static info::CryptoPP__CFB_ModePolicySetFeedbackSize7_ptr CryptoPP__CFB_ModePolicySetFeedbackSize7_next(nullptr);
        static info::CryptoPP__CFB_ModePolicySetFeedbackSize7_clbk CryptoPP__CFB_ModePolicySetFeedbackSize7_user(nullptr);
        static info::CryptoPP__CFB_ModePolicyStaticAlgorithmName8_ptr CryptoPP__CFB_ModePolicyStaticAlgorithmName8_next(nullptr);
        static info::CryptoPP__CFB_ModePolicyStaticAlgorithmName8_clbk CryptoPP__CFB_ModePolicyStaticAlgorithmName8_user(nullptr);
        static info::CryptoPP__CFB_ModePolicyTransformRegister9_ptr CryptoPP__CFB_ModePolicyTransformRegister9_next(nullptr);
        static info::CryptoPP__CFB_ModePolicyTransformRegister9_clbk CryptoPP__CFB_ModePolicyTransformRegister9_user(nullptr);
        static info::CryptoPP__CFB_ModePolicydtor_CFB_ModePolicy10_ptr CryptoPP__CFB_ModePolicydtor_CFB_ModePolicy10_next(nullptr);
        static info::CryptoPP__CFB_ModePolicydtor_CFB_ModePolicy10_clbk CryptoPP__CFB_ModePolicydtor_CFB_ModePolicy10_user(nullptr);
        
        static info::CryptoPP__PK_SignatureMessageEncodingMethodAllowNonrecoverablePart1_ptr CryptoPP__PK_SignatureMessageEncodingMethodAllowNonrecoverablePart1_next(nullptr);
        static info::CryptoPP__PK_SignatureMessageEncodingMethodAllowNonrecoverablePart1_clbk CryptoPP__PK_SignatureMessageEncodingMethodAllowNonrecoverablePart1_user(nullptr);
        static info::CryptoPP__PK_SignatureMessageEncodingMethodMaxRecoverableLength2_ptr CryptoPP__PK_SignatureMessageEncodingMethodMaxRecoverableLength2_next(nullptr);
        static info::CryptoPP__PK_SignatureMessageEncodingMethodMaxRecoverableLength2_clbk CryptoPP__PK_SignatureMessageEncodingMethodMaxRecoverableLength2_user(nullptr);
        static info::CryptoPP__PK_SignatureMessageEncodingMethodMinRepresentativeBitLength3_ptr CryptoPP__PK_SignatureMessageEncodingMethodMinRepresentativeBitLength3_next(nullptr);
        static info::CryptoPP__PK_SignatureMessageEncodingMethodMinRepresentativeBitLength3_clbk CryptoPP__PK_SignatureMessageEncodingMethodMinRepresentativeBitLength3_user(nullptr);
        static info::CryptoPP__PK_SignatureMessageEncodingMethodctor_PK_SignatureMessageEncodingMethod4_ptr CryptoPP__PK_SignatureMessageEncodingMethodctor_PK_SignatureMessageEncodingMethod4_next(nullptr);
        static info::CryptoPP__PK_SignatureMessageEncodingMethodctor_PK_SignatureMessageEncodingMethod4_clbk CryptoPP__PK_SignatureMessageEncodingMethodctor_PK_SignatureMessageEncodingMethod4_user(nullptr);
        static info::CryptoPP__PK_SignatureMessageEncodingMethodProcessSemisignature5_ptr CryptoPP__PK_SignatureMessageEncodingMethodProcessSemisignature5_next(nullptr);
        static info::CryptoPP__PK_SignatureMessageEncodingMethodProcessSemisignature5_clbk CryptoPP__PK_SignatureMessageEncodingMethodProcessSemisignature5_user(nullptr);
        static info::CryptoPP__PK_SignatureMessageEncodingMethodRecoverablePartFirst6_ptr CryptoPP__PK_SignatureMessageEncodingMethodRecoverablePartFirst6_next(nullptr);
        static info::CryptoPP__PK_SignatureMessageEncodingMethodRecoverablePartFirst6_clbk CryptoPP__PK_SignatureMessageEncodingMethodRecoverablePartFirst6_user(nullptr);
        static info::CryptoPP__PK_SignatureMessageEncodingMethoddtor_PK_SignatureMessageEncodingMethod7_ptr CryptoPP__PK_SignatureMessageEncodingMethoddtor_PK_SignatureMessageEncodingMethod7_next(nullptr);
        static info::CryptoPP__PK_SignatureMessageEncodingMethoddtor_PK_SignatureMessageEncodingMethod7_clbk CryptoPP__PK_SignatureMessageEncodingMethoddtor_PK_SignatureMessageEncodingMethod7_user(nullptr);
        
        static info::CryptoPP__DecodingResultctor_DecodingResult2_ptr CryptoPP__DecodingResultctor_DecodingResult2_next(nullptr);
        static info::CryptoPP__DecodingResultctor_DecodingResult2_clbk CryptoPP__DecodingResultctor_DecodingResult2_user(nullptr);
        static info::CryptoPP__DecodingResultctor_DecodingResult4_ptr CryptoPP__DecodingResultctor_DecodingResult4_next(nullptr);
        static info::CryptoPP__DecodingResultctor_DecodingResult4_clbk CryptoPP__DecodingResultctor_DecodingResult4_user(nullptr);
        
        static info::CryptoPP__LazyPutterctor_LazyPutter1_ptr CryptoPP__LazyPutterctor_LazyPutter1_next(nullptr);
        static info::CryptoPP__LazyPutterctor_LazyPutter1_clbk CryptoPP__LazyPutterctor_LazyPutter1_user(nullptr);
        static info::CryptoPP__LazyPutterdtor_LazyPutter2_ptr CryptoPP__LazyPutterdtor_LazyPutter2_next(nullptr);
        static info::CryptoPP__LazyPutterdtor_LazyPutter2_clbk CryptoPP__LazyPutterdtor_LazyPutter2_user(nullptr);
        
        static info::CryptoPP__AlgorithmParametersBasector_AlgorithmParametersBase2_ptr CryptoPP__AlgorithmParametersBasector_AlgorithmParametersBase2_next(nullptr);
        static info::CryptoPP__AlgorithmParametersBasector_AlgorithmParametersBase2_clbk CryptoPP__AlgorithmParametersBasector_AlgorithmParametersBase2_user(nullptr);
        static info::CryptoPP__AlgorithmParametersBasector_AlgorithmParametersBase4_ptr CryptoPP__AlgorithmParametersBasector_AlgorithmParametersBase4_next(nullptr);
        static info::CryptoPP__AlgorithmParametersBasector_AlgorithmParametersBase4_clbk CryptoPP__AlgorithmParametersBasector_AlgorithmParametersBase4_user(nullptr);
        static info::CryptoPP__AlgorithmParametersBaseGetVoidValue5_ptr CryptoPP__AlgorithmParametersBaseGetVoidValue5_next(nullptr);
        static info::CryptoPP__AlgorithmParametersBaseGetVoidValue5_clbk CryptoPP__AlgorithmParametersBaseGetVoidValue5_user(nullptr);
        static info::CryptoPP__AlgorithmParametersBasedtor_AlgorithmParametersBase10_ptr CryptoPP__AlgorithmParametersBasedtor_AlgorithmParametersBase10_next(nullptr);
        static info::CryptoPP__AlgorithmParametersBasedtor_AlgorithmParametersBase10_clbk CryptoPP__AlgorithmParametersBasedtor_AlgorithmParametersBase10_user(nullptr);
        
        static info::CryptoPP__AlgorithmParametersBase__ParameterNotUsedctor_ParameterNotUsed2_ptr CryptoPP__AlgorithmParametersBase__ParameterNotUsedctor_ParameterNotUsed2_next(nullptr);
        static info::CryptoPP__AlgorithmParametersBase__ParameterNotUsedctor_ParameterNotUsed2_clbk CryptoPP__AlgorithmParametersBase__ParameterNotUsedctor_ParameterNotUsed2_user(nullptr);
        static info::CryptoPP__AlgorithmParametersBase__ParameterNotUsedctor_ParameterNotUsed4_ptr CryptoPP__AlgorithmParametersBase__ParameterNotUsedctor_ParameterNotUsed4_next(nullptr);
        static info::CryptoPP__AlgorithmParametersBase__ParameterNotUsedctor_ParameterNotUsed4_clbk CryptoPP__AlgorithmParametersBase__ParameterNotUsedctor_ParameterNotUsed4_user(nullptr);
        static info::CryptoPP__AlgorithmParametersBase__ParameterNotUseddtor_ParameterNotUsed9_ptr CryptoPP__AlgorithmParametersBase__ParameterNotUseddtor_ParameterNotUsed9_next(nullptr);
        static info::CryptoPP__AlgorithmParametersBase__ParameterNotUseddtor_ParameterNotUsed9_clbk CryptoPP__AlgorithmParametersBase__ParameterNotUseddtor_ParameterNotUsed9_user(nullptr);
        
        static info::CryptoPP__NullNameValuePairsGetVoidValue2_ptr CryptoPP__NullNameValuePairsGetVoidValue2_next(nullptr);
        static info::CryptoPP__NullNameValuePairsGetVoidValue2_clbk CryptoPP__NullNameValuePairsGetVoidValue2_user(nullptr);
        static info::CryptoPP__NullNameValuePairsctor_NullNameValuePairs4_ptr CryptoPP__NullNameValuePairsctor_NullNameValuePairs4_next(nullptr);
        static info::CryptoPP__NullNameValuePairsctor_NullNameValuePairs4_clbk CryptoPP__NullNameValuePairsctor_NullNameValuePairs4_user(nullptr);
        static info::CryptoPP__NullNameValuePairsctor_NullNameValuePairs5_ptr CryptoPP__NullNameValuePairsctor_NullNameValuePairs5_next(nullptr);
        static info::CryptoPP__NullNameValuePairsctor_NullNameValuePairs5_clbk CryptoPP__NullNameValuePairsctor_NullNameValuePairs5_user(nullptr);
        static info::CryptoPP__NullNameValuePairsdtor_NullNameValuePairs10_ptr CryptoPP__NullNameValuePairsdtor_NullNameValuePairs10_next(nullptr);
        static info::CryptoPP__NullNameValuePairsdtor_NullNameValuePairs10_clbk CryptoPP__NullNameValuePairsdtor_NullNameValuePairs10_user(nullptr);
        
        static info::CryptoPP__CTR_ModePolicyctor_CTR_ModePolicy1_ptr CryptoPP__CTR_ModePolicyctor_CTR_ModePolicy1_next(nullptr);
        static info::CryptoPP__CTR_ModePolicyctor_CTR_ModePolicy1_clbk CryptoPP__CTR_ModePolicyctor_CTR_ModePolicy1_user(nullptr);
        static info::CryptoPP__CTR_ModePolicyCanOperateKeystream2_ptr CryptoPP__CTR_ModePolicyCanOperateKeystream2_next(nullptr);
        static info::CryptoPP__CTR_ModePolicyCanOperateKeystream2_clbk CryptoPP__CTR_ModePolicyCanOperateKeystream2_user(nullptr);
        static info::CryptoPP__CTR_ModePolicyCipherResynchronize3_ptr CryptoPP__CTR_ModePolicyCipherResynchronize3_next(nullptr);
        static info::CryptoPP__CTR_ModePolicyCipherResynchronize3_clbk CryptoPP__CTR_ModePolicyCipherResynchronize3_user(nullptr);
        static info::CryptoPP__CTR_ModePolicyGetAlignment4_ptr CryptoPP__CTR_ModePolicyGetAlignment4_next(nullptr);
        static info::CryptoPP__CTR_ModePolicyGetAlignment4_clbk CryptoPP__CTR_ModePolicyGetAlignment4_user(nullptr);
        static info::CryptoPP__CTR_ModePolicyGetBytesPerIteration5_ptr CryptoPP__CTR_ModePolicyGetBytesPerIteration5_next(nullptr);
        static info::CryptoPP__CTR_ModePolicyGetBytesPerIteration5_clbk CryptoPP__CTR_ModePolicyGetBytesPerIteration5_user(nullptr);
        static info::CryptoPP__CTR_ModePolicyGetIterationsToBuffer6_ptr CryptoPP__CTR_ModePolicyGetIterationsToBuffer6_next(nullptr);
        static info::CryptoPP__CTR_ModePolicyGetIterationsToBuffer6_clbk CryptoPP__CTR_ModePolicyGetIterationsToBuffer6_user(nullptr);
        static info::CryptoPP__CTR_ModePolicyIVRequirement7_ptr CryptoPP__CTR_ModePolicyIVRequirement7_next(nullptr);
        static info::CryptoPP__CTR_ModePolicyIVRequirement7_clbk CryptoPP__CTR_ModePolicyIVRequirement7_user(nullptr);
        static info::CryptoPP__CTR_ModePolicyOperateKeystream8_ptr CryptoPP__CTR_ModePolicyOperateKeystream8_next(nullptr);
        static info::CryptoPP__CTR_ModePolicyOperateKeystream8_clbk CryptoPP__CTR_ModePolicyOperateKeystream8_user(nullptr);
        static info::CryptoPP__CTR_ModePolicyProcessMultipleBlocks9_ptr CryptoPP__CTR_ModePolicyProcessMultipleBlocks9_next(nullptr);
        static info::CryptoPP__CTR_ModePolicyProcessMultipleBlocks9_clbk CryptoPP__CTR_ModePolicyProcessMultipleBlocks9_user(nullptr);
        static info::CryptoPP__CTR_ModePolicySeekToIteration10_ptr CryptoPP__CTR_ModePolicySeekToIteration10_next(nullptr);
        static info::CryptoPP__CTR_ModePolicySeekToIteration10_clbk CryptoPP__CTR_ModePolicySeekToIteration10_user(nullptr);
        static info::CryptoPP__CTR_ModePolicyStaticAlgorithmName11_ptr CryptoPP__CTR_ModePolicyStaticAlgorithmName11_next(nullptr);
        static info::CryptoPP__CTR_ModePolicyStaticAlgorithmName11_clbk CryptoPP__CTR_ModePolicyStaticAlgorithmName11_user(nullptr);
        static info::CryptoPP__CTR_ModePolicyWriteKeystream12_ptr CryptoPP__CTR_ModePolicyWriteKeystream12_next(nullptr);
        static info::CryptoPP__CTR_ModePolicyWriteKeystream12_clbk CryptoPP__CTR_ModePolicyWriteKeystream12_user(nullptr);
        static info::CryptoPP__CTR_ModePolicydtor_CTR_ModePolicy13_ptr CryptoPP__CTR_ModePolicydtor_CTR_ModePolicy13_next(nullptr);
        static info::CryptoPP__CTR_ModePolicydtor_CTR_ModePolicy13_clbk CryptoPP__CTR_ModePolicydtor_CTR_ModePolicy13_user(nullptr);
        
        static info::CryptoPP__OFB_ModePolicyCipherResynchronize1_ptr CryptoPP__OFB_ModePolicyCipherResynchronize1_next(nullptr);
        static info::CryptoPP__OFB_ModePolicyCipherResynchronize1_clbk CryptoPP__OFB_ModePolicyCipherResynchronize1_user(nullptr);
        static info::CryptoPP__OFB_ModePolicyGetBytesPerIteration2_ptr CryptoPP__OFB_ModePolicyGetBytesPerIteration2_next(nullptr);
        static info::CryptoPP__OFB_ModePolicyGetBytesPerIteration2_clbk CryptoPP__OFB_ModePolicyGetBytesPerIteration2_user(nullptr);
        static info::CryptoPP__OFB_ModePolicyGetIterationsToBuffer3_ptr CryptoPP__OFB_ModePolicyGetIterationsToBuffer3_next(nullptr);
        static info::CryptoPP__OFB_ModePolicyGetIterationsToBuffer3_clbk CryptoPP__OFB_ModePolicyGetIterationsToBuffer3_user(nullptr);
        static info::CryptoPP__OFB_ModePolicyIVRequirement4_ptr CryptoPP__OFB_ModePolicyIVRequirement4_next(nullptr);
        static info::CryptoPP__OFB_ModePolicyIVRequirement4_clbk CryptoPP__OFB_ModePolicyIVRequirement4_user(nullptr);
        static info::CryptoPP__OFB_ModePolicyctor_OFB_ModePolicy5_ptr CryptoPP__OFB_ModePolicyctor_OFB_ModePolicy5_next(nullptr);
        static info::CryptoPP__OFB_ModePolicyctor_OFB_ModePolicy5_clbk CryptoPP__OFB_ModePolicyctor_OFB_ModePolicy5_user(nullptr);
        static info::CryptoPP__OFB_ModePolicyStaticAlgorithmName6_ptr CryptoPP__OFB_ModePolicyStaticAlgorithmName6_next(nullptr);
        static info::CryptoPP__OFB_ModePolicyStaticAlgorithmName6_clbk CryptoPP__OFB_ModePolicyStaticAlgorithmName6_user(nullptr);
        static info::CryptoPP__OFB_ModePolicyWriteKeystream7_ptr CryptoPP__OFB_ModePolicyWriteKeystream7_next(nullptr);
        static info::CryptoPP__OFB_ModePolicyWriteKeystream7_clbk CryptoPP__OFB_ModePolicyWriteKeystream7_user(nullptr);
        static info::CryptoPP__OFB_ModePolicydtor_OFB_ModePolicy8_ptr CryptoPP__OFB_ModePolicydtor_OFB_ModePolicy8_next(nullptr);
        static info::CryptoPP__OFB_ModePolicydtor_OFB_ModePolicy8_clbk CryptoPP__OFB_ModePolicydtor_OFB_ModePolicy8_user(nullptr);
        
        static info::CryptoPP__DL_SymmetricEncryptionAlgorithmctor_DL_SymmetricEncryptionAlgorithm2_ptr CryptoPP__DL_SymmetricEncryptionAlgorithmctor_DL_SymmetricEncryptionAlgorithm2_next(nullptr);
        static info::CryptoPP__DL_SymmetricEncryptionAlgorithmctor_DL_SymmetricEncryptionAlgorithm2_clbk CryptoPP__DL_SymmetricEncryptionAlgorithmctor_DL_SymmetricEncryptionAlgorithm2_user(nullptr);
        
        static info::CryptoPP__DL_Algorithm_GDSASign1_ptr CryptoPP__DL_Algorithm_GDSASign1_next(nullptr);
        static info::CryptoPP__DL_Algorithm_GDSASign1_clbk CryptoPP__DL_Algorithm_GDSASign1_user(nullptr);
        static info::CryptoPP__DL_Algorithm_GDSAVerify2_ptr CryptoPP__DL_Algorithm_GDSAVerify2_next(nullptr);
        static info::CryptoPP__DL_Algorithm_GDSAVerify2_clbk CryptoPP__DL_Algorithm_GDSAVerify2_user(nullptr);
        
        static info::CryptoPP__X917RNGctor_X917RNG1_ptr CryptoPP__X917RNGctor_X917RNG1_next(nullptr);
        static info::CryptoPP__X917RNGctor_X917RNG1_clbk CryptoPP__X917RNGctor_X917RNG1_user(nullptr);
        static info::CryptoPP__X917RNGdtor_X917RNG2_ptr CryptoPP__X917RNGdtor_X917RNG2_next(nullptr);
        static info::CryptoPP__X917RNGdtor_X917RNG2_clbk CryptoPP__X917RNGdtor_X917RNG2_user(nullptr);
        
        static info::CryptoPP__DL_KeyDerivationAlgorithmctor_DL_KeyDerivationAlgorithm2_ptr CryptoPP__DL_KeyDerivationAlgorithmctor_DL_KeyDerivationAlgorithm2_next(nullptr);
        static info::CryptoPP__DL_KeyDerivationAlgorithmctor_DL_KeyDerivationAlgorithm2_clbk CryptoPP__DL_KeyDerivationAlgorithmctor_DL_KeyDerivationAlgorithm2_user(nullptr);
        
        static info::CryptoPP__InvalidArgumentctor_InvalidArgument2_ptr CryptoPP__InvalidArgumentctor_InvalidArgument2_next(nullptr);
        static info::CryptoPP__InvalidArgumentctor_InvalidArgument2_clbk CryptoPP__InvalidArgumentctor_InvalidArgument2_user(nullptr);
        static info::CryptoPP__InvalidArgumentctor_InvalidArgument4_ptr CryptoPP__InvalidArgumentctor_InvalidArgument4_next(nullptr);
        static info::CryptoPP__InvalidArgumentctor_InvalidArgument4_clbk CryptoPP__InvalidArgumentctor_InvalidArgument4_user(nullptr);
        static info::CryptoPP__InvalidArgumentdtor_InvalidArgument9_ptr CryptoPP__InvalidArgumentdtor_InvalidArgument9_next(nullptr);
        static info::CryptoPP__InvalidArgumentdtor_InvalidArgument9_clbk CryptoPP__InvalidArgumentdtor_InvalidArgument9_user(nullptr);
        
        static info::CryptoPP__BERDecodeErrctor_BERDecodeErr1_ptr CryptoPP__BERDecodeErrctor_BERDecodeErr1_next(nullptr);
        static info::CryptoPP__BERDecodeErrctor_BERDecodeErr1_clbk CryptoPP__BERDecodeErrctor_BERDecodeErr1_user(nullptr);
        static info::CryptoPP__BERDecodeErrctor_BERDecodeErr2_ptr CryptoPP__BERDecodeErrctor_BERDecodeErr2_next(nullptr);
        static info::CryptoPP__BERDecodeErrctor_BERDecodeErr2_clbk CryptoPP__BERDecodeErrctor_BERDecodeErr2_user(nullptr);
        static info::CryptoPP__BERDecodeErrdtor_BERDecodeErr3_ptr CryptoPP__BERDecodeErrdtor_BERDecodeErr3_next(nullptr);
        static info::CryptoPP__BERDecodeErrdtor_BERDecodeErr3_clbk CryptoPP__BERDecodeErrdtor_BERDecodeErr3_user(nullptr);
        
        static info::CryptoPP__MicrosoftCryptoProviderGetProviderHandle1_ptr CryptoPP__MicrosoftCryptoProviderGetProviderHandle1_next(nullptr);
        static info::CryptoPP__MicrosoftCryptoProviderGetProviderHandle1_clbk CryptoPP__MicrosoftCryptoProviderGetProviderHandle1_user(nullptr);
        static info::CryptoPP__MicrosoftCryptoProviderctor_MicrosoftCryptoProvider2_ptr CryptoPP__MicrosoftCryptoProviderctor_MicrosoftCryptoProvider2_next(nullptr);
        static info::CryptoPP__MicrosoftCryptoProviderctor_MicrosoftCryptoProvider2_clbk CryptoPP__MicrosoftCryptoProviderctor_MicrosoftCryptoProvider2_user(nullptr);
        static info::CryptoPP__MicrosoftCryptoProviderdtor_MicrosoftCryptoProvider3_ptr CryptoPP__MicrosoftCryptoProviderdtor_MicrosoftCryptoProvider3_next(nullptr);
        static info::CryptoPP__MicrosoftCryptoProviderdtor_MicrosoftCryptoProvider3_clbk CryptoPP__MicrosoftCryptoProviderdtor_MicrosoftCryptoProvider3_user(nullptr);
        
        static info::CryptoPP__KeyAgreementAlgorithmAccessMaterial1_ptr CryptoPP__KeyAgreementAlgorithmAccessMaterial1_next(nullptr);
        static info::CryptoPP__KeyAgreementAlgorithmAccessMaterial1_clbk CryptoPP__KeyAgreementAlgorithmAccessMaterial1_user(nullptr);
        static info::CryptoPP__KeyAgreementAlgorithmGetCryptoParameters2_ptr CryptoPP__KeyAgreementAlgorithmGetCryptoParameters2_next(nullptr);
        static info::CryptoPP__KeyAgreementAlgorithmGetCryptoParameters2_clbk CryptoPP__KeyAgreementAlgorithmGetCryptoParameters2_user(nullptr);
        static info::CryptoPP__KeyAgreementAlgorithmGetMaterial3_ptr CryptoPP__KeyAgreementAlgorithmGetMaterial3_next(nullptr);
        static info::CryptoPP__KeyAgreementAlgorithmGetMaterial3_clbk CryptoPP__KeyAgreementAlgorithmGetMaterial3_user(nullptr);
        static info::CryptoPP__KeyAgreementAlgorithmctor_KeyAgreementAlgorithm4_ptr CryptoPP__KeyAgreementAlgorithmctor_KeyAgreementAlgorithm4_next(nullptr);
        static info::CryptoPP__KeyAgreementAlgorithmctor_KeyAgreementAlgorithm4_clbk CryptoPP__KeyAgreementAlgorithmctor_KeyAgreementAlgorithm4_user(nullptr);
        static info::CryptoPP__KeyAgreementAlgorithmdtor_KeyAgreementAlgorithm5_ptr CryptoPP__KeyAgreementAlgorithmdtor_KeyAgreementAlgorithm5_next(nullptr);
        static info::CryptoPP__KeyAgreementAlgorithmdtor_KeyAgreementAlgorithm5_clbk CryptoPP__KeyAgreementAlgorithmdtor_KeyAgreementAlgorithm5_user(nullptr);
        
        static info::CryptoPP__SimpleKeyAgreementDomainGenerateKeyPair1_ptr CryptoPP__SimpleKeyAgreementDomainGenerateKeyPair1_next(nullptr);
        static info::CryptoPP__SimpleKeyAgreementDomainGenerateKeyPair1_clbk CryptoPP__SimpleKeyAgreementDomainGenerateKeyPair1_user(nullptr);
        static info::CryptoPP__SimpleKeyAgreementDomainctor_SimpleKeyAgreementDomain2_ptr CryptoPP__SimpleKeyAgreementDomainctor_SimpleKeyAgreementDomain2_next(nullptr);
        static info::CryptoPP__SimpleKeyAgreementDomainctor_SimpleKeyAgreementDomain2_clbk CryptoPP__SimpleKeyAgreementDomainctor_SimpleKeyAgreementDomain2_user(nullptr);
        static info::CryptoPP__SimpleKeyAgreementDomaindtor_SimpleKeyAgreementDomain3_ptr CryptoPP__SimpleKeyAgreementDomaindtor_SimpleKeyAgreementDomain3_next(nullptr);
        static info::CryptoPP__SimpleKeyAgreementDomaindtor_SimpleKeyAgreementDomain3_clbk CryptoPP__SimpleKeyAgreementDomaindtor_SimpleKeyAgreementDomain3_user(nullptr);
        
        static info::CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimector_DL_GroupParameters_GFP_DefaultSafePrime1_ptr CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimector_DL_GroupParameters_GFP_DefaultSafePrime1_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimector_DL_GroupParameters_GFP_DefaultSafePrime1_clbk CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimector_DL_GroupParameters_GFP_DefaultSafePrime1_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimector_DL_GroupParameters_GFP_DefaultSafePrime2_ptr CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimector_DL_GroupParameters_GFP_DefaultSafePrime2_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimector_DL_GroupParameters_GFP_DefaultSafePrime2_clbk CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimector_DL_GroupParameters_GFP_DefaultSafePrime2_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimeGetDefaultSubgroupOrderSize3_ptr CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimeGetDefaultSubgroupOrderSize3_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimeGetDefaultSubgroupOrderSize3_clbk CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimeGetDefaultSubgroupOrderSize3_user(nullptr);
        static info::CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimedtor_DL_GroupParameters_GFP_DefaultSafePrime4_ptr CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimedtor_DL_GroupParameters_GFP_DefaultSafePrime4_next(nullptr);
        static info::CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimedtor_DL_GroupParameters_GFP_DefaultSafePrime4_clbk CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimedtor_DL_GroupParameters_GFP_DefaultSafePrime4_user(nullptr);
        
        static info::CryptoPP__NotImplementedctor_NotImplemented2_ptr CryptoPP__NotImplementedctor_NotImplemented2_next(nullptr);
        static info::CryptoPP__NotImplementedctor_NotImplemented2_clbk CryptoPP__NotImplementedctor_NotImplemented2_user(nullptr);
        static info::CryptoPP__NotImplementedctor_NotImplemented4_ptr CryptoPP__NotImplementedctor_NotImplemented4_next(nullptr);
        static info::CryptoPP__NotImplementedctor_NotImplemented4_clbk CryptoPP__NotImplementedctor_NotImplemented4_user(nullptr);
        static info::CryptoPP__NotImplementeddtor_NotImplemented9_ptr CryptoPP__NotImplementeddtor_NotImplemented9_next(nullptr);
        static info::CryptoPP__NotImplementeddtor_NotImplemented9_clbk CryptoPP__NotImplementeddtor_NotImplemented9_user(nullptr);
        
        static info::CryptoPP__CannotFlushctor_CannotFlush1_ptr CryptoPP__CannotFlushctor_CannotFlush1_next(nullptr);
        static info::CryptoPP__CannotFlushctor_CannotFlush1_clbk CryptoPP__CannotFlushctor_CannotFlush1_user(nullptr);
        static info::CryptoPP__CannotFlushdtor_CannotFlush2_ptr CryptoPP__CannotFlushdtor_CannotFlush2_next(nullptr);
        static info::CryptoPP__CannotFlushdtor_CannotFlush2_clbk CryptoPP__CannotFlushdtor_CannotFlush2_user(nullptr);
        
        static info::CryptoPP__FilterPutSpaceHelperctor_FilterPutSpaceHelper2_ptr CryptoPP__FilterPutSpaceHelperctor_FilterPutSpaceHelper2_next(nullptr);
        static info::CryptoPP__FilterPutSpaceHelperctor_FilterPutSpaceHelper2_clbk CryptoPP__FilterPutSpaceHelperctor_FilterPutSpaceHelper2_user(nullptr);
        static info::CryptoPP__FilterPutSpaceHelperdtor_FilterPutSpaceHelper4_ptr CryptoPP__FilterPutSpaceHelperdtor_FilterPutSpaceHelper4_next(nullptr);
        static info::CryptoPP__FilterPutSpaceHelperdtor_FilterPutSpaceHelper4_clbk CryptoPP__FilterPutSpaceHelperdtor_FilterPutSpaceHelper4_user(nullptr);
        
        static info::CryptoPP__HashFilterCreatePutSpace1_ptr CryptoPP__HashFilterCreatePutSpace1_next(nullptr);
        static info::CryptoPP__HashFilterCreatePutSpace1_clbk CryptoPP__HashFilterCreatePutSpace1_user(nullptr);
        static info::CryptoPP__HashFilterctor_HashFilter2_ptr CryptoPP__HashFilterctor_HashFilter2_next(nullptr);
        static info::CryptoPP__HashFilterctor_HashFilter2_clbk CryptoPP__HashFilterctor_HashFilter2_user(nullptr);
        static info::CryptoPP__HashFilterIsolatedInitialize3_ptr CryptoPP__HashFilterIsolatedInitialize3_next(nullptr);
        static info::CryptoPP__HashFilterIsolatedInitialize3_clbk CryptoPP__HashFilterIsolatedInitialize3_user(nullptr);
        static info::CryptoPP__HashFilterPut24_ptr CryptoPP__HashFilterPut24_next(nullptr);
        static info::CryptoPP__HashFilterPut24_clbk CryptoPP__HashFilterPut24_user(nullptr);
        static info::CryptoPP__HashFilterdtor_HashFilter5_ptr CryptoPP__HashFilterdtor_HashFilter5_next(nullptr);
        static info::CryptoPP__HashFilterdtor_HashFilter5_clbk CryptoPP__HashFilterdtor_HashFilter5_user(nullptr);
        
        static info::CryptoPP__PK_DeterministicSignatureMessageEncodingMethodctor_PK_DeterministicSignatureMessageEncodingMethod1_ptr CryptoPP__PK_DeterministicSignatureMessageEncodingMethodctor_PK_DeterministicSignatureMessageEncodingMethod1_next(nullptr);
        static info::CryptoPP__PK_DeterministicSignatureMessageEncodingMethodctor_PK_DeterministicSignatureMessageEncodingMethod1_clbk CryptoPP__PK_DeterministicSignatureMessageEncodingMethodctor_PK_DeterministicSignatureMessageEncodingMethod1_user(nullptr);
        static info::CryptoPP__PK_DeterministicSignatureMessageEncodingMethodVerifyMessageRepresentative2_ptr CryptoPP__PK_DeterministicSignatureMessageEncodingMethodVerifyMessageRepresentative2_next(nullptr);
        static info::CryptoPP__PK_DeterministicSignatureMessageEncodingMethodVerifyMessageRepresentative2_clbk CryptoPP__PK_DeterministicSignatureMessageEncodingMethodVerifyMessageRepresentative2_user(nullptr);
        static info::CryptoPP__PK_DeterministicSignatureMessageEncodingMethoddtor_PK_DeterministicSignatureMessageEncodingMethod3_ptr CryptoPP__PK_DeterministicSignatureMessageEncodingMethoddtor_PK_DeterministicSignatureMessageEncodingMethod3_next(nullptr);
        static info::CryptoPP__PK_DeterministicSignatureMessageEncodingMethoddtor_PK_DeterministicSignatureMessageEncodingMethod3_clbk CryptoPP__PK_DeterministicSignatureMessageEncodingMethoddtor_PK_DeterministicSignatureMessageEncodingMethod3_user(nullptr);
        
        static info::CryptoPP__DL_SignatureMessageEncodingMethod_DSAComputeMessageRepresentative1_ptr CryptoPP__DL_SignatureMessageEncodingMethod_DSAComputeMessageRepresentative1_next(nullptr);
        static info::CryptoPP__DL_SignatureMessageEncodingMethod_DSAComputeMessageRepresentative1_clbk CryptoPP__DL_SignatureMessageEncodingMethod_DSAComputeMessageRepresentative1_user(nullptr);
        static info::CryptoPP__DL_SignatureMessageEncodingMethod_DSActor_DL_SignatureMessageEncodingMethod_DSA2_ptr CryptoPP__DL_SignatureMessageEncodingMethod_DSActor_DL_SignatureMessageEncodingMethod_DSA2_next(nullptr);
        static info::CryptoPP__DL_SignatureMessageEncodingMethod_DSActor_DL_SignatureMessageEncodingMethod_DSA2_clbk CryptoPP__DL_SignatureMessageEncodingMethod_DSActor_DL_SignatureMessageEncodingMethod_DSA2_user(nullptr);
        static info::CryptoPP__DL_SignatureMessageEncodingMethod_DSAdtor_DL_SignatureMessageEncodingMethod_DSA3_ptr CryptoPP__DL_SignatureMessageEncodingMethod_DSAdtor_DL_SignatureMessageEncodingMethod_DSA3_next(nullptr);
        static info::CryptoPP__DL_SignatureMessageEncodingMethod_DSAdtor_DL_SignatureMessageEncodingMethod_DSA3_clbk CryptoPP__DL_SignatureMessageEncodingMethod_DSAdtor_DL_SignatureMessageEncodingMethod_DSA3_user(nullptr);
        
        static info::CryptoPP__ArrayXorSinkctor_ArrayXorSink1_ptr CryptoPP__ArrayXorSinkctor_ArrayXorSink1_next(nullptr);
        static info::CryptoPP__ArrayXorSinkctor_ArrayXorSink1_clbk CryptoPP__ArrayXorSinkctor_ArrayXorSink1_user(nullptr);
        static info::CryptoPP__ArrayXorSinkCreatePutSpace2_ptr CryptoPP__ArrayXorSinkCreatePutSpace2_next(nullptr);
        static info::CryptoPP__ArrayXorSinkCreatePutSpace2_clbk CryptoPP__ArrayXorSinkCreatePutSpace2_user(nullptr);
        static info::CryptoPP__ArrayXorSinkPut23_ptr CryptoPP__ArrayXorSinkPut23_next(nullptr);
        static info::CryptoPP__ArrayXorSinkPut23_clbk CryptoPP__ArrayXorSinkPut23_user(nullptr);
        static info::CryptoPP__ArrayXorSinkdtor_ArrayXorSink4_ptr CryptoPP__ArrayXorSinkdtor_ArrayXorSink4_next(nullptr);
        static info::CryptoPP__ArrayXorSinkdtor_ArrayXorSink4_clbk CryptoPP__ArrayXorSinkdtor_ArrayXorSink4_user(nullptr);
        
        static info::CryptoPP__ByteArrayParameterctor_ByteArrayParameter1_ptr CryptoPP__ByteArrayParameterctor_ByteArrayParameter1_next(nullptr);
        static info::CryptoPP__ByteArrayParameterctor_ByteArrayParameter1_clbk CryptoPP__ByteArrayParameterctor_ByteArrayParameter1_user(nullptr);
        static info::CryptoPP__ByteArrayParameterbegin2_ptr CryptoPP__ByteArrayParameterbegin2_next(nullptr);
        static info::CryptoPP__ByteArrayParameterbegin2_clbk CryptoPP__ByteArrayParameterbegin2_user(nullptr);
        static info::CryptoPP__ByteArrayParametersize3_ptr CryptoPP__ByteArrayParametersize3_next(nullptr);
        static info::CryptoPP__ByteArrayParametersize3_clbk CryptoPP__ByteArrayParametersize3_user(nullptr);
        
        static info::CryptoPP__InputRejectingChannelMessageSeriesEnd2_ptr CryptoPP__InputRejectingChannelMessageSeriesEnd2_next(nullptr);
        static info::CryptoPP__InputRejectingChannelMessageSeriesEnd2_clbk CryptoPP__InputRejectingChannelMessageSeriesEnd2_user(nullptr);
        static info::CryptoPP__InputRejectingChannelPut24_ptr CryptoPP__InputRejectingChannelPut24_next(nullptr);
        static info::CryptoPP__InputRejectingChannelPut24_clbk CryptoPP__InputRejectingChannelPut24_user(nullptr);
        static info::CryptoPP__InputRejectingctor_InputRejecting6_ptr CryptoPP__InputRejectingctor_InputRejecting6_next(nullptr);
        static info::CryptoPP__InputRejectingctor_InputRejecting6_clbk CryptoPP__InputRejectingctor_InputRejecting6_user(nullptr);
        static info::CryptoPP__InputRejectingIsolatedFlush8_ptr CryptoPP__InputRejectingIsolatedFlush8_next(nullptr);
        static info::CryptoPP__InputRejectingIsolatedFlush8_clbk CryptoPP__InputRejectingIsolatedFlush8_user(nullptr);
        static info::CryptoPP__InputRejectingIsolatedMessageSeriesEnd10_ptr CryptoPP__InputRejectingIsolatedMessageSeriesEnd10_next(nullptr);
        static info::CryptoPP__InputRejectingIsolatedMessageSeriesEnd10_clbk CryptoPP__InputRejectingIsolatedMessageSeriesEnd10_user(nullptr);
        static info::CryptoPP__InputRejectingPut212_ptr CryptoPP__InputRejectingPut212_next(nullptr);
        static info::CryptoPP__InputRejectingPut212_clbk CryptoPP__InputRejectingPut212_user(nullptr);
        static info::CryptoPP__InputRejectingdtor_InputRejecting14_ptr CryptoPP__InputRejectingdtor_InputRejecting14_next(nullptr);
        static info::CryptoPP__InputRejectingdtor_InputRejecting14_clbk CryptoPP__InputRejectingdtor_InputRejecting14_user(nullptr);
        
        static info::CryptoPP__InputRejecting__InputRejectedctor_InputRejected2_ptr CryptoPP__InputRejecting__InputRejectedctor_InputRejected2_next(nullptr);
        static info::CryptoPP__InputRejecting__InputRejectedctor_InputRejected2_clbk CryptoPP__InputRejecting__InputRejectedctor_InputRejected2_user(nullptr);
        static info::CryptoPP__InputRejecting__InputRejectedctor_InputRejected4_ptr CryptoPP__InputRejecting__InputRejectedctor_InputRejected4_next(nullptr);
        static info::CryptoPP__InputRejecting__InputRejectedctor_InputRejected4_clbk CryptoPP__InputRejecting__InputRejectedctor_InputRejected4_user(nullptr);
        static info::CryptoPP__InputRejecting__InputRejecteddtor_InputRejected9_ptr CryptoPP__InputRejecting__InputRejecteddtor_InputRejected9_next(nullptr);
        static info::CryptoPP__InputRejecting__InputRejecteddtor_InputRejected9_clbk CryptoPP__InputRejecting__InputRejecteddtor_InputRejected9_user(nullptr);
        
        static info::CryptoPP__SourcePumpAll2_ptr CryptoPP__SourcePumpAll2_next(nullptr);
        static info::CryptoPP__SourcePumpAll2_clbk CryptoPP__SourcePumpAll2_user(nullptr);
        static info::CryptoPP__SourcePumpAll23_ptr CryptoPP__SourcePumpAll23_next(nullptr);
        static info::CryptoPP__SourcePumpAll23_clbk CryptoPP__SourcePumpAll23_user(nullptr);
        static info::CryptoPP__Sourcector_Source5_ptr CryptoPP__Sourcector_Source5_next(nullptr);
        static info::CryptoPP__Sourcector_Source5_clbk CryptoPP__Sourcector_Source5_user(nullptr);
        static info::CryptoPP__SourceSourceInitialize7_ptr CryptoPP__SourceSourceInitialize7_next(nullptr);
        static info::CryptoPP__SourceSourceInitialize7_clbk CryptoPP__SourceSourceInitialize7_user(nullptr);
        static info::CryptoPP__Sourcedtor_Source9_ptr CryptoPP__Sourcedtor_Source9_next(nullptr);
        static info::CryptoPP__Sourcedtor_Source9_clbk CryptoPP__Sourcedtor_Source9_user(nullptr);
        
        static info::CryptoPP__StringSourcector_StringSource1_ptr CryptoPP__StringSourcector_StringSource1_next(nullptr);
        static info::CryptoPP__StringSourcector_StringSource1_clbk CryptoPP__StringSourcector_StringSource1_user(nullptr);
        static info::CryptoPP__StringSourcedtor_StringSource2_ptr CryptoPP__StringSourcedtor_StringSource2_next(nullptr);
        static info::CryptoPP__StringSourcedtor_StringSource2_clbk CryptoPP__StringSourcedtor_StringSource2_user(nullptr);
        
        static info::CryptoPP__ECB_OneWayctor_ECB_OneWay1_ptr CryptoPP__ECB_OneWayctor_ECB_OneWay1_next(nullptr);
        static info::CryptoPP__ECB_OneWayctor_ECB_OneWay1_clbk CryptoPP__ECB_OneWayctor_ECB_OneWay1_user(nullptr);
        static info::CryptoPP__ECB_OneWayIVRequirement2_ptr CryptoPP__ECB_OneWayIVRequirement2_next(nullptr);
        static info::CryptoPP__ECB_OneWayIVRequirement2_clbk CryptoPP__ECB_OneWayIVRequirement2_user(nullptr);
        static info::CryptoPP__ECB_OneWayOptimalBlockSize3_ptr CryptoPP__ECB_OneWayOptimalBlockSize3_next(nullptr);
        static info::CryptoPP__ECB_OneWayOptimalBlockSize3_clbk CryptoPP__ECB_OneWayOptimalBlockSize3_user(nullptr);
        static info::CryptoPP__ECB_OneWayProcessBlocks4_ptr CryptoPP__ECB_OneWayProcessBlocks4_next(nullptr);
        static info::CryptoPP__ECB_OneWayProcessBlocks4_clbk CryptoPP__ECB_OneWayProcessBlocks4_user(nullptr);
        static info::CryptoPP__ECB_OneWaySetKey5_ptr CryptoPP__ECB_OneWaySetKey5_next(nullptr);
        static info::CryptoPP__ECB_OneWaySetKey5_clbk CryptoPP__ECB_OneWaySetKey5_user(nullptr);
        static info::CryptoPP__ECB_OneWayStaticAlgorithmName6_ptr CryptoPP__ECB_OneWayStaticAlgorithmName6_next(nullptr);
        static info::CryptoPP__ECB_OneWayStaticAlgorithmName6_clbk CryptoPP__ECB_OneWayStaticAlgorithmName6_user(nullptr);
        static info::CryptoPP__ECB_OneWaydtor_ECB_OneWay7_ptr CryptoPP__ECB_OneWaydtor_ECB_OneWay7_next(nullptr);
        static info::CryptoPP__ECB_OneWaydtor_ECB_OneWay7_clbk CryptoPP__ECB_OneWaydtor_ECB_OneWay7_user(nullptr);
        
        static info::CryptoPP__LC_RNGGenerateBlock1_ptr CryptoPP__LC_RNGGenerateBlock1_next(nullptr);
        static info::CryptoPP__LC_RNGGenerateBlock1_clbk CryptoPP__LC_RNGGenerateBlock1_user(nullptr);
        
        static info::CryptoPP__BERGeneralDecoderctor_BERGeneralDecoder1_ptr CryptoPP__BERGeneralDecoderctor_BERGeneralDecoder1_next(nullptr);
        static info::CryptoPP__BERGeneralDecoderctor_BERGeneralDecoder1_clbk CryptoPP__BERGeneralDecoderctor_BERGeneralDecoder1_user(nullptr);
        static info::CryptoPP__BERGeneralDecoderctor_BERGeneralDecoder2_ptr CryptoPP__BERGeneralDecoderctor_BERGeneralDecoder2_next(nullptr);
        static info::CryptoPP__BERGeneralDecoderctor_BERGeneralDecoder2_clbk CryptoPP__BERGeneralDecoderctor_BERGeneralDecoder2_user(nullptr);
        static info::CryptoPP__BERGeneralDecoderCheckByte3_ptr CryptoPP__BERGeneralDecoderCheckByte3_next(nullptr);
        static info::CryptoPP__BERGeneralDecoderCheckByte3_clbk CryptoPP__BERGeneralDecoderCheckByte3_user(nullptr);
        static info::CryptoPP__BERGeneralDecoderEndReached4_ptr CryptoPP__BERGeneralDecoderEndReached4_next(nullptr);
        static info::CryptoPP__BERGeneralDecoderEndReached4_clbk CryptoPP__BERGeneralDecoderEndReached4_user(nullptr);
        static info::CryptoPP__BERGeneralDecoderInit5_ptr CryptoPP__BERGeneralDecoderInit5_next(nullptr);
        static info::CryptoPP__BERGeneralDecoderInit5_clbk CryptoPP__BERGeneralDecoderInit5_user(nullptr);
        static info::CryptoPP__BERGeneralDecoderIsDefiniteLength6_ptr CryptoPP__BERGeneralDecoderIsDefiniteLength6_next(nullptr);
        static info::CryptoPP__BERGeneralDecoderIsDefiniteLength6_clbk CryptoPP__BERGeneralDecoderIsDefiniteLength6_user(nullptr);
        static info::CryptoPP__BERGeneralDecoderMessageEnd7_ptr CryptoPP__BERGeneralDecoderMessageEnd7_next(nullptr);
        static info::CryptoPP__BERGeneralDecoderMessageEnd7_clbk CryptoPP__BERGeneralDecoderMessageEnd7_user(nullptr);
        static info::CryptoPP__BERGeneralDecoderPeekByte8_ptr CryptoPP__BERGeneralDecoderPeekByte8_next(nullptr);
        static info::CryptoPP__BERGeneralDecoderPeekByte8_clbk CryptoPP__BERGeneralDecoderPeekByte8_user(nullptr);
        static info::CryptoPP__BERGeneralDecoderReduceLength9_ptr CryptoPP__BERGeneralDecoderReduceLength9_next(nullptr);
        static info::CryptoPP__BERGeneralDecoderReduceLength9_clbk CryptoPP__BERGeneralDecoderReduceLength9_user(nullptr);
        static info::CryptoPP__BERGeneralDecoderRemainingLength10_ptr CryptoPP__BERGeneralDecoderRemainingLength10_next(nullptr);
        static info::CryptoPP__BERGeneralDecoderRemainingLength10_clbk CryptoPP__BERGeneralDecoderRemainingLength10_user(nullptr);
        static info::CryptoPP__BERGeneralDecoderStoreInitialize11_ptr CryptoPP__BERGeneralDecoderStoreInitialize11_next(nullptr);
        static info::CryptoPP__BERGeneralDecoderStoreInitialize11_clbk CryptoPP__BERGeneralDecoderStoreInitialize11_user(nullptr);
        static info::CryptoPP__BERGeneralDecoderdtor_BERGeneralDecoder12_ptr CryptoPP__BERGeneralDecoderdtor_BERGeneralDecoder12_next(nullptr);
        static info::CryptoPP__BERGeneralDecoderdtor_BERGeneralDecoder12_clbk CryptoPP__BERGeneralDecoderdtor_BERGeneralDecoder12_user(nullptr);
        
        static info::CryptoPP__TF_VerifierBaseInputSignature1_ptr CryptoPP__TF_VerifierBaseInputSignature1_next(nullptr);
        static info::CryptoPP__TF_VerifierBaseInputSignature1_clbk CryptoPP__TF_VerifierBaseInputSignature1_user(nullptr);
        static info::CryptoPP__TF_VerifierBaseRecoverAndRestart2_ptr CryptoPP__TF_VerifierBaseRecoverAndRestart2_next(nullptr);
        static info::CryptoPP__TF_VerifierBaseRecoverAndRestart2_clbk CryptoPP__TF_VerifierBaseRecoverAndRestart2_user(nullptr);
        static info::CryptoPP__TF_VerifierBaseVerifyAndRestart3_ptr CryptoPP__TF_VerifierBaseVerifyAndRestart3_next(nullptr);
        static info::CryptoPP__TF_VerifierBaseVerifyAndRestart3_clbk CryptoPP__TF_VerifierBaseVerifyAndRestart3_user(nullptr);
        
        static info::CryptoPP__SHA1InitState1_ptr CryptoPP__SHA1InitState1_next(nullptr);
        static info::CryptoPP__SHA1InitState1_clbk CryptoPP__SHA1InitState1_user(nullptr);
        static info::CryptoPP__SHA1ctor_SHA13_ptr CryptoPP__SHA1ctor_SHA13_next(nullptr);
        static info::CryptoPP__SHA1ctor_SHA13_clbk CryptoPP__SHA1ctor_SHA13_user(nullptr);
        static info::CryptoPP__SHA1ctor_SHA15_ptr CryptoPP__SHA1ctor_SHA15_next(nullptr);
        static info::CryptoPP__SHA1ctor_SHA15_clbk CryptoPP__SHA1ctor_SHA15_user(nullptr);
        static info::CryptoPP__SHA1StaticAlgorithmName7_ptr CryptoPP__SHA1StaticAlgorithmName7_next(nullptr);
        static info::CryptoPP__SHA1StaticAlgorithmName7_clbk CryptoPP__SHA1StaticAlgorithmName7_user(nullptr);
        static info::CryptoPP__SHA1Transform8_ptr CryptoPP__SHA1Transform8_next(nullptr);
        static info::CryptoPP__SHA1Transform8_clbk CryptoPP__SHA1Transform8_user(nullptr);
        static info::CryptoPP__SHA1dtor_SHA113_ptr CryptoPP__SHA1dtor_SHA113_next(nullptr);
        static info::CryptoPP__SHA1dtor_SHA113_clbk CryptoPP__SHA1dtor_SHA113_user(nullptr);
        
        static info::CryptoPP__DL_Algorithm_GDSASign1_ptr CryptoPP__DL_Algorithm_GDSASign1_next(nullptr);
        static info::CryptoPP__DL_Algorithm_GDSASign1_clbk CryptoPP__DL_Algorithm_GDSASign1_user(nullptr);
        static info::CryptoPP__DL_Algorithm_GDSAVerify2_ptr CryptoPP__DL_Algorithm_GDSAVerify2_next(nullptr);
        static info::CryptoPP__DL_Algorithm_GDSAVerify2_clbk CryptoPP__DL_Algorithm_GDSAVerify2_user(nullptr);
        
        static info::CryptoPP__SignatureVerificationFilterFirstPut1_ptr CryptoPP__SignatureVerificationFilterFirstPut1_next(nullptr);
        static info::CryptoPP__SignatureVerificationFilterFirstPut1_clbk CryptoPP__SignatureVerificationFilterFirstPut1_user(nullptr);
        static info::CryptoPP__SignatureVerificationFilterInitializeDerivedAndReturnNewSizes2_ptr CryptoPP__SignatureVerificationFilterInitializeDerivedAndReturnNewSizes2_next(nullptr);
        static info::CryptoPP__SignatureVerificationFilterInitializeDerivedAndReturnNewSizes2_clbk CryptoPP__SignatureVerificationFilterInitializeDerivedAndReturnNewSizes2_user(nullptr);
        static info::CryptoPP__SignatureVerificationFilterLastPut3_ptr CryptoPP__SignatureVerificationFilterLastPut3_next(nullptr);
        static info::CryptoPP__SignatureVerificationFilterLastPut3_clbk CryptoPP__SignatureVerificationFilterLastPut3_user(nullptr);
        static info::CryptoPP__SignatureVerificationFilterNextPutMultiple4_ptr CryptoPP__SignatureVerificationFilterNextPutMultiple4_next(nullptr);
        static info::CryptoPP__SignatureVerificationFilterNextPutMultiple4_clbk CryptoPP__SignatureVerificationFilterNextPutMultiple4_user(nullptr);
        static info::CryptoPP__SignatureVerificationFilterctor_SignatureVerificationFilter5_ptr CryptoPP__SignatureVerificationFilterctor_SignatureVerificationFilter5_next(nullptr);
        static info::CryptoPP__SignatureVerificationFilterctor_SignatureVerificationFilter5_clbk CryptoPP__SignatureVerificationFilterctor_SignatureVerificationFilter5_user(nullptr);
        static info::CryptoPP__SignatureVerificationFilterdtor_SignatureVerificationFilter6_ptr CryptoPP__SignatureVerificationFilterdtor_SignatureVerificationFilter6_next(nullptr);
        static info::CryptoPP__SignatureVerificationFilterdtor_SignatureVerificationFilter6_clbk CryptoPP__SignatureVerificationFilterdtor_SignatureVerificationFilter6_user(nullptr);
        
        static info::CryptoPP__SignatureVerificationFilter__SignatureVerificationFailedctor_SignatureVerificationFailed1_ptr CryptoPP__SignatureVerificationFilter__SignatureVerificationFailedctor_SignatureVerificationFailed1_next(nullptr);
        static info::CryptoPP__SignatureVerificationFilter__SignatureVerificationFailedctor_SignatureVerificationFailed1_clbk CryptoPP__SignatureVerificationFilter__SignatureVerificationFailedctor_SignatureVerificationFailed1_user(nullptr);
        static info::CryptoPP__SignatureVerificationFilter__SignatureVerificationFailedctor_SignatureVerificationFailed2_ptr CryptoPP__SignatureVerificationFilter__SignatureVerificationFailedctor_SignatureVerificationFailed2_next(nullptr);
        static info::CryptoPP__SignatureVerificationFilter__SignatureVerificationFailedctor_SignatureVerificationFailed2_clbk CryptoPP__SignatureVerificationFilter__SignatureVerificationFailedctor_SignatureVerificationFailed2_user(nullptr);
        static info::CryptoPP__SignatureVerificationFilter__SignatureVerificationFaileddtor_SignatureVerificationFailed3_ptr CryptoPP__SignatureVerificationFilter__SignatureVerificationFaileddtor_SignatureVerificationFailed3_next(nullptr);
        static info::CryptoPP__SignatureVerificationFilter__SignatureVerificationFaileddtor_SignatureVerificationFailed3_clbk CryptoPP__SignatureVerificationFilter__SignatureVerificationFaileddtor_SignatureVerificationFailed3_user(nullptr);
        
        static info::CryptoPP__ConstByteArrayParameterAssign2_ptr CryptoPP__ConstByteArrayParameterAssign2_next(nullptr);
        static info::CryptoPP__ConstByteArrayParameterAssign2_clbk CryptoPP__ConstByteArrayParameterAssign2_user(nullptr);
        static info::CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter3_ptr CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter3_next(nullptr);
        static info::CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter3_clbk CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter3_user(nullptr);
        static info::CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter5_ptr CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter5_next(nullptr);
        static info::CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter5_clbk CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter5_user(nullptr);
        static info::CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter6_ptr CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter6_next(nullptr);
        static info::CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter6_clbk CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter6_user(nullptr);
        static info::CryptoPP__ConstByteArrayParameterbegin8_ptr CryptoPP__ConstByteArrayParameterbegin8_next(nullptr);
        static info::CryptoPP__ConstByteArrayParameterbegin8_clbk CryptoPP__ConstByteArrayParameterbegin8_user(nullptr);
        static info::CryptoPP__ConstByteArrayParametersize10_ptr CryptoPP__ConstByteArrayParametersize10_next(nullptr);
        static info::CryptoPP__ConstByteArrayParametersize10_clbk CryptoPP__ConstByteArrayParametersize10_user(nullptr);
        static info::CryptoPP__ConstByteArrayParameterdtor_ConstByteArrayParameter12_ptr CryptoPP__ConstByteArrayParameterdtor_ConstByteArrayParameter12_next(nullptr);
        static info::CryptoPP__ConstByteArrayParameterdtor_ConstByteArrayParameter12_clbk CryptoPP__ConstByteArrayParameterdtor_ConstByteArrayParameter12_user(nullptr);
        
        static info::CryptoPP__TF_DecryptorBaseDecrypt1_ptr CryptoPP__TF_DecryptorBaseDecrypt1_next(nullptr);
        static info::CryptoPP__TF_DecryptorBaseDecrypt1_clbk CryptoPP__TF_DecryptorBaseDecrypt1_user(nullptr);
        
        static info::CryptoPP__HashVerificationFilterFirstPut1_ptr CryptoPP__HashVerificationFilterFirstPut1_next(nullptr);
        static info::CryptoPP__HashVerificationFilterFirstPut1_clbk CryptoPP__HashVerificationFilterFirstPut1_user(nullptr);
        static info::CryptoPP__HashVerificationFilterctor_HashVerificationFilter2_ptr CryptoPP__HashVerificationFilterctor_HashVerificationFilter2_next(nullptr);
        static info::CryptoPP__HashVerificationFilterctor_HashVerificationFilter2_clbk CryptoPP__HashVerificationFilterctor_HashVerificationFilter2_user(nullptr);
        static info::CryptoPP__HashVerificationFilterInitializeDerivedAndReturnNewSizes3_ptr CryptoPP__HashVerificationFilterInitializeDerivedAndReturnNewSizes3_next(nullptr);
        static info::CryptoPP__HashVerificationFilterInitializeDerivedAndReturnNewSizes3_clbk CryptoPP__HashVerificationFilterInitializeDerivedAndReturnNewSizes3_user(nullptr);
        static info::CryptoPP__HashVerificationFilterLastPut4_ptr CryptoPP__HashVerificationFilterLastPut4_next(nullptr);
        static info::CryptoPP__HashVerificationFilterLastPut4_clbk CryptoPP__HashVerificationFilterLastPut4_user(nullptr);
        static info::CryptoPP__HashVerificationFilterNextPutMultiple5_ptr CryptoPP__HashVerificationFilterNextPutMultiple5_next(nullptr);
        static info::CryptoPP__HashVerificationFilterNextPutMultiple5_clbk CryptoPP__HashVerificationFilterNextPutMultiple5_user(nullptr);
        static info::CryptoPP__HashVerificationFilterdtor_HashVerificationFilter6_ptr CryptoPP__HashVerificationFilterdtor_HashVerificationFilter6_next(nullptr);
        static info::CryptoPP__HashVerificationFilterdtor_HashVerificationFilter6_clbk CryptoPP__HashVerificationFilterdtor_HashVerificationFilter6_user(nullptr);
        
        static info::CryptoPP__HashVerificationFilter__HashVerificationFailedctor_HashVerificationFailed1_ptr CryptoPP__HashVerificationFilter__HashVerificationFailedctor_HashVerificationFailed1_next(nullptr);
        static info::CryptoPP__HashVerificationFilter__HashVerificationFailedctor_HashVerificationFailed1_clbk CryptoPP__HashVerificationFilter__HashVerificationFailedctor_HashVerificationFailed1_user(nullptr);
        static info::CryptoPP__HashVerificationFilter__HashVerificationFailedctor_HashVerificationFailed2_ptr CryptoPP__HashVerificationFilter__HashVerificationFailedctor_HashVerificationFailed2_next(nullptr);
        static info::CryptoPP__HashVerificationFilter__HashVerificationFailedctor_HashVerificationFailed2_clbk CryptoPP__HashVerificationFilter__HashVerificationFailedctor_HashVerificationFailed2_user(nullptr);
        static info::CryptoPP__HashVerificationFilter__HashVerificationFaileddtor_HashVerificationFailed3_ptr CryptoPP__HashVerificationFilter__HashVerificationFaileddtor_HashVerificationFailed3_next(nullptr);
        static info::CryptoPP__HashVerificationFilter__HashVerificationFaileddtor_HashVerificationFailed3_clbk CryptoPP__HashVerificationFilter__HashVerificationFaileddtor_HashVerificationFailed3_user(nullptr);
        
        static info::CryptoPP__AutoSeededX917RNGReseed1_ptr CryptoPP__AutoSeededX917RNGReseed1_next(nullptr);
        static info::CryptoPP__AutoSeededX917RNGReseed1_clbk CryptoPP__AutoSeededX917RNGReseed1_user(nullptr);
        
        static info::CryptoPP__BERSequenceDecoderctor_BERSequenceDecoder1_ptr CryptoPP__BERSequenceDecoderctor_BERSequenceDecoder1_next(nullptr);
        static info::CryptoPP__BERSequenceDecoderctor_BERSequenceDecoder1_clbk CryptoPP__BERSequenceDecoderctor_BERSequenceDecoder1_user(nullptr);
        static info::CryptoPP__BERSequenceDecoderctor_BERSequenceDecoder2_ptr CryptoPP__BERSequenceDecoderctor_BERSequenceDecoder2_next(nullptr);
        static info::CryptoPP__BERSequenceDecoderctor_BERSequenceDecoder2_clbk CryptoPP__BERSequenceDecoderctor_BERSequenceDecoder2_user(nullptr);
        static info::CryptoPP__BERSequenceDecoderdtor_BERSequenceDecoder3_ptr CryptoPP__BERSequenceDecoderdtor_BERSequenceDecoder3_next(nullptr);
        static info::CryptoPP__BERSequenceDecoderdtor_BERSequenceDecoder3_clbk CryptoPP__BERSequenceDecoderdtor_BERSequenceDecoder3_user(nullptr);
        
        static info::CryptoPP__CBC_CTS_Encryptionctor_CBC_CTS_Encryption1_ptr CryptoPP__CBC_CTS_Encryptionctor_CBC_CTS_Encryption1_next(nullptr);
        static info::CryptoPP__CBC_CTS_Encryptionctor_CBC_CTS_Encryption1_clbk CryptoPP__CBC_CTS_Encryptionctor_CBC_CTS_Encryption1_user(nullptr);
        static info::CryptoPP__CBC_CTS_EncryptionMinLastBlockSize2_ptr CryptoPP__CBC_CTS_EncryptionMinLastBlockSize2_next(nullptr);
        static info::CryptoPP__CBC_CTS_EncryptionMinLastBlockSize2_clbk CryptoPP__CBC_CTS_EncryptionMinLastBlockSize2_user(nullptr);
        static info::CryptoPP__CBC_CTS_EncryptionProcessLastBlock3_ptr CryptoPP__CBC_CTS_EncryptionProcessLastBlock3_next(nullptr);
        static info::CryptoPP__CBC_CTS_EncryptionProcessLastBlock3_clbk CryptoPP__CBC_CTS_EncryptionProcessLastBlock3_user(nullptr);
        static info::CryptoPP__CBC_CTS_EncryptionUncheckedSetKey4_ptr CryptoPP__CBC_CTS_EncryptionUncheckedSetKey4_next(nullptr);
        static info::CryptoPP__CBC_CTS_EncryptionUncheckedSetKey4_clbk CryptoPP__CBC_CTS_EncryptionUncheckedSetKey4_user(nullptr);
        static info::CryptoPP__CBC_CTS_Encryptiondtor_CBC_CTS_Encryption5_ptr CryptoPP__CBC_CTS_Encryptiondtor_CBC_CTS_Encryption5_next(nullptr);
        static info::CryptoPP__CBC_CTS_Encryptiondtor_CBC_CTS_Encryption5_clbk CryptoPP__CBC_CTS_Encryptiondtor_CBC_CTS_Encryption5_user(nullptr);
        
        static info::CryptoPP__CBC_CTS_Decryptionctor_CBC_CTS_Decryption1_ptr CryptoPP__CBC_CTS_Decryptionctor_CBC_CTS_Decryption1_next(nullptr);
        static info::CryptoPP__CBC_CTS_Decryptionctor_CBC_CTS_Decryption1_clbk CryptoPP__CBC_CTS_Decryptionctor_CBC_CTS_Decryption1_user(nullptr);
        static info::CryptoPP__CBC_CTS_DecryptionMinLastBlockSize2_ptr CryptoPP__CBC_CTS_DecryptionMinLastBlockSize2_next(nullptr);
        static info::CryptoPP__CBC_CTS_DecryptionMinLastBlockSize2_clbk CryptoPP__CBC_CTS_DecryptionMinLastBlockSize2_user(nullptr);
        static info::CryptoPP__CBC_CTS_DecryptionProcessLastBlock3_ptr CryptoPP__CBC_CTS_DecryptionProcessLastBlock3_next(nullptr);
        static info::CryptoPP__CBC_CTS_DecryptionProcessLastBlock3_clbk CryptoPP__CBC_CTS_DecryptionProcessLastBlock3_user(nullptr);
        static info::CryptoPP__CBC_CTS_Decryptiondtor_CBC_CTS_Decryption4_ptr CryptoPP__CBC_CTS_Decryptiondtor_CBC_CTS_Decryption4_next(nullptr);
        static info::CryptoPP__CBC_CTS_Decryptiondtor_CBC_CTS_Decryption4_clbk CryptoPP__CBC_CTS_Decryptiondtor_CBC_CTS_Decryption4_user(nullptr);
        
        static info::CryptoPP__GF2NPPClone1_ptr CryptoPP__GF2NPPClone1_next(nullptr);
        static info::CryptoPP__GF2NPPClone1_clbk CryptoPP__GF2NPPClone1_user(nullptr);
        static info::CryptoPP__GF2NPPDEREncode2_ptr CryptoPP__GF2NPPDEREncode2_next(nullptr);
        static info::CryptoPP__GF2NPPDEREncode2_clbk CryptoPP__GF2NPPDEREncode2_user(nullptr);
        static info::CryptoPP__GF2NPPctor_GF2NPP3_ptr CryptoPP__GF2NPPctor_GF2NPP3_next(nullptr);
        static info::CryptoPP__GF2NPPctor_GF2NPP3_clbk CryptoPP__GF2NPPctor_GF2NPP3_user(nullptr);
        static info::CryptoPP__GF2NPPctor_GF2NPP4_ptr CryptoPP__GF2NPPctor_GF2NPP4_next(nullptr);
        static info::CryptoPP__GF2NPPctor_GF2NPP4_clbk CryptoPP__GF2NPPctor_GF2NPP4_user(nullptr);
        static info::CryptoPP__GF2NPPdtor_GF2NPP5_ptr CryptoPP__GF2NPPdtor_GF2NPP5_next(nullptr);
        static info::CryptoPP__GF2NPPdtor_GF2NPP5_clbk CryptoPP__GF2NPPdtor_GF2NPP5_user(nullptr);
        
        static info::CryptoPP__SHA512InitState1_ptr CryptoPP__SHA512InitState1_next(nullptr);
        static info::CryptoPP__SHA512InitState1_clbk CryptoPP__SHA512InitState1_user(nullptr);
        static info::CryptoPP__SHA512Transform2_ptr CryptoPP__SHA512Transform2_next(nullptr);
        static info::CryptoPP__SHA512Transform2_clbk CryptoPP__SHA512Transform2_user(nullptr);
        
        static info::CryptoPP__HMACAccessHash2_ptr CryptoPP__HMACAccessHash2_next(nullptr);
        static info::CryptoPP__HMACAccessHash2_clbk CryptoPP__HMACAccessHash2_user(nullptr);
        static info::CryptoPP__HMACAlgorithmName4_ptr CryptoPP__HMACAlgorithmName4_next(nullptr);
        static info::CryptoPP__HMACAlgorithmName4_clbk CryptoPP__HMACAlgorithmName4_user(nullptr);
        static info::CryptoPP__HMACctor_HMAC6_ptr CryptoPP__HMACctor_HMAC6_next(nullptr);
        static info::CryptoPP__HMACctor_HMAC6_clbk CryptoPP__HMACctor_HMAC6_user(nullptr);
        static info::CryptoPP__HMACStaticAlgorithmName8_ptr CryptoPP__HMACStaticAlgorithmName8_next(nullptr);
        static info::CryptoPP__HMACStaticAlgorithmName8_clbk CryptoPP__HMACStaticAlgorithmName8_user(nullptr);
        static info::CryptoPP__HMACdtor_HMAC13_ptr CryptoPP__HMACdtor_HMAC13_next(nullptr);
        static info::CryptoPP__HMACdtor_HMAC13_clbk CryptoPP__HMACdtor_HMAC13_user(nullptr);
        
        static info::CryptoPP__DL_EncryptionAlgorithm_Xorctor_DL_EncryptionAlgorithm_Xor2_ptr CryptoPP__DL_EncryptionAlgorithm_Xorctor_DL_EncryptionAlgorithm_Xor2_next(nullptr);
        static info::CryptoPP__DL_EncryptionAlgorithm_Xorctor_DL_EncryptionAlgorithm_Xor2_clbk CryptoPP__DL_EncryptionAlgorithm_Xorctor_DL_EncryptionAlgorithm_Xor2_user(nullptr);
        static info::CryptoPP__DL_EncryptionAlgorithm_XorGetMaxSymmetricPlaintextLength4_ptr CryptoPP__DL_EncryptionAlgorithm_XorGetMaxSymmetricPlaintextLength4_next(nullptr);
        static info::CryptoPP__DL_EncryptionAlgorithm_XorGetMaxSymmetricPlaintextLength4_clbk CryptoPP__DL_EncryptionAlgorithm_XorGetMaxSymmetricPlaintextLength4_user(nullptr);
        static info::CryptoPP__DL_EncryptionAlgorithm_XorGetSymmetricCiphertextLength6_ptr CryptoPP__DL_EncryptionAlgorithm_XorGetSymmetricCiphertextLength6_next(nullptr);
        static info::CryptoPP__DL_EncryptionAlgorithm_XorGetSymmetricCiphertextLength6_clbk CryptoPP__DL_EncryptionAlgorithm_XorGetSymmetricCiphertextLength6_user(nullptr);
        static info::CryptoPP__DL_EncryptionAlgorithm_XorGetSymmetricKeyLength8_ptr CryptoPP__DL_EncryptionAlgorithm_XorGetSymmetricKeyLength8_next(nullptr);
        static info::CryptoPP__DL_EncryptionAlgorithm_XorGetSymmetricKeyLength8_clbk CryptoPP__DL_EncryptionAlgorithm_XorGetSymmetricKeyLength8_user(nullptr);
        static info::CryptoPP__DL_EncryptionAlgorithm_XorParameterSupported10_ptr CryptoPP__DL_EncryptionAlgorithm_XorParameterSupported10_next(nullptr);
        static info::CryptoPP__DL_EncryptionAlgorithm_XorParameterSupported10_clbk CryptoPP__DL_EncryptionAlgorithm_XorParameterSupported10_user(nullptr);
        static info::CryptoPP__DL_EncryptionAlgorithm_XorSymmetricDecrypt12_ptr CryptoPP__DL_EncryptionAlgorithm_XorSymmetricDecrypt12_next(nullptr);
        static info::CryptoPP__DL_EncryptionAlgorithm_XorSymmetricDecrypt12_clbk CryptoPP__DL_EncryptionAlgorithm_XorSymmetricDecrypt12_user(nullptr);
        static info::CryptoPP__DL_EncryptionAlgorithm_XorSymmetricEncrypt14_ptr CryptoPP__DL_EncryptionAlgorithm_XorSymmetricEncrypt14_next(nullptr);
        static info::CryptoPP__DL_EncryptionAlgorithm_XorSymmetricEncrypt14_clbk CryptoPP__DL_EncryptionAlgorithm_XorSymmetricEncrypt14_user(nullptr);
        
        static info::CryptoPP__MaurerRandomnessTestBytesNeeded1_ptr CryptoPP__MaurerRandomnessTestBytesNeeded1_next(nullptr);
        static info::CryptoPP__MaurerRandomnessTestBytesNeeded1_clbk CryptoPP__MaurerRandomnessTestBytesNeeded1_user(nullptr);
        static info::CryptoPP__MaurerRandomnessTestGetTestValue2_ptr CryptoPP__MaurerRandomnessTestGetTestValue2_next(nullptr);
        static info::CryptoPP__MaurerRandomnessTestGetTestValue2_clbk CryptoPP__MaurerRandomnessTestGetTestValue2_user(nullptr);
        static info::CryptoPP__MaurerRandomnessTestctor_MaurerRandomnessTest3_ptr CryptoPP__MaurerRandomnessTestctor_MaurerRandomnessTest3_next(nullptr);
        static info::CryptoPP__MaurerRandomnessTestctor_MaurerRandomnessTest3_clbk CryptoPP__MaurerRandomnessTestctor_MaurerRandomnessTest3_user(nullptr);
        static info::CryptoPP__MaurerRandomnessTestPut24_ptr CryptoPP__MaurerRandomnessTestPut24_next(nullptr);
        static info::CryptoPP__MaurerRandomnessTestPut24_clbk CryptoPP__MaurerRandomnessTestPut24_user(nullptr);
        static info::CryptoPP__MaurerRandomnessTestdtor_MaurerRandomnessTest5_ptr CryptoPP__MaurerRandomnessTestdtor_MaurerRandomnessTest5_next(nullptr);
        static info::CryptoPP__MaurerRandomnessTestdtor_MaurerRandomnessTest5_clbk CryptoPP__MaurerRandomnessTestdtor_MaurerRandomnessTest5_user(nullptr);
        
        static info::CryptoPP__BitBucketctor_BitBucket1_ptr CryptoPP__BitBucketctor_BitBucket1_next(nullptr);
        static info::CryptoPP__BitBucketctor_BitBucket1_clbk CryptoPP__BitBucketctor_BitBucket1_user(nullptr);
        static info::CryptoPP__BitBucketIsolatedInitialize2_ptr CryptoPP__BitBucketIsolatedInitialize2_next(nullptr);
        static info::CryptoPP__BitBucketIsolatedInitialize2_clbk CryptoPP__BitBucketIsolatedInitialize2_user(nullptr);
        static info::CryptoPP__BitBucketPut23_ptr CryptoPP__BitBucketPut23_next(nullptr);
        static info::CryptoPP__BitBucketPut23_clbk CryptoPP__BitBucketPut23_user(nullptr);
        static info::CryptoPP__BitBucketdtor_BitBucket4_ptr CryptoPP__BitBucketdtor_BitBucket4_next(nullptr);
        static info::CryptoPP__BitBucketdtor_BitBucket4_clbk CryptoPP__BitBucketdtor_BitBucket4_user(nullptr);
        
        static info::CryptoPP__TF_SignerBaseInputRecoverableMessage1_ptr CryptoPP__TF_SignerBaseInputRecoverableMessage1_next(nullptr);
        static info::CryptoPP__TF_SignerBaseInputRecoverableMessage1_clbk CryptoPP__TF_SignerBaseInputRecoverableMessage1_user(nullptr);
        static info::CryptoPP__TF_SignerBaseSignAndRestart2_ptr CryptoPP__TF_SignerBaseSignAndRestart2_next(nullptr);
        static info::CryptoPP__TF_SignerBaseSignAndRestart2_clbk CryptoPP__TF_SignerBaseSignAndRestart2_user(nullptr);
        
        static info::CryptoPP__UnknownOIDctor_UnknownOID1_ptr CryptoPP__UnknownOIDctor_UnknownOID1_next(nullptr);
        static info::CryptoPP__UnknownOIDctor_UnknownOID1_clbk CryptoPP__UnknownOIDctor_UnknownOID1_user(nullptr);
        static info::CryptoPP__UnknownOIDctor_UnknownOID2_ptr CryptoPP__UnknownOIDctor_UnknownOID2_next(nullptr);
        static info::CryptoPP__UnknownOIDctor_UnknownOID2_clbk CryptoPP__UnknownOIDctor_UnknownOID2_user(nullptr);
        static info::CryptoPP__UnknownOIDdtor_UnknownOID3_ptr CryptoPP__UnknownOIDdtor_UnknownOID3_next(nullptr);
        static info::CryptoPP__UnknownOIDdtor_UnknownOID3_clbk CryptoPP__UnknownOIDdtor_UnknownOID3_user(nullptr);
        
        static info::CryptoPP__EncodedObjectFilterCurrentTarget1_ptr CryptoPP__EncodedObjectFilterCurrentTarget1_next(nullptr);
        static info::CryptoPP__EncodedObjectFilterCurrentTarget1_clbk CryptoPP__EncodedObjectFilterCurrentTarget1_user(nullptr);
        static info::CryptoPP__EncodedObjectFilterPut2_ptr CryptoPP__EncodedObjectFilterPut2_next(nullptr);
        static info::CryptoPP__EncodedObjectFilterPut2_clbk CryptoPP__EncodedObjectFilterPut2_user(nullptr);
        
        static info::CryptoPP__SelfTestFailurector_SelfTestFailure1_ptr CryptoPP__SelfTestFailurector_SelfTestFailure1_next(nullptr);
        static info::CryptoPP__SelfTestFailurector_SelfTestFailure1_clbk CryptoPP__SelfTestFailurector_SelfTestFailure1_user(nullptr);
        static info::CryptoPP__SelfTestFailuredtor_SelfTestFailure2_ptr CryptoPP__SelfTestFailuredtor_SelfTestFailure2_next(nullptr);
        static info::CryptoPP__SelfTestFailuredtor_SelfTestFailure2_clbk CryptoPP__SelfTestFailuredtor_SelfTestFailure2_user(nullptr);
        
        static info::CryptoPP__RandomNumberStoreStoreInitialize1_ptr CryptoPP__RandomNumberStoreStoreInitialize1_next(nullptr);
        static info::CryptoPP__RandomNumberStoreStoreInitialize1_clbk CryptoPP__RandomNumberStoreStoreInitialize1_user(nullptr);
        
        static info::CryptoPP__HashInputTooLongctor_HashInputTooLong1_ptr CryptoPP__HashInputTooLongctor_HashInputTooLong1_next(nullptr);
        static info::CryptoPP__HashInputTooLongctor_HashInputTooLong1_clbk CryptoPP__HashInputTooLongctor_HashInputTooLong1_user(nullptr);
        static info::CryptoPP__HashInputTooLongdtor_HashInputTooLong2_ptr CryptoPP__HashInputTooLongdtor_HashInputTooLong2_next(nullptr);
        static info::CryptoPP__HashInputTooLongdtor_HashInputTooLong2_clbk CryptoPP__HashInputTooLongdtor_HashInputTooLong2_user(nullptr);
        
        static info::CryptoPP__RedirectorGetPassSignals1_ptr CryptoPP__RedirectorGetPassSignals1_next(nullptr);
        static info::CryptoPP__RedirectorGetPassSignals1_clbk CryptoPP__RedirectorGetPassSignals1_user(nullptr);
        static info::CryptoPP__RedirectorInitialize2_ptr CryptoPP__RedirectorInitialize2_next(nullptr);
        static info::CryptoPP__RedirectorInitialize2_clbk CryptoPP__RedirectorInitialize2_user(nullptr);
        
        static info::CryptoPP__TF_EncryptorBaseEncrypt1_ptr CryptoPP__TF_EncryptorBaseEncrypt1_next(nullptr);
        static info::CryptoPP__TF_EncryptorBaseEncrypt1_clbk CryptoPP__TF_EncryptorBaseEncrypt1_user(nullptr);
        
        static info::CryptoPP__SHA224InitState1_ptr CryptoPP__SHA224InitState1_next(nullptr);
        static info::CryptoPP__SHA224InitState1_clbk CryptoPP__SHA224InitState1_user(nullptr);
        
        static info::CryptoPP__InvalidKeyLengthctor_InvalidKeyLength1_ptr CryptoPP__InvalidKeyLengthctor_InvalidKeyLength1_next(nullptr);
        static info::CryptoPP__InvalidKeyLengthctor_InvalidKeyLength1_clbk CryptoPP__InvalidKeyLengthctor_InvalidKeyLength1_user(nullptr);
        static info::CryptoPP__InvalidKeyLengthdtor_InvalidKeyLength2_ptr CryptoPP__InvalidKeyLengthdtor_InvalidKeyLength2_next(nullptr);
        static info::CryptoPP__InvalidKeyLengthdtor_InvalidKeyLength2_clbk CryptoPP__InvalidKeyLengthdtor_InvalidKeyLength2_user(nullptr);
        
        static info::CryptoPP__InvalidCiphertextctor_InvalidCiphertext1_ptr CryptoPP__InvalidCiphertextctor_InvalidCiphertext1_next(nullptr);
        static info::CryptoPP__InvalidCiphertextctor_InvalidCiphertext1_clbk CryptoPP__InvalidCiphertextctor_InvalidCiphertext1_user(nullptr);
        static info::CryptoPP__InvalidCiphertextdtor_InvalidCiphertext2_ptr CryptoPP__InvalidCiphertextdtor_InvalidCiphertext2_next(nullptr);
        static info::CryptoPP__InvalidCiphertextdtor_InvalidCiphertext2_clbk CryptoPP__InvalidCiphertextdtor_InvalidCiphertext2_user(nullptr);
        
        static info::CryptoPP__AuthenticatedKeyAgreementDomainGenerateEphemeralKeyPair1_ptr CryptoPP__AuthenticatedKeyAgreementDomainGenerateEphemeralKeyPair1_next(nullptr);
        static info::CryptoPP__AuthenticatedKeyAgreementDomainGenerateEphemeralKeyPair1_clbk CryptoPP__AuthenticatedKeyAgreementDomainGenerateEphemeralKeyPair1_user(nullptr);
        static info::CryptoPP__AuthenticatedKeyAgreementDomainGenerateStaticKeyPair2_ptr CryptoPP__AuthenticatedKeyAgreementDomainGenerateStaticKeyPair2_next(nullptr);
        static info::CryptoPP__AuthenticatedKeyAgreementDomainGenerateStaticKeyPair2_clbk CryptoPP__AuthenticatedKeyAgreementDomainGenerateStaticKeyPair2_user(nullptr);
        
        static info::CryptoPP__NonblockingRngGenerateBlock1_ptr CryptoPP__NonblockingRngGenerateBlock1_next(nullptr);
        static info::CryptoPP__NonblockingRngGenerateBlock1_clbk CryptoPP__NonblockingRngGenerateBlock1_user(nullptr);
        static info::CryptoPP__NonblockingRngctor_NonblockingRng2_ptr CryptoPP__NonblockingRngctor_NonblockingRng2_next(nullptr);
        static info::CryptoPP__NonblockingRngctor_NonblockingRng2_clbk CryptoPP__NonblockingRngctor_NonblockingRng2_user(nullptr);
        static info::CryptoPP__NonblockingRngdtor_NonblockingRng3_ptr CryptoPP__NonblockingRngdtor_NonblockingRng3_next(nullptr);
        static info::CryptoPP__NonblockingRngdtor_NonblockingRng3_clbk CryptoPP__NonblockingRngdtor_NonblockingRng3_user(nullptr);
        
        static info::CryptoPP__StreamTransformationFilterFirstPut1_ptr CryptoPP__StreamTransformationFilterFirstPut1_next(nullptr);
        static info::CryptoPP__StreamTransformationFilterFirstPut1_clbk CryptoPP__StreamTransformationFilterFirstPut1_user(nullptr);
        static info::CryptoPP__StreamTransformationFilterLastBlockSize2_ptr CryptoPP__StreamTransformationFilterLastBlockSize2_next(nullptr);
        static info::CryptoPP__StreamTransformationFilterLastBlockSize2_clbk CryptoPP__StreamTransformationFilterLastBlockSize2_user(nullptr);
        static info::CryptoPP__StreamTransformationFilterLastPut3_ptr CryptoPP__StreamTransformationFilterLastPut3_next(nullptr);
        static info::CryptoPP__StreamTransformationFilterLastPut3_clbk CryptoPP__StreamTransformationFilterLastPut3_user(nullptr);
        static info::CryptoPP__StreamTransformationFilterNextPutModifiable4_ptr CryptoPP__StreamTransformationFilterNextPutModifiable4_next(nullptr);
        static info::CryptoPP__StreamTransformationFilterNextPutModifiable4_clbk CryptoPP__StreamTransformationFilterNextPutModifiable4_user(nullptr);
        static info::CryptoPP__StreamTransformationFilterNextPutMultiple5_ptr CryptoPP__StreamTransformationFilterNextPutMultiple5_next(nullptr);
        static info::CryptoPP__StreamTransformationFilterNextPutMultiple5_clbk CryptoPP__StreamTransformationFilterNextPutMultiple5_user(nullptr);
        static info::CryptoPP__StreamTransformationFilterctor_StreamTransformationFilter6_ptr CryptoPP__StreamTransformationFilterctor_StreamTransformationFilter6_next(nullptr);
        static info::CryptoPP__StreamTransformationFilterctor_StreamTransformationFilter6_clbk CryptoPP__StreamTransformationFilterctor_StreamTransformationFilter6_user(nullptr);
        static info::CryptoPP__StreamTransformationFilterdtor_StreamTransformationFilter7_ptr CryptoPP__StreamTransformationFilterdtor_StreamTransformationFilter7_next(nullptr);
        static info::CryptoPP__StreamTransformationFilterdtor_StreamTransformationFilter7_clbk CryptoPP__StreamTransformationFilterdtor_StreamTransformationFilter7_user(nullptr);
        
        static info::CryptoPP__SignerFilterIsolatedInitialize1_ptr CryptoPP__SignerFilterIsolatedInitialize1_next(nullptr);
        static info::CryptoPP__SignerFilterIsolatedInitialize1_clbk CryptoPP__SignerFilterIsolatedInitialize1_user(nullptr);
        static info::CryptoPP__SignerFilterPut22_ptr CryptoPP__SignerFilterPut22_next(nullptr);
        static info::CryptoPP__SignerFilterPut22_clbk CryptoPP__SignerFilterPut22_user(nullptr);
        
        static info::CryptoPP__DERGeneralEncoderctor_DERGeneralEncoder1_ptr CryptoPP__DERGeneralEncoderctor_DERGeneralEncoder1_next(nullptr);
        static info::CryptoPP__DERGeneralEncoderctor_DERGeneralEncoder1_clbk CryptoPP__DERGeneralEncoderctor_DERGeneralEncoder1_user(nullptr);
        static info::CryptoPP__DERGeneralEncoderctor_DERGeneralEncoder2_ptr CryptoPP__DERGeneralEncoderctor_DERGeneralEncoder2_next(nullptr);
        static info::CryptoPP__DERGeneralEncoderctor_DERGeneralEncoder2_clbk CryptoPP__DERGeneralEncoderctor_DERGeneralEncoder2_user(nullptr);
        static info::CryptoPP__DERGeneralEncoderMessageEnd3_ptr CryptoPP__DERGeneralEncoderMessageEnd3_next(nullptr);
        static info::CryptoPP__DERGeneralEncoderMessageEnd3_clbk CryptoPP__DERGeneralEncoderMessageEnd3_user(nullptr);
        static info::CryptoPP__DERGeneralEncoderdtor_DERGeneralEncoder4_ptr CryptoPP__DERGeneralEncoderdtor_DERGeneralEncoder4_next(nullptr);
        static info::CryptoPP__DERGeneralEncoderdtor_DERGeneralEncoder4_clbk CryptoPP__DERGeneralEncoderdtor_DERGeneralEncoder4_user(nullptr);
        
        
        static info::CryptoPP__Rijndael__Basector_Base2_ptr CryptoPP__Rijndael__Basector_Base2_next(nullptr);
        static info::CryptoPP__Rijndael__Basector_Base2_clbk CryptoPP__Rijndael__Basector_Base2_user(nullptr);
        static info::CryptoPP__Rijndael__Basector_Base4_ptr CryptoPP__Rijndael__Basector_Base4_next(nullptr);
        static info::CryptoPP__Rijndael__Basector_Base4_clbk CryptoPP__Rijndael__Basector_Base4_user(nullptr);
        static info::CryptoPP__Rijndael__BaseUncheckedSetKey5_ptr CryptoPP__Rijndael__BaseUncheckedSetKey5_next(nullptr);
        static info::CryptoPP__Rijndael__BaseUncheckedSetKey5_clbk CryptoPP__Rijndael__BaseUncheckedSetKey5_user(nullptr);
        static info::CryptoPP__Rijndael__Basedtor_Base7_ptr CryptoPP__Rijndael__Basedtor_Base7_next(nullptr);
        static info::CryptoPP__Rijndael__Basedtor_Base7_clbk CryptoPP__Rijndael__Basedtor_Base7_user(nullptr);
        
        static info::CryptoPP__Rijndael__Decctor_Dec2_ptr CryptoPP__Rijndael__Decctor_Dec2_next(nullptr);
        static info::CryptoPP__Rijndael__Decctor_Dec2_clbk CryptoPP__Rijndael__Decctor_Dec2_user(nullptr);
        static info::CryptoPP__Rijndael__Decctor_Dec4_ptr CryptoPP__Rijndael__Decctor_Dec4_next(nullptr);
        static info::CryptoPP__Rijndael__Decctor_Dec4_clbk CryptoPP__Rijndael__Decctor_Dec4_user(nullptr);
        static info::CryptoPP__Rijndael__DecProcessAndXorBlock5_ptr CryptoPP__Rijndael__DecProcessAndXorBlock5_next(nullptr);
        static info::CryptoPP__Rijndael__DecProcessAndXorBlock5_clbk CryptoPP__Rijndael__DecProcessAndXorBlock5_user(nullptr);
        static info::CryptoPP__Rijndael__Decdtor_Dec7_ptr CryptoPP__Rijndael__Decdtor_Dec7_next(nullptr);
        static info::CryptoPP__Rijndael__Decdtor_Dec7_clbk CryptoPP__Rijndael__Decdtor_Dec7_user(nullptr);
        
        static info::CryptoPP__Rijndael__Encctor_Enc2_ptr CryptoPP__Rijndael__Encctor_Enc2_next(nullptr);
        static info::CryptoPP__Rijndael__Encctor_Enc2_clbk CryptoPP__Rijndael__Encctor_Enc2_user(nullptr);
        static info::CryptoPP__Rijndael__Encctor_Enc4_ptr CryptoPP__Rijndael__Encctor_Enc4_next(nullptr);
        static info::CryptoPP__Rijndael__Encctor_Enc4_clbk CryptoPP__Rijndael__Encctor_Enc4_user(nullptr);
        static info::CryptoPP__Rijndael__EncProcessAndXorBlock5_ptr CryptoPP__Rijndael__EncProcessAndXorBlock5_next(nullptr);
        static info::CryptoPP__Rijndael__EncProcessAndXorBlock5_clbk CryptoPP__Rijndael__EncProcessAndXorBlock5_user(nullptr);
        static info::CryptoPP__Rijndael__Encdtor_Enc7_ptr CryptoPP__Rijndael__Encdtor_Enc7_next(nullptr);
        static info::CryptoPP__Rijndael__Encdtor_Enc7_clbk CryptoPP__Rijndael__Encdtor_Enc7_user(nullptr);
        
        static info::CryptoPP__NullStoreMaxRetrievable1_ptr CryptoPP__NullStoreMaxRetrievable1_next(nullptr);
        static info::CryptoPP__NullStoreMaxRetrievable1_clbk CryptoPP__NullStoreMaxRetrievable1_user(nullptr);
        static info::CryptoPP__NullStorector_NullStore2_ptr CryptoPP__NullStorector_NullStore2_next(nullptr);
        static info::CryptoPP__NullStorector_NullStore2_clbk CryptoPP__NullStorector_NullStore2_user(nullptr);
        static info::CryptoPP__NullStoreStoreInitialize3_ptr CryptoPP__NullStoreStoreInitialize3_next(nullptr);
        static info::CryptoPP__NullStoreStoreInitialize3_clbk CryptoPP__NullStoreStoreInitialize3_user(nullptr);
        static info::CryptoPP__NullStoredtor_NullStore4_ptr CryptoPP__NullStoredtor_NullStore4_next(nullptr);
        static info::CryptoPP__NullStoredtor_NullStore4_clbk CryptoPP__NullStoredtor_NullStore4_user(nullptr);
        
        static info::CryptoPP__DERSequenceEncoderctor_DERSequenceEncoder1_ptr CryptoPP__DERSequenceEncoderctor_DERSequenceEncoder1_next(nullptr);
        static info::CryptoPP__DERSequenceEncoderctor_DERSequenceEncoder1_clbk CryptoPP__DERSequenceEncoderctor_DERSequenceEncoder1_user(nullptr);
        static info::CryptoPP__DERSequenceEncoderctor_DERSequenceEncoder2_ptr CryptoPP__DERSequenceEncoderctor_DERSequenceEncoder2_next(nullptr);
        static info::CryptoPP__DERSequenceEncoderctor_DERSequenceEncoder2_clbk CryptoPP__DERSequenceEncoderctor_DERSequenceEncoder2_user(nullptr);
        static info::CryptoPP__DERSequenceEncoderdtor_DERSequenceEncoder3_ptr CryptoPP__DERSequenceEncoderdtor_DERSequenceEncoder3_next(nullptr);
        static info::CryptoPP__DERSequenceEncoderdtor_DERSequenceEncoder3_clbk CryptoPP__DERSequenceEncoderdtor_DERSequenceEncoder3_user(nullptr);
        
        static info::CryptoPP__DL_SignatureMessageEncodingMethod_NRComputeMessageRepresentative1_ptr CryptoPP__DL_SignatureMessageEncodingMethod_NRComputeMessageRepresentative1_next(nullptr);
        static info::CryptoPP__DL_SignatureMessageEncodingMethod_NRComputeMessageRepresentative1_clbk CryptoPP__DL_SignatureMessageEncodingMethod_NRComputeMessageRepresentative1_user(nullptr);
        static info::CryptoPP__DL_SignatureMessageEncodingMethod_NRctor_DL_SignatureMessageEncodingMethod_NR2_ptr CryptoPP__DL_SignatureMessageEncodingMethod_NRctor_DL_SignatureMessageEncodingMethod_NR2_next(nullptr);
        static info::CryptoPP__DL_SignatureMessageEncodingMethod_NRctor_DL_SignatureMessageEncodingMethod_NR2_clbk CryptoPP__DL_SignatureMessageEncodingMethod_NRctor_DL_SignatureMessageEncodingMethod_NR2_user(nullptr);
        static info::CryptoPP__DL_SignatureMessageEncodingMethod_NRdtor_DL_SignatureMessageEncodingMethod_NR3_ptr CryptoPP__DL_SignatureMessageEncodingMethod_NRdtor_DL_SignatureMessageEncodingMethod_NR3_next(nullptr);
        static info::CryptoPP__DL_SignatureMessageEncodingMethod_NRdtor_DL_SignatureMessageEncodingMethod_NR3_clbk CryptoPP__DL_SignatureMessageEncodingMethod_NRdtor_DL_SignatureMessageEncodingMethod_NR3_user(nullptr);
        
        static info::CryptoPP__P1363_KDF2DeriveKey2_ptr CryptoPP__P1363_KDF2DeriveKey2_next(nullptr);
        static info::CryptoPP__P1363_KDF2DeriveKey2_clbk CryptoPP__P1363_KDF2DeriveKey2_user(nullptr);
        
        static info::CryptoPP__OS_RNG_Errctor_OS_RNG_Err1_ptr CryptoPP__OS_RNG_Errctor_OS_RNG_Err1_next(nullptr);
        static info::CryptoPP__OS_RNG_Errctor_OS_RNG_Err1_clbk CryptoPP__OS_RNG_Errctor_OS_RNG_Err1_user(nullptr);
        static info::CryptoPP__OS_RNG_Errdtor_OS_RNG_Err2_ptr CryptoPP__OS_RNG_Errdtor_OS_RNG_Err2_next(nullptr);
        static info::CryptoPP__OS_RNG_Errdtor_OS_RNG_Err2_clbk CryptoPP__OS_RNG_Errdtor_OS_RNG_Err2_user(nullptr);
        
        static info::CryptoPP__CombinedNameValuePairsctor_CombinedNameValuePairs1_ptr CryptoPP__CombinedNameValuePairsctor_CombinedNameValuePairs1_next(nullptr);
        static info::CryptoPP__CombinedNameValuePairsctor_CombinedNameValuePairs1_clbk CryptoPP__CombinedNameValuePairsctor_CombinedNameValuePairs1_user(nullptr);
        static info::CryptoPP__CombinedNameValuePairsGetVoidValue2_ptr CryptoPP__CombinedNameValuePairsGetVoidValue2_next(nullptr);
        static info::CryptoPP__CombinedNameValuePairsGetVoidValue2_clbk CryptoPP__CombinedNameValuePairsGetVoidValue2_user(nullptr);
        static info::CryptoPP__CombinedNameValuePairsdtor_CombinedNameValuePairs3_ptr CryptoPP__CombinedNameValuePairsdtor_CombinedNameValuePairs3_next(nullptr);
        static info::CryptoPP__CombinedNameValuePairsdtor_CombinedNameValuePairs3_clbk CryptoPP__CombinedNameValuePairsdtor_CombinedNameValuePairs3_user(nullptr);
        
        static info::CryptoPP__FileStorector_FileStore2_ptr CryptoPP__FileStorector_FileStore2_next(nullptr);
        static info::CryptoPP__FileStorector_FileStore2_clbk CryptoPP__FileStorector_FileStore2_user(nullptr);
        static info::CryptoPP__FileStoreMaxRetrievable3_ptr CryptoPP__FileStoreMaxRetrievable3_next(nullptr);
        static info::CryptoPP__FileStoreMaxRetrievable3_clbk CryptoPP__FileStoreMaxRetrievable3_user(nullptr);
        static info::CryptoPP__FileStoreSkip4_ptr CryptoPP__FileStoreSkip4_next(nullptr);
        static info::CryptoPP__FileStoreSkip4_clbk CryptoPP__FileStoreSkip4_user(nullptr);
        static info::CryptoPP__FileStoreStoreInitialize5_ptr CryptoPP__FileStoreStoreInitialize5_next(nullptr);
        static info::CryptoPP__FileStoreStoreInitialize5_clbk CryptoPP__FileStoreStoreInitialize5_user(nullptr);
        static info::CryptoPP__FileStoredtor_FileStore10_ptr CryptoPP__FileStoredtor_FileStore10_next(nullptr);
        static info::CryptoPP__FileStoredtor_FileStore10_clbk CryptoPP__FileStoredtor_FileStore10_user(nullptr);
        
        static info::CryptoPP__FileStore__Errctor_Err1_ptr CryptoPP__FileStore__Errctor_Err1_next(nullptr);
        static info::CryptoPP__FileStore__Errctor_Err1_clbk CryptoPP__FileStore__Errctor_Err1_user(nullptr);
        static info::CryptoPP__FileStore__Errdtor_Err2_ptr CryptoPP__FileStore__Errdtor_Err2_next(nullptr);
        static info::CryptoPP__FileStore__Errdtor_Err2_clbk CryptoPP__FileStore__Errdtor_Err2_user(nullptr);
        
        static info::CryptoPP__FileStore__OpenErrctor_OpenErr1_ptr CryptoPP__FileStore__OpenErrctor_OpenErr1_next(nullptr);
        static info::CryptoPP__FileStore__OpenErrctor_OpenErr1_clbk CryptoPP__FileStore__OpenErrctor_OpenErr1_user(nullptr);
        static info::CryptoPP__FileStore__OpenErrdtor_OpenErr2_ptr CryptoPP__FileStore__OpenErrdtor_OpenErr2_next(nullptr);
        static info::CryptoPP__FileStore__OpenErrdtor_OpenErr2_clbk CryptoPP__FileStore__OpenErrdtor_OpenErr2_user(nullptr);
        
        static info::CryptoPP__FileStore__ReadErrctor_ReadErr1_ptr CryptoPP__FileStore__ReadErrctor_ReadErr1_next(nullptr);
        static info::CryptoPP__FileStore__ReadErrctor_ReadErr1_clbk CryptoPP__FileStore__ReadErrctor_ReadErr1_user(nullptr);
        static info::CryptoPP__FileStore__ReadErrctor_ReadErr2_ptr CryptoPP__FileStore__ReadErrctor_ReadErr2_next(nullptr);
        static info::CryptoPP__FileStore__ReadErrctor_ReadErr2_clbk CryptoPP__FileStore__ReadErrctor_ReadErr2_user(nullptr);
        static info::CryptoPP__FileStore__ReadErrdtor_ReadErr3_ptr CryptoPP__FileStore__ReadErrdtor_ReadErr3_next(nullptr);
        static info::CryptoPP__FileStore__ReadErrdtor_ReadErr3_clbk CryptoPP__FileStore__ReadErrdtor_ReadErr3_user(nullptr);
        
        static info::CryptoPP__SourceTemplateGetAutoSignalPropagation2_ptr CryptoPP__SourceTemplateGetAutoSignalPropagation2_next(nullptr);
        static info::CryptoPP__SourceTemplateGetAutoSignalPropagation2_clbk CryptoPP__SourceTemplateGetAutoSignalPropagation2_user(nullptr);
        static info::CryptoPP__SourceTemplateIsolatedInitialize4_ptr CryptoPP__SourceTemplateIsolatedInitialize4_next(nullptr);
        static info::CryptoPP__SourceTemplateIsolatedInitialize4_clbk CryptoPP__SourceTemplateIsolatedInitialize4_user(nullptr);
        static info::CryptoPP__SourceTemplatePump26_ptr CryptoPP__SourceTemplatePump26_next(nullptr);
        static info::CryptoPP__SourceTemplatePump26_clbk CryptoPP__SourceTemplatePump26_user(nullptr);
        static info::CryptoPP__SourceTemplatePumpAll28_ptr CryptoPP__SourceTemplatePumpAll28_next(nullptr);
        static info::CryptoPP__SourceTemplatePumpAll28_clbk CryptoPP__SourceTemplatePumpAll28_user(nullptr);
        static info::CryptoPP__SourceTemplatePumpMessages210_ptr CryptoPP__SourceTemplatePumpMessages210_next(nullptr);
        static info::CryptoPP__SourceTemplatePumpMessages210_clbk CryptoPP__SourceTemplatePumpMessages210_user(nullptr);
        static info::CryptoPP__SourceTemplateSetAutoSignalPropagation12_ptr CryptoPP__SourceTemplateSetAutoSignalPropagation12_next(nullptr);
        static info::CryptoPP__SourceTemplateSetAutoSignalPropagation12_clbk CryptoPP__SourceTemplateSetAutoSignalPropagation12_user(nullptr);
        static info::CryptoPP__SourceTemplateSourceExhausted14_ptr CryptoPP__SourceTemplateSourceExhausted14_next(nullptr);
        static info::CryptoPP__SourceTemplateSourceExhausted14_clbk CryptoPP__SourceTemplateSourceExhausted14_user(nullptr);
        static info::CryptoPP__SourceTemplatector_SourceTemplate16_ptr CryptoPP__SourceTemplatector_SourceTemplate16_next(nullptr);
        static info::CryptoPP__SourceTemplatector_SourceTemplate16_clbk CryptoPP__SourceTemplatector_SourceTemplate16_user(nullptr);
        static info::CryptoPP__SourceTemplatedtor_SourceTemplate21_ptr CryptoPP__SourceTemplatedtor_SourceTemplate21_next(nullptr);
        static info::CryptoPP__SourceTemplatedtor_SourceTemplate21_clbk CryptoPP__SourceTemplatedtor_SourceTemplate21_user(nullptr);
        
        static info::CryptoPP__FileSourcector_FileSource1_ptr CryptoPP__FileSourcector_FileSource1_next(nullptr);
        static info::CryptoPP__FileSourcector_FileSource1_clbk CryptoPP__FileSourcector_FileSource1_user(nullptr);
        static info::CryptoPP__FileSourcector_FileSource3_ptr CryptoPP__FileSourcector_FileSource3_next(nullptr);
        static info::CryptoPP__FileSourcector_FileSource3_clbk CryptoPP__FileSourcector_FileSource3_user(nullptr);
        static info::CryptoPP__FileSourcedtor_FileSource8_ptr CryptoPP__FileSourcedtor_FileSource8_next(nullptr);
        static info::CryptoPP__FileSourcedtor_FileSource8_clbk CryptoPP__FileSourcedtor_FileSource8_user(nullptr);
        
        static info::CryptoPP__FileSinkctor_FileSink1_ptr CryptoPP__FileSinkctor_FileSink1_next(nullptr);
        static info::CryptoPP__FileSinkctor_FileSink1_clbk CryptoPP__FileSinkctor_FileSink1_user(nullptr);
        static info::CryptoPP__FileSinkIsolatedFlush2_ptr CryptoPP__FileSinkIsolatedFlush2_next(nullptr);
        static info::CryptoPP__FileSinkIsolatedFlush2_clbk CryptoPP__FileSinkIsolatedFlush2_user(nullptr);
        static info::CryptoPP__FileSinkIsolatedInitialize3_ptr CryptoPP__FileSinkIsolatedInitialize3_next(nullptr);
        static info::CryptoPP__FileSinkIsolatedInitialize3_clbk CryptoPP__FileSinkIsolatedInitialize3_user(nullptr);
        static info::CryptoPP__FileSinkPut24_ptr CryptoPP__FileSinkPut24_next(nullptr);
        static info::CryptoPP__FileSinkPut24_clbk CryptoPP__FileSinkPut24_user(nullptr);
        static info::CryptoPP__FileSinkdtor_FileSink5_ptr CryptoPP__FileSinkdtor_FileSink5_next(nullptr);
        static info::CryptoPP__FileSinkdtor_FileSink5_clbk CryptoPP__FileSinkdtor_FileSink5_user(nullptr);
        
        static info::CryptoPP__FileSink__Errctor_Err1_ptr CryptoPP__FileSink__Errctor_Err1_next(nullptr);
        static info::CryptoPP__FileSink__Errctor_Err1_clbk CryptoPP__FileSink__Errctor_Err1_user(nullptr);
        static info::CryptoPP__FileSink__Errdtor_Err2_ptr CryptoPP__FileSink__Errdtor_Err2_next(nullptr);
        static info::CryptoPP__FileSink__Errdtor_Err2_clbk CryptoPP__FileSink__Errdtor_Err2_user(nullptr);
        
        static info::CryptoPP__FileSink__OpenErrctor_OpenErr1_ptr CryptoPP__FileSink__OpenErrctor_OpenErr1_next(nullptr);
        static info::CryptoPP__FileSink__OpenErrctor_OpenErr1_clbk CryptoPP__FileSink__OpenErrctor_OpenErr1_user(nullptr);
        static info::CryptoPP__FileSink__OpenErrdtor_OpenErr2_ptr CryptoPP__FileSink__OpenErrdtor_OpenErr2_next(nullptr);
        static info::CryptoPP__FileSink__OpenErrdtor_OpenErr2_clbk CryptoPP__FileSink__OpenErrdtor_OpenErr2_user(nullptr);
        
        static info::CryptoPP__FileSink__WriteErrctor_WriteErr1_ptr CryptoPP__FileSink__WriteErrctor_WriteErr1_next(nullptr);
        static info::CryptoPP__FileSink__WriteErrctor_WriteErr1_clbk CryptoPP__FileSink__WriteErrctor_WriteErr1_user(nullptr);
        static info::CryptoPP__FileSink__WriteErrctor_WriteErr2_ptr CryptoPP__FileSink__WriteErrctor_WriteErr2_next(nullptr);
        static info::CryptoPP__FileSink__WriteErrctor_WriteErr2_clbk CryptoPP__FileSink__WriteErrctor_WriteErr2_user(nullptr);
        static info::CryptoPP__FileSink__WriteErrdtor_WriteErr3_ptr CryptoPP__FileSink__WriteErrdtor_WriteErr3_next(nullptr);
        static info::CryptoPP__FileSink__WriteErrdtor_WriteErr3_clbk CryptoPP__FileSink__WriteErrdtor_WriteErr3_user(nullptr);
        
        static info::CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase22_ptr CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase22_next(nullptr);
        static info::CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase22_clbk CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase22_user(nullptr);
        static info::CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase24_ptr CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase24_next(nullptr);
        static info::CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase24_clbk CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase24_user(nullptr);
        static info::CryptoPP__AlgorithmParametersBase2AssignValue6_ptr CryptoPP__AlgorithmParametersBase2AssignValue6_next(nullptr);
        static info::CryptoPP__AlgorithmParametersBase2AssignValue6_clbk CryptoPP__AlgorithmParametersBase2AssignValue6_user(nullptr);
        static info::CryptoPP__AlgorithmParametersBase2dtor_AlgorithmParametersBase211_ptr CryptoPP__AlgorithmParametersBase2dtor_AlgorithmParametersBase211_next(nullptr);
        static info::CryptoPP__AlgorithmParametersBase2dtor_AlgorithmParametersBase211_clbk CryptoPP__AlgorithmParametersBase2dtor_AlgorithmParametersBase211_user(nullptr);
        
        static info::CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase22_ptr CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase22_next(nullptr);
        static info::CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase22_clbk CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase22_user(nullptr);
        static info::CryptoPP__AlgorithmParametersBase2AssignValue4_ptr CryptoPP__AlgorithmParametersBase2AssignValue4_next(nullptr);
        static info::CryptoPP__AlgorithmParametersBase2AssignValue4_clbk CryptoPP__AlgorithmParametersBase2AssignValue4_user(nullptr);
        static info::CryptoPP__AlgorithmParametersBase2dtor_AlgorithmParametersBase29_ptr CryptoPP__AlgorithmParametersBase2dtor_AlgorithmParametersBase29_next(nullptr);
        static info::CryptoPP__AlgorithmParametersBase2dtor_AlgorithmParametersBase29_clbk CryptoPP__AlgorithmParametersBase2dtor_AlgorithmParametersBase29_user(nullptr);
        
        static info::CryptoPP__AlgorithmParametersctor_AlgorithmParameters2_ptr CryptoPP__AlgorithmParametersctor_AlgorithmParameters2_next(nullptr);
        static info::CryptoPP__AlgorithmParametersctor_AlgorithmParameters2_clbk CryptoPP__AlgorithmParametersctor_AlgorithmParameters2_user(nullptr);
        static info::CryptoPP__AlgorithmParametersctor_AlgorithmParameters4_ptr CryptoPP__AlgorithmParametersctor_AlgorithmParameters4_next(nullptr);
        static info::CryptoPP__AlgorithmParametersctor_AlgorithmParameters4_clbk CryptoPP__AlgorithmParametersctor_AlgorithmParameters4_user(nullptr);
        static info::CryptoPP__AlgorithmParametersGetParent6_ptr CryptoPP__AlgorithmParametersGetParent6_next(nullptr);
        static info::CryptoPP__AlgorithmParametersGetParent6_clbk CryptoPP__AlgorithmParametersGetParent6_user(nullptr);
        static info::CryptoPP__AlgorithmParametersdtor_AlgorithmParameters13_ptr CryptoPP__AlgorithmParametersdtor_AlgorithmParameters13_next(nullptr);
        static info::CryptoPP__AlgorithmParametersdtor_AlgorithmParameters13_clbk CryptoPP__AlgorithmParametersdtor_AlgorithmParameters13_user(nullptr);
        
        static info::CryptoPP__AlgorithmParametersctor_AlgorithmParameters2_ptr CryptoPP__AlgorithmParametersctor_AlgorithmParameters2_next(nullptr);
        static info::CryptoPP__AlgorithmParametersctor_AlgorithmParameters2_clbk CryptoPP__AlgorithmParametersctor_AlgorithmParameters2_user(nullptr);
        static info::CryptoPP__AlgorithmParametersGetParent4_ptr CryptoPP__AlgorithmParametersGetParent4_next(nullptr);
        static info::CryptoPP__AlgorithmParametersGetParent4_clbk CryptoPP__AlgorithmParametersGetParent4_user(nullptr);
        static info::CryptoPP__AlgorithmParametersdtor_AlgorithmParameters9_ptr CryptoPP__AlgorithmParametersdtor_AlgorithmParameters9_next(nullptr);
        static info::CryptoPP__AlgorithmParametersdtor_AlgorithmParameters9_clbk CryptoPP__AlgorithmParametersdtor_AlgorithmParameters9_user(nullptr);
        
        static info::CryptoPP__ByteQueueNodector_ByteQueueNode1_ptr CryptoPP__ByteQueueNodector_ByteQueueNode1_next(nullptr);
        static info::CryptoPP__ByteQueueNodector_ByteQueueNode1_clbk CryptoPP__ByteQueueNodector_ByteQueueNode1_user(nullptr);
        static info::CryptoPP__ByteQueueNodector_ByteQueueNode2_ptr CryptoPP__ByteQueueNodector_ByteQueueNode2_next(nullptr);
        static info::CryptoPP__ByteQueueNodector_ByteQueueNode2_clbk CryptoPP__ByteQueueNodector_ByteQueueNode2_user(nullptr);
        static info::CryptoPP__ByteQueueNodeClear3_ptr CryptoPP__ByteQueueNodeClear3_next(nullptr);
        static info::CryptoPP__ByteQueueNodeClear3_clbk CryptoPP__ByteQueueNodeClear3_user(nullptr);
        static info::CryptoPP__ByteQueueNodeCurrentSize4_ptr CryptoPP__ByteQueueNodeCurrentSize4_next(nullptr);
        static info::CryptoPP__ByteQueueNodeCurrentSize4_clbk CryptoPP__ByteQueueNodeCurrentSize4_user(nullptr);
        static info::CryptoPP__ByteQueueNodeGet5_ptr CryptoPP__ByteQueueNodeGet5_next(nullptr);
        static info::CryptoPP__ByteQueueNodeGet5_clbk CryptoPP__ByteQueueNodeGet5_user(nullptr);
        static info::CryptoPP__ByteQueueNodeMaxSize6_ptr CryptoPP__ByteQueueNodeMaxSize6_next(nullptr);
        static info::CryptoPP__ByteQueueNodeMaxSize6_clbk CryptoPP__ByteQueueNodeMaxSize6_user(nullptr);
        static info::CryptoPP__ByteQueueNodePeek7_ptr CryptoPP__ByteQueueNodePeek7_next(nullptr);
        static info::CryptoPP__ByteQueueNodePeek7_clbk CryptoPP__ByteQueueNodePeek7_user(nullptr);
        static info::CryptoPP__ByteQueueNodePut8_ptr CryptoPP__ByteQueueNodePut8_next(nullptr);
        static info::CryptoPP__ByteQueueNodePut8_clbk CryptoPP__ByteQueueNodePut8_user(nullptr);
        static info::CryptoPP__ByteQueueNodeUsedUp9_ptr CryptoPP__ByteQueueNodeUsedUp9_next(nullptr);
        static info::CryptoPP__ByteQueueNodeUsedUp9_clbk CryptoPP__ByteQueueNodeUsedUp9_user(nullptr);
        static info::CryptoPP__ByteQueueNodedtor_ByteQueueNode10_ptr CryptoPP__ByteQueueNodedtor_ByteQueueNode10_next(nullptr);
        static info::CryptoPP__ByteQueueNodedtor_ByteQueueNode10_clbk CryptoPP__ByteQueueNodedtor_ByteQueueNode10_user(nullptr);
        
        static info::CryptoPP__NameCofactor1_ptr CryptoPP__NameCofactor1_next(nullptr);
        static info::CryptoPP__NameCofactor1_clbk CryptoPP__NameCofactor1_user(nullptr);
        static info::CryptoPP__NameCurve2_ptr CryptoPP__NameCurve2_next(nullptr);
        static info::CryptoPP__NameCurve2_clbk CryptoPP__NameCurve2_user(nullptr);
        static info::CryptoPP__NameDecodingLookupArray3_ptr CryptoPP__NameDecodingLookupArray3_next(nullptr);
        static info::CryptoPP__NameDecodingLookupArray3_clbk CryptoPP__NameDecodingLookupArray3_user(nullptr);
        static info::CryptoPP__NameEncodingLookupArray4_ptr CryptoPP__NameEncodingLookupArray4_next(nullptr);
        static info::CryptoPP__NameEncodingLookupArray4_clbk CryptoPP__NameEncodingLookupArray4_user(nullptr);
        static info::CryptoPP__NameEncodingParameters6_ptr CryptoPP__NameEncodingParameters6_next(nullptr);
        static info::CryptoPP__NameEncodingParameters6_clbk CryptoPP__NameEncodingParameters6_user(nullptr);
        static info::CryptoPP__NameFeedbackSize7_ptr CryptoPP__NameFeedbackSize7_next(nullptr);
        static info::CryptoPP__NameFeedbackSize7_clbk CryptoPP__NameFeedbackSize7_user(nullptr);
        static info::CryptoPP__NameGroupOID8_ptr CryptoPP__NameGroupOID8_next(nullptr);
        static info::CryptoPP__NameGroupOID8_clbk CryptoPP__NameGroupOID8_user(nullptr);
        static info::CryptoPP__NameGroupSize9_ptr CryptoPP__NameGroupSize9_next(nullptr);
        static info::CryptoPP__NameGroupSize9_clbk CryptoPP__NameGroupSize9_user(nullptr);
        static info::CryptoPP__NameHashVerificationFilterFlags10_ptr CryptoPP__NameHashVerificationFilterFlags10_next(nullptr);
        static info::CryptoPP__NameHashVerificationFilterFlags10_clbk CryptoPP__NameHashVerificationFilterFlags10_user(nullptr);
        static info::CryptoPP__NameIV11_ptr CryptoPP__NameIV11_next(nullptr);
        static info::CryptoPP__NameIV11_clbk CryptoPP__NameIV11_user(nullptr);
        static info::CryptoPP__NameInputBinaryMode13_ptr CryptoPP__NameInputBinaryMode13_next(nullptr);
        static info::CryptoPP__NameInputBinaryMode13_clbk CryptoPP__NameInputBinaryMode13_user(nullptr);
        static info::CryptoPP__NameInputBuffer14_ptr CryptoPP__NameInputBuffer14_next(nullptr);
        static info::CryptoPP__NameInputBuffer14_clbk CryptoPP__NameInputBuffer14_user(nullptr);
        static info::CryptoPP__NameInputFileName16_ptr CryptoPP__NameInputFileName16_next(nullptr);
        static info::CryptoPP__NameInputFileName16_clbk CryptoPP__NameInputFileName16_user(nullptr);
        static info::CryptoPP__NameInputStreamPointer17_ptr CryptoPP__NameInputStreamPointer17_next(nullptr);
        static info::CryptoPP__NameInputStreamPointer17_clbk CryptoPP__NameInputStreamPointer17_user(nullptr);
        static info::CryptoPP__NameKeyDerivationParameters19_ptr CryptoPP__NameKeyDerivationParameters19_next(nullptr);
        static info::CryptoPP__NameKeyDerivationParameters19_clbk CryptoPP__NameKeyDerivationParameters19_user(nullptr);
        static info::CryptoPP__NameLog2Base20_ptr CryptoPP__NameLog2Base20_next(nullptr);
        static info::CryptoPP__NameLog2Base20_clbk CryptoPP__NameLog2Base20_user(nullptr);
        static info::CryptoPP__NameModulus21_ptr CryptoPP__NameModulus21_next(nullptr);
        static info::CryptoPP__NameModulus21_clbk CryptoPP__NameModulus21_user(nullptr);
        static info::CryptoPP__NameOutputBinaryMode22_ptr CryptoPP__NameOutputBinaryMode22_next(nullptr);
        static info::CryptoPP__NameOutputBinaryMode22_clbk CryptoPP__NameOutputBinaryMode22_user(nullptr);
        static info::CryptoPP__NameOutputBuffer23_ptr CryptoPP__NameOutputBuffer23_next(nullptr);
        static info::CryptoPP__NameOutputBuffer23_clbk CryptoPP__NameOutputBuffer23_user(nullptr);
        static info::CryptoPP__NameOutputFileName24_ptr CryptoPP__NameOutputFileName24_next(nullptr);
        static info::CryptoPP__NameOutputFileName24_clbk CryptoPP__NameOutputFileName24_user(nullptr);
        static info::CryptoPP__NameOutputStreamPointer25_ptr CryptoPP__NameOutputStreamPointer25_next(nullptr);
        static info::CryptoPP__NameOutputStreamPointer25_clbk CryptoPP__NameOutputStreamPointer25_user(nullptr);
        static info::CryptoPP__NamePad26_ptr CryptoPP__NamePad26_next(nullptr);
        static info::CryptoPP__NamePad26_clbk CryptoPP__NamePad26_user(nullptr);
        static info::CryptoPP__NamePaddingByte27_ptr CryptoPP__NamePaddingByte27_next(nullptr);
        static info::CryptoPP__NamePaddingByte27_clbk CryptoPP__NamePaddingByte27_user(nullptr);
        static info::CryptoPP__NamePointerToPrimeSelector28_ptr CryptoPP__NamePointerToPrimeSelector28_next(nullptr);
        static info::CryptoPP__NamePointerToPrimeSelector28_clbk CryptoPP__NamePointerToPrimeSelector28_user(nullptr);
        static info::CryptoPP__NamePrivateExponent30_ptr CryptoPP__NamePrivateExponent30_next(nullptr);
        static info::CryptoPP__NamePrivateExponent30_clbk CryptoPP__NamePrivateExponent30_user(nullptr);
        static info::CryptoPP__NamePublicElement32_ptr CryptoPP__NamePublicElement32_next(nullptr);
        static info::CryptoPP__NamePublicElement32_clbk CryptoPP__NamePublicElement32_user(nullptr);
        static info::CryptoPP__NamePutMessage33_ptr CryptoPP__NamePutMessage33_next(nullptr);
        static info::CryptoPP__NamePutMessage33_clbk CryptoPP__NamePutMessage33_user(nullptr);
        static info::CryptoPP__NameRounds34_ptr CryptoPP__NameRounds34_next(nullptr);
        static info::CryptoPP__NameRounds34_clbk CryptoPP__NameRounds34_user(nullptr);
        static info::CryptoPP__NameSeparator35_ptr CryptoPP__NameSeparator35_next(nullptr);
        static info::CryptoPP__NameSeparator35_clbk CryptoPP__NameSeparator35_user(nullptr);
        static info::CryptoPP__NameSignatureVerificationFilterFlags36_ptr CryptoPP__NameSignatureVerificationFilterFlags36_next(nullptr);
        static info::CryptoPP__NameSignatureVerificationFilterFlags36_clbk CryptoPP__NameSignatureVerificationFilterFlags36_user(nullptr);
        static info::CryptoPP__NameStolenIV37_ptr CryptoPP__NameStolenIV37_next(nullptr);
        static info::CryptoPP__NameStolenIV37_clbk CryptoPP__NameStolenIV37_user(nullptr);
        static info::CryptoPP__NameSubgroupGenerator39_ptr CryptoPP__NameSubgroupGenerator39_next(nullptr);
        static info::CryptoPP__NameSubgroupGenerator39_clbk CryptoPP__NameSubgroupGenerator39_user(nullptr);
        static info::CryptoPP__NameSubgroupOrder41_ptr CryptoPP__NameSubgroupOrder41_next(nullptr);
        static info::CryptoPP__NameSubgroupOrder41_clbk CryptoPP__NameSubgroupOrder41_user(nullptr);
        static info::CryptoPP__NameTerminator42_ptr CryptoPP__NameTerminator42_next(nullptr);
        static info::CryptoPP__NameTerminator42_clbk CryptoPP__NameTerminator42_user(nullptr);
        static info::CryptoPP__NameTruncatedDigestSize43_ptr CryptoPP__NameTruncatedDigestSize43_next(nullptr);
        static info::CryptoPP__NameTruncatedDigestSize43_clbk CryptoPP__NameTruncatedDigestSize43_user(nullptr);
        static info::CryptoPP__NameUppercase44_ptr CryptoPP__NameUppercase44_next(nullptr);
        static info::CryptoPP__NameUppercase44_clbk CryptoPP__NameUppercase44_user(nullptr);
        
        static info::CryptoPP__BaseN_Decoderctor_BaseN_Decoder1_ptr CryptoPP__BaseN_Decoderctor_BaseN_Decoder1_next(nullptr);
        static info::CryptoPP__BaseN_Decoderctor_BaseN_Decoder1_clbk CryptoPP__BaseN_Decoderctor_BaseN_Decoder1_user(nullptr);
        static info::CryptoPP__BaseN_DecoderInitializeDecodingLookupArray2_ptr CryptoPP__BaseN_DecoderInitializeDecodingLookupArray2_next(nullptr);
        static info::CryptoPP__BaseN_DecoderInitializeDecodingLookupArray2_clbk CryptoPP__BaseN_DecoderInitializeDecodingLookupArray2_user(nullptr);
        static info::CryptoPP__BaseN_DecoderIsolatedInitialize3_ptr CryptoPP__BaseN_DecoderIsolatedInitialize3_next(nullptr);
        static info::CryptoPP__BaseN_DecoderIsolatedInitialize3_clbk CryptoPP__BaseN_DecoderIsolatedInitialize3_user(nullptr);
        static info::CryptoPP__BaseN_DecoderPut24_ptr CryptoPP__BaseN_DecoderPut24_next(nullptr);
        static info::CryptoPP__BaseN_DecoderPut24_clbk CryptoPP__BaseN_DecoderPut24_user(nullptr);
        static info::CryptoPP__BaseN_Decoderdtor_BaseN_Decoder5_ptr CryptoPP__BaseN_Decoderdtor_BaseN_Decoder5_next(nullptr);
        static info::CryptoPP__BaseN_Decoderdtor_BaseN_Decoder5_clbk CryptoPP__BaseN_Decoderdtor_BaseN_Decoder5_user(nullptr);
        
        static info::CryptoPP__HexDecoderGetDefaultDecodingLookupArray1_ptr CryptoPP__HexDecoderGetDefaultDecodingLookupArray1_next(nullptr);
        static info::CryptoPP__HexDecoderGetDefaultDecodingLookupArray1_clbk CryptoPP__HexDecoderGetDefaultDecodingLookupArray1_user(nullptr);
        static info::CryptoPP__HexDecoderctor_HexDecoder2_ptr CryptoPP__HexDecoderctor_HexDecoder2_next(nullptr);
        static info::CryptoPP__HexDecoderctor_HexDecoder2_clbk CryptoPP__HexDecoderctor_HexDecoder2_user(nullptr);
        static info::CryptoPP__HexDecoderIsolatedInitialize3_ptr CryptoPP__HexDecoderIsolatedInitialize3_next(nullptr);
        static info::CryptoPP__HexDecoderIsolatedInitialize3_clbk CryptoPP__HexDecoderIsolatedInitialize3_user(nullptr);
        static info::CryptoPP__HexDecoderdtor_HexDecoder4_ptr CryptoPP__HexDecoderdtor_HexDecoder4_next(nullptr);
        static info::CryptoPP__HexDecoderdtor_HexDecoder4_clbk CryptoPP__HexDecoderdtor_HexDecoder4_user(nullptr);
        
        static info::CryptoPP__WindowSliderFindNextWindow1_ptr CryptoPP__WindowSliderFindNextWindow1_next(nullptr);
        static info::CryptoPP__WindowSliderFindNextWindow1_clbk CryptoPP__WindowSliderFindNextWindow1_user(nullptr);
        static info::CryptoPP__WindowSliderctor_WindowSlider2_ptr CryptoPP__WindowSliderctor_WindowSlider2_next(nullptr);
        static info::CryptoPP__WindowSliderctor_WindowSlider2_clbk CryptoPP__WindowSliderctor_WindowSlider2_user(nullptr);
        static info::CryptoPP__WindowSliderctor_WindowSlider3_ptr CryptoPP__WindowSliderctor_WindowSlider3_next(nullptr);
        static info::CryptoPP__WindowSliderctor_WindowSlider3_clbk CryptoPP__WindowSliderctor_WindowSlider3_user(nullptr);
        static info::CryptoPP__WindowSliderdtor_WindowSlider4_ptr CryptoPP__WindowSliderdtor_WindowSlider4_next(nullptr);
        static info::CryptoPP__WindowSliderdtor_WindowSlider4_clbk CryptoPP__WindowSliderdtor_WindowSlider4_user(nullptr);
        
        static info::CryptoPP__DWordctor_DWord1_ptr CryptoPP__DWordctor_DWord1_next(nullptr);
        static info::CryptoPP__DWordctor_DWord1_clbk CryptoPP__DWordctor_DWord1_user(nullptr);
        static info::CryptoPP__DWordctor_DWord2_ptr CryptoPP__DWordctor_DWord2_next(nullptr);
        static info::CryptoPP__DWordctor_DWord2_clbk CryptoPP__DWordctor_DWord2_user(nullptr);
        static info::CryptoPP__DWordctor_DWord3_ptr CryptoPP__DWordctor_DWord3_next(nullptr);
        static info::CryptoPP__DWordctor_DWord3_clbk CryptoPP__DWordctor_DWord3_user(nullptr);
        static info::CryptoPP__DWordGetHighHalf4_ptr CryptoPP__DWordGetHighHalf4_next(nullptr);
        static info::CryptoPP__DWordGetHighHalf4_clbk CryptoPP__DWordGetHighHalf4_user(nullptr);
        static info::CryptoPP__DWordGetHighHalfAsBorrow5_ptr CryptoPP__DWordGetHighHalfAsBorrow5_next(nullptr);
        static info::CryptoPP__DWordGetHighHalfAsBorrow5_clbk CryptoPP__DWordGetHighHalfAsBorrow5_user(nullptr);
        static info::CryptoPP__DWordGetLowHalf6_ptr CryptoPP__DWordGetLowHalf6_next(nullptr);
        static info::CryptoPP__DWordGetLowHalf6_clbk CryptoPP__DWordGetLowHalf6_user(nullptr);
        
        static info::CryptoPP__KDF2_RNGGenerateBlock1_ptr CryptoPP__KDF2_RNGGenerateBlock1_next(nullptr);
        static info::CryptoPP__KDF2_RNGGenerateBlock1_clbk CryptoPP__KDF2_RNGGenerateBlock1_user(nullptr);
        static info::CryptoPP__KDF2_RNGctor_KDF2_RNG2_ptr CryptoPP__KDF2_RNGctor_KDF2_RNG2_next(nullptr);
        static info::CryptoPP__KDF2_RNGctor_KDF2_RNG2_clbk CryptoPP__KDF2_RNGctor_KDF2_RNG2_user(nullptr);
        static info::CryptoPP__KDF2_RNGdtor_KDF2_RNG3_ptr CryptoPP__KDF2_RNGdtor_KDF2_RNG3_next(nullptr);
        static info::CryptoPP__KDF2_RNGdtor_KDF2_RNG3_clbk CryptoPP__KDF2_RNGdtor_KDF2_RNG3_user(nullptr);
        
        static info::CryptoPP__WordGetHighHalf1_ptr CryptoPP__WordGetHighHalf1_next(nullptr);
        static info::CryptoPP__WordGetHighHalf1_clbk CryptoPP__WordGetHighHalf1_user(nullptr);
        static info::CryptoPP__WordGetHighHalfAsBorrow2_ptr CryptoPP__WordGetHighHalfAsBorrow2_next(nullptr);
        static info::CryptoPP__WordGetHighHalfAsBorrow2_clbk CryptoPP__WordGetHighHalfAsBorrow2_user(nullptr);
        static info::CryptoPP__WordGetLowHalf3_ptr CryptoPP__WordGetLowHalf3_next(nullptr);
        static info::CryptoPP__WordGetLowHalf3_clbk CryptoPP__WordGetLowHalf3_user(nullptr);
        static info::CryptoPP__WordGetWhole4_ptr CryptoPP__WordGetWhole4_next(nullptr);
        static info::CryptoPP__WordGetWhole4_clbk CryptoPP__WordGetWhole4_user(nullptr);
        static info::CryptoPP__Wordctor_Word5_ptr CryptoPP__Wordctor_Word5_next(nullptr);
        static info::CryptoPP__Wordctor_Word5_clbk CryptoPP__Wordctor_Word5_user(nullptr);
        static info::CryptoPP__Wordctor_Word6_ptr CryptoPP__Wordctor_Word6_next(nullptr);
        static info::CryptoPP__Wordctor_Word6_clbk CryptoPP__Wordctor_Word6_user(nullptr);
        static info::CryptoPP__Wordctor_Word7_ptr CryptoPP__Wordctor_Word7_next(nullptr);
        static info::CryptoPP__Wordctor_Word7_clbk CryptoPP__Wordctor_Word7_user(nullptr);
        
        static info::CryptoPP__ClassNullRNGctor_ClassNullRNG1_ptr CryptoPP__ClassNullRNGctor_ClassNullRNG1_next(nullptr);
        static info::CryptoPP__ClassNullRNGctor_ClassNullRNG1_clbk CryptoPP__ClassNullRNGctor_ClassNullRNG1_user(nullptr);
        static info::CryptoPP__ClassNullRNGGenerateBlock2_ptr CryptoPP__ClassNullRNGGenerateBlock2_next(nullptr);
        static info::CryptoPP__ClassNullRNGGenerateBlock2_clbk CryptoPP__ClassNullRNGGenerateBlock2_user(nullptr);
        static info::CryptoPP__ClassNullRNGdtor_ClassNullRNG3_ptr CryptoPP__ClassNullRNGdtor_ClassNullRNG3_next(nullptr);
        static info::CryptoPP__ClassNullRNGdtor_ClassNullRNG3_clbk CryptoPP__ClassNullRNGdtor_ClassNullRNG3_user(nullptr);
        
        static info::CryptoPP__ProjectivePointctor_ProjectivePoint1_ptr CryptoPP__ProjectivePointctor_ProjectivePoint1_next(nullptr);
        static info::CryptoPP__ProjectivePointctor_ProjectivePoint1_clbk CryptoPP__ProjectivePointctor_ProjectivePoint1_user(nullptr);
        static info::CryptoPP__ProjectivePointctor_ProjectivePoint2_ptr CryptoPP__ProjectivePointctor_ProjectivePoint2_next(nullptr);
        static info::CryptoPP__ProjectivePointctor_ProjectivePoint2_clbk CryptoPP__ProjectivePointctor_ProjectivePoint2_user(nullptr);
        static info::CryptoPP__ProjectivePointdtor_ProjectivePoint3_ptr CryptoPP__ProjectivePointdtor_ProjectivePoint3_next(nullptr);
        static info::CryptoPP__ProjectivePointdtor_ProjectivePoint3_clbk CryptoPP__ProjectivePointdtor_ProjectivePoint3_user(nullptr);
        
        static info::CryptoPP__ProjectiveDoublingDouble1_ptr CryptoPP__ProjectiveDoublingDouble1_next(nullptr);
        static info::CryptoPP__ProjectiveDoublingDouble1_clbk CryptoPP__ProjectiveDoublingDouble1_user(nullptr);
        static info::CryptoPP__ProjectiveDoublingctor_ProjectiveDoubling2_ptr CryptoPP__ProjectiveDoublingctor_ProjectiveDoubling2_next(nullptr);
        static info::CryptoPP__ProjectiveDoublingctor_ProjectiveDoubling2_clbk CryptoPP__ProjectiveDoublingctor_ProjectiveDoubling2_user(nullptr);
        static info::CryptoPP__ProjectiveDoublingdtor_ProjectiveDoubling3_ptr CryptoPP__ProjectiveDoublingdtor_ProjectiveDoubling3_next(nullptr);
        static info::CryptoPP__ProjectiveDoublingdtor_ProjectiveDoubling3_clbk CryptoPP__ProjectiveDoublingdtor_ProjectiveDoubling3_user(nullptr);
        
        static info::CryptoPP__PrimeAndGeneratorGenerate1_ptr CryptoPP__PrimeAndGeneratorGenerate1_next(nullptr);
        static info::CryptoPP__PrimeAndGeneratorGenerate1_clbk CryptoPP__PrimeAndGeneratorGenerate1_user(nullptr);
        static info::CryptoPP__PrimeAndGeneratorctor_Generator2_ptr CryptoPP__PrimeAndGeneratorctor_Generator2_next(nullptr);
        static info::CryptoPP__PrimeAndGeneratorctor_Generator2_clbk CryptoPP__PrimeAndGeneratorctor_Generator2_user(nullptr);
        static info::CryptoPP__PrimeAndGeneratorPrime3_ptr CryptoPP__PrimeAndGeneratorPrime3_next(nullptr);
        static info::CryptoPP__PrimeAndGeneratorPrime3_clbk CryptoPP__PrimeAndGeneratorPrime3_user(nullptr);
        static info::CryptoPP__PrimeAndGeneratorctor_PrimeAndGenerator4_ptr CryptoPP__PrimeAndGeneratorctor_PrimeAndGenerator4_next(nullptr);
        static info::CryptoPP__PrimeAndGeneratorctor_PrimeAndGenerator4_clbk CryptoPP__PrimeAndGeneratorctor_PrimeAndGenerator4_user(nullptr);
        static info::CryptoPP__PrimeAndGeneratorSubPrime5_ptr CryptoPP__PrimeAndGeneratorSubPrime5_next(nullptr);
        static info::CryptoPP__PrimeAndGeneratorSubPrime5_clbk CryptoPP__PrimeAndGeneratorSubPrime5_user(nullptr);
        static info::CryptoPP__PrimeAndGeneratordtor_PrimeAndGenerator6_ptr CryptoPP__PrimeAndGeneratordtor_PrimeAndGenerator6_next(nullptr);
        static info::CryptoPP__PrimeAndGeneratordtor_PrimeAndGenerator6_clbk CryptoPP__PrimeAndGeneratordtor_PrimeAndGenerator6_user(nullptr);
        
        static info::CryptoPP__BaseN_EncoderIsolatedInitialize1_ptr CryptoPP__BaseN_EncoderIsolatedInitialize1_next(nullptr);
        static info::CryptoPP__BaseN_EncoderIsolatedInitialize1_clbk CryptoPP__BaseN_EncoderIsolatedInitialize1_user(nullptr);
        static info::CryptoPP__BaseN_EncoderPut22_ptr CryptoPP__BaseN_EncoderPut22_next(nullptr);
        static info::CryptoPP__BaseN_EncoderPut22_clbk CryptoPP__BaseN_EncoderPut22_user(nullptr);
        
        static info::CryptoPP__GrouperIsolatedInitialize1_ptr CryptoPP__GrouperIsolatedInitialize1_next(nullptr);
        static info::CryptoPP__GrouperIsolatedInitialize1_clbk CryptoPP__GrouperIsolatedInitialize1_user(nullptr);
        static info::CryptoPP__GrouperPut22_ptr CryptoPP__GrouperPut22_next(nullptr);
        static info::CryptoPP__GrouperPut22_clbk CryptoPP__GrouperPut22_user(nullptr);
        
        static info::CryptoPP__PrimeSieveDoSieve1_ptr CryptoPP__PrimeSieveDoSieve1_next(nullptr);
        static info::CryptoPP__PrimeSieveDoSieve1_clbk CryptoPP__PrimeSieveDoSieve1_user(nullptr);
        static info::CryptoPP__PrimeSieveNextCandidate2_ptr CryptoPP__PrimeSieveNextCandidate2_next(nullptr);
        static info::CryptoPP__PrimeSieveNextCandidate2_clbk CryptoPP__PrimeSieveNextCandidate2_user(nullptr);
        static info::CryptoPP__PrimeSievector_PrimeSieve3_ptr CryptoPP__PrimeSievector_PrimeSieve3_next(nullptr);
        static info::CryptoPP__PrimeSievector_PrimeSieve3_clbk CryptoPP__PrimeSievector_PrimeSieve3_user(nullptr);
        static info::CryptoPP__PrimeSievedtor_PrimeSieve4_ptr CryptoPP__PrimeSievedtor_PrimeSieve4_next(nullptr);
        static info::CryptoPP__PrimeSievedtor_PrimeSieve4_clbk CryptoPP__PrimeSievedtor_PrimeSieve4_user(nullptr);
        
        static info::CryptoPP__MessageQueueAnyRetrievable1_ptr CryptoPP__MessageQueueAnyRetrievable1_next(nullptr);
        static info::CryptoPP__MessageQueueAnyRetrievable1_clbk CryptoPP__MessageQueueAnyRetrievable1_user(nullptr);
        static info::CryptoPP__MessageQueueGetNextMessage2_ptr CryptoPP__MessageQueueGetNextMessage2_next(nullptr);
        static info::CryptoPP__MessageQueueGetNextMessage2_clbk CryptoPP__MessageQueueGetNextMessage2_user(nullptr);
        static info::CryptoPP__MessageQueueIsolatedFlush3_ptr CryptoPP__MessageQueueIsolatedFlush3_next(nullptr);
        static info::CryptoPP__MessageQueueIsolatedFlush3_clbk CryptoPP__MessageQueueIsolatedFlush3_user(nullptr);
        static info::CryptoPP__MessageQueueIsolatedInitialize4_ptr CryptoPP__MessageQueueIsolatedInitialize4_next(nullptr);
        static info::CryptoPP__MessageQueueIsolatedInitialize4_clbk CryptoPP__MessageQueueIsolatedInitialize4_user(nullptr);
        static info::CryptoPP__MessageQueueIsolatedMessageSeriesEnd5_ptr CryptoPP__MessageQueueIsolatedMessageSeriesEnd5_next(nullptr);
        static info::CryptoPP__MessageQueueIsolatedMessageSeriesEnd5_clbk CryptoPP__MessageQueueIsolatedMessageSeriesEnd5_user(nullptr);
        static info::CryptoPP__MessageQueueMaxRetrievable6_ptr CryptoPP__MessageQueueMaxRetrievable6_next(nullptr);
        static info::CryptoPP__MessageQueueMaxRetrievable6_clbk CryptoPP__MessageQueueMaxRetrievable6_user(nullptr);
        static info::CryptoPP__MessageQueuector_MessageQueue7_ptr CryptoPP__MessageQueuector_MessageQueue7_next(nullptr);
        static info::CryptoPP__MessageQueuector_MessageQueue7_clbk CryptoPP__MessageQueuector_MessageQueue7_user(nullptr);
        static info::CryptoPP__MessageQueueNumberOfMessageSeries8_ptr CryptoPP__MessageQueueNumberOfMessageSeries8_next(nullptr);
        static info::CryptoPP__MessageQueueNumberOfMessageSeries8_clbk CryptoPP__MessageQueueNumberOfMessageSeries8_user(nullptr);
        static info::CryptoPP__MessageQueueNumberOfMessages9_ptr CryptoPP__MessageQueueNumberOfMessages9_next(nullptr);
        static info::CryptoPP__MessageQueueNumberOfMessages9_clbk CryptoPP__MessageQueueNumberOfMessages9_user(nullptr);
        static info::CryptoPP__MessageQueueNumberOfMessagesInThisSeries10_ptr CryptoPP__MessageQueueNumberOfMessagesInThisSeries10_next(nullptr);
        static info::CryptoPP__MessageQueueNumberOfMessagesInThisSeries10_clbk CryptoPP__MessageQueueNumberOfMessagesInThisSeries10_user(nullptr);
        static info::CryptoPP__MessageQueuePut211_ptr CryptoPP__MessageQueuePut211_next(nullptr);
        static info::CryptoPP__MessageQueuePut211_clbk CryptoPP__MessageQueuePut211_user(nullptr);
        static info::CryptoPP__MessageQueueSpy12_ptr CryptoPP__MessageQueueSpy12_next(nullptr);
        static info::CryptoPP__MessageQueueSpy12_clbk CryptoPP__MessageQueueSpy12_user(nullptr);
        static info::CryptoPP__MessageQueueTotalBytesRetrievable13_ptr CryptoPP__MessageQueueTotalBytesRetrievable13_next(nullptr);
        static info::CryptoPP__MessageQueueTotalBytesRetrievable13_clbk CryptoPP__MessageQueueTotalBytesRetrievable13_user(nullptr);
        static info::CryptoPP__MessageQueueswap14_ptr CryptoPP__MessageQueueswap14_next(nullptr);
        static info::CryptoPP__MessageQueueswap14_clbk CryptoPP__MessageQueueswap14_user(nullptr);
        static info::CryptoPP__MessageQueuedtor_MessageQueue15_ptr CryptoPP__MessageQueuedtor_MessageQueue15_next(nullptr);
        static info::CryptoPP__MessageQueuedtor_MessageQueue15_clbk CryptoPP__MessageQueuedtor_MessageQueue15_user(nullptr);
        
        static info::CryptoPP__TimerBaseElapsedTime1_ptr CryptoPP__TimerBaseElapsedTime1_next(nullptr);
        static info::CryptoPP__TimerBaseElapsedTime1_clbk CryptoPP__TimerBaseElapsedTime1_user(nullptr);
        static info::CryptoPP__TimerBaseElapsedTimeAsDouble2_ptr CryptoPP__TimerBaseElapsedTimeAsDouble2_next(nullptr);
        static info::CryptoPP__TimerBaseElapsedTimeAsDouble2_clbk CryptoPP__TimerBaseElapsedTimeAsDouble2_user(nullptr);
        static info::CryptoPP__TimerBaseStartTimer3_ptr CryptoPP__TimerBaseStartTimer3_next(nullptr);
        static info::CryptoPP__TimerBaseStartTimer3_clbk CryptoPP__TimerBaseStartTimer3_user(nullptr);
        
        static info::CryptoPP__TimerGetCurrentTimerValue1_ptr CryptoPP__TimerGetCurrentTimerValue1_next(nullptr);
        static info::CryptoPP__TimerGetCurrentTimerValue1_clbk CryptoPP__TimerGetCurrentTimerValue1_user(nullptr);
        static info::CryptoPP__TimerTicksPerSecond2_ptr CryptoPP__TimerTicksPerSecond2_next(nullptr);
        static info::CryptoPP__TimerTicksPerSecond2_clbk CryptoPP__TimerTicksPerSecond2_user(nullptr);
        
        static info::CryptoPP__ThreadUserTimerGetCurrentTimerValue1_ptr CryptoPP__ThreadUserTimerGetCurrentTimerValue1_next(nullptr);
        static info::CryptoPP__ThreadUserTimerGetCurrentTimerValue1_clbk CryptoPP__ThreadUserTimerGetCurrentTimerValue1_user(nullptr);
        static info::CryptoPP__ThreadUserTimerTicksPerSecond2_ptr CryptoPP__ThreadUserTimerTicksPerSecond2_next(nullptr);
        static info::CryptoPP__ThreadUserTimerTicksPerSecond2_clbk CryptoPP__ThreadUserTimerTicksPerSecond2_user(nullptr);
        
        static info::CryptoPP__SosemanukPolicyCipherResynchronize1_ptr CryptoPP__SosemanukPolicyCipherResynchronize1_next(nullptr);
        static info::CryptoPP__SosemanukPolicyCipherResynchronize1_clbk CryptoPP__SosemanukPolicyCipherResynchronize1_user(nullptr);
        static info::CryptoPP__SosemanukPolicyCipherSetKey2_ptr CryptoPP__SosemanukPolicyCipherSetKey2_next(nullptr);
        static info::CryptoPP__SosemanukPolicyCipherSetKey2_clbk CryptoPP__SosemanukPolicyCipherSetKey2_user(nullptr);
        static info::CryptoPP__SosemanukPolicyGetAlignment3_ptr CryptoPP__SosemanukPolicyGetAlignment3_next(nullptr);
        static info::CryptoPP__SosemanukPolicyGetAlignment3_clbk CryptoPP__SosemanukPolicyGetAlignment3_user(nullptr);
        static info::CryptoPP__SosemanukPolicyGetOptimalBlockSize4_ptr CryptoPP__SosemanukPolicyGetOptimalBlockSize4_next(nullptr);
        static info::CryptoPP__SosemanukPolicyGetOptimalBlockSize4_clbk CryptoPP__SosemanukPolicyGetOptimalBlockSize4_user(nullptr);
        static info::CryptoPP__SosemanukPolicyOperateKeystream5_ptr CryptoPP__SosemanukPolicyOperateKeystream5_next(nullptr);
        static info::CryptoPP__SosemanukPolicyOperateKeystream5_clbk CryptoPP__SosemanukPolicyOperateKeystream5_user(nullptr);
        
        static info::CryptoPP__PK_DefaultEncryptionFilterctor_PK_DefaultEncryptionFilter1_ptr CryptoPP__PK_DefaultEncryptionFilterctor_PK_DefaultEncryptionFilter1_next(nullptr);
        static info::CryptoPP__PK_DefaultEncryptionFilterctor_PK_DefaultEncryptionFilter1_clbk CryptoPP__PK_DefaultEncryptionFilterctor_PK_DefaultEncryptionFilter1_user(nullptr);
        static info::CryptoPP__PK_DefaultEncryptionFilterPut22_ptr CryptoPP__PK_DefaultEncryptionFilterPut22_next(nullptr);
        static info::CryptoPP__PK_DefaultEncryptionFilterPut22_clbk CryptoPP__PK_DefaultEncryptionFilterPut22_user(nullptr);
        static info::CryptoPP__PK_DefaultEncryptionFilterdtor_PK_DefaultEncryptionFilter3_ptr CryptoPP__PK_DefaultEncryptionFilterdtor_PK_DefaultEncryptionFilter3_next(nullptr);
        static info::CryptoPP__PK_DefaultEncryptionFilterdtor_PK_DefaultEncryptionFilter3_clbk CryptoPP__PK_DefaultEncryptionFilterdtor_PK_DefaultEncryptionFilter3_user(nullptr);
        
        static info::CryptoPP__PK_DefaultDecryptionFilterctor_PK_DefaultDecryptionFilter1_ptr CryptoPP__PK_DefaultDecryptionFilterctor_PK_DefaultDecryptionFilter1_next(nullptr);
        static info::CryptoPP__PK_DefaultDecryptionFilterctor_PK_DefaultDecryptionFilter1_clbk CryptoPP__PK_DefaultDecryptionFilterctor_PK_DefaultDecryptionFilter1_user(nullptr);
        static info::CryptoPP__PK_DefaultDecryptionFilterPut22_ptr CryptoPP__PK_DefaultDecryptionFilterPut22_next(nullptr);
        static info::CryptoPP__PK_DefaultDecryptionFilterPut22_clbk CryptoPP__PK_DefaultDecryptionFilterPut22_user(nullptr);
        static info::CryptoPP__PK_DefaultDecryptionFilterdtor_PK_DefaultDecryptionFilter3_ptr CryptoPP__PK_DefaultDecryptionFilterdtor_PK_DefaultDecryptionFilter3_next(nullptr);
        static info::CryptoPP__PK_DefaultDecryptionFilterdtor_PK_DefaultDecryptionFilter3_clbk CryptoPP__PK_DefaultDecryptionFilterdtor_PK_DefaultDecryptionFilter3_user(nullptr);
        
        static info::CryptoPP__EqualityComparisonFilterHandleMismatchDetected1_ptr CryptoPP__EqualityComparisonFilterHandleMismatchDetected1_next(nullptr);
        static info::CryptoPP__EqualityComparisonFilterHandleMismatchDetected1_clbk CryptoPP__EqualityComparisonFilterHandleMismatchDetected1_user(nullptr);
        
        static info::CryptoPP__EqualityComparisonFilter__MismatchDetectedctor_MismatchDetected1_ptr CryptoPP__EqualityComparisonFilter__MismatchDetectedctor_MismatchDetected1_next(nullptr);
        static info::CryptoPP__EqualityComparisonFilter__MismatchDetectedctor_MismatchDetected1_clbk CryptoPP__EqualityComparisonFilter__MismatchDetectedctor_MismatchDetected1_user(nullptr);
        static info::CryptoPP__EqualityComparisonFilter__MismatchDetectedctor_MismatchDetected2_ptr CryptoPP__EqualityComparisonFilter__MismatchDetectedctor_MismatchDetected2_next(nullptr);
        static info::CryptoPP__EqualityComparisonFilter__MismatchDetectedctor_MismatchDetected2_clbk CryptoPP__EqualityComparisonFilter__MismatchDetectedctor_MismatchDetected2_user(nullptr);
        static info::CryptoPP__EqualityComparisonFilter__MismatchDetecteddtor_MismatchDetected3_ptr CryptoPP__EqualityComparisonFilter__MismatchDetecteddtor_MismatchDetected3_next(nullptr);
        static info::CryptoPP__EqualityComparisonFilter__MismatchDetecteddtor_MismatchDetected3_clbk CryptoPP__EqualityComparisonFilter__MismatchDetecteddtor_MismatchDetected3_user(nullptr);
        
        static info::CryptoPP__RawDESctor_RawDES1_ptr CryptoPP__RawDESctor_RawDES1_next(nullptr);
        static info::CryptoPP__RawDESctor_RawDES1_clbk CryptoPP__RawDESctor_RawDES1_user(nullptr);
        static info::CryptoPP__RawDESctor_RawDES2_ptr CryptoPP__RawDESctor_RawDES2_next(nullptr);
        static info::CryptoPP__RawDESctor_RawDES2_clbk CryptoPP__RawDESctor_RawDES2_user(nullptr);
        static info::CryptoPP__RawDESRawProcessBlock3_ptr CryptoPP__RawDESRawProcessBlock3_next(nullptr);
        static info::CryptoPP__RawDESRawProcessBlock3_clbk CryptoPP__RawDESRawProcessBlock3_user(nullptr);
        static info::CryptoPP__RawDESRawSetKey4_ptr CryptoPP__RawDESRawSetKey4_next(nullptr);
        static info::CryptoPP__RawDESRawSetKey4_clbk CryptoPP__RawDESRawSetKey4_user(nullptr);
        static info::CryptoPP__RawDESdtor_RawDES5_ptr CryptoPP__RawDESdtor_RawDES5_next(nullptr);
        static info::CryptoPP__RawDESdtor_RawDES5_clbk CryptoPP__RawDESdtor_RawDES5_user(nullptr);
        
        static info::CryptoPP__DES_EDE2__BaseProcessAndXorBlock1_ptr CryptoPP__DES_EDE2__BaseProcessAndXorBlock1_next(nullptr);
        static info::CryptoPP__DES_EDE2__BaseProcessAndXorBlock1_clbk CryptoPP__DES_EDE2__BaseProcessAndXorBlock1_user(nullptr);
        static info::CryptoPP__DES_EDE2__BaseUncheckedSetKey2_ptr CryptoPP__DES_EDE2__BaseUncheckedSetKey2_next(nullptr);
        static info::CryptoPP__DES_EDE2__BaseUncheckedSetKey2_clbk CryptoPP__DES_EDE2__BaseUncheckedSetKey2_user(nullptr);
        
        static info::CryptoPP__DES_EDE3__BaseProcessAndXorBlock1_ptr CryptoPP__DES_EDE3__BaseProcessAndXorBlock1_next(nullptr);
        static info::CryptoPP__DES_EDE3__BaseProcessAndXorBlock1_clbk CryptoPP__DES_EDE3__BaseProcessAndXorBlock1_user(nullptr);
        static info::CryptoPP__DES_EDE3__BaseUncheckedSetKey2_ptr CryptoPP__DES_EDE3__BaseUncheckedSetKey2_next(nullptr);
        static info::CryptoPP__DES_EDE3__BaseUncheckedSetKey2_clbk CryptoPP__DES_EDE3__BaseUncheckedSetKey2_user(nullptr);
        
        static info::CryptoPP__DES_XEX3__BaseProcessAndXorBlock1_ptr CryptoPP__DES_XEX3__BaseProcessAndXorBlock1_next(nullptr);
        static info::CryptoPP__DES_XEX3__BaseProcessAndXorBlock1_clbk CryptoPP__DES_XEX3__BaseProcessAndXorBlock1_user(nullptr);
        static info::CryptoPP__DES_XEX3__BaseUncheckedSetKey2_ptr CryptoPP__DES_XEX3__BaseUncheckedSetKey2_next(nullptr);
        static info::CryptoPP__DES_XEX3__BaseUncheckedSetKey2_clbk CryptoPP__DES_XEX3__BaseUncheckedSetKey2_user(nullptr);
        
        static info::CryptoPP__Serpent__EncProcessAndXorBlock1_ptr CryptoPP__Serpent__EncProcessAndXorBlock1_next(nullptr);
        static info::CryptoPP__Serpent__EncProcessAndXorBlock1_clbk CryptoPP__Serpent__EncProcessAndXorBlock1_user(nullptr);
        
        static info::CryptoPP__Serpent__DecProcessAndXorBlock1_ptr CryptoPP__Serpent__DecProcessAndXorBlock1_next(nullptr);
        static info::CryptoPP__Serpent__DecProcessAndXorBlock1_clbk CryptoPP__Serpent__DecProcessAndXorBlock1_user(nullptr);
        
        static info::CryptoPP__ZIteratorctor_ZIterator1_ptr CryptoPP__ZIteratorctor_ZIterator1_next(nullptr);
        static info::CryptoPP__ZIteratorctor_ZIterator1_clbk CryptoPP__ZIteratorctor_ZIterator1_user(nullptr);
        static info::CryptoPP__ZIteratorctor_ZIterator2_ptr CryptoPP__ZIteratorctor_ZIterator2_next(nullptr);
        static info::CryptoPP__ZIteratorctor_ZIterator2_clbk CryptoPP__ZIteratorctor_ZIterator2_user(nullptr);
        static info::CryptoPP__ZIteratordtor_ZIterator3_ptr CryptoPP__ZIteratordtor_ZIterator3_next(nullptr);
        static info::CryptoPP__ZIteratordtor_ZIterator3_clbk CryptoPP__ZIteratordtor_ZIterator3_user(nullptr);
        
        static info::CryptoPP__DES__Basector_Base1_ptr CryptoPP__DES__Basector_Base1_next(nullptr);
        static info::CryptoPP__DES__Basector_Base1_clbk CryptoPP__DES__Basector_Base1_user(nullptr);
        static info::CryptoPP__DES__Basector_Base2_ptr CryptoPP__DES__Basector_Base2_next(nullptr);
        static info::CryptoPP__DES__Basector_Base2_clbk CryptoPP__DES__Basector_Base2_user(nullptr);
        static info::CryptoPP__DES__BaseProcessAndXorBlock3_ptr CryptoPP__DES__BaseProcessAndXorBlock3_next(nullptr);
        static info::CryptoPP__DES__BaseProcessAndXorBlock3_clbk CryptoPP__DES__BaseProcessAndXorBlock3_user(nullptr);
        static info::CryptoPP__DES__BaseUncheckedSetKey4_ptr CryptoPP__DES__BaseUncheckedSetKey4_next(nullptr);
        static info::CryptoPP__DES__BaseUncheckedSetKey4_clbk CryptoPP__DES__BaseUncheckedSetKey4_user(nullptr);
        static info::CryptoPP__DES__Basedtor_Base5_ptr CryptoPP__DES__Basedtor_Base5_next(nullptr);
        static info::CryptoPP__DES__Basedtor_Base5_clbk CryptoPP__DES__Basedtor_Base5_user(nullptr);
        
        static info::CryptoPP__HexEncoderIsolatedInitialize1_ptr CryptoPP__HexEncoderIsolatedInitialize1_next(nullptr);
        static info::CryptoPP__HexEncoderIsolatedInitialize1_clbk CryptoPP__HexEncoderIsolatedInitialize1_user(nullptr);
        
        static info::CryptoPP__Serpent__BaseUncheckedSetKey1_ptr CryptoPP__Serpent__BaseUncheckedSetKey1_next(nullptr);
        static info::CryptoPP__Serpent__BaseUncheckedSetKey1_clbk CryptoPP__Serpent__BaseUncheckedSetKey1_user(nullptr);
        
        static info::CryptoPP__ASN1ansi_x9_571_ptr CryptoPP__ASN1ansi_x9_571_next(nullptr);
        static info::CryptoPP__ASN1ansi_x9_571_clbk CryptoPP__ASN1ansi_x9_571_user(nullptr);
        static info::CryptoPP__ASN1ansi_x9_622_ptr CryptoPP__ASN1ansi_x9_622_next(nullptr);
        static info::CryptoPP__ASN1ansi_x9_622_clbk CryptoPP__ASN1ansi_x9_622_user(nullptr);
        static info::CryptoPP__ASN1ansi_x9_62_curves3_ptr CryptoPP__ASN1ansi_x9_62_curves3_next(nullptr);
        static info::CryptoPP__ASN1ansi_x9_62_curves3_clbk CryptoPP__ASN1ansi_x9_62_curves3_user(nullptr);
        static info::CryptoPP__ASN1ansi_x9_62_curves_prime4_ptr CryptoPP__ASN1ansi_x9_62_curves_prime4_next(nullptr);
        static info::CryptoPP__ASN1ansi_x9_62_curves_prime4_clbk CryptoPP__ASN1ansi_x9_62_curves_prime4_user(nullptr);
        static info::CryptoPP__ASN1certicom5_ptr CryptoPP__ASN1certicom5_next(nullptr);
        static info::CryptoPP__ASN1certicom5_clbk CryptoPP__ASN1certicom5_user(nullptr);
        static info::CryptoPP__ASN1certicom_ellipticCurve6_ptr CryptoPP__ASN1certicom_ellipticCurve6_next(nullptr);
        static info::CryptoPP__ASN1certicom_ellipticCurve6_clbk CryptoPP__ASN1certicom_ellipticCurve6_user(nullptr);
        static info::CryptoPP__ASN1characteristic_two_field7_ptr CryptoPP__ASN1characteristic_two_field7_next(nullptr);
        static info::CryptoPP__ASN1characteristic_two_field7_clbk CryptoPP__ASN1characteristic_two_field7_user(nullptr);
        static info::CryptoPP__ASN1id_characteristic_two_basis8_ptr CryptoPP__ASN1id_characteristic_two_basis8_next(nullptr);
        static info::CryptoPP__ASN1id_characteristic_two_basis8_clbk CryptoPP__ASN1id_characteristic_two_basis8_user(nullptr);
        static info::CryptoPP__ASN1id_dsa9_ptr CryptoPP__ASN1id_dsa9_next(nullptr);
        static info::CryptoPP__ASN1id_dsa9_clbk CryptoPP__ASN1id_dsa9_user(nullptr);
        static info::CryptoPP__ASN1id_ecPublicKey10_ptr CryptoPP__ASN1id_ecPublicKey10_next(nullptr);
        static info::CryptoPP__ASN1id_ecPublicKey10_clbk CryptoPP__ASN1id_ecPublicKey10_user(nullptr);
        static info::CryptoPP__ASN1id_fieldType11_ptr CryptoPP__ASN1id_fieldType11_next(nullptr);
        static info::CryptoPP__ASN1id_fieldType11_clbk CryptoPP__ASN1id_fieldType11_user(nullptr);
        static info::CryptoPP__ASN1id_publicKeyType12_ptr CryptoPP__ASN1id_publicKeyType12_next(nullptr);
        static info::CryptoPP__ASN1id_publicKeyType12_clbk CryptoPP__ASN1id_publicKeyType12_user(nullptr);
        static info::CryptoPP__ASN1identified_organization13_ptr CryptoPP__ASN1identified_organization13_next(nullptr);
        static info::CryptoPP__ASN1identified_organization13_clbk CryptoPP__ASN1identified_organization13_user(nullptr);
        static info::CryptoPP__ASN1iso14_ptr CryptoPP__ASN1iso14_next(nullptr);
        static info::CryptoPP__ASN1iso14_clbk CryptoPP__ASN1iso14_user(nullptr);
        static info::CryptoPP__ASN1iso_us15_ptr CryptoPP__ASN1iso_us15_next(nullptr);
        static info::CryptoPP__ASN1iso_us15_clbk CryptoPP__ASN1iso_us15_user(nullptr);
        static info::CryptoPP__ASN1member_body16_ptr CryptoPP__ASN1member_body16_next(nullptr);
        static info::CryptoPP__ASN1member_body16_clbk CryptoPP__ASN1member_body16_user(nullptr);
        static info::CryptoPP__ASN1ppBasis17_ptr CryptoPP__ASN1ppBasis17_next(nullptr);
        static info::CryptoPP__ASN1ppBasis17_clbk CryptoPP__ASN1ppBasis17_user(nullptr);
        static info::CryptoPP__ASN1prime_field18_ptr CryptoPP__ASN1prime_field18_next(nullptr);
        static info::CryptoPP__ASN1prime_field18_clbk CryptoPP__ASN1prime_field18_user(nullptr);
        static info::CryptoPP__ASN1secp112r119_ptr CryptoPP__ASN1secp112r119_next(nullptr);
        static info::CryptoPP__ASN1secp112r119_clbk CryptoPP__ASN1secp112r119_user(nullptr);
        static info::CryptoPP__ASN1secp112r220_ptr CryptoPP__ASN1secp112r220_next(nullptr);
        static info::CryptoPP__ASN1secp112r220_clbk CryptoPP__ASN1secp112r220_user(nullptr);
        static info::CryptoPP__ASN1secp128r121_ptr CryptoPP__ASN1secp128r121_next(nullptr);
        static info::CryptoPP__ASN1secp128r121_clbk CryptoPP__ASN1secp128r121_user(nullptr);
        static info::CryptoPP__ASN1secp128r222_ptr CryptoPP__ASN1secp128r222_next(nullptr);
        static info::CryptoPP__ASN1secp128r222_clbk CryptoPP__ASN1secp128r222_user(nullptr);
        static info::CryptoPP__ASN1secp160k123_ptr CryptoPP__ASN1secp160k123_next(nullptr);
        static info::CryptoPP__ASN1secp160k123_clbk CryptoPP__ASN1secp160k123_user(nullptr);
        static info::CryptoPP__ASN1secp160r124_ptr CryptoPP__ASN1secp160r124_next(nullptr);
        static info::CryptoPP__ASN1secp160r124_clbk CryptoPP__ASN1secp160r124_user(nullptr);
        static info::CryptoPP__ASN1secp160r225_ptr CryptoPP__ASN1secp160r225_next(nullptr);
        static info::CryptoPP__ASN1secp160r225_clbk CryptoPP__ASN1secp160r225_user(nullptr);
        static info::CryptoPP__ASN1secp192k126_ptr CryptoPP__ASN1secp192k126_next(nullptr);
        static info::CryptoPP__ASN1secp192k126_clbk CryptoPP__ASN1secp192k126_user(nullptr);
        static info::CryptoPP__ASN1secp192r127_ptr CryptoPP__ASN1secp192r127_next(nullptr);
        static info::CryptoPP__ASN1secp192r127_clbk CryptoPP__ASN1secp192r127_user(nullptr);
        static info::CryptoPP__ASN1secp224k128_ptr CryptoPP__ASN1secp224k128_next(nullptr);
        static info::CryptoPP__ASN1secp224k128_clbk CryptoPP__ASN1secp224k128_user(nullptr);
        static info::CryptoPP__ASN1secp224r129_ptr CryptoPP__ASN1secp224r129_next(nullptr);
        static info::CryptoPP__ASN1secp224r129_clbk CryptoPP__ASN1secp224r129_user(nullptr);
        static info::CryptoPP__ASN1secp256k130_ptr CryptoPP__ASN1secp256k130_next(nullptr);
        static info::CryptoPP__ASN1secp256k130_clbk CryptoPP__ASN1secp256k130_user(nullptr);
        static info::CryptoPP__ASN1secp256r131_ptr CryptoPP__ASN1secp256r131_next(nullptr);
        static info::CryptoPP__ASN1secp256r131_clbk CryptoPP__ASN1secp256r131_user(nullptr);
        static info::CryptoPP__ASN1secp384r132_ptr CryptoPP__ASN1secp384r132_next(nullptr);
        static info::CryptoPP__ASN1secp384r132_clbk CryptoPP__ASN1secp384r132_user(nullptr);
        static info::CryptoPP__ASN1secp521r133_ptr CryptoPP__ASN1secp521r133_next(nullptr);
        static info::CryptoPP__ASN1secp521r133_clbk CryptoPP__ASN1secp521r133_user(nullptr);
        static info::CryptoPP__ASN1sect113r134_ptr CryptoPP__ASN1sect113r134_next(nullptr);
        static info::CryptoPP__ASN1sect113r134_clbk CryptoPP__ASN1sect113r134_user(nullptr);
        static info::CryptoPP__ASN1sect113r235_ptr CryptoPP__ASN1sect113r235_next(nullptr);
        static info::CryptoPP__ASN1sect113r235_clbk CryptoPP__ASN1sect113r235_user(nullptr);
        static info::CryptoPP__ASN1sect131r136_ptr CryptoPP__ASN1sect131r136_next(nullptr);
        static info::CryptoPP__ASN1sect131r136_clbk CryptoPP__ASN1sect131r136_user(nullptr);
        static info::CryptoPP__ASN1sect131r237_ptr CryptoPP__ASN1sect131r237_next(nullptr);
        static info::CryptoPP__ASN1sect131r237_clbk CryptoPP__ASN1sect131r237_user(nullptr);
        static info::CryptoPP__ASN1sect163k138_ptr CryptoPP__ASN1sect163k138_next(nullptr);
        static info::CryptoPP__ASN1sect163k138_clbk CryptoPP__ASN1sect163k138_user(nullptr);
        static info::CryptoPP__ASN1sect163r139_ptr CryptoPP__ASN1sect163r139_next(nullptr);
        static info::CryptoPP__ASN1sect163r139_clbk CryptoPP__ASN1sect163r139_user(nullptr);
        static info::CryptoPP__ASN1sect163r240_ptr CryptoPP__ASN1sect163r240_next(nullptr);
        static info::CryptoPP__ASN1sect163r240_clbk CryptoPP__ASN1sect163r240_user(nullptr);
        static info::CryptoPP__ASN1sect193r141_ptr CryptoPP__ASN1sect193r141_next(nullptr);
        static info::CryptoPP__ASN1sect193r141_clbk CryptoPP__ASN1sect193r141_user(nullptr);
        static info::CryptoPP__ASN1sect193r242_ptr CryptoPP__ASN1sect193r242_next(nullptr);
        static info::CryptoPP__ASN1sect193r242_clbk CryptoPP__ASN1sect193r242_user(nullptr);
        static info::CryptoPP__ASN1sect233k143_ptr CryptoPP__ASN1sect233k143_next(nullptr);
        static info::CryptoPP__ASN1sect233k143_clbk CryptoPP__ASN1sect233k143_user(nullptr);
        static info::CryptoPP__ASN1sect233r144_ptr CryptoPP__ASN1sect233r144_next(nullptr);
        static info::CryptoPP__ASN1sect233r144_clbk CryptoPP__ASN1sect233r144_user(nullptr);
        static info::CryptoPP__ASN1sect239k145_ptr CryptoPP__ASN1sect239k145_next(nullptr);
        static info::CryptoPP__ASN1sect239k145_clbk CryptoPP__ASN1sect239k145_user(nullptr);
        static info::CryptoPP__ASN1sect283k146_ptr CryptoPP__ASN1sect283k146_next(nullptr);
        static info::CryptoPP__ASN1sect283k146_clbk CryptoPP__ASN1sect283k146_user(nullptr);
        static info::CryptoPP__ASN1sect283r147_ptr CryptoPP__ASN1sect283r147_next(nullptr);
        static info::CryptoPP__ASN1sect283r147_clbk CryptoPP__ASN1sect283r147_user(nullptr);
        static info::CryptoPP__ASN1sect409k148_ptr CryptoPP__ASN1sect409k148_next(nullptr);
        static info::CryptoPP__ASN1sect409k148_clbk CryptoPP__ASN1sect409k148_user(nullptr);
        static info::CryptoPP__ASN1sect409r149_ptr CryptoPP__ASN1sect409r149_next(nullptr);
        static info::CryptoPP__ASN1sect409r149_clbk CryptoPP__ASN1sect409r149_user(nullptr);
        static info::CryptoPP__ASN1sect571k150_ptr CryptoPP__ASN1sect571k150_next(nullptr);
        static info::CryptoPP__ASN1sect571k150_clbk CryptoPP__ASN1sect571k150_user(nullptr);
        static info::CryptoPP__ASN1sect571r151_ptr CryptoPP__ASN1sect571r151_next(nullptr);
        static info::CryptoPP__ASN1sect571r151_clbk CryptoPP__ASN1sect571r151_user(nullptr);
        static info::CryptoPP__ASN1tpBasis52_ptr CryptoPP__ASN1tpBasis52_next(nullptr);
        static info::CryptoPP__ASN1tpBasis52_clbk CryptoPP__ASN1tpBasis52_user(nullptr);
        
        static int64_t CryptoPPAdd1_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t arg_3)
        {
           return CryptoPPAdd1_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPPAdd1_next);
        };
        static unsigned int CryptoPPAlmostInverse2_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t arg_3, uint64_t* arg_4, uint64_t arg_5)
        {
           return CryptoPPAlmostInverse2_user(_this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, CryptoPPAlmostInverse2_next);
        };
        static void CryptoPPAndWords3_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t arg_3)
        {
           CryptoPPAndWords3_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPPAndWords3_next);
        };
        static struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >* CryptoPPAssignFromHelper5_wrapper(struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >* result, struct CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >* pObject, struct CryptoPP::NameValuePairs* source, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>* dummy)
        {
           return CryptoPPAssignFromHelper5_user(result, pObject, source, dummy, CryptoPPAssignFromHelper5_next);
        };
        static struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >* CryptoPPAssignFromHelper7_wrapper(struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >* result, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>* pObject, struct CryptoPP::NameValuePairs* source)
        {
           return CryptoPPAssignFromHelper7_user(result, pObject, source, CryptoPPAssignFromHelper7_next);
        };
        static struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >* CryptoPPAssignFromHelper9_wrapper(struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >* result, struct CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >* pObject, struct CryptoPP::NameValuePairs* source, struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>* dummy)
        {
           return CryptoPPAssignFromHelper9_user(result, pObject, source, dummy, CryptoPPAssignFromHelper9_next);
        };
        static struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >* CryptoPPAssignFromHelper11_wrapper(struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >* result, struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>* pObject, struct CryptoPP::NameValuePairs* source)
        {
           return CryptoPPAssignFromHelper11_user(result, pObject, source, CryptoPPAssignFromHelper11_next);
        };
        static bool CryptoPPAssignIntToInteger12_wrapper(struct CryptoPP* _this, struct type_info* arg_0, void* arg_1, void* arg_2)
        {
           return CryptoPPAssignIntToInteger12_user(_this, arg_0, arg_1, arg_2, CryptoPPAssignIntToInteger12_next);
        };
        static void CryptoPPAsymmetricMultiply13_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t arg_3, uint64_t* arg_4, uint64_t arg_5)
        {
           CryptoPPAsymmetricMultiply13_user(_this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, CryptoPPAsymmetricMultiply13_next);
        };
        static void CryptoPPBERDecodeError14_wrapper(struct CryptoPP* _this)
        {
           CryptoPPBERDecodeError14_user(_this, CryptoPPBERDecodeError14_next);
        };
        static struct CryptoPP::GF2NP* CryptoPPBERDecodeGF2NP15_wrapper(struct CryptoPP* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           return CryptoPPBERDecodeGF2NP15_user(_this, arg_0, CryptoPPBERDecodeGF2NP15_next);
        };
        static void CryptoPPBERDecodeNull16_wrapper(struct CryptoPP* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           CryptoPPBERDecodeNull16_user(_this, arg_0, CryptoPPBERDecodeNull16_next);
        };
        static uint64_t CryptoPPBERDecodeOctetString17_wrapper(struct CryptoPP* _this, struct CryptoPP::BufferedTransformation* arg_0, struct CryptoPP::BufferedTransformation* arg_1)
        {
           return CryptoPPBERDecodeOctetString17_user(_this, arg_0, arg_1, CryptoPPBERDecodeOctetString17_next);
        };
        static int64_t CryptoPPBERDecodeUnsigned18_wrapper(struct CryptoPP* arg_0)
        {
           return CryptoPPBERDecodeUnsigned18_user(arg_0, CryptoPPBERDecodeUnsigned18_next);
        };
        static bool CryptoPPBERLengthDecode19_wrapper(struct CryptoPP* _this, struct CryptoPP::BufferedTransformation* arg_0, uint64_t* arg_1)
        {
           return CryptoPPBERLengthDecode19_user(_this, arg_0, arg_1, CryptoPPBERLengthDecode19_next);
        };
        static bool CryptoPPBERLengthDecode20_wrapper(struct CryptoPP* _this, struct CryptoPP::BufferedTransformation* arg_0, uint64_t* arg_1, bool* arg_2)
        {
           return CryptoPPBERLengthDecode20_user(_this, arg_0, arg_1, arg_2, CryptoPPBERLengthDecode20_next);
        };
        static void CryptoPPBaseline_Multiply1621_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2)
        {
           CryptoPPBaseline_Multiply1621_user(_this, arg_0, arg_1, arg_2, CryptoPPBaseline_Multiply1621_next);
        };
        static void CryptoPPBaseline_Multiply222_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2)
        {
           CryptoPPBaseline_Multiply222_user(_this, arg_0, arg_1, arg_2, CryptoPPBaseline_Multiply222_next);
        };
        static void CryptoPPBaseline_Multiply423_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2)
        {
           CryptoPPBaseline_Multiply423_user(_this, arg_0, arg_1, arg_2, CryptoPPBaseline_Multiply423_next);
        };
        static void CryptoPPBaseline_Multiply824_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2)
        {
           CryptoPPBaseline_Multiply824_user(_this, arg_0, arg_1, arg_2, CryptoPPBaseline_Multiply824_next);
        };
        static void CryptoPPBaseline_MultiplyBottom1625_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2)
        {
           CryptoPPBaseline_MultiplyBottom1625_user(_this, arg_0, arg_1, arg_2, CryptoPPBaseline_MultiplyBottom1625_next);
        };
        static void CryptoPPBaseline_MultiplyBottom226_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2)
        {
           CryptoPPBaseline_MultiplyBottom226_user(_this, arg_0, arg_1, arg_2, CryptoPPBaseline_MultiplyBottom226_next);
        };
        static void CryptoPPBaseline_MultiplyBottom427_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2)
        {
           CryptoPPBaseline_MultiplyBottom427_user(_this, arg_0, arg_1, arg_2, CryptoPPBaseline_MultiplyBottom427_next);
        };
        static void CryptoPPBaseline_MultiplyBottom828_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2)
        {
           CryptoPPBaseline_MultiplyBottom828_user(_this, arg_0, arg_1, arg_2, CryptoPPBaseline_MultiplyBottom828_next);
        };
        static void CryptoPPBaseline_MultiplyTop1629_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t arg_3)
        {
           CryptoPPBaseline_MultiplyTop1629_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPPBaseline_MultiplyTop1629_next);
        };
        static void CryptoPPBaseline_MultiplyTop230_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t arg_3)
        {
           CryptoPPBaseline_MultiplyTop230_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPPBaseline_MultiplyTop230_next);
        };
        static void CryptoPPBaseline_MultiplyTop431_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t arg_3)
        {
           CryptoPPBaseline_MultiplyTop431_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPPBaseline_MultiplyTop431_next);
        };
        static void CryptoPPBaseline_MultiplyTop832_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t arg_3)
        {
           CryptoPPBaseline_MultiplyTop832_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPPBaseline_MultiplyTop832_next);
        };
        static void CryptoPPBaseline_Square1633_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1)
        {
           CryptoPPBaseline_Square1633_user(_this, arg_0, arg_1, CryptoPPBaseline_Square1633_next);
        };
        static void CryptoPPBaseline_Square234_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1)
        {
           CryptoPPBaseline_Square234_user(_this, arg_0, arg_1, CryptoPPBaseline_Square234_next);
        };
        static void CryptoPPBaseline_Square435_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1)
        {
           CryptoPPBaseline_Square435_user(_this, arg_0, arg_1, CryptoPPBaseline_Square435_next);
        };
        static void CryptoPPBaseline_Square836_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1)
        {
           CryptoPPBaseline_Square836_user(_this, arg_0, arg_1, CryptoPPBaseline_Square836_next);
        };
        static uint64_t CryptoPPBitsToBytes37_wrapper(struct CryptoPP* _this, uint64_t arg_0)
        {
           return CryptoPPBitsToBytes37_user(_this, arg_0, CryptoPPBitsToBytes37_next);
        };
        static uint64_t CryptoPPBitsToWords38_wrapper(struct CryptoPP* _this, uint64_t arg_0)
        {
           return CryptoPPBitsToWords38_user(_this, arg_0, CryptoPPBitsToWords38_next);
        };
        static unsigned int CryptoPPByteReverse40_wrapper(unsigned int value)
        {
           return CryptoPPByteReverse40_user(value, CryptoPPByteReverse40_next);
        };
        static uint64_t CryptoPPByteReverse41_wrapper(struct CryptoPP* _this, uint64_t arg_0)
        {
           return CryptoPPByteReverse41_user(_this, arg_0, CryptoPPByteReverse41_next);
        };
        static uint16_t CryptoPPByteReverse42_wrapper(struct CryptoPP* _this, uint16_t arg_0)
        {
           return CryptoPPByteReverse42_user(_this, arg_0, CryptoPPByteReverse42_next);
        };
        static uint64_t CryptoPPBytesToWords43_wrapper(struct CryptoPP* _this, uint64_t arg_0)
        {
           return CryptoPPBytesToWords43_user(_this, arg_0, CryptoPPBytesToWords43_next);
        };
        static struct CryptoPP::Integer* CryptoPPCRT44_wrapper(struct CryptoPP::Integer* _this, short retstr, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2, struct CryptoPP::Integer* arg_3)
        {
           return CryptoPPCRT44_user(_this, retstr, arg_0, arg_1, arg_2, arg_3, CryptoPPCRT44_next);
        };
        static struct CryptoPP::Integer* CryptoPPCRT45_wrapper(struct CryptoPP::Integer* _this, struct CryptoPP::Integer* retstr, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2, struct CryptoPP::Integer* arg_3, struct CryptoPP::Integer* arg_4)
        {
           return CryptoPPCRT45_user(_this, retstr, arg_0, arg_1, arg_2, arg_3, arg_4, CryptoPPCRT45_next);
        };
        static void CryptoPPCallNewHandler46_wrapper(struct CryptoPP* _this)
        {
           CryptoPPCallNewHandler46_user(_this, CryptoPPCallNewHandler46_next);
        };
        static unsigned int CryptoPPConditionalByteReverse48_wrapper(struct CryptoPP::ByteOrder order, unsigned int value)
        {
           return CryptoPPConditionalByteReverse48_user(order, value, CryptoPPConditionalByteReverse48_next);
        };
        static void CryptoPPCopyOrZero49_wrapper(struct CryptoPP* _this, void* arg_0, void* arg_1, uint64_t arg_2)
        {
           CryptoPPCopyOrZero49_user(_this, arg_0, arg_1, arg_2, CryptoPPCopyOrZero49_next);
        };
        static void CryptoPPCopyWords50_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t arg_2)
        {
           CryptoPPCopyWords50_user(_this, arg_0, arg_1, arg_2, CryptoPPCopyWords50_next);
        };
        static uint64_t CryptoPPCountWords51_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t arg_1)
        {
           return CryptoPPCountWords51_user(_this, arg_0, arg_1, CryptoPPCountWords51_next);
        };
        static bool CryptoPPCpuId52_wrapper(struct CryptoPP* _this, unsigned int arg_0, unsigned int* arg_1)
        {
           return CryptoPPCpuId52_user(_this, arg_0, arg_1, CryptoPPCpuId52_next);
        };
        static uint64_t CryptoPPDEREncodeBitString53_wrapper(struct CryptoPP* _this, struct CryptoPP::BufferedTransformation* arg_0, uint8_t* arg_1, uint64_t arg_2, unsigned int arg_3)
        {
           return CryptoPPDEREncodeBitString53_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPPDEREncodeBitString53_next);
        };
        static void CryptoPPDEREncodeNull54_wrapper(struct CryptoPP* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           CryptoPPDEREncodeNull54_user(_this, arg_0, CryptoPPDEREncodeNull54_next);
        };
        static uint64_t CryptoPPDEREncodeOctetString55_wrapper(struct CryptoPP* _this, struct CryptoPP::BufferedTransformation* arg_0, uint8_t* arg_1, uint64_t arg_2)
        {
           return CryptoPPDEREncodeOctetString55_user(_this, arg_0, arg_1, arg_2, CryptoPPDEREncodeOctetString55_next);
        };
        static uint64_t CryptoPPDERLengthEncode56_wrapper(struct CryptoPP* _this, struct CryptoPP::BufferedTransformation* arg_0, uint64_t arg_1)
        {
           return CryptoPPDERLengthEncode56_user(_this, arg_0, arg_1, CryptoPPDERLengthEncode56_next);
        };
        static void CryptoPPDERReencode57_wrapper(struct CryptoPP* _this, struct CryptoPP::BufferedTransformation* arg_0, struct CryptoPP::BufferedTransformation* arg_1)
        {
           CryptoPPDERReencode57_user(_this, arg_0, arg_1, CryptoPPDERReencode57_next);
        };
        static void CryptoPPDES_VC60Workaround58_wrapper(struct CryptoPP* _this)
        {
           CryptoPPDES_VC60Workaround58_user(_this, CryptoPPDES_VC60Workaround58_next);
        };
        static void CryptoPPDetectX86Features59_wrapper(struct CryptoPP* _this)
        {
           CryptoPPDetectX86Features59_user(_this, CryptoPPDetectX86Features59_next);
        };
        static unsigned int CryptoPPDiscreteLogWorkFactor60_wrapper(struct CryptoPP* _this, unsigned int arg_0)
        {
           return CryptoPPDiscreteLogWorkFactor60_user(_this, arg_0, CryptoPPDiscreteLogWorkFactor60_next);
        };
        static void CryptoPPDivide61_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t* arg_3, uint64_t arg_4, uint64_t* arg_5, uint64_t arg_6)
        {
           CryptoPPDivide61_user(_this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, CryptoPPDivide61_next);
        };
        static void CryptoPPDivideByPower2Mod62_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t arg_2, uint64_t* arg_3, uint64_t arg_4)
        {
           CryptoPPDivideByPower2Mod62_user(_this, arg_0, arg_1, arg_2, arg_3, arg_4, CryptoPPDivideByPower2Mod62_next);
        };
        static int64_t CryptoPPDivideFourWordsByTwo63_wrapper(struct CryptoPP::Word* arg_0)
        {
           return CryptoPPDivideFourWordsByTwo63_user(arg_0, CryptoPPDivideFourWordsByTwo63_next);
        };
        static int64_t CryptoPPDivideFourWordsByTwo64_wrapper(struct CryptoPP::DWord* arg_0)
        {
           return CryptoPPDivideFourWordsByTwo64_user(arg_0, CryptoPPDivideFourWordsByTwo64_next);
        };
        static void CryptoPPEncryptionPairwiseConsistencyTest_FIPS_140_Only65_wrapper(struct CryptoPP* _this, struct CryptoPP::PK_Encryptor* arg_0, struct CryptoPP::PK_Decryptor* arg_1)
        {
           CryptoPPEncryptionPairwiseConsistencyTest_FIPS_140_Only65_user(_this, arg_0, arg_1, CryptoPPEncryptionPairwiseConsistencyTest_FIPS_140_Only65_next);
        };
        static struct CryptoPP::Integer* CryptoPPEuclideanMultiplicativeInverse66_wrapper(struct CryptoPP* _this, short retstr, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1)
        {
           return CryptoPPEuclideanMultiplicativeInverse66_user(_this, retstr, arg_0, arg_1, CryptoPPEuclideanMultiplicativeInverse66_next);
        };
        static bool CryptoPPFIPS_140_2_ComplianceEnabled67_wrapper(struct CryptoPP* _this)
        {
           return CryptoPPFIPS_140_2_ComplianceEnabled67_user(_this, CryptoPPFIPS_140_2_ComplianceEnabled67_next);
        };
        static unsigned int CryptoPPFactoringWorkFactor68_wrapper(struct CryptoPP* _this, unsigned int arg_0)
        {
           return CryptoPPFactoringWorkFactor68_user(_this, arg_0, CryptoPPFactoringWorkFactor68_next);
        };
        static void CryptoPPFiles_TestInstantiations69_wrapper(struct CryptoPP* _this)
        {
           CryptoPPFiles_TestInstantiations69_user(_this, CryptoPPFiles_TestInstantiations69_next);
        };
        static bool CryptoPPFirstPrime70_wrapper(struct CryptoPP* _this, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2, struct CryptoPP::Integer* arg_3, CryptoPP::PrimeSelector* arg_4)
        {
           return CryptoPPFirstPrime70_user(_this, arg_0, arg_1, arg_2, arg_3, arg_4, CryptoPPFirstPrime70_next);
        };
        static struct CryptoPP::Integer* CryptoPPGCD71_wrapper(struct CryptoPP* _this, short retstr, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1)
        {
           return CryptoPPGCD71_user(_this, retstr, arg_0, arg_1, CryptoPPGCD71_next);
        };
        static unsigned int CryptoPPGetAlignmentOf73_wrapper(unsigned int* dummy)
        {
           return CryptoPPGetAlignmentOf73_user(dummy, CryptoPPGetAlignmentOf73_next);
        };
        static int64_t CryptoPPGetCacheLineSize74_wrapper(struct CryptoPP* _this)
        {
           return CryptoPPGetCacheLineSize74_user(_this, CryptoPPGetCacheLineSize74_next);
        };
        static struct CryptoPP::ByteOrder CryptoPPGetNativeByteOrder76_wrapper()
        {
           return CryptoPPGetNativeByteOrder76_user(CryptoPPGetNativeByteOrder76_next);
        };
        static uint16_t* CryptoPPGetPrimeTable77_wrapper(struct CryptoPP* _this, unsigned int* arg_0)
        {
           return CryptoPPGetPrimeTable77_user(_this, arg_0, CryptoPPGetPrimeTable77_next);
        };
        static struct CryptoPP::GetValueHelperClass<CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>,CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint> >* CryptoPPGetValueHelper79_wrapper(struct CryptoPP::GetValueHelperClass<CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>,CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint> >* result, struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>* pObject, char* name, struct type_info* valueType, void* pValue, struct CryptoPP::NameValuePairs* searchFirst)
        {
           return CryptoPPGetValueHelper79_user(result, pObject, name, valueType, pValue, searchFirst, CryptoPPGetValueHelper79_next);
        };
        static struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >* CryptoPPGetValueHelper81_wrapper(struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >* result, struct CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >* pObject, char* name, struct type_info* valueType, void* pValue, struct CryptoPP::NameValuePairs* searchFirst, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>* dummy)
        {
           return CryptoPPGetValueHelper81_user(result, pObject, name, valueType, pValue, searchFirst, dummy, CryptoPPGetValueHelper81_next);
        };
        static struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >* CryptoPPGetValueHelper83_wrapper(struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >* result, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>* pObject, char* name, struct type_info* valueType, void* pValue, struct CryptoPP::NameValuePairs* searchFirst)
        {
           return CryptoPPGetValueHelper83_user(result, pObject, name, valueType, pValue, searchFirst, CryptoPPGetValueHelper83_next);
        };
        static struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >* CryptoPPGetValueHelper85_wrapper(struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >* result, struct CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >* pObject, char* name, struct type_info* valueType, void* pValue, struct CryptoPP::NameValuePairs* searchFirst, struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>* dummy)
        {
           return CryptoPPGetValueHelper85_user(result, pObject, name, valueType, pValue, searchFirst, dummy, CryptoPPGetValueHelper85_next);
        };
        static struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >* CryptoPPGetValueHelper87_wrapper(struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >* result, struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>* pObject, char* name, struct type_info* valueType, void* pValue, struct CryptoPP::NameValuePairs* searchFirst)
        {
           return CryptoPPGetValueHelper87_user(result, pObject, name, valueType, pValue, searchFirst, CryptoPPGetValueHelper87_next);
        };
        static struct CryptoPP::ECPPoint* CryptoPPHack_DefaultValueFromConstReferenceType89_wrapper(struct CryptoPP::ECPPoint* result, struct CryptoPP::ECPPoint* __formal)
        {
           return CryptoPPHack_DefaultValueFromConstReferenceType89_user(result, __formal, CryptoPPHack_DefaultValueFromConstReferenceType89_next);
        };
        static struct CryptoPP::Integer* CryptoPPHack_DefaultValueFromConstReferenceType91_wrapper(struct CryptoPP::Integer* result, struct CryptoPP::Integer* __formal)
        {
           return CryptoPPHack_DefaultValueFromConstReferenceType91_user(result, __formal, CryptoPPHack_DefaultValueFromConstReferenceType91_next);
        };
        static bool CryptoPPHack_GetValueIntoConstReference93_wrapper(struct CryptoPP::NameValuePairs* source, char* name, struct CryptoPP::ECPPoint* value)
        {
           return CryptoPPHack_GetValueIntoConstReference93_user(source, name, value, CryptoPPHack_GetValueIntoConstReference93_next);
        };
        static bool CryptoPPHack_GetValueIntoConstReference95_wrapper(struct CryptoPP::NameValuePairs* source, char* name, struct CryptoPP::Integer* value)
        {
           return CryptoPPHack_GetValueIntoConstReference95_user(source, name, value, CryptoPPHack_GetValueIntoConstReference95_next);
        };
        static void CryptoPPHalfMontgomeryReduce96_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t* arg_3, uint64_t* arg_4, uint64_t* arg_5, uint64_t arg_6)
        {
           CryptoPPHalfMontgomeryReduce96_user(_this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, CryptoPPHalfMontgomeryReduce96_next);
        };
        static void CryptoPPIncrementCounterByOne97_wrapper(struct CryptoPP* _this, uint8_t* arg_0, uint8_t* arg_1, unsigned int arg_2)
        {
           CryptoPPIncrementCounterByOne97_user(_this, arg_0, arg_1, arg_2, CryptoPPIncrementCounterByOne97_next);
        };
        static void CryptoPPIncrementCounterByOne98_wrapper(struct CryptoPP* _this, uint8_t* arg_0, unsigned int arg_1)
        {
           CryptoPPIncrementCounterByOne98_user(_this, arg_0, arg_1, CryptoPPIncrementCounterByOne98_next);
        };
        static struct CryptoPP::Integer* CryptoPPInverseLucas99_wrapper(struct CryptoPP::Integer* _this, short retstr, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2, struct CryptoPP::Integer* arg_3)
        {
           return CryptoPPInverseLucas99_user(_this, retstr, arg_0, arg_1, arg_2, arg_3, CryptoPPInverseLucas99_next);
        };
        static struct CryptoPP::Integer* CryptoPPInverseLucas100_wrapper(struct CryptoPP::Integer* _this, struct CryptoPP::Integer* retstr, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2, struct CryptoPP::Integer* arg_3, struct CryptoPP::Integer* arg_4)
        {
           return CryptoPPInverseLucas100_user(_this, retstr, arg_0, arg_1, arg_2, arg_3, arg_4, CryptoPPInverseLucas100_next);
        };
        static bool CryptoPPIsAlignedOn102_wrapper(void* p, unsigned int alignment)
        {
           return CryptoPPIsAlignedOn102_user(p, alignment, CryptoPPIsAlignedOn102_next);
        };
        static bool CryptoPPIsFermatProbablePrime103_wrapper(struct CryptoPP* _this, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1)
        {
           return CryptoPPIsFermatProbablePrime103_user(_this, arg_0, arg_1, CryptoPPIsFermatProbablePrime103_next);
        };
        static bool CryptoPPIsLucasProbablePrime104_wrapper(struct CryptoPP* _this, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPPIsLucasProbablePrime104_user(_this, arg_0, CryptoPPIsLucasProbablePrime104_next);
        };
        static bool CryptoPPIsPowerOf2106_wrapper(unsigned int* n)
        {
           return CryptoPPIsPowerOf2106_user(n, CryptoPPIsPowerOf2106_next);
        };
        static bool CryptoPPIsPrime107_wrapper(struct CryptoPP* _this, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPPIsPrime107_user(_this, arg_0, CryptoPPIsPrime107_next);
        };
        static bool CryptoPPIsSmallPrime108_wrapper(struct CryptoPP* _this, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPPIsSmallPrime108_user(_this, arg_0, CryptoPPIsSmallPrime108_next);
        };
        static bool CryptoPPIsStrongLucasProbablePrime109_wrapper(struct CryptoPP* _this, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPPIsStrongLucasProbablePrime109_user(_this, arg_0, CryptoPPIsStrongLucasProbablePrime109_next);
        };
        static bool CryptoPPIsStrongProbablePrime110_wrapper(struct CryptoPP* _this, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1)
        {
           return CryptoPPIsStrongProbablePrime110_user(_this, arg_0, arg_1, CryptoPPIsStrongProbablePrime110_next);
        };
        static int64_t CryptoPPJacobi111_wrapper(struct CryptoPP* _this, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1)
        {
           return CryptoPPJacobi111_user(_this, arg_0, arg_1, CryptoPPJacobi111_next);
        };
        static struct CryptoPP::Integer* CryptoPPLucas112_wrapper(struct CryptoPP* _this, short retstr, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2)
        {
           return CryptoPPLucas112_user(_this, retstr, arg_0, arg_1, arg_2, CryptoPPLucas112_next);
        };
        static struct CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>* CryptoPPMakeParameters114_wrapper(struct CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>* result, char* name, char** value, bool throwIfNotUsed)
        {
           return CryptoPPMakeParameters114_user(result, name, value, throwIfNotUsed, CryptoPPMakeParameters114_next);
        };
        static struct CryptoPP::Integer* CryptoPPMaurerProvablePrime115_wrapper(struct CryptoPP* _this, short retstr, struct CryptoPP::Integer* arg_0, struct CryptoPP::RandomNumberGenerator* arg_1)
        {
           return CryptoPPMaurerProvablePrime115_user(_this, retstr, arg_0, arg_1, CryptoPPMaurerProvablePrime115_next);
        };
        static struct CryptoPP::Integer* CryptoPPMihailescuProvablePrime116_wrapper(struct CryptoPP* _this, short retstr, struct CryptoPP::Integer* arg_0, struct CryptoPP::RandomNumberGenerator* arg_1)
        {
           return CryptoPPMihailescuProvablePrime116_user(_this, retstr, arg_0, arg_1, CryptoPPMihailescuProvablePrime116_next);
        };
        static unsigned int CryptoPPModPowerOf2118_wrapper(uint64_t* a, unsigned int* b)
        {
           return CryptoPPModPowerOf2118_user(a, b, CryptoPPModPowerOf2118_next);
        };
        static void CryptoPPModes_TestInstantiations119_wrapper(struct CryptoPP* _this)
        {
           CryptoPPModes_TestInstantiations119_user(_this, CryptoPPModes_TestInstantiations119_next);
        };
        static struct CryptoPP::Integer* CryptoPPModularExponentiation120_wrapper(struct CryptoPP* _this, short retstr, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2)
        {
           return CryptoPPModularExponentiation120_user(_this, retstr, arg_0, arg_1, arg_2, CryptoPPModularExponentiation120_next);
        };
        static struct CryptoPP::Integer* CryptoPPModularRoot121_wrapper(struct CryptoPP::Integer* _this, short retstr, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2, struct CryptoPP::Integer* arg_3)
        {
           return CryptoPPModularRoot121_user(_this, retstr, arg_0, arg_1, arg_2, arg_3, CryptoPPModularRoot121_next);
        };
        static struct CryptoPP::Integer* CryptoPPModularRoot122_wrapper(struct CryptoPP::Integer* b, struct CryptoPP::Integer* retstr, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2, struct CryptoPP::Integer* arg_3, struct CryptoPP::Integer* arg_4, struct CryptoPP::Integer* arg_5)
        {
           return CryptoPPModularRoot122_user(b, retstr, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, CryptoPPModularRoot122_next);
        };
        static struct CryptoPP::Integer* CryptoPPModularSquareRoot123_wrapper(struct CryptoPP* _this, short retstr, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1)
        {
           return CryptoPPModularSquareRoot123_user(_this, retstr, arg_0, arg_1, CryptoPPModularSquareRoot123_next);
        };
        static void CryptoPPMontgomeryReduce124_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t* arg_3, uint64_t* arg_4, uint64_t arg_5)
        {
           CryptoPPMontgomeryReduce124_user(_this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, CryptoPPMontgomeryReduce124_next);
        };
        static void CryptoPPMultiply125_wrapper(struct CryptoPP* _this, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2)
        {
           CryptoPPMultiply125_user(_this, arg_0, arg_1, arg_2, CryptoPPMultiply125_next);
        };
        static void CryptoPPMultiply126_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t* arg_3, uint64_t arg_4)
        {
           CryptoPPMultiply126_user(_this, arg_0, arg_1, arg_2, arg_3, arg_4, CryptoPPMultiply126_next);
        };
        static void CryptoPPMultiplyBottom127_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t* arg_3, uint64_t arg_4)
        {
           CryptoPPMultiplyBottom127_user(_this, arg_0, arg_1, arg_2, arg_3, arg_4, CryptoPPMultiplyBottom127_next);
        };
        static void CryptoPPMultiplyByPower2Mod128_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t arg_2, uint64_t* arg_3, uint64_t arg_4)
        {
           CryptoPPMultiplyByPower2Mod128_user(_this, arg_0, arg_1, arg_2, arg_3, arg_4, CryptoPPMultiplyByPower2Mod128_next);
        };
        static void CryptoPPMultiplyTop129_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t* arg_3, uint64_t* arg_4, uint64_t arg_5)
        {
           CryptoPPMultiplyTop129_user(_this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, CryptoPPMultiplyTop129_next);
        };
        static bool CryptoPPNativeByteOrderIs131_wrapper(struct CryptoPP::ByteOrder order)
        {
           return CryptoPPNativeByteOrderIs131_user(order, CryptoPPNativeByteOrderIs131_next);
        };
        static struct CryptoPP::RandomNumberGenerator* CryptoPPNullRNG132_wrapper(struct CryptoPP* _this)
        {
           return CryptoPPNullRNG132_user(_this, CryptoPPNullRNG132_next);
        };
        static void CryptoPPOS_GenerateRandomBlock133_wrapper(struct CryptoPP* _this, bool arg_0, uint8_t* arg_1, uint64_t arg_2)
        {
           CryptoPPOS_GenerateRandomBlock133_user(_this, arg_0, arg_1, arg_2, CryptoPPOS_GenerateRandomBlock133_next);
        };
        static void CryptoPPP1363_MGF1KDF2_Common134_wrapper(struct CryptoPP* _this, struct CryptoPP::HashTransformation* arg_0, uint8_t* arg_1, char arg_2, uint8_t* arg_3, uint64_t arg_4, uint8_t* arg_5, uint64_t arg_6, bool arg_7, unsigned int arg_8)
        {
           CryptoPPP1363_MGF1KDF2_Common134_user(_this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7, arg_8, CryptoPPP1363_MGF1KDF2_Common134_next);
        };
        static void CryptoPPPositiveAdd135_wrapper(struct CryptoPP* _this, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2)
        {
           CryptoPPPositiveAdd135_user(_this, arg_0, arg_1, arg_2, CryptoPPPositiveAdd135_next);
        };
        static void CryptoPPPositiveDivide136_wrapper(struct CryptoPP* _this, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2, struct CryptoPP::Integer* arg_3)
        {
           CryptoPPPositiveDivide136_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPPPositiveDivide136_next);
        };
        static void CryptoPPPositiveMultiply137_wrapper(struct CryptoPP* _this, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2)
        {
           CryptoPPPositiveMultiply137_user(_this, arg_0, arg_1, arg_2, CryptoPPPositiveMultiply137_next);
        };
        static void CryptoPPPositiveSubtract138_wrapper(struct CryptoPP* _this, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2)
        {
           CryptoPPPositiveSubtract138_user(_this, arg_0, arg_1, arg_2, CryptoPPPositiveSubtract138_next);
        };
        static bool CryptoPPPowerUpSelfTestInProgressOnThisThread139_wrapper(struct CryptoPP* _this)
        {
           return CryptoPPPowerUpSelfTestInProgressOnThisThread139_user(_this, CryptoPPPowerUpSelfTestInProgressOnThisThread139_next);
        };
        static unsigned int CryptoPPPrimeSearchInterval140_wrapper(struct CryptoPP* _this, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPPPrimeSearchInterval140_user(_this, arg_0, CryptoPPPrimeSearchInterval140_next);
        };
        static void CryptoPPPutWord142_wrapper(bool assumeAligned, struct CryptoPP::ByteOrder order, char* block, unsigned int value, char* xorBlock)
        {
           CryptoPPPutWord142_user(assumeAligned, order, block, value, xorBlock, CryptoPPPutWord142_next);
        };
        static bool CryptoPPRabinMillerTest143_wrapper(struct CryptoPP* _this, struct CryptoPP::RandomNumberGenerator* arg_0, struct CryptoPP::Integer* arg_1, unsigned int arg_2)
        {
           return CryptoPPRabinMillerTest143_user(_this, arg_0, arg_1, arg_2, CryptoPPRabinMillerTest143_next);
        };
        static void CryptoPPRecursiveInverseModPower2144_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t arg_3)
        {
           CryptoPPRecursiveInverseModPower2144_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPPRecursiveInverseModPower2144_next);
        };
        static void CryptoPPRecursiveMultiply145_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t* arg_3, uint64_t arg_4)
        {
           CryptoPPRecursiveMultiply145_user(_this, arg_0, arg_1, arg_2, arg_3, arg_4, CryptoPPRecursiveMultiply145_next);
        };
        static void CryptoPPRecursiveMultiplyBottom146_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t* arg_3, uint64_t arg_4)
        {
           CryptoPPRecursiveMultiplyBottom146_user(_this, arg_0, arg_1, arg_2, arg_3, arg_4, CryptoPPRecursiveMultiplyBottom146_next);
        };
        static void CryptoPPRecursiveSquare147_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t arg_3)
        {
           CryptoPPRecursiveSquare147_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPPRecursiveSquare147_next);
        };
        static struct CryptoPP::CipherDir CryptoPPReverseCipherDir148_wrapper(struct CryptoPP* _this, struct CryptoPP::CipherDir arg_0)
        {
           return CryptoPPReverseCipherDir148_user(_this, arg_0, CryptoPPReverseCipherDir148_next);
        };
        static uint64_t* CryptoPPSTDMIN150_wrapper(uint64_t* a, uint64_t* b)
        {
           return CryptoPPSTDMIN150_user(a, b, CryptoPPSTDMIN150_next);
        };
        static uint64_t CryptoPPSaturatingSubtract152_wrapper(uint64_t* a, unsigned int* b)
        {
           return CryptoPPSaturatingSubtract152_user(a, b, CryptoPPSaturatingSubtract152_next);
        };
        static void CryptoPPSerpent_KeySchedule153_wrapper(struct CryptoPP* _this, unsigned int* arg_0, unsigned int arg_1, uint8_t* arg_2, uint64_t arg_3)
        {
           CryptoPPSerpent_KeySchedule153_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPPSerpent_KeySchedule153_next);
        };
        static void CryptoPPSetPowerUpSelfTestInProgressOnThisThread154_wrapper(struct CryptoPP* _this, bool arg_0)
        {
           CryptoPPSetPowerUpSelfTestInProgressOnThisThread154_user(_this, arg_0, CryptoPPSetPowerUpSelfTestInProgressOnThisThread154_next);
        };
        static void CryptoPPSetWords155_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t arg_1, uint64_t arg_2)
        {
           CryptoPPSetWords155_user(_this, arg_0, arg_1, arg_2, CryptoPPSetWords155_next);
        };
        static uint64_t CryptoPPShiftWordsLeftByBits156_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t arg_1, unsigned int arg_2)
        {
           return CryptoPPShiftWordsLeftByBits156_user(_this, arg_0, arg_1, arg_2, CryptoPPShiftWordsLeftByBits156_next);
        };
        static void CryptoPPShiftWordsLeftByWords157_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t arg_1, uint64_t arg_2)
        {
           CryptoPPShiftWordsLeftByWords157_user(_this, arg_0, arg_1, arg_2, CryptoPPShiftWordsLeftByWords157_next);
        };
        static uint64_t CryptoPPShiftWordsRightByBits158_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t arg_1, unsigned int arg_2)
        {
           return CryptoPPShiftWordsRightByBits158_user(_this, arg_0, arg_1, arg_2, CryptoPPShiftWordsRightByBits158_next);
        };
        static void CryptoPPShiftWordsRightByWords159_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t arg_1, uint64_t arg_2)
        {
           CryptoPPShiftWordsRightByWords159_user(_this, arg_0, arg_1, arg_2, CryptoPPShiftWordsRightByWords159_next);
        };
        static void CryptoPPSignaturePairwiseConsistencyTest_FIPS_140_Only160_wrapper(struct CryptoPP* _this, struct CryptoPP::PK_Signer* arg_0, struct CryptoPP::PK_Verifier* arg_1)
        {
           CryptoPPSignaturePairwiseConsistencyTest_FIPS_140_Only160_user(_this, arg_0, arg_1, CryptoPPSignaturePairwiseConsistencyTest_FIPS_140_Only160_next);
        };
        static void CryptoPPSimulatePowerUpSelfTestFailure161_wrapper(struct CryptoPP* _this)
        {
           CryptoPPSimulatePowerUpSelfTestFailure161_user(_this, CryptoPPSimulatePowerUpSelfTestFailure161_next);
        };
        static bool CryptoPPSmallDivisorsTest162_wrapper(struct CryptoPP* _this, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPPSmallDivisorsTest162_user(_this, arg_0, CryptoPPSmallDivisorsTest162_next);
        };
        static bool CryptoPPSolveModularQuadraticEquation163_wrapper(struct CryptoPP::Integer* _this, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2, struct CryptoPP::Integer* arg_3, struct CryptoPP::Integer* arg_4, struct CryptoPP::Integer* arg_5)
        {
           return CryptoPPSolveModularQuadraticEquation163_user(_this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, CryptoPPSolveModularQuadraticEquation163_next);
        };
        static void CryptoPPSquare164_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t arg_3)
        {
           CryptoPPSquare164_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPPSquare164_next);
        };
        static char* CryptoPPStandardReallocate166_wrapper(struct CryptoPP::AllocatorWithCleanup<unsigned char,0>* a, char* p, uint64_t oldSize, uint64_t newSize, bool preserve)
        {
           return CryptoPPStandardReallocate166_user(a, p, oldSize, newSize, preserve, CryptoPPStandardReallocate166_next);
        };
        static int64_t CryptoPPSubtract167_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t arg_3)
        {
           return CryptoPPSubtract167_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPPSubtract167_next);
        };
        static void CryptoPPTestInstantiations_gfpcrypt168_wrapper(struct CryptoPP* _this)
        {
           CryptoPPTestInstantiations_gfpcrypt168_user(_this, CryptoPPTestInstantiations_gfpcrypt168_next);
        };
        static struct CryptoPP::BufferedTransformation* CryptoPPTheBitBucket169_wrapper(struct CryptoPP* _this)
        {
           return CryptoPPTheBitBucket169_user(_this, CryptoPPTheBitBucket169_next);
        };
        static bool CryptoPPTrialDivision170_wrapper(struct CryptoPP* _this, struct CryptoPP::Integer* arg_0, unsigned int arg_1)
        {
           return CryptoPPTrialDivision170_user(_this, arg_0, arg_1, CryptoPPTrialDivision170_next);
        };
        static bool CryptoPPVerifyPrime171_wrapper(struct CryptoPP* _this, struct CryptoPP::RandomNumberGenerator* arg_0, struct CryptoPP::Integer* arg_1, unsigned int arg_2)
        {
           return CryptoPPVerifyPrime171_user(_this, arg_0, arg_1, arg_2, CryptoPPVerifyPrime171_next);
        };
        static void CryptoPPXorWords172_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t arg_3)
        {
           CryptoPPXorWords172_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPPXorWords172_next);
        };
        static void CryptoPPXorWords173_wrapper(struct CryptoPP* _this, uint64_t* arg_0, uint64_t* arg_1, uint64_t arg_2)
        {
           CryptoPPXorWords173_user(_this, arg_0, arg_1, arg_2, CryptoPPXorWords173_next);
        };
        static struct CryptoPP::Integer* CryptoPPa_exp_b_mod_c174_wrapper(struct CryptoPP* _this, short retstr, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2)
        {
           return CryptoPPa_exp_b_mod_c174_user(_this, retstr, arg_0, arg_1, arg_2, CryptoPPa_exp_b_mod_c174_next);
        };
        static struct CryptoPP::Integer* CryptoPPa_times_b_mod_c175_wrapper(struct CryptoPP* _this, short retstr, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2)
        {
           return CryptoPPa_times_b_mod_c175_user(_this, retstr, arg_0, arg_1, arg_2, CryptoPPa_times_b_mod_c175_next);
        };
        static void CryptoPPxorbuf188_wrapper(struct CryptoPP* _this, uint8_t* arg_0, uint8_t* arg_1, uint8_t* arg_2, uint64_t arg_3)
        {
           CryptoPPxorbuf188_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPPxorbuf188_next);
        };
        static void CryptoPPxorbuf189_wrapper(struct CryptoPP* _this, uint8_t* arg_0, uint8_t* arg_1, uint64_t arg_2)
        {
           CryptoPPxorbuf189_user(_this, arg_0, arg_1, arg_2, CryptoPPxorbuf189_next);
        };
        
        static void CryptoPP__Clonablector_Clonable2_wrapper(struct CryptoPP::Clonable* _this, struct CryptoPP::Clonable* __that)
        {
           CryptoPP__Clonablector_Clonable2_user(_this, __that, CryptoPP__Clonablector_Clonable2_next);
        };
        static int64_t CryptoPP__Clonablector_Clonable3_wrapper(struct CryptoPP::Clonable* _this)
        {
           return CryptoPP__Clonablector_Clonable3_user(_this, CryptoPP__Clonablector_Clonable3_next);
        };
        static struct CryptoPP::Clonable* CryptoPP__ClonableClone5_wrapper(struct CryptoPP::Clonable* _this)
        {
           return CryptoPP__ClonableClone5_user(_this, CryptoPP__ClonableClone5_next);
        };
        static void CryptoPP__Clonabledtor_Clonable7_wrapper(struct CryptoPP::Clonable* _this)
        {
           CryptoPP__Clonabledtor_Clonable7_user(_this, CryptoPP__Clonabledtor_Clonable7_next);
        };
        
        static void CryptoPP__Algorithmctor_Algorithm2_wrapper(struct CryptoPP::Algorithm* _this, struct CryptoPP::Algorithm* __that)
        {
           CryptoPP__Algorithmctor_Algorithm2_user(_this, __that, CryptoPP__Algorithmctor_Algorithm2_next);
        };
        static int64_t CryptoPP__Algorithmctor_Algorithm3_wrapper(struct CryptoPP::Algorithm* _this, bool arg_0)
        {
           return CryptoPP__Algorithmctor_Algorithm3_user(_this, arg_0, CryptoPP__Algorithmctor_Algorithm3_next);
        };
        static struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* CryptoPP__AlgorithmAlgorithmName5_wrapper(struct CryptoPP::Algorithm* _this, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* result)
        {
           return CryptoPP__AlgorithmAlgorithmName5_user(_this, result, CryptoPP__AlgorithmAlgorithmName5_next);
        };
        static void CryptoPP__Algorithmdtor_Algorithm7_wrapper(struct CryptoPP::Algorithm* _this)
        {
           CryptoPP__Algorithmdtor_Algorithm7_user(_this, CryptoPP__Algorithmdtor_Algorithm7_next);
        };
        
        static bool CryptoPP__RandomNumberGeneratorCanIncorporateEntropy1_wrapper(struct CryptoPP::RandomNumberGenerator* _this)
        {
           return CryptoPP__RandomNumberGeneratorCanIncorporateEntropy1_user(_this, CryptoPP__RandomNumberGeneratorCanIncorporateEntropy1_next);
        };
        static void CryptoPP__RandomNumberGeneratorDiscardBytes2_wrapper(struct CryptoPP::RandomNumberGenerator* _this, uint64_t arg_0)
        {
           CryptoPP__RandomNumberGeneratorDiscardBytes2_user(_this, arg_0, CryptoPP__RandomNumberGeneratorDiscardBytes2_next);
        };
        static unsigned int CryptoPP__RandomNumberGeneratorGenerateBit3_wrapper(struct CryptoPP::RandomNumberGenerator* _this)
        {
           return CryptoPP__RandomNumberGeneratorGenerateBit3_user(_this, CryptoPP__RandomNumberGeneratorGenerateBit3_next);
        };
        static void CryptoPP__RandomNumberGeneratorGenerateBlock4_wrapper(struct CryptoPP::RandomNumberGenerator* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__RandomNumberGeneratorGenerateBlock4_user(_this, arg_0, arg_1, CryptoPP__RandomNumberGeneratorGenerateBlock4_next);
        };
        static uint8_t CryptoPP__RandomNumberGeneratorGenerateByte5_wrapper(struct CryptoPP::RandomNumberGenerator* _this)
        {
           return CryptoPP__RandomNumberGeneratorGenerateByte5_user(_this, CryptoPP__RandomNumberGeneratorGenerateByte5_next);
        };
        static unsigned int CryptoPP__RandomNumberGeneratorGenerateWord326_wrapper(struct CryptoPP::RandomNumberGenerator* _this, unsigned int arg_0, unsigned int arg_1)
        {
           return CryptoPP__RandomNumberGeneratorGenerateWord326_user(_this, arg_0, arg_1, CryptoPP__RandomNumberGeneratorGenerateWord326_next);
        };
        static void CryptoPP__RandomNumberGeneratorIncorporateEntropy7_wrapper(struct CryptoPP::RandomNumberGenerator* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__RandomNumberGeneratorIncorporateEntropy7_user(_this, arg_0, arg_1, CryptoPP__RandomNumberGeneratorIncorporateEntropy7_next);
        };
        static int64_t CryptoPP__RandomNumberGeneratorctor_RandomNumberGenerator8_wrapper(struct CryptoPP::RandomNumberGenerator* _this)
        {
           return CryptoPP__RandomNumberGeneratorctor_RandomNumberGenerator8_user(_this, CryptoPP__RandomNumberGeneratorctor_RandomNumberGenerator8_next);
        };
        static void CryptoPP__RandomNumberGeneratordtor_RandomNumberGenerator10_wrapper(struct CryptoPP::RandomNumberGenerator* _this)
        {
           CryptoPP__RandomNumberGeneratordtor_RandomNumberGenerator10_user(_this, CryptoPP__RandomNumberGeneratordtor_RandomNumberGenerator10_next);
        };
        
        static void CryptoPP__NotCopyablector_NotCopyable2_wrapper(struct CryptoPP::NotCopyable* _this)
        {
           CryptoPP__NotCopyablector_NotCopyable2_user(_this, CryptoPP__NotCopyablector_NotCopyable2_next);
        };
        
        static unsigned int CryptoPP__BlockTransformationBlockAlignment1_wrapper(struct CryptoPP::BlockTransformation* _this)
        {
           return CryptoPP__BlockTransformationBlockAlignment1_user(_this, CryptoPP__BlockTransformationBlockAlignment1_next);
        };
        static void CryptoPP__BlockTransformationctor_BlockTransformation3_wrapper(struct CryptoPP::BlockTransformation* _this, struct CryptoPP::BlockTransformation* __that)
        {
           CryptoPP__BlockTransformationctor_BlockTransformation3_user(_this, __that, CryptoPP__BlockTransformationctor_BlockTransformation3_next);
        };
        static void CryptoPP__BlockTransformationctor_BlockTransformation5_wrapper(struct CryptoPP::BlockTransformation* _this)
        {
           CryptoPP__BlockTransformationctor_BlockTransformation5_user(_this, CryptoPP__BlockTransformationctor_BlockTransformation5_next);
        };
        static struct CryptoPP::CipherDir CryptoPP__BlockTransformationGetCipherDirection6_wrapper(struct CryptoPP::BlockTransformation* _this)
        {
           return CryptoPP__BlockTransformationGetCipherDirection6_user(_this, CryptoPP__BlockTransformationGetCipherDirection6_next);
        };
        static bool CryptoPP__BlockTransformationIsPermutation8_wrapper(struct CryptoPP::BlockTransformation* _this)
        {
           return CryptoPP__BlockTransformationIsPermutation8_user(_this, CryptoPP__BlockTransformationIsPermutation8_next);
        };
        static unsigned int CryptoPP__BlockTransformationOptimalNumberOfParallelBlocks10_wrapper(struct CryptoPP::BlockTransformation* _this)
        {
           return CryptoPP__BlockTransformationOptimalNumberOfParallelBlocks10_user(_this, CryptoPP__BlockTransformationOptimalNumberOfParallelBlocks10_next);
        };
        static void CryptoPP__BlockTransformationProcessAndXorMultipleBlocks11_wrapper(struct CryptoPP::BlockTransformation* _this, uint8_t* arg_0, uint8_t* arg_1, uint8_t* arg_2, uint64_t arg_3)
        {
           CryptoPP__BlockTransformationProcessAndXorMultipleBlocks11_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__BlockTransformationProcessAndXorMultipleBlocks11_next);
        };
        static void CryptoPP__BlockTransformationProcessBlock12_wrapper(struct CryptoPP::BlockTransformation* _this, uint8_t* arg_0)
        {
           CryptoPP__BlockTransformationProcessBlock12_user(_this, arg_0, CryptoPP__BlockTransformationProcessBlock12_next);
        };
        static void CryptoPP__BlockTransformationProcessBlock13_wrapper(struct CryptoPP::BlockTransformation* _this, uint8_t* arg_0, uint8_t* arg_1)
        {
           CryptoPP__BlockTransformationProcessBlock13_user(_this, arg_0, arg_1, CryptoPP__BlockTransformationProcessBlock13_next);
        };
        static void CryptoPP__BlockTransformationdtor_BlockTransformation15_wrapper(struct CryptoPP::BlockTransformation* _this)
        {
           CryptoPP__BlockTransformationdtor_BlockTransformation15_user(_this, CryptoPP__BlockTransformationdtor_BlockTransformation15_next);
        };
        
        static void CryptoPP__SimpleKeyingInterfaceAssertValidKeyLength1_wrapper(struct CryptoPP::SimpleKeyingInterface* _this, uint64_t arg_0)
        {
           CryptoPP__SimpleKeyingInterfaceAssertValidKeyLength1_user(_this, arg_0, CryptoPP__SimpleKeyingInterfaceAssertValidKeyLength1_next);
        };
        static uint8_t* CryptoPP__SimpleKeyingInterfaceGetIVAndThrowIfInvalid2_wrapper(struct CryptoPP::SimpleKeyingInterface* _this, struct CryptoPP::NameValuePairs* arg_0)
        {
           return CryptoPP__SimpleKeyingInterfaceGetIVAndThrowIfInvalid2_user(_this, arg_0, CryptoPP__SimpleKeyingInterfaceGetIVAndThrowIfInvalid2_next);
        };
        static void CryptoPP__SimpleKeyingInterfaceGetNextIV3_wrapper(struct CryptoPP::SimpleKeyingInterface* _this, struct CryptoPP::RandomNumberGenerator* arg_0, uint8_t* arg_1)
        {
           CryptoPP__SimpleKeyingInterfaceGetNextIV3_user(_this, arg_0, arg_1, CryptoPP__SimpleKeyingInterfaceGetNextIV3_next);
        };
        static bool CryptoPP__SimpleKeyingInterfaceIsResynchronizable4_wrapper(struct CryptoPP::SimpleKeyingInterface* _this)
        {
           return CryptoPP__SimpleKeyingInterfaceIsResynchronizable4_user(_this, CryptoPP__SimpleKeyingInterfaceIsResynchronizable4_next);
        };
        static bool CryptoPP__SimpleKeyingInterfaceIsValidKeyLength6_wrapper(struct CryptoPP::SimpleKeyingInterface* _this, uint64_t n)
        {
           return CryptoPP__SimpleKeyingInterfaceIsValidKeyLength6_user(_this, n, CryptoPP__SimpleKeyingInterfaceIsValidKeyLength6_next);
        };
        static void CryptoPP__SimpleKeyingInterfaceResynchronize8_wrapper(struct CryptoPP::SimpleKeyingInterface* _this, char* IV)
        {
           CryptoPP__SimpleKeyingInterfaceResynchronize8_user(_this, IV, CryptoPP__SimpleKeyingInterfaceResynchronize8_next);
        };
        static void CryptoPP__SimpleKeyingInterfaceSetKey9_wrapper(struct CryptoPP::SimpleKeyingInterface* _this, uint8_t* arg_0, uint64_t arg_1, struct CryptoPP::NameValuePairs* arg_2)
        {
           CryptoPP__SimpleKeyingInterfaceSetKey9_user(_this, arg_0, arg_1, arg_2, CryptoPP__SimpleKeyingInterfaceSetKey9_next);
        };
        static void CryptoPP__SimpleKeyingInterfaceSetKeyWithIV10_wrapper(struct CryptoPP::SimpleKeyingInterface* _this, uint8_t* arg_0, uint64_t arg_1, uint8_t* arg_2)
        {
           CryptoPP__SimpleKeyingInterfaceSetKeyWithIV10_user(_this, arg_0, arg_1, arg_2, CryptoPP__SimpleKeyingInterfaceSetKeyWithIV10_next);
        };
        static void CryptoPP__SimpleKeyingInterfaceSetKeyWithRounds11_wrapper(struct CryptoPP::SimpleKeyingInterface* _this, uint8_t* arg_0, uint64_t arg_1, int arg_2)
        {
           CryptoPP__SimpleKeyingInterfaceSetKeyWithRounds11_user(_this, arg_0, arg_1, arg_2, CryptoPP__SimpleKeyingInterfaceSetKeyWithRounds11_next);
        };
        static void CryptoPP__SimpleKeyingInterfacector_SimpleKeyingInterface13_wrapper(struct CryptoPP::SimpleKeyingInterface* _this, struct CryptoPP::SimpleKeyingInterface* __that)
        {
           CryptoPP__SimpleKeyingInterfacector_SimpleKeyingInterface13_user(_this, __that, CryptoPP__SimpleKeyingInterfacector_SimpleKeyingInterface13_next);
        };
        static void CryptoPP__SimpleKeyingInterfacector_SimpleKeyingInterface15_wrapper(struct CryptoPP::SimpleKeyingInterface* _this)
        {
           CryptoPP__SimpleKeyingInterfacector_SimpleKeyingInterface15_user(_this, CryptoPP__SimpleKeyingInterfacector_SimpleKeyingInterface15_next);
        };
        static void CryptoPP__SimpleKeyingInterfaceThrowIfInvalidIV16_wrapper(struct CryptoPP::SimpleKeyingInterface* _this, uint8_t* arg_0)
        {
           CryptoPP__SimpleKeyingInterfaceThrowIfInvalidIV16_user(_this, arg_0, CryptoPP__SimpleKeyingInterfaceThrowIfInvalidIV16_next);
        };
        static void CryptoPP__SimpleKeyingInterfaceThrowIfInvalidKeyLength17_wrapper(struct CryptoPP::SimpleKeyingInterface* _this, uint64_t arg_0)
        {
           CryptoPP__SimpleKeyingInterfaceThrowIfInvalidKeyLength17_user(_this, arg_0, CryptoPP__SimpleKeyingInterfaceThrowIfInvalidKeyLength17_next);
        };
        static void CryptoPP__SimpleKeyingInterfaceThrowIfResynchronizable18_wrapper(struct CryptoPP::SimpleKeyingInterface* _this)
        {
           CryptoPP__SimpleKeyingInterfaceThrowIfResynchronizable18_user(_this, CryptoPP__SimpleKeyingInterfaceThrowIfResynchronizable18_next);
        };
        static void CryptoPP__SimpleKeyingInterfacedtor_SimpleKeyingInterface20_wrapper(struct CryptoPP::SimpleKeyingInterface* _this)
        {
           CryptoPP__SimpleKeyingInterfacedtor_SimpleKeyingInterface20_user(_this, CryptoPP__SimpleKeyingInterfacedtor_SimpleKeyingInterface20_next);
        };
        
        static bool CryptoPP__NameValuePairsGetIntValue1_wrapper(struct CryptoPP::NameValuePairs* _this, char* arg_0, int* arg_1)
        {
           return CryptoPP__NameValuePairsGetIntValue1_user(_this, arg_0, arg_1, CryptoPP__NameValuePairsGetIntValue1_next);
        };
        static int64_t CryptoPP__NameValuePairsGetIntValueWithDefault2_wrapper(struct CryptoPP::NameValuePairs* _this, char* arg_0, int arg_1)
        {
           return CryptoPP__NameValuePairsGetIntValueWithDefault2_user(_this, arg_0, arg_1, CryptoPP__NameValuePairsGetIntValueWithDefault2_next);
        };
        static void CryptoPP__NameValuePairsGetRequiredIntParameter3_wrapper(struct CryptoPP::NameValuePairs* _this, char* arg_0, char* arg_1, int* arg_2)
        {
           CryptoPP__NameValuePairsGetRequiredIntParameter3_user(_this, arg_0, arg_1, arg_2, CryptoPP__NameValuePairsGetRequiredIntParameter3_next);
        };
        static bool CryptoPP__NameValuePairsGetThisObject5_wrapper(struct CryptoPP::NameValuePairs* _this, struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>* object)
        {
           return CryptoPP__NameValuePairsGetThisObject5_user(_this, object, CryptoPP__NameValuePairsGetThisObject5_next);
        };
        static bool CryptoPP__NameValuePairsGetThisObject7_wrapper(struct CryptoPP::NameValuePairs* _this, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>* object)
        {
           return CryptoPP__NameValuePairsGetThisObject7_user(_this, object, CryptoPP__NameValuePairsGetThisObject7_next);
        };
        static bool CryptoPP__NameValuePairsGetThisObject9_wrapper(struct CryptoPP::NameValuePairs* _this, struct CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >* object)
        {
           return CryptoPP__NameValuePairsGetThisObject9_user(_this, object, CryptoPP__NameValuePairsGetThisObject9_next);
        };
        static bool CryptoPP__NameValuePairsGetThisObject11_wrapper(struct CryptoPP::NameValuePairs* _this, struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>* object)
        {
           return CryptoPP__NameValuePairsGetThisObject11_user(_this, object, CryptoPP__NameValuePairsGetThisObject11_next);
        };
        static bool CryptoPP__NameValuePairsGetThisObject13_wrapper(struct CryptoPP::NameValuePairs* _this, struct CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >* object)
        {
           return CryptoPP__NameValuePairsGetThisObject13_user(_this, object, CryptoPP__NameValuePairsGetThisObject13_next);
        };
        static bool CryptoPP__NameValuePairsGetThisPointer15_wrapper(struct CryptoPP::NameValuePairs* _this, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>** p)
        {
           return CryptoPP__NameValuePairsGetThisPointer15_user(_this, p, CryptoPP__NameValuePairsGetThisPointer15_next);
        };
        static bool CryptoPP__NameValuePairsGetValue17_wrapper(struct CryptoPP::NameValuePairs* _this, char* name, struct CryptoPP::ConstByteArrayParameter* value)
        {
           return CryptoPP__NameValuePairsGetValue17_user(_this, name, value, CryptoPP__NameValuePairsGetValue17_next);
        };
        static bool CryptoPP__NameValuePairsGetValue19_wrapper(struct CryptoPP::NameValuePairs* _this, char* name, struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>* value)
        {
           return CryptoPP__NameValuePairsGetValue19_user(_this, name, value, CryptoPP__NameValuePairsGetValue19_next);
        };
        static bool CryptoPP__NameValuePairsGetValue21_wrapper(struct CryptoPP::NameValuePairs* _this, char* name, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>** value)
        {
           return CryptoPP__NameValuePairsGetValue21_user(_this, name, value, CryptoPP__NameValuePairsGetValue21_next);
        };
        static bool CryptoPP__NameValuePairsGetValue23_wrapper(struct CryptoPP::NameValuePairs* _this, char* name, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>* value)
        {
           return CryptoPP__NameValuePairsGetValue23_user(_this, name, value, CryptoPP__NameValuePairsGetValue23_next);
        };
        static bool CryptoPP__NameValuePairsGetValue25_wrapper(struct CryptoPP::NameValuePairs* _this, char* name, struct CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >* value)
        {
           return CryptoPP__NameValuePairsGetValue25_user(_this, name, value, CryptoPP__NameValuePairsGetValue25_next);
        };
        static bool CryptoPP__NameValuePairsGetValue27_wrapper(struct CryptoPP::NameValuePairs* _this, char* name, struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>* value)
        {
           return CryptoPP__NameValuePairsGetValue27_user(_this, name, value, CryptoPP__NameValuePairsGetValue27_next);
        };
        static bool CryptoPP__NameValuePairsGetValue29_wrapper(struct CryptoPP::NameValuePairs* _this, char* name, struct CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >* value)
        {
           return CryptoPP__NameValuePairsGetValue29_user(_this, name, value, CryptoPP__NameValuePairsGetValue29_next);
        };
        static bool CryptoPP__NameValuePairsGetValue31_wrapper(struct CryptoPP::NameValuePairs* _this, char* name, struct CryptoPP::ECPPoint* value)
        {
           return CryptoPP__NameValuePairsGetValue31_user(_this, name, value, CryptoPP__NameValuePairsGetValue31_next);
        };
        static bool CryptoPP__NameValuePairsGetValue33_wrapper(struct CryptoPP::NameValuePairs* _this, char* name, struct CryptoPP::Integer* value)
        {
           return CryptoPP__NameValuePairsGetValue33_user(_this, name, value, CryptoPP__NameValuePairsGetValue33_next);
        };
        static void CryptoPP__NameValuePairsctor_NameValuePairs35_wrapper(struct CryptoPP::NameValuePairs* _this, struct CryptoPP::NameValuePairs* __that)
        {
           CryptoPP__NameValuePairsctor_NameValuePairs35_user(_this, __that, CryptoPP__NameValuePairsctor_NameValuePairs35_next);
        };
        static void CryptoPP__NameValuePairsctor_NameValuePairs37_wrapper(struct CryptoPP::NameValuePairs* _this)
        {
           CryptoPP__NameValuePairsctor_NameValuePairs37_user(_this, CryptoPP__NameValuePairsctor_NameValuePairs37_next);
        };
        static void CryptoPP__NameValuePairsThrowIfTypeMismatch39_wrapper(char* name, struct type_info* stored, struct type_info* retrieving)
        {
           CryptoPP__NameValuePairsThrowIfTypeMismatch39_user(name, stored, retrieving, CryptoPP__NameValuePairsThrowIfTypeMismatch39_next);
        };
        static void CryptoPP__NameValuePairsdtor_NameValuePairs43_wrapper(struct CryptoPP::NameValuePairs* _this)
        {
           CryptoPP__NameValuePairsdtor_NameValuePairs43_user(_this, CryptoPP__NameValuePairsdtor_NameValuePairs43_next);
        };
        
        static void CryptoPP__NameValuePairs__ValueTypeMismatchctor_ValueTypeMismatch2_wrapper(struct CryptoPP::NameValuePairs::ValueTypeMismatch* _this, struct CryptoPP::NameValuePairs::ValueTypeMismatch* __that)
        {
           CryptoPP__NameValuePairs__ValueTypeMismatchctor_ValueTypeMismatch2_user(_this, __that, CryptoPP__NameValuePairs__ValueTypeMismatchctor_ValueTypeMismatch2_next);
        };
        static void CryptoPP__NameValuePairs__ValueTypeMismatchctor_ValueTypeMismatch4_wrapper(struct CryptoPP::NameValuePairs::ValueTypeMismatch* _this, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* name, struct type_info* stored, struct type_info* retrieving)
        {
           CryptoPP__NameValuePairs__ValueTypeMismatchctor_ValueTypeMismatch4_user(_this, name, stored, retrieving, CryptoPP__NameValuePairs__ValueTypeMismatchctor_ValueTypeMismatch4_next);
        };
        static void CryptoPP__NameValuePairs__ValueTypeMismatchdtor_ValueTypeMismatch9_wrapper(struct CryptoPP::NameValuePairs::ValueTypeMismatch* _this)
        {
           CryptoPP__NameValuePairs__ValueTypeMismatchdtor_ValueTypeMismatch9_user(_this, CryptoPP__NameValuePairs__ValueTypeMismatchdtor_ValueTypeMismatch9_next);
        };
        
        static struct CryptoPP::Algorithm* CryptoPP__SimpleKeyedTransformationGetAlgorithm2_wrapper(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>* _this)
        {
           return CryptoPP__SimpleKeyedTransformationGetAlgorithm2_user(_this, CryptoPP__SimpleKeyedTransformationGetAlgorithm2_next);
        };
        static void CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_wrapper(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>* _this, struct CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>* __that)
        {
           CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_user(_this, __that, CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_next);
        };
        static void CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation6_wrapper(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>* _this)
        {
           CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation6_user(_this, CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation6_next);
        };
        static void CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation8_wrapper(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>* _this)
        {
           CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation8_user(_this, CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation8_next);
        };
        
        static bool CryptoPP__RandomPoolCanIncorporateEntropy2_wrapper(struct CryptoPP::RandomPool* _this)
        {
           return CryptoPP__RandomPoolCanIncorporateEntropy2_user(_this, CryptoPP__RandomPoolCanIncorporateEntropy2_next);
        };
        static void CryptoPP__RandomPoolIncorporateEntropy3_wrapper(struct CryptoPP::RandomPool* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__RandomPoolIncorporateEntropy3_user(_this, arg_0, arg_1, CryptoPP__RandomPoolIncorporateEntropy3_next);
        };
        static int64_t CryptoPP__RandomPoolctor_RandomPool4_wrapper(struct CryptoPP::RandomPool* _this)
        {
           return CryptoPP__RandomPoolctor_RandomPool4_user(_this, CryptoPP__RandomPoolctor_RandomPool4_next);
        };
        static void CryptoPP__RandomPooldtor_RandomPool6_wrapper(struct CryptoPP::RandomPool* _this)
        {
           CryptoPP__RandomPooldtor_RandomPool6_user(_this, CryptoPP__RandomPooldtor_RandomPool6_next);
        };
        
        static void CryptoPP__AutoSeededRandomPoolctor_AutoSeededRandomPool2_wrapper(struct CryptoPP::AutoSeededRandomPool* _this, bool blocking, unsigned int seedSize)
        {
           CryptoPP__AutoSeededRandomPoolctor_AutoSeededRandomPool2_user(_this, blocking, seedSize, CryptoPP__AutoSeededRandomPoolctor_AutoSeededRandomPool2_next);
        };
        static void CryptoPP__AutoSeededRandomPoolReseed3_wrapper(struct CryptoPP::AutoSeededRandomPool* _this, bool arg_0, unsigned int arg_1)
        {
           CryptoPP__AutoSeededRandomPoolReseed3_user(_this, arg_0, arg_1, CryptoPP__AutoSeededRandomPoolReseed3_next);
        };
        static void CryptoPP__AutoSeededRandomPooldtor_AutoSeededRandomPool8_wrapper(struct CryptoPP::AutoSeededRandomPool* _this)
        {
           CryptoPP__AutoSeededRandomPooldtor_AutoSeededRandomPool8_user(_this, CryptoPP__AutoSeededRandomPooldtor_AutoSeededRandomPool8_next);
        };
        
        static int64_t CryptoPP__GeneratableCryptoMaterialctor_GeneratableCryptoMaterial1_wrapper(struct CryptoPP::GeneratableCryptoMaterial* _this, struct CryptoPP::GeneratableCryptoMaterial* arg_0)
        {
           return CryptoPP__GeneratableCryptoMaterialctor_GeneratableCryptoMaterial1_user(_this, arg_0, CryptoPP__GeneratableCryptoMaterialctor_GeneratableCryptoMaterial1_next);
        };
        static void CryptoPP__GeneratableCryptoMaterialctor_GeneratableCryptoMaterial3_wrapper(struct CryptoPP::GeneratableCryptoMaterial* _this)
        {
           CryptoPP__GeneratableCryptoMaterialctor_GeneratableCryptoMaterial3_user(_this, CryptoPP__GeneratableCryptoMaterialctor_GeneratableCryptoMaterial3_next);
        };
        static void CryptoPP__GeneratableCryptoMaterialGenerateRandom5_wrapper(struct CryptoPP::GeneratableCryptoMaterial* _this, struct CryptoPP::RandomNumberGenerator* rng, struct CryptoPP::NameValuePairs* params)
        {
           CryptoPP__GeneratableCryptoMaterialGenerateRandom5_user(_this, rng, params, CryptoPP__GeneratableCryptoMaterialGenerateRandom5_next);
        };
        static void CryptoPP__GeneratableCryptoMaterialGenerateRandomWithKeySize6_wrapper(struct CryptoPP::GeneratableCryptoMaterial* _this, struct CryptoPP::RandomNumberGenerator* arg_0, unsigned int arg_1)
        {
           CryptoPP__GeneratableCryptoMaterialGenerateRandomWithKeySize6_user(_this, arg_0, arg_1, CryptoPP__GeneratableCryptoMaterialGenerateRandomWithKeySize6_next);
        };
        static void CryptoPP__GeneratableCryptoMaterialdtor_GeneratableCryptoMaterial10_wrapper(struct CryptoPP::GeneratableCryptoMaterial* _this)
        {
           CryptoPP__GeneratableCryptoMaterialdtor_GeneratableCryptoMaterial10_user(_this, CryptoPP__GeneratableCryptoMaterialdtor_GeneratableCryptoMaterial10_next);
        };
        
        static int64_t CryptoPP__CryptoParametersctor_CryptoParameters1_wrapper(struct CryptoPP::CryptoParameters* _this, struct CryptoPP::CryptoParameters* arg_0)
        {
           return CryptoPP__CryptoParametersctor_CryptoParameters1_user(_this, arg_0, CryptoPP__CryptoParametersctor_CryptoParameters1_next);
        };
        static void CryptoPP__CryptoParametersctor_CryptoParameters3_wrapper(struct CryptoPP::CryptoParameters* _this)
        {
           CryptoPP__CryptoParametersctor_CryptoParameters3_user(_this, CryptoPP__CryptoParametersctor_CryptoParameters3_next);
        };
        static void CryptoPP__CryptoParametersdtor_CryptoParameters7_wrapper(struct CryptoPP::CryptoParameters* _this)
        {
           CryptoPP__CryptoParametersdtor_CryptoParameters7_user(_this, CryptoPP__CryptoParametersdtor_CryptoParameters7_next);
        };
        
        static void CryptoPP__DL_GroupParametersctor_DL_GroupParameters2_wrapper(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>* _this)
        {
           CryptoPP__DL_GroupParametersctor_DL_GroupParameters2_user(_this, CryptoPP__DL_GroupParametersctor_DL_GroupParameters2_next);
        };
        static struct CryptoPP::ECPPoint* CryptoPP__DL_GroupParametersExponentiateBase4_wrapper(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>* _this, struct CryptoPP::ECPPoint* result, struct CryptoPP::Integer* exponent)
        {
           return CryptoPP__DL_GroupParametersExponentiateBase4_user(_this, result, exponent, CryptoPP__DL_GroupParametersExponentiateBase4_next);
        };
        static struct CryptoPP::ECPPoint* CryptoPP__DL_GroupParametersExponentiateElement6_wrapper(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>* _this, struct CryptoPP::ECPPoint* result, struct CryptoPP::ECPPoint* base, struct CryptoPP::Integer* exponent)
        {
           return CryptoPP__DL_GroupParametersExponentiateElement6_user(_this, result, base, exponent, CryptoPP__DL_GroupParametersExponentiateElement6_next);
        };
        static struct CryptoPP::Integer* CryptoPP__DL_GroupParametersGetCofactor8_wrapper(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>* _this, struct CryptoPP::Integer* result)
        {
           return CryptoPP__DL_GroupParametersGetCofactor8_user(_this, result, CryptoPP__DL_GroupParametersGetCofactor8_next);
        };
        static struct CryptoPP::Integer* CryptoPP__DL_GroupParametersGetGroupOrder10_wrapper(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>* _this, struct CryptoPP::Integer* result)
        {
           return CryptoPP__DL_GroupParametersGetGroupOrder10_user(_this, result, CryptoPP__DL_GroupParametersGetGroupOrder10_next);
        };
        static struct CryptoPP::ECPPoint* CryptoPP__DL_GroupParametersGetSubgroupGenerator12_wrapper(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>* _this)
        {
           return CryptoPP__DL_GroupParametersGetSubgroupGenerator12_user(_this, CryptoPP__DL_GroupParametersGetSubgroupGenerator12_next);
        };
        static bool CryptoPP__DL_GroupParametersGetVoidValue14_wrapper(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>* _this, char* name, struct type_info* valueType, void* pValue)
        {
           return CryptoPP__DL_GroupParametersGetVoidValue14_user(_this, name, valueType, pValue, CryptoPP__DL_GroupParametersGetVoidValue14_next);
        };
        static void CryptoPP__DL_GroupParametersLoadPrecomputation16_wrapper(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>* _this, struct CryptoPP::BufferedTransformation* storedPrecomputation)
        {
           CryptoPP__DL_GroupParametersLoadPrecomputation16_user(_this, storedPrecomputation, CryptoPP__DL_GroupParametersLoadPrecomputation16_next);
        };
        static void CryptoPP__DL_GroupParametersPrecompute18_wrapper(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>* _this, unsigned int precomputationStorage)
        {
           CryptoPP__DL_GroupParametersPrecompute18_user(_this, precomputationStorage, CryptoPP__DL_GroupParametersPrecompute18_next);
        };
        static void CryptoPP__DL_GroupParametersSavePrecomputation20_wrapper(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>* _this, struct CryptoPP::BufferedTransformation* storedPrecomputation)
        {
           CryptoPP__DL_GroupParametersSavePrecomputation20_user(_this, storedPrecomputation, CryptoPP__DL_GroupParametersSavePrecomputation20_next);
        };
        static void CryptoPP__DL_GroupParametersSetSubgroupGenerator22_wrapper(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>* _this, struct CryptoPP::ECPPoint* base)
        {
           CryptoPP__DL_GroupParametersSetSubgroupGenerator22_user(_this, base, CryptoPP__DL_GroupParametersSetSubgroupGenerator22_next);
        };
        static bool CryptoPP__DL_GroupParametersSupportsPrecomputation24_wrapper(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>* _this)
        {
           return CryptoPP__DL_GroupParametersSupportsPrecomputation24_user(_this, CryptoPP__DL_GroupParametersSupportsPrecomputation24_next);
        };
        static bool CryptoPP__DL_GroupParametersValidate26_wrapper(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>* _this, struct CryptoPP::RandomNumberGenerator* rng, unsigned int level)
        {
           return CryptoPP__DL_GroupParametersValidate26_user(_this, rng, level, CryptoPP__DL_GroupParametersValidate26_next);
        };
        static void CryptoPP__DL_GroupParametersdtor_DL_GroupParameters30_wrapper(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>* _this)
        {
           CryptoPP__DL_GroupParametersdtor_DL_GroupParameters30_user(_this, CryptoPP__DL_GroupParametersdtor_DL_GroupParameters30_next);
        };
        
        static void CryptoPP__DL_Keyctor_DL_Key2_wrapper(struct CryptoPP::DL_Key<CryptoPP::ECPPoint>* _this)
        {
           CryptoPP__DL_Keyctor_DL_Key2_user(_this, CryptoPP__DL_Keyctor_DL_Key2_next);
        };
        
        static void CryptoPP__DL_PrivateKeyAssignFrom2_wrapper(struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>* _this, struct CryptoPP::NameValuePairs* source)
        {
           CryptoPP__DL_PrivateKeyAssignFrom2_user(_this, source, CryptoPP__DL_PrivateKeyAssignFrom2_next);
        };
        static void CryptoPP__DL_PrivateKeyctor_DL_PrivateKey4_wrapper(struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>* _this)
        {
           CryptoPP__DL_PrivateKeyctor_DL_PrivateKey4_user(_this, CryptoPP__DL_PrivateKeyctor_DL_PrivateKey4_next);
        };
        static bool CryptoPP__DL_PrivateKeyGetVoidValue6_wrapper(struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>* _this, char* name, struct type_info* valueType, void* pValue)
        {
           return CryptoPP__DL_PrivateKeyGetVoidValue6_user(_this, name, valueType, pValue, CryptoPP__DL_PrivateKeyGetVoidValue6_next);
        };
        static void CryptoPP__DL_PrivateKeyMakePublicKey8_wrapper(struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>* _this, struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>* pub)
        {
           CryptoPP__DL_PrivateKeyMakePublicKey8_user(_this, pub, CryptoPP__DL_PrivateKeyMakePublicKey8_next);
        };
        
        static int64_t CryptoPP__ASN1Objectctor_ASN1Object1_wrapper(struct CryptoPP::ASN1Object* _this, struct CryptoPP::ASN1Object* arg_0)
        {
           return CryptoPP__ASN1Objectctor_ASN1Object1_user(_this, arg_0, CryptoPP__ASN1Objectctor_ASN1Object1_next);
        };
        static void CryptoPP__ASN1Objectctor_ASN1Object3_wrapper(struct CryptoPP::ASN1Object* _this)
        {
           CryptoPP__ASN1Objectctor_ASN1Object3_user(_this, CryptoPP__ASN1Objectctor_ASN1Object3_next);
        };
        static void CryptoPP__ASN1ObjectBEREncode5_wrapper(struct CryptoPP::ASN1Object* _this, struct CryptoPP::BufferedTransformation* bt)
        {
           CryptoPP__ASN1ObjectBEREncode5_user(_this, bt, CryptoPP__ASN1ObjectBEREncode5_next);
        };
        static void CryptoPP__ASN1Objectdtor_ASN1Object9_wrapper(struct CryptoPP::ASN1Object* _this)
        {
           CryptoPP__ASN1Objectdtor_ASN1Object9_user(_this, CryptoPP__ASN1Objectdtor_ASN1Object9_next);
        };
        
        static int64_t CryptoPP__Waitablector_Waitable1_wrapper(struct CryptoPP::Waitable* _this, struct CryptoPP::Waitable* arg_0)
        {
           return CryptoPP__Waitablector_Waitable1_user(_this, arg_0, CryptoPP__Waitablector_Waitable1_next);
        };
        static void CryptoPP__Waitablector_Waitable3_wrapper(struct CryptoPP::Waitable* _this)
        {
           CryptoPP__Waitablector_Waitable3_user(_this, CryptoPP__Waitablector_Waitable3_next);
        };
        static void CryptoPP__Waitabledtor_Waitable5_wrapper(struct CryptoPP::Waitable* _this)
        {
           CryptoPP__Waitabledtor_Waitable5_user(_this, CryptoPP__Waitabledtor_Waitable5_next);
        };
        
        static bool CryptoPP__BufferedTransformationAnyMessages1_wrapper(struct CryptoPP::BufferedTransformation* _this)
        {
           return CryptoPP__BufferedTransformationAnyMessages1_user(_this, CryptoPP__BufferedTransformationAnyMessages1_next);
        };
        static bool CryptoPP__BufferedTransformationAnyRetrievable2_wrapper(struct CryptoPP::BufferedTransformation* _this)
        {
           return CryptoPP__BufferedTransformationAnyRetrievable2_user(_this, CryptoPP__BufferedTransformationAnyRetrievable2_next);
        };
        static void CryptoPP__BufferedTransformationAttach3_wrapper(struct CryptoPP::BufferedTransformation* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           CryptoPP__BufferedTransformationAttach3_user(_this, arg_0, CryptoPP__BufferedTransformationAttach3_next);
        };
        static bool CryptoPP__BufferedTransformationAttachable5_wrapper(struct CryptoPP::BufferedTransformation* _this)
        {
           return CryptoPP__BufferedTransformationAttachable5_user(_this, CryptoPP__BufferedTransformationAttachable5_next);
        };
        static struct CryptoPP::BufferedTransformation* CryptoPP__BufferedTransformationAttachedTransformation8_wrapper(struct CryptoPP::BufferedTransformation* _this)
        {
           return CryptoPP__BufferedTransformationAttachedTransformation8_user(_this, CryptoPP__BufferedTransformationAttachedTransformation8_next);
        };
        static struct CryptoPP::BufferedTransformation* CryptoPP__BufferedTransformationAttachedTransformation9_wrapper(struct CryptoPP::BufferedTransformation* _this)
        {
           return CryptoPP__BufferedTransformationAttachedTransformation9_user(_this, CryptoPP__BufferedTransformationAttachedTransformation9_next);
        };
        static int64_t CryptoPP__BufferedTransformationctor_BufferedTransformation10_wrapper(struct CryptoPP::BufferedTransformation* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           return CryptoPP__BufferedTransformationctor_BufferedTransformation10_user(_this, arg_0, CryptoPP__BufferedTransformationctor_BufferedTransformation10_next);
        };
        static void CryptoPP__BufferedTransformationctor_BufferedTransformation12_wrapper(struct CryptoPP::BufferedTransformation* _this)
        {
           CryptoPP__BufferedTransformationctor_BufferedTransformation12_user(_this, CryptoPP__BufferedTransformationctor_BufferedTransformation12_next);
        };
        static bool CryptoPP__BufferedTransformationCanModifyInput14_wrapper(struct CryptoPP::BufferedTransformation* _this)
        {
           return CryptoPP__BufferedTransformationCanModifyInput14_user(_this, CryptoPP__BufferedTransformationCanModifyInput14_next);
        };
        static char* CryptoPP__BufferedTransformationCreatePutSpace16_wrapper(struct CryptoPP::BufferedTransformation* _this, uint64_t* size)
        {
           return CryptoPP__BufferedTransformationCreatePutSpace16_user(_this, size, CryptoPP__BufferedTransformationCreatePutSpace16_next);
        };
        static void CryptoPP__BufferedTransformationDetach18_wrapper(struct CryptoPP::BufferedTransformation* _this, struct CryptoPP::BufferedTransformation* newAttachment)
        {
           CryptoPP__BufferedTransformationDetach18_user(_this, newAttachment, CryptoPP__BufferedTransformationDetach18_next);
        };
        static bool CryptoPP__BufferedTransformationFlush19_wrapper(struct CryptoPP::BufferedTransformation* _this, bool arg_0, int arg_1, bool arg_2)
        {
           return CryptoPP__BufferedTransformationFlush19_user(_this, arg_0, arg_1, arg_2, CryptoPP__BufferedTransformationFlush19_next);
        };
        static uint64_t CryptoPP__BufferedTransformationGet20_wrapper(struct CryptoPP::BufferedTransformation* _this, uint8_t* arg_0)
        {
           return CryptoPP__BufferedTransformationGet20_user(_this, arg_0, CryptoPP__BufferedTransformationGet20_next);
        };
        static uint64_t CryptoPP__BufferedTransformationGet21_wrapper(struct CryptoPP::BufferedTransformation* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           return CryptoPP__BufferedTransformationGet21_user(_this, arg_0, arg_1, CryptoPP__BufferedTransformationGet21_next);
        };
        static int64_t CryptoPP__BufferedTransformationGetAutoSignalPropagation22_wrapper(struct CryptoPP::BufferedTransformation* _this)
        {
           return CryptoPP__BufferedTransformationGetAutoSignalPropagation22_user(_this, CryptoPP__BufferedTransformationGetAutoSignalPropagation22_next);
        };
        static unsigned int CryptoPP__BufferedTransformationGetMaxWaitObjectCount23_wrapper(struct CryptoPP::BufferedTransformation* _this)
        {
           return CryptoPP__BufferedTransformationGetMaxWaitObjectCount23_user(_this, CryptoPP__BufferedTransformationGetMaxWaitObjectCount23_next);
        };
        static bool CryptoPP__BufferedTransformationGetNextMessage24_wrapper(struct CryptoPP::BufferedTransformation* _this)
        {
           return CryptoPP__BufferedTransformationGetNextMessage24_user(_this, CryptoPP__BufferedTransformationGetNextMessage24_next);
        };
        static bool CryptoPP__BufferedTransformationGetNextMessageSeries26_wrapper(struct CryptoPP::BufferedTransformation* _this)
        {
           return CryptoPP__BufferedTransformationGetNextMessageSeries26_user(_this, CryptoPP__BufferedTransformationGetNextMessageSeries26_next);
        };
        static void CryptoPP__BufferedTransformationGetWaitObjects27_wrapper(struct CryptoPP::BufferedTransformation* _this, CryptoPP::WaitObjectContainer* arg_0, CryptoPP::CallStack* arg_1)
        {
           CryptoPP__BufferedTransformationGetWaitObjects27_user(_this, arg_0, arg_1, CryptoPP__BufferedTransformationGetWaitObjects27_next);
        };
        static uint64_t CryptoPP__BufferedTransformationGetWord1628_wrapper(struct CryptoPP::BufferedTransformation* _this, uint16_t* arg_0, struct CryptoPP::ByteOrder arg_1)
        {
           return CryptoPP__BufferedTransformationGetWord1628_user(_this, arg_0, arg_1, CryptoPP__BufferedTransformationGetWord1628_next);
        };
        static uint64_t CryptoPP__BufferedTransformationGetWord3229_wrapper(struct CryptoPP::BufferedTransformation* _this, unsigned int* arg_0, struct CryptoPP::ByteOrder arg_1)
        {
           return CryptoPP__BufferedTransformationGetWord3229_user(_this, arg_0, arg_1, CryptoPP__BufferedTransformationGetWord3229_next);
        };
        static void CryptoPP__BufferedTransformationInitialize30_wrapper(struct CryptoPP::BufferedTransformation* _this, struct CryptoPP::NameValuePairs* arg_0, int arg_1)
        {
           CryptoPP__BufferedTransformationInitialize30_user(_this, arg_0, arg_1, CryptoPP__BufferedTransformationInitialize30_next);
        };
        static void CryptoPP__BufferedTransformationIsolatedInitialize31_wrapper(struct CryptoPP::BufferedTransformation* _this, struct CryptoPP::NameValuePairs* arg_0)
        {
           CryptoPP__BufferedTransformationIsolatedInitialize31_user(_this, arg_0, CryptoPP__BufferedTransformationIsolatedInitialize31_next);
        };
        static bool CryptoPP__BufferedTransformationIsolatedMessageSeriesEnd32_wrapper(struct CryptoPP::BufferedTransformation* _this, bool arg_0)
        {
           return CryptoPP__BufferedTransformationIsolatedMessageSeriesEnd32_user(_this, arg_0, CryptoPP__BufferedTransformationIsolatedMessageSeriesEnd32_next);
        };
        static uint64_t CryptoPP__BufferedTransformationMaxRetrievable33_wrapper(struct CryptoPP::BufferedTransformation* _this)
        {
           return CryptoPP__BufferedTransformationMaxRetrievable33_user(_this, CryptoPP__BufferedTransformationMaxRetrievable33_next);
        };
        static bool CryptoPP__BufferedTransformationMessageEnd34_wrapper(struct CryptoPP::BufferedTransformation* _this, int arg_0, bool arg_1)
        {
           return CryptoPP__BufferedTransformationMessageEnd34_user(_this, arg_0, arg_1, CryptoPP__BufferedTransformationMessageEnd34_next);
        };
        static bool CryptoPP__BufferedTransformationMessageSeriesEnd35_wrapper(struct CryptoPP::BufferedTransformation* _this, int arg_0, bool arg_1)
        {
           return CryptoPP__BufferedTransformationMessageSeriesEnd35_user(_this, arg_0, arg_1, CryptoPP__BufferedTransformationMessageSeriesEnd35_next);
        };
        static unsigned int CryptoPP__BufferedTransformationNumberOfMessageSeries37_wrapper(struct CryptoPP::BufferedTransformation* _this)
        {
           return CryptoPP__BufferedTransformationNumberOfMessageSeries37_user(_this, CryptoPP__BufferedTransformationNumberOfMessageSeries37_next);
        };
        static unsigned int CryptoPP__BufferedTransformationNumberOfMessages38_wrapper(struct CryptoPP::BufferedTransformation* _this)
        {
           return CryptoPP__BufferedTransformationNumberOfMessages38_user(_this, CryptoPP__BufferedTransformationNumberOfMessages38_next);
        };
        static unsigned int CryptoPP__BufferedTransformationNumberOfMessagesInThisSeries40_wrapper(struct CryptoPP::BufferedTransformation* _this)
        {
           return CryptoPP__BufferedTransformationNumberOfMessagesInThisSeries40_user(_this, CryptoPP__BufferedTransformationNumberOfMessagesInThisSeries40_next);
        };
        static uint64_t CryptoPP__BufferedTransformationPeek41_wrapper(struct CryptoPP::BufferedTransformation* _this, uint8_t* arg_0)
        {
           return CryptoPP__BufferedTransformationPeek41_user(_this, arg_0, CryptoPP__BufferedTransformationPeek41_next);
        };
        static uint64_t CryptoPP__BufferedTransformationPeek42_wrapper(struct CryptoPP::BufferedTransformation* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           return CryptoPP__BufferedTransformationPeek42_user(_this, arg_0, arg_1, CryptoPP__BufferedTransformationPeek42_next);
        };
        static uint64_t CryptoPP__BufferedTransformationPeekWord1643_wrapper(struct CryptoPP::BufferedTransformation* _this, uint16_t* arg_0, struct CryptoPP::ByteOrder arg_1)
        {
           return CryptoPP__BufferedTransformationPeekWord1643_user(_this, arg_0, arg_1, CryptoPP__BufferedTransformationPeekWord1643_next);
        };
        static uint64_t CryptoPP__BufferedTransformationPeekWord3244_wrapper(struct CryptoPP::BufferedTransformation* _this, unsigned int* arg_0, struct CryptoPP::ByteOrder arg_1)
        {
           return CryptoPP__BufferedTransformationPeekWord3244_user(_this, arg_0, arg_1, CryptoPP__BufferedTransformationPeekWord3244_next);
        };
        static uint64_t CryptoPP__BufferedTransformationPut45_wrapper(struct CryptoPP::BufferedTransformation* _this, uint8_t* arg_0, uint64_t arg_1, bool arg_2)
        {
           return CryptoPP__BufferedTransformationPut45_user(_this, arg_0, arg_1, arg_2, CryptoPP__BufferedTransformationPut45_next);
        };
        static uint64_t CryptoPP__BufferedTransformationPut46_wrapper(struct CryptoPP::BufferedTransformation* _this, uint8_t arg_0, bool arg_1)
        {
           return CryptoPP__BufferedTransformationPut46_user(_this, arg_0, arg_1, CryptoPP__BufferedTransformationPut46_next);
        };
        static uint64_t CryptoPP__BufferedTransformationPutModifiable47_wrapper(struct CryptoPP::BufferedTransformation* _this, uint8_t* arg_0, uint64_t arg_1, bool arg_2)
        {
           return CryptoPP__BufferedTransformationPutModifiable47_user(_this, arg_0, arg_1, arg_2, CryptoPP__BufferedTransformationPutModifiable47_next);
        };
        static uint64_t CryptoPP__BufferedTransformationPutModifiable249_wrapper(struct CryptoPP::BufferedTransformation* _this, char* inString, uint64_t length, int messageEnd, bool blocking)
        {
           return CryptoPP__BufferedTransformationPutModifiable249_user(_this, inString, length, messageEnd, blocking, CryptoPP__BufferedTransformationPutModifiable249_next);
        };
        static uint64_t CryptoPP__BufferedTransformationPutWord1650_wrapper(struct CryptoPP::BufferedTransformation* _this, uint16_t arg_0, struct CryptoPP::ByteOrder arg_1, bool arg_2)
        {
           return CryptoPP__BufferedTransformationPutWord1650_user(_this, arg_0, arg_1, arg_2, CryptoPP__BufferedTransformationPutWord1650_next);
        };
        static uint64_t CryptoPP__BufferedTransformationPutWord3251_wrapper(struct CryptoPP::BufferedTransformation* _this, unsigned int arg_0, struct CryptoPP::ByteOrder arg_1, bool arg_2)
        {
           return CryptoPP__BufferedTransformationPutWord3251_user(_this, arg_0, arg_1, arg_2, CryptoPP__BufferedTransformationPutWord3251_next);
        };
        static void CryptoPP__BufferedTransformationSetAutoSignalPropagation52_wrapper(struct CryptoPP::BufferedTransformation* _this, int arg_0)
        {
           CryptoPP__BufferedTransformationSetAutoSignalPropagation52_user(_this, arg_0, CryptoPP__BufferedTransformationSetAutoSignalPropagation52_next);
        };
        static uint64_t CryptoPP__BufferedTransformationSkip53_wrapper(struct CryptoPP::BufferedTransformation* _this, uint64_t arg_0)
        {
           return CryptoPP__BufferedTransformationSkip53_user(_this, arg_0, CryptoPP__BufferedTransformationSkip53_next);
        };
        static void CryptoPP__BufferedTransformationSkipAll54_wrapper(struct CryptoPP::BufferedTransformation* _this)
        {
           CryptoPP__BufferedTransformationSkipAll54_user(_this, CryptoPP__BufferedTransformationSkipAll54_next);
        };
        static unsigned int CryptoPP__BufferedTransformationSkipMessages55_wrapper(struct CryptoPP::BufferedTransformation* _this, unsigned int arg_0)
        {
           return CryptoPP__BufferedTransformationSkipMessages55_user(_this, arg_0, CryptoPP__BufferedTransformationSkipMessages55_next);
        };
        static uint64_t CryptoPP__BufferedTransformationTotalBytesRetrievable56_wrapper(struct CryptoPP::BufferedTransformation* _this)
        {
           return CryptoPP__BufferedTransformationTotalBytesRetrievable56_user(_this, CryptoPP__BufferedTransformationTotalBytesRetrievable56_next);
        };
        static void CryptoPP__BufferedTransformationdtor_BufferedTransformation58_wrapper(struct CryptoPP::BufferedTransformation* _this)
        {
           CryptoPP__BufferedTransformationdtor_BufferedTransformation58_user(_this, CryptoPP__BufferedTransformationdtor_BufferedTransformation58_next);
        };
        
        static int64_t CryptoPP__BufferedTransformation__BlockingInputOnlyctor_BlockingInputOnly1_wrapper(struct CryptoPP::BufferedTransformation::BlockingInputOnly* _this, struct CryptoPP::BufferedTransformation::BlockingInputOnly* arg_0)
        {
           return CryptoPP__BufferedTransformation__BlockingInputOnlyctor_BlockingInputOnly1_user(_this, arg_0, CryptoPP__BufferedTransformation__BlockingInputOnlyctor_BlockingInputOnly1_next);
        };
        static int64_t CryptoPP__BufferedTransformation__BlockingInputOnlydtor_BlockingInputOnly2_wrapper(struct CryptoPP::BufferedTransformation::BlockingInputOnly* _this)
        {
           return CryptoPP__BufferedTransformation__BlockingInputOnlydtor_BlockingInputOnly2_user(_this, CryptoPP__BufferedTransformation__BlockingInputOnlydtor_BlockingInputOnly2_next);
        };
        
        static int64_t CryptoPP__BufferedTransformation__NoChannelSupportctor_NoChannelSupport1_wrapper(struct CryptoPP::BufferedTransformation::NoChannelSupport* _this, struct CryptoPP::BufferedTransformation::NoChannelSupport* arg_0)
        {
           return CryptoPP__BufferedTransformation__NoChannelSupportctor_NoChannelSupport1_user(_this, arg_0, CryptoPP__BufferedTransformation__NoChannelSupportctor_NoChannelSupport1_next);
        };
        static int64_t CryptoPP__BufferedTransformation__NoChannelSupportctor_NoChannelSupport2_wrapper(struct CryptoPP::BufferedTransformation::NoChannelSupport* _this)
        {
           return CryptoPP__BufferedTransformation__NoChannelSupportctor_NoChannelSupport2_user(_this, CryptoPP__BufferedTransformation__NoChannelSupportctor_NoChannelSupport2_next);
        };
        static int64_t CryptoPP__BufferedTransformation__NoChannelSupportdtor_NoChannelSupport3_wrapper(struct CryptoPP::BufferedTransformation::NoChannelSupport* _this)
        {
           return CryptoPP__BufferedTransformation__NoChannelSupportdtor_NoChannelSupport3_user(_this, CryptoPP__BufferedTransformation__NoChannelSupportdtor_NoChannelSupport3_next);
        };
        
        static int64_t CryptoPP__PrivateKeyctor_PrivateKey1_wrapper(struct CryptoPP::PrivateKey* _this, struct CryptoPP::PrivateKey* arg_0)
        {
           return CryptoPP__PrivateKeyctor_PrivateKey1_user(_this, arg_0, CryptoPP__PrivateKeyctor_PrivateKey1_next);
        };
        static void CryptoPP__PrivateKeyctor_PrivateKey3_wrapper(struct CryptoPP::PrivateKey* _this)
        {
           CryptoPP__PrivateKeyctor_PrivateKey3_user(_this, CryptoPP__PrivateKeyctor_PrivateKey3_next);
        };
        static void CryptoPP__PrivateKeydtor_PrivateKey7_wrapper(struct CryptoPP::PrivateKey* _this)
        {
           CryptoPP__PrivateKeydtor_PrivateKey7_user(_this, CryptoPP__PrivateKeydtor_PrivateKey7_next);
        };
        
        static void CryptoPP__ASN1CryptoMaterialctor_ASN1CryptoMaterial2_wrapper(struct CryptoPP::ASN1CryptoMaterial<CryptoPP::PrivateKey>* _this)
        {
           CryptoPP__ASN1CryptoMaterialctor_ASN1CryptoMaterial2_user(_this, CryptoPP__ASN1CryptoMaterialctor_ASN1CryptoMaterial2_next);
        };
        static void CryptoPP__ASN1CryptoMaterialLoad4_wrapper(struct CryptoPP::ASN1CryptoMaterial<CryptoPP::PrivateKey>* _this, struct CryptoPP::BufferedTransformation* bt)
        {
           CryptoPP__ASN1CryptoMaterialLoad4_user(_this, bt, CryptoPP__ASN1CryptoMaterialLoad4_next);
        };
        static void CryptoPP__ASN1CryptoMaterialSave6_wrapper(struct CryptoPP::ASN1CryptoMaterial<CryptoPP::PrivateKey>* _this, struct CryptoPP::BufferedTransformation* bt)
        {
           CryptoPP__ASN1CryptoMaterialSave6_user(_this, bt, CryptoPP__ASN1CryptoMaterialSave6_next);
        };
        static void CryptoPP__ASN1CryptoMaterialdtor_ASN1CryptoMaterial10_wrapper(struct CryptoPP::ASN1CryptoMaterial<CryptoPP::PrivateKey>* _this)
        {
           CryptoPP__ASN1CryptoMaterialdtor_ASN1CryptoMaterial10_user(_this, CryptoPP__ASN1CryptoMaterialdtor_ASN1CryptoMaterial10_next);
        };
        
        static bool CryptoPP__ByteQueueAnyRetrievable1_wrapper(struct CryptoPP::ByteQueue* _this)
        {
           return CryptoPP__ByteQueueAnyRetrievable1_user(_this, CryptoPP__ByteQueueAnyRetrievable1_next);
        };
        static int64_t CryptoPP__ByteQueuector_ByteQueue2_wrapper(struct CryptoPP::ByteQueue* _this, struct CryptoPP::ByteQueue* arg_0)
        {
           return CryptoPP__ByteQueuector_ByteQueue2_user(_this, arg_0, CryptoPP__ByteQueuector_ByteQueue2_next);
        };
        static int64_t CryptoPP__ByteQueuector_ByteQueue3_wrapper(struct CryptoPP::ByteQueue* _this, uint64_t arg_0)
        {
           return CryptoPP__ByteQueuector_ByteQueue3_user(_this, arg_0, CryptoPP__ByteQueuector_ByteQueue3_next);
        };
        static void CryptoPP__ByteQueueCleanupUsedNodes4_wrapper(struct CryptoPP::ByteQueue* _this)
        {
           CryptoPP__ByteQueueCleanupUsedNodes4_user(_this, CryptoPP__ByteQueueCleanupUsedNodes4_next);
        };
        static void CryptoPP__ByteQueueClear5_wrapper(struct CryptoPP::ByteQueue* _this)
        {
           CryptoPP__ByteQueueClear5_user(_this, CryptoPP__ByteQueueClear5_next);
        };
        static void CryptoPP__ByteQueueCopyFrom6_wrapper(struct CryptoPP::ByteQueue* _this, struct CryptoPP::ByteQueue* arg_0)
        {
           CryptoPP__ByteQueueCopyFrom6_user(_this, arg_0, CryptoPP__ByteQueueCopyFrom6_next);
        };
        static uint8_t* CryptoPP__ByteQueueCreatePutSpace7_wrapper(struct CryptoPP::ByteQueue* _this, uint64_t* arg_0)
        {
           return CryptoPP__ByteQueueCreatePutSpace7_user(_this, arg_0, CryptoPP__ByteQueueCreatePutSpace7_next);
        };
        static uint64_t CryptoPP__ByteQueueCurrentSize8_wrapper(struct CryptoPP::ByteQueue* _this)
        {
           return CryptoPP__ByteQueueCurrentSize8_user(_this, CryptoPP__ByteQueueCurrentSize8_next);
        };
        static void CryptoPP__ByteQueueDestroy9_wrapper(struct CryptoPP::ByteQueue* _this)
        {
           CryptoPP__ByteQueueDestroy9_user(_this, CryptoPP__ByteQueueDestroy9_next);
        };
        static void CryptoPP__ByteQueueFinalizeLazyPut10_wrapper(struct CryptoPP::ByteQueue* _this)
        {
           CryptoPP__ByteQueueFinalizeLazyPut10_user(_this, CryptoPP__ByteQueueFinalizeLazyPut10_next);
        };
        static uint64_t CryptoPP__ByteQueueGet11_wrapper(struct CryptoPP::ByteQueue* _this, uint8_t* arg_0)
        {
           return CryptoPP__ByteQueueGet11_user(_this, arg_0, CryptoPP__ByteQueueGet11_next);
        };
        static uint64_t CryptoPP__ByteQueueGet12_wrapper(struct CryptoPP::ByteQueue* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           return CryptoPP__ByteQueueGet12_user(_this, arg_0, arg_1, CryptoPP__ByteQueueGet12_next);
        };
        static bool CryptoPP__ByteQueueIsEmpty13_wrapper(struct CryptoPP::ByteQueue* _this)
        {
           return CryptoPP__ByteQueueIsEmpty13_user(_this, CryptoPP__ByteQueueIsEmpty13_next);
        };
        static void CryptoPP__ByteQueueIsolatedInitialize14_wrapper(struct CryptoPP::ByteQueue* _this, struct CryptoPP::NameValuePairs* arg_0)
        {
           CryptoPP__ByteQueueIsolatedInitialize14_user(_this, arg_0, CryptoPP__ByteQueueIsolatedInitialize14_next);
        };
        static void CryptoPP__ByteQueueLazyPut15_wrapper(struct CryptoPP::ByteQueue* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__ByteQueueLazyPut15_user(_this, arg_0, arg_1, CryptoPP__ByteQueueLazyPut15_next);
        };
        static void CryptoPP__ByteQueueLazyPutModifiable16_wrapper(struct CryptoPP::ByteQueue* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__ByteQueueLazyPutModifiable16_user(_this, arg_0, arg_1, CryptoPP__ByteQueueLazyPutModifiable16_next);
        };
        static uint64_t CryptoPP__ByteQueueMaxRetrievable17_wrapper(struct CryptoPP::ByteQueue* _this)
        {
           return CryptoPP__ByteQueueMaxRetrievable17_user(_this, CryptoPP__ByteQueueMaxRetrievable17_next);
        };
        static uint64_t CryptoPP__ByteQueuePeek18_wrapper(struct CryptoPP::ByteQueue* _this, uint8_t* arg_0)
        {
           return CryptoPP__ByteQueuePeek18_user(_this, arg_0, CryptoPP__ByteQueuePeek18_next);
        };
        static uint64_t CryptoPP__ByteQueuePeek19_wrapper(struct CryptoPP::ByteQueue* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           return CryptoPP__ByteQueuePeek19_user(_this, arg_0, arg_1, CryptoPP__ByteQueuePeek19_next);
        };
        static uint64_t CryptoPP__ByteQueuePut220_wrapper(struct CryptoPP::ByteQueue* _this, uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
        {
           return CryptoPP__ByteQueuePut220_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__ByteQueuePut220_next);
        };
        static void CryptoPP__ByteQueueSetNodeSize21_wrapper(struct CryptoPP::ByteQueue* _this, uint64_t arg_0)
        {
           CryptoPP__ByteQueueSetNodeSize21_user(_this, arg_0, CryptoPP__ByteQueueSetNodeSize21_next);
        };
        static uint8_t* CryptoPP__ByteQueueSpy22_wrapper(struct CryptoPP::ByteQueue* _this, uint64_t* arg_0)
        {
           return CryptoPP__ByteQueueSpy22_user(_this, arg_0, CryptoPP__ByteQueueSpy22_next);
        };
        static void CryptoPP__ByteQueueUndoLazyPut23_wrapper(struct CryptoPP::ByteQueue* _this, uint64_t arg_0)
        {
           CryptoPP__ByteQueueUndoLazyPut23_user(_this, arg_0, CryptoPP__ByteQueueUndoLazyPut23_next);
        };
        static void CryptoPP__ByteQueueUnget24_wrapper(struct CryptoPP::ByteQueue* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__ByteQueueUnget24_user(_this, arg_0, arg_1, CryptoPP__ByteQueueUnget24_next);
        };
        static void CryptoPP__ByteQueueUnget25_wrapper(struct CryptoPP::ByteQueue* _this, uint8_t arg_0)
        {
           CryptoPP__ByteQueueUnget25_user(_this, arg_0, CryptoPP__ByteQueueUnget25_next);
        };
        static void CryptoPP__ByteQueueswap26_wrapper(struct CryptoPP::ByteQueue* _this, struct CryptoPP::ByteQueue* arg_0)
        {
           CryptoPP__ByteQueueswap26_user(_this, arg_0, CryptoPP__ByteQueueswap26_next);
        };
        static int64_t CryptoPP__ByteQueuedtor_ByteQueue27_wrapper(struct CryptoPP::ByteQueue* _this)
        {
           return CryptoPP__ByteQueuedtor_ByteQueue27_user(_this, CryptoPP__ByteQueuedtor_ByteQueue27_next);
        };
        
        static uint64_t CryptoPP__ByteQueue__WalkerGet1_wrapper(struct CryptoPP::ByteQueue::Walker* _this, uint8_t* arg_0)
        {
           return CryptoPP__ByteQueue__WalkerGet1_user(_this, arg_0, CryptoPP__ByteQueue__WalkerGet1_next);
        };
        static uint64_t CryptoPP__ByteQueue__WalkerGet2_wrapper(struct CryptoPP::ByteQueue::Walker* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           return CryptoPP__ByteQueue__WalkerGet2_user(_this, arg_0, arg_1, CryptoPP__ByteQueue__WalkerGet2_next);
        };
        static uint64_t CryptoPP__ByteQueue__WalkerGetCurrentPosition3_wrapper(struct CryptoPP::ByteQueue::Walker* _this)
        {
           return CryptoPP__ByteQueue__WalkerGetCurrentPosition3_user(_this, CryptoPP__ByteQueue__WalkerGetCurrentPosition3_next);
        };
        static void CryptoPP__ByteQueue__WalkerIsolatedInitialize4_wrapper(struct CryptoPP::ByteQueue::Walker* _this, struct CryptoPP::NameValuePairs* arg_0)
        {
           CryptoPP__ByteQueue__WalkerIsolatedInitialize4_user(_this, arg_0, CryptoPP__ByteQueue__WalkerIsolatedInitialize4_next);
        };
        static uint64_t CryptoPP__ByteQueue__WalkerMaxRetrievable5_wrapper(struct CryptoPP::ByteQueue::Walker* _this)
        {
           return CryptoPP__ByteQueue__WalkerMaxRetrievable5_user(_this, CryptoPP__ByteQueue__WalkerMaxRetrievable5_next);
        };
        static uint64_t CryptoPP__ByteQueue__WalkerPeek6_wrapper(struct CryptoPP::ByteQueue::Walker* _this, uint8_t* arg_0)
        {
           return CryptoPP__ByteQueue__WalkerPeek6_user(_this, arg_0, CryptoPP__ByteQueue__WalkerPeek6_next);
        };
        static uint64_t CryptoPP__ByteQueue__WalkerPeek7_wrapper(struct CryptoPP::ByteQueue::Walker* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           return CryptoPP__ByteQueue__WalkerPeek7_user(_this, arg_0, arg_1, CryptoPP__ByteQueue__WalkerPeek7_next);
        };
        static int64_t CryptoPP__ByteQueue__Walkerctor_Walker8_wrapper(struct CryptoPP::ByteQueue::Walker* _this, struct CryptoPP::ByteQueue* arg_0)
        {
           return CryptoPP__ByteQueue__Walkerctor_Walker8_user(_this, arg_0, CryptoPP__ByteQueue__Walkerctor_Walker8_next);
        };
        static int64_t CryptoPP__ByteQueue__Walkerctor_Walker9_wrapper(struct CryptoPP::ByteQueue::Walker* _this, struct CryptoPP::ByteQueue::Walker* arg_0)
        {
           return CryptoPP__ByteQueue__Walkerctor_Walker9_user(_this, arg_0, CryptoPP__ByteQueue__Walkerctor_Walker9_next);
        };
        static int64_t CryptoPP__ByteQueue__Walkerdtor_Walker10_wrapper(struct CryptoPP::ByteQueue::Walker* _this)
        {
           return CryptoPP__ByteQueue__Walkerdtor_Walker10_user(_this, CryptoPP__ByteQueue__Walkerdtor_Walker10_next);
        };
        
        static void CryptoPP__PKCS8PrivateKeyBERDecode1_wrapper(struct CryptoPP::PKCS8PrivateKey* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           CryptoPP__PKCS8PrivateKeyBERDecode1_user(_this, arg_0, CryptoPP__PKCS8PrivateKeyBERDecode1_next);
        };
        static bool CryptoPP__PKCS8PrivateKeyBERDecodeAlgorithmParameters3_wrapper(struct CryptoPP::PKCS8PrivateKey* _this, struct CryptoPP::BufferedTransformation* bt)
        {
           return CryptoPP__PKCS8PrivateKeyBERDecodeAlgorithmParameters3_user(_this, bt, CryptoPP__PKCS8PrivateKeyBERDecodeAlgorithmParameters3_next);
        };
        static void CryptoPP__PKCS8PrivateKeyBERDecodeOptionalAttributes4_wrapper(struct CryptoPP::PKCS8PrivateKey* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           CryptoPP__PKCS8PrivateKeyBERDecodeOptionalAttributes4_user(_this, arg_0, CryptoPP__PKCS8PrivateKeyBERDecodeOptionalAttributes4_next);
        };
        static void CryptoPP__PKCS8PrivateKeyDEREncode5_wrapper(struct CryptoPP::PKCS8PrivateKey* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           CryptoPP__PKCS8PrivateKeyDEREncode5_user(_this, arg_0, CryptoPP__PKCS8PrivateKeyDEREncode5_next);
        };
        static bool CryptoPP__PKCS8PrivateKeyDEREncodeAlgorithmParameters7_wrapper(struct CryptoPP::PKCS8PrivateKey* _this, struct CryptoPP::BufferedTransformation* bt)
        {
           return CryptoPP__PKCS8PrivateKeyDEREncodeAlgorithmParameters7_user(_this, bt, CryptoPP__PKCS8PrivateKeyDEREncodeAlgorithmParameters7_next);
        };
        static void CryptoPP__PKCS8PrivateKeyDEREncodeOptionalAttributes8_wrapper(struct CryptoPP::PKCS8PrivateKey* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           CryptoPP__PKCS8PrivateKeyDEREncodeOptionalAttributes8_user(_this, arg_0, CryptoPP__PKCS8PrivateKeyDEREncodeOptionalAttributes8_next);
        };
        static int64_t CryptoPP__PKCS8PrivateKeyctor_PKCS8PrivateKey9_wrapper(struct CryptoPP::PKCS8PrivateKey* _this, struct CryptoPP::PKCS8PrivateKey* arg_0)
        {
           return CryptoPP__PKCS8PrivateKeyctor_PKCS8PrivateKey9_user(_this, arg_0, CryptoPP__PKCS8PrivateKeyctor_PKCS8PrivateKey9_next);
        };
        static void CryptoPP__PKCS8PrivateKeyctor_PKCS8PrivateKey11_wrapper(struct CryptoPP::PKCS8PrivateKey* _this)
        {
           CryptoPP__PKCS8PrivateKeyctor_PKCS8PrivateKey11_user(_this, CryptoPP__PKCS8PrivateKeyctor_PKCS8PrivateKey11_next);
        };
        static void CryptoPP__PKCS8PrivateKeydtor_PKCS8PrivateKey20_wrapper(struct CryptoPP::PKCS8PrivateKey* _this)
        {
           CryptoPP__PKCS8PrivateKeydtor_PKCS8PrivateKey20_user(_this, CryptoPP__PKCS8PrivateKeydtor_PKCS8PrivateKey20_next);
        };
        
        static struct CryptoPP::ECPPoint* CryptoPP__DL_GroupPrecomputationConvertIn2_wrapper(struct CryptoPP::DL_GroupPrecomputation<CryptoPP::ECPPoint>* _this, struct CryptoPP::ECPPoint* result, struct CryptoPP::ECPPoint* v)
        {
           return CryptoPP__DL_GroupPrecomputationConvertIn2_user(_this, result, v, CryptoPP__DL_GroupPrecomputationConvertIn2_next);
        };
        static struct CryptoPP::ECPPoint* CryptoPP__DL_GroupPrecomputationConvertOut4_wrapper(struct CryptoPP::DL_GroupPrecomputation<CryptoPP::ECPPoint>* _this, struct CryptoPP::ECPPoint* result, struct CryptoPP::ECPPoint* v)
        {
           return CryptoPP__DL_GroupPrecomputationConvertOut4_user(_this, result, v, CryptoPP__DL_GroupPrecomputationConvertOut4_next);
        };
        static void CryptoPP__DL_GroupPrecomputationctor_DL_GroupPrecomputation6_wrapper(struct CryptoPP::DL_GroupPrecomputation<CryptoPP::ECPPoint>* _this)
        {
           CryptoPP__DL_GroupPrecomputationctor_DL_GroupPrecomputation6_user(_this, CryptoPP__DL_GroupPrecomputationctor_DL_GroupPrecomputation6_next);
        };
        static bool CryptoPP__DL_GroupPrecomputationNeedConversions8_wrapper(struct CryptoPP::DL_GroupPrecomputation<CryptoPP::ECPPoint>* _this)
        {
           return CryptoPP__DL_GroupPrecomputationNeedConversions8_user(_this, CryptoPP__DL_GroupPrecomputationNeedConversions8_next);
        };
        
        static int64_t CryptoPP__InitializeIntegerctor_InitializeInteger1_wrapper(struct CryptoPP::InitializeInteger* _this)
        {
           return CryptoPP__InitializeIntegerctor_InitializeInteger1_user(_this, CryptoPP__InitializeIntegerctor_InitializeInteger1_next);
        };
        
        static void CryptoPP__AllocatorWithCleanupdeallocate2_wrapper(struct CryptoPP::AllocatorWithCleanup<unsigned __int64,0>* _this, void* p, uint64_t n)
        {
           CryptoPP__AllocatorWithCleanupdeallocate2_user(_this, p, n, CryptoPP__AllocatorWithCleanupdeallocate2_next);
        };
        
        static struct CryptoPP::Integer* CryptoPP__IntegerAbsoluteValue1_wrapper(struct CryptoPP::Integer* _this, short retstr)
        {
           return CryptoPP__IntegerAbsoluteValue1_user(_this, retstr, CryptoPP__IntegerAbsoluteValue1_next);
        };
        static void CryptoPP__IntegerBERDecode2_wrapper(struct CryptoPP::Integer* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           CryptoPP__IntegerBERDecode2_user(_this, arg_0, CryptoPP__IntegerBERDecode2_next);
        };
        static void CryptoPP__IntegerBERDecode3_wrapper(struct CryptoPP::Integer* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__IntegerBERDecode3_user(_this, arg_0, arg_1, CryptoPP__IntegerBERDecode3_next);
        };
        static void CryptoPP__IntegerBERDecodeAsOctetString4_wrapper(struct CryptoPP::Integer* _this, struct CryptoPP::BufferedTransformation* arg_0, uint64_t arg_1)
        {
           CryptoPP__IntegerBERDecodeAsOctetString4_user(_this, arg_0, arg_1, CryptoPP__IntegerBERDecodeAsOctetString4_next);
        };
        static unsigned int CryptoPP__IntegerBitCount5_wrapper(struct CryptoPP::Integer* _this)
        {
           return CryptoPP__IntegerBitCount5_user(_this, CryptoPP__IntegerBitCount5_next);
        };
        static unsigned int CryptoPP__IntegerByteCount6_wrapper(struct CryptoPP::Integer* _this)
        {
           return CryptoPP__IntegerByteCount6_user(_this, CryptoPP__IntegerByteCount6_next);
        };
        static int64_t CryptoPP__IntegerCompare7_wrapper(struct CryptoPP::Integer* _this, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__IntegerCompare7_user(_this, arg_0, CryptoPP__IntegerCompare7_next);
        };
        static int32_t CryptoPP__IntegerConvertToLong8_wrapper(struct CryptoPP::Integer* _this)
        {
           return CryptoPP__IntegerConvertToLong8_user(_this, CryptoPP__IntegerConvertToLong8_next);
        };
        static void CryptoPP__IntegerDEREncode9_wrapper(struct CryptoPP::Integer* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           CryptoPP__IntegerDEREncode9_user(_this, arg_0, CryptoPP__IntegerDEREncode9_next);
        };
        static void CryptoPP__IntegerDEREncodeAsOctetString10_wrapper(struct CryptoPP::Integer* _this, struct CryptoPP::BufferedTransformation* arg_0, uint64_t arg_1)
        {
           CryptoPP__IntegerDEREncodeAsOctetString10_user(_this, arg_0, arg_1, CryptoPP__IntegerDEREncodeAsOctetString10_next);
        };
        static void CryptoPP__IntegerDecode11_wrapper(struct CryptoPP::Integer* _this, struct CryptoPP::BufferedTransformation* arg_0, uint64_t arg_1, struct CryptoPP::Integer::Signedness arg_2)
        {
           CryptoPP__IntegerDecode11_user(_this, arg_0, arg_1, arg_2, CryptoPP__IntegerDecode11_next);
        };
        static void CryptoPP__IntegerDecode12_wrapper(struct CryptoPP::Integer* _this, uint8_t* arg_0, uint64_t arg_1, struct CryptoPP::Integer::Signedness arg_2)
        {
           CryptoPP__IntegerDecode12_user(_this, arg_0, arg_1, arg_2, CryptoPP__IntegerDecode12_next);
        };
        static void CryptoPP__IntegerDivide13_wrapper(struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2, struct CryptoPP::Integer* arg_3)
        {
           CryptoPP__IntegerDivide13_user(arg_0, arg_1, arg_2, arg_3, CryptoPP__IntegerDivide13_next);
        };
        static void CryptoPP__IntegerDivide14_wrapper(uint64_t* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2, uint64_t arg_3)
        {
           CryptoPP__IntegerDivide14_user(arg_0, arg_1, arg_2, arg_3, CryptoPP__IntegerDivide14_next);
        };
        static void CryptoPP__IntegerDivideByPowerOf215_wrapper(struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2, unsigned int arg_3)
        {
           CryptoPP__IntegerDivideByPowerOf215_user(arg_0, arg_1, arg_2, arg_3, CryptoPP__IntegerDivideByPowerOf215_next);
        };
        static struct CryptoPP::Integer* CryptoPP__IntegerDividedBy16_wrapper(struct CryptoPP::Integer* _this, short retstr, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__IntegerDividedBy16_user(_this, retstr, arg_0, CryptoPP__IntegerDividedBy16_next);
        };
        static struct CryptoPP::Integer* CryptoPP__IntegerDividedBy17_wrapper(struct CryptoPP::Integer* _this, short retstr, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__IntegerDividedBy17_user(_this, retstr, arg_0, CryptoPP__IntegerDividedBy17_next);
        };
        static struct CryptoPP::Integer* CryptoPP__IntegerDoubled18_wrapper(struct CryptoPP::Integer* _this, short retstr)
        {
           return CryptoPP__IntegerDoubled18_user(_this, retstr, CryptoPP__IntegerDoubled18_next);
        };
        static void CryptoPP__IntegerEncode19_wrapper(struct CryptoPP::Integer* _this, struct CryptoPP::BufferedTransformation* arg_0, uint64_t arg_1, struct CryptoPP::Integer::Signedness arg_2)
        {
           CryptoPP__IntegerEncode19_user(_this, arg_0, arg_1, arg_2, CryptoPP__IntegerEncode19_next);
        };
        static void CryptoPP__IntegerEncode20_wrapper(struct CryptoPP::Integer* _this, uint8_t* arg_0, uint64_t arg_1, struct CryptoPP::Integer::Signedness arg_2)
        {
           CryptoPP__IntegerEncode20_user(_this, arg_0, arg_1, arg_2, CryptoPP__IntegerEncode20_next);
        };
        static struct CryptoPP::Integer* CryptoPP__IntegerGcd21_wrapper(short retstr, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1)
        {
           return CryptoPP__IntegerGcd21_user(retstr, arg_0, arg_1, CryptoPP__IntegerGcd21_next);
        };
        static bool CryptoPP__IntegerGenerateRandomNoThrow22_wrapper(struct CryptoPP::Integer* _this, struct CryptoPP::RandomNumberGenerator* arg_0, struct CryptoPP::NameValuePairs* arg_1)
        {
           return CryptoPP__IntegerGenerateRandomNoThrow22_user(_this, arg_0, arg_1, CryptoPP__IntegerGenerateRandomNoThrow22_next);
        };
        static bool CryptoPP__IntegerGetBit23_wrapper(struct CryptoPP::Integer* _this, uint64_t arg_0)
        {
           return CryptoPP__IntegerGetBit23_user(_this, arg_0, CryptoPP__IntegerGetBit23_next);
        };
        static uint64_t CryptoPP__IntegerGetBits24_wrapper(struct CryptoPP::Integer* _this, uint64_t arg_0, uint64_t arg_1)
        {
           return CryptoPP__IntegerGetBits24_user(_this, arg_0, arg_1, CryptoPP__IntegerGetBits24_next);
        };
        static uint8_t CryptoPP__IntegerGetByte25_wrapper(struct CryptoPP::Integer* _this, uint64_t arg_0)
        {
           return CryptoPP__IntegerGetByte25_user(_this, arg_0, CryptoPP__IntegerGetByte25_next);
        };
        static int64_t CryptoPP__Integerctor_Integer26_wrapper(struct CryptoPP::Integer* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           return CryptoPP__Integerctor_Integer26_user(_this, arg_0, CryptoPP__Integerctor_Integer26_next);
        };
        static int64_t CryptoPP__Integerctor_Integer27_wrapper(struct CryptoPP::Integer* _this, struct CryptoPP::BufferedTransformation* arg_0, uint64_t arg_1, struct CryptoPP::Integer::Signedness arg_2)
        {
           return CryptoPP__Integerctor_Integer27_user(_this, arg_0, arg_1, arg_2, CryptoPP__Integerctor_Integer27_next);
        };
        static int64_t CryptoPP__Integerctor_Integer28_wrapper(struct CryptoPP::Integer* _this, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__Integerctor_Integer28_user(_this, arg_0, CryptoPP__Integerctor_Integer28_next);
        };
        static int64_t CryptoPP__Integerctor_Integer29_wrapper(struct CryptoPP::Integer* _this, struct CryptoPP::Integer::Sign arg_0, uint64_t arg_1)
        {
           return CryptoPP__Integerctor_Integer29_user(_this, arg_0, arg_1, CryptoPP__Integerctor_Integer29_next);
        };
        static int64_t CryptoPP__Integerctor_Integer30_wrapper(struct CryptoPP::Integer* _this, struct CryptoPP::Integer::Sign arg_0, uint64_t arg_1, uint64_t arg_2)
        {
           return CryptoPP__Integerctor_Integer30_user(_this, arg_0, arg_1, arg_2, CryptoPP__Integerctor_Integer30_next);
        };
        static int64_t CryptoPP__Integerctor_Integer31_wrapper(struct CryptoPP::Integer::RandomNumberType _this, struct CryptoPP::RandomNumberGenerator* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2, struct CryptoPP::Integer::RandomNumberType arg_3, struct CryptoPP::Integer* arg_4, struct CryptoPP::Integer* arg_5)
        {
           return CryptoPP__Integerctor_Integer31_user(_this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, CryptoPP__Integerctor_Integer31_next);
        };
        static int64_t CryptoPP__Integerctor_Integer32_wrapper(struct CryptoPP::Integer* _this, struct CryptoPP::RandomNumberGenerator* arg_0, uint64_t arg_1)
        {
           return CryptoPP__Integerctor_Integer32_user(_this, arg_0, arg_1, CryptoPP__Integerctor_Integer32_next);
        };
        static int64_t CryptoPP__Integerctor_Integer33_wrapper(struct CryptoPP::Integer* _this, char* arg_0)
        {
           return CryptoPP__Integerctor_Integer33_user(_this, arg_0, CryptoPP__Integerctor_Integer33_next);
        };
        static int64_t CryptoPP__Integerctor_Integer34_wrapper(struct CryptoPP::Integer* _this, int32_t arg_0)
        {
           return CryptoPP__Integerctor_Integer34_user(_this, arg_0, CryptoPP__Integerctor_Integer34_next);
        };
        static int64_t CryptoPP__Integerctor_Integer35_wrapper(struct CryptoPP::Integer* _this, uint8_t* arg_0, uint64_t arg_1, struct CryptoPP::Integer::Signedness arg_2)
        {
           return CryptoPP__Integerctor_Integer35_user(_this, arg_0, arg_1, arg_2, CryptoPP__Integerctor_Integer35_next);
        };
        static int64_t CryptoPP__Integerctor_Integer36_wrapper(struct CryptoPP::Integer* _this, uint64_t arg_0, uint64_t arg_1)
        {
           return CryptoPP__Integerctor_Integer36_user(_this, arg_0, arg_1, CryptoPP__Integerctor_Integer36_next);
        };
        static void CryptoPP__Integerctor_Integer37_wrapper(void* arg_0)
        {
           CryptoPP__Integerctor_Integer37_user(arg_0, CryptoPP__Integerctor_Integer37_next);
        };
        static int64_t CryptoPP__Integerctor_Integer38_wrapper(struct CryptoPP::Integer* _this, wchar_t* arg_0)
        {
           return CryptoPP__Integerctor_Integer38_user(_this, arg_0, CryptoPP__Integerctor_Integer38_next);
        };
        static struct CryptoPP::Integer* CryptoPP__IntegerInverseMod39_wrapper(struct CryptoPP::Integer* _this, short retstr, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__IntegerInverseMod39_user(_this, retstr, arg_0, CryptoPP__IntegerInverseMod39_next);
        };
        static uint64_t CryptoPP__IntegerInverseMod40_wrapper(struct CryptoPP::Integer* _this, uint64_t arg_0)
        {
           return CryptoPP__IntegerInverseMod40_user(_this, arg_0, CryptoPP__IntegerInverseMod40_next);
        };
        static bool CryptoPP__IntegerIsConvertableToLong41_wrapper(struct CryptoPP::Integer* _this)
        {
           return CryptoPP__IntegerIsConvertableToLong41_user(_this, CryptoPP__IntegerIsConvertableToLong41_next);
        };
        static bool CryptoPP__IntegerIsEven42_wrapper(struct CryptoPP::Integer* _this)
        {
           return CryptoPP__IntegerIsEven42_user(_this, CryptoPP__IntegerIsEven42_next);
        };
        static bool CryptoPP__IntegerIsNegative44_wrapper(struct CryptoPP::Integer* _this)
        {
           return CryptoPP__IntegerIsNegative44_user(_this, CryptoPP__IntegerIsNegative44_next);
        };
        static bool CryptoPP__IntegerIsOdd45_wrapper(struct CryptoPP::Integer* _this)
        {
           return CryptoPP__IntegerIsOdd45_user(_this, CryptoPP__IntegerIsOdd45_next);
        };
        static bool CryptoPP__IntegerIsPositive47_wrapper(struct CryptoPP::Integer* _this)
        {
           return CryptoPP__IntegerIsPositive47_user(_this, CryptoPP__IntegerIsPositive47_next);
        };
        static bool CryptoPP__IntegerIsSquare48_wrapper(struct CryptoPP::Integer* _this)
        {
           return CryptoPP__IntegerIsSquare48_user(_this, CryptoPP__IntegerIsSquare48_next);
        };
        static bool CryptoPP__IntegerIsUnit49_wrapper(struct CryptoPP::Integer* _this)
        {
           return CryptoPP__IntegerIsUnit49_user(_this, CryptoPP__IntegerIsUnit49_next);
        };
        static bool CryptoPP__IntegerIsZero51_wrapper(struct CryptoPP::Integer* _this)
        {
           return CryptoPP__IntegerIsZero51_user(_this, CryptoPP__IntegerIsZero51_next);
        };
        static uint64_t CryptoPP__IntegerMinEncodedSize52_wrapper(struct CryptoPP::Integer* _this, struct CryptoPP::Integer::Signedness arg_0)
        {
           return CryptoPP__IntegerMinEncodedSize52_user(_this, arg_0, CryptoPP__IntegerMinEncodedSize52_next);
        };
        static struct CryptoPP::Integer* CryptoPP__IntegerMinus53_wrapper(struct CryptoPP::Integer* _this, short retstr, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__IntegerMinus53_user(_this, retstr, arg_0, CryptoPP__IntegerMinus53_next);
        };
        static struct CryptoPP::Integer* CryptoPP__IntegerModulo54_wrapper(struct CryptoPP::Integer* _this, short retstr, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__IntegerModulo54_user(_this, retstr, arg_0, CryptoPP__IntegerModulo54_next);
        };
        static uint64_t CryptoPP__IntegerModulo55_wrapper(struct CryptoPP::Integer* _this, uint64_t arg_0)
        {
           return CryptoPP__IntegerModulo55_user(_this, arg_0, CryptoPP__IntegerModulo55_next);
        };
        static struct CryptoPP::Integer* CryptoPP__IntegerMultiplicativeInverse56_wrapper(struct CryptoPP::Integer* _this, short retstr)
        {
           return CryptoPP__IntegerMultiplicativeInverse56_user(_this, retstr, CryptoPP__IntegerMultiplicativeInverse56_next);
        };
        static void CryptoPP__IntegerNegate57_wrapper(struct CryptoPP::Integer* _this)
        {
           CryptoPP__IntegerNegate57_user(_this, CryptoPP__IntegerNegate57_next);
        };
        static bool CryptoPP__IntegerNotNegative59_wrapper(struct CryptoPP::Integer* _this)
        {
           return CryptoPP__IntegerNotNegative59_user(_this, CryptoPP__IntegerNotNegative59_next);
        };
        static bool CryptoPP__IntegerNotZero61_wrapper(struct CryptoPP::Integer* _this)
        {
           return CryptoPP__IntegerNotZero61_user(_this, CryptoPP__IntegerNotZero61_next);
        };
        static struct CryptoPP::Integer* CryptoPP__IntegerOne62_wrapper()
        {
           return CryptoPP__IntegerOne62_user(CryptoPP__IntegerOne62_next);
        };
        static void CryptoPP__IntegerOpenPGPDecode63_wrapper(struct CryptoPP::Integer* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           CryptoPP__IntegerOpenPGPDecode63_user(_this, arg_0, CryptoPP__IntegerOpenPGPDecode63_next);
        };
        static void CryptoPP__IntegerOpenPGPDecode64_wrapper(struct CryptoPP::Integer* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__IntegerOpenPGPDecode64_user(_this, arg_0, arg_1, CryptoPP__IntegerOpenPGPDecode64_next);
        };
        static uint64_t CryptoPP__IntegerOpenPGPEncode65_wrapper(struct CryptoPP::Integer* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           return CryptoPP__IntegerOpenPGPEncode65_user(_this, arg_0, CryptoPP__IntegerOpenPGPEncode65_next);
        };
        static uint64_t CryptoPP__IntegerOpenPGPEncode66_wrapper(struct CryptoPP::Integer* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           return CryptoPP__IntegerOpenPGPEncode66_user(_this, arg_0, arg_1, CryptoPP__IntegerOpenPGPEncode66_next);
        };
        static struct CryptoPP::Integer* CryptoPP__IntegerPlus67_wrapper(struct CryptoPP::Integer* _this, short retstr, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__IntegerPlus67_user(_this, retstr, arg_0, CryptoPP__IntegerPlus67_next);
        };
        static int64_t CryptoPP__IntegerPositiveCompare68_wrapper(struct CryptoPP::Integer* _this, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__IntegerPositiveCompare68_user(_this, arg_0, CryptoPP__IntegerPositiveCompare68_next);
        };
        static struct CryptoPP::Integer* CryptoPP__IntegerPower269_wrapper(short retstr, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__IntegerPower269_user(retstr, arg_0, CryptoPP__IntegerPower269_next);
        };
        static void CryptoPP__IntegerRandomize70_wrapper(struct CryptoPP::Integer* _this, struct CryptoPP::RandomNumberGenerator* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2)
        {
           CryptoPP__IntegerRandomize70_user(_this, arg_0, arg_1, arg_2, CryptoPP__IntegerRandomize70_next);
        };
        static bool CryptoPP__IntegerRandomize71_wrapper(struct CryptoPP::Integer* _this, struct CryptoPP::RandomNumberGenerator* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2, struct CryptoPP::Integer::RandomNumberType arg_3, struct CryptoPP::Integer* arg_4, struct CryptoPP::Integer* arg_5)
        {
           return CryptoPP__IntegerRandomize71_user(_this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, CryptoPP__IntegerRandomize71_next);
        };
        static void CryptoPP__IntegerRandomize72_wrapper(struct CryptoPP::Integer* _this, struct CryptoPP::RandomNumberGenerator* arg_0, uint64_t arg_1)
        {
           CryptoPP__IntegerRandomize72_user(_this, arg_0, arg_1, CryptoPP__IntegerRandomize72_next);
        };
        static void CryptoPP__IntegerSetBit73_wrapper(struct CryptoPP::Integer* _this, uint64_t arg_0, bool arg_1)
        {
           CryptoPP__IntegerSetBit73_user(_this, arg_0, arg_1, CryptoPP__IntegerSetBit73_next);
        };
        static void CryptoPP__IntegerSetByte74_wrapper(struct CryptoPP::Integer* _this, uint64_t arg_0, uint8_t arg_1)
        {
           CryptoPP__IntegerSetByte74_user(_this, arg_0, arg_1, CryptoPP__IntegerSetByte74_next);
        };
        static struct CryptoPP::Integer* CryptoPP__IntegerSquareRoot75_wrapper(struct CryptoPP::Integer* _this, short retstr)
        {
           return CryptoPP__IntegerSquareRoot75_user(_this, retstr, CryptoPP__IntegerSquareRoot75_next);
        };
        static struct CryptoPP::Integer* CryptoPP__IntegerSquared77_wrapper(struct CryptoPP::Integer* _this, struct CryptoPP::Integer* result)
        {
           return CryptoPP__IntegerSquared77_user(_this, result, CryptoPP__IntegerSquared77_next);
        };
        static struct CryptoPP::Integer* CryptoPP__IntegerTimes78_wrapper(struct CryptoPP::Integer* _this, short retstr, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__IntegerTimes78_user(_this, retstr, arg_0, CryptoPP__IntegerTimes78_next);
        };
        static struct CryptoPP::Integer* CryptoPP__IntegerTwo79_wrapper()
        {
           return CryptoPP__IntegerTwo79_user(CryptoPP__IntegerTwo79_next);
        };
        static unsigned int CryptoPP__IntegerWordCount80_wrapper(struct CryptoPP::Integer* _this)
        {
           return CryptoPP__IntegerWordCount80_user(_this, CryptoPP__IntegerWordCount80_next);
        };
        static struct CryptoPP::Integer* CryptoPP__IntegerZero81_wrapper()
        {
           return CryptoPP__IntegerZero81_user(CryptoPP__IntegerZero81_next);
        };
        static void CryptoPP__Integerswap82_wrapper(struct CryptoPP::Integer* _this, struct CryptoPP::Integer* arg_0)
        {
           CryptoPP__Integerswap82_user(_this, arg_0, CryptoPP__Integerswap82_next);
        };
        static void CryptoPP__Integerdtor_Integer84_wrapper(struct CryptoPP::Integer* _this)
        {
           CryptoPP__Integerdtor_Integer84_user(_this, CryptoPP__Integerdtor_Integer84_next);
        };
        
        static int64_t CryptoPP__Integer__DivideByZeroctor_DivideByZero1_wrapper(struct CryptoPP::Integer::DivideByZero* _this, struct CryptoPP::Integer::DivideByZero* arg_0)
        {
           return CryptoPP__Integer__DivideByZeroctor_DivideByZero1_user(_this, arg_0, CryptoPP__Integer__DivideByZeroctor_DivideByZero1_next);
        };
        static int64_t CryptoPP__Integer__DivideByZeroctor_DivideByZero2_wrapper(struct CryptoPP::Integer::DivideByZero* _this)
        {
           return CryptoPP__Integer__DivideByZeroctor_DivideByZero2_user(_this, CryptoPP__Integer__DivideByZeroctor_DivideByZero2_next);
        };
        static int64_t CryptoPP__Integer__DivideByZerodtor_DivideByZero3_wrapper(struct CryptoPP::Integer::DivideByZero* _this)
        {
           return CryptoPP__Integer__DivideByZerodtor_DivideByZero3_user(_this, CryptoPP__Integer__DivideByZerodtor_DivideByZero3_next);
        };
        
        static int64_t CryptoPP__Integer__RandomNumberNotFoundctor_RandomNumberNotFound1_wrapper(struct CryptoPP::Integer::RandomNumberNotFound* _this, struct CryptoPP::Integer::RandomNumberNotFound* arg_0)
        {
           return CryptoPP__Integer__RandomNumberNotFoundctor_RandomNumberNotFound1_user(_this, arg_0, CryptoPP__Integer__RandomNumberNotFoundctor_RandomNumberNotFound1_next);
        };
        static int64_t CryptoPP__Integer__RandomNumberNotFoundctor_RandomNumberNotFound2_wrapper(struct CryptoPP::Integer::RandomNumberNotFound* _this)
        {
           return CryptoPP__Integer__RandomNumberNotFoundctor_RandomNumberNotFound2_user(_this, CryptoPP__Integer__RandomNumberNotFoundctor_RandomNumberNotFound2_next);
        };
        static int64_t CryptoPP__Integer__RandomNumberNotFounddtor_RandomNumberNotFound3_wrapper(struct CryptoPP::Integer::RandomNumberNotFound* _this)
        {
           return CryptoPP__Integer__RandomNumberNotFounddtor_RandomNumberNotFound3_user(_this, CryptoPP__Integer__RandomNumberNotFounddtor_RandomNumberNotFound3_next);
        };
        
        static int64_t CryptoPP__Integer__OpenPGPDecodeErrctor_OpenPGPDecodeErr1_wrapper(struct CryptoPP::Integer::OpenPGPDecodeErr* _this, struct CryptoPP::Integer::OpenPGPDecodeErr* arg_0)
        {
           return CryptoPP__Integer__OpenPGPDecodeErrctor_OpenPGPDecodeErr1_user(_this, arg_0, CryptoPP__Integer__OpenPGPDecodeErrctor_OpenPGPDecodeErr1_next);
        };
        static int64_t CryptoPP__Integer__OpenPGPDecodeErrctor_OpenPGPDecodeErr2_wrapper(struct CryptoPP::Integer::OpenPGPDecodeErr* _this)
        {
           return CryptoPP__Integer__OpenPGPDecodeErrctor_OpenPGPDecodeErr2_user(_this, CryptoPP__Integer__OpenPGPDecodeErrctor_OpenPGPDecodeErr2_next);
        };
        static int64_t CryptoPP__Integer__OpenPGPDecodeErrdtor_OpenPGPDecodeErr3_wrapper(struct CryptoPP::Integer::OpenPGPDecodeErr* _this)
        {
           return CryptoPP__Integer__OpenPGPDecodeErrdtor_OpenPGPDecodeErr3_user(_this, CryptoPP__Integer__OpenPGPDecodeErrdtor_OpenPGPDecodeErr3_next);
        };
        
        static void CryptoPP__ECPPointctor_ECPPoint2_wrapper(struct CryptoPP::ECPPoint* _this, struct CryptoPP::ECPPoint* __that)
        {
           CryptoPP__ECPPointctor_ECPPoint2_user(_this, __that, CryptoPP__ECPPointctor_ECPPoint2_next);
        };
        static void CryptoPP__ECPPointctor_ECPPoint4_wrapper(struct CryptoPP::ECPPoint* _this, struct CryptoPP::Integer* x, struct CryptoPP::Integer* y)
        {
           CryptoPP__ECPPointctor_ECPPoint4_user(_this, x, y, CryptoPP__ECPPointctor_ECPPoint4_next);
        };
        static void CryptoPP__ECPPointctor_ECPPoint6_wrapper(struct CryptoPP::ECPPoint* _this)
        {
           CryptoPP__ECPPointctor_ECPPoint6_user(_this, CryptoPP__ECPPointctor_ECPPoint6_next);
        };
        static void CryptoPP__ECPPointdtor_ECPPoint12_wrapper(struct CryptoPP::ECPPoint* _this)
        {
           CryptoPP__ECPPointdtor_ECPPoint12_user(_this, CryptoPP__ECPPointdtor_ECPPoint12_next);
        };
        
        static int64_t CryptoPP__AbstractGroupCascadeScalarMultiply1_wrapper(struct CryptoPP::ECPPoint* arg_0, struct CryptoPP::Integer* arg_1)
        {
           return CryptoPP__AbstractGroupCascadeScalarMultiply1_user(arg_0, arg_1, CryptoPP__AbstractGroupCascadeScalarMultiply1_next);
        };
        
        static void CryptoPP__AbstractGroupctor_AbstractGroup2_wrapper(struct CryptoPP::AbstractGroup<CryptoPP::Integer>* _this)
        {
           CryptoPP__AbstractGroupctor_AbstractGroup2_user(_this, CryptoPP__AbstractGroupctor_AbstractGroup2_next);
        };
        static int64_t CryptoPP__AbstractGroupCascadeScalarMultiply3_wrapper(int64_t arg_0, struct CryptoPP::Integer* arg_1)
        {
           return CryptoPP__AbstractGroupCascadeScalarMultiply3_user(arg_0, arg_1, CryptoPP__AbstractGroupCascadeScalarMultiply3_next);
        };
        static bool CryptoPP__AbstractGroupInversionIsFast5_wrapper(struct CryptoPP::AbstractGroup<CryptoPP::Integer>* _this)
        {
           return CryptoPP__AbstractGroupInversionIsFast5_user(_this, CryptoPP__AbstractGroupInversionIsFast5_next);
        };
        static void CryptoPP__AbstractGroupdtor_AbstractGroup7_wrapper(struct CryptoPP::AbstractGroup<CryptoPP::Integer>* _this)
        {
           CryptoPP__AbstractGroupdtor_AbstractGroup7_user(_this, CryptoPP__AbstractGroupdtor_AbstractGroup7_next);
        };
        
        static void CryptoPP__AbstractRingctor_AbstractRing2_wrapper(struct CryptoPP::AbstractRing<CryptoPP::Integer>* _this)
        {
           CryptoPP__AbstractRingctor_AbstractRing2_user(_this, CryptoPP__AbstractRingctor_AbstractRing2_next);
        };
        static struct CryptoPP::AbstractGroup<CryptoPP::Integer>* CryptoPP__AbstractRingMultiplicativeGroup4_wrapper(struct CryptoPP::AbstractRing<CryptoPP::Integer>* _this)
        {
           return CryptoPP__AbstractRingMultiplicativeGroup4_user(_this, CryptoPP__AbstractRingMultiplicativeGroup4_next);
        };
        static void CryptoPP__AbstractRingdtor_AbstractRing6_wrapper(struct CryptoPP::AbstractRing<CryptoPP::Integer>* _this)
        {
           CryptoPP__AbstractRingdtor_AbstractRing6_user(_this, CryptoPP__AbstractRingdtor_AbstractRing6_next);
        };
        
        static struct CryptoPP::Integer* CryptoPP__AbstractRing__MultiplicativeGroupTAccumulate2_wrapper(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT* _this, struct CryptoPP::Integer* a, struct CryptoPP::Integer* b)
        {
           return CryptoPP__AbstractRing__MultiplicativeGroupTAccumulate2_user(_this, a, b, CryptoPP__AbstractRing__MultiplicativeGroupTAccumulate2_next);
        };
        static struct CryptoPP::Integer* CryptoPP__AbstractRing__MultiplicativeGroupTAdd4_wrapper(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT* _this, struct CryptoPP::Integer* a, struct CryptoPP::Integer* b)
        {
           return CryptoPP__AbstractRing__MultiplicativeGroupTAdd4_user(_this, a, b, CryptoPP__AbstractRing__MultiplicativeGroupTAdd4_next);
        };
        static struct CryptoPP::Integer* CryptoPP__AbstractRing__MultiplicativeGroupTCascadeScalarMultiply6_wrapper(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT* _this, struct CryptoPP::Integer* result, struct CryptoPP::Integer* x, struct CryptoPP::Integer* e1, struct CryptoPP::Integer* y, struct CryptoPP::Integer* e2)
        {
           return CryptoPP__AbstractRing__MultiplicativeGroupTCascadeScalarMultiply6_user(_this, result, x, e1, y, e2, CryptoPP__AbstractRing__MultiplicativeGroupTCascadeScalarMultiply6_next);
        };
        static struct CryptoPP::Integer* CryptoPP__AbstractRing__MultiplicativeGroupTDouble8_wrapper(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT* _this, struct CryptoPP::Integer* a)
        {
           return CryptoPP__AbstractRing__MultiplicativeGroupTDouble8_user(_this, a, CryptoPP__AbstractRing__MultiplicativeGroupTDouble8_next);
        };
        static bool CryptoPP__AbstractRing__MultiplicativeGroupTEqual10_wrapper(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT* _this, struct CryptoPP::Integer* a, struct CryptoPP::Integer* b)
        {
           return CryptoPP__AbstractRing__MultiplicativeGroupTEqual10_user(_this, a, b, CryptoPP__AbstractRing__MultiplicativeGroupTEqual10_next);
        };
        static struct CryptoPP::AbstractRing<CryptoPP::Integer>* CryptoPP__AbstractRing__MultiplicativeGroupTGetRing12_wrapper(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT* _this)
        {
           return CryptoPP__AbstractRing__MultiplicativeGroupTGetRing12_user(_this, CryptoPP__AbstractRing__MultiplicativeGroupTGetRing12_next);
        };
        static struct CryptoPP::Integer* CryptoPP__AbstractRing__MultiplicativeGroupTIdentity14_wrapper(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT* _this)
        {
           return CryptoPP__AbstractRing__MultiplicativeGroupTIdentity14_user(_this, CryptoPP__AbstractRing__MultiplicativeGroupTIdentity14_next);
        };
        static struct CryptoPP::Integer* CryptoPP__AbstractRing__MultiplicativeGroupTInverse16_wrapper(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT* _this, struct CryptoPP::Integer* a)
        {
           return CryptoPP__AbstractRing__MultiplicativeGroupTInverse16_user(_this, a, CryptoPP__AbstractRing__MultiplicativeGroupTInverse16_next);
        };
        static void CryptoPP__AbstractRing__MultiplicativeGroupTctor_MultiplicativeGroupT18_wrapper(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT* _this)
        {
           CryptoPP__AbstractRing__MultiplicativeGroupTctor_MultiplicativeGroupT18_user(_this, CryptoPP__AbstractRing__MultiplicativeGroupTctor_MultiplicativeGroupT18_next);
        };
        static struct CryptoPP::Integer* CryptoPP__AbstractRing__MultiplicativeGroupTReduce20_wrapper(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT* _this, struct CryptoPP::Integer* a, struct CryptoPP::Integer* b)
        {
           return CryptoPP__AbstractRing__MultiplicativeGroupTReduce20_user(_this, a, b, CryptoPP__AbstractRing__MultiplicativeGroupTReduce20_next);
        };
        static struct CryptoPP::Integer* CryptoPP__AbstractRing__MultiplicativeGroupTScalarMultiply22_wrapper(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT* _this, struct CryptoPP::Integer* result, struct CryptoPP::Integer* a, struct CryptoPP::Integer* e)
        {
           return CryptoPP__AbstractRing__MultiplicativeGroupTScalarMultiply22_user(_this, result, a, e, CryptoPP__AbstractRing__MultiplicativeGroupTScalarMultiply22_next);
        };
        static void CryptoPP__AbstractRing__MultiplicativeGroupTSimultaneousMultiply24_wrapper(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT* _this, struct CryptoPP::Integer* results, struct CryptoPP::Integer* base, struct CryptoPP::Integer* exponents, unsigned int exponentsCount)
        {
           CryptoPP__AbstractRing__MultiplicativeGroupTSimultaneousMultiply24_user(_this, results, base, exponents, exponentsCount, CryptoPP__AbstractRing__MultiplicativeGroupTSimultaneousMultiply24_next);
        };
        static struct CryptoPP::Integer* CryptoPP__AbstractRing__MultiplicativeGroupTSubtract26_wrapper(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT* _this, struct CryptoPP::Integer* a, struct CryptoPP::Integer* b)
        {
           return CryptoPP__AbstractRing__MultiplicativeGroupTSubtract26_user(_this, a, b, CryptoPP__AbstractRing__MultiplicativeGroupTSubtract26_next);
        };
        static void CryptoPP__AbstractRing__MultiplicativeGroupTdtor_MultiplicativeGroupT31_wrapper(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT* _this)
        {
           CryptoPP__AbstractRing__MultiplicativeGroupTdtor_MultiplicativeGroupT31_user(_this, CryptoPP__AbstractRing__MultiplicativeGroupTdtor_MultiplicativeGroupT31_next);
        };
        
        static struct CryptoPP::Integer* CryptoPP__ModularArithmeticAccumulate1_wrapper(struct CryptoPP::ModularArithmetic* _this, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1)
        {
           return CryptoPP__ModularArithmeticAccumulate1_user(_this, arg_0, arg_1, CryptoPP__ModularArithmeticAccumulate1_next);
        };
        static struct CryptoPP::Integer* CryptoPP__ModularArithmeticAdd2_wrapper(struct CryptoPP::ModularArithmetic* _this, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1)
        {
           return CryptoPP__ModularArithmeticAdd2_user(_this, arg_0, arg_1, CryptoPP__ModularArithmeticAdd2_next);
        };
        static void CryptoPP__ModularArithmeticBERDecodeElement3_wrapper(struct CryptoPP::ModularArithmetic* _this, struct CryptoPP::BufferedTransformation* arg_0, struct CryptoPP::Integer* arg_1)
        {
           CryptoPP__ModularArithmeticBERDecodeElement3_user(_this, arg_0, arg_1, CryptoPP__ModularArithmeticBERDecodeElement3_next);
        };
        static struct CryptoPP::Integer* CryptoPP__ModularArithmeticCascadeExponentiate4_wrapper(struct CryptoPP::ModularArithmetic* _this, struct CryptoPP::Integer* retstr, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2, struct CryptoPP::Integer* arg_3)
        {
           return CryptoPP__ModularArithmeticCascadeExponentiate4_user(_this, retstr, arg_0, arg_1, arg_2, arg_3, CryptoPP__ModularArithmeticCascadeExponentiate4_next);
        };
        static struct CryptoPP::ModularArithmetic* CryptoPP__ModularArithmeticClone6_wrapper(struct CryptoPP::ModularArithmetic* _this)
        {
           return CryptoPP__ModularArithmeticClone6_user(_this, CryptoPP__ModularArithmeticClone6_next);
        };
        static struct CryptoPP::Integer* CryptoPP__ModularArithmeticConvertIn8_wrapper(struct CryptoPP::ModularArithmetic* _this, struct CryptoPP::Integer* result, struct CryptoPP::Integer* a)
        {
           return CryptoPP__ModularArithmeticConvertIn8_user(_this, result, a, CryptoPP__ModularArithmeticConvertIn8_next);
        };
        static struct CryptoPP::Integer* CryptoPP__ModularArithmeticConvertOut10_wrapper(struct CryptoPP::ModularArithmetic* _this, struct CryptoPP::Integer* result, struct CryptoPP::Integer* a)
        {
           return CryptoPP__ModularArithmeticConvertOut10_user(_this, result, a, CryptoPP__ModularArithmeticConvertOut10_next);
        };
        static void CryptoPP__ModularArithmeticDEREncode11_wrapper(struct CryptoPP::ModularArithmetic* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           CryptoPP__ModularArithmeticDEREncode11_user(_this, arg_0, CryptoPP__ModularArithmeticDEREncode11_next);
        };
        static void CryptoPP__ModularArithmeticDEREncodeElement12_wrapper(struct CryptoPP::ModularArithmetic* _this, struct CryptoPP::BufferedTransformation* arg_0, struct CryptoPP::Integer* arg_1)
        {
           CryptoPP__ModularArithmeticDEREncodeElement12_user(_this, arg_0, arg_1, CryptoPP__ModularArithmeticDEREncodeElement12_next);
        };
        static struct CryptoPP::Integer* CryptoPP__ModularArithmeticDivide14_wrapper(struct CryptoPP::ModularArithmetic* _this, struct CryptoPP::Integer* a, struct CryptoPP::Integer* b)
        {
           return CryptoPP__ModularArithmeticDivide14_user(_this, a, b, CryptoPP__ModularArithmeticDivide14_next);
        };
        static struct CryptoPP::Integer* CryptoPP__ModularArithmeticDouble16_wrapper(struct CryptoPP::ModularArithmetic* _this, struct CryptoPP::Integer* a)
        {
           return CryptoPP__ModularArithmeticDouble16_user(_this, a, CryptoPP__ModularArithmeticDouble16_next);
        };
        static bool CryptoPP__ModularArithmeticEqual18_wrapper(struct CryptoPP::ModularArithmetic* _this, struct CryptoPP::Integer* a, struct CryptoPP::Integer* b)
        {
           return CryptoPP__ModularArithmeticEqual18_user(_this, a, b, CryptoPP__ModularArithmeticEqual18_next);
        };
        static struct CryptoPP::Integer* CryptoPP__ModularArithmeticGetModulus19_wrapper(struct CryptoPP::ModularArithmetic* _this)
        {
           return CryptoPP__ModularArithmeticGetModulus19_user(_this, CryptoPP__ModularArithmeticGetModulus19_next);
        };
        static struct CryptoPP::Integer* CryptoPP__ModularArithmeticHalf20_wrapper(struct CryptoPP::ModularArithmetic* _this, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__ModularArithmeticHalf20_user(_this, arg_0, CryptoPP__ModularArithmeticHalf20_next);
        };
        static struct CryptoPP::Integer* CryptoPP__ModularArithmeticIdentity22_wrapper(struct CryptoPP::ModularArithmetic* _this)
        {
           return CryptoPP__ModularArithmeticIdentity22_user(_this, CryptoPP__ModularArithmeticIdentity22_next);
        };
        static struct CryptoPP::Integer* CryptoPP__ModularArithmeticInverse23_wrapper(struct CryptoPP::ModularArithmetic* _this, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__ModularArithmeticInverse23_user(_this, arg_0, CryptoPP__ModularArithmeticInverse23_next);
        };
        static bool CryptoPP__ModularArithmeticIsMontgomeryRepresentation25_wrapper(struct CryptoPP::ModularArithmetic* _this)
        {
           return CryptoPP__ModularArithmeticIsMontgomeryRepresentation25_user(_this, CryptoPP__ModularArithmeticIsMontgomeryRepresentation25_next);
        };
        static bool CryptoPP__ModularArithmeticIsUnit27_wrapper(struct CryptoPP::ModularArithmetic* _this, struct CryptoPP::Integer* a)
        {
           return CryptoPP__ModularArithmeticIsUnit27_user(_this, a, CryptoPP__ModularArithmeticIsUnit27_next);
        };
        static unsigned int CryptoPP__ModularArithmeticMaxElementByteLength29_wrapper(struct CryptoPP::ModularArithmetic* _this)
        {
           return CryptoPP__ModularArithmeticMaxElementByteLength29_user(_this, CryptoPP__ModularArithmeticMaxElementByteLength29_next);
        };
        static int64_t CryptoPP__ModularArithmeticctor_ModularArithmetic30_wrapper(struct CryptoPP::ModularArithmetic* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           return CryptoPP__ModularArithmeticctor_ModularArithmetic30_user(_this, arg_0, CryptoPP__ModularArithmeticctor_ModularArithmetic30_next);
        };
        static void CryptoPP__ModularArithmeticctor_ModularArithmetic32_wrapper(struct CryptoPP::ModularArithmetic* _this, struct CryptoPP::Integer* modulus)
        {
           CryptoPP__ModularArithmeticctor_ModularArithmetic32_user(_this, modulus, CryptoPP__ModularArithmeticctor_ModularArithmetic32_next);
        };
        static void CryptoPP__ModularArithmeticctor_ModularArithmetic34_wrapper(struct CryptoPP::ModularArithmetic* _this, struct CryptoPP::ModularArithmetic* ma)
        {
           CryptoPP__ModularArithmeticctor_ModularArithmetic34_user(_this, ma, CryptoPP__ModularArithmeticctor_ModularArithmetic34_next);
        };
        static struct CryptoPP::Integer* CryptoPP__ModularArithmeticMultiplicativeIdentity36_wrapper(struct CryptoPP::ModularArithmetic* _this)
        {
           return CryptoPP__ModularArithmeticMultiplicativeIdentity36_user(_this, CryptoPP__ModularArithmeticMultiplicativeIdentity36_next);
        };
        static struct CryptoPP::Integer* CryptoPP__ModularArithmeticMultiplicativeInverse38_wrapper(struct CryptoPP::ModularArithmetic* _this, struct CryptoPP::Integer* a)
        {
           return CryptoPP__ModularArithmeticMultiplicativeInverse38_user(_this, a, CryptoPP__ModularArithmeticMultiplicativeInverse38_next);
        };
        static struct CryptoPP::Integer* CryptoPP__ModularArithmeticMultiply40_wrapper(struct CryptoPP::ModularArithmetic* _this, struct CryptoPP::Integer* a, struct CryptoPP::Integer* b)
        {
           return CryptoPP__ModularArithmeticMultiply40_user(_this, a, b, CryptoPP__ModularArithmeticMultiply40_next);
        };
        static struct CryptoPP::Integer* CryptoPP__ModularArithmeticReduce41_wrapper(struct CryptoPP::ModularArithmetic* _this, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1)
        {
           return CryptoPP__ModularArithmeticReduce41_user(_this, arg_0, arg_1, CryptoPP__ModularArithmeticReduce41_next);
        };
        static void CryptoPP__ModularArithmeticSimultaneousExponentiate42_wrapper(struct CryptoPP::ModularArithmetic* _this, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2, unsigned int arg_3)
        {
           CryptoPP__ModularArithmeticSimultaneousExponentiate42_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__ModularArithmeticSimultaneousExponentiate42_next);
        };
        static struct CryptoPP::Integer* CryptoPP__ModularArithmeticSquare44_wrapper(struct CryptoPP::ModularArithmetic* _this, struct CryptoPP::Integer* a)
        {
           return CryptoPP__ModularArithmeticSquare44_user(_this, a, CryptoPP__ModularArithmeticSquare44_next);
        };
        static struct CryptoPP::Integer* CryptoPP__ModularArithmeticSubtract45_wrapper(struct CryptoPP::ModularArithmetic* _this, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1)
        {
           return CryptoPP__ModularArithmeticSubtract45_user(_this, arg_0, arg_1, CryptoPP__ModularArithmeticSubtract45_next);
        };
        static void CryptoPP__ModularArithmeticdtor_ModularArithmetic50_wrapper(struct CryptoPP::ModularArithmetic* _this)
        {
           CryptoPP__ModularArithmeticdtor_ModularArithmetic50_user(_this, CryptoPP__ModularArithmeticdtor_ModularArithmetic50_next);
        };
        
        static struct CryptoPP::ECPPoint* CryptoPP__ECPAdd1_wrapper(struct CryptoPP::ECP* _this, struct CryptoPP::ECPPoint* arg_0, struct CryptoPP::ECPPoint* arg_1)
        {
           return CryptoPP__ECPAdd1_user(_this, arg_0, arg_1, CryptoPP__ECPAdd1_next);
        };
        static struct CryptoPP::ECPPoint* CryptoPP__ECPBERDecodePoint2_wrapper(struct CryptoPP::ECP* _this, short retstr, struct CryptoPP::ECPPoint* arg_0)
        {
           return CryptoPP__ECPBERDecodePoint2_user(_this, retstr, arg_0, CryptoPP__ECPBERDecodePoint2_next);
        };
        static struct CryptoPP::ECPPoint* CryptoPP__ECPCascadeMultiply3_wrapper(struct CryptoPP::ECP* _this, struct CryptoPP::ECPPoint* retstr, struct CryptoPP::Integer* arg_0, struct CryptoPP::ECPPoint* arg_1, struct CryptoPP::Integer* arg_2, struct CryptoPP::ECPPoint* arg_3)
        {
           return CryptoPP__ECPCascadeMultiply3_user(_this, retstr, arg_0, arg_1, arg_2, arg_3, CryptoPP__ECPCascadeMultiply3_next);
        };
        static struct CryptoPP::ECPPoint* CryptoPP__ECPCascadeScalarMultiply4_wrapper(struct CryptoPP::ECP* _this, struct CryptoPP::ECPPoint* retstr, struct CryptoPP::ECPPoint* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::ECPPoint* arg_2, struct CryptoPP::Integer* arg_3)
        {
           return CryptoPP__ECPCascadeScalarMultiply4_user(_this, retstr, arg_0, arg_1, arg_2, arg_3, CryptoPP__ECPCascadeScalarMultiply4_next);
        };
        static void CryptoPP__ECPDEREncode5_wrapper(struct CryptoPP::ECP* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           CryptoPP__ECPDEREncode5_user(_this, arg_0, CryptoPP__ECPDEREncode5_next);
        };
        static void CryptoPP__ECPDEREncodePoint6_wrapper(struct CryptoPP::ECP* _this, struct CryptoPP::BufferedTransformation* arg_0, struct CryptoPP::ECPPoint* arg_1, bool arg_2)
        {
           CryptoPP__ECPDEREncodePoint6_user(_this, arg_0, arg_1, arg_2, CryptoPP__ECPDEREncodePoint6_next);
        };
        static bool CryptoPP__ECPDecodePoint7_wrapper(struct CryptoPP::ECP* _this, struct CryptoPP::ECPPoint* arg_0, struct CryptoPP::BufferedTransformation* arg_1, uint64_t arg_2)
        {
           return CryptoPP__ECPDecodePoint7_user(_this, arg_0, arg_1, arg_2, CryptoPP__ECPDecodePoint7_next);
        };
        static bool CryptoPP__ECPDecodePoint8_wrapper(struct CryptoPP::ECP* _this, struct CryptoPP::ECPPoint* arg_0, uint8_t* arg_1, uint64_t arg_2)
        {
           return CryptoPP__ECPDecodePoint8_user(_this, arg_0, arg_1, arg_2, CryptoPP__ECPDecodePoint8_next);
        };
        static struct CryptoPP::ECPPoint* CryptoPP__ECPDouble9_wrapper(struct CryptoPP::ECP* _this, struct CryptoPP::ECPPoint* arg_0)
        {
           return CryptoPP__ECPDouble9_user(_this, arg_0, CryptoPP__ECPDouble9_next);
        };
        static int64_t CryptoPP__ECPctor_ECP10_wrapper(struct CryptoPP::ECP* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           return CryptoPP__ECPctor_ECP10_user(_this, arg_0, CryptoPP__ECPctor_ECP10_next);
        };
        static int64_t CryptoPP__ECPctor_ECP11_wrapper(struct CryptoPP::ECP* _this, struct CryptoPP::ECP* arg_0, bool arg_1)
        {
           return CryptoPP__ECPctor_ECP11_user(_this, arg_0, arg_1, CryptoPP__ECPctor_ECP11_next);
        };
        static int64_t CryptoPP__ECPctor_ECP12_wrapper(struct CryptoPP::ECP* _this, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2)
        {
           return CryptoPP__ECPctor_ECP12_user(_this, arg_0, arg_1, arg_2, CryptoPP__ECPctor_ECP12_next);
        };
        static int64_t CryptoPP__ECPctor_ECP13_wrapper(struct CryptoPP::ECP* _this)
        {
           return CryptoPP__ECPctor_ECP13_user(_this, CryptoPP__ECPctor_ECP13_next);
        };
        static void CryptoPP__ECPEncodePoint14_wrapper(struct CryptoPP::ECP* _this, struct CryptoPP::BufferedTransformation* arg_0, struct CryptoPP::ECPPoint* arg_1, bool arg_2)
        {
           CryptoPP__ECPEncodePoint14_user(_this, arg_0, arg_1, arg_2, CryptoPP__ECPEncodePoint14_next);
        };
        static void CryptoPP__ECPEncodePoint15_wrapper(struct CryptoPP::ECP* _this, uint8_t* arg_0, struct CryptoPP::ECPPoint* arg_1, bool arg_2)
        {
           CryptoPP__ECPEncodePoint15_user(_this, arg_0, arg_1, arg_2, CryptoPP__ECPEncodePoint15_next);
        };
        static unsigned int CryptoPP__ECPEncodedPointSize17_wrapper(struct CryptoPP::ECP* _this, bool compressed)
        {
           return CryptoPP__ECPEncodedPointSize17_user(_this, compressed, CryptoPP__ECPEncodedPointSize17_next);
        };
        static bool CryptoPP__ECPEqual18_wrapper(struct CryptoPP::ECP* _this, struct CryptoPP::ECPPoint* arg_0, struct CryptoPP::ECPPoint* arg_1)
        {
           return CryptoPP__ECPEqual18_user(_this, arg_0, arg_1, CryptoPP__ECPEqual18_next);
        };
        static struct CryptoPP::Integer* CryptoPP__ECPFieldSize19_wrapper(struct CryptoPP::ECP* _this, short retstr)
        {
           return CryptoPP__ECPFieldSize19_user(_this, retstr, CryptoPP__ECPFieldSize19_next);
        };
        static struct CryptoPP::ModularArithmetic* CryptoPP__ECPGetField21_wrapper(struct CryptoPP::ECP* _this)
        {
           return CryptoPP__ECPGetField21_user(_this, CryptoPP__ECPGetField21_next);
        };
        static struct CryptoPP::ECPPoint* CryptoPP__ECPIdentity22_wrapper(struct CryptoPP::ECP* _this)
        {
           return CryptoPP__ECPIdentity22_user(_this, CryptoPP__ECPIdentity22_next);
        };
        static struct CryptoPP::ECPPoint* CryptoPP__ECPInverse23_wrapper(struct CryptoPP::ECP* _this, struct CryptoPP::ECPPoint* arg_0)
        {
           return CryptoPP__ECPInverse23_user(_this, arg_0, CryptoPP__ECPInverse23_next);
        };
        static bool CryptoPP__ECPInversionIsFast24_wrapper(struct CryptoPP::ECP* _this)
        {
           return CryptoPP__ECPInversionIsFast24_user(_this, CryptoPP__ECPInversionIsFast24_next);
        };
        static struct CryptoPP::ECPPoint* CryptoPP__ECPScalarMultiply25_wrapper(struct CryptoPP::ECP* _this, short retstr, struct CryptoPP::ECPPoint* arg_0, struct CryptoPP::ECPPoint* arg_1)
        {
           return CryptoPP__ECPScalarMultiply25_user(_this, retstr, arg_0, arg_1, CryptoPP__ECPScalarMultiply25_next);
        };
        static void CryptoPP__ECPSimultaneousMultiply26_wrapper(struct CryptoPP::ECP* _this, struct CryptoPP::ECPPoint* arg_0, struct CryptoPP::ECPPoint* arg_1, struct CryptoPP::Integer* arg_2, unsigned int arg_3)
        {
           CryptoPP__ECPSimultaneousMultiply26_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__ECPSimultaneousMultiply26_next);
        };
        static bool CryptoPP__ECPValidateParameters27_wrapper(struct CryptoPP::ECP* _this, struct CryptoPP::RandomNumberGenerator* arg_0, unsigned int arg_1)
        {
           return CryptoPP__ECPValidateParameters27_user(_this, arg_0, arg_1, CryptoPP__ECPValidateParameters27_next);
        };
        static bool CryptoPP__ECPVerifyPoint28_wrapper(struct CryptoPP::ECP* _this, struct CryptoPP::ECPPoint* arg_0)
        {
           return CryptoPP__ECPVerifyPoint28_user(_this, arg_0, CryptoPP__ECPVerifyPoint28_next);
        };
        static int64_t CryptoPP__ECPdtor_ECP29_wrapper(struct CryptoPP::ECP* _this)
        {
           return CryptoPP__ECPdtor_ECP29_user(_this, CryptoPP__ECPdtor_ECP29_next);
        };
        
        static void CryptoPP__member_ptrctor_member_ptr2_wrapper(struct CryptoPP::member_ptr<CryptoPP::ECP>* _this, struct CryptoPP::ECP* p)
        {
           CryptoPP__member_ptrctor_member_ptr2_user(_this, p, CryptoPP__member_ptrctor_member_ptr2_next);
        };
        static void CryptoPP__member_ptrdtor_member_ptr8_wrapper(struct CryptoPP::member_ptr<CryptoPP::ECP>* _this)
        {
           CryptoPP__member_ptrdtor_member_ptr8_user(_this, CryptoPP__member_ptrdtor_member_ptr8_next);
        };
        
        static void CryptoPP__value_ptrctor_value_ptr4_wrapper(struct CryptoPP::value_ptr<CryptoPP::ECP>* _this, struct CryptoPP::ECP* p)
        {
           CryptoPP__value_ptrctor_value_ptr4_user(_this, p, CryptoPP__value_ptrctor_value_ptr4_next);
        };
        static void CryptoPP__value_ptrdtor_value_ptr6_wrapper(struct CryptoPP::value_ptr<CryptoPP::ECP>* _this)
        {
           CryptoPP__value_ptrdtor_value_ptr6_user(_this, CryptoPP__value_ptrdtor_value_ptr6_next);
        };
        
        static struct CryptoPP::ECPPoint* CryptoPP__EcPrecomputationBERDecodeElement2_wrapper(struct CryptoPP::EcPrecomputation<CryptoPP::ECP>* _this, struct CryptoPP::ECPPoint* result, struct CryptoPP::BufferedTransformation* bt)
        {
           return CryptoPP__EcPrecomputationBERDecodeElement2_user(_this, result, bt, CryptoPP__EcPrecomputationBERDecodeElement2_next);
        };
        static struct CryptoPP::ECPPoint* CryptoPP__EcPrecomputationConvertIn4_wrapper(struct CryptoPP::EcPrecomputation<CryptoPP::ECP>* _this, struct CryptoPP::ECPPoint* result, struct CryptoPP::ECPPoint* P)
        {
           return CryptoPP__EcPrecomputationConvertIn4_user(_this, result, P, CryptoPP__EcPrecomputationConvertIn4_next);
        };
        static struct CryptoPP::ECPPoint* CryptoPP__EcPrecomputationConvertOut6_wrapper(struct CryptoPP::EcPrecomputation<CryptoPP::ECP>* _this, struct CryptoPP::ECPPoint* result, struct CryptoPP::ECPPoint* P)
        {
           return CryptoPP__EcPrecomputationConvertOut6_user(_this, result, P, CryptoPP__EcPrecomputationConvertOut6_next);
        };
        static void CryptoPP__EcPrecomputationDEREncodeElement8_wrapper(struct CryptoPP::EcPrecomputation<CryptoPP::ECP>* _this, struct CryptoPP::BufferedTransformation* bt, struct CryptoPP::ECPPoint* v)
        {
           CryptoPP__EcPrecomputationDEREncodeElement8_user(_this, bt, v, CryptoPP__EcPrecomputationDEREncodeElement8_next);
        };
        static void CryptoPP__EcPrecomputationctor_EcPrecomputation10_wrapper(struct CryptoPP::EcPrecomputation<CryptoPP::ECP>* _this)
        {
           CryptoPP__EcPrecomputationctor_EcPrecomputation10_user(_this, CryptoPP__EcPrecomputationctor_EcPrecomputation10_next);
        };
        static struct CryptoPP::ECP* CryptoPP__EcPrecomputationGetCurve12_wrapper(struct CryptoPP::EcPrecomputation<CryptoPP::ECP>* _this)
        {
           return CryptoPP__EcPrecomputationGetCurve12_user(_this, CryptoPP__EcPrecomputationGetCurve12_next);
        };
        static struct CryptoPP::AbstractGroup<CryptoPP::ECPPoint>* CryptoPP__EcPrecomputationGetGroup14_wrapper(struct CryptoPP::EcPrecomputation<CryptoPP::ECP>* _this)
        {
           return CryptoPP__EcPrecomputationGetGroup14_user(_this, CryptoPP__EcPrecomputationGetGroup14_next);
        };
        static bool CryptoPP__EcPrecomputationNeedConversions16_wrapper(struct CryptoPP::EcPrecomputation<CryptoPP::ECP>* _this)
        {
           return CryptoPP__EcPrecomputationNeedConversions16_user(_this, CryptoPP__EcPrecomputationNeedConversions16_next);
        };
        static void CryptoPP__EcPrecomputationdtor_EcPrecomputation20_wrapper(struct CryptoPP::EcPrecomputation<CryptoPP::ECP>* _this)
        {
           CryptoPP__EcPrecomputationdtor_EcPrecomputation20_user(_this, CryptoPP__EcPrecomputationdtor_EcPrecomputation20_next);
        };
        
        static void CryptoPP__DL_FixedBasePrecomputationctor_DL_FixedBasePrecomputation2_wrapper(struct CryptoPP::DL_FixedBasePrecomputation<CryptoPP::ECPPoint>* _this)
        {
           CryptoPP__DL_FixedBasePrecomputationctor_DL_FixedBasePrecomputation2_user(_this, CryptoPP__DL_FixedBasePrecomputationctor_DL_FixedBasePrecomputation2_next);
        };
        
        static void CryptoPP__DL_FixedBasePrecomputationImplctor_DL_FixedBasePrecomputationImpl2_wrapper(struct CryptoPP::DL_FixedBasePrecomputationImpl<CryptoPP::ECPPoint>* _this)
        {
           CryptoPP__DL_FixedBasePrecomputationImplctor_DL_FixedBasePrecomputationImpl2_user(_this, CryptoPP__DL_FixedBasePrecomputationImplctor_DL_FixedBasePrecomputationImpl2_next);
        };
        static struct CryptoPP::ECPPoint* CryptoPP__DL_FixedBasePrecomputationImplGetBase4_wrapper(struct CryptoPP::DL_FixedBasePrecomputationImpl<CryptoPP::ECPPoint>* _this, struct CryptoPP::DL_GroupPrecomputation<CryptoPP::ECPPoint>* group)
        {
           return CryptoPP__DL_FixedBasePrecomputationImplGetBase4_user(_this, group, CryptoPP__DL_FixedBasePrecomputationImplGetBase4_next);
        };
        static bool CryptoPP__DL_FixedBasePrecomputationImplIsInitialized6_wrapper(struct CryptoPP::DL_FixedBasePrecomputationImpl<CryptoPP::ECPPoint>* _this)
        {
           return CryptoPP__DL_FixedBasePrecomputationImplIsInitialized6_user(_this, CryptoPP__DL_FixedBasePrecomputationImplIsInitialized6_next);
        };
        static void CryptoPP__DL_FixedBasePrecomputationImpldtor_DL_FixedBasePrecomputationImpl10_wrapper(struct CryptoPP::DL_FixedBasePrecomputationImpl<CryptoPP::ECPPoint>* _this)
        {
           CryptoPP__DL_FixedBasePrecomputationImpldtor_DL_FixedBasePrecomputationImpl10_user(_this, CryptoPP__DL_FixedBasePrecomputationImpldtor_DL_FixedBasePrecomputationImpl10_next);
        };
        
        static void CryptoPP__OIDBERDecode1_wrapper(struct CryptoPP::OID* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           CryptoPP__OIDBERDecode1_user(_this, arg_0, CryptoPP__OIDBERDecode1_next);
        };
        static void CryptoPP__OIDBERDecodeAndCheck2_wrapper(struct CryptoPP::OID* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           CryptoPP__OIDBERDecodeAndCheck2_user(_this, arg_0, CryptoPP__OIDBERDecodeAndCheck2_next);
        };
        static void CryptoPP__OIDDEREncode3_wrapper(struct CryptoPP::OID* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           CryptoPP__OIDDEREncode3_user(_this, arg_0, CryptoPP__OIDDEREncode3_next);
        };
        static uint64_t CryptoPP__OIDDecodeValue4_wrapper(struct CryptoPP::BufferedTransformation* arg_0, unsigned int* arg_1)
        {
           return CryptoPP__OIDDecodeValue4_user(arg_0, arg_1, CryptoPP__OIDDecodeValue4_next);
        };
        static void CryptoPP__OIDEncodeValue5_wrapper(struct CryptoPP::BufferedTransformation* arg_0, unsigned int arg_1)
        {
           CryptoPP__OIDEncodeValue5_user(arg_0, arg_1, CryptoPP__OIDEncodeValue5_next);
        };
        static int64_t CryptoPP__OIDctor_OID6_wrapper(struct CryptoPP::OID* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           return CryptoPP__OIDctor_OID6_user(_this, arg_0, CryptoPP__OIDctor_OID6_next);
        };
        static int64_t CryptoPP__OIDctor_OID7_wrapper(struct CryptoPP::OID* _this, struct CryptoPP::OID* arg_0)
        {
           return CryptoPP__OIDctor_OID7_user(_this, arg_0, CryptoPP__OIDctor_OID7_next);
        };
        static int64_t CryptoPP__OIDctor_OID8_wrapper(struct CryptoPP::OID* _this, unsigned int arg_0)
        {
           return CryptoPP__OIDctor_OID8_user(_this, arg_0, CryptoPP__OIDctor_OID8_next);
        };
        static void CryptoPP__OIDctor_OID10_wrapper(struct CryptoPP::OID* _this)
        {
           CryptoPP__OIDctor_OID10_user(_this, CryptoPP__OIDctor_OID10_next);
        };
        static void CryptoPP__OIDdtor_OID14_wrapper(struct CryptoPP::OID* _this)
        {
           CryptoPP__OIDdtor_OID14_user(_this, CryptoPP__OIDdtor_OID14_next);
        };
        
        static struct CryptoPP::DL_FixedBasePrecomputation<CryptoPP::ECPPoint>* CryptoPP__DL_GroupParameters_ECAccessBasePrecomputation2_wrapper(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>* _this)
        {
           return CryptoPP__DL_GroupParameters_ECAccessBasePrecomputation2_user(_this, CryptoPP__DL_GroupParameters_ECAccessBasePrecomputation2_next);
        };
        static int64_t CryptoPP__DL_GroupParameters_ECCascadeExponentiate3_wrapper(struct CryptoPP::ECPPoint* arg_0, struct CryptoPP::Integer* arg_1)
        {
           return CryptoPP__DL_GroupParameters_ECCascadeExponentiate3_user(arg_0, arg_1, CryptoPP__DL_GroupParameters_ECCascadeExponentiate3_next);
        };
        static void CryptoPP__DL_GroupParameters_ECctor_DL_GroupParameters_EC5_wrapper(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>* _this)
        {
           CryptoPP__DL_GroupParameters_ECctor_DL_GroupParameters_EC5_user(_this, CryptoPP__DL_GroupParameters_ECctor_DL_GroupParameters_EC5_next);
        };
        static struct CryptoPP::ECPPoint* CryptoPP__DL_GroupParameters_ECDecodeElement7_wrapper(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>* _this, struct CryptoPP::ECPPoint* result, char* encoded, bool checkForGroupMembership)
        {
           return CryptoPP__DL_GroupParameters_ECDecodeElement7_user(_this, result, encoded, checkForGroupMembership, CryptoPP__DL_GroupParameters_ECDecodeElement7_next);
        };
        static void CryptoPP__DL_GroupParameters_ECEncodeElement9_wrapper(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>* _this, bool reversible, struct CryptoPP::ECPPoint* element, char* encoded)
        {
           CryptoPP__DL_GroupParameters_ECEncodeElement9_user(_this, reversible, element, encoded, CryptoPP__DL_GroupParameters_ECEncodeElement9_next);
        };
        static bool CryptoPP__DL_GroupParameters_ECFastSubgroupCheckAvailable11_wrapper(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>* _this)
        {
           return CryptoPP__DL_GroupParameters_ECFastSubgroupCheckAvailable11_user(_this, CryptoPP__DL_GroupParameters_ECFastSubgroupCheckAvailable11_next);
        };
        static struct CryptoPP::DL_FixedBasePrecomputation<CryptoPP::ECPPoint>* CryptoPP__DL_GroupParameters_ECGetBasePrecomputation13_wrapper(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>* _this)
        {
           return CryptoPP__DL_GroupParameters_ECGetBasePrecomputation13_user(_this, CryptoPP__DL_GroupParameters_ECGetBasePrecomputation13_next);
        };
        static struct CryptoPP::ECP* CryptoPP__DL_GroupParameters_ECGetCurve15_wrapper(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>* _this)
        {
           return CryptoPP__DL_GroupParameters_ECGetCurve15_user(_this, CryptoPP__DL_GroupParameters_ECGetCurve15_next);
        };
        static unsigned int CryptoPP__DL_GroupParameters_ECGetEncodedElementSize17_wrapper(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>* _this, bool reversible)
        {
           return CryptoPP__DL_GroupParameters_ECGetEncodedElementSize17_user(_this, reversible, CryptoPP__DL_GroupParameters_ECGetEncodedElementSize17_next);
        };
        static struct CryptoPP::Integer* CryptoPP__DL_GroupParameters_ECGetMaxExponent19_wrapper(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>* _this, struct CryptoPP::Integer* result)
        {
           return CryptoPP__DL_GroupParameters_ECGetMaxExponent19_user(_this, result, CryptoPP__DL_GroupParameters_ECGetMaxExponent19_next);
        };
        static struct CryptoPP::Integer* CryptoPP__DL_GroupParameters_ECGetSubgroupOrder21_wrapper(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>* _this)
        {
           return CryptoPP__DL_GroupParameters_ECGetSubgroupOrder21_user(_this, CryptoPP__DL_GroupParameters_ECGetSubgroupOrder21_next);
        };
        static bool CryptoPP__DL_GroupParameters_ECIsIdentity23_wrapper(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>* _this, struct CryptoPP::ECPPoint* element)
        {
           return CryptoPP__DL_GroupParameters_ECIsIdentity23_user(_this, element, CryptoPP__DL_GroupParameters_ECIsIdentity23_next);
        };
        static void CryptoPP__DL_GroupParameters_ECdtor_DL_GroupParameters_EC32_wrapper(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>* _this)
        {
           CryptoPP__DL_GroupParameters_ECdtor_DL_GroupParameters_EC32_user(_this, CryptoPP__DL_GroupParameters_ECdtor_DL_GroupParameters_EC32_next);
        };
        
        static struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>* CryptoPP__DL_KeyImplAccessGroupParameters2_wrapper(struct CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>* _this)
        {
           return CryptoPP__DL_KeyImplAccessGroupParameters2_user(_this, CryptoPP__DL_KeyImplAccessGroupParameters2_next);
        };
        static bool CryptoPP__DL_KeyImplBERDecodeAlgorithmParameters4_wrapper(struct CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>* _this, struct CryptoPP::BufferedTransformation* bt)
        {
           return CryptoPP__DL_KeyImplBERDecodeAlgorithmParameters4_user(_this, bt, CryptoPP__DL_KeyImplBERDecodeAlgorithmParameters4_next);
        };
        static bool CryptoPP__DL_KeyImplDEREncodeAlgorithmParameters6_wrapper(struct CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>* _this, struct CryptoPP::BufferedTransformation* bt)
        {
           return CryptoPP__DL_KeyImplDEREncodeAlgorithmParameters6_user(_this, bt, CryptoPP__DL_KeyImplDEREncodeAlgorithmParameters6_next);
        };
        static void CryptoPP__DL_KeyImplctor_DL_KeyImpl8_wrapper(struct CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>* _this)
        {
           CryptoPP__DL_KeyImplctor_DL_KeyImpl8_user(_this, CryptoPP__DL_KeyImplctor_DL_KeyImpl8_next);
        };
        static struct CryptoPP::OID* CryptoPP__DL_KeyImplGetAlgorithmID10_wrapper(struct CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>* _this, struct CryptoPP::OID* result)
        {
           return CryptoPP__DL_KeyImplGetAlgorithmID10_user(_this, result, CryptoPP__DL_KeyImplGetAlgorithmID10_next);
        };
        static struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>* CryptoPP__DL_KeyImplGetGroupParameters12_wrapper(struct CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>* _this)
        {
           return CryptoPP__DL_KeyImplGetGroupParameters12_user(_this, CryptoPP__DL_KeyImplGetGroupParameters12_next);
        };
        static void CryptoPP__DL_KeyImpldtor_DL_KeyImpl21_wrapper(struct CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>* _this)
        {
           CryptoPP__DL_KeyImpldtor_DL_KeyImpl21_user(_this, CryptoPP__DL_KeyImpldtor_DL_KeyImpl21_next);
        };
        
        static void CryptoPP__DL_PrivateKey_ECctor_DL_PrivateKey_EC2_wrapper(struct CryptoPP::DL_PrivateKey_EC<CryptoPP::ECP>* _this)
        {
           CryptoPP__DL_PrivateKey_ECctor_DL_PrivateKey_EC2_user(_this, CryptoPP__DL_PrivateKey_ECctor_DL_PrivateKey_EC2_next);
        };
        static void CryptoPP__DL_PrivateKey_ECdtor_DL_PrivateKey_EC9_wrapper(struct CryptoPP::DL_PrivateKey_EC<CryptoPP::ECP>* _this)
        {
           CryptoPP__DL_PrivateKey_ECdtor_DL_PrivateKey_EC9_user(_this, CryptoPP__DL_PrivateKey_ECdtor_DL_PrivateKey_EC9_next);
        };
        
        static void CryptoPP__DL_PublicKeyAssignFrom2_wrapper(struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>* _this, struct CryptoPP::NameValuePairs* source)
        {
           CryptoPP__DL_PublicKeyAssignFrom2_user(_this, source, CryptoPP__DL_PublicKeyAssignFrom2_next);
        };
        static struct CryptoPP::ECPPoint* CryptoPP__DL_PublicKeyCascadeExponentiateBaseAndPublicElement4_wrapper(struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>* _this, struct CryptoPP::ECPPoint* result, struct CryptoPP::Integer* baseExp, struct CryptoPP::Integer* publicExp)
        {
           return CryptoPP__DL_PublicKeyCascadeExponentiateBaseAndPublicElement4_user(_this, result, baseExp, publicExp, CryptoPP__DL_PublicKeyCascadeExponentiateBaseAndPublicElement4_next);
        };
        static void CryptoPP__DL_PublicKeyctor_DL_PublicKey6_wrapper(struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>* _this)
        {
           CryptoPP__DL_PublicKeyctor_DL_PublicKey6_user(_this, CryptoPP__DL_PublicKeyctor_DL_PublicKey6_next);
        };
        static struct CryptoPP::ECPPoint* CryptoPP__DL_PublicKeyExponentiatePublicElement8_wrapper(struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>* _this, struct CryptoPP::ECPPoint* result, struct CryptoPP::Integer* exponent)
        {
           return CryptoPP__DL_PublicKeyExponentiatePublicElement8_user(_this, result, exponent, CryptoPP__DL_PublicKeyExponentiatePublicElement8_next);
        };
        static struct CryptoPP::ECPPoint* CryptoPP__DL_PublicKeyGetPublicElement10_wrapper(struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>* _this)
        {
           return CryptoPP__DL_PublicKeyGetPublicElement10_user(_this, CryptoPP__DL_PublicKeyGetPublicElement10_next);
        };
        static bool CryptoPP__DL_PublicKeyGetVoidValue12_wrapper(struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>* _this, char* name, struct type_info* valueType, void* pValue)
        {
           return CryptoPP__DL_PublicKeyGetVoidValue12_user(_this, name, valueType, pValue, CryptoPP__DL_PublicKeyGetVoidValue12_next);
        };
        static void CryptoPP__DL_PublicKeySetPublicElement14_wrapper(struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>* _this, struct CryptoPP::ECPPoint* y)
        {
           CryptoPP__DL_PublicKeySetPublicElement14_user(_this, y, CryptoPP__DL_PublicKeySetPublicElement14_next);
        };
        
        static void CryptoPP__PublicKeyctor_PublicKey2_wrapper(struct CryptoPP::PublicKey* _this)
        {
           CryptoPP__PublicKeyctor_PublicKey2_user(_this, CryptoPP__PublicKeyctor_PublicKey2_next);
        };
        static void CryptoPP__PublicKeydtor_PublicKey6_wrapper(struct CryptoPP::PublicKey* _this)
        {
           CryptoPP__PublicKeydtor_PublicKey6_user(_this, CryptoPP__PublicKeydtor_PublicKey6_next);
        };
        
        static void CryptoPP__ASN1CryptoMaterialctor_ASN1CryptoMaterial2_wrapper(struct CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>* _this)
        {
           CryptoPP__ASN1CryptoMaterialctor_ASN1CryptoMaterial2_user(_this, CryptoPP__ASN1CryptoMaterialctor_ASN1CryptoMaterial2_next);
        };
        static void CryptoPP__ASN1CryptoMaterialLoad4_wrapper(struct CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>* _this, struct CryptoPP::BufferedTransformation* bt)
        {
           CryptoPP__ASN1CryptoMaterialLoad4_user(_this, bt, CryptoPP__ASN1CryptoMaterialLoad4_next);
        };
        static void CryptoPP__ASN1CryptoMaterialSave6_wrapper(struct CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>* _this, struct CryptoPP::BufferedTransformation* bt)
        {
           CryptoPP__ASN1CryptoMaterialSave6_user(_this, bt, CryptoPP__ASN1CryptoMaterialSave6_next);
        };
        static void CryptoPP__ASN1CryptoMaterialdtor_ASN1CryptoMaterial10_wrapper(struct CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>* _this)
        {
           CryptoPP__ASN1CryptoMaterialdtor_ASN1CryptoMaterial10_user(_this, CryptoPP__ASN1CryptoMaterialdtor_ASN1CryptoMaterial10_next);
        };
        
        static void CryptoPP__X509PublicKeyBERDecode1_wrapper(struct CryptoPP::X509PublicKey* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           CryptoPP__X509PublicKeyBERDecode1_user(_this, arg_0, CryptoPP__X509PublicKeyBERDecode1_next);
        };
        static bool CryptoPP__X509PublicKeyBERDecodeAlgorithmParameters3_wrapper(struct CryptoPP::X509PublicKey* _this, struct CryptoPP::BufferedTransformation* bt)
        {
           return CryptoPP__X509PublicKeyBERDecodeAlgorithmParameters3_user(_this, bt, CryptoPP__X509PublicKeyBERDecodeAlgorithmParameters3_next);
        };
        static void CryptoPP__X509PublicKeyDEREncode4_wrapper(struct CryptoPP::X509PublicKey* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           CryptoPP__X509PublicKeyDEREncode4_user(_this, arg_0, CryptoPP__X509PublicKeyDEREncode4_next);
        };
        static bool CryptoPP__X509PublicKeyDEREncodeAlgorithmParameters6_wrapper(struct CryptoPP::X509PublicKey* _this, struct CryptoPP::BufferedTransformation* bt)
        {
           return CryptoPP__X509PublicKeyDEREncodeAlgorithmParameters6_user(_this, bt, CryptoPP__X509PublicKeyDEREncodeAlgorithmParameters6_next);
        };
        static void CryptoPP__X509PublicKeyctor_X509PublicKey8_wrapper(struct CryptoPP::X509PublicKey* _this)
        {
           CryptoPP__X509PublicKeyctor_X509PublicKey8_user(_this, CryptoPP__X509PublicKeyctor_X509PublicKey8_next);
        };
        static void CryptoPP__X509PublicKeydtor_X509PublicKey17_wrapper(struct CryptoPP::X509PublicKey* _this)
        {
           CryptoPP__X509PublicKeydtor_X509PublicKey17_user(_this, CryptoPP__X509PublicKeydtor_X509PublicKey17_next);
        };
        
        static struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>* CryptoPP__DL_KeyImplAccessGroupParameters2_wrapper(struct CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>* _this)
        {
           return CryptoPP__DL_KeyImplAccessGroupParameters2_user(_this, CryptoPP__DL_KeyImplAccessGroupParameters2_next);
        };
        static bool CryptoPP__DL_KeyImplBERDecodeAlgorithmParameters4_wrapper(struct CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>* _this, struct CryptoPP::BufferedTransformation* bt)
        {
           return CryptoPP__DL_KeyImplBERDecodeAlgorithmParameters4_user(_this, bt, CryptoPP__DL_KeyImplBERDecodeAlgorithmParameters4_next);
        };
        static bool CryptoPP__DL_KeyImplDEREncodeAlgorithmParameters6_wrapper(struct CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>* _this, struct CryptoPP::BufferedTransformation* bt)
        {
           return CryptoPP__DL_KeyImplDEREncodeAlgorithmParameters6_user(_this, bt, CryptoPP__DL_KeyImplDEREncodeAlgorithmParameters6_next);
        };
        static void CryptoPP__DL_KeyImplctor_DL_KeyImpl8_wrapper(struct CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>* _this)
        {
           CryptoPP__DL_KeyImplctor_DL_KeyImpl8_user(_this, CryptoPP__DL_KeyImplctor_DL_KeyImpl8_next);
        };
        static struct CryptoPP::OID* CryptoPP__DL_KeyImplGetAlgorithmID10_wrapper(struct CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>* _this, struct CryptoPP::OID* result)
        {
           return CryptoPP__DL_KeyImplGetAlgorithmID10_user(_this, result, CryptoPP__DL_KeyImplGetAlgorithmID10_next);
        };
        static struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>* CryptoPP__DL_KeyImplGetGroupParameters12_wrapper(struct CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>* _this)
        {
           return CryptoPP__DL_KeyImplGetGroupParameters12_user(_this, CryptoPP__DL_KeyImplGetGroupParameters12_next);
        };
        static void CryptoPP__DL_KeyImpldtor_DL_KeyImpl21_wrapper(struct CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>* _this)
        {
           CryptoPP__DL_KeyImpldtor_DL_KeyImpl21_user(_this, CryptoPP__DL_KeyImpldtor_DL_KeyImpl21_next);
        };
        
        static void CryptoPP__DL_PublicKey_ECctor_DL_PublicKey_EC2_wrapper(struct CryptoPP::DL_PublicKey_EC<CryptoPP::ECP>* _this)
        {
           CryptoPP__DL_PublicKey_ECctor_DL_PublicKey_EC2_user(_this, CryptoPP__DL_PublicKey_ECctor_DL_PublicKey_EC2_next);
        };
        static void CryptoPP__DL_PublicKey_ECdtor_DL_PublicKey_EC9_wrapper(struct CryptoPP::DL_PublicKey_EC<CryptoPP::ECP>* _this)
        {
           CryptoPP__DL_PublicKey_ECdtor_DL_PublicKey_EC9_user(_this, CryptoPP__DL_PublicKey_ECdtor_DL_PublicKey_EC9_next);
        };
        
        static uint64_t CryptoPP__VariableKeyLengthStaticGetValidKeyLength2_wrapper(uint64_t n)
        {
           return CryptoPP__VariableKeyLengthStaticGetValidKeyLength2_user(n, CryptoPP__VariableKeyLengthStaticGetValidKeyLength2_next);
        };
        
        static char* CryptoPP__Rijndael_InfoStaticAlgorithmName2_wrapper()
        {
           return CryptoPP__Rijndael_InfoStaticAlgorithmName2_user(CryptoPP__Rijndael_InfoStaticAlgorithmName2_next);
        };
        
        static void CryptoPP__TwoBasesctor_TwoBases2_wrapper(struct CryptoPP::TwoBases<CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>,CryptoPP::Rijndael_Info>* _this, struct CryptoPP::TwoBases<CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>,CryptoPP::Rijndael_Info>* __that)
        {
           CryptoPP__TwoBasesctor_TwoBases2_user(_this, __that, CryptoPP__TwoBasesctor_TwoBases2_next);
        };
        static void CryptoPP__TwoBasesctor_TwoBases4_wrapper(struct CryptoPP::TwoBases<CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>,CryptoPP::Rijndael_Info>* _this)
        {
           CryptoPP__TwoBasesctor_TwoBases4_user(_this, CryptoPP__TwoBasesctor_TwoBases4_next);
        };
        static void CryptoPP__TwoBasesdtor_TwoBases6_wrapper(struct CryptoPP::TwoBases<CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>,CryptoPP::Rijndael_Info>* _this)
        {
           CryptoPP__TwoBasesdtor_TwoBases6_user(_this, CryptoPP__TwoBasesdtor_TwoBases6_next);
        };
        
        static void CryptoPP__ClonableImplctor_ClonableImpl2_wrapper(struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::Rijndael::Dec>* _this, struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::Rijndael::Dec>* __that)
        {
           CryptoPP__ClonableImplctor_ClonableImpl2_user(_this, __that, CryptoPP__ClonableImplctor_ClonableImpl2_next);
        };
        static void CryptoPP__ClonableImplctor_ClonableImpl4_wrapper(struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::Rijndael::Dec>* _this)
        {
           CryptoPP__ClonableImplctor_ClonableImpl4_user(_this, CryptoPP__ClonableImplctor_ClonableImpl4_next);
        };
        static struct CryptoPP::Clonable* CryptoPP__ClonableImplClone6_wrapper(struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::Rijndael::Dec>* _this)
        {
           return CryptoPP__ClonableImplClone6_user(_this, CryptoPP__ClonableImplClone6_next);
        };
        static void CryptoPP__ClonableImpldtor_ClonableImpl8_wrapper(struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::Rijndael::Dec>* _this)
        {
           CryptoPP__ClonableImpldtor_ClonableImpl8_user(_this, CryptoPP__ClonableImpldtor_ClonableImpl8_next);
        };
        
        static void CryptoPP__BlockCipherFinalctor_BlockCipherFinal2_wrapper(struct CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>* _this, struct CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>* __that)
        {
           CryptoPP__BlockCipherFinalctor_BlockCipherFinal2_user(_this, __that, CryptoPP__BlockCipherFinalctor_BlockCipherFinal2_next);
        };
        static void CryptoPP__BlockCipherFinalctor_BlockCipherFinal4_wrapper(struct CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>* _this)
        {
           CryptoPP__BlockCipherFinalctor_BlockCipherFinal4_user(_this, CryptoPP__BlockCipherFinalctor_BlockCipherFinal4_next);
        };
        static bool CryptoPP__BlockCipherFinalIsForwardTransformation6_wrapper(struct CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>* _this)
        {
           return CryptoPP__BlockCipherFinalIsForwardTransformation6_user(_this, CryptoPP__BlockCipherFinalIsForwardTransformation6_next);
        };
        static void CryptoPP__BlockCipherFinaldtor_BlockCipherFinal11_wrapper(struct CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>* _this)
        {
           CryptoPP__BlockCipherFinaldtor_BlockCipherFinal11_user(_this, CryptoPP__BlockCipherFinaldtor_BlockCipherFinal11_next);
        };
        
        static unsigned int CryptoPP__StreamTransformationGetOptimalBlockSizeUsed2_wrapper(struct CryptoPP::StreamTransformation* _this)
        {
           return CryptoPP__StreamTransformationGetOptimalBlockSizeUsed2_user(_this, CryptoPP__StreamTransformationGetOptimalBlockSizeUsed2_next);
        };
        static unsigned int CryptoPP__StreamTransformationMandatoryBlockSize3_wrapper(struct CryptoPP::StreamTransformation* _this)
        {
           return CryptoPP__StreamTransformationMandatoryBlockSize3_user(_this, CryptoPP__StreamTransformationMandatoryBlockSize3_next);
        };
        static unsigned int CryptoPP__StreamTransformationMinLastBlockSize4_wrapper(struct CryptoPP::StreamTransformation* _this)
        {
           return CryptoPP__StreamTransformationMinLastBlockSize4_user(_this, CryptoPP__StreamTransformationMinLastBlockSize4_next);
        };
        static unsigned int CryptoPP__StreamTransformationOptimalBlockSize6_wrapper(struct CryptoPP::StreamTransformation* _this)
        {
           return CryptoPP__StreamTransformationOptimalBlockSize6_user(_this, CryptoPP__StreamTransformationOptimalBlockSize6_next);
        };
        static void CryptoPP__StreamTransformationProcessLastBlock7_wrapper(struct CryptoPP::StreamTransformation* _this, uint8_t* arg_0, uint8_t* arg_1, uint64_t arg_2)
        {
           CryptoPP__StreamTransformationProcessLastBlock7_user(_this, arg_0, arg_1, arg_2, CryptoPP__StreamTransformationProcessLastBlock7_next);
        };
        static void CryptoPP__StreamTransformationProcessString8_wrapper(struct CryptoPP::StreamTransformation* _this, uint8_t* arg_0, uint8_t* arg_1, uint64_t arg_2)
        {
           CryptoPP__StreamTransformationProcessString8_user(_this, arg_0, arg_1, arg_2, CryptoPP__StreamTransformationProcessString8_next);
        };
        static void CryptoPP__StreamTransformationProcessString9_wrapper(struct CryptoPP::StreamTransformation* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__StreamTransformationProcessString9_user(_this, arg_0, arg_1, CryptoPP__StreamTransformationProcessString9_next);
        };
        static void CryptoPP__StreamTransformationSeek11_wrapper(struct CryptoPP::StreamTransformation* _this, uint64_t n)
        {
           CryptoPP__StreamTransformationSeek11_user(_this, n, CryptoPP__StreamTransformationSeek11_next);
        };
        static void CryptoPP__StreamTransformationctor_StreamTransformation13_wrapper(struct CryptoPP::StreamTransformation* _this)
        {
           CryptoPP__StreamTransformationctor_StreamTransformation13_user(_this, CryptoPP__StreamTransformationctor_StreamTransformation13_next);
        };
        static void CryptoPP__StreamTransformationdtor_StreamTransformation15_wrapper(struct CryptoPP::StreamTransformation* _this)
        {
           CryptoPP__StreamTransformationdtor_StreamTransformation15_user(_this, CryptoPP__StreamTransformationdtor_StreamTransformation15_next);
        };
        
        static struct CryptoPP::Algorithm* CryptoPP__SimpleKeyedTransformationGetAlgorithm2_wrapper(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::StreamTransformation>* _this)
        {
           return CryptoPP__SimpleKeyedTransformationGetAlgorithm2_user(_this, CryptoPP__SimpleKeyedTransformationGetAlgorithm2_next);
        };
        static void CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_wrapper(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::StreamTransformation>* _this)
        {
           CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_user(_this, CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_next);
        };
        static void CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation6_wrapper(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::StreamTransformation>* _this)
        {
           CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation6_user(_this, CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation6_next);
        };
        
        static unsigned int CryptoPP__CipherModeBaseBlockSize2_wrapper(struct CryptoPP::CipherModeBase* _this)
        {
           return CryptoPP__CipherModeBaseBlockSize2_user(_this, CryptoPP__CipherModeBaseBlockSize2_next);
        };
        static void CryptoPP__CipherModeBasector_CipherModeBase4_wrapper(struct CryptoPP::CipherModeBase* _this)
        {
           CryptoPP__CipherModeBasector_CipherModeBase4_user(_this, CryptoPP__CipherModeBasector_CipherModeBase4_next);
        };
        static uint64_t CryptoPP__CipherModeBaseDefaultKeyLength6_wrapper(struct CryptoPP::CipherModeBase* _this)
        {
           return CryptoPP__CipherModeBaseDefaultKeyLength6_user(_this, CryptoPP__CipherModeBaseDefaultKeyLength6_next);
        };
        static uint64_t CryptoPP__CipherModeBaseGetValidKeyLength8_wrapper(struct CryptoPP::CipherModeBase* _this, uint64_t n)
        {
           return CryptoPP__CipherModeBaseGetValidKeyLength8_user(_this, n, CryptoPP__CipherModeBaseGetValidKeyLength8_next);
        };
        static unsigned int CryptoPP__CipherModeBaseIVSize10_wrapper(struct CryptoPP::CipherModeBase* _this)
        {
           return CryptoPP__CipherModeBaseIVSize10_user(_this, CryptoPP__CipherModeBaseIVSize10_next);
        };
        static bool CryptoPP__CipherModeBaseIsValidKeyLength12_wrapper(struct CryptoPP::CipherModeBase* _this, uint64_t n)
        {
           return CryptoPP__CipherModeBaseIsValidKeyLength12_user(_this, n, CryptoPP__CipherModeBaseIsValidKeyLength12_next);
        };
        static uint64_t CryptoPP__CipherModeBaseMaxKeyLength14_wrapper(struct CryptoPP::CipherModeBase* _this)
        {
           return CryptoPP__CipherModeBaseMaxKeyLength14_user(_this, CryptoPP__CipherModeBaseMaxKeyLength14_next);
        };
        static uint64_t CryptoPP__CipherModeBaseMinKeyLength16_wrapper(struct CryptoPP::CipherModeBase* _this)
        {
           return CryptoPP__CipherModeBaseMinKeyLength16_user(_this, CryptoPP__CipherModeBaseMinKeyLength16_next);
        };
        static unsigned int CryptoPP__CipherModeBaseOptimalDataAlignment18_wrapper(struct CryptoPP::CipherModeBase* _this)
        {
           return CryptoPP__CipherModeBaseOptimalDataAlignment18_user(_this, CryptoPP__CipherModeBaseOptimalDataAlignment18_next);
        };
        static void CryptoPP__CipherModeBaseResizeBuffers20_wrapper(struct CryptoPP::CipherModeBase* _this)
        {
           CryptoPP__CipherModeBaseResizeBuffers20_user(_this, CryptoPP__CipherModeBaseResizeBuffers20_next);
        };
        static void CryptoPP__CipherModeBaseSetFeedbackSize22_wrapper(struct CryptoPP::CipherModeBase* _this, unsigned int feedbackSize)
        {
           CryptoPP__CipherModeBaseSetFeedbackSize22_user(_this, feedbackSize, CryptoPP__CipherModeBaseSetFeedbackSize22_next);
        };
        static void CryptoPP__CipherModeBasedtor_CipherModeBase24_wrapper(struct CryptoPP::CipherModeBase* _this)
        {
           CryptoPP__CipherModeBasedtor_CipherModeBase24_user(_this, CryptoPP__CipherModeBasedtor_CipherModeBase24_next);
        };
        
        static void CryptoPP__BlockOrientedCipherModeBasector_BlockOrientedCipherModeBase2_wrapper(struct CryptoPP::BlockOrientedCipherModeBase* _this)
        {
           CryptoPP__BlockOrientedCipherModeBasector_BlockOrientedCipherModeBase2_user(_this, CryptoPP__BlockOrientedCipherModeBasector_BlockOrientedCipherModeBase2_next);
        };
        static bool CryptoPP__BlockOrientedCipherModeBaseIsForwardTransformation4_wrapper(struct CryptoPP::BlockOrientedCipherModeBase* _this)
        {
           return CryptoPP__BlockOrientedCipherModeBaseIsForwardTransformation4_user(_this, CryptoPP__BlockOrientedCipherModeBaseIsForwardTransformation4_next);
        };
        static bool CryptoPP__BlockOrientedCipherModeBaseIsRandomAccess6_wrapper(struct CryptoPP::BlockOrientedCipherModeBase* _this)
        {
           return CryptoPP__BlockOrientedCipherModeBaseIsRandomAccess6_user(_this, CryptoPP__BlockOrientedCipherModeBaseIsRandomAccess6_next);
        };
        static bool CryptoPP__BlockOrientedCipherModeBaseIsSelfInverting8_wrapper(struct CryptoPP::BlockOrientedCipherModeBase* _this)
        {
           return CryptoPP__BlockOrientedCipherModeBaseIsSelfInverting8_user(_this, CryptoPP__BlockOrientedCipherModeBaseIsSelfInverting8_next);
        };
        static unsigned int CryptoPP__BlockOrientedCipherModeBaseMandatoryBlockSize10_wrapper(struct CryptoPP::BlockOrientedCipherModeBase* _this)
        {
           return CryptoPP__BlockOrientedCipherModeBaseMandatoryBlockSize10_user(_this, CryptoPP__BlockOrientedCipherModeBaseMandatoryBlockSize10_next);
        };
        static void CryptoPP__BlockOrientedCipherModeBaseProcessData11_wrapper(struct CryptoPP::BlockOrientedCipherModeBase* _this, uint8_t* arg_0, uint8_t* arg_1, uint64_t arg_2)
        {
           CryptoPP__BlockOrientedCipherModeBaseProcessData11_user(_this, arg_0, arg_1, arg_2, CryptoPP__BlockOrientedCipherModeBaseProcessData11_next);
        };
        static bool CryptoPP__BlockOrientedCipherModeBaseRequireAlignedInput12_wrapper(struct CryptoPP::BlockOrientedCipherModeBase* _this)
        {
           return CryptoPP__BlockOrientedCipherModeBaseRequireAlignedInput12_user(_this, CryptoPP__BlockOrientedCipherModeBaseRequireAlignedInput12_next);
        };
        static void CryptoPP__BlockOrientedCipherModeBaseResizeBuffers14_wrapper(struct CryptoPP::BlockOrientedCipherModeBase* _this)
        {
           CryptoPP__BlockOrientedCipherModeBaseResizeBuffers14_user(_this, CryptoPP__BlockOrientedCipherModeBaseResizeBuffers14_next);
        };
        static void CryptoPP__BlockOrientedCipherModeBaseResynchronize16_wrapper(struct CryptoPP::BlockOrientedCipherModeBase* _this, char* iv)
        {
           CryptoPP__BlockOrientedCipherModeBaseResynchronize16_user(_this, iv, CryptoPP__BlockOrientedCipherModeBaseResynchronize16_next);
        };
        static void CryptoPP__BlockOrientedCipherModeBaseUncheckedSetKey17_wrapper(struct CryptoPP::BlockOrientedCipherModeBase* _this, uint8_t* arg_0, unsigned int arg_1, struct CryptoPP::NameValuePairs* arg_2)
        {
           CryptoPP__BlockOrientedCipherModeBaseUncheckedSetKey17_user(_this, arg_0, arg_1, arg_2, CryptoPP__BlockOrientedCipherModeBaseUncheckedSetKey17_next);
        };
        static void CryptoPP__BlockOrientedCipherModeBasedtor_BlockOrientedCipherModeBase19_wrapper(struct CryptoPP::BlockOrientedCipherModeBase* _this)
        {
           CryptoPP__BlockOrientedCipherModeBasedtor_BlockOrientedCipherModeBase19_user(_this, CryptoPP__BlockOrientedCipherModeBasedtor_BlockOrientedCipherModeBase19_next);
        };
        
        static void CryptoPP__CBC_ModeBasector_CBC_ModeBase2_wrapper(struct CryptoPP::CBC_ModeBase* _this)
        {
           CryptoPP__CBC_ModeBasector_CBC_ModeBase2_user(_this, CryptoPP__CBC_ModeBasector_CBC_ModeBase2_next);
        };
        static struct CryptoPP::SimpleKeyingInterface::IV_Requirement CryptoPP__CBC_ModeBaseIVRequirement4_wrapper(struct CryptoPP::CBC_ModeBase* _this)
        {
           return CryptoPP__CBC_ModeBaseIVRequirement4_user(_this, CryptoPP__CBC_ModeBaseIVRequirement4_next);
        };
        static unsigned int CryptoPP__CBC_ModeBaseMinLastBlockSize6_wrapper(struct CryptoPP::CBC_ModeBase* _this)
        {
           return CryptoPP__CBC_ModeBaseMinLastBlockSize6_user(_this, CryptoPP__CBC_ModeBaseMinLastBlockSize6_next);
        };
        static char* CryptoPP__CBC_ModeBaseStaticAlgorithmName8_wrapper()
        {
           return CryptoPP__CBC_ModeBaseStaticAlgorithmName8_user(CryptoPP__CBC_ModeBaseStaticAlgorithmName8_next);
        };
        static void CryptoPP__CBC_ModeBasedtor_CBC_ModeBase10_wrapper(struct CryptoPP::CBC_ModeBase* _this)
        {
           CryptoPP__CBC_ModeBasedtor_CBC_ModeBase10_user(_this, CryptoPP__CBC_ModeBasedtor_CBC_ModeBase10_next);
        };
        
        static void CryptoPP__CBC_Decryptionctor_CBC_Decryption2_wrapper(struct CryptoPP::CBC_Decryption* _this)
        {
           CryptoPP__CBC_Decryptionctor_CBC_Decryption2_user(_this, CryptoPP__CBC_Decryptionctor_CBC_Decryption2_next);
        };
        static void CryptoPP__CBC_DecryptionProcessBlocks3_wrapper(struct CryptoPP::CBC_Decryption* _this, uint8_t* arg_0, uint8_t* arg_1, uint64_t arg_2)
        {
           CryptoPP__CBC_DecryptionProcessBlocks3_user(_this, arg_0, arg_1, arg_2, CryptoPP__CBC_DecryptionProcessBlocks3_next);
        };
        static void CryptoPP__CBC_DecryptionResizeBuffers5_wrapper(struct CryptoPP::CBC_Decryption* _this)
        {
           CryptoPP__CBC_DecryptionResizeBuffers5_user(_this, CryptoPP__CBC_DecryptionResizeBuffers5_next);
        };
        static void CryptoPP__CBC_Decryptiondtor_CBC_Decryption7_wrapper(struct CryptoPP::CBC_Decryption* _this)
        {
           CryptoPP__CBC_Decryptiondtor_CBC_Decryption7_user(_this, CryptoPP__CBC_Decryptiondtor_CBC_Decryption7_next);
        };
        
        static void CryptoPP__CipherModeFinalTemplate_CipherHolderctor_CipherModeFinalTemplate_CipherHolder2_wrapper(struct CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::CBC_Decryption>* _this)
        {
           CryptoPP__CipherModeFinalTemplate_CipherHolderctor_CipherModeFinalTemplate_CipherHolder2_user(_this, CryptoPP__CipherModeFinalTemplate_CipherHolderctor_CipherModeFinalTemplate_CipherHolder2_next);
        };
        static struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* CryptoPP__CipherModeFinalTemplate_CipherHolderStaticAlgorithmName4_wrapper(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* result)
        {
           return CryptoPP__CipherModeFinalTemplate_CipherHolderStaticAlgorithmName4_user(result, CryptoPP__CipherModeFinalTemplate_CipherHolderStaticAlgorithmName4_next);
        };
        static void CryptoPP__CipherModeFinalTemplate_CipherHolderdtor_CipherModeFinalTemplate_CipherHolder9_wrapper(struct CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::CBC_Decryption>* _this)
        {
           CryptoPP__CipherModeFinalTemplate_CipherHolderdtor_CipherModeFinalTemplate_CipherHolder9_user(_this, CryptoPP__CipherModeFinalTemplate_CipherHolderdtor_CipherModeFinalTemplate_CipherHolder9_next);
        };
        
        static uint64_t CryptoPP__PK_CryptoSystemFixedCiphertextLength2_wrapper(struct CryptoPP::PK_CryptoSystem* _this)
        {
           return CryptoPP__PK_CryptoSystemFixedCiphertextLength2_user(_this, CryptoPP__PK_CryptoSystemFixedCiphertextLength2_next);
        };
        static uint64_t CryptoPP__PK_CryptoSystemFixedMaxPlaintextLength4_wrapper(struct CryptoPP::PK_CryptoSystem* _this)
        {
           return CryptoPP__PK_CryptoSystemFixedMaxPlaintextLength4_user(_this, CryptoPP__PK_CryptoSystemFixedMaxPlaintextLength4_next);
        };
        static void CryptoPP__PK_CryptoSystemctor_PK_CryptoSystem6_wrapper(struct CryptoPP::PK_CryptoSystem* _this)
        {
           CryptoPP__PK_CryptoSystemctor_PK_CryptoSystem6_user(_this, CryptoPP__PK_CryptoSystemctor_PK_CryptoSystem6_next);
        };
        static void CryptoPP__PK_CryptoSystemdtor_PK_CryptoSystem8_wrapper(struct CryptoPP::PK_CryptoSystem* _this)
        {
           CryptoPP__PK_CryptoSystemdtor_PK_CryptoSystem8_user(_this, CryptoPP__PK_CryptoSystemdtor_PK_CryptoSystem8_next);
        };
        
        static int64_t CryptoPP__AsymmetricAlgorithmctor_AsymmetricAlgorithm1_wrapper(struct CryptoPP::AsymmetricAlgorithm* _this, struct CryptoPP::AsymmetricAlgorithm* arg_0)
        {
           return CryptoPP__AsymmetricAlgorithmctor_AsymmetricAlgorithm1_user(_this, arg_0, CryptoPP__AsymmetricAlgorithmctor_AsymmetricAlgorithm1_next);
        };
        static void CryptoPP__AsymmetricAlgorithmctor_AsymmetricAlgorithm3_wrapper(struct CryptoPP::AsymmetricAlgorithm* _this)
        {
           CryptoPP__AsymmetricAlgorithmctor_AsymmetricAlgorithm3_user(_this, CryptoPP__AsymmetricAlgorithmctor_AsymmetricAlgorithm3_next);
        };
        static void CryptoPP__AsymmetricAlgorithmdtor_AsymmetricAlgorithm5_wrapper(struct CryptoPP::AsymmetricAlgorithm* _this)
        {
           CryptoPP__AsymmetricAlgorithmdtor_AsymmetricAlgorithm5_user(_this, CryptoPP__AsymmetricAlgorithmdtor_AsymmetricAlgorithm5_next);
        };
        
        static struct CryptoPP::CryptoMaterial* CryptoPP__PublicKeyAlgorithmAccessMaterial2_wrapper(struct CryptoPP::PublicKeyAlgorithm* _this)
        {
           return CryptoPP__PublicKeyAlgorithmAccessMaterial2_user(_this, CryptoPP__PublicKeyAlgorithmAccessMaterial2_next);
        };
        static struct CryptoPP::CryptoMaterial* CryptoPP__PublicKeyAlgorithmGetMaterial4_wrapper(struct CryptoPP::PublicKeyAlgorithm* _this)
        {
           return CryptoPP__PublicKeyAlgorithmGetMaterial4_user(_this, CryptoPP__PublicKeyAlgorithmGetMaterial4_next);
        };
        static struct CryptoPP::PublicKey* CryptoPP__PublicKeyAlgorithmGetPublicKey6_wrapper(struct CryptoPP::PublicKeyAlgorithm* _this)
        {
           return CryptoPP__PublicKeyAlgorithmGetPublicKey6_user(_this, CryptoPP__PublicKeyAlgorithmGetPublicKey6_next);
        };
        static void CryptoPP__PublicKeyAlgorithmctor_PublicKeyAlgorithm8_wrapper(struct CryptoPP::PublicKeyAlgorithm* _this)
        {
           CryptoPP__PublicKeyAlgorithmctor_PublicKeyAlgorithm8_user(_this, CryptoPP__PublicKeyAlgorithmctor_PublicKeyAlgorithm8_next);
        };
        static void CryptoPP__PublicKeyAlgorithmdtor_PublicKeyAlgorithm10_wrapper(struct CryptoPP::PublicKeyAlgorithm* _this)
        {
           CryptoPP__PublicKeyAlgorithmdtor_PublicKeyAlgorithm10_user(_this, CryptoPP__PublicKeyAlgorithmdtor_PublicKeyAlgorithm10_next);
        };
        
        static struct CryptoPP::BufferedTransformation* CryptoPP__PK_EncryptorCreateEncryptionFilter1_wrapper(struct CryptoPP::PK_Encryptor* _this, struct CryptoPP::RandomNumberGenerator* arg_0, struct CryptoPP::BufferedTransformation* arg_1, struct CryptoPP::NameValuePairs* arg_2)
        {
           return CryptoPP__PK_EncryptorCreateEncryptionFilter1_user(_this, arg_0, arg_1, arg_2, CryptoPP__PK_EncryptorCreateEncryptionFilter1_next);
        };
        static void CryptoPP__PK_Encryptorctor_PK_Encryptor3_wrapper(struct CryptoPP::PK_Encryptor* _this)
        {
           CryptoPP__PK_Encryptorctor_PK_Encryptor3_user(_this, CryptoPP__PK_Encryptorctor_PK_Encryptor3_next);
        };
        static void CryptoPP__PK_Encryptordtor_PK_Encryptor5_wrapper(struct CryptoPP::PK_Encryptor* _this)
        {
           CryptoPP__PK_Encryptordtor_PK_Encryptor5_user(_this, CryptoPP__PK_Encryptordtor_PK_Encryptor5_next);
        };
        
        static void CryptoPP__DL_EncryptorBasector_DL_EncryptorBase2_wrapper(struct CryptoPP::DL_EncryptorBase<CryptoPP::ECPPoint>* _this)
        {
           CryptoPP__DL_EncryptorBasector_DL_EncryptorBase2_user(_this, CryptoPP__DL_EncryptorBasector_DL_EncryptorBase2_next);
        };
        static void CryptoPP__DL_EncryptorBaseEncrypt4_wrapper(struct CryptoPP::DL_EncryptorBase<CryptoPP::ECPPoint>* _this, struct CryptoPP::RandomNumberGenerator* rng, char* plaintext, uint64_t plaintextLength, char* ciphertext, struct CryptoPP::NameValuePairs* parameters)
        {
           CryptoPP__DL_EncryptorBaseEncrypt4_user(_this, rng, plaintext, plaintextLength, ciphertext, parameters, CryptoPP__DL_EncryptorBaseEncrypt4_next);
        };
        static void CryptoPP__DL_EncryptorBasedtor_DL_EncryptorBase6_wrapper(struct CryptoPP::DL_EncryptorBase<CryptoPP::ECPPoint>* _this)
        {
           CryptoPP__DL_EncryptorBasedtor_DL_EncryptorBase6_user(_this, CryptoPP__DL_EncryptorBasedtor_DL_EncryptorBase6_next);
        };
        
        static struct CryptoPP::CryptoMaterial* CryptoPP__PrivateKeyAlgorithmAccessMaterial2_wrapper(struct CryptoPP::PrivateKeyAlgorithm* _this)
        {
           return CryptoPP__PrivateKeyAlgorithmAccessMaterial2_user(_this, CryptoPP__PrivateKeyAlgorithmAccessMaterial2_next);
        };
        static struct CryptoPP::CryptoMaterial* CryptoPP__PrivateKeyAlgorithmGetMaterial4_wrapper(struct CryptoPP::PrivateKeyAlgorithm* _this)
        {
           return CryptoPP__PrivateKeyAlgorithmGetMaterial4_user(_this, CryptoPP__PrivateKeyAlgorithmGetMaterial4_next);
        };
        static struct CryptoPP::PrivateKey* CryptoPP__PrivateKeyAlgorithmGetPrivateKey6_wrapper(struct CryptoPP::PrivateKeyAlgorithm* _this)
        {
           return CryptoPP__PrivateKeyAlgorithmGetPrivateKey6_user(_this, CryptoPP__PrivateKeyAlgorithmGetPrivateKey6_next);
        };
        static int64_t CryptoPP__PrivateKeyAlgorithmctor_PrivateKeyAlgorithm7_wrapper(struct CryptoPP::PrivateKeyAlgorithm* _this, struct CryptoPP::PrivateKeyAlgorithm* arg_0)
        {
           return CryptoPP__PrivateKeyAlgorithmctor_PrivateKeyAlgorithm7_user(_this, arg_0, CryptoPP__PrivateKeyAlgorithmctor_PrivateKeyAlgorithm7_next);
        };
        static void CryptoPP__PrivateKeyAlgorithmctor_PrivateKeyAlgorithm9_wrapper(struct CryptoPP::PrivateKeyAlgorithm* _this)
        {
           CryptoPP__PrivateKeyAlgorithmctor_PrivateKeyAlgorithm9_user(_this, CryptoPP__PrivateKeyAlgorithmctor_PrivateKeyAlgorithm9_next);
        };
        static void CryptoPP__PrivateKeyAlgorithmdtor_PrivateKeyAlgorithm11_wrapper(struct CryptoPP::PrivateKeyAlgorithm* _this)
        {
           CryptoPP__PrivateKeyAlgorithmdtor_PrivateKeyAlgorithm11_user(_this, CryptoPP__PrivateKeyAlgorithmdtor_PrivateKeyAlgorithm11_next);
        };
        
        static struct CryptoPP::BufferedTransformation* CryptoPP__PK_DecryptorCreateDecryptionFilter1_wrapper(struct CryptoPP::PK_Decryptor* _this, struct CryptoPP::RandomNumberGenerator* arg_0, struct CryptoPP::BufferedTransformation* arg_1, struct CryptoPP::NameValuePairs* arg_2)
        {
           return CryptoPP__PK_DecryptorCreateDecryptionFilter1_user(_this, arg_0, arg_1, arg_2, CryptoPP__PK_DecryptorCreateDecryptionFilter1_next);
        };
        static void CryptoPP__PK_Decryptorctor_PK_Decryptor3_wrapper(struct CryptoPP::PK_Decryptor* _this)
        {
           CryptoPP__PK_Decryptorctor_PK_Decryptor3_user(_this, CryptoPP__PK_Decryptorctor_PK_Decryptor3_next);
        };
        static void CryptoPP__PK_Decryptordtor_PK_Decryptor5_wrapper(struct CryptoPP::PK_Decryptor* _this)
        {
           CryptoPP__PK_Decryptordtor_PK_Decryptor5_user(_this, CryptoPP__PK_Decryptordtor_PK_Decryptor5_next);
        };
        
        static void CryptoPP__DL_DecryptorBasector_DL_DecryptorBase2_wrapper(struct CryptoPP::DL_DecryptorBase<CryptoPP::ECPPoint>* _this)
        {
           CryptoPP__DL_DecryptorBasector_DL_DecryptorBase2_user(_this, CryptoPP__DL_DecryptorBasector_DL_DecryptorBase2_next);
        };
        static struct CryptoPP::DecodingResult* CryptoPP__DL_DecryptorBaseDecrypt4_wrapper(struct CryptoPP::DL_DecryptorBase<CryptoPP::ECPPoint>* _this, struct CryptoPP::DecodingResult* result, struct CryptoPP::RandomNumberGenerator* rng, char* ciphertext, uint64_t ciphertextLength, char* plaintext, struct CryptoPP::NameValuePairs* parameters)
        {
           return CryptoPP__DL_DecryptorBaseDecrypt4_user(_this, result, rng, ciphertext, ciphertextLength, plaintext, parameters, CryptoPP__DL_DecryptorBaseDecrypt4_next);
        };
        static void CryptoPP__DL_DecryptorBasedtor_DL_DecryptorBase6_wrapper(struct CryptoPP::DL_DecryptorBase<CryptoPP::ECPPoint>* _this)
        {
           CryptoPP__DL_DecryptorBasedtor_DL_DecryptorBase6_user(_this, CryptoPP__DL_DecryptorBasedtor_DL_DecryptorBase6_next);
        };
        
        static unsigned int CryptoPP__HashTransformationBlockSize2_wrapper(struct CryptoPP::HashTransformation* _this)
        {
           return CryptoPP__HashTransformationBlockSize2_user(_this, CryptoPP__HashTransformationBlockSize2_next);
        };
        static void CryptoPP__HashTransformationCalculateDigest4_wrapper(struct CryptoPP::HashTransformation* _this, char* digest, char* input, uint64_t length)
        {
           CryptoPP__HashTransformationCalculateDigest4_user(_this, digest, input, length, CryptoPP__HashTransformationCalculateDigest4_next);
        };
        static void CryptoPP__HashTransformationCalculateTruncatedDigest6_wrapper(struct CryptoPP::HashTransformation* _this, char* digest, uint64_t digestSize, char* input, uint64_t length)
        {
           CryptoPP__HashTransformationCalculateTruncatedDigest6_user(_this, digest, digestSize, input, length, CryptoPP__HashTransformationCalculateTruncatedDigest6_next);
        };
        static char* CryptoPP__HashTransformationCreateUpdateSpace8_wrapper(struct CryptoPP::HashTransformation* _this, uint64_t* size)
        {
           return CryptoPP__HashTransformationCreateUpdateSpace8_user(_this, size, CryptoPP__HashTransformationCreateUpdateSpace8_next);
        };
        static void CryptoPP__HashTransformationFinal10_wrapper(struct CryptoPP::HashTransformation* _this, char* digest)
        {
           CryptoPP__HashTransformationFinal10_user(_this, digest, CryptoPP__HashTransformationFinal10_next);
        };
        static void CryptoPP__HashTransformationctor_HashTransformation12_wrapper(struct CryptoPP::HashTransformation* _this, struct CryptoPP::HashTransformation* __that)
        {
           CryptoPP__HashTransformationctor_HashTransformation12_user(_this, __that, CryptoPP__HashTransformationctor_HashTransformation12_next);
        };
        static void CryptoPP__HashTransformationctor_HashTransformation14_wrapper(struct CryptoPP::HashTransformation* _this)
        {
           CryptoPP__HashTransformationctor_HashTransformation14_user(_this, CryptoPP__HashTransformationctor_HashTransformation14_next);
        };
        static unsigned int CryptoPP__HashTransformationOptimalBlockSize15_wrapper(struct CryptoPP::HashTransformation* _this)
        {
           return CryptoPP__HashTransformationOptimalBlockSize15_user(_this, CryptoPP__HashTransformationOptimalBlockSize15_next);
        };
        static unsigned int CryptoPP__HashTransformationOptimalDataAlignment17_wrapper(struct CryptoPP::HashTransformation* _this)
        {
           return CryptoPP__HashTransformationOptimalDataAlignment17_user(_this, CryptoPP__HashTransformationOptimalDataAlignment17_next);
        };
        static void CryptoPP__HashTransformationRestart18_wrapper(struct CryptoPP::HashTransformation* _this)
        {
           CryptoPP__HashTransformationRestart18_user(_this, CryptoPP__HashTransformationRestart18_next);
        };
        static void CryptoPP__HashTransformationThrowIfInvalidTruncatedSize19_wrapper(struct CryptoPP::HashTransformation* _this, uint64_t arg_0)
        {
           CryptoPP__HashTransformationThrowIfInvalidTruncatedSize19_user(_this, arg_0, CryptoPP__HashTransformationThrowIfInvalidTruncatedSize19_next);
        };
        static bool CryptoPP__HashTransformationTruncatedVerify20_wrapper(struct CryptoPP::HashTransformation* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           return CryptoPP__HashTransformationTruncatedVerify20_user(_this, arg_0, arg_1, CryptoPP__HashTransformationTruncatedVerify20_next);
        };
        static bool CryptoPP__HashTransformationVerify22_wrapper(struct CryptoPP::HashTransformation* _this, char* digest)
        {
           return CryptoPP__HashTransformationVerify22_user(_this, digest, CryptoPP__HashTransformationVerify22_next);
        };
        static bool CryptoPP__HashTransformationVerifyDigest24_wrapper(struct CryptoPP::HashTransformation* _this, char* digest, char* input, uint64_t length)
        {
           return CryptoPP__HashTransformationVerifyDigest24_user(_this, digest, input, length, CryptoPP__HashTransformationVerifyDigest24_next);
        };
        static bool CryptoPP__HashTransformationVerifyTruncatedDigest26_wrapper(struct CryptoPP::HashTransformation* _this, char* digest, uint64_t digestLength, char* input, uint64_t length)
        {
           return CryptoPP__HashTransformationVerifyTruncatedDigest26_user(_this, digest, digestLength, input, length, CryptoPP__HashTransformationVerifyTruncatedDigest26_next);
        };
        static void CryptoPP__HashTransformationdtor_HashTransformation28_wrapper(struct CryptoPP::HashTransformation* _this)
        {
           CryptoPP__HashTransformationdtor_HashTransformation28_user(_this, CryptoPP__HashTransformationdtor_HashTransformation28_next);
        };
        
        static void CryptoPP__SHA256InitState1_wrapper(unsigned int* arg_0)
        {
           CryptoPP__SHA256InitState1_user(arg_0, CryptoPP__SHA256InitState1_next);
        };
        static void CryptoPP__SHA256ctor_SHA2563_wrapper(struct CryptoPP::SHA256* _this, struct CryptoPP::SHA256* __that)
        {
           CryptoPP__SHA256ctor_SHA2563_user(_this, __that, CryptoPP__SHA256ctor_SHA2563_next);
        };
        static void CryptoPP__SHA256ctor_SHA2565_wrapper(struct CryptoPP::SHA256* _this)
        {
           CryptoPP__SHA256ctor_SHA2565_user(_this, CryptoPP__SHA256ctor_SHA2565_next);
        };
        static char* CryptoPP__SHA256StaticAlgorithmName7_wrapper()
        {
           return CryptoPP__SHA256StaticAlgorithmName7_user(CryptoPP__SHA256StaticAlgorithmName7_next);
        };
        static void CryptoPP__SHA256Transform8_wrapper(unsigned int* arg_0, unsigned int* arg_1)
        {
           CryptoPP__SHA256Transform8_user(arg_0, arg_1, CryptoPP__SHA256Transform8_next);
        };
        static void CryptoPP__SHA256dtor_SHA25613_wrapper(struct CryptoPP::SHA256* _this)
        {
           CryptoPP__SHA256dtor_SHA25613_user(_this, CryptoPP__SHA256dtor_SHA25613_next);
        };
        
        static void CryptoPP__Exceptionctor_Exception2_wrapper(struct CryptoPP::Exception* _this, struct CryptoPP::Exception* __that)
        {
           CryptoPP__Exceptionctor_Exception2_user(_this, __that, CryptoPP__Exceptionctor_Exception2_next);
        };
        static void CryptoPP__Exceptionctor_Exception4_wrapper(struct CryptoPP::Exception* _this, struct CryptoPP::Exception::ErrorType errorType, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* s)
        {
           CryptoPP__Exceptionctor_Exception4_user(_this, errorType, s, CryptoPP__Exceptionctor_Exception4_next);
        };
        static char* CryptoPP__Exceptionwhat9_wrapper(struct CryptoPP::Exception* _this)
        {
           return CryptoPP__Exceptionwhat9_user(_this, CryptoPP__Exceptionwhat9_next);
        };
        static void CryptoPP__Exceptiondtor_Exception11_wrapper(struct CryptoPP::Exception* _this)
        {
           CryptoPP__Exceptiondtor_Exception11_user(_this, CryptoPP__Exceptiondtor_Exception11_next);
        };
        
        static struct CryptoPP::PolynomialMod2* CryptoPP__PolynomialMod2AllOnes1_wrapper(short retstr, struct CryptoPP::PolynomialMod2* arg_0)
        {
           return CryptoPP__PolynomialMod2AllOnes1_user(retstr, arg_0, CryptoPP__PolynomialMod2AllOnes1_next);
        };
        static struct CryptoPP::PolynomialMod2* CryptoPP__PolynomialMod2And2_wrapper(struct CryptoPP::PolynomialMod2* _this, short retstr, struct CryptoPP::PolynomialMod2* arg_0)
        {
           return CryptoPP__PolynomialMod2And2_user(_this, retstr, arg_0, CryptoPP__PolynomialMod2And2_next);
        };
        static void CryptoPP__PolynomialMod2BERDecodeAsOctetString3_wrapper(struct CryptoPP::PolynomialMod2* _this, struct CryptoPP::BufferedTransformation* arg_0, uint64_t arg_1)
        {
           CryptoPP__PolynomialMod2BERDecodeAsOctetString3_user(_this, arg_0, arg_1, CryptoPP__PolynomialMod2BERDecodeAsOctetString3_next);
        };
        static unsigned int CryptoPP__PolynomialMod2BitCount4_wrapper(struct CryptoPP::PolynomialMod2* _this)
        {
           return CryptoPP__PolynomialMod2BitCount4_user(_this, CryptoPP__PolynomialMod2BitCount4_next);
        };
        static unsigned int CryptoPP__PolynomialMod2ByteCount5_wrapper(struct CryptoPP::PolynomialMod2* _this)
        {
           return CryptoPP__PolynomialMod2ByteCount5_user(_this, CryptoPP__PolynomialMod2ByteCount5_next);
        };
        static unsigned int CryptoPP__PolynomialMod2CoefficientCount6_wrapper(struct CryptoPP::PolynomialMod2* _this)
        {
           return CryptoPP__PolynomialMod2CoefficientCount6_user(_this, CryptoPP__PolynomialMod2CoefficientCount6_next);
        };
        static void CryptoPP__PolynomialMod2DEREncodeAsOctetString7_wrapper(struct CryptoPP::PolynomialMod2* _this, struct CryptoPP::BufferedTransformation* arg_0, uint64_t arg_1)
        {
           CryptoPP__PolynomialMod2DEREncodeAsOctetString7_user(_this, arg_0, arg_1, CryptoPP__PolynomialMod2DEREncodeAsOctetString7_next);
        };
        static void CryptoPP__PolynomialMod2Decode8_wrapper(struct CryptoPP::PolynomialMod2* _this, struct CryptoPP::BufferedTransformation* arg_0, uint64_t arg_1)
        {
           CryptoPP__PolynomialMod2Decode8_user(_this, arg_0, arg_1, CryptoPP__PolynomialMod2Decode8_next);
        };
        static void CryptoPP__PolynomialMod2Decode9_wrapper(struct CryptoPP::PolynomialMod2* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__PolynomialMod2Decode9_user(_this, arg_0, arg_1, CryptoPP__PolynomialMod2Decode9_next);
        };
        static int64_t CryptoPP__PolynomialMod2Degree10_wrapper(struct CryptoPP::PolynomialMod2* _this)
        {
           return CryptoPP__PolynomialMod2Degree10_user(_this, CryptoPP__PolynomialMod2Degree10_next);
        };
        static void CryptoPP__PolynomialMod2Divide11_wrapper(struct CryptoPP::PolynomialMod2* arg_0, struct CryptoPP::PolynomialMod2* arg_1, struct CryptoPP::PolynomialMod2* arg_2, struct CryptoPP::PolynomialMod2* arg_3)
        {
           CryptoPP__PolynomialMod2Divide11_user(arg_0, arg_1, arg_2, arg_3, CryptoPP__PolynomialMod2Divide11_next);
        };
        static struct CryptoPP::PolynomialMod2* CryptoPP__PolynomialMod2DividedBy12_wrapper(struct CryptoPP::PolynomialMod2* _this, short retstr, struct CryptoPP::PolynomialMod2* arg_0)
        {
           return CryptoPP__PolynomialMod2DividedBy12_user(_this, retstr, arg_0, CryptoPP__PolynomialMod2DividedBy12_next);
        };
        static struct CryptoPP::PolynomialMod2* CryptoPP__PolynomialMod2Doubled13_wrapper(struct CryptoPP::PolynomialMod2* _this, short retstr)
        {
           return CryptoPP__PolynomialMod2Doubled13_user(_this, retstr, CryptoPP__PolynomialMod2Doubled13_next);
        };
        static void CryptoPP__PolynomialMod2Encode14_wrapper(struct CryptoPP::PolynomialMod2* _this, struct CryptoPP::BufferedTransformation* arg_0, uint64_t arg_1)
        {
           CryptoPP__PolynomialMod2Encode14_user(_this, arg_0, arg_1, CryptoPP__PolynomialMod2Encode14_next);
        };
        static void CryptoPP__PolynomialMod2Encode15_wrapper(struct CryptoPP::PolynomialMod2* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__PolynomialMod2Encode15_user(_this, arg_0, arg_1, CryptoPP__PolynomialMod2Encode15_next);
        };
        static bool CryptoPP__PolynomialMod2Equals16_wrapper(struct CryptoPP::PolynomialMod2* _this, struct CryptoPP::PolynomialMod2* arg_0)
        {
           return CryptoPP__PolynomialMod2Equals16_user(_this, arg_0, CryptoPP__PolynomialMod2Equals16_next);
        };
        static struct CryptoPP::PolynomialMod2* CryptoPP__PolynomialMod2Gcd17_wrapper(short retstr, struct CryptoPP::PolynomialMod2* arg_0, struct CryptoPP::PolynomialMod2* arg_1)
        {
           return CryptoPP__PolynomialMod2Gcd17_user(retstr, arg_0, arg_1, CryptoPP__PolynomialMod2Gcd17_next);
        };
        static bool CryptoPP__PolynomialMod2GetBit18_wrapper(struct CryptoPP::PolynomialMod2* _this, uint64_t arg_0)
        {
           return CryptoPP__PolynomialMod2GetBit18_user(_this, arg_0, CryptoPP__PolynomialMod2GetBit18_next);
        };
        static uint8_t CryptoPP__PolynomialMod2GetByte19_wrapper(struct CryptoPP::PolynomialMod2* _this, uint64_t arg_0)
        {
           return CryptoPP__PolynomialMod2GetByte19_user(_this, arg_0, CryptoPP__PolynomialMod2GetByte19_next);
        };
        static int64_t CryptoPP__PolynomialMod2GetCoefficient20_wrapper(struct CryptoPP::PolynomialMod2* _this, uint64_t arg_0)
        {
           return CryptoPP__PolynomialMod2GetCoefficient20_user(_this, arg_0, CryptoPP__PolynomialMod2GetCoefficient20_next);
        };
        static struct CryptoPP::PolynomialMod2* CryptoPP__PolynomialMod2InverseMod21_wrapper(struct CryptoPP::PolynomialMod2* _this, short retstr, struct CryptoPP::PolynomialMod2* arg_0)
        {
           return CryptoPP__PolynomialMod2InverseMod21_user(_this, retstr, arg_0, CryptoPP__PolynomialMod2InverseMod21_next);
        };
        static bool CryptoPP__PolynomialMod2IsIrreducible22_wrapper(struct CryptoPP::PolynomialMod2* _this)
        {
           return CryptoPP__PolynomialMod2IsIrreducible22_user(_this, CryptoPP__PolynomialMod2IsIrreducible22_next);
        };
        static bool CryptoPP__PolynomialMod2IsUnit23_wrapper(struct CryptoPP::PolynomialMod2* _this)
        {
           return CryptoPP__PolynomialMod2IsUnit23_user(_this, CryptoPP__PolynomialMod2IsUnit23_next);
        };
        static bool CryptoPP__PolynomialMod2IsZero24_wrapper(struct CryptoPP::PolynomialMod2* _this)
        {
           return CryptoPP__PolynomialMod2IsZero24_user(_this, CryptoPP__PolynomialMod2IsZero24_next);
        };
        static struct CryptoPP::PolynomialMod2* CryptoPP__PolynomialMod2Minus25_wrapper(struct CryptoPP::PolynomialMod2* _this, short retstr, struct CryptoPP::PolynomialMod2* arg_0)
        {
           return CryptoPP__PolynomialMod2Minus25_user(_this, retstr, arg_0, CryptoPP__PolynomialMod2Minus25_next);
        };
        static struct CryptoPP::PolynomialMod2* CryptoPP__PolynomialMod2Modulo26_wrapper(struct CryptoPP::PolynomialMod2* _this, short retstr, struct CryptoPP::PolynomialMod2* arg_0)
        {
           return CryptoPP__PolynomialMod2Modulo26_user(_this, retstr, arg_0, CryptoPP__PolynomialMod2Modulo26_next);
        };
        static struct CryptoPP::PolynomialMod2* CryptoPP__PolynomialMod2Monomial27_wrapper(short retstr, struct CryptoPP::PolynomialMod2* arg_0)
        {
           return CryptoPP__PolynomialMod2Monomial27_user(retstr, arg_0, CryptoPP__PolynomialMod2Monomial27_next);
        };
        static struct CryptoPP::PolynomialMod2* CryptoPP__PolynomialMod2MultiplicativeInverse28_wrapper(struct CryptoPP::PolynomialMod2* _this, short retstr)
        {
           return CryptoPP__PolynomialMod2MultiplicativeInverse28_user(_this, retstr, CryptoPP__PolynomialMod2MultiplicativeInverse28_next);
        };
        static struct CryptoPP::PolynomialMod2* CryptoPP__PolynomialMod2One29_wrapper()
        {
           return CryptoPP__PolynomialMod2One29_user(CryptoPP__PolynomialMod2One29_next);
        };
        static unsigned int CryptoPP__PolynomialMod2Parity30_wrapper(struct CryptoPP::PolynomialMod2* _this)
        {
           return CryptoPP__PolynomialMod2Parity30_user(_this, CryptoPP__PolynomialMod2Parity30_next);
        };
        static struct CryptoPP::PolynomialMod2* CryptoPP__PolynomialMod2Pentanomial31_wrapper(struct CryptoPP::PolynomialMod2* retstr, uint64_t arg_0, uint64_t arg_1, uint64_t arg_2, uint64_t arg_3, uint64_t arg_4)
        {
           return CryptoPP__PolynomialMod2Pentanomial31_user(retstr, arg_0, arg_1, arg_2, arg_3, arg_4, CryptoPP__PolynomialMod2Pentanomial31_next);
        };
        static struct CryptoPP::PolynomialMod2* CryptoPP__PolynomialMod2Plus32_wrapper(struct CryptoPP::PolynomialMod2* _this, short retstr, struct CryptoPP::PolynomialMod2* arg_0)
        {
           return CryptoPP__PolynomialMod2Plus32_user(_this, retstr, arg_0, CryptoPP__PolynomialMod2Plus32_next);
        };
        static int64_t CryptoPP__PolynomialMod2ctor_PolynomialMod233_wrapper(struct CryptoPP::PolynomialMod2* _this, struct CryptoPP::BufferedTransformation* arg_0, uint64_t arg_1)
        {
           return CryptoPP__PolynomialMod2ctor_PolynomialMod233_user(_this, arg_0, arg_1, CryptoPP__PolynomialMod2ctor_PolynomialMod233_next);
        };
        static int64_t CryptoPP__PolynomialMod2ctor_PolynomialMod234_wrapper(struct CryptoPP::PolynomialMod2* _this, struct CryptoPP::PolynomialMod2* arg_0)
        {
           return CryptoPP__PolynomialMod2ctor_PolynomialMod234_user(_this, arg_0, CryptoPP__PolynomialMod2ctor_PolynomialMod234_next);
        };
        static int64_t CryptoPP__PolynomialMod2ctor_PolynomialMod235_wrapper(struct CryptoPP::PolynomialMod2* _this, struct CryptoPP::RandomNumberGenerator* arg_0, uint64_t arg_1)
        {
           return CryptoPP__PolynomialMod2ctor_PolynomialMod235_user(_this, arg_0, arg_1, CryptoPP__PolynomialMod2ctor_PolynomialMod235_next);
        };
        static int64_t CryptoPP__PolynomialMod2ctor_PolynomialMod236_wrapper(struct CryptoPP::PolynomialMod2* _this, uint64_t arg_0, uint64_t arg_1)
        {
           return CryptoPP__PolynomialMod2ctor_PolynomialMod236_user(_this, arg_0, arg_1, CryptoPP__PolynomialMod2ctor_PolynomialMod236_next);
        };
        static void CryptoPP__PolynomialMod2ctor_PolynomialMod237_wrapper(void* arg_0)
        {
           CryptoPP__PolynomialMod2ctor_PolynomialMod237_user(arg_0, CryptoPP__PolynomialMod2ctor_PolynomialMod237_next);
        };
        static void CryptoPP__PolynomialMod2Randomize38_wrapper(struct CryptoPP::PolynomialMod2* _this, struct CryptoPP::RandomNumberGenerator* arg_0, uint64_t arg_1)
        {
           CryptoPP__PolynomialMod2Randomize38_user(_this, arg_0, arg_1, CryptoPP__PolynomialMod2Randomize38_next);
        };
        static void CryptoPP__PolynomialMod2SetBit39_wrapper(struct CryptoPP::PolynomialMod2* _this, uint64_t arg_0, int arg_1)
        {
           CryptoPP__PolynomialMod2SetBit39_user(_this, arg_0, arg_1, CryptoPP__PolynomialMod2SetBit39_next);
        };
        static void CryptoPP__PolynomialMod2SetByte40_wrapper(struct CryptoPP::PolynomialMod2* _this, uint64_t arg_0, uint8_t arg_1)
        {
           CryptoPP__PolynomialMod2SetByte40_user(_this, arg_0, arg_1, CryptoPP__PolynomialMod2SetByte40_next);
        };
        static void CryptoPP__PolynomialMod2SetCoefficient41_wrapper(struct CryptoPP::PolynomialMod2* _this, uint64_t arg_0, int arg_1)
        {
           CryptoPP__PolynomialMod2SetCoefficient41_user(_this, arg_0, arg_1, CryptoPP__PolynomialMod2SetCoefficient41_next);
        };
        static struct CryptoPP::PolynomialMod2* CryptoPP__PolynomialMod2Squared42_wrapper(struct CryptoPP::PolynomialMod2* _this, short retstr)
        {
           return CryptoPP__PolynomialMod2Squared42_user(_this, retstr, CryptoPP__PolynomialMod2Squared42_next);
        };
        static struct CryptoPP::PolynomialMod2* CryptoPP__PolynomialMod2Times43_wrapper(struct CryptoPP::PolynomialMod2* _this, short retstr, struct CryptoPP::PolynomialMod2* arg_0)
        {
           return CryptoPP__PolynomialMod2Times43_user(_this, retstr, arg_0, CryptoPP__PolynomialMod2Times43_next);
        };
        static struct CryptoPP::PolynomialMod2* CryptoPP__PolynomialMod2Trinomial44_wrapper(short retstr, struct CryptoPP::PolynomialMod2* arg_0, uint64_t arg_1, uint64_t arg_2)
        {
           return CryptoPP__PolynomialMod2Trinomial44_user(retstr, arg_0, arg_1, arg_2, CryptoPP__PolynomialMod2Trinomial44_next);
        };
        static unsigned int CryptoPP__PolynomialMod2WordCount45_wrapper(struct CryptoPP::PolynomialMod2* _this)
        {
           return CryptoPP__PolynomialMod2WordCount45_user(_this, CryptoPP__PolynomialMod2WordCount45_next);
        };
        static struct CryptoPP::PolynomialMod2* CryptoPP__PolynomialMod2Xor46_wrapper(struct CryptoPP::PolynomialMod2* _this, short retstr, struct CryptoPP::PolynomialMod2* arg_0)
        {
           return CryptoPP__PolynomialMod2Xor46_user(_this, retstr, arg_0, CryptoPP__PolynomialMod2Xor46_next);
        };
        static struct CryptoPP::PolynomialMod2* CryptoPP__PolynomialMod2Zero47_wrapper()
        {
           return CryptoPP__PolynomialMod2Zero47_user(CryptoPP__PolynomialMod2Zero47_next);
        };
        static void CryptoPP__PolynomialMod2swap48_wrapper(struct CryptoPP::PolynomialMod2* _this, struct CryptoPP::PolynomialMod2* arg_0)
        {
           CryptoPP__PolynomialMod2swap48_user(_this, arg_0, CryptoPP__PolynomialMod2swap48_next);
        };
        static void CryptoPP__PolynomialMod2dtor_PolynomialMod249_wrapper(void* arg_0)
        {
           CryptoPP__PolynomialMod2dtor_PolynomialMod249_user(arg_0, CryptoPP__PolynomialMod2dtor_PolynomialMod249_next);
        };
        
        static int64_t CryptoPP__PolynomialMod2__DivideByZeroctor_DivideByZero1_wrapper(struct CryptoPP::PolynomialMod2::DivideByZero* _this, struct CryptoPP::PolynomialMod2::DivideByZero* arg_0)
        {
           return CryptoPP__PolynomialMod2__DivideByZeroctor_DivideByZero1_user(_this, arg_0, CryptoPP__PolynomialMod2__DivideByZeroctor_DivideByZero1_next);
        };
        static int64_t CryptoPP__PolynomialMod2__DivideByZeroctor_DivideByZero2_wrapper(struct CryptoPP::PolynomialMod2::DivideByZero* _this)
        {
           return CryptoPP__PolynomialMod2__DivideByZeroctor_DivideByZero2_user(_this, CryptoPP__PolynomialMod2__DivideByZeroctor_DivideByZero2_next);
        };
        static int64_t CryptoPP__PolynomialMod2__DivideByZerodtor_DivideByZero3_wrapper(struct CryptoPP::PolynomialMod2::DivideByZero* _this)
        {
           return CryptoPP__PolynomialMod2__DivideByZerodtor_DivideByZero3_user(_this, CryptoPP__PolynomialMod2__DivideByZerodtor_DivideByZero3_next);
        };
        
        static int64_t CryptoPP__EC2NPointctor_EC2NPoint1_wrapper(struct CryptoPP::EC2NPoint* _this, struct CryptoPP::EC2NPoint* arg_0)
        {
           return CryptoPP__EC2NPointctor_EC2NPoint1_user(_this, arg_0, CryptoPP__EC2NPointctor_EC2NPoint1_next);
        };
        static int64_t CryptoPP__EC2NPointctor_EC2NPoint2_wrapper(struct CryptoPP::EC2NPoint* _this)
        {
           return CryptoPP__EC2NPointctor_EC2NPoint2_user(_this, CryptoPP__EC2NPointctor_EC2NPoint2_next);
        };
        static int64_t CryptoPP__EC2NPointdtor_EC2NPoint3_wrapper(struct CryptoPP::EC2NPoint* _this)
        {
           return CryptoPP__EC2NPointdtor_EC2NPoint3_user(_this, CryptoPP__EC2NPointdtor_EC2NPoint3_next);
        };
        
        static unsigned int CryptoPP__PK_MessageAccumulatorDigestSize1_wrapper(struct CryptoPP::PK_MessageAccumulator* _this)
        {
           return CryptoPP__PK_MessageAccumulatorDigestSize1_user(_this, CryptoPP__PK_MessageAccumulatorDigestSize1_next);
        };
        static int64_t CryptoPP__PK_MessageAccumulatorctor_PK_MessageAccumulator2_wrapper(struct CryptoPP::PK_MessageAccumulator* _this)
        {
           return CryptoPP__PK_MessageAccumulatorctor_PK_MessageAccumulator2_user(_this, CryptoPP__PK_MessageAccumulatorctor_PK_MessageAccumulator2_next);
        };
        static void CryptoPP__PK_MessageAccumulatorTruncatedFinal3_wrapper(struct CryptoPP::PK_MessageAccumulator* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__PK_MessageAccumulatorTruncatedFinal3_user(_this, arg_0, arg_1, CryptoPP__PK_MessageAccumulatorTruncatedFinal3_next);
        };
        static int64_t CryptoPP__PK_MessageAccumulatordtor_PK_MessageAccumulator4_wrapper(struct CryptoPP::PK_MessageAccumulator* _this)
        {
           return CryptoPP__PK_MessageAccumulatordtor_PK_MessageAccumulator4_user(_this, CryptoPP__PK_MessageAccumulatordtor_PK_MessageAccumulator4_next);
        };
        
        static int64_t CryptoPP__PK_MessageAccumulatorBasector_PK_MessageAccumulatorBase1_wrapper(struct CryptoPP::PK_MessageAccumulatorBase* _this)
        {
           return CryptoPP__PK_MessageAccumulatorBasector_PK_MessageAccumulatorBase1_user(_this, CryptoPP__PK_MessageAccumulatorBasector_PK_MessageAccumulatorBase1_next);
        };
        static void CryptoPP__PK_MessageAccumulatorBaseUpdate2_wrapper(struct CryptoPP::PK_MessageAccumulatorBase* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__PK_MessageAccumulatorBaseUpdate2_user(_this, arg_0, arg_1, CryptoPP__PK_MessageAccumulatorBaseUpdate2_next);
        };
        static int64_t CryptoPP__PK_MessageAccumulatorBasedtor_PK_MessageAccumulatorBase3_wrapper(struct CryptoPP::PK_MessageAccumulatorBase* _this)
        {
           return CryptoPP__PK_MessageAccumulatorBasedtor_PK_MessageAccumulatorBase3_user(_this, CryptoPP__PK_MessageAccumulatorBasedtor_PK_MessageAccumulatorBase3_next);
        };
        
        static void CryptoPP__ClonableImplctor_ClonableImpl2_wrapper(struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::Rijndael::Enc>* _this, struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::Rijndael::Enc>* __that)
        {
           CryptoPP__ClonableImplctor_ClonableImpl2_user(_this, __that, CryptoPP__ClonableImplctor_ClonableImpl2_next);
        };
        static void CryptoPP__ClonableImplctor_ClonableImpl4_wrapper(struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::Rijndael::Enc>* _this)
        {
           CryptoPP__ClonableImplctor_ClonableImpl4_user(_this, CryptoPP__ClonableImplctor_ClonableImpl4_next);
        };
        static struct CryptoPP::Clonable* CryptoPP__ClonableImplClone6_wrapper(struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::Rijndael::Enc>* _this)
        {
           return CryptoPP__ClonableImplClone6_user(_this, CryptoPP__ClonableImplClone6_next);
        };
        static void CryptoPP__ClonableImpldtor_ClonableImpl8_wrapper(struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::Rijndael::Enc>* _this)
        {
           CryptoPP__ClonableImpldtor_ClonableImpl8_user(_this, CryptoPP__ClonableImpldtor_ClonableImpl8_next);
        };
        
        static void CryptoPP__BlockCipherFinalctor_BlockCipherFinal2_wrapper(struct CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>* _this, struct CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>* __that)
        {
           CryptoPP__BlockCipherFinalctor_BlockCipherFinal2_user(_this, __that, CryptoPP__BlockCipherFinalctor_BlockCipherFinal2_next);
        };
        static void CryptoPP__BlockCipherFinalctor_BlockCipherFinal4_wrapper(struct CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>* _this)
        {
           CryptoPP__BlockCipherFinalctor_BlockCipherFinal4_user(_this, CryptoPP__BlockCipherFinalctor_BlockCipherFinal4_next);
        };
        static bool CryptoPP__BlockCipherFinalIsForwardTransformation6_wrapper(struct CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>* _this)
        {
           return CryptoPP__BlockCipherFinalIsForwardTransformation6_user(_this, CryptoPP__BlockCipherFinalIsForwardTransformation6_next);
        };
        static void CryptoPP__BlockCipherFinaldtor_BlockCipherFinal11_wrapper(struct CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>* _this)
        {
           CryptoPP__BlockCipherFinaldtor_BlockCipherFinal11_user(_this, CryptoPP__BlockCipherFinaldtor_BlockCipherFinal11_next);
        };
        
        static void CryptoPP__CBC_Encryptionctor_CBC_Encryption2_wrapper(struct CryptoPP::CBC_Encryption* _this)
        {
           CryptoPP__CBC_Encryptionctor_CBC_Encryption2_user(_this, CryptoPP__CBC_Encryptionctor_CBC_Encryption2_next);
        };
        static void CryptoPP__CBC_EncryptionProcessBlocks3_wrapper(struct CryptoPP::CBC_Encryption* _this, uint8_t* arg_0, uint8_t* arg_1, uint64_t arg_2)
        {
           CryptoPP__CBC_EncryptionProcessBlocks3_user(_this, arg_0, arg_1, arg_2, CryptoPP__CBC_EncryptionProcessBlocks3_next);
        };
        static void CryptoPP__CBC_Encryptiondtor_CBC_Encryption5_wrapper(struct CryptoPP::CBC_Encryption* _this)
        {
           CryptoPP__CBC_Encryptiondtor_CBC_Encryption5_user(_this, CryptoPP__CBC_Encryptiondtor_CBC_Encryption5_next);
        };
        
        static void CryptoPP__CipherModeFinalTemplate_CipherHolderctor_CipherModeFinalTemplate_CipherHolder2_wrapper(struct CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::CBC_Encryption>* _this)
        {
           CryptoPP__CipherModeFinalTemplate_CipherHolderctor_CipherModeFinalTemplate_CipherHolder2_user(_this, CryptoPP__CipherModeFinalTemplate_CipherHolderctor_CipherModeFinalTemplate_CipherHolder2_next);
        };
        static struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* CryptoPP__CipherModeFinalTemplate_CipherHolderStaticAlgorithmName4_wrapper(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* result)
        {
           return CryptoPP__CipherModeFinalTemplate_CipherHolderStaticAlgorithmName4_user(result, CryptoPP__CipherModeFinalTemplate_CipherHolderStaticAlgorithmName4_next);
        };
        static void CryptoPP__CipherModeFinalTemplate_CipherHolderdtor_CipherModeFinalTemplate_CipherHolder9_wrapper(struct CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::CBC_Encryption>* _this)
        {
           CryptoPP__CipherModeFinalTemplate_CipherHolderdtor_CipherModeFinalTemplate_CipherHolder9_user(_this, CryptoPP__CipherModeFinalTemplate_CipherHolderdtor_CipherModeFinalTemplate_CipherHolder9_next);
        };
        
        static bool CryptoPP__DSAGeneratePrimes1_wrapper(uint8_t* b, unsigned int arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2, unsigned int arg_3, struct CryptoPP::Integer* arg_4, bool arg_5)
        {
           return CryptoPP__DSAGeneratePrimes1_user(b, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, CryptoPP__DSAGeneratePrimes1_next);
        };
        static bool CryptoPP__DSAIsValidPrimeLength2_wrapper(unsigned int arg_0)
        {
           return CryptoPP__DSAIsValidPrimeLength2_user(arg_0, CryptoPP__DSAIsValidPrimeLength2_next);
        };
        static char* CryptoPP__DSAStaticAlgorithmName3_wrapper()
        {
           return CryptoPP__DSAStaticAlgorithmName3_user(CryptoPP__DSAStaticAlgorithmName3_next);
        };
        
        static void CryptoPP__DL_GroupParameters_IntegerBasedAssignFrom1_wrapper(struct CryptoPP::DL_GroupParameters_IntegerBased* _this, struct CryptoPP::NameValuePairs* arg_0)
        {
           CryptoPP__DL_GroupParameters_IntegerBasedAssignFrom1_user(_this, arg_0, CryptoPP__DL_GroupParameters_IntegerBasedAssignFrom1_next);
        };
        static void CryptoPP__DL_GroupParameters_IntegerBasedBERDecode2_wrapper(struct CryptoPP::DL_GroupParameters_IntegerBased* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           CryptoPP__DL_GroupParameters_IntegerBasedBERDecode2_user(_this, arg_0, CryptoPP__DL_GroupParameters_IntegerBasedBERDecode2_next);
        };
        static struct CryptoPP::Integer* CryptoPP__DL_GroupParameters_IntegerBasedComputeGroupOrder3_wrapper(struct CryptoPP::DL_GroupParameters_IntegerBased* _this, short retstr, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__DL_GroupParameters_IntegerBasedComputeGroupOrder3_user(_this, retstr, arg_0, CryptoPP__DL_GroupParameters_IntegerBasedComputeGroupOrder3_next);
        };
        static struct CryptoPP::Integer* CryptoPP__DL_GroupParameters_IntegerBasedConvertElementToInteger4_wrapper(struct CryptoPP::DL_GroupParameters_IntegerBased* _this, short retstr, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__DL_GroupParameters_IntegerBasedConvertElementToInteger4_user(_this, retstr, arg_0, CryptoPP__DL_GroupParameters_IntegerBasedConvertElementToInteger4_next);
        };
        static void CryptoPP__DL_GroupParameters_IntegerBasedDEREncode5_wrapper(struct CryptoPP::DL_GroupParameters_IntegerBased* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           CryptoPP__DL_GroupParameters_IntegerBasedDEREncode5_user(_this, arg_0, CryptoPP__DL_GroupParameters_IntegerBasedDEREncode5_next);
        };
        static int64_t CryptoPP__DL_GroupParameters_IntegerBasedctor_DL_GroupParameters_IntegerBased6_wrapper(struct CryptoPP::DL_GroupParameters_IntegerBased* _this, struct CryptoPP::DL_GroupParameters_IntegerBased* arg_0)
        {
           return CryptoPP__DL_GroupParameters_IntegerBasedctor_DL_GroupParameters_IntegerBased6_user(_this, arg_0, CryptoPP__DL_GroupParameters_IntegerBasedctor_DL_GroupParameters_IntegerBased6_next);
        };
        static int64_t CryptoPP__DL_GroupParameters_IntegerBasedctor_DL_GroupParameters_IntegerBased7_wrapper(struct CryptoPP::DL_GroupParameters_IntegerBased* _this)
        {
           return CryptoPP__DL_GroupParameters_IntegerBasedctor_DL_GroupParameters_IntegerBased7_user(_this, CryptoPP__DL_GroupParameters_IntegerBasedctor_DL_GroupParameters_IntegerBased7_next);
        };
        static struct CryptoPP::Integer* CryptoPP__DL_GroupParameters_IntegerBasedDecodeElement8_wrapper(struct CryptoPP::DL_GroupParameters_IntegerBased* _this, short retstr, struct CryptoPP::Integer* arg_0, uint8_t* arg_1)
        {
           return CryptoPP__DL_GroupParameters_IntegerBasedDecodeElement8_user(_this, retstr, arg_0, arg_1, CryptoPP__DL_GroupParameters_IntegerBasedDecodeElement8_next);
        };
        static void CryptoPP__DL_GroupParameters_IntegerBasedEncodeElement9_wrapper(struct CryptoPP::DL_GroupParameters_IntegerBased* _this, bool arg_0, struct CryptoPP::Integer* arg_1, uint8_t* arg_2)
        {
           CryptoPP__DL_GroupParameters_IntegerBasedEncodeElement9_user(_this, arg_0, arg_1, arg_2, CryptoPP__DL_GroupParameters_IntegerBasedEncodeElement9_next);
        };
        static bool CryptoPP__DL_GroupParameters_IntegerBasedFastSubgroupCheckAvailable10_wrapper(struct CryptoPP::DL_GroupParameters_IntegerBased* _this)
        {
           return CryptoPP__DL_GroupParameters_IntegerBasedFastSubgroupCheckAvailable10_user(_this, CryptoPP__DL_GroupParameters_IntegerBasedFastSubgroupCheckAvailable10_next);
        };
        static void CryptoPP__DL_GroupParameters_IntegerBasedGenerateRandom11_wrapper(struct CryptoPP::DL_GroupParameters_IntegerBased* _this, struct CryptoPP::RandomNumberGenerator* arg_0, struct CryptoPP::NameValuePairs* arg_1)
        {
           CryptoPP__DL_GroupParameters_IntegerBasedGenerateRandom11_user(_this, arg_0, arg_1, CryptoPP__DL_GroupParameters_IntegerBasedGenerateRandom11_next);
        };
        static struct CryptoPP::OID* CryptoPP__DL_GroupParameters_IntegerBasedGetAlgorithmID12_wrapper(struct CryptoPP::DL_GroupParameters_IntegerBased* _this, short retstr)
        {
           return CryptoPP__DL_GroupParameters_IntegerBasedGetAlgorithmID12_user(_this, retstr, CryptoPP__DL_GroupParameters_IntegerBasedGetAlgorithmID12_next);
        };
        static unsigned int CryptoPP__DL_GroupParameters_IntegerBasedGetDefaultSubgroupOrderSize13_wrapper(struct CryptoPP::DL_GroupParameters_IntegerBased* _this, unsigned int arg_0)
        {
           return CryptoPP__DL_GroupParameters_IntegerBasedGetDefaultSubgroupOrderSize13_user(_this, arg_0, CryptoPP__DL_GroupParameters_IntegerBasedGetDefaultSubgroupOrderSize13_next);
        };
        static unsigned int CryptoPP__DL_GroupParameters_IntegerBasedGetEncodedElementSize14_wrapper(struct CryptoPP::DL_GroupParameters_IntegerBased* _this, bool arg_0)
        {
           return CryptoPP__DL_GroupParameters_IntegerBasedGetEncodedElementSize14_user(_this, arg_0, CryptoPP__DL_GroupParameters_IntegerBasedGetEncodedElementSize14_next);
        };
        static struct CryptoPP::Integer* CryptoPP__DL_GroupParameters_IntegerBasedGetGroupOrder15_wrapper(struct CryptoPP::DL_GroupParameters_IntegerBased* _this, short retstr)
        {
           return CryptoPP__DL_GroupParameters_IntegerBasedGetGroupOrder15_user(_this, retstr, CryptoPP__DL_GroupParameters_IntegerBasedGetGroupOrder15_next);
        };
        static struct CryptoPP::Integer* CryptoPP__DL_GroupParameters_IntegerBasedGetMaxExponent16_wrapper(struct CryptoPP::DL_GroupParameters_IntegerBased* _this, short retstr)
        {
           return CryptoPP__DL_GroupParameters_IntegerBasedGetMaxExponent16_user(_this, retstr, CryptoPP__DL_GroupParameters_IntegerBasedGetMaxExponent16_next);
        };
        static struct CryptoPP::Integer* CryptoPP__DL_GroupParameters_IntegerBasedGetSubgroupOrder17_wrapper(struct CryptoPP::DL_GroupParameters_IntegerBased* _this)
        {
           return CryptoPP__DL_GroupParameters_IntegerBasedGetSubgroupOrder17_user(_this, CryptoPP__DL_GroupParameters_IntegerBasedGetSubgroupOrder17_next);
        };
        static bool CryptoPP__DL_GroupParameters_IntegerBasedGetVoidValue18_wrapper(struct CryptoPP::DL_GroupParameters_IntegerBased* _this, char* arg_0, struct type_info* arg_1, void* arg_2)
        {
           return CryptoPP__DL_GroupParameters_IntegerBasedGetVoidValue18_user(_this, arg_0, arg_1, arg_2, CryptoPP__DL_GroupParameters_IntegerBasedGetVoidValue18_next);
        };
        static void CryptoPP__DL_GroupParameters_IntegerBasedInitialize19_wrapper(struct CryptoPP::DL_GroupParameters_IntegerBased* _this, struct CryptoPP::DL_GroupParameters_IntegerBased* arg_0)
        {
           CryptoPP__DL_GroupParameters_IntegerBasedInitialize19_user(_this, arg_0, CryptoPP__DL_GroupParameters_IntegerBasedInitialize19_next);
        };
        static void CryptoPP__DL_GroupParameters_IntegerBasedInitialize20_wrapper(struct CryptoPP::DL_GroupParameters_IntegerBased* _this, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1)
        {
           CryptoPP__DL_GroupParameters_IntegerBasedInitialize20_user(_this, arg_0, arg_1, CryptoPP__DL_GroupParameters_IntegerBasedInitialize20_next);
        };
        static void CryptoPP__DL_GroupParameters_IntegerBasedInitialize21_wrapper(struct CryptoPP::DL_GroupParameters_IntegerBased* _this, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2)
        {
           CryptoPP__DL_GroupParameters_IntegerBasedInitialize21_user(_this, arg_0, arg_1, arg_2, CryptoPP__DL_GroupParameters_IntegerBasedInitialize21_next);
        };
        static void CryptoPP__DL_GroupParameters_IntegerBasedSetSubgroupOrder22_wrapper(struct CryptoPP::DL_GroupParameters_IntegerBased* _this, struct CryptoPP::Integer* arg_0)
        {
           CryptoPP__DL_GroupParameters_IntegerBasedSetSubgroupOrder22_user(_this, arg_0, CryptoPP__DL_GroupParameters_IntegerBasedSetSubgroupOrder22_next);
        };
        static bool CryptoPP__DL_GroupParameters_IntegerBasedValidateGroup23_wrapper(struct CryptoPP::DL_GroupParameters_IntegerBased* _this, struct CryptoPP::RandomNumberGenerator* arg_0, unsigned int arg_1)
        {
           return CryptoPP__DL_GroupParameters_IntegerBasedValidateGroup23_user(_this, arg_0, arg_1, CryptoPP__DL_GroupParameters_IntegerBasedValidateGroup23_next);
        };
        static int64_t CryptoPP__DL_GroupParameters_IntegerBaseddtor_DL_GroupParameters_IntegerBased24_wrapper(struct CryptoPP::DL_GroupParameters_IntegerBased* _this)
        {
           return CryptoPP__DL_GroupParameters_IntegerBaseddtor_DL_GroupParameters_IntegerBased24_user(_this, CryptoPP__DL_GroupParameters_IntegerBaseddtor_DL_GroupParameters_IntegerBased24_next);
        };
        
        static struct CryptoPP::Integer* CryptoPP__MontgomeryRepresentationCascadeExponentiate1_wrapper(struct CryptoPP::MontgomeryRepresentation* _this, struct CryptoPP::Integer* retstr, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2, struct CryptoPP::Integer* arg_3)
        {
           return CryptoPP__MontgomeryRepresentationCascadeExponentiate1_user(_this, retstr, arg_0, arg_1, arg_2, arg_3, CryptoPP__MontgomeryRepresentationCascadeExponentiate1_next);
        };
        static struct CryptoPP::ModularArithmetic* CryptoPP__MontgomeryRepresentationClone2_wrapper(struct CryptoPP::MontgomeryRepresentation* _this)
        {
           return CryptoPP__MontgomeryRepresentationClone2_user(_this, CryptoPP__MontgomeryRepresentationClone2_next);
        };
        static struct CryptoPP::Integer* CryptoPP__MontgomeryRepresentationConvertIn3_wrapper(struct CryptoPP::MontgomeryRepresentation* _this, short retstr, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__MontgomeryRepresentationConvertIn3_user(_this, retstr, arg_0, CryptoPP__MontgomeryRepresentationConvertIn3_next);
        };
        static struct CryptoPP::Integer* CryptoPP__MontgomeryRepresentationConvertOut4_wrapper(struct CryptoPP::MontgomeryRepresentation* _this, short retstr, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__MontgomeryRepresentationConvertOut4_user(_this, retstr, arg_0, CryptoPP__MontgomeryRepresentationConvertOut4_next);
        };
        static bool CryptoPP__MontgomeryRepresentationIsMontgomeryRepresentation5_wrapper(struct CryptoPP::MontgomeryRepresentation* _this)
        {
           return CryptoPP__MontgomeryRepresentationIsMontgomeryRepresentation5_user(_this, CryptoPP__MontgomeryRepresentationIsMontgomeryRepresentation5_next);
        };
        static int64_t CryptoPP__MontgomeryRepresentationctor_MontgomeryRepresentation6_wrapper(struct CryptoPP::MontgomeryRepresentation* _this, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__MontgomeryRepresentationctor_MontgomeryRepresentation6_user(_this, arg_0, CryptoPP__MontgomeryRepresentationctor_MontgomeryRepresentation6_next);
        };
        static int64_t CryptoPP__MontgomeryRepresentationctor_MontgomeryRepresentation7_wrapper(struct CryptoPP::MontgomeryRepresentation* _this, struct CryptoPP::MontgomeryRepresentation* arg_0)
        {
           return CryptoPP__MontgomeryRepresentationctor_MontgomeryRepresentation7_user(_this, arg_0, CryptoPP__MontgomeryRepresentationctor_MontgomeryRepresentation7_next);
        };
        static struct CryptoPP::Integer* CryptoPP__MontgomeryRepresentationMultiplicativeIdentity8_wrapper(struct CryptoPP::MontgomeryRepresentation* _this)
        {
           return CryptoPP__MontgomeryRepresentationMultiplicativeIdentity8_user(_this, CryptoPP__MontgomeryRepresentationMultiplicativeIdentity8_next);
        };
        static struct CryptoPP::Integer* CryptoPP__MontgomeryRepresentationMultiplicativeInverse9_wrapper(struct CryptoPP::MontgomeryRepresentation* _this, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__MontgomeryRepresentationMultiplicativeInverse9_user(_this, arg_0, CryptoPP__MontgomeryRepresentationMultiplicativeInverse9_next);
        };
        static struct CryptoPP::Integer* CryptoPP__MontgomeryRepresentationMultiply10_wrapper(struct CryptoPP::MontgomeryRepresentation* _this, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1)
        {
           return CryptoPP__MontgomeryRepresentationMultiply10_user(_this, arg_0, arg_1, CryptoPP__MontgomeryRepresentationMultiply10_next);
        };
        static void CryptoPP__MontgomeryRepresentationSimultaneousExponentiate11_wrapper(struct CryptoPP::MontgomeryRepresentation* _this, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2, unsigned int arg_3)
        {
           CryptoPP__MontgomeryRepresentationSimultaneousExponentiate11_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__MontgomeryRepresentationSimultaneousExponentiate11_next);
        };
        static struct CryptoPP::Integer* CryptoPP__MontgomeryRepresentationSquare12_wrapper(struct CryptoPP::MontgomeryRepresentation* _this, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__MontgomeryRepresentationSquare12_user(_this, arg_0, CryptoPP__MontgomeryRepresentationSquare12_next);
        };
        static int64_t CryptoPP__MontgomeryRepresentationdtor_MontgomeryRepresentation13_wrapper(struct CryptoPP::MontgomeryRepresentation* _this)
        {
           return CryptoPP__MontgomeryRepresentationdtor_MontgomeryRepresentation13_user(_this, CryptoPP__MontgomeryRepresentationdtor_MontgomeryRepresentation13_next);
        };
        
        static struct CryptoPP::Integer* CryptoPP__ModExpPrecomputationBERDecodeElement1_wrapper(struct CryptoPP::ModExpPrecomputation* _this, short retstr, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__ModExpPrecomputationBERDecodeElement1_user(_this, retstr, arg_0, CryptoPP__ModExpPrecomputationBERDecodeElement1_next);
        };
        static struct CryptoPP::Integer* CryptoPP__ModExpPrecomputationConvertIn2_wrapper(struct CryptoPP::ModExpPrecomputation* _this, short retstr, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__ModExpPrecomputationConvertIn2_user(_this, retstr, arg_0, CryptoPP__ModExpPrecomputationConvertIn2_next);
        };
        static struct CryptoPP::Integer* CryptoPP__ModExpPrecomputationConvertOut3_wrapper(struct CryptoPP::ModExpPrecomputation* _this, short retstr, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__ModExpPrecomputationConvertOut3_user(_this, retstr, arg_0, CryptoPP__ModExpPrecomputationConvertOut3_next);
        };
        static void CryptoPP__ModExpPrecomputationDEREncodeElement4_wrapper(struct CryptoPP::ModExpPrecomputation* _this, struct CryptoPP::BufferedTransformation* arg_0, struct CryptoPP::Integer* arg_1)
        {
           CryptoPP__ModExpPrecomputationDEREncodeElement4_user(_this, arg_0, arg_1, CryptoPP__ModExpPrecomputationDEREncodeElement4_next);
        };
        static struct CryptoPP::Integer* CryptoPP__ModExpPrecomputationGetModulus5_wrapper(struct CryptoPP::ModExpPrecomputation* _this)
        {
           return CryptoPP__ModExpPrecomputationGetModulus5_user(_this, CryptoPP__ModExpPrecomputationGetModulus5_next);
        };
        static int64_t CryptoPP__ModExpPrecomputationctor_ModExpPrecomputation6_wrapper(struct CryptoPP::ModExpPrecomputation* _this, struct CryptoPP::ModExpPrecomputation* arg_0)
        {
           return CryptoPP__ModExpPrecomputationctor_ModExpPrecomputation6_user(_this, arg_0, CryptoPP__ModExpPrecomputationctor_ModExpPrecomputation6_next);
        };
        static int64_t CryptoPP__ModExpPrecomputationctor_ModExpPrecomputation7_wrapper(struct CryptoPP::ModExpPrecomputation* _this)
        {
           return CryptoPP__ModExpPrecomputationctor_ModExpPrecomputation7_user(_this, CryptoPP__ModExpPrecomputationctor_ModExpPrecomputation7_next);
        };
        static bool CryptoPP__ModExpPrecomputationNeedConversions8_wrapper(struct CryptoPP::ModExpPrecomputation* _this)
        {
           return CryptoPP__ModExpPrecomputationNeedConversions8_user(_this, CryptoPP__ModExpPrecomputationNeedConversions8_next);
        };
        static void CryptoPP__ModExpPrecomputationSetModulus9_wrapper(struct CryptoPP::ModExpPrecomputation* _this, struct CryptoPP::Integer* arg_0)
        {
           CryptoPP__ModExpPrecomputationSetModulus9_user(_this, arg_0, CryptoPP__ModExpPrecomputationSetModulus9_next);
        };
        static int64_t CryptoPP__ModExpPrecomputationdtor_ModExpPrecomputation10_wrapper(struct CryptoPP::ModExpPrecomputation* _this)
        {
           return CryptoPP__ModExpPrecomputationdtor_ModExpPrecomputation10_user(_this, CryptoPP__ModExpPrecomputationdtor_ModExpPrecomputation10_next);
        };
        
        static struct CryptoPP::Integer* CryptoPP__DL_GroupParameters_GFPCascadeExponentiate1_wrapper(struct CryptoPP::DL_GroupParameters_GFP* _this, struct CryptoPP::Integer* retstr, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2, struct CryptoPP::Integer* arg_3)
        {
           return CryptoPP__DL_GroupParameters_GFPCascadeExponentiate1_user(_this, retstr, arg_0, arg_1, arg_2, arg_3, CryptoPP__DL_GroupParameters_GFPCascadeExponentiate1_next);
        };
        static int64_t CryptoPP__DL_GroupParameters_GFPctor_DL_GroupParameters_GFP2_wrapper(struct CryptoPP::DL_GroupParameters_GFP* _this, struct CryptoPP::DL_GroupParameters_GFP* arg_0)
        {
           return CryptoPP__DL_GroupParameters_GFPctor_DL_GroupParameters_GFP2_user(_this, arg_0, CryptoPP__DL_GroupParameters_GFPctor_DL_GroupParameters_GFP2_next);
        };
        static int64_t CryptoPP__DL_GroupParameters_GFPctor_DL_GroupParameters_GFP3_wrapper(struct CryptoPP::DL_GroupParameters_GFP* _this)
        {
           return CryptoPP__DL_GroupParameters_GFPctor_DL_GroupParameters_GFP3_user(_this, CryptoPP__DL_GroupParameters_GFPctor_DL_GroupParameters_GFP3_next);
        };
        static int64_t CryptoPP__DL_GroupParameters_GFPGetFieldType4_wrapper(struct CryptoPP::DL_GroupParameters_GFP* _this)
        {
           return CryptoPP__DL_GroupParameters_GFPGetFieldType4_user(_this, CryptoPP__DL_GroupParameters_GFPGetFieldType4_next);
        };
        static bool CryptoPP__DL_GroupParameters_GFPGetVoidValue5_wrapper(struct CryptoPP::DL_GroupParameters_GFP* _this, char* arg_0, struct type_info* arg_1, void* arg_2)
        {
           return CryptoPP__DL_GroupParameters_GFPGetVoidValue5_user(_this, arg_0, arg_1, arg_2, CryptoPP__DL_GroupParameters_GFPGetVoidValue5_next);
        };
        static bool CryptoPP__DL_GroupParameters_GFPIsIdentity6_wrapper(struct CryptoPP::DL_GroupParameters_GFP* _this, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__DL_GroupParameters_GFPIsIdentity6_user(_this, arg_0, CryptoPP__DL_GroupParameters_GFPIsIdentity6_next);
        };
        static struct CryptoPP::Integer* CryptoPP__DL_GroupParameters_GFPMultiplyElements7_wrapper(struct CryptoPP::DL_GroupParameters_GFP* _this, short retstr, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1)
        {
           return CryptoPP__DL_GroupParameters_GFPMultiplyElements7_user(_this, retstr, arg_0, arg_1, CryptoPP__DL_GroupParameters_GFPMultiplyElements7_next);
        };
        static void CryptoPP__DL_GroupParameters_GFPSimultaneousExponentiate8_wrapper(struct CryptoPP::DL_GroupParameters_GFP* _this, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2, unsigned int arg_3)
        {
           CryptoPP__DL_GroupParameters_GFPSimultaneousExponentiate8_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__DL_GroupParameters_GFPSimultaneousExponentiate8_next);
        };
        static int64_t CryptoPP__DL_GroupParameters_GFPdtor_DL_GroupParameters_GFP9_wrapper(struct CryptoPP::DL_GroupParameters_GFP* _this)
        {
           return CryptoPP__DL_GroupParameters_GFPdtor_DL_GroupParameters_GFP9_user(_this, CryptoPP__DL_GroupParameters_GFPdtor_DL_GroupParameters_GFP9_next);
        };
        
        static int64_t CryptoPP__DL_GroupParameters_DSActor_DL_GroupParameters_DSA1_wrapper(struct CryptoPP::DL_GroupParameters_DSA* _this, struct CryptoPP::DL_GroupParameters_DSA* arg_0)
        {
           return CryptoPP__DL_GroupParameters_DSActor_DL_GroupParameters_DSA1_user(_this, arg_0, CryptoPP__DL_GroupParameters_DSActor_DL_GroupParameters_DSA1_next);
        };
        static int64_t CryptoPP__DL_GroupParameters_DSActor_DL_GroupParameters_DSA2_wrapper(struct CryptoPP::DL_GroupParameters_DSA* _this)
        {
           return CryptoPP__DL_GroupParameters_DSActor_DL_GroupParameters_DSA2_user(_this, CryptoPP__DL_GroupParameters_DSActor_DL_GroupParameters_DSA2_next);
        };
        static void CryptoPP__DL_GroupParameters_DSAGenerateRandom3_wrapper(struct CryptoPP::DL_GroupParameters_DSA* _this, struct CryptoPP::RandomNumberGenerator* arg_0, struct CryptoPP::NameValuePairs* arg_1)
        {
           CryptoPP__DL_GroupParameters_DSAGenerateRandom3_user(_this, arg_0, arg_1, CryptoPP__DL_GroupParameters_DSAGenerateRandom3_next);
        };
        static bool CryptoPP__DL_GroupParameters_DSAValidateGroup4_wrapper(struct CryptoPP::DL_GroupParameters_DSA* _this, struct CryptoPP::RandomNumberGenerator* arg_0, unsigned int arg_1)
        {
           return CryptoPP__DL_GroupParameters_DSAValidateGroup4_user(_this, arg_0, arg_1, CryptoPP__DL_GroupParameters_DSAValidateGroup4_next);
        };
        static int64_t CryptoPP__DL_GroupParameters_DSAdtor_DL_GroupParameters_DSA5_wrapper(struct CryptoPP::DL_GroupParameters_DSA* _this)
        {
           return CryptoPP__DL_GroupParameters_DSAdtor_DL_GroupParameters_DSA5_user(_this, CryptoPP__DL_GroupParameters_DSAdtor_DL_GroupParameters_DSA5_next);
        };
        
        static int64_t CryptoPP__AbstractGroupCascadeScalarMultiply1_wrapper(int64_t arg_0, struct CryptoPP::Integer* arg_1)
        {
           return CryptoPP__AbstractGroupCascadeScalarMultiply1_user(arg_0, arg_1, CryptoPP__AbstractGroupCascadeScalarMultiply1_next);
        };
        
        static int64_t CryptoPP__AbstractGroupCascadeScalarMultiply1_wrapper(int64_t arg_0, struct CryptoPP::Integer* arg_1)
        {
           return CryptoPP__AbstractGroupCascadeScalarMultiply1_user(arg_0, arg_1, CryptoPP__AbstractGroupCascadeScalarMultiply1_next);
        };
        
        static int64_t CryptoPP__EuclideanDomainOfDivisionAlgorithm1_wrapper(struct CryptoPP::PolynomialMod2* arg_0)
        {
           return CryptoPP__EuclideanDomainOfDivisionAlgorithm1_user(arg_0, CryptoPP__EuclideanDomainOfDivisionAlgorithm1_next);
        };
        
        static void CryptoPP__GF2NPBERDecodeElement1_wrapper(struct CryptoPP::GF2NP* _this, struct CryptoPP::BufferedTransformation* arg_0, struct CryptoPP::PolynomialMod2* arg_1)
        {
           CryptoPP__GF2NPBERDecodeElement1_user(_this, arg_0, arg_1, CryptoPP__GF2NPBERDecodeElement1_next);
        };
        static struct CryptoPP::GF2NP* CryptoPP__GF2NPClone2_wrapper(struct CryptoPP::GF2NP* _this)
        {
           return CryptoPP__GF2NPClone2_user(_this, CryptoPP__GF2NPClone2_next);
        };
        static void CryptoPP__GF2NPDEREncode3_wrapper(struct CryptoPP::GF2NP* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           CryptoPP__GF2NPDEREncode3_user(_this, arg_0, CryptoPP__GF2NPDEREncode3_next);
        };
        static void CryptoPP__GF2NPDEREncodeElement4_wrapper(struct CryptoPP::GF2NP* _this, struct CryptoPP::BufferedTransformation* arg_0, struct CryptoPP::PolynomialMod2* arg_1)
        {
           CryptoPP__GF2NPDEREncodeElement4_user(_this, arg_0, arg_1, CryptoPP__GF2NPDEREncodeElement4_next);
        };
        static bool CryptoPP__GF2NPEqual5_wrapper(struct CryptoPP::GF2NP* _this, struct CryptoPP::PolynomialMod2* arg_0, struct CryptoPP::PolynomialMod2* arg_1)
        {
           return CryptoPP__GF2NPEqual5_user(_this, arg_0, arg_1, CryptoPP__GF2NPEqual5_next);
        };
        static int64_t CryptoPP__GF2NPctor_GF2NP6_wrapper(struct CryptoPP::GF2NP* _this, struct CryptoPP::GF2NP* arg_0)
        {
           return CryptoPP__GF2NPctor_GF2NP6_user(_this, arg_0, CryptoPP__GF2NPctor_GF2NP6_next);
        };
        static int64_t CryptoPP__GF2NPctor_GF2NP7_wrapper(struct CryptoPP::GF2NP* _this, struct CryptoPP::PolynomialMod2* arg_0)
        {
           return CryptoPP__GF2NPctor_GF2NP7_user(_this, arg_0, CryptoPP__GF2NPctor_GF2NP7_next);
        };
        static struct CryptoPP::PolynomialMod2* CryptoPP__GF2NPHalfTrace8_wrapper(struct CryptoPP::GF2NP* _this, short retstr, struct CryptoPP::PolynomialMod2* arg_0)
        {
           return CryptoPP__GF2NPHalfTrace8_user(_this, retstr, arg_0, CryptoPP__GF2NPHalfTrace8_next);
        };
        static bool CryptoPP__GF2NPIsUnit9_wrapper(struct CryptoPP::GF2NP* _this, struct CryptoPP::PolynomialMod2* arg_0)
        {
           return CryptoPP__GF2NPIsUnit9_user(_this, arg_0, CryptoPP__GF2NPIsUnit9_next);
        };
        static unsigned int CryptoPP__GF2NPMaxElementBitLength10_wrapper(struct CryptoPP::GF2NP* _this)
        {
           return CryptoPP__GF2NPMaxElementBitLength10_user(_this, CryptoPP__GF2NPMaxElementBitLength10_next);
        };
        static unsigned int CryptoPP__GF2NPMaxElementByteLength11_wrapper(struct CryptoPP::GF2NP* _this)
        {
           return CryptoPP__GF2NPMaxElementByteLength11_user(_this, CryptoPP__GF2NPMaxElementByteLength11_next);
        };
        static struct CryptoPP::PolynomialMod2* CryptoPP__GF2NPSolveQuadraticEquation12_wrapper(struct CryptoPP::GF2NP* _this, short retstr, struct CryptoPP::PolynomialMod2* arg_0)
        {
           return CryptoPP__GF2NPSolveQuadraticEquation12_user(_this, retstr, arg_0, CryptoPP__GF2NPSolveQuadraticEquation12_next);
        };
        static struct CryptoPP::PolynomialMod2* CryptoPP__GF2NPSquareRoot13_wrapper(struct CryptoPP::GF2NP* _this, short retstr, struct CryptoPP::PolynomialMod2* arg_0)
        {
           return CryptoPP__GF2NPSquareRoot13_user(_this, retstr, arg_0, CryptoPP__GF2NPSquareRoot13_next);
        };
        static int64_t CryptoPP__GF2NPdtor_GF2NP14_wrapper(struct CryptoPP::GF2NP* _this)
        {
           return CryptoPP__GF2NPdtor_GF2NP14_user(_this, CryptoPP__GF2NPdtor_GF2NP14_next);
        };
        
        static struct CryptoPP::EC2NPoint* CryptoPP__EC2NAdd1_wrapper(struct CryptoPP::EC2N* _this, struct CryptoPP::EC2NPoint* arg_0, struct CryptoPP::EC2NPoint* arg_1)
        {
           return CryptoPP__EC2NAdd1_user(_this, arg_0, arg_1, CryptoPP__EC2NAdd1_next);
        };
        static struct CryptoPP::EC2NPoint* CryptoPP__EC2NBERDecodePoint2_wrapper(struct CryptoPP::EC2N* _this, short retstr, struct CryptoPP::EC2NPoint* arg_0)
        {
           return CryptoPP__EC2NBERDecodePoint2_user(_this, retstr, arg_0, CryptoPP__EC2NBERDecodePoint2_next);
        };
        static struct CryptoPP::EC2NPoint* CryptoPP__EC2NCascadeMultiply3_wrapper(struct CryptoPP::EC2N* _this, struct CryptoPP::EC2NPoint* retstr, struct CryptoPP::Integer* arg_0, struct CryptoPP::EC2NPoint* arg_1, struct CryptoPP::Integer* arg_2, struct CryptoPP::EC2NPoint* arg_3)
        {
           return CryptoPP__EC2NCascadeMultiply3_user(_this, retstr, arg_0, arg_1, arg_2, arg_3, CryptoPP__EC2NCascadeMultiply3_next);
        };
        static void CryptoPP__EC2NDEREncode4_wrapper(struct CryptoPP::EC2N* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           CryptoPP__EC2NDEREncode4_user(_this, arg_0, CryptoPP__EC2NDEREncode4_next);
        };
        static void CryptoPP__EC2NDEREncodePoint5_wrapper(struct CryptoPP::EC2N* _this, struct CryptoPP::BufferedTransformation* arg_0, struct CryptoPP::EC2NPoint* arg_1, bool arg_2)
        {
           CryptoPP__EC2NDEREncodePoint5_user(_this, arg_0, arg_1, arg_2, CryptoPP__EC2NDEREncodePoint5_next);
        };
        static bool CryptoPP__EC2NDecodePoint6_wrapper(struct CryptoPP::EC2N* _this, struct CryptoPP::EC2NPoint* arg_0, struct CryptoPP::BufferedTransformation* arg_1, uint64_t arg_2)
        {
           return CryptoPP__EC2NDecodePoint6_user(_this, arg_0, arg_1, arg_2, CryptoPP__EC2NDecodePoint6_next);
        };
        static bool CryptoPP__EC2NDecodePoint7_wrapper(struct CryptoPP::EC2N* _this, struct CryptoPP::EC2NPoint* arg_0, uint8_t* arg_1, uint64_t arg_2)
        {
           return CryptoPP__EC2NDecodePoint7_user(_this, arg_0, arg_1, arg_2, CryptoPP__EC2NDecodePoint7_next);
        };
        static struct CryptoPP::EC2NPoint* CryptoPP__EC2NDouble8_wrapper(struct CryptoPP::EC2N* _this, struct CryptoPP::EC2NPoint* arg_0)
        {
           return CryptoPP__EC2NDouble8_user(_this, arg_0, CryptoPP__EC2NDouble8_next);
        };
        static int64_t CryptoPP__EC2Nctor_EC2N9_wrapper(struct CryptoPP::EC2N* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           return CryptoPP__EC2Nctor_EC2N9_user(_this, arg_0, CryptoPP__EC2Nctor_EC2N9_next);
        };
        static int64_t CryptoPP__EC2Nctor_EC2N10_wrapper(struct CryptoPP::EC2N* _this, struct CryptoPP::GF2NP* arg_0, struct CryptoPP::PolynomialMod2* arg_1, struct CryptoPP::PolynomialMod2* arg_2)
        {
           return CryptoPP__EC2Nctor_EC2N10_user(_this, arg_0, arg_1, arg_2, CryptoPP__EC2Nctor_EC2N10_next);
        };
        static int64_t CryptoPP__EC2Nctor_EC2N11_wrapper(struct CryptoPP::EC2N* _this)
        {
           return CryptoPP__EC2Nctor_EC2N11_user(_this, CryptoPP__EC2Nctor_EC2N11_next);
        };
        static void CryptoPP__EC2NEncodePoint12_wrapper(struct CryptoPP::EC2N* _this, struct CryptoPP::BufferedTransformation* arg_0, struct CryptoPP::EC2NPoint* arg_1, bool arg_2)
        {
           CryptoPP__EC2NEncodePoint12_user(_this, arg_0, arg_1, arg_2, CryptoPP__EC2NEncodePoint12_next);
        };
        static void CryptoPP__EC2NEncodePoint13_wrapper(struct CryptoPP::EC2N* _this, uint8_t* arg_0, struct CryptoPP::EC2NPoint* arg_1, bool arg_2)
        {
           CryptoPP__EC2NEncodePoint13_user(_this, arg_0, arg_1, arg_2, CryptoPP__EC2NEncodePoint13_next);
        };
        static unsigned int CryptoPP__EC2NEncodedPointSize14_wrapper(struct CryptoPP::EC2N* _this, bool arg_0)
        {
           return CryptoPP__EC2NEncodedPointSize14_user(_this, arg_0, CryptoPP__EC2NEncodedPointSize14_next);
        };
        static bool CryptoPP__EC2NEqual15_wrapper(struct CryptoPP::EC2N* _this, struct CryptoPP::EC2NPoint* arg_0, struct CryptoPP::EC2NPoint* arg_1)
        {
           return CryptoPP__EC2NEqual15_user(_this, arg_0, arg_1, CryptoPP__EC2NEqual15_next);
        };
        static struct CryptoPP::Integer* CryptoPP__EC2NFieldSize16_wrapper(struct CryptoPP::EC2N* _this, short retstr)
        {
           return CryptoPP__EC2NFieldSize16_user(_this, retstr, CryptoPP__EC2NFieldSize16_next);
        };
        static struct CryptoPP::GF2NP* CryptoPP__EC2NGetField17_wrapper(struct CryptoPP::EC2N* _this)
        {
           return CryptoPP__EC2NGetField17_user(_this, CryptoPP__EC2NGetField17_next);
        };
        static struct CryptoPP::EC2NPoint* CryptoPP__EC2NIdentity18_wrapper(struct CryptoPP::EC2N* _this)
        {
           return CryptoPP__EC2NIdentity18_user(_this, CryptoPP__EC2NIdentity18_next);
        };
        static struct CryptoPP::EC2NPoint* CryptoPP__EC2NInverse19_wrapper(struct CryptoPP::EC2N* _this, struct CryptoPP::EC2NPoint* arg_0)
        {
           return CryptoPP__EC2NInverse19_user(_this, arg_0, CryptoPP__EC2NInverse19_next);
        };
        static bool CryptoPP__EC2NInversionIsFast20_wrapper(struct CryptoPP::EC2N* _this)
        {
           return CryptoPP__EC2NInversionIsFast20_user(_this, CryptoPP__EC2NInversionIsFast20_next);
        };
        static bool CryptoPP__EC2NValidateParameters21_wrapper(struct CryptoPP::EC2N* _this, struct CryptoPP::RandomNumberGenerator* arg_0, unsigned int arg_1)
        {
           return CryptoPP__EC2NValidateParameters21_user(_this, arg_0, arg_1, CryptoPP__EC2NValidateParameters21_next);
        };
        static bool CryptoPP__EC2NVerifyPoint22_wrapper(struct CryptoPP::EC2N* _this, struct CryptoPP::EC2NPoint* arg_0)
        {
           return CryptoPP__EC2NVerifyPoint22_user(_this, arg_0, CryptoPP__EC2NVerifyPoint22_next);
        };
        static int64_t CryptoPP__EC2Ndtor_EC2N23_wrapper(struct CryptoPP::EC2N* _this)
        {
           return CryptoPP__EC2Ndtor_EC2N23_user(_this, CryptoPP__EC2Ndtor_EC2N23_next);
        };
        
        static int64_t CryptoPP__DL_GroupParameters_ECCascadeExponentiate1_wrapper(struct CryptoPP::EC2NPoint* arg_0, struct CryptoPP::Integer* arg_1)
        {
           return CryptoPP__DL_GroupParameters_ECCascadeExponentiate1_user(arg_0, arg_1, CryptoPP__DL_GroupParameters_ECCascadeExponentiate1_next);
        };
        
        static int64_t CryptoPP__DL_Algorithm_GDSASign1_wrapper(int64_t b, struct CryptoPP::Integer* arg_0, int64_t arg_1)
        {
           return CryptoPP__DL_Algorithm_GDSASign1_user(b, arg_0, arg_1, CryptoPP__DL_Algorithm_GDSASign1_next);
        };
        static int64_t CryptoPP__DL_Algorithm_GDSAVerify2_wrapper(struct CryptoPP::Integer* a, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__DL_Algorithm_GDSAVerify2_user(a, arg_0, CryptoPP__DL_Algorithm_GDSAVerify2_next);
        };
        
        static void CryptoPP__member_ptrdtor_member_ptr2_wrapper(struct CryptoPP::member_ptr<CryptoPP::BufferedTransformation>* _this)
        {
           CryptoPP__member_ptrdtor_member_ptr2_user(_this, CryptoPP__member_ptrdtor_member_ptr2_next);
        };
        
        static bool CryptoPP__FilterAttachable2_wrapper(struct CryptoPP::Filter* _this)
        {
           return CryptoPP__FilterAttachable2_user(_this, CryptoPP__FilterAttachable2_next);
        };
        static bool CryptoPP__FilterShouldPropagateMessageEnd4_wrapper(struct CryptoPP::Filter* _this)
        {
           return CryptoPP__FilterShouldPropagateMessageEnd4_user(_this, CryptoPP__FilterShouldPropagateMessageEnd4_next);
        };
        static bool CryptoPP__FilterShouldPropagateMessageSeriesEnd6_wrapper(struct CryptoPP::Filter* _this)
        {
           return CryptoPP__FilterShouldPropagateMessageSeriesEnd6_user(_this, CryptoPP__FilterShouldPropagateMessageSeriesEnd6_next);
        };
        static void CryptoPP__Filterdtor_Filter8_wrapper(struct CryptoPP::Filter* _this)
        {
           CryptoPP__Filterdtor_Filter8_user(_this, CryptoPP__Filterdtor_Filter8_next);
        };
        
        static uint64_t CryptoPP__PK_SignatureSchemeMaxSignatureLength1_wrapper(struct CryptoPP::PK_SignatureScheme* _this, uint64_t arg_0)
        {
           return CryptoPP__PK_SignatureSchemeMaxSignatureLength1_user(_this, arg_0, CryptoPP__PK_SignatureSchemeMaxSignatureLength1_next);
        };
        static int64_t CryptoPP__PK_SignatureSchemector_PK_SignatureScheme2_wrapper(struct CryptoPP::PK_SignatureScheme* _this, struct CryptoPP::PK_SignatureScheme* arg_0)
        {
           return CryptoPP__PK_SignatureSchemector_PK_SignatureScheme2_user(_this, arg_0, CryptoPP__PK_SignatureSchemector_PK_SignatureScheme2_next);
        };
        static int64_t CryptoPP__PK_SignatureSchemector_PK_SignatureScheme3_wrapper(struct CryptoPP::PK_SignatureScheme* _this)
        {
           return CryptoPP__PK_SignatureSchemector_PK_SignatureScheme3_user(_this, CryptoPP__PK_SignatureSchemector_PK_SignatureScheme3_next);
        };
        static bool CryptoPP__PK_SignatureSchemeSignatureUpfront4_wrapper(struct CryptoPP::PK_SignatureScheme* _this)
        {
           return CryptoPP__PK_SignatureSchemeSignatureUpfront4_user(_this, CryptoPP__PK_SignatureSchemeSignatureUpfront4_next);
        };
        static int64_t CryptoPP__PK_SignatureSchemedtor_PK_SignatureScheme5_wrapper(struct CryptoPP::PK_SignatureScheme* _this)
        {
           return CryptoPP__PK_SignatureSchemedtor_PK_SignatureScheme5_user(_this, CryptoPP__PK_SignatureSchemedtor_PK_SignatureScheme5_next);
        };
        
        static int64_t CryptoPP__PK_SignatureScheme__InvalidKeyLengthctor_InvalidKeyLength1_wrapper(struct CryptoPP::PK_SignatureScheme::InvalidKeyLength* _this, struct CryptoPP::PK_SignatureScheme::InvalidKeyLength* arg_0)
        {
           return CryptoPP__PK_SignatureScheme__InvalidKeyLengthctor_InvalidKeyLength1_user(_this, arg_0, CryptoPP__PK_SignatureScheme__InvalidKeyLengthctor_InvalidKeyLength1_next);
        };
        static int64_t CryptoPP__PK_SignatureScheme__InvalidKeyLengthdtor_InvalidKeyLength2_wrapper(struct CryptoPP::PK_SignatureScheme::InvalidKeyLength* _this)
        {
           return CryptoPP__PK_SignatureScheme__InvalidKeyLengthdtor_InvalidKeyLength2_user(_this, CryptoPP__PK_SignatureScheme__InvalidKeyLengthdtor_InvalidKeyLength2_next);
        };
        
        static int64_t CryptoPP__PK_SignatureScheme__KeyTooShortctor_KeyTooShort1_wrapper(struct CryptoPP::PK_SignatureScheme::KeyTooShort* _this, struct CryptoPP::PK_SignatureScheme::KeyTooShort* arg_0)
        {
           return CryptoPP__PK_SignatureScheme__KeyTooShortctor_KeyTooShort1_user(_this, arg_0, CryptoPP__PK_SignatureScheme__KeyTooShortctor_KeyTooShort1_next);
        };
        static int64_t CryptoPP__PK_SignatureScheme__KeyTooShortctor_KeyTooShort2_wrapper(struct CryptoPP::PK_SignatureScheme::KeyTooShort* _this)
        {
           return CryptoPP__PK_SignatureScheme__KeyTooShortctor_KeyTooShort2_user(_this, CryptoPP__PK_SignatureScheme__KeyTooShortctor_KeyTooShort2_next);
        };
        static int64_t CryptoPP__PK_SignatureScheme__KeyTooShortdtor_KeyTooShort3_wrapper(struct CryptoPP::PK_SignatureScheme::KeyTooShort* _this)
        {
           return CryptoPP__PK_SignatureScheme__KeyTooShortdtor_KeyTooShort3_user(_this, CryptoPP__PK_SignatureScheme__KeyTooShortdtor_KeyTooShort3_next);
        };
        
        static int64_t CryptoPP__PK_Signerctor_PK_Signer1_wrapper(struct CryptoPP::PK_Signer* _this, struct CryptoPP::PK_Signer* arg_0)
        {
           return CryptoPP__PK_Signerctor_PK_Signer1_user(_this, arg_0, CryptoPP__PK_Signerctor_PK_Signer1_next);
        };
        static int64_t CryptoPP__PK_Signerctor_PK_Signer2_wrapper(struct CryptoPP::PK_Signer* _this)
        {
           return CryptoPP__PK_Signerctor_PK_Signer2_user(_this, CryptoPP__PK_Signerctor_PK_Signer2_next);
        };
        static uint64_t CryptoPP__PK_SignerSign3_wrapper(struct CryptoPP::PK_Signer* _this, struct CryptoPP::RandomNumberGenerator* arg_0, struct CryptoPP::PK_MessageAccumulator* arg_1, uint8_t* arg_2)
        {
           return CryptoPP__PK_SignerSign3_user(_this, arg_0, arg_1, arg_2, CryptoPP__PK_SignerSign3_next);
        };
        static uint64_t CryptoPP__PK_SignerSignMessage4_wrapper(struct CryptoPP::PK_Signer* _this, struct CryptoPP::RandomNumberGenerator* arg_0, uint8_t* arg_1, uint64_t arg_2, uint8_t* arg_3)
        {
           return CryptoPP__PK_SignerSignMessage4_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__PK_SignerSignMessage4_next);
        };
        static uint64_t CryptoPP__PK_SignerSignMessageWithRecovery5_wrapper(struct CryptoPP::PK_Signer* _this, struct CryptoPP::RandomNumberGenerator* arg_0, uint8_t* arg_1, uint64_t arg_2, uint8_t* arg_3, uint64_t arg_4, uint8_t* arg_5)
        {
           return CryptoPP__PK_SignerSignMessageWithRecovery5_user(_this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, CryptoPP__PK_SignerSignMessageWithRecovery5_next);
        };
        static int64_t CryptoPP__PK_Signerdtor_PK_Signer6_wrapper(struct CryptoPP::PK_Signer* _this)
        {
           return CryptoPP__PK_Signerdtor_PK_Signer6_user(_this, CryptoPP__PK_Signerdtor_PK_Signer6_next);
        };
        
        static int64_t CryptoPP__PK_Verifierctor_PK_Verifier1_wrapper(struct CryptoPP::PK_Verifier* _this)
        {
           return CryptoPP__PK_Verifierctor_PK_Verifier1_user(_this, CryptoPP__PK_Verifierctor_PK_Verifier1_next);
        };
        static struct CryptoPP::DecodingResult* CryptoPP__PK_VerifierRecover2_wrapper(struct CryptoPP::PK_Verifier* _this, short retstr, struct CryptoPP::DecodingResult* arg_0, uint8_t* arg_1)
        {
           return CryptoPP__PK_VerifierRecover2_user(_this, retstr, arg_0, arg_1, CryptoPP__PK_VerifierRecover2_next);
        };
        static struct CryptoPP::DecodingResult* CryptoPP__PK_VerifierRecoverMessage3_wrapper(struct CryptoPP::PK_Verifier* _this, struct CryptoPP::DecodingResult* retstr, uint8_t* arg_0, uint8_t* arg_1, uint64_t arg_2, uint8_t* arg_3, uint64_t arg_4)
        {
           return CryptoPP__PK_VerifierRecoverMessage3_user(_this, retstr, arg_0, arg_1, arg_2, arg_3, arg_4, CryptoPP__PK_VerifierRecoverMessage3_next);
        };
        static bool CryptoPP__PK_VerifierVerify4_wrapper(struct CryptoPP::PK_Verifier* _this, struct CryptoPP::PK_MessageAccumulator* arg_0)
        {
           return CryptoPP__PK_VerifierVerify4_user(_this, arg_0, CryptoPP__PK_VerifierVerify4_next);
        };
        static bool CryptoPP__PK_VerifierVerifyMessage5_wrapper(struct CryptoPP::PK_Verifier* _this, uint8_t* arg_0, uint64_t arg_1, uint8_t* arg_2, uint64_t arg_3)
        {
           return CryptoPP__PK_VerifierVerifyMessage5_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__PK_VerifierVerifyMessage5_next);
        };
        static int64_t CryptoPP__PK_Verifierdtor_PK_Verifier6_wrapper(struct CryptoPP::PK_Verifier* _this)
        {
           return CryptoPP__PK_Verifierdtor_PK_Verifier6_user(_this, CryptoPP__PK_Verifierdtor_PK_Verifier6_next);
        };
        
        static uint64_t CryptoPP__VariableKeyLengthStaticGetValidKeyLength2_wrapper(uint64_t n)
        {
           return CryptoPP__VariableKeyLengthStaticGetValidKeyLength2_user(n, CryptoPP__VariableKeyLengthStaticGetValidKeyLength2_next);
        };
        
        static struct CryptoPP::Algorithm* CryptoPP__SimpleKeyedTransformationGetAlgorithm2_wrapper(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::HashTransformation>* _this)
        {
           return CryptoPP__SimpleKeyedTransformationGetAlgorithm2_user(_this, CryptoPP__SimpleKeyedTransformationGetAlgorithm2_next);
        };
        static void CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_wrapper(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::HashTransformation>* _this)
        {
           CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_user(_this, CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_next);
        };
        static void CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation6_wrapper(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::HashTransformation>* _this)
        {
           CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation6_user(_this, CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation6_next);
        };
        
        static uint8_t* CryptoPP__HMAC_BaseAccessInnerHash1_wrapper(struct CryptoPP::HMAC_Base* _this)
        {
           return CryptoPP__HMAC_BaseAccessInnerHash1_user(_this, CryptoPP__HMAC_BaseAccessInnerHash1_next);
        };
        static uint8_t* CryptoPP__HMAC_BaseAccessIpad2_wrapper(struct CryptoPP::HMAC_Base* _this)
        {
           return CryptoPP__HMAC_BaseAccessIpad2_user(_this, CryptoPP__HMAC_BaseAccessIpad2_next);
        };
        static uint8_t* CryptoPP__HMAC_BaseAccessOpad3_wrapper(struct CryptoPP::HMAC_Base* _this)
        {
           return CryptoPP__HMAC_BaseAccessOpad3_user(_this, CryptoPP__HMAC_BaseAccessOpad3_next);
        };
        static unsigned int CryptoPP__HMAC_BaseDigestSize5_wrapper(struct CryptoPP::HMAC_Base* _this)
        {
           return CryptoPP__HMAC_BaseDigestSize5_user(_this, CryptoPP__HMAC_BaseDigestSize5_next);
        };
        static void CryptoPP__HMAC_Basector_HMAC_Base7_wrapper(struct CryptoPP::HMAC_Base* _this)
        {
           CryptoPP__HMAC_Basector_HMAC_Base7_user(_this, CryptoPP__HMAC_Basector_HMAC_Base7_next);
        };
        static void CryptoPP__HMAC_BaseKeyInnerHash8_wrapper(struct CryptoPP::HMAC_Base* _this)
        {
           CryptoPP__HMAC_BaseKeyInnerHash8_user(_this, CryptoPP__HMAC_BaseKeyInnerHash8_next);
        };
        static unsigned int CryptoPP__HMAC_BaseOptimalBlockSize10_wrapper(struct CryptoPP::HMAC_Base* _this)
        {
           return CryptoPP__HMAC_BaseOptimalBlockSize10_user(_this, CryptoPP__HMAC_BaseOptimalBlockSize10_next);
        };
        static void CryptoPP__HMAC_BaseRestart11_wrapper(struct CryptoPP::HMAC_Base* _this)
        {
           CryptoPP__HMAC_BaseRestart11_user(_this, CryptoPP__HMAC_BaseRestart11_next);
        };
        static void CryptoPP__HMAC_BaseTruncatedFinal12_wrapper(struct CryptoPP::HMAC_Base* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__HMAC_BaseTruncatedFinal12_user(_this, arg_0, arg_1, CryptoPP__HMAC_BaseTruncatedFinal12_next);
        };
        static void CryptoPP__HMAC_BaseUncheckedSetKey13_wrapper(struct CryptoPP::HMAC_Base* _this, uint8_t* arg_0, unsigned int arg_1, struct CryptoPP::NameValuePairs* arg_2)
        {
           CryptoPP__HMAC_BaseUncheckedSetKey13_user(_this, arg_0, arg_1, arg_2, CryptoPP__HMAC_BaseUncheckedSetKey13_next);
        };
        static void CryptoPP__HMAC_BaseUpdate14_wrapper(struct CryptoPP::HMAC_Base* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__HMAC_BaseUpdate14_user(_this, arg_0, arg_1, CryptoPP__HMAC_BaseUpdate14_next);
        };
        static void CryptoPP__HMAC_Basedtor_HMAC_Base16_wrapper(struct CryptoPP::HMAC_Base* _this)
        {
           CryptoPP__HMAC_Basedtor_HMAC_Base16_user(_this, CryptoPP__HMAC_Basedtor_HMAC_Base16_next);
        };
        
        static int64_t CryptoPP__Sinkctor_Sink1_wrapper(struct CryptoPP::Sink* _this)
        {
           return CryptoPP__Sinkctor_Sink1_user(_this, CryptoPP__Sinkctor_Sink1_next);
        };
        static int64_t CryptoPP__Sinkdtor_Sink2_wrapper(struct CryptoPP::Sink* _this)
        {
           return CryptoPP__Sinkdtor_Sink2_user(_this, CryptoPP__Sinkdtor_Sink2_next);
        };
        
        static bool CryptoPP__InputRejectingChannelMessageSeriesEnd2_wrapper(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>* _this, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* __formal, int __formal, bool __formal)
        {
           return CryptoPP__InputRejectingChannelMessageSeriesEnd2_user(_this, __formal, __formal, __formal, CryptoPP__InputRejectingChannelMessageSeriesEnd2_next);
        };
        static uint64_t CryptoPP__InputRejectingChannelPut24_wrapper(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>* _this, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* channel, char* begin, uint64_t length, int messageEnd, bool blocking)
        {
           return CryptoPP__InputRejectingChannelPut24_user(_this, channel, begin, length, messageEnd, blocking, CryptoPP__InputRejectingChannelPut24_next);
        };
        static void CryptoPP__InputRejectingctor_InputRejecting6_wrapper(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>* _this)
        {
           CryptoPP__InputRejectingctor_InputRejecting6_user(_this, CryptoPP__InputRejectingctor_InputRejecting6_next);
        };
        static bool CryptoPP__InputRejectingIsolatedFlush8_wrapper(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>* _this, bool __formal, bool __formal)
        {
           return CryptoPP__InputRejectingIsolatedFlush8_user(_this, __formal, __formal, CryptoPP__InputRejectingIsolatedFlush8_next);
        };
        static bool CryptoPP__InputRejectingIsolatedMessageSeriesEnd10_wrapper(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>* _this, bool __formal)
        {
           return CryptoPP__InputRejectingIsolatedMessageSeriesEnd10_user(_this, __formal, CryptoPP__InputRejectingIsolatedMessageSeriesEnd10_next);
        };
        static uint64_t CryptoPP__InputRejectingPut212_wrapper(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>* _this, char* begin, uint64_t length, int messageEnd, bool blocking)
        {
           return CryptoPP__InputRejectingPut212_user(_this, begin, length, messageEnd, blocking, CryptoPP__InputRejectingPut212_next);
        };
        static void CryptoPP__InputRejectingdtor_InputRejecting14_wrapper(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>* _this)
        {
           CryptoPP__InputRejectingdtor_InputRejecting14_user(_this, CryptoPP__InputRejectingdtor_InputRejecting14_next);
        };
        
        static void CryptoPP__InputRejecting__InputRejectedctor_InputRejected2_wrapper(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected* _this, struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected* __that)
        {
           CryptoPP__InputRejecting__InputRejectedctor_InputRejected2_user(_this, __that, CryptoPP__InputRejecting__InputRejectedctor_InputRejected2_next);
        };
        static void CryptoPP__InputRejecting__InputRejectedctor_InputRejected4_wrapper(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected* _this)
        {
           CryptoPP__InputRejecting__InputRejectedctor_InputRejected4_user(_this, CryptoPP__InputRejecting__InputRejectedctor_InputRejected4_next);
        };
        static void CryptoPP__InputRejecting__InputRejecteddtor_InputRejected9_wrapper(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected* _this)
        {
           CryptoPP__InputRejecting__InputRejecteddtor_InputRejected9_user(_this, CryptoPP__InputRejecting__InputRejecteddtor_InputRejected9_next);
        };
        
        static bool CryptoPP__StoreGetNextMessage1_wrapper(struct CryptoPP::Store* _this)
        {
           return CryptoPP__StoreGetNextMessage1_user(_this, CryptoPP__StoreGetNextMessage1_next);
        };
        static void CryptoPP__StoreIsolatedInitialize3_wrapper(struct CryptoPP::Store* _this, struct CryptoPP::NameValuePairs* parameters)
        {
           CryptoPP__StoreIsolatedInitialize3_user(_this, parameters, CryptoPP__StoreIsolatedInitialize3_next);
        };
        static unsigned int CryptoPP__StoreNumberOfMessages5_wrapper(struct CryptoPP::Store* _this)
        {
           return CryptoPP__StoreNumberOfMessages5_user(_this, CryptoPP__StoreNumberOfMessages5_next);
        };
        static void CryptoPP__Storector_Store7_wrapper(struct CryptoPP::Store* _this)
        {
           CryptoPP__Storector_Store7_user(_this, CryptoPP__Storector_Store7_next);
        };
        static void CryptoPP__Storedtor_Store9_wrapper(struct CryptoPP::Store* _this)
        {
           CryptoPP__Storedtor_Store9_user(_this, CryptoPP__Storedtor_Store9_next);
        };
        
        static int64_t CryptoPP__ArraySinkctor_ArraySink1_wrapper(struct CryptoPP::ArraySink* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           return CryptoPP__ArraySinkctor_ArraySink1_user(_this, arg_0, arg_1, CryptoPP__ArraySinkctor_ArraySink1_next);
        };
        static uint64_t CryptoPP__ArraySinkAvailableSize2_wrapper(struct CryptoPP::ArraySink* _this)
        {
           return CryptoPP__ArraySinkAvailableSize2_user(_this, CryptoPP__ArraySinkAvailableSize2_next);
        };
        static uint8_t* CryptoPP__ArraySinkCreatePutSpace3_wrapper(struct CryptoPP::ArraySink* _this, uint64_t* arg_0)
        {
           return CryptoPP__ArraySinkCreatePutSpace3_user(_this, arg_0, CryptoPP__ArraySinkCreatePutSpace3_next);
        };
        static void CryptoPP__ArraySinkIsolatedInitialize4_wrapper(struct CryptoPP::ArraySink* _this, struct CryptoPP::NameValuePairs* arg_0)
        {
           CryptoPP__ArraySinkIsolatedInitialize4_user(_this, arg_0, CryptoPP__ArraySinkIsolatedInitialize4_next);
        };
        static uint64_t CryptoPP__ArraySinkPut25_wrapper(struct CryptoPP::ArraySink* _this, uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
        {
           return CryptoPP__ArraySinkPut25_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__ArraySinkPut25_next);
        };
        static uint64_t CryptoPP__ArraySinkTotalPutLength6_wrapper(struct CryptoPP::ArraySink* _this)
        {
           return CryptoPP__ArraySinkTotalPutLength6_user(_this, CryptoPP__ArraySinkTotalPutLength6_next);
        };
        static int64_t CryptoPP__ArraySinkdtor_ArraySink7_wrapper(struct CryptoPP::ArraySink* _this)
        {
           return CryptoPP__ArraySinkdtor_ArraySink7_user(_this, CryptoPP__ArraySinkdtor_ArraySink7_next);
        };
        
        static void CryptoPP__StringStoreStoreInitialize1_wrapper(struct CryptoPP::StringStore* _this, struct CryptoPP::NameValuePairs* arg_0)
        {
           CryptoPP__StringStoreStoreInitialize1_user(_this, arg_0, CryptoPP__StringStoreStoreInitialize1_next);
        };
        static int64_t CryptoPP__StringStorector_StringStore2_wrapper(struct CryptoPP::StringStore* _this, char* arg_0)
        {
           return CryptoPP__StringStorector_StringStore2_user(_this, arg_0, CryptoPP__StringStorector_StringStore2_next);
        };
        static int64_t CryptoPP__StringStorector_StringStore3_wrapper(struct CryptoPP::StringStore* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           return CryptoPP__StringStorector_StringStore3_user(_this, arg_0, arg_1, CryptoPP__StringStorector_StringStore3_next);
        };
        static int64_t CryptoPP__StringStoredtor_StringStore4_wrapper(struct CryptoPP::StringStore* _this)
        {
           return CryptoPP__StringStoredtor_StringStore4_user(_this, CryptoPP__StringStoredtor_StringStore4_next);
        };
        
        static struct CryptoPP::GF2NP* CryptoPP__GF2NTClone1_wrapper(struct CryptoPP::GF2NT* _this)
        {
           return CryptoPP__GF2NTClone1_user(_this, CryptoPP__GF2NTClone1_next);
        };
        static void CryptoPP__GF2NTDEREncode2_wrapper(struct CryptoPP::GF2NT* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           CryptoPP__GF2NTDEREncode2_user(_this, arg_0, CryptoPP__GF2NTDEREncode2_next);
        };
        static int64_t CryptoPP__GF2NTctor_GF2NT3_wrapper(struct CryptoPP::GF2NT* _this, struct CryptoPP::GF2NT* arg_0)
        {
           return CryptoPP__GF2NTctor_GF2NT3_user(_this, arg_0, CryptoPP__GF2NTctor_GF2NT3_next);
        };
        static int64_t CryptoPP__GF2NTctor_GF2NT4_wrapper(struct CryptoPP::GF2NT* _this, unsigned int arg_0, unsigned int arg_1, unsigned int arg_2)
        {
           return CryptoPP__GF2NTctor_GF2NT4_user(_this, arg_0, arg_1, arg_2, CryptoPP__GF2NTctor_GF2NT4_next);
        };
        static struct CryptoPP::PolynomialMod2* CryptoPP__GF2NTMultiplicativeInverse5_wrapper(struct CryptoPP::GF2NT* _this, struct CryptoPP::PolynomialMod2* arg_0)
        {
           return CryptoPP__GF2NTMultiplicativeInverse5_user(_this, arg_0, CryptoPP__GF2NTMultiplicativeInverse5_next);
        };
        static struct CryptoPP::PolynomialMod2* CryptoPP__GF2NTMultiply6_wrapper(struct CryptoPP::GF2NT* _this, struct CryptoPP::PolynomialMod2* arg_0, struct CryptoPP::PolynomialMod2* arg_1)
        {
           return CryptoPP__GF2NTMultiply6_user(_this, arg_0, arg_1, CryptoPP__GF2NTMultiply6_next);
        };
        static struct CryptoPP::PolynomialMod2* CryptoPP__GF2NTReduced7_wrapper(struct CryptoPP::GF2NT* _this, struct CryptoPP::PolynomialMod2* arg_0)
        {
           return CryptoPP__GF2NTReduced7_user(_this, arg_0, CryptoPP__GF2NTReduced7_next);
        };
        static struct CryptoPP::PolynomialMod2* CryptoPP__GF2NTSquare8_wrapper(struct CryptoPP::GF2NT* _this, struct CryptoPP::PolynomialMod2* arg_0)
        {
           return CryptoPP__GF2NTSquare8_user(_this, arg_0, CryptoPP__GF2NTSquare8_next);
        };
        static int64_t CryptoPP__GF2NTdtor_GF2NT9_wrapper(struct CryptoPP::GF2NT* _this)
        {
           return CryptoPP__GF2NTdtor_GF2NT9_user(_this, CryptoPP__GF2NTdtor_GF2NT9_next);
        };
        
        static int64_t CryptoPP__MaskGeneratingFunctionctor_MaskGeneratingFunction1_wrapper(struct CryptoPP::MaskGeneratingFunction* _this)
        {
           return CryptoPP__MaskGeneratingFunctionctor_MaskGeneratingFunction1_user(_this, CryptoPP__MaskGeneratingFunctionctor_MaskGeneratingFunction1_next);
        };
        static int64_t CryptoPP__MaskGeneratingFunctiondtor_MaskGeneratingFunction2_wrapper(struct CryptoPP::MaskGeneratingFunction* _this)
        {
           return CryptoPP__MaskGeneratingFunctiondtor_MaskGeneratingFunction2_user(_this, CryptoPP__MaskGeneratingFunctiondtor_MaskGeneratingFunction2_next);
        };
        
        static void CryptoPP__P1363_MGF1GenerateAndMask1_wrapper(struct CryptoPP::P1363_MGF1* _this, struct CryptoPP::HashTransformation* arg_0, uint8_t* arg_1, char arg_2, uint8_t* arg_3, uint64_t arg_4, bool arg_5)
        {
           CryptoPP__P1363_MGF1GenerateAndMask1_user(_this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, CryptoPP__P1363_MGF1GenerateAndMask1_next);
        };
        static int64_t CryptoPP__P1363_MGF1ctor_P1363_MGF12_wrapper(struct CryptoPP::P1363_MGF1* _this)
        {
           return CryptoPP__P1363_MGF1ctor_P1363_MGF12_user(_this, CryptoPP__P1363_MGF1ctor_P1363_MGF12_next);
        };
        static char* CryptoPP__P1363_MGF1StaticAlgorithmName3_wrapper()
        {
           return CryptoPP__P1363_MGF1StaticAlgorithmName3_user(CryptoPP__P1363_MGF1StaticAlgorithmName3_next);
        };
        static int64_t CryptoPP__P1363_MGF1dtor_P1363_MGF14_wrapper(struct CryptoPP::P1363_MGF1* _this)
        {
           return CryptoPP__P1363_MGF1dtor_P1363_MGF14_user(_this, CryptoPP__P1363_MGF1dtor_P1363_MGF14_next);
        };
        
        static int64_t CryptoPP__CryptoMaterialctor_CryptoMaterial1_wrapper(struct CryptoPP::CryptoMaterial* _this, struct CryptoPP::CryptoMaterial* arg_0)
        {
           return CryptoPP__CryptoMaterialctor_CryptoMaterial1_user(_this, arg_0, CryptoPP__CryptoMaterialctor_CryptoMaterial1_next);
        };
        static void CryptoPP__CryptoMaterialctor_CryptoMaterial3_wrapper(struct CryptoPP::CryptoMaterial* _this)
        {
           CryptoPP__CryptoMaterialctor_CryptoMaterial3_user(_this, CryptoPP__CryptoMaterialctor_CryptoMaterial3_next);
        };
        static void CryptoPP__CryptoMaterialDoQuickSanityCheck4_wrapper(struct CryptoPP::CryptoMaterial* _this)
        {
           CryptoPP__CryptoMaterialDoQuickSanityCheck4_user(_this, CryptoPP__CryptoMaterialDoQuickSanityCheck4_next);
        };
        static void CryptoPP__CryptoMaterialLoad6_wrapper(struct CryptoPP::CryptoMaterial* _this, struct CryptoPP::BufferedTransformation* bt)
        {
           CryptoPP__CryptoMaterialLoad6_user(_this, bt, CryptoPP__CryptoMaterialLoad6_next);
        };
        static void CryptoPP__CryptoMaterialLoadPrecomputation8_wrapper(struct CryptoPP::CryptoMaterial* _this, struct CryptoPP::BufferedTransformation* storedPrecomputation)
        {
           CryptoPP__CryptoMaterialLoadPrecomputation8_user(_this, storedPrecomputation, CryptoPP__CryptoMaterialLoadPrecomputation8_next);
        };
        static void CryptoPP__CryptoMaterialPrecompute10_wrapper(struct CryptoPP::CryptoMaterial* _this, unsigned int n)
        {
           CryptoPP__CryptoMaterialPrecompute10_user(_this, n, CryptoPP__CryptoMaterialPrecompute10_next);
        };
        static void CryptoPP__CryptoMaterialSave12_wrapper(struct CryptoPP::CryptoMaterial* _this, struct CryptoPP::BufferedTransformation* bt)
        {
           CryptoPP__CryptoMaterialSave12_user(_this, bt, CryptoPP__CryptoMaterialSave12_next);
        };
        static void CryptoPP__CryptoMaterialSavePrecomputation14_wrapper(struct CryptoPP::CryptoMaterial* _this, struct CryptoPP::BufferedTransformation* storedPrecomputation)
        {
           CryptoPP__CryptoMaterialSavePrecomputation14_user(_this, storedPrecomputation, CryptoPP__CryptoMaterialSavePrecomputation14_next);
        };
        static bool CryptoPP__CryptoMaterialSupportsPrecomputation16_wrapper(struct CryptoPP::CryptoMaterial* _this)
        {
           return CryptoPP__CryptoMaterialSupportsPrecomputation16_user(_this, CryptoPP__CryptoMaterialSupportsPrecomputation16_next);
        };
        static void CryptoPP__CryptoMaterialThrowIfInvalid18_wrapper(struct CryptoPP::CryptoMaterial* _this, struct CryptoPP::RandomNumberGenerator* rng, unsigned int level)
        {
           CryptoPP__CryptoMaterialThrowIfInvalid18_user(_this, rng, level, CryptoPP__CryptoMaterialThrowIfInvalid18_next);
        };
        static void CryptoPP__CryptoMaterialdtor_CryptoMaterial22_wrapper(struct CryptoPP::CryptoMaterial* _this)
        {
           CryptoPP__CryptoMaterialdtor_CryptoMaterial22_user(_this, CryptoPP__CryptoMaterialdtor_CryptoMaterial22_next);
        };
        
        static void CryptoPP__CryptoMaterial__InvalidMaterialctor_InvalidMaterial2_wrapper(struct CryptoPP::CryptoMaterial::InvalidMaterial* _this, struct CryptoPP::CryptoMaterial::InvalidMaterial* __that)
        {
           CryptoPP__CryptoMaterial__InvalidMaterialctor_InvalidMaterial2_user(_this, __that, CryptoPP__CryptoMaterial__InvalidMaterialctor_InvalidMaterial2_next);
        };
        static void CryptoPP__CryptoMaterial__InvalidMaterialctor_InvalidMaterial4_wrapper(struct CryptoPP::CryptoMaterial::InvalidMaterial* _this, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* s)
        {
           CryptoPP__CryptoMaterial__InvalidMaterialctor_InvalidMaterial4_user(_this, s, CryptoPP__CryptoMaterial__InvalidMaterialctor_InvalidMaterial4_next);
        };
        static void CryptoPP__CryptoMaterial__InvalidMaterialdtor_InvalidMaterial9_wrapper(struct CryptoPP::CryptoMaterial::InvalidMaterial* _this)
        {
           CryptoPP__CryptoMaterial__InvalidMaterialdtor_InvalidMaterial9_user(_this, CryptoPP__CryptoMaterial__InvalidMaterialdtor_InvalidMaterial9_next);
        };
        
        static void CryptoPP__SHA384InitState1_wrapper(uint64_t* arg_0)
        {
           CryptoPP__SHA384InitState1_user(arg_0, CryptoPP__SHA384InitState1_next);
        };
        
        static void CryptoPP__DL_KeyAgreementAlgorithmctor_DL_KeyAgreementAlgorithm2_wrapper(struct CryptoPP::DL_KeyAgreementAlgorithm<CryptoPP::ECPPoint>* _this)
        {
           CryptoPP__DL_KeyAgreementAlgorithmctor_DL_KeyAgreementAlgorithm2_user(_this, CryptoPP__DL_KeyAgreementAlgorithmctor_DL_KeyAgreementAlgorithm2_next);
        };
        
        static uint8_t* CryptoPP__OutputProxyCreatePutSpace1_wrapper(struct CryptoPP::OutputProxy* _this, uint64_t* arg_0)
        {
           return CryptoPP__OutputProxyCreatePutSpace1_user(_this, arg_0, CryptoPP__OutputProxyCreatePutSpace1_next);
        };
        static bool CryptoPP__OutputProxyFlush2_wrapper(struct CryptoPP::OutputProxy* _this, bool arg_0, int arg_1, bool arg_2)
        {
           return CryptoPP__OutputProxyFlush2_user(_this, arg_0, arg_1, arg_2, CryptoPP__OutputProxyFlush2_next);
        };
        static void CryptoPP__OutputProxyInitialize3_wrapper(struct CryptoPP::OutputProxy* _this, struct CryptoPP::NameValuePairs* arg_0, int arg_1)
        {
           CryptoPP__OutputProxyInitialize3_user(_this, arg_0, arg_1, CryptoPP__OutputProxyInitialize3_next);
        };
        static bool CryptoPP__OutputProxyMessageSeriesEnd4_wrapper(struct CryptoPP::OutputProxy* _this, int arg_0, bool arg_1)
        {
           return CryptoPP__OutputProxyMessageSeriesEnd4_user(_this, arg_0, arg_1, CryptoPP__OutputProxyMessageSeriesEnd4_next);
        };
        static int64_t CryptoPP__OutputProxyctor_OutputProxy5_wrapper(struct CryptoPP::OutputProxy* _this, struct CryptoPP::BufferedTransformation* arg_0, bool arg_1)
        {
           return CryptoPP__OutputProxyctor_OutputProxy5_user(_this, arg_0, arg_1, CryptoPP__OutputProxyctor_OutputProxy5_next);
        };
        static uint64_t CryptoPP__OutputProxyPut26_wrapper(struct CryptoPP::OutputProxy* _this, uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
        {
           return CryptoPP__OutputProxyPut26_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__OutputProxyPut26_next);
        };
        static uint64_t CryptoPP__OutputProxyPutModifiable27_wrapper(struct CryptoPP::OutputProxy* _this, uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
        {
           return CryptoPP__OutputProxyPutModifiable27_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__OutputProxyPutModifiable27_next);
        };
        static int64_t CryptoPP__OutputProxydtor_OutputProxy8_wrapper(struct CryptoPP::OutputProxy* _this)
        {
           return CryptoPP__OutputProxydtor_OutputProxy8_user(_this, CryptoPP__OutputProxydtor_OutputProxy8_next);
        };
        
        static void CryptoPP__InvalidDataFormatctor_InvalidDataFormat2_wrapper(struct CryptoPP::InvalidDataFormat* _this, struct CryptoPP::InvalidDataFormat* __that)
        {
           CryptoPP__InvalidDataFormatctor_InvalidDataFormat2_user(_this, __that, CryptoPP__InvalidDataFormatctor_InvalidDataFormat2_next);
        };
        static void CryptoPP__InvalidDataFormatctor_InvalidDataFormat4_wrapper(struct CryptoPP::InvalidDataFormat* _this, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* s)
        {
           CryptoPP__InvalidDataFormatctor_InvalidDataFormat4_user(_this, s, CryptoPP__InvalidDataFormatctor_InvalidDataFormat4_next);
        };
        static void CryptoPP__InvalidDataFormatdtor_InvalidDataFormat9_wrapper(struct CryptoPP::InvalidDataFormat* _this)
        {
           CryptoPP__InvalidDataFormatdtor_InvalidDataFormat9_user(_this, CryptoPP__InvalidDataFormatdtor_InvalidDataFormat9_next);
        };
        
        static void CryptoPP__DL_BadElementctor_DL_BadElement2_wrapper(struct CryptoPP::DL_BadElement* _this, struct CryptoPP::DL_BadElement* __that)
        {
           CryptoPP__DL_BadElementctor_DL_BadElement2_user(_this, __that, CryptoPP__DL_BadElementctor_DL_BadElement2_next);
        };
        static void CryptoPP__DL_BadElementctor_DL_BadElement4_wrapper(struct CryptoPP::DL_BadElement* _this)
        {
           CryptoPP__DL_BadElementctor_DL_BadElement4_user(_this, CryptoPP__DL_BadElementctor_DL_BadElement4_next);
        };
        static void CryptoPP__DL_BadElementdtor_DL_BadElement9_wrapper(struct CryptoPP::DL_BadElement* _this)
        {
           CryptoPP__DL_BadElementdtor_DL_BadElement9_user(_this, CryptoPP__DL_BadElementdtor_DL_BadElement9_next);
        };
        
        static int64_t CryptoPP__AdditiveCipherAbstractPolicyctor_AdditiveCipherAbstractPolicy1_wrapper(struct CryptoPP::AdditiveCipherAbstractPolicy* _this)
        {
           return CryptoPP__AdditiveCipherAbstractPolicyctor_AdditiveCipherAbstractPolicy1_user(_this, CryptoPP__AdditiveCipherAbstractPolicyctor_AdditiveCipherAbstractPolicy1_next);
        };
        static bool CryptoPP__AdditiveCipherAbstractPolicyCanOperateKeystream2_wrapper(struct CryptoPP::AdditiveCipherAbstractPolicy* _this)
        {
           return CryptoPP__AdditiveCipherAbstractPolicyCanOperateKeystream2_user(_this, CryptoPP__AdditiveCipherAbstractPolicyCanOperateKeystream2_next);
        };
        static unsigned int CryptoPP__AdditiveCipherAbstractPolicyGetOptimalBlockSize3_wrapper(struct CryptoPP::AdditiveCipherAbstractPolicy* _this)
        {
           return CryptoPP__AdditiveCipherAbstractPolicyGetOptimalBlockSize3_user(_this, CryptoPP__AdditiveCipherAbstractPolicyGetOptimalBlockSize3_next);
        };
        static void CryptoPP__AdditiveCipherAbstractPolicyOperateKeystream4_wrapper(struct CryptoPP::AdditiveCipherAbstractPolicy* _this, struct CryptoPP::KeystreamOperation arg_0, uint8_t* arg_1, uint8_t* arg_2, uint64_t arg_3)
        {
           CryptoPP__AdditiveCipherAbstractPolicyOperateKeystream4_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__AdditiveCipherAbstractPolicyOperateKeystream4_next);
        };
        static void CryptoPP__AdditiveCipherAbstractPolicySeekToIteration5_wrapper(struct CryptoPP::AdditiveCipherAbstractPolicy* _this, uint64_t arg_0)
        {
           CryptoPP__AdditiveCipherAbstractPolicySeekToIteration5_user(_this, arg_0, CryptoPP__AdditiveCipherAbstractPolicySeekToIteration5_next);
        };
        static int64_t CryptoPP__AdditiveCipherAbstractPolicydtor_AdditiveCipherAbstractPolicy6_wrapper(struct CryptoPP::AdditiveCipherAbstractPolicy* _this)
        {
           return CryptoPP__AdditiveCipherAbstractPolicydtor_AdditiveCipherAbstractPolicy6_user(_this, CryptoPP__AdditiveCipherAbstractPolicydtor_AdditiveCipherAbstractPolicy6_next);
        };
        
        static void CryptoPP__MeterFilterAddRangeToSkip1_wrapper(struct CryptoPP::MeterFilter* _this, unsigned int arg_0, uint64_t arg_1, uint64_t arg_2, bool arg_3)
        {
           CryptoPP__MeterFilterAddRangeToSkip1_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__MeterFilterAddRangeToSkip1_next);
        };
        static bool CryptoPP__MeterFilterIsolatedMessageSeriesEnd2_wrapper(struct CryptoPP::MeterFilter* _this, bool arg_0)
        {
           return CryptoPP__MeterFilterIsolatedMessageSeriesEnd2_user(_this, arg_0, CryptoPP__MeterFilterIsolatedMessageSeriesEnd2_next);
        };
        static uint64_t CryptoPP__MeterFilterPut23_wrapper(struct CryptoPP::MeterFilter* _this, uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
        {
           return CryptoPP__MeterFilterPut23_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__MeterFilterPut23_next);
        };
        static uint64_t CryptoPP__MeterFilterPutMaybeModifiable4_wrapper(struct CryptoPP::MeterFilter* _this, uint8_t* arg_0, char arg_1, int arg_2, bool arg_3, bool arg_4)
        {
           return CryptoPP__MeterFilterPutMaybeModifiable4_user(_this, arg_0, arg_1, arg_2, arg_3, arg_4, CryptoPP__MeterFilterPutMaybeModifiable4_next);
        };
        static uint64_t CryptoPP__MeterFilterPutModifiable25_wrapper(struct CryptoPP::MeterFilter* _this, uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
        {
           return CryptoPP__MeterFilterPutModifiable25_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__MeterFilterPutModifiable25_next);
        };
        static void CryptoPP__MeterFilterResetMeter6_wrapper(struct CryptoPP::MeterFilter* _this)
        {
           CryptoPP__MeterFilterResetMeter6_user(_this, CryptoPP__MeterFilterResetMeter6_next);
        };
        
        static void CryptoPP__RandomNumberSinkIsolatedInitialize1_wrapper(struct CryptoPP::RandomNumberSink* _this, struct CryptoPP::NameValuePairs* arg_0)
        {
           CryptoPP__RandomNumberSinkIsolatedInitialize1_user(_this, arg_0, CryptoPP__RandomNumberSinkIsolatedInitialize1_next);
        };
        static uint64_t CryptoPP__RandomNumberSinkPut22_wrapper(struct CryptoPP::RandomNumberSink* _this, uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
        {
           return CryptoPP__RandomNumberSinkPut22_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__RandomNumberSinkPut22_next);
        };
        
        static int64_t CryptoPP__FilterWithBufferedInputctor_FilterWithBufferedInput1_wrapper(struct CryptoPP::FilterWithBufferedInput* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           return CryptoPP__FilterWithBufferedInputctor_FilterWithBufferedInput1_user(_this, arg_0, CryptoPP__FilterWithBufferedInputctor_FilterWithBufferedInput1_next);
        };
        static int64_t CryptoPP__FilterWithBufferedInputctor_FilterWithBufferedInput2_wrapper(struct CryptoPP::FilterWithBufferedInput* _this, uint64_t arg_0, uint64_t arg_1, uint64_t arg_2, struct CryptoPP::BufferedTransformation* arg_3)
        {
           return CryptoPP__FilterWithBufferedInputctor_FilterWithBufferedInput2_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__FilterWithBufferedInputctor_FilterWithBufferedInput2_next);
        };
        static void CryptoPP__FilterWithBufferedInputFlushDerived3_wrapper(struct CryptoPP::FilterWithBufferedInput* _this)
        {
           CryptoPP__FilterWithBufferedInputFlushDerived3_user(_this, CryptoPP__FilterWithBufferedInputFlushDerived3_next);
        };
        static void CryptoPP__FilterWithBufferedInputForceNextPut4_wrapper(struct CryptoPP::FilterWithBufferedInput* _this)
        {
           CryptoPP__FilterWithBufferedInputForceNextPut4_user(_this, CryptoPP__FilterWithBufferedInputForceNextPut4_next);
        };
        static void CryptoPP__FilterWithBufferedInputInitializeDerived5_wrapper(struct CryptoPP::FilterWithBufferedInput* _this, struct CryptoPP::NameValuePairs* arg_0)
        {
           CryptoPP__FilterWithBufferedInputInitializeDerived5_user(_this, arg_0, CryptoPP__FilterWithBufferedInputInitializeDerived5_next);
        };
        static void CryptoPP__FilterWithBufferedInputInitializeDerivedAndReturnNewSizes6_wrapper(struct CryptoPP::FilterWithBufferedInput* _this, struct CryptoPP::NameValuePairs* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t* arg_3)
        {
           CryptoPP__FilterWithBufferedInputInitializeDerivedAndReturnNewSizes6_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__FilterWithBufferedInputInitializeDerivedAndReturnNewSizes6_next);
        };
        static bool CryptoPP__FilterWithBufferedInputIsolatedFlush7_wrapper(struct CryptoPP::FilterWithBufferedInput* _this, bool arg_0, bool arg_1)
        {
           return CryptoPP__FilterWithBufferedInputIsolatedFlush7_user(_this, arg_0, arg_1, CryptoPP__FilterWithBufferedInputIsolatedFlush7_next);
        };
        static void CryptoPP__FilterWithBufferedInputIsolatedInitialize8_wrapper(struct CryptoPP::FilterWithBufferedInput* _this, struct CryptoPP::NameValuePairs* arg_0)
        {
           CryptoPP__FilterWithBufferedInputIsolatedInitialize8_user(_this, arg_0, CryptoPP__FilterWithBufferedInputIsolatedInitialize8_next);
        };
        static int64_t CryptoPP__FilterWithBufferedInputNextPut9_wrapper(struct CryptoPP::FilterWithBufferedInput* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           return CryptoPP__FilterWithBufferedInputNextPut9_user(_this, arg_0, arg_1, CryptoPP__FilterWithBufferedInputNextPut9_next);
        };
        static void CryptoPP__FilterWithBufferedInputNextPutMaybeModifiable10_wrapper(struct CryptoPP::FilterWithBufferedInput* _this, uint8_t* arg_0, uint64_t arg_1, bool arg_2)
        {
           CryptoPP__FilterWithBufferedInputNextPutMaybeModifiable10_user(_this, arg_0, arg_1, arg_2, CryptoPP__FilterWithBufferedInputNextPutMaybeModifiable10_next);
        };
        static void CryptoPP__FilterWithBufferedInputNextPutModifiable11_wrapper(struct CryptoPP::FilterWithBufferedInput* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__FilterWithBufferedInputNextPutModifiable11_user(_this, arg_0, arg_1, CryptoPP__FilterWithBufferedInputNextPutModifiable11_next);
        };
        static void CryptoPP__FilterWithBufferedInputNextPutMultiple12_wrapper(struct CryptoPP::FilterWithBufferedInput* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__FilterWithBufferedInputNextPutMultiple12_user(_this, arg_0, arg_1, CryptoPP__FilterWithBufferedInputNextPutMultiple12_next);
        };
        static void CryptoPP__FilterWithBufferedInputNextPutSingle13_wrapper(struct CryptoPP::FilterWithBufferedInput* _this, uint8_t* arg_0)
        {
           CryptoPP__FilterWithBufferedInputNextPutSingle13_user(_this, arg_0, CryptoPP__FilterWithBufferedInputNextPutSingle13_next);
        };
        static uint64_t CryptoPP__FilterWithBufferedInputPut214_wrapper(struct CryptoPP::FilterWithBufferedInput* _this, uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
        {
           return CryptoPP__FilterWithBufferedInputPut214_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__FilterWithBufferedInputPut214_next);
        };
        static uint64_t CryptoPP__FilterWithBufferedInputPutMaybeModifiable15_wrapper(struct CryptoPP::FilterWithBufferedInput* _this, uint8_t* arg_0, char arg_1, int arg_2, bool arg_3, bool arg_4)
        {
           return CryptoPP__FilterWithBufferedInputPutMaybeModifiable15_user(_this, arg_0, arg_1, arg_2, arg_3, arg_4, CryptoPP__FilterWithBufferedInputPutMaybeModifiable15_next);
        };
        static uint64_t CryptoPP__FilterWithBufferedInputPutModifiable216_wrapper(struct CryptoPP::FilterWithBufferedInput* _this, uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
        {
           return CryptoPP__FilterWithBufferedInputPutModifiable216_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__FilterWithBufferedInputPutModifiable216_next);
        };
        static int64_t CryptoPP__FilterWithBufferedInputdtor_FilterWithBufferedInput17_wrapper(struct CryptoPP::FilterWithBufferedInput* _this)
        {
           return CryptoPP__FilterWithBufferedInputdtor_FilterWithBufferedInput17_user(_this, CryptoPP__FilterWithBufferedInputdtor_FilterWithBufferedInput17_next);
        };
        
        static int64_t CryptoPP__FilterWithBufferedInput__BlockQueuector_BlockQueue1_wrapper(struct CryptoPP::FilterWithBufferedInput::BlockQueue* _this)
        {
           return CryptoPP__FilterWithBufferedInput__BlockQueuector_BlockQueue1_user(_this, CryptoPP__FilterWithBufferedInput__BlockQueuector_BlockQueue1_next);
        };
        static uint64_t CryptoPP__FilterWithBufferedInput__BlockQueueCurrentSize2_wrapper(struct CryptoPP::FilterWithBufferedInput::BlockQueue* _this)
        {
           return CryptoPP__FilterWithBufferedInput__BlockQueueCurrentSize2_user(_this, CryptoPP__FilterWithBufferedInput__BlockQueueCurrentSize2_next);
        };
        static uint64_t CryptoPP__FilterWithBufferedInput__BlockQueueGetAll3_wrapper(struct CryptoPP::FilterWithBufferedInput::BlockQueue* _this, uint8_t* arg_0)
        {
           return CryptoPP__FilterWithBufferedInput__BlockQueueGetAll3_user(_this, arg_0, CryptoPP__FilterWithBufferedInput__BlockQueueGetAll3_next);
        };
        static uint8_t* CryptoPP__FilterWithBufferedInput__BlockQueueGetBlock4_wrapper(struct CryptoPP::FilterWithBufferedInput::BlockQueue* _this)
        {
           return CryptoPP__FilterWithBufferedInput__BlockQueueGetBlock4_user(_this, CryptoPP__FilterWithBufferedInput__BlockQueueGetBlock4_next);
        };
        static uint8_t* CryptoPP__FilterWithBufferedInput__BlockQueueGetContigousBlocks5_wrapper(struct CryptoPP::FilterWithBufferedInput::BlockQueue* _this, uint64_t* arg_0)
        {
           return CryptoPP__FilterWithBufferedInput__BlockQueueGetContigousBlocks5_user(_this, arg_0, CryptoPP__FilterWithBufferedInput__BlockQueueGetContigousBlocks5_next);
        };
        static void CryptoPP__FilterWithBufferedInput__BlockQueuePut6_wrapper(struct CryptoPP::FilterWithBufferedInput::BlockQueue* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__FilterWithBufferedInput__BlockQueuePut6_user(_this, arg_0, arg_1, CryptoPP__FilterWithBufferedInput__BlockQueuePut6_next);
        };
        static void CryptoPP__FilterWithBufferedInput__BlockQueueResetQueue7_wrapper(struct CryptoPP::FilterWithBufferedInput::BlockQueue* _this, uint64_t arg_0, uint64_t arg_1)
        {
           CryptoPP__FilterWithBufferedInput__BlockQueueResetQueue7_user(_this, arg_0, arg_1, CryptoPP__FilterWithBufferedInput__BlockQueueResetQueue7_next);
        };
        static int64_t CryptoPP__FilterWithBufferedInput__BlockQueuedtor_BlockQueue8_wrapper(struct CryptoPP::FilterWithBufferedInput::BlockQueue* _this)
        {
           return CryptoPP__FilterWithBufferedInput__BlockQueuedtor_BlockQueue8_user(_this, CryptoPP__FilterWithBufferedInput__BlockQueuedtor_BlockQueue8_next);
        };
        
        static bool CryptoPP__ProxyFilterIsolatedFlush1_wrapper(struct CryptoPP::ProxyFilter* _this, bool arg_0, bool arg_1)
        {
           return CryptoPP__ProxyFilterIsolatedFlush1_user(_this, arg_0, arg_1, CryptoPP__ProxyFilterIsolatedFlush1_next);
        };
        static void CryptoPP__ProxyFilterNextPutModifiable2_wrapper(struct CryptoPP::ProxyFilter* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__ProxyFilterNextPutModifiable2_user(_this, arg_0, arg_1, CryptoPP__ProxyFilterNextPutModifiable2_next);
        };
        static void CryptoPP__ProxyFilterNextPutMultiple3_wrapper(struct CryptoPP::ProxyFilter* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__ProxyFilterNextPutMultiple3_user(_this, arg_0, arg_1, CryptoPP__ProxyFilterNextPutMultiple3_next);
        };
        static int64_t CryptoPP__ProxyFilterctor_ProxyFilter4_wrapper(struct CryptoPP::ProxyFilter* _this, struct CryptoPP::BufferedTransformation* arg_0, uint64_t arg_1, uint64_t arg_2, struct CryptoPP::BufferedTransformation* arg_3)
        {
           return CryptoPP__ProxyFilterctor_ProxyFilter4_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__ProxyFilterctor_ProxyFilter4_next);
        };
        static void CryptoPP__ProxyFilterSetFilter5_wrapper(struct CryptoPP::ProxyFilter* _this, Filter* arg_0)
        {
           CryptoPP__ProxyFilterSetFilter5_user(_this, arg_0, CryptoPP__ProxyFilterSetFilter5_next);
        };
        static int64_t CryptoPP__ProxyFilterdtor_ProxyFilter6_wrapper(struct CryptoPP::ProxyFilter* _this)
        {
           return CryptoPP__ProxyFilterdtor_ProxyFilter6_user(_this, CryptoPP__ProxyFilterdtor_ProxyFilter6_next);
        };
        
        static int64_t CryptoPP__CFB_CipherAbstractPolicyctor_CFB_CipherAbstractPolicy1_wrapper(struct CryptoPP::CFB_CipherAbstractPolicy* _this)
        {
           return CryptoPP__CFB_CipherAbstractPolicyctor_CFB_CipherAbstractPolicy1_user(_this, CryptoPP__CFB_CipherAbstractPolicyctor_CFB_CipherAbstractPolicy1_next);
        };
        static bool CryptoPP__CFB_CipherAbstractPolicyCanIterate2_wrapper(struct CryptoPP::CFB_CipherAbstractPolicy* _this)
        {
           return CryptoPP__CFB_CipherAbstractPolicyCanIterate2_user(_this, CryptoPP__CFB_CipherAbstractPolicyCanIterate2_next);
        };
        static void CryptoPP__CFB_CipherAbstractPolicyIterate3_wrapper(struct CryptoPP::CFB_CipherAbstractPolicy* _this, uint8_t* arg_0, uint8_t* arg_1, struct CryptoPP::CipherDir arg_2, uint64_t arg_3)
        {
           CryptoPP__CFB_CipherAbstractPolicyIterate3_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__CFB_CipherAbstractPolicyIterate3_next);
        };
        static int64_t CryptoPP__CFB_CipherAbstractPolicydtor_CFB_CipherAbstractPolicy4_wrapper(struct CryptoPP::CFB_CipherAbstractPolicy* _this)
        {
           return CryptoPP__CFB_CipherAbstractPolicydtor_CFB_CipherAbstractPolicy4_user(_this, CryptoPP__CFB_CipherAbstractPolicydtor_CFB_CipherAbstractPolicy4_next);
        };
        
        static int64_t CryptoPP__CFB_ModePolicyctor_CFB_ModePolicy1_wrapper(struct CryptoPP::CFB_ModePolicy* _this)
        {
           return CryptoPP__CFB_ModePolicyctor_CFB_ModePolicy1_user(_this, CryptoPP__CFB_ModePolicyctor_CFB_ModePolicy1_next);
        };
        static void CryptoPP__CFB_ModePolicyCipherResynchronize2_wrapper(struct CryptoPP::CFB_ModePolicy* _this, uint8_t* arg_0)
        {
           CryptoPP__CFB_ModePolicyCipherResynchronize2_user(_this, arg_0, CryptoPP__CFB_ModePolicyCipherResynchronize2_next);
        };
        static unsigned int CryptoPP__CFB_ModePolicyGetBytesPerIteration3_wrapper(struct CryptoPP::CFB_ModePolicy* _this)
        {
           return CryptoPP__CFB_ModePolicyGetBytesPerIteration3_user(_this, CryptoPP__CFB_ModePolicyGetBytesPerIteration3_next);
        };
        static uint8_t* CryptoPP__CFB_ModePolicyGetRegisterBegin4_wrapper(struct CryptoPP::CFB_ModePolicy* _this)
        {
           return CryptoPP__CFB_ModePolicyGetRegisterBegin4_user(_this, CryptoPP__CFB_ModePolicyGetRegisterBegin4_next);
        };
        static struct CryptoPP::SimpleKeyingInterface::IV_Requirement CryptoPP__CFB_ModePolicyIVRequirement5_wrapper(struct CryptoPP::CFB_ModePolicy* _this)
        {
           return CryptoPP__CFB_ModePolicyIVRequirement5_user(_this, CryptoPP__CFB_ModePolicyIVRequirement5_next);
        };
        static void CryptoPP__CFB_ModePolicyResizeBuffers6_wrapper(struct CryptoPP::CFB_ModePolicy* _this)
        {
           CryptoPP__CFB_ModePolicyResizeBuffers6_user(_this, CryptoPP__CFB_ModePolicyResizeBuffers6_next);
        };
        static void CryptoPP__CFB_ModePolicySetFeedbackSize7_wrapper(struct CryptoPP::CFB_ModePolicy* _this, unsigned int arg_0)
        {
           CryptoPP__CFB_ModePolicySetFeedbackSize7_user(_this, arg_0, CryptoPP__CFB_ModePolicySetFeedbackSize7_next);
        };
        static char* CryptoPP__CFB_ModePolicyStaticAlgorithmName8_wrapper()
        {
           return CryptoPP__CFB_ModePolicyStaticAlgorithmName8_user(CryptoPP__CFB_ModePolicyStaticAlgorithmName8_next);
        };
        static void CryptoPP__CFB_ModePolicyTransformRegister9_wrapper(struct CryptoPP::CFB_ModePolicy* _this)
        {
           CryptoPP__CFB_ModePolicyTransformRegister9_user(_this, CryptoPP__CFB_ModePolicyTransformRegister9_next);
        };
        static int64_t CryptoPP__CFB_ModePolicydtor_CFB_ModePolicy10_wrapper(struct CryptoPP::CFB_ModePolicy* _this)
        {
           return CryptoPP__CFB_ModePolicydtor_CFB_ModePolicy10_user(_this, CryptoPP__CFB_ModePolicydtor_CFB_ModePolicy10_next);
        };
        
        static bool CryptoPP__PK_SignatureMessageEncodingMethodAllowNonrecoverablePart1_wrapper(struct CryptoPP::PK_SignatureMessageEncodingMethod* _this)
        {
           return CryptoPP__PK_SignatureMessageEncodingMethodAllowNonrecoverablePart1_user(_this, CryptoPP__PK_SignatureMessageEncodingMethodAllowNonrecoverablePart1_next);
        };
        static uint64_t CryptoPP__PK_SignatureMessageEncodingMethodMaxRecoverableLength2_wrapper(struct CryptoPP::PK_SignatureMessageEncodingMethod* _this, uint64_t arg_0, uint64_t arg_1, uint64_t arg_2)
        {
           return CryptoPP__PK_SignatureMessageEncodingMethodMaxRecoverableLength2_user(_this, arg_0, arg_1, arg_2, CryptoPP__PK_SignatureMessageEncodingMethodMaxRecoverableLength2_next);
        };
        static uint64_t CryptoPP__PK_SignatureMessageEncodingMethodMinRepresentativeBitLength3_wrapper(struct CryptoPP::PK_SignatureMessageEncodingMethod* _this, uint64_t arg_0, uint64_t arg_1)
        {
           return CryptoPP__PK_SignatureMessageEncodingMethodMinRepresentativeBitLength3_user(_this, arg_0, arg_1, CryptoPP__PK_SignatureMessageEncodingMethodMinRepresentativeBitLength3_next);
        };
        static int64_t CryptoPP__PK_SignatureMessageEncodingMethodctor_PK_SignatureMessageEncodingMethod4_wrapper(struct CryptoPP::PK_SignatureMessageEncodingMethod* _this)
        {
           return CryptoPP__PK_SignatureMessageEncodingMethodctor_PK_SignatureMessageEncodingMethod4_user(_this, CryptoPP__PK_SignatureMessageEncodingMethodctor_PK_SignatureMessageEncodingMethod4_next);
        };
        static void CryptoPP__PK_SignatureMessageEncodingMethodProcessSemisignature5_wrapper(struct CryptoPP::PK_SignatureMessageEncodingMethod* _this, struct CryptoPP::HashTransformation* arg_0, uint8_t* arg_1, uint64_t arg_2)
        {
           CryptoPP__PK_SignatureMessageEncodingMethodProcessSemisignature5_user(_this, arg_0, arg_1, arg_2, CryptoPP__PK_SignatureMessageEncodingMethodProcessSemisignature5_next);
        };
        static bool CryptoPP__PK_SignatureMessageEncodingMethodRecoverablePartFirst6_wrapper(struct CryptoPP::PK_SignatureMessageEncodingMethod* _this)
        {
           return CryptoPP__PK_SignatureMessageEncodingMethodRecoverablePartFirst6_user(_this, CryptoPP__PK_SignatureMessageEncodingMethodRecoverablePartFirst6_next);
        };
        static int64_t CryptoPP__PK_SignatureMessageEncodingMethoddtor_PK_SignatureMessageEncodingMethod7_wrapper(struct CryptoPP::PK_SignatureMessageEncodingMethod* _this)
        {
           return CryptoPP__PK_SignatureMessageEncodingMethoddtor_PK_SignatureMessageEncodingMethod7_user(_this, CryptoPP__PK_SignatureMessageEncodingMethoddtor_PK_SignatureMessageEncodingMethod7_next);
        };
        
        static void CryptoPP__DecodingResultctor_DecodingResult2_wrapper(struct CryptoPP::DecodingResult* _this, uint64_t len)
        {
           CryptoPP__DecodingResultctor_DecodingResult2_user(_this, len, CryptoPP__DecodingResultctor_DecodingResult2_next);
        };
        static void CryptoPP__DecodingResultctor_DecodingResult4_wrapper(struct CryptoPP::DecodingResult* _this)
        {
           CryptoPP__DecodingResultctor_DecodingResult4_user(_this, CryptoPP__DecodingResultctor_DecodingResult4_next);
        };
        
        static int64_t CryptoPP__LazyPutterctor_LazyPutter1_wrapper(struct CryptoPP::LazyPutter* _this, struct CryptoPP::ByteQueue* arg_0, uint8_t* arg_1, uint64_t arg_2)
        {
           return CryptoPP__LazyPutterctor_LazyPutter1_user(_this, arg_0, arg_1, arg_2, CryptoPP__LazyPutterctor_LazyPutter1_next);
        };
        static int64_t CryptoPP__LazyPutterdtor_LazyPutter2_wrapper(struct CryptoPP::LazyPutter* _this)
        {
           return CryptoPP__LazyPutterdtor_LazyPutter2_user(_this, CryptoPP__LazyPutterdtor_LazyPutter2_next);
        };
        
        static void CryptoPP__AlgorithmParametersBasector_AlgorithmParametersBase2_wrapper(struct CryptoPP::AlgorithmParametersBase* _this, struct CryptoPP::AlgorithmParametersBase* __that)
        {
           CryptoPP__AlgorithmParametersBasector_AlgorithmParametersBase2_user(_this, __that, CryptoPP__AlgorithmParametersBasector_AlgorithmParametersBase2_next);
        };
        static void CryptoPP__AlgorithmParametersBasector_AlgorithmParametersBase4_wrapper(struct CryptoPP::AlgorithmParametersBase* _this, char* name, bool throwIfNotUsed)
        {
           CryptoPP__AlgorithmParametersBasector_AlgorithmParametersBase4_user(_this, name, throwIfNotUsed, CryptoPP__AlgorithmParametersBasector_AlgorithmParametersBase4_next);
        };
        static bool CryptoPP__AlgorithmParametersBaseGetVoidValue5_wrapper(struct CryptoPP::AlgorithmParametersBase* _this, char* arg_0, struct type_info* arg_1, void* arg_2)
        {
           return CryptoPP__AlgorithmParametersBaseGetVoidValue5_user(_this, arg_0, arg_1, arg_2, CryptoPP__AlgorithmParametersBaseGetVoidValue5_next);
        };
        static void CryptoPP__AlgorithmParametersBasedtor_AlgorithmParametersBase10_wrapper(struct CryptoPP::AlgorithmParametersBase* _this)
        {
           CryptoPP__AlgorithmParametersBasedtor_AlgorithmParametersBase10_user(_this, CryptoPP__AlgorithmParametersBasedtor_AlgorithmParametersBase10_next);
        };
        
        static void CryptoPP__AlgorithmParametersBase__ParameterNotUsedctor_ParameterNotUsed2_wrapper(struct CryptoPP::AlgorithmParametersBase::ParameterNotUsed* _this, struct CryptoPP::AlgorithmParametersBase::ParameterNotUsed* __that)
        {
           CryptoPP__AlgorithmParametersBase__ParameterNotUsedctor_ParameterNotUsed2_user(_this, __that, CryptoPP__AlgorithmParametersBase__ParameterNotUsedctor_ParameterNotUsed2_next);
        };
        static void CryptoPP__AlgorithmParametersBase__ParameterNotUsedctor_ParameterNotUsed4_wrapper(struct CryptoPP::AlgorithmParametersBase::ParameterNotUsed* _this, char* name)
        {
           CryptoPP__AlgorithmParametersBase__ParameterNotUsedctor_ParameterNotUsed4_user(_this, name, CryptoPP__AlgorithmParametersBase__ParameterNotUsedctor_ParameterNotUsed4_next);
        };
        static void CryptoPP__AlgorithmParametersBase__ParameterNotUseddtor_ParameterNotUsed9_wrapper(struct CryptoPP::AlgorithmParametersBase::ParameterNotUsed* _this)
        {
           CryptoPP__AlgorithmParametersBase__ParameterNotUseddtor_ParameterNotUsed9_user(_this, CryptoPP__AlgorithmParametersBase__ParameterNotUseddtor_ParameterNotUsed9_next);
        };
        
        static bool CryptoPP__NullNameValuePairsGetVoidValue2_wrapper(struct CryptoPP::NullNameValuePairs* _this, char* name, struct type_info* valueType, void* pValue)
        {
           return CryptoPP__NullNameValuePairsGetVoidValue2_user(_this, name, valueType, pValue, CryptoPP__NullNameValuePairsGetVoidValue2_next);
        };
        static void CryptoPP__NullNameValuePairsctor_NullNameValuePairs4_wrapper(struct CryptoPP::NullNameValuePairs* _this, struct CryptoPP::NullNameValuePairs* __that)
        {
           CryptoPP__NullNameValuePairsctor_NullNameValuePairs4_user(_this, __that, CryptoPP__NullNameValuePairsctor_NullNameValuePairs4_next);
        };
        static int64_t CryptoPP__NullNameValuePairsctor_NullNameValuePairs5_wrapper(struct CryptoPP::NullNameValuePairs* _this)
        {
           return CryptoPP__NullNameValuePairsctor_NullNameValuePairs5_user(_this, CryptoPP__NullNameValuePairsctor_NullNameValuePairs5_next);
        };
        static void CryptoPP__NullNameValuePairsdtor_NullNameValuePairs10_wrapper(struct CryptoPP::NullNameValuePairs* _this)
        {
           CryptoPP__NullNameValuePairsdtor_NullNameValuePairs10_user(_this, CryptoPP__NullNameValuePairsdtor_NullNameValuePairs10_next);
        };
        
        static int64_t CryptoPP__CTR_ModePolicyctor_CTR_ModePolicy1_wrapper(struct CryptoPP::CTR_ModePolicy* _this)
        {
           return CryptoPP__CTR_ModePolicyctor_CTR_ModePolicy1_user(_this, CryptoPP__CTR_ModePolicyctor_CTR_ModePolicy1_next);
        };
        static bool CryptoPP__CTR_ModePolicyCanOperateKeystream2_wrapper(struct CryptoPP::CTR_ModePolicy* _this)
        {
           return CryptoPP__CTR_ModePolicyCanOperateKeystream2_user(_this, CryptoPP__CTR_ModePolicyCanOperateKeystream2_next);
        };
        static void CryptoPP__CTR_ModePolicyCipherResynchronize3_wrapper(struct CryptoPP::CTR_ModePolicy* _this, uint8_t* arg_0, uint8_t* arg_1)
        {
           CryptoPP__CTR_ModePolicyCipherResynchronize3_user(_this, arg_0, arg_1, CryptoPP__CTR_ModePolicyCipherResynchronize3_next);
        };
        static unsigned int CryptoPP__CTR_ModePolicyGetAlignment4_wrapper(struct CryptoPP::CTR_ModePolicy* _this)
        {
           return CryptoPP__CTR_ModePolicyGetAlignment4_user(_this, CryptoPP__CTR_ModePolicyGetAlignment4_next);
        };
        static unsigned int CryptoPP__CTR_ModePolicyGetBytesPerIteration5_wrapper(struct CryptoPP::CTR_ModePolicy* _this)
        {
           return CryptoPP__CTR_ModePolicyGetBytesPerIteration5_user(_this, CryptoPP__CTR_ModePolicyGetBytesPerIteration5_next);
        };
        static unsigned int CryptoPP__CTR_ModePolicyGetIterationsToBuffer6_wrapper(struct CryptoPP::CTR_ModePolicy* _this)
        {
           return CryptoPP__CTR_ModePolicyGetIterationsToBuffer6_user(_this, CryptoPP__CTR_ModePolicyGetIterationsToBuffer6_next);
        };
        static struct CryptoPP::SimpleKeyingInterface::IV_Requirement CryptoPP__CTR_ModePolicyIVRequirement7_wrapper(struct CryptoPP::CTR_ModePolicy* _this)
        {
           return CryptoPP__CTR_ModePolicyIVRequirement7_user(_this, CryptoPP__CTR_ModePolicyIVRequirement7_next);
        };
        static void CryptoPP__CTR_ModePolicyOperateKeystream8_wrapper(struct CryptoPP::CTR_ModePolicy* _this, struct CryptoPP::KeystreamOperation arg_0, uint8_t* arg_1, uint8_t* arg_2, uint64_t arg_3)
        {
           CryptoPP__CTR_ModePolicyOperateKeystream8_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__CTR_ModePolicyOperateKeystream8_next);
        };
        static void CryptoPP__CTR_ModePolicyProcessMultipleBlocks9_wrapper(struct CryptoPP::CTR_ModePolicy* _this, uint8_t* arg_0, uint8_t* arg_1, uint64_t arg_2)
        {
           CryptoPP__CTR_ModePolicyProcessMultipleBlocks9_user(_this, arg_0, arg_1, arg_2, CryptoPP__CTR_ModePolicyProcessMultipleBlocks9_next);
        };
        static void CryptoPP__CTR_ModePolicySeekToIteration10_wrapper(struct CryptoPP::CTR_ModePolicy* _this, uint64_t arg_0)
        {
           CryptoPP__CTR_ModePolicySeekToIteration10_user(_this, arg_0, CryptoPP__CTR_ModePolicySeekToIteration10_next);
        };
        static char* CryptoPP__CTR_ModePolicyStaticAlgorithmName11_wrapper()
        {
           return CryptoPP__CTR_ModePolicyStaticAlgorithmName11_user(CryptoPP__CTR_ModePolicyStaticAlgorithmName11_next);
        };
        static void CryptoPP__CTR_ModePolicyWriteKeystream12_wrapper(struct CryptoPP::CTR_ModePolicy* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__CTR_ModePolicyWriteKeystream12_user(_this, arg_0, arg_1, CryptoPP__CTR_ModePolicyWriteKeystream12_next);
        };
        static int64_t CryptoPP__CTR_ModePolicydtor_CTR_ModePolicy13_wrapper(struct CryptoPP::CTR_ModePolicy* _this)
        {
           return CryptoPP__CTR_ModePolicydtor_CTR_ModePolicy13_user(_this, CryptoPP__CTR_ModePolicydtor_CTR_ModePolicy13_next);
        };
        
        static void CryptoPP__OFB_ModePolicyCipherResynchronize1_wrapper(struct CryptoPP::OFB_ModePolicy* _this, uint8_t* arg_0, uint8_t* arg_1)
        {
           CryptoPP__OFB_ModePolicyCipherResynchronize1_user(_this, arg_0, arg_1, CryptoPP__OFB_ModePolicyCipherResynchronize1_next);
        };
        static unsigned int CryptoPP__OFB_ModePolicyGetBytesPerIteration2_wrapper(struct CryptoPP::OFB_ModePolicy* _this)
        {
           return CryptoPP__OFB_ModePolicyGetBytesPerIteration2_user(_this, CryptoPP__OFB_ModePolicyGetBytesPerIteration2_next);
        };
        static unsigned int CryptoPP__OFB_ModePolicyGetIterationsToBuffer3_wrapper(struct CryptoPP::OFB_ModePolicy* _this)
        {
           return CryptoPP__OFB_ModePolicyGetIterationsToBuffer3_user(_this, CryptoPP__OFB_ModePolicyGetIterationsToBuffer3_next);
        };
        static struct CryptoPP::SimpleKeyingInterface::IV_Requirement CryptoPP__OFB_ModePolicyIVRequirement4_wrapper(struct CryptoPP::OFB_ModePolicy* _this)
        {
           return CryptoPP__OFB_ModePolicyIVRequirement4_user(_this, CryptoPP__OFB_ModePolicyIVRequirement4_next);
        };
        static int64_t CryptoPP__OFB_ModePolicyctor_OFB_ModePolicy5_wrapper(struct CryptoPP::OFB_ModePolicy* _this)
        {
           return CryptoPP__OFB_ModePolicyctor_OFB_ModePolicy5_user(_this, CryptoPP__OFB_ModePolicyctor_OFB_ModePolicy5_next);
        };
        static char* CryptoPP__OFB_ModePolicyStaticAlgorithmName6_wrapper()
        {
           return CryptoPP__OFB_ModePolicyStaticAlgorithmName6_user(CryptoPP__OFB_ModePolicyStaticAlgorithmName6_next);
        };
        static void CryptoPP__OFB_ModePolicyWriteKeystream7_wrapper(struct CryptoPP::OFB_ModePolicy* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__OFB_ModePolicyWriteKeystream7_user(_this, arg_0, arg_1, CryptoPP__OFB_ModePolicyWriteKeystream7_next);
        };
        static int64_t CryptoPP__OFB_ModePolicydtor_OFB_ModePolicy8_wrapper(struct CryptoPP::OFB_ModePolicy* _this)
        {
           return CryptoPP__OFB_ModePolicydtor_OFB_ModePolicy8_user(_this, CryptoPP__OFB_ModePolicydtor_OFB_ModePolicy8_next);
        };
        
        static void CryptoPP__DL_SymmetricEncryptionAlgorithmctor_DL_SymmetricEncryptionAlgorithm2_wrapper(struct CryptoPP::DL_SymmetricEncryptionAlgorithm* _this)
        {
           CryptoPP__DL_SymmetricEncryptionAlgorithmctor_DL_SymmetricEncryptionAlgorithm2_user(_this, CryptoPP__DL_SymmetricEncryptionAlgorithmctor_DL_SymmetricEncryptionAlgorithm2_next);
        };
        
        static int64_t CryptoPP__DL_Algorithm_GDSASign1_wrapper(int64_t b, struct CryptoPP::Integer* arg_0, int64_t arg_1)
        {
           return CryptoPP__DL_Algorithm_GDSASign1_user(b, arg_0, arg_1, CryptoPP__DL_Algorithm_GDSASign1_next);
        };
        static int64_t CryptoPP__DL_Algorithm_GDSAVerify2_wrapper(struct CryptoPP::Integer* a, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__DL_Algorithm_GDSAVerify2_user(a, arg_0, CryptoPP__DL_Algorithm_GDSAVerify2_next);
        };
        
        static int64_t CryptoPP__X917RNGctor_X917RNG1_wrapper(struct CryptoPP::X917RNG* _this, struct CryptoPP::BlockTransformation* arg_0, uint8_t* arg_1, uint8_t* arg_2)
        {
           return CryptoPP__X917RNGctor_X917RNG1_user(_this, arg_0, arg_1, arg_2, CryptoPP__X917RNGctor_X917RNG1_next);
        };
        static int64_t CryptoPP__X917RNGdtor_X917RNG2_wrapper(struct CryptoPP::X917RNG* _this)
        {
           return CryptoPP__X917RNGdtor_X917RNG2_user(_this, CryptoPP__X917RNGdtor_X917RNG2_next);
        };
        
        static void CryptoPP__DL_KeyDerivationAlgorithmctor_DL_KeyDerivationAlgorithm2_wrapper(struct CryptoPP::DL_KeyDerivationAlgorithm<CryptoPP::ECPPoint>* _this)
        {
           CryptoPP__DL_KeyDerivationAlgorithmctor_DL_KeyDerivationAlgorithm2_user(_this, CryptoPP__DL_KeyDerivationAlgorithmctor_DL_KeyDerivationAlgorithm2_next);
        };
        
        static void CryptoPP__InvalidArgumentctor_InvalidArgument2_wrapper(struct CryptoPP::InvalidArgument* _this, struct CryptoPP::InvalidArgument* __that)
        {
           CryptoPP__InvalidArgumentctor_InvalidArgument2_user(_this, __that, CryptoPP__InvalidArgumentctor_InvalidArgument2_next);
        };
        static void CryptoPP__InvalidArgumentctor_InvalidArgument4_wrapper(struct CryptoPP::InvalidArgument* _this, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* s)
        {
           CryptoPP__InvalidArgumentctor_InvalidArgument4_user(_this, s, CryptoPP__InvalidArgumentctor_InvalidArgument4_next);
        };
        static void CryptoPP__InvalidArgumentdtor_InvalidArgument9_wrapper(struct CryptoPP::InvalidArgument* _this)
        {
           CryptoPP__InvalidArgumentdtor_InvalidArgument9_user(_this, CryptoPP__InvalidArgumentdtor_InvalidArgument9_next);
        };
        
        static int64_t CryptoPP__BERDecodeErrctor_BERDecodeErr1_wrapper(struct CryptoPP::BERDecodeErr* _this, struct CryptoPP::BERDecodeErr* arg_0)
        {
           return CryptoPP__BERDecodeErrctor_BERDecodeErr1_user(_this, arg_0, CryptoPP__BERDecodeErrctor_BERDecodeErr1_next);
        };
        static int64_t CryptoPP__BERDecodeErrctor_BERDecodeErr2_wrapper(struct CryptoPP::BERDecodeErr* _this)
        {
           return CryptoPP__BERDecodeErrctor_BERDecodeErr2_user(_this, CryptoPP__BERDecodeErrctor_BERDecodeErr2_next);
        };
        static int64_t CryptoPP__BERDecodeErrdtor_BERDecodeErr3_wrapper(struct CryptoPP::BERDecodeErr* _this)
        {
           return CryptoPP__BERDecodeErrdtor_BERDecodeErr3_user(_this, CryptoPP__BERDecodeErrdtor_BERDecodeErr3_next);
        };
        
        static uint64_t CryptoPP__MicrosoftCryptoProviderGetProviderHandle1_wrapper(struct CryptoPP::MicrosoftCryptoProvider* _this)
        {
           return CryptoPP__MicrosoftCryptoProviderGetProviderHandle1_user(_this, CryptoPP__MicrosoftCryptoProviderGetProviderHandle1_next);
        };
        static int64_t CryptoPP__MicrosoftCryptoProviderctor_MicrosoftCryptoProvider2_wrapper(struct CryptoPP::MicrosoftCryptoProvider* _this)
        {
           return CryptoPP__MicrosoftCryptoProviderctor_MicrosoftCryptoProvider2_user(_this, CryptoPP__MicrosoftCryptoProviderctor_MicrosoftCryptoProvider2_next);
        };
        static int64_t CryptoPP__MicrosoftCryptoProviderdtor_MicrosoftCryptoProvider3_wrapper(struct CryptoPP::MicrosoftCryptoProvider* _this)
        {
           return CryptoPP__MicrosoftCryptoProviderdtor_MicrosoftCryptoProvider3_user(_this, CryptoPP__MicrosoftCryptoProviderdtor_MicrosoftCryptoProvider3_next);
        };
        
        static struct CryptoPP::CryptoMaterial* CryptoPP__KeyAgreementAlgorithmAccessMaterial1_wrapper(struct CryptoPP::KeyAgreementAlgorithm* _this)
        {
           return CryptoPP__KeyAgreementAlgorithmAccessMaterial1_user(_this, CryptoPP__KeyAgreementAlgorithmAccessMaterial1_next);
        };
        static struct CryptoPP::CryptoParameters* CryptoPP__KeyAgreementAlgorithmGetCryptoParameters2_wrapper(struct CryptoPP::KeyAgreementAlgorithm* _this)
        {
           return CryptoPP__KeyAgreementAlgorithmGetCryptoParameters2_user(_this, CryptoPP__KeyAgreementAlgorithmGetCryptoParameters2_next);
        };
        static struct CryptoPP::CryptoMaterial* CryptoPP__KeyAgreementAlgorithmGetMaterial3_wrapper(struct CryptoPP::KeyAgreementAlgorithm* _this)
        {
           return CryptoPP__KeyAgreementAlgorithmGetMaterial3_user(_this, CryptoPP__KeyAgreementAlgorithmGetMaterial3_next);
        };
        static int64_t CryptoPP__KeyAgreementAlgorithmctor_KeyAgreementAlgorithm4_wrapper(struct CryptoPP::KeyAgreementAlgorithm* _this)
        {
           return CryptoPP__KeyAgreementAlgorithmctor_KeyAgreementAlgorithm4_user(_this, CryptoPP__KeyAgreementAlgorithmctor_KeyAgreementAlgorithm4_next);
        };
        static int64_t CryptoPP__KeyAgreementAlgorithmdtor_KeyAgreementAlgorithm5_wrapper(struct CryptoPP::KeyAgreementAlgorithm* _this)
        {
           return CryptoPP__KeyAgreementAlgorithmdtor_KeyAgreementAlgorithm5_user(_this, CryptoPP__KeyAgreementAlgorithmdtor_KeyAgreementAlgorithm5_next);
        };
        
        static void CryptoPP__SimpleKeyAgreementDomainGenerateKeyPair1_wrapper(struct CryptoPP::SimpleKeyAgreementDomain* _this, struct CryptoPP::RandomNumberGenerator* arg_0, uint8_t* arg_1, uint8_t* arg_2)
        {
           CryptoPP__SimpleKeyAgreementDomainGenerateKeyPair1_user(_this, arg_0, arg_1, arg_2, CryptoPP__SimpleKeyAgreementDomainGenerateKeyPair1_next);
        };
        static int64_t CryptoPP__SimpleKeyAgreementDomainctor_SimpleKeyAgreementDomain2_wrapper(struct CryptoPP::SimpleKeyAgreementDomain* _this)
        {
           return CryptoPP__SimpleKeyAgreementDomainctor_SimpleKeyAgreementDomain2_user(_this, CryptoPP__SimpleKeyAgreementDomainctor_SimpleKeyAgreementDomain2_next);
        };
        static int64_t CryptoPP__SimpleKeyAgreementDomaindtor_SimpleKeyAgreementDomain3_wrapper(struct CryptoPP::SimpleKeyAgreementDomain* _this)
        {
           return CryptoPP__SimpleKeyAgreementDomaindtor_SimpleKeyAgreementDomain3_user(_this, CryptoPP__SimpleKeyAgreementDomaindtor_SimpleKeyAgreementDomain3_next);
        };
        
        static int64_t CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimector_DL_GroupParameters_GFP_DefaultSafePrime1_wrapper(struct CryptoPP::DL_GroupParameters_GFP_DefaultSafePrime* _this, struct CryptoPP::DL_GroupParameters_GFP_DefaultSafePrime* arg_0)
        {
           return CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimector_DL_GroupParameters_GFP_DefaultSafePrime1_user(_this, arg_0, CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimector_DL_GroupParameters_GFP_DefaultSafePrime1_next);
        };
        static int64_t CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimector_DL_GroupParameters_GFP_DefaultSafePrime2_wrapper(struct CryptoPP::DL_GroupParameters_GFP_DefaultSafePrime* _this)
        {
           return CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimector_DL_GroupParameters_GFP_DefaultSafePrime2_user(_this, CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimector_DL_GroupParameters_GFP_DefaultSafePrime2_next);
        };
        static unsigned int CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimeGetDefaultSubgroupOrderSize3_wrapper(struct CryptoPP::DL_GroupParameters_GFP_DefaultSafePrime* _this, unsigned int arg_0)
        {
           return CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimeGetDefaultSubgroupOrderSize3_user(_this, arg_0, CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimeGetDefaultSubgroupOrderSize3_next);
        };
        static int64_t CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimedtor_DL_GroupParameters_GFP_DefaultSafePrime4_wrapper(struct CryptoPP::DL_GroupParameters_GFP_DefaultSafePrime* _this)
        {
           return CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimedtor_DL_GroupParameters_GFP_DefaultSafePrime4_user(_this, CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimedtor_DL_GroupParameters_GFP_DefaultSafePrime4_next);
        };
        
        static void CryptoPP__NotImplementedctor_NotImplemented2_wrapper(struct CryptoPP::NotImplemented* _this, struct CryptoPP::NotImplemented* __that)
        {
           CryptoPP__NotImplementedctor_NotImplemented2_user(_this, __that, CryptoPP__NotImplementedctor_NotImplemented2_next);
        };
        static void CryptoPP__NotImplementedctor_NotImplemented4_wrapper(struct CryptoPP::NotImplemented* _this, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* s)
        {
           CryptoPP__NotImplementedctor_NotImplemented4_user(_this, s, CryptoPP__NotImplementedctor_NotImplemented4_next);
        };
        static void CryptoPP__NotImplementeddtor_NotImplemented9_wrapper(struct CryptoPP::NotImplemented* _this)
        {
           CryptoPP__NotImplementeddtor_NotImplemented9_user(_this, CryptoPP__NotImplementeddtor_NotImplemented9_next);
        };
        
        static int64_t CryptoPP__CannotFlushctor_CannotFlush1_wrapper(struct CryptoPP::CannotFlush* _this, struct CryptoPP::CannotFlush* arg_0)
        {
           return CryptoPP__CannotFlushctor_CannotFlush1_user(_this, arg_0, CryptoPP__CannotFlushctor_CannotFlush1_next);
        };
        static int64_t CryptoPP__CannotFlushdtor_CannotFlush2_wrapper(struct CryptoPP::CannotFlush* _this)
        {
           return CryptoPP__CannotFlushdtor_CannotFlush2_user(_this, CryptoPP__CannotFlushdtor_CannotFlush2_next);
        };
        
        static void CryptoPP__FilterPutSpaceHelperctor_FilterPutSpaceHelper2_wrapper(struct CryptoPP::FilterPutSpaceHelper* _this)
        {
           CryptoPP__FilterPutSpaceHelperctor_FilterPutSpaceHelper2_user(_this, CryptoPP__FilterPutSpaceHelperctor_FilterPutSpaceHelper2_next);
        };
        static void CryptoPP__FilterPutSpaceHelperdtor_FilterPutSpaceHelper4_wrapper(struct CryptoPP::FilterPutSpaceHelper* _this)
        {
           CryptoPP__FilterPutSpaceHelperdtor_FilterPutSpaceHelper4_user(_this, CryptoPP__FilterPutSpaceHelperdtor_FilterPutSpaceHelper4_next);
        };
        
        static uint8_t* CryptoPP__HashFilterCreatePutSpace1_wrapper(struct CryptoPP::HashFilter* _this, uint64_t* arg_0)
        {
           return CryptoPP__HashFilterCreatePutSpace1_user(_this, arg_0, CryptoPP__HashFilterCreatePutSpace1_next);
        };
        static int64_t CryptoPP__HashFilterctor_HashFilter2_wrapper(struct CryptoPP::HashFilter* _this, struct CryptoPP::HashTransformation* arg_0, struct CryptoPP::BufferedTransformation* arg_1, bool arg_2, int arg_3)
        {
           return CryptoPP__HashFilterctor_HashFilter2_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__HashFilterctor_HashFilter2_next);
        };
        static void CryptoPP__HashFilterIsolatedInitialize3_wrapper(struct CryptoPP::HashFilter* _this, struct CryptoPP::NameValuePairs* arg_0)
        {
           CryptoPP__HashFilterIsolatedInitialize3_user(_this, arg_0, CryptoPP__HashFilterIsolatedInitialize3_next);
        };
        static uint64_t CryptoPP__HashFilterPut24_wrapper(struct CryptoPP::HashFilter* _this, uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
        {
           return CryptoPP__HashFilterPut24_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__HashFilterPut24_next);
        };
        static int64_t CryptoPP__HashFilterdtor_HashFilter5_wrapper(struct CryptoPP::HashFilter* _this)
        {
           return CryptoPP__HashFilterdtor_HashFilter5_user(_this, CryptoPP__HashFilterdtor_HashFilter5_next);
        };
        
        static int64_t CryptoPP__PK_DeterministicSignatureMessageEncodingMethodctor_PK_DeterministicSignatureMessageEncodingMethod1_wrapper(struct CryptoPP::PK_DeterministicSignatureMessageEncodingMethod* _this)
        {
           return CryptoPP__PK_DeterministicSignatureMessageEncodingMethodctor_PK_DeterministicSignatureMessageEncodingMethod1_user(_this, CryptoPP__PK_DeterministicSignatureMessageEncodingMethodctor_PK_DeterministicSignatureMessageEncodingMethod1_next);
        };
        static int64_t CryptoPP__PK_DeterministicSignatureMessageEncodingMethodVerifyMessageRepresentative2_wrapper(void* Buf1, struct CryptoPP* arg_0)
        {
           return CryptoPP__PK_DeterministicSignatureMessageEncodingMethodVerifyMessageRepresentative2_user(Buf1, arg_0, CryptoPP__PK_DeterministicSignatureMessageEncodingMethodVerifyMessageRepresentative2_next);
        };
        static int64_t CryptoPP__PK_DeterministicSignatureMessageEncodingMethoddtor_PK_DeterministicSignatureMessageEncodingMethod3_wrapper(struct CryptoPP::PK_DeterministicSignatureMessageEncodingMethod* _this)
        {
           return CryptoPP__PK_DeterministicSignatureMessageEncodingMethoddtor_PK_DeterministicSignatureMessageEncodingMethod3_user(_this, CryptoPP__PK_DeterministicSignatureMessageEncodingMethoddtor_PK_DeterministicSignatureMessageEncodingMethod3_next);
        };
        
        static int64_t CryptoPP__DL_SignatureMessageEncodingMethod_DSAComputeMessageRepresentative1_wrapper(int64_t arg_0, int64_t arg_1, int arg_2, int arg_3, uint8_t* arg_4, struct CryptoPP* arg_5)
        {
           return CryptoPP__DL_SignatureMessageEncodingMethod_DSAComputeMessageRepresentative1_user(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, CryptoPP__DL_SignatureMessageEncodingMethod_DSAComputeMessageRepresentative1_next);
        };
        static int64_t CryptoPP__DL_SignatureMessageEncodingMethod_DSActor_DL_SignatureMessageEncodingMethod_DSA2_wrapper(struct CryptoPP::DL_SignatureMessageEncodingMethod_DSA* _this)
        {
           return CryptoPP__DL_SignatureMessageEncodingMethod_DSActor_DL_SignatureMessageEncodingMethod_DSA2_user(_this, CryptoPP__DL_SignatureMessageEncodingMethod_DSActor_DL_SignatureMessageEncodingMethod_DSA2_next);
        };
        static int64_t CryptoPP__DL_SignatureMessageEncodingMethod_DSAdtor_DL_SignatureMessageEncodingMethod_DSA3_wrapper(struct CryptoPP::DL_SignatureMessageEncodingMethod_DSA* _this)
        {
           return CryptoPP__DL_SignatureMessageEncodingMethod_DSAdtor_DL_SignatureMessageEncodingMethod_DSA3_user(_this, CryptoPP__DL_SignatureMessageEncodingMethod_DSAdtor_DL_SignatureMessageEncodingMethod_DSA3_next);
        };
        
        static int64_t CryptoPP__ArrayXorSinkctor_ArrayXorSink1_wrapper(struct CryptoPP::ArrayXorSink* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           return CryptoPP__ArrayXorSinkctor_ArrayXorSink1_user(_this, arg_0, arg_1, CryptoPP__ArrayXorSinkctor_ArrayXorSink1_next);
        };
        static uint8_t* CryptoPP__ArrayXorSinkCreatePutSpace2_wrapper(struct CryptoPP::ArrayXorSink* _this, uint64_t* arg_0)
        {
           return CryptoPP__ArrayXorSinkCreatePutSpace2_user(_this, arg_0, CryptoPP__ArrayXorSinkCreatePutSpace2_next);
        };
        static uint64_t CryptoPP__ArrayXorSinkPut23_wrapper(struct CryptoPP::ArrayXorSink* _this, uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
        {
           return CryptoPP__ArrayXorSinkPut23_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__ArrayXorSinkPut23_next);
        };
        static int64_t CryptoPP__ArrayXorSinkdtor_ArrayXorSink4_wrapper(struct CryptoPP::ArrayXorSink* _this)
        {
           return CryptoPP__ArrayXorSinkdtor_ArrayXorSink4_user(_this, CryptoPP__ArrayXorSinkdtor_ArrayXorSink4_next);
        };
        
        static int64_t CryptoPP__ByteArrayParameterctor_ByteArrayParameter1_wrapper(struct CryptoPP::ByteArrayParameter* _this, uint8_t* arg_0, unsigned int arg_1)
        {
           return CryptoPP__ByteArrayParameterctor_ByteArrayParameter1_user(_this, arg_0, arg_1, CryptoPP__ByteArrayParameterctor_ByteArrayParameter1_next);
        };
        static uint8_t* CryptoPP__ByteArrayParameterbegin2_wrapper(struct CryptoPP::ByteArrayParameter* _this)
        {
           return CryptoPP__ByteArrayParameterbegin2_user(_this, CryptoPP__ByteArrayParameterbegin2_next);
        };
        static uint64_t CryptoPP__ByteArrayParametersize3_wrapper(struct CryptoPP::ByteArrayParameter* _this)
        {
           return CryptoPP__ByteArrayParametersize3_user(_this, CryptoPP__ByteArrayParametersize3_next);
        };
        
        static bool CryptoPP__InputRejectingChannelMessageSeriesEnd2_wrapper(struct CryptoPP::InputRejecting<CryptoPP::Filter>* _this, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* __formal, int __formal, bool __formal)
        {
           return CryptoPP__InputRejectingChannelMessageSeriesEnd2_user(_this, __formal, __formal, __formal, CryptoPP__InputRejectingChannelMessageSeriesEnd2_next);
        };
        static uint64_t CryptoPP__InputRejectingChannelPut24_wrapper(struct CryptoPP::InputRejecting<CryptoPP::Filter>* _this, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* channel, char* begin, uint64_t length, int messageEnd, bool blocking)
        {
           return CryptoPP__InputRejectingChannelPut24_user(_this, channel, begin, length, messageEnd, blocking, CryptoPP__InputRejectingChannelPut24_next);
        };
        static void CryptoPP__InputRejectingctor_InputRejecting6_wrapper(struct CryptoPP::InputRejecting<CryptoPP::Filter>* _this)
        {
           CryptoPP__InputRejectingctor_InputRejecting6_user(_this, CryptoPP__InputRejectingctor_InputRejecting6_next);
        };
        static bool CryptoPP__InputRejectingIsolatedFlush8_wrapper(struct CryptoPP::InputRejecting<CryptoPP::Filter>* _this, bool __formal, bool __formal)
        {
           return CryptoPP__InputRejectingIsolatedFlush8_user(_this, __formal, __formal, CryptoPP__InputRejectingIsolatedFlush8_next);
        };
        static bool CryptoPP__InputRejectingIsolatedMessageSeriesEnd10_wrapper(struct CryptoPP::InputRejecting<CryptoPP::Filter>* _this, bool __formal)
        {
           return CryptoPP__InputRejectingIsolatedMessageSeriesEnd10_user(_this, __formal, CryptoPP__InputRejectingIsolatedMessageSeriesEnd10_next);
        };
        static uint64_t CryptoPP__InputRejectingPut212_wrapper(struct CryptoPP::InputRejecting<CryptoPP::Filter>* _this, char* begin, uint64_t length, int messageEnd, bool blocking)
        {
           return CryptoPP__InputRejectingPut212_user(_this, begin, length, messageEnd, blocking, CryptoPP__InputRejectingPut212_next);
        };
        static void CryptoPP__InputRejectingdtor_InputRejecting14_wrapper(struct CryptoPP::InputRejecting<CryptoPP::Filter>* _this)
        {
           CryptoPP__InputRejectingdtor_InputRejecting14_user(_this, CryptoPP__InputRejectingdtor_InputRejecting14_next);
        };
        
        static void CryptoPP__InputRejecting__InputRejectedctor_InputRejected2_wrapper(struct CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected* _this, struct CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected* __that)
        {
           CryptoPP__InputRejecting__InputRejectedctor_InputRejected2_user(_this, __that, CryptoPP__InputRejecting__InputRejectedctor_InputRejected2_next);
        };
        static void CryptoPP__InputRejecting__InputRejectedctor_InputRejected4_wrapper(struct CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected* _this)
        {
           CryptoPP__InputRejecting__InputRejectedctor_InputRejected4_user(_this, CryptoPP__InputRejecting__InputRejectedctor_InputRejected4_next);
        };
        static void CryptoPP__InputRejecting__InputRejecteddtor_InputRejected9_wrapper(struct CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected* _this)
        {
           CryptoPP__InputRejecting__InputRejecteddtor_InputRejected9_user(_this, CryptoPP__InputRejecting__InputRejecteddtor_InputRejected9_next);
        };
        
        static void CryptoPP__SourcePumpAll2_wrapper(struct CryptoPP::Source* _this)
        {
           CryptoPP__SourcePumpAll2_user(_this, CryptoPP__SourcePumpAll2_next);
        };
        static uint64_t CryptoPP__SourcePumpAll23_wrapper(struct CryptoPP::Source* _this, bool arg_0)
        {
           return CryptoPP__SourcePumpAll23_user(_this, arg_0, CryptoPP__SourcePumpAll23_next);
        };
        static void CryptoPP__Sourcector_Source5_wrapper(struct CryptoPP::Source* _this, struct CryptoPP::BufferedTransformation* attachment)
        {
           CryptoPP__Sourcector_Source5_user(_this, attachment, CryptoPP__Sourcector_Source5_next);
        };
        static void CryptoPP__SourceSourceInitialize7_wrapper(struct CryptoPP::Source* _this, bool pumpAll, struct CryptoPP::NameValuePairs* parameters)
        {
           CryptoPP__SourceSourceInitialize7_user(_this, pumpAll, parameters, CryptoPP__SourceSourceInitialize7_next);
        };
        static void CryptoPP__Sourcedtor_Source9_wrapper(struct CryptoPP::Source* _this)
        {
           CryptoPP__Sourcedtor_Source9_user(_this, CryptoPP__Sourcedtor_Source9_next);
        };
        
        static int64_t CryptoPP__StringSourcector_StringSource1_wrapper(struct CryptoPP::StringSource* _this, char* arg_0, bool arg_1, struct CryptoPP::BufferedTransformation* arg_2)
        {
           return CryptoPP__StringSourcector_StringSource1_user(_this, arg_0, arg_1, arg_2, CryptoPP__StringSourcector_StringSource1_next);
        };
        static int64_t CryptoPP__StringSourcedtor_StringSource2_wrapper(struct CryptoPP::StringSource* _this)
        {
           return CryptoPP__StringSourcedtor_StringSource2_user(_this, CryptoPP__StringSourcedtor_StringSource2_next);
        };
        
        static int64_t CryptoPP__ECB_OneWayctor_ECB_OneWay1_wrapper(struct CryptoPP::ECB_OneWay* _this)
        {
           return CryptoPP__ECB_OneWayctor_ECB_OneWay1_user(_this, CryptoPP__ECB_OneWayctor_ECB_OneWay1_next);
        };
        static struct CryptoPP::SimpleKeyingInterface::IV_Requirement CryptoPP__ECB_OneWayIVRequirement2_wrapper(struct CryptoPP::ECB_OneWay* _this)
        {
           return CryptoPP__ECB_OneWayIVRequirement2_user(_this, CryptoPP__ECB_OneWayIVRequirement2_next);
        };
        static unsigned int CryptoPP__ECB_OneWayOptimalBlockSize3_wrapper(struct CryptoPP::ECB_OneWay* _this)
        {
           return CryptoPP__ECB_OneWayOptimalBlockSize3_user(_this, CryptoPP__ECB_OneWayOptimalBlockSize3_next);
        };
        static void CryptoPP__ECB_OneWayProcessBlocks4_wrapper(struct CryptoPP::ECB_OneWay* _this, uint8_t* arg_0, uint8_t* arg_1, uint64_t arg_2)
        {
           CryptoPP__ECB_OneWayProcessBlocks4_user(_this, arg_0, arg_1, arg_2, CryptoPP__ECB_OneWayProcessBlocks4_next);
        };
        static void CryptoPP__ECB_OneWaySetKey5_wrapper(struct CryptoPP::ECB_OneWay* _this, uint8_t* arg_0, uint64_t arg_1, struct CryptoPP::NameValuePairs* arg_2)
        {
           CryptoPP__ECB_OneWaySetKey5_user(_this, arg_0, arg_1, arg_2, CryptoPP__ECB_OneWaySetKey5_next);
        };
        static char* CryptoPP__ECB_OneWayStaticAlgorithmName6_wrapper()
        {
           return CryptoPP__ECB_OneWayStaticAlgorithmName6_user(CryptoPP__ECB_OneWayStaticAlgorithmName6_next);
        };
        static int64_t CryptoPP__ECB_OneWaydtor_ECB_OneWay7_wrapper(struct CryptoPP::ECB_OneWay* _this)
        {
           return CryptoPP__ECB_OneWaydtor_ECB_OneWay7_user(_this, CryptoPP__ECB_OneWaydtor_ECB_OneWay7_next);
        };
        
        static void CryptoPP__LC_RNGGenerateBlock1_wrapper(struct CryptoPP::LC_RNG* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__LC_RNGGenerateBlock1_user(_this, arg_0, arg_1, CryptoPP__LC_RNGGenerateBlock1_next);
        };
        
        static int64_t CryptoPP__BERGeneralDecoderctor_BERGeneralDecoder1_wrapper(struct CryptoPP::BERGeneralDecoder* _this, struct CryptoPP::BERGeneralDecoder* arg_0, uint8_t arg_1)
        {
           return CryptoPP__BERGeneralDecoderctor_BERGeneralDecoder1_user(_this, arg_0, arg_1, CryptoPP__BERGeneralDecoderctor_BERGeneralDecoder1_next);
        };
        static int64_t CryptoPP__BERGeneralDecoderctor_BERGeneralDecoder2_wrapper(struct CryptoPP::BERGeneralDecoder* _this, struct CryptoPP::BufferedTransformation* arg_0, uint8_t arg_1)
        {
           return CryptoPP__BERGeneralDecoderctor_BERGeneralDecoder2_user(_this, arg_0, arg_1, CryptoPP__BERGeneralDecoderctor_BERGeneralDecoder2_next);
        };
        static void CryptoPP__BERGeneralDecoderCheckByte3_wrapper(struct CryptoPP::BERGeneralDecoder* _this, uint8_t arg_0)
        {
           CryptoPP__BERGeneralDecoderCheckByte3_user(_this, arg_0, CryptoPP__BERGeneralDecoderCheckByte3_next);
        };
        static bool CryptoPP__BERGeneralDecoderEndReached4_wrapper(struct CryptoPP::BERGeneralDecoder* _this)
        {
           return CryptoPP__BERGeneralDecoderEndReached4_user(_this, CryptoPP__BERGeneralDecoderEndReached4_next);
        };
        static void CryptoPP__BERGeneralDecoderInit5_wrapper(struct CryptoPP::BERGeneralDecoder* _this, uint8_t arg_0)
        {
           CryptoPP__BERGeneralDecoderInit5_user(_this, arg_0, CryptoPP__BERGeneralDecoderInit5_next);
        };
        static bool CryptoPP__BERGeneralDecoderIsDefiniteLength6_wrapper(struct CryptoPP::BERGeneralDecoder* _this)
        {
           return CryptoPP__BERGeneralDecoderIsDefiniteLength6_user(_this, CryptoPP__BERGeneralDecoderIsDefiniteLength6_next);
        };
        static void CryptoPP__BERGeneralDecoderMessageEnd7_wrapper(struct CryptoPP::BERGeneralDecoder* _this)
        {
           CryptoPP__BERGeneralDecoderMessageEnd7_user(_this, CryptoPP__BERGeneralDecoderMessageEnd7_next);
        };
        static uint8_t CryptoPP__BERGeneralDecoderPeekByte8_wrapper(struct CryptoPP::BERGeneralDecoder* _this)
        {
           return CryptoPP__BERGeneralDecoderPeekByte8_user(_this, CryptoPP__BERGeneralDecoderPeekByte8_next);
        };
        static uint64_t CryptoPP__BERGeneralDecoderReduceLength9_wrapper(struct CryptoPP::BERGeneralDecoder* _this, uint64_t arg_0)
        {
           return CryptoPP__BERGeneralDecoderReduceLength9_user(_this, arg_0, CryptoPP__BERGeneralDecoderReduceLength9_next);
        };
        static uint64_t CryptoPP__BERGeneralDecoderRemainingLength10_wrapper(struct CryptoPP::BERGeneralDecoder* _this)
        {
           return CryptoPP__BERGeneralDecoderRemainingLength10_user(_this, CryptoPP__BERGeneralDecoderRemainingLength10_next);
        };
        static void CryptoPP__BERGeneralDecoderStoreInitialize11_wrapper(struct CryptoPP::BERGeneralDecoder* _this, struct CryptoPP::NameValuePairs* arg_0)
        {
           CryptoPP__BERGeneralDecoderStoreInitialize11_user(_this, arg_0, CryptoPP__BERGeneralDecoderStoreInitialize11_next);
        };
        static int64_t CryptoPP__BERGeneralDecoderdtor_BERGeneralDecoder12_wrapper(struct CryptoPP::BERGeneralDecoder* _this)
        {
           return CryptoPP__BERGeneralDecoderdtor_BERGeneralDecoder12_user(_this, CryptoPP__BERGeneralDecoderdtor_BERGeneralDecoder12_next);
        };
        
        static void CryptoPP__TF_VerifierBaseInputSignature1_wrapper(struct CryptoPP::TF_VerifierBase* _this, struct CryptoPP::PK_MessageAccumulator* arg_0, uint8_t* arg_1, uint64_t arg_2)
        {
           CryptoPP__TF_VerifierBaseInputSignature1_user(_this, arg_0, arg_1, arg_2, CryptoPP__TF_VerifierBaseInputSignature1_next);
        };
        static struct CryptoPP::DecodingResult* CryptoPP__TF_VerifierBaseRecoverAndRestart2_wrapper(struct CryptoPP::TF_VerifierBase* _this, short retstr, struct CryptoPP::DecodingResult* arg_0, uint8_t* arg_1)
        {
           return CryptoPP__TF_VerifierBaseRecoverAndRestart2_user(_this, retstr, arg_0, arg_1, CryptoPP__TF_VerifierBaseRecoverAndRestart2_next);
        };
        static bool CryptoPP__TF_VerifierBaseVerifyAndRestart3_wrapper(struct CryptoPP::TF_VerifierBase* _this, struct CryptoPP::PK_MessageAccumulator* arg_0)
        {
           return CryptoPP__TF_VerifierBaseVerifyAndRestart3_user(_this, arg_0, CryptoPP__TF_VerifierBaseVerifyAndRestart3_next);
        };
        
        static void CryptoPP__SHA1InitState1_wrapper(unsigned int* arg_0)
        {
           CryptoPP__SHA1InitState1_user(arg_0, CryptoPP__SHA1InitState1_next);
        };
        static void CryptoPP__SHA1ctor_SHA13_wrapper(struct CryptoPP::SHA1* _this, struct CryptoPP::SHA1* __that)
        {
           CryptoPP__SHA1ctor_SHA13_user(_this, __that, CryptoPP__SHA1ctor_SHA13_next);
        };
        static void CryptoPP__SHA1ctor_SHA15_wrapper(struct CryptoPP::SHA1* _this)
        {
           CryptoPP__SHA1ctor_SHA15_user(_this, CryptoPP__SHA1ctor_SHA15_next);
        };
        static char* CryptoPP__SHA1StaticAlgorithmName7_wrapper()
        {
           return CryptoPP__SHA1StaticAlgorithmName7_user(CryptoPP__SHA1StaticAlgorithmName7_next);
        };
        static void CryptoPP__SHA1Transform8_wrapper(unsigned int* arg_0, unsigned int* arg_1)
        {
           CryptoPP__SHA1Transform8_user(arg_0, arg_1, CryptoPP__SHA1Transform8_next);
        };
        static void CryptoPP__SHA1dtor_SHA113_wrapper(struct CryptoPP::SHA1* _this)
        {
           CryptoPP__SHA1dtor_SHA113_user(_this, CryptoPP__SHA1dtor_SHA113_next);
        };
        
        static int64_t CryptoPP__DL_Algorithm_GDSASign1_wrapper(int64_t b, struct CryptoPP::Integer* arg_0, int64_t arg_1)
        {
           return CryptoPP__DL_Algorithm_GDSASign1_user(b, arg_0, arg_1, CryptoPP__DL_Algorithm_GDSASign1_next);
        };
        static int64_t CryptoPP__DL_Algorithm_GDSAVerify2_wrapper(struct CryptoPP::Integer* a, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__DL_Algorithm_GDSAVerify2_user(a, arg_0, CryptoPP__DL_Algorithm_GDSAVerify2_next);
        };
        
        static void CryptoPP__SignatureVerificationFilterFirstPut1_wrapper(struct CryptoPP::SignatureVerificationFilter* _this, uint8_t* arg_0)
        {
           CryptoPP__SignatureVerificationFilterFirstPut1_user(_this, arg_0, CryptoPP__SignatureVerificationFilterFirstPut1_next);
        };
        static void CryptoPP__SignatureVerificationFilterInitializeDerivedAndReturnNewSizes2_wrapper(struct CryptoPP::SignatureVerificationFilter* _this, struct CryptoPP::NameValuePairs* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t* arg_3)
        {
           CryptoPP__SignatureVerificationFilterInitializeDerivedAndReturnNewSizes2_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__SignatureVerificationFilterInitializeDerivedAndReturnNewSizes2_next);
        };
        static void CryptoPP__SignatureVerificationFilterLastPut3_wrapper(struct CryptoPP::SignatureVerificationFilter* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__SignatureVerificationFilterLastPut3_user(_this, arg_0, arg_1, CryptoPP__SignatureVerificationFilterLastPut3_next);
        };
        static void CryptoPP__SignatureVerificationFilterNextPutMultiple4_wrapper(struct CryptoPP::SignatureVerificationFilter* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__SignatureVerificationFilterNextPutMultiple4_user(_this, arg_0, arg_1, CryptoPP__SignatureVerificationFilterNextPutMultiple4_next);
        };
        static int64_t CryptoPP__SignatureVerificationFilterctor_SignatureVerificationFilter5_wrapper(struct CryptoPP::SignatureVerificationFilter* _this, struct CryptoPP::PK_Verifier* arg_0, struct CryptoPP::BufferedTransformation* arg_1, unsigned int arg_2)
        {
           return CryptoPP__SignatureVerificationFilterctor_SignatureVerificationFilter5_user(_this, arg_0, arg_1, arg_2, CryptoPP__SignatureVerificationFilterctor_SignatureVerificationFilter5_next);
        };
        static int64_t CryptoPP__SignatureVerificationFilterdtor_SignatureVerificationFilter6_wrapper(struct CryptoPP::SignatureVerificationFilter* _this)
        {
           return CryptoPP__SignatureVerificationFilterdtor_SignatureVerificationFilter6_user(_this, CryptoPP__SignatureVerificationFilterdtor_SignatureVerificationFilter6_next);
        };
        
        static int64_t CryptoPP__SignatureVerificationFilter__SignatureVerificationFailedctor_SignatureVerificationFailed1_wrapper(struct CryptoPP::SignatureVerificationFilter::SignatureVerificationFailed* _this, struct CryptoPP::SignatureVerificationFilter::SignatureVerificationFailed* arg_0)
        {
           return CryptoPP__SignatureVerificationFilter__SignatureVerificationFailedctor_SignatureVerificationFailed1_user(_this, arg_0, CryptoPP__SignatureVerificationFilter__SignatureVerificationFailedctor_SignatureVerificationFailed1_next);
        };
        static int64_t CryptoPP__SignatureVerificationFilter__SignatureVerificationFailedctor_SignatureVerificationFailed2_wrapper(struct CryptoPP::SignatureVerificationFilter::SignatureVerificationFailed* _this)
        {
           return CryptoPP__SignatureVerificationFilter__SignatureVerificationFailedctor_SignatureVerificationFailed2_user(_this, CryptoPP__SignatureVerificationFilter__SignatureVerificationFailedctor_SignatureVerificationFailed2_next);
        };
        static int64_t CryptoPP__SignatureVerificationFilter__SignatureVerificationFaileddtor_SignatureVerificationFailed3_wrapper(struct CryptoPP::SignatureVerificationFilter::SignatureVerificationFailed* _this)
        {
           return CryptoPP__SignatureVerificationFilter__SignatureVerificationFaileddtor_SignatureVerificationFailed3_user(_this, CryptoPP__SignatureVerificationFilter__SignatureVerificationFaileddtor_SignatureVerificationFailed3_next);
        };
        
        static void CryptoPP__ConstByteArrayParameterAssign2_wrapper(struct CryptoPP::ConstByteArrayParameter* _this, char* data, uint64_t size, bool deepCopy)
        {
           CryptoPP__ConstByteArrayParameterAssign2_user(_this, data, size, deepCopy, CryptoPP__ConstByteArrayParameterAssign2_next);
        };
        static int64_t CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter3_wrapper(struct CryptoPP::ConstByteArrayParameter* _this, struct CryptoPP::ConstByteArrayParameter* arg_0)
        {
           return CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter3_user(_this, arg_0, CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter3_next);
        };
        static void CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter5_wrapper(struct CryptoPP::ConstByteArrayParameter* _this, char* data, bool deepCopy)
        {
           CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter5_user(_this, data, deepCopy, CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter5_next);
        };
        static int64_t CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter6_wrapper(struct CryptoPP::ConstByteArrayParameter* _this, uint8_t* arg_0, uint64_t arg_1, bool arg_2)
        {
           return CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter6_user(_this, arg_0, arg_1, arg_2, CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter6_next);
        };
        static char* CryptoPP__ConstByteArrayParameterbegin8_wrapper(struct CryptoPP::ConstByteArrayParameter* _this)
        {
           return CryptoPP__ConstByteArrayParameterbegin8_user(_this, CryptoPP__ConstByteArrayParameterbegin8_next);
        };
        static uint64_t CryptoPP__ConstByteArrayParametersize10_wrapper(struct CryptoPP::ConstByteArrayParameter* _this)
        {
           return CryptoPP__ConstByteArrayParametersize10_user(_this, CryptoPP__ConstByteArrayParametersize10_next);
        };
        static void CryptoPP__ConstByteArrayParameterdtor_ConstByteArrayParameter12_wrapper(struct CryptoPP::ConstByteArrayParameter* _this)
        {
           CryptoPP__ConstByteArrayParameterdtor_ConstByteArrayParameter12_user(_this, CryptoPP__ConstByteArrayParameterdtor_ConstByteArrayParameter12_next);
        };
        
        static struct CryptoPP::DecodingResult* CryptoPP__TF_DecryptorBaseDecrypt1_wrapper(struct CryptoPP::TF_DecryptorBase* _this, struct CryptoPP::DecodingResult* retstr, struct CryptoPP::RandomNumberGenerator* arg_0, uint8_t* arg_1, uint64_t arg_2, uint8_t* arg_3, struct CryptoPP::NameValuePairs* arg_4)
        {
           return CryptoPP__TF_DecryptorBaseDecrypt1_user(_this, retstr, arg_0, arg_1, arg_2, arg_3, arg_4, CryptoPP__TF_DecryptorBaseDecrypt1_next);
        };
        
        static void CryptoPP__HashVerificationFilterFirstPut1_wrapper(struct CryptoPP::HashVerificationFilter* _this, uint8_t* arg_0)
        {
           CryptoPP__HashVerificationFilterFirstPut1_user(_this, arg_0, CryptoPP__HashVerificationFilterFirstPut1_next);
        };
        static int64_t CryptoPP__HashVerificationFilterctor_HashVerificationFilter2_wrapper(struct CryptoPP::HashVerificationFilter* _this, struct CryptoPP::HashTransformation* arg_0, struct CryptoPP::BufferedTransformation* arg_1, unsigned int arg_2)
        {
           return CryptoPP__HashVerificationFilterctor_HashVerificationFilter2_user(_this, arg_0, arg_1, arg_2, CryptoPP__HashVerificationFilterctor_HashVerificationFilter2_next);
        };
        static void CryptoPP__HashVerificationFilterInitializeDerivedAndReturnNewSizes3_wrapper(struct CryptoPP::HashVerificationFilter* _this, struct CryptoPP::NameValuePairs* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t* arg_3)
        {
           CryptoPP__HashVerificationFilterInitializeDerivedAndReturnNewSizes3_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__HashVerificationFilterInitializeDerivedAndReturnNewSizes3_next);
        };
        static void CryptoPP__HashVerificationFilterLastPut4_wrapper(struct CryptoPP::HashVerificationFilter* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__HashVerificationFilterLastPut4_user(_this, arg_0, arg_1, CryptoPP__HashVerificationFilterLastPut4_next);
        };
        static void CryptoPP__HashVerificationFilterNextPutMultiple5_wrapper(struct CryptoPP::HashVerificationFilter* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__HashVerificationFilterNextPutMultiple5_user(_this, arg_0, arg_1, CryptoPP__HashVerificationFilterNextPutMultiple5_next);
        };
        static int64_t CryptoPP__HashVerificationFilterdtor_HashVerificationFilter6_wrapper(struct CryptoPP::HashVerificationFilter* _this)
        {
           return CryptoPP__HashVerificationFilterdtor_HashVerificationFilter6_user(_this, CryptoPP__HashVerificationFilterdtor_HashVerificationFilter6_next);
        };
        
        static int64_t CryptoPP__HashVerificationFilter__HashVerificationFailedctor_HashVerificationFailed1_wrapper(struct CryptoPP::HashVerificationFilter::HashVerificationFailed* _this, struct CryptoPP::HashVerificationFilter::HashVerificationFailed* arg_0)
        {
           return CryptoPP__HashVerificationFilter__HashVerificationFailedctor_HashVerificationFailed1_user(_this, arg_0, CryptoPP__HashVerificationFilter__HashVerificationFailedctor_HashVerificationFailed1_next);
        };
        static int64_t CryptoPP__HashVerificationFilter__HashVerificationFailedctor_HashVerificationFailed2_wrapper(struct CryptoPP::HashVerificationFilter::HashVerificationFailed* _this)
        {
           return CryptoPP__HashVerificationFilter__HashVerificationFailedctor_HashVerificationFailed2_user(_this, CryptoPP__HashVerificationFilter__HashVerificationFailedctor_HashVerificationFailed2_next);
        };
        static int64_t CryptoPP__HashVerificationFilter__HashVerificationFaileddtor_HashVerificationFailed3_wrapper(struct CryptoPP::HashVerificationFilter::HashVerificationFailed* _this)
        {
           return CryptoPP__HashVerificationFilter__HashVerificationFaileddtor_HashVerificationFailed3_user(_this, CryptoPP__HashVerificationFilter__HashVerificationFaileddtor_HashVerificationFailed3_next);
        };
        
        static int64_t CryptoPP__AutoSeededX917RNGReseed1_wrapper(uint8_t* arg_0)
        {
           return CryptoPP__AutoSeededX917RNGReseed1_user(arg_0, CryptoPP__AutoSeededX917RNGReseed1_next);
        };
        
        static int64_t CryptoPP__BERSequenceDecoderctor_BERSequenceDecoder1_wrapper(struct CryptoPP::BERSequenceDecoder* _this, struct CryptoPP::BERSequenceDecoder* arg_0, uint8_t arg_1)
        {
           return CryptoPP__BERSequenceDecoderctor_BERSequenceDecoder1_user(_this, arg_0, arg_1, CryptoPP__BERSequenceDecoderctor_BERSequenceDecoder1_next);
        };
        static int64_t CryptoPP__BERSequenceDecoderctor_BERSequenceDecoder2_wrapper(struct CryptoPP::BERSequenceDecoder* _this, struct CryptoPP::BufferedTransformation* arg_0, uint8_t arg_1)
        {
           return CryptoPP__BERSequenceDecoderctor_BERSequenceDecoder2_user(_this, arg_0, arg_1, CryptoPP__BERSequenceDecoderctor_BERSequenceDecoder2_next);
        };
        static int64_t CryptoPP__BERSequenceDecoderdtor_BERSequenceDecoder3_wrapper(struct CryptoPP::BERSequenceDecoder* _this)
        {
           return CryptoPP__BERSequenceDecoderdtor_BERSequenceDecoder3_user(_this, CryptoPP__BERSequenceDecoderdtor_BERSequenceDecoder3_next);
        };
        
        static int64_t CryptoPP__CBC_CTS_Encryptionctor_CBC_CTS_Encryption1_wrapper(struct CryptoPP::CBC_CTS_Encryption* _this)
        {
           return CryptoPP__CBC_CTS_Encryptionctor_CBC_CTS_Encryption1_user(_this, CryptoPP__CBC_CTS_Encryptionctor_CBC_CTS_Encryption1_next);
        };
        static unsigned int CryptoPP__CBC_CTS_EncryptionMinLastBlockSize2_wrapper(struct CryptoPP::CBC_CTS_Encryption* _this)
        {
           return CryptoPP__CBC_CTS_EncryptionMinLastBlockSize2_user(_this, CryptoPP__CBC_CTS_EncryptionMinLastBlockSize2_next);
        };
        static void CryptoPP__CBC_CTS_EncryptionProcessLastBlock3_wrapper(struct CryptoPP::CBC_CTS_Encryption* _this, uint8_t* arg_0, uint8_t* arg_1, uint64_t arg_2)
        {
           CryptoPP__CBC_CTS_EncryptionProcessLastBlock3_user(_this, arg_0, arg_1, arg_2, CryptoPP__CBC_CTS_EncryptionProcessLastBlock3_next);
        };
        static void CryptoPP__CBC_CTS_EncryptionUncheckedSetKey4_wrapper(struct CryptoPP::CBC_CTS_Encryption* _this, uint8_t* arg_0, unsigned int arg_1, struct CryptoPP::NameValuePairs* arg_2)
        {
           CryptoPP__CBC_CTS_EncryptionUncheckedSetKey4_user(_this, arg_0, arg_1, arg_2, CryptoPP__CBC_CTS_EncryptionUncheckedSetKey4_next);
        };
        static int64_t CryptoPP__CBC_CTS_Encryptiondtor_CBC_CTS_Encryption5_wrapper(struct CryptoPP::CBC_CTS_Encryption* _this)
        {
           return CryptoPP__CBC_CTS_Encryptiondtor_CBC_CTS_Encryption5_user(_this, CryptoPP__CBC_CTS_Encryptiondtor_CBC_CTS_Encryption5_next);
        };
        
        static int64_t CryptoPP__CBC_CTS_Decryptionctor_CBC_CTS_Decryption1_wrapper(struct CryptoPP::CBC_CTS_Decryption* _this)
        {
           return CryptoPP__CBC_CTS_Decryptionctor_CBC_CTS_Decryption1_user(_this, CryptoPP__CBC_CTS_Decryptionctor_CBC_CTS_Decryption1_next);
        };
        static unsigned int CryptoPP__CBC_CTS_DecryptionMinLastBlockSize2_wrapper(struct CryptoPP::CBC_CTS_Decryption* _this)
        {
           return CryptoPP__CBC_CTS_DecryptionMinLastBlockSize2_user(_this, CryptoPP__CBC_CTS_DecryptionMinLastBlockSize2_next);
        };
        static void CryptoPP__CBC_CTS_DecryptionProcessLastBlock3_wrapper(struct CryptoPP::CBC_CTS_Decryption* _this, uint8_t* arg_0, uint8_t* arg_1, uint64_t arg_2)
        {
           CryptoPP__CBC_CTS_DecryptionProcessLastBlock3_user(_this, arg_0, arg_1, arg_2, CryptoPP__CBC_CTS_DecryptionProcessLastBlock3_next);
        };
        static int64_t CryptoPP__CBC_CTS_Decryptiondtor_CBC_CTS_Decryption4_wrapper(struct CryptoPP::CBC_CTS_Decryption* _this)
        {
           return CryptoPP__CBC_CTS_Decryptiondtor_CBC_CTS_Decryption4_user(_this, CryptoPP__CBC_CTS_Decryptiondtor_CBC_CTS_Decryption4_next);
        };
        
        static struct CryptoPP::GF2NP* CryptoPP__GF2NPPClone1_wrapper(struct CryptoPP::GF2NPP* _this)
        {
           return CryptoPP__GF2NPPClone1_user(_this, CryptoPP__GF2NPPClone1_next);
        };
        static void CryptoPP__GF2NPPDEREncode2_wrapper(struct CryptoPP::GF2NPP* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           CryptoPP__GF2NPPDEREncode2_user(_this, arg_0, CryptoPP__GF2NPPDEREncode2_next);
        };
        static int64_t CryptoPP__GF2NPPctor_GF2NPP3_wrapper(struct CryptoPP::GF2NPP* _this, struct CryptoPP::GF2NPP* arg_0)
        {
           return CryptoPP__GF2NPPctor_GF2NPP3_user(_this, arg_0, CryptoPP__GF2NPPctor_GF2NPP3_next);
        };
        static int64_t CryptoPP__GF2NPPctor_GF2NPP4_wrapper(struct CryptoPP::GF2NPP* _this, unsigned int arg_0, unsigned int arg_1, unsigned int arg_2, unsigned int arg_3, unsigned int arg_4)
        {
           return CryptoPP__GF2NPPctor_GF2NPP4_user(_this, arg_0, arg_1, arg_2, arg_3, arg_4, CryptoPP__GF2NPPctor_GF2NPP4_next);
        };
        static int64_t CryptoPP__GF2NPPdtor_GF2NPP5_wrapper(struct CryptoPP::GF2NPP* _this)
        {
           return CryptoPP__GF2NPPdtor_GF2NPP5_user(_this, CryptoPP__GF2NPPdtor_GF2NPP5_next);
        };
        
        static void CryptoPP__SHA512InitState1_wrapper(uint64_t* arg_0)
        {
           CryptoPP__SHA512InitState1_user(arg_0, CryptoPP__SHA512InitState1_next);
        };
        static void CryptoPP__SHA512Transform2_wrapper(uint64_t* arg_0, uint64_t* arg_1)
        {
           CryptoPP__SHA512Transform2_user(arg_0, arg_1, CryptoPP__SHA512Transform2_next);
        };
        
        static struct CryptoPP::HashTransformation* CryptoPP__HMACAccessHash2_wrapper(struct CryptoPP::HMAC<CryptoPP::SHA1>* _this)
        {
           return CryptoPP__HMACAccessHash2_user(_this, CryptoPP__HMACAccessHash2_next);
        };
        static struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* CryptoPP__HMACAlgorithmName4_wrapper(struct CryptoPP::HMAC<CryptoPP::SHA1>* _this, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* result)
        {
           return CryptoPP__HMACAlgorithmName4_user(_this, result, CryptoPP__HMACAlgorithmName4_next);
        };
        static void CryptoPP__HMACctor_HMAC6_wrapper(struct CryptoPP::HMAC<CryptoPP::SHA1>* _this, char* key, uint64_t length)
        {
           CryptoPP__HMACctor_HMAC6_user(_this, key, length, CryptoPP__HMACctor_HMAC6_next);
        };
        static struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* CryptoPP__HMACStaticAlgorithmName8_wrapper(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* result)
        {
           return CryptoPP__HMACStaticAlgorithmName8_user(result, CryptoPP__HMACStaticAlgorithmName8_next);
        };
        static void CryptoPP__HMACdtor_HMAC13_wrapper(struct CryptoPP::HMAC<CryptoPP::SHA1>* _this)
        {
           CryptoPP__HMACdtor_HMAC13_user(_this, CryptoPP__HMACdtor_HMAC13_next);
        };
        
        static void CryptoPP__DL_EncryptionAlgorithm_Xorctor_DL_EncryptionAlgorithm_Xor2_wrapper(struct CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>* _this)
        {
           CryptoPP__DL_EncryptionAlgorithm_Xorctor_DL_EncryptionAlgorithm_Xor2_user(_this, CryptoPP__DL_EncryptionAlgorithm_Xorctor_DL_EncryptionAlgorithm_Xor2_next);
        };
        static uint64_t CryptoPP__DL_EncryptionAlgorithm_XorGetMaxSymmetricPlaintextLength4_wrapper(struct CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>* _this, uint64_t ciphertextLength)
        {
           return CryptoPP__DL_EncryptionAlgorithm_XorGetMaxSymmetricPlaintextLength4_user(_this, ciphertextLength, CryptoPP__DL_EncryptionAlgorithm_XorGetMaxSymmetricPlaintextLength4_next);
        };
        static uint64_t CryptoPP__DL_EncryptionAlgorithm_XorGetSymmetricCiphertextLength6_wrapper(struct CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>* _this, uint64_t plaintextLength)
        {
           return CryptoPP__DL_EncryptionAlgorithm_XorGetSymmetricCiphertextLength6_user(_this, plaintextLength, CryptoPP__DL_EncryptionAlgorithm_XorGetSymmetricCiphertextLength6_next);
        };
        static uint64_t CryptoPP__DL_EncryptionAlgorithm_XorGetSymmetricKeyLength8_wrapper(struct CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>* _this, uint64_t plaintextLength)
        {
           return CryptoPP__DL_EncryptionAlgorithm_XorGetSymmetricKeyLength8_user(_this, plaintextLength, CryptoPP__DL_EncryptionAlgorithm_XorGetSymmetricKeyLength8_next);
        };
        static bool CryptoPP__DL_EncryptionAlgorithm_XorParameterSupported10_wrapper(struct CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>* _this, char* name)
        {
           return CryptoPP__DL_EncryptionAlgorithm_XorParameterSupported10_user(_this, name, CryptoPP__DL_EncryptionAlgorithm_XorParameterSupported10_next);
        };
        static struct CryptoPP::DecodingResult* CryptoPP__DL_EncryptionAlgorithm_XorSymmetricDecrypt12_wrapper(struct CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>* _this, struct CryptoPP::DecodingResult* result, char* key, char* ciphertext, uint64_t ciphertextLength, char* plaintext, struct CryptoPP::NameValuePairs* parameters)
        {
           return CryptoPP__DL_EncryptionAlgorithm_XorSymmetricDecrypt12_user(_this, result, key, ciphertext, ciphertextLength, plaintext, parameters, CryptoPP__DL_EncryptionAlgorithm_XorSymmetricDecrypt12_next);
        };
        static void CryptoPP__DL_EncryptionAlgorithm_XorSymmetricEncrypt14_wrapper(struct CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>* _this, struct CryptoPP::RandomNumberGenerator* rng, char* key, char* plaintext, uint64_t plaintextLength, char* ciphertext, struct CryptoPP::NameValuePairs* parameters)
        {
           CryptoPP__DL_EncryptionAlgorithm_XorSymmetricEncrypt14_user(_this, rng, key, plaintext, plaintextLength, ciphertext, parameters, CryptoPP__DL_EncryptionAlgorithm_XorSymmetricEncrypt14_next);
        };
        
        static unsigned int CryptoPP__MaurerRandomnessTestBytesNeeded1_wrapper(struct CryptoPP::MaurerRandomnessTest* _this)
        {
           return CryptoPP__MaurerRandomnessTestBytesNeeded1_user(_this, CryptoPP__MaurerRandomnessTestBytesNeeded1_next);
        };
        static double CryptoPP__MaurerRandomnessTestGetTestValue2_wrapper(struct CryptoPP::MaurerRandomnessTest* _this)
        {
           return CryptoPP__MaurerRandomnessTestGetTestValue2_user(_this, CryptoPP__MaurerRandomnessTestGetTestValue2_next);
        };
        static int64_t CryptoPP__MaurerRandomnessTestctor_MaurerRandomnessTest3_wrapper(struct CryptoPP::MaurerRandomnessTest* _this)
        {
           return CryptoPP__MaurerRandomnessTestctor_MaurerRandomnessTest3_user(_this, CryptoPP__MaurerRandomnessTestctor_MaurerRandomnessTest3_next);
        };
        static uint64_t CryptoPP__MaurerRandomnessTestPut24_wrapper(struct CryptoPP::MaurerRandomnessTest* _this, uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
        {
           return CryptoPP__MaurerRandomnessTestPut24_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__MaurerRandomnessTestPut24_next);
        };
        static int64_t CryptoPP__MaurerRandomnessTestdtor_MaurerRandomnessTest5_wrapper(struct CryptoPP::MaurerRandomnessTest* _this)
        {
           return CryptoPP__MaurerRandomnessTestdtor_MaurerRandomnessTest5_user(_this, CryptoPP__MaurerRandomnessTestdtor_MaurerRandomnessTest5_next);
        };
        
        static int64_t CryptoPP__BitBucketctor_BitBucket1_wrapper(struct CryptoPP::BitBucket* _this)
        {
           return CryptoPP__BitBucketctor_BitBucket1_user(_this, CryptoPP__BitBucketctor_BitBucket1_next);
        };
        static void CryptoPP__BitBucketIsolatedInitialize2_wrapper(struct CryptoPP::BitBucket* _this, struct CryptoPP::NameValuePairs* arg_0)
        {
           CryptoPP__BitBucketIsolatedInitialize2_user(_this, arg_0, CryptoPP__BitBucketIsolatedInitialize2_next);
        };
        static uint64_t CryptoPP__BitBucketPut23_wrapper(struct CryptoPP::BitBucket* _this, uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
        {
           return CryptoPP__BitBucketPut23_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__BitBucketPut23_next);
        };
        static int64_t CryptoPP__BitBucketdtor_BitBucket4_wrapper(struct CryptoPP::BitBucket* _this)
        {
           return CryptoPP__BitBucketdtor_BitBucket4_user(_this, CryptoPP__BitBucketdtor_BitBucket4_next);
        };
        
        static void CryptoPP__TF_SignerBaseInputRecoverableMessage1_wrapper(struct CryptoPP::TF_SignerBase* _this, struct CryptoPP::PK_MessageAccumulator* arg_0, uint8_t* arg_1, uint64_t arg_2)
        {
           CryptoPP__TF_SignerBaseInputRecoverableMessage1_user(_this, arg_0, arg_1, arg_2, CryptoPP__TF_SignerBaseInputRecoverableMessage1_next);
        };
        static uint64_t CryptoPP__TF_SignerBaseSignAndRestart2_wrapper(struct CryptoPP::TF_SignerBase* _this, struct CryptoPP::RandomNumberGenerator* arg_0, struct CryptoPP::PK_MessageAccumulator* arg_1, uint8_t* arg_2, bool arg_3)
        {
           return CryptoPP__TF_SignerBaseSignAndRestart2_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__TF_SignerBaseSignAndRestart2_next);
        };
        
        static int64_t CryptoPP__UnknownOIDctor_UnknownOID1_wrapper(struct CryptoPP::UnknownOID* _this, struct CryptoPP::UnknownOID* arg_0)
        {
           return CryptoPP__UnknownOIDctor_UnknownOID1_user(_this, arg_0, CryptoPP__UnknownOIDctor_UnknownOID1_next);
        };
        static int64_t CryptoPP__UnknownOIDctor_UnknownOID2_wrapper(struct CryptoPP::UnknownOID* _this)
        {
           return CryptoPP__UnknownOIDctor_UnknownOID2_user(_this, CryptoPP__UnknownOIDctor_UnknownOID2_next);
        };
        static int64_t CryptoPP__UnknownOIDdtor_UnknownOID3_wrapper(struct CryptoPP::UnknownOID* _this)
        {
           return CryptoPP__UnknownOIDdtor_UnknownOID3_user(_this, CryptoPP__UnknownOIDdtor_UnknownOID3_next);
        };
        
        static struct CryptoPP::BufferedTransformation* CryptoPP__EncodedObjectFilterCurrentTarget1_wrapper(struct CryptoPP::EncodedObjectFilter* _this)
        {
           return CryptoPP__EncodedObjectFilterCurrentTarget1_user(_this, CryptoPP__EncodedObjectFilterCurrentTarget1_next);
        };
        static void CryptoPP__EncodedObjectFilterPut2_wrapper(struct CryptoPP::EncodedObjectFilter* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__EncodedObjectFilterPut2_user(_this, arg_0, arg_1, CryptoPP__EncodedObjectFilterPut2_next);
        };
        
        static int64_t CryptoPP__SelfTestFailurector_SelfTestFailure1_wrapper(struct CryptoPP::SelfTestFailure* _this, struct CryptoPP::SelfTestFailure* arg_0)
        {
           return CryptoPP__SelfTestFailurector_SelfTestFailure1_user(_this, arg_0, CryptoPP__SelfTestFailurector_SelfTestFailure1_next);
        };
        static int64_t CryptoPP__SelfTestFailuredtor_SelfTestFailure2_wrapper(struct CryptoPP::SelfTestFailure* _this)
        {
           return CryptoPP__SelfTestFailuredtor_SelfTestFailure2_user(_this, CryptoPP__SelfTestFailuredtor_SelfTestFailure2_next);
        };
        
        static void CryptoPP__RandomNumberStoreStoreInitialize1_wrapper(struct CryptoPP::RandomNumberStore* _this, struct CryptoPP::NameValuePairs* arg_0)
        {
           CryptoPP__RandomNumberStoreStoreInitialize1_user(_this, arg_0, CryptoPP__RandomNumberStoreStoreInitialize1_next);
        };
        
        static int64_t CryptoPP__HashInputTooLongctor_HashInputTooLong1_wrapper(struct CryptoPP::HashInputTooLong* _this, struct CryptoPP::HashInputTooLong* arg_0)
        {
           return CryptoPP__HashInputTooLongctor_HashInputTooLong1_user(_this, arg_0, CryptoPP__HashInputTooLongctor_HashInputTooLong1_next);
        };
        static int64_t CryptoPP__HashInputTooLongdtor_HashInputTooLong2_wrapper(struct CryptoPP::HashInputTooLong* _this)
        {
           return CryptoPP__HashInputTooLongdtor_HashInputTooLong2_user(_this, CryptoPP__HashInputTooLongdtor_HashInputTooLong2_next);
        };
        
        static bool CryptoPP__RedirectorGetPassSignals1_wrapper(struct CryptoPP::Redirector* _this)
        {
           return CryptoPP__RedirectorGetPassSignals1_user(_this, CryptoPP__RedirectorGetPassSignals1_next);
        };
        static void CryptoPP__RedirectorInitialize2_wrapper(struct CryptoPP::Redirector* _this, struct CryptoPP::NameValuePairs* arg_0, int arg_1)
        {
           CryptoPP__RedirectorInitialize2_user(_this, arg_0, arg_1, CryptoPP__RedirectorInitialize2_next);
        };
        
        static void CryptoPP__TF_EncryptorBaseEncrypt1_wrapper(struct CryptoPP::TF_EncryptorBase* _this, struct CryptoPP::RandomNumberGenerator* arg_0, uint8_t* arg_1, uint64_t arg_2, uint8_t* arg_3, struct CryptoPP::NameValuePairs* arg_4)
        {
           CryptoPP__TF_EncryptorBaseEncrypt1_user(_this, arg_0, arg_1, arg_2, arg_3, arg_4, CryptoPP__TF_EncryptorBaseEncrypt1_next);
        };
        
        static void CryptoPP__SHA224InitState1_wrapper(unsigned int* arg_0)
        {
           CryptoPP__SHA224InitState1_user(arg_0, CryptoPP__SHA224InitState1_next);
        };
        
        static int64_t CryptoPP__InvalidKeyLengthctor_InvalidKeyLength1_wrapper(struct CryptoPP::InvalidKeyLength* _this, struct CryptoPP::InvalidKeyLength* arg_0)
        {
           return CryptoPP__InvalidKeyLengthctor_InvalidKeyLength1_user(_this, arg_0, CryptoPP__InvalidKeyLengthctor_InvalidKeyLength1_next);
        };
        static int64_t CryptoPP__InvalidKeyLengthdtor_InvalidKeyLength2_wrapper(struct CryptoPP::InvalidKeyLength* _this)
        {
           return CryptoPP__InvalidKeyLengthdtor_InvalidKeyLength2_user(_this, CryptoPP__InvalidKeyLengthdtor_InvalidKeyLength2_next);
        };
        
        static int64_t CryptoPP__InvalidCiphertextctor_InvalidCiphertext1_wrapper(struct CryptoPP::InvalidCiphertext* _this, struct CryptoPP::InvalidCiphertext* arg_0)
        {
           return CryptoPP__InvalidCiphertextctor_InvalidCiphertext1_user(_this, arg_0, CryptoPP__InvalidCiphertextctor_InvalidCiphertext1_next);
        };
        static int64_t CryptoPP__InvalidCiphertextdtor_InvalidCiphertext2_wrapper(struct CryptoPP::InvalidCiphertext* _this)
        {
           return CryptoPP__InvalidCiphertextdtor_InvalidCiphertext2_user(_this, CryptoPP__InvalidCiphertextdtor_InvalidCiphertext2_next);
        };
        
        static void CryptoPP__AuthenticatedKeyAgreementDomainGenerateEphemeralKeyPair1_wrapper(struct CryptoPP::AuthenticatedKeyAgreementDomain* _this, struct CryptoPP::RandomNumberGenerator* arg_0, uint8_t* arg_1, uint8_t* arg_2)
        {
           CryptoPP__AuthenticatedKeyAgreementDomainGenerateEphemeralKeyPair1_user(_this, arg_0, arg_1, arg_2, CryptoPP__AuthenticatedKeyAgreementDomainGenerateEphemeralKeyPair1_next);
        };
        static void CryptoPP__AuthenticatedKeyAgreementDomainGenerateStaticKeyPair2_wrapper(struct CryptoPP::AuthenticatedKeyAgreementDomain* _this, struct CryptoPP::RandomNumberGenerator* arg_0, uint8_t* arg_1, uint8_t* arg_2)
        {
           CryptoPP__AuthenticatedKeyAgreementDomainGenerateStaticKeyPair2_user(_this, arg_0, arg_1, arg_2, CryptoPP__AuthenticatedKeyAgreementDomainGenerateStaticKeyPair2_next);
        };
        
        static void CryptoPP__NonblockingRngGenerateBlock1_wrapper(struct CryptoPP::NonblockingRng* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__NonblockingRngGenerateBlock1_user(_this, arg_0, arg_1, CryptoPP__NonblockingRngGenerateBlock1_next);
        };
        static int64_t CryptoPP__NonblockingRngctor_NonblockingRng2_wrapper(struct CryptoPP::NonblockingRng* _this)
        {
           return CryptoPP__NonblockingRngctor_NonblockingRng2_user(_this, CryptoPP__NonblockingRngctor_NonblockingRng2_next);
        };
        static int64_t CryptoPP__NonblockingRngdtor_NonblockingRng3_wrapper(struct CryptoPP::NonblockingRng* _this)
        {
           return CryptoPP__NonblockingRngdtor_NonblockingRng3_user(_this, CryptoPP__NonblockingRngdtor_NonblockingRng3_next);
        };
        
        static void CryptoPP__StreamTransformationFilterFirstPut1_wrapper(struct CryptoPP::StreamTransformationFilter* _this, uint8_t* arg_0)
        {
           CryptoPP__StreamTransformationFilterFirstPut1_user(_this, arg_0, CryptoPP__StreamTransformationFilterFirstPut1_next);
        };
        static uint64_t CryptoPP__StreamTransformationFilterLastBlockSize2_wrapper(struct CryptoPP::StreamTransformation* arg_0, struct CryptoPP::StreamTransformationFilter::BlockPaddingScheme arg_1)
        {
           return CryptoPP__StreamTransformationFilterLastBlockSize2_user(arg_0, arg_1, CryptoPP__StreamTransformationFilterLastBlockSize2_next);
        };
        static void CryptoPP__StreamTransformationFilterLastPut3_wrapper(struct CryptoPP::StreamTransformationFilter* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__StreamTransformationFilterLastPut3_user(_this, arg_0, arg_1, CryptoPP__StreamTransformationFilterLastPut3_next);
        };
        static void CryptoPP__StreamTransformationFilterNextPutModifiable4_wrapper(struct CryptoPP::StreamTransformationFilter* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__StreamTransformationFilterNextPutModifiable4_user(_this, arg_0, arg_1, CryptoPP__StreamTransformationFilterNextPutModifiable4_next);
        };
        static void CryptoPP__StreamTransformationFilterNextPutMultiple5_wrapper(struct CryptoPP::StreamTransformationFilter* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__StreamTransformationFilterNextPutMultiple5_user(_this, arg_0, arg_1, CryptoPP__StreamTransformationFilterNextPutMultiple5_next);
        };
        static int64_t CryptoPP__StreamTransformationFilterctor_StreamTransformationFilter6_wrapper(struct CryptoPP::StreamTransformationFilter* _this, struct CryptoPP::StreamTransformation* arg_0, struct CryptoPP::BufferedTransformation* arg_1, struct CryptoPP::StreamTransformationFilter::BlockPaddingScheme arg_2)
        {
           return CryptoPP__StreamTransformationFilterctor_StreamTransformationFilter6_user(_this, arg_0, arg_1, arg_2, CryptoPP__StreamTransformationFilterctor_StreamTransformationFilter6_next);
        };
        static int64_t CryptoPP__StreamTransformationFilterdtor_StreamTransformationFilter7_wrapper(struct CryptoPP::StreamTransformationFilter* _this)
        {
           return CryptoPP__StreamTransformationFilterdtor_StreamTransformationFilter7_user(_this, CryptoPP__StreamTransformationFilterdtor_StreamTransformationFilter7_next);
        };
        
        static void CryptoPP__SignerFilterIsolatedInitialize1_wrapper(struct CryptoPP::SignerFilter* _this, struct CryptoPP::NameValuePairs* arg_0)
        {
           CryptoPP__SignerFilterIsolatedInitialize1_user(_this, arg_0, CryptoPP__SignerFilterIsolatedInitialize1_next);
        };
        static uint64_t CryptoPP__SignerFilterPut22_wrapper(struct CryptoPP::SignerFilter* _this, uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
        {
           return CryptoPP__SignerFilterPut22_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__SignerFilterPut22_next);
        };
        
        static int64_t CryptoPP__DERGeneralEncoderctor_DERGeneralEncoder1_wrapper(struct CryptoPP::DERGeneralEncoder* _this, struct CryptoPP::BufferedTransformation* arg_0, uint8_t arg_1)
        {
           return CryptoPP__DERGeneralEncoderctor_DERGeneralEncoder1_user(_this, arg_0, arg_1, CryptoPP__DERGeneralEncoderctor_DERGeneralEncoder1_next);
        };
        static int64_t CryptoPP__DERGeneralEncoderctor_DERGeneralEncoder2_wrapper(struct CryptoPP::DERGeneralEncoder* _this, struct CryptoPP::DERGeneralEncoder* arg_0, uint8_t arg_1)
        {
           return CryptoPP__DERGeneralEncoderctor_DERGeneralEncoder2_user(_this, arg_0, arg_1, CryptoPP__DERGeneralEncoderctor_DERGeneralEncoder2_next);
        };
        static void CryptoPP__DERGeneralEncoderMessageEnd3_wrapper(struct CryptoPP::DERGeneralEncoder* _this)
        {
           CryptoPP__DERGeneralEncoderMessageEnd3_user(_this, CryptoPP__DERGeneralEncoderMessageEnd3_next);
        };
        static int64_t CryptoPP__DERGeneralEncoderdtor_DERGeneralEncoder4_wrapper(struct CryptoPP::DERGeneralEncoder* _this)
        {
           return CryptoPP__DERGeneralEncoderdtor_DERGeneralEncoder4_user(_this, CryptoPP__DERGeneralEncoderdtor_DERGeneralEncoder4_next);
        };
        
        
        static void CryptoPP__Rijndael__Basector_Base2_wrapper(struct CryptoPP::Rijndael::Base* _this, struct CryptoPP::Rijndael::Base* __that)
        {
           CryptoPP__Rijndael__Basector_Base2_user(_this, __that, CryptoPP__Rijndael__Basector_Base2_next);
        };
        static void CryptoPP__Rijndael__Basector_Base4_wrapper(struct CryptoPP::Rijndael::Base* _this)
        {
           CryptoPP__Rijndael__Basector_Base4_user(_this, CryptoPP__Rijndael__Basector_Base4_next);
        };
        static void CryptoPP__Rijndael__BaseUncheckedSetKey5_wrapper(struct CryptoPP::Rijndael::Base* _this, uint8_t* arg_0, unsigned int arg_1, struct CryptoPP::NameValuePairs* arg_2)
        {
           CryptoPP__Rijndael__BaseUncheckedSetKey5_user(_this, arg_0, arg_1, arg_2, CryptoPP__Rijndael__BaseUncheckedSetKey5_next);
        };
        static void CryptoPP__Rijndael__Basedtor_Base7_wrapper(struct CryptoPP::Rijndael::Base* _this)
        {
           CryptoPP__Rijndael__Basedtor_Base7_user(_this, CryptoPP__Rijndael__Basedtor_Base7_next);
        };
        
        static void CryptoPP__Rijndael__Decctor_Dec2_wrapper(struct CryptoPP::Rijndael::Dec* _this, struct CryptoPP::Rijndael::Dec* __that)
        {
           CryptoPP__Rijndael__Decctor_Dec2_user(_this, __that, CryptoPP__Rijndael__Decctor_Dec2_next);
        };
        static void CryptoPP__Rijndael__Decctor_Dec4_wrapper(struct CryptoPP::Rijndael::Dec* _this)
        {
           CryptoPP__Rijndael__Decctor_Dec4_user(_this, CryptoPP__Rijndael__Decctor_Dec4_next);
        };
        static void CryptoPP__Rijndael__DecProcessAndXorBlock5_wrapper(struct CryptoPP::Rijndael::Dec* _this, uint8_t* arg_0, uint8_t* arg_1, uint8_t* arg_2)
        {
           CryptoPP__Rijndael__DecProcessAndXorBlock5_user(_this, arg_0, arg_1, arg_2, CryptoPP__Rijndael__DecProcessAndXorBlock5_next);
        };
        static void CryptoPP__Rijndael__Decdtor_Dec7_wrapper(struct CryptoPP::Rijndael::Dec* _this)
        {
           CryptoPP__Rijndael__Decdtor_Dec7_user(_this, CryptoPP__Rijndael__Decdtor_Dec7_next);
        };
        
        static void CryptoPP__Rijndael__Encctor_Enc2_wrapper(struct CryptoPP::Rijndael::Enc* _this, struct CryptoPP::Rijndael::Enc* __that)
        {
           CryptoPP__Rijndael__Encctor_Enc2_user(_this, __that, CryptoPP__Rijndael__Encctor_Enc2_next);
        };
        static void CryptoPP__Rijndael__Encctor_Enc4_wrapper(struct CryptoPP::Rijndael::Enc* _this)
        {
           CryptoPP__Rijndael__Encctor_Enc4_user(_this, CryptoPP__Rijndael__Encctor_Enc4_next);
        };
        static void CryptoPP__Rijndael__EncProcessAndXorBlock5_wrapper(struct CryptoPP::Rijndael::Enc* _this, uint8_t* arg_0, uint8_t* arg_1, uint8_t* arg_2)
        {
           CryptoPP__Rijndael__EncProcessAndXorBlock5_user(_this, arg_0, arg_1, arg_2, CryptoPP__Rijndael__EncProcessAndXorBlock5_next);
        };
        static void CryptoPP__Rijndael__Encdtor_Enc7_wrapper(struct CryptoPP::Rijndael::Enc* _this)
        {
           CryptoPP__Rijndael__Encdtor_Enc7_user(_this, CryptoPP__Rijndael__Encdtor_Enc7_next);
        };
        
        static uint64_t CryptoPP__NullStoreMaxRetrievable1_wrapper(struct CryptoPP::NullStore* _this)
        {
           return CryptoPP__NullStoreMaxRetrievable1_user(_this, CryptoPP__NullStoreMaxRetrievable1_next);
        };
        static int64_t CryptoPP__NullStorector_NullStore2_wrapper(struct CryptoPP::NullStore* _this, uint64_t arg_0)
        {
           return CryptoPP__NullStorector_NullStore2_user(_this, arg_0, CryptoPP__NullStorector_NullStore2_next);
        };
        static void CryptoPP__NullStoreStoreInitialize3_wrapper(struct CryptoPP::NullStore* _this, struct CryptoPP::NameValuePairs* arg_0)
        {
           CryptoPP__NullStoreStoreInitialize3_user(_this, arg_0, CryptoPP__NullStoreStoreInitialize3_next);
        };
        static int64_t CryptoPP__NullStoredtor_NullStore4_wrapper(struct CryptoPP::NullStore* _this)
        {
           return CryptoPP__NullStoredtor_NullStore4_user(_this, CryptoPP__NullStoredtor_NullStore4_next);
        };
        
        static int64_t CryptoPP__DERSequenceEncoderctor_DERSequenceEncoder1_wrapper(struct CryptoPP::DERSequenceEncoder* _this, struct CryptoPP::BufferedTransformation* arg_0, uint8_t arg_1)
        {
           return CryptoPP__DERSequenceEncoderctor_DERSequenceEncoder1_user(_this, arg_0, arg_1, CryptoPP__DERSequenceEncoderctor_DERSequenceEncoder1_next);
        };
        static int64_t CryptoPP__DERSequenceEncoderctor_DERSequenceEncoder2_wrapper(struct CryptoPP::DERSequenceEncoder* _this, struct CryptoPP::DERSequenceEncoder* arg_0, uint8_t arg_1)
        {
           return CryptoPP__DERSequenceEncoderctor_DERSequenceEncoder2_user(_this, arg_0, arg_1, CryptoPP__DERSequenceEncoderctor_DERSequenceEncoder2_next);
        };
        static int64_t CryptoPP__DERSequenceEncoderdtor_DERSequenceEncoder3_wrapper(struct CryptoPP::DERSequenceEncoder* _this)
        {
           return CryptoPP__DERSequenceEncoderdtor_DERSequenceEncoder3_user(_this, CryptoPP__DERSequenceEncoderdtor_DERSequenceEncoder3_next);
        };
        
        static int64_t CryptoPP__DL_SignatureMessageEncodingMethod_NRComputeMessageRepresentative1_wrapper(int64_t arg_0, int64_t arg_1, int arg_2, int arg_3, uint8_t* arg_4, struct CryptoPP* arg_5)
        {
           return CryptoPP__DL_SignatureMessageEncodingMethod_NRComputeMessageRepresentative1_user(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, CryptoPP__DL_SignatureMessageEncodingMethod_NRComputeMessageRepresentative1_next);
        };
        static int64_t CryptoPP__DL_SignatureMessageEncodingMethod_NRctor_DL_SignatureMessageEncodingMethod_NR2_wrapper(struct CryptoPP::DL_SignatureMessageEncodingMethod_NR* _this)
        {
           return CryptoPP__DL_SignatureMessageEncodingMethod_NRctor_DL_SignatureMessageEncodingMethod_NR2_user(_this, CryptoPP__DL_SignatureMessageEncodingMethod_NRctor_DL_SignatureMessageEncodingMethod_NR2_next);
        };
        static int64_t CryptoPP__DL_SignatureMessageEncodingMethod_NRdtor_DL_SignatureMessageEncodingMethod_NR3_wrapper(struct CryptoPP::DL_SignatureMessageEncodingMethod_NR* _this)
        {
           return CryptoPP__DL_SignatureMessageEncodingMethod_NRdtor_DL_SignatureMessageEncodingMethod_NR3_user(_this, CryptoPP__DL_SignatureMessageEncodingMethod_NRdtor_DL_SignatureMessageEncodingMethod_NR3_next);
        };
        
        static void CryptoPP__P1363_KDF2DeriveKey2_wrapper(char* output, uint64_t outputLength, char* input, uint64_t inputLength, char* derivationParams, uint64_t derivationParamsLength)
        {
           CryptoPP__P1363_KDF2DeriveKey2_user(output, outputLength, input, inputLength, derivationParams, derivationParamsLength, CryptoPP__P1363_KDF2DeriveKey2_next);
        };
        
        static int64_t CryptoPP__OS_RNG_Errctor_OS_RNG_Err1_wrapper(struct CryptoPP::OS_RNG_Err* _this, struct CryptoPP::OS_RNG_Err* arg_0)
        {
           return CryptoPP__OS_RNG_Errctor_OS_RNG_Err1_user(_this, arg_0, CryptoPP__OS_RNG_Errctor_OS_RNG_Err1_next);
        };
        static int64_t CryptoPP__OS_RNG_Errdtor_OS_RNG_Err2_wrapper(struct CryptoPP::OS_RNG_Err* _this)
        {
           return CryptoPP__OS_RNG_Errdtor_OS_RNG_Err2_user(_this, CryptoPP__OS_RNG_Errdtor_OS_RNG_Err2_next);
        };
        
        static int64_t CryptoPP__CombinedNameValuePairsctor_CombinedNameValuePairs1_wrapper(struct CryptoPP::CombinedNameValuePairs* _this, struct CryptoPP::NameValuePairs* arg_0, struct CryptoPP::NameValuePairs* arg_1)
        {
           return CryptoPP__CombinedNameValuePairsctor_CombinedNameValuePairs1_user(_this, arg_0, arg_1, CryptoPP__CombinedNameValuePairsctor_CombinedNameValuePairs1_next);
        };
        static bool CryptoPP__CombinedNameValuePairsGetVoidValue2_wrapper(struct CryptoPP::CombinedNameValuePairs* _this, char* arg_0, struct type_info* arg_1, void* arg_2)
        {
           return CryptoPP__CombinedNameValuePairsGetVoidValue2_user(_this, arg_0, arg_1, arg_2, CryptoPP__CombinedNameValuePairsGetVoidValue2_next);
        };
        static int64_t CryptoPP__CombinedNameValuePairsdtor_CombinedNameValuePairs3_wrapper(struct CryptoPP::CombinedNameValuePairs* _this)
        {
           return CryptoPP__CombinedNameValuePairsdtor_CombinedNameValuePairs3_user(_this, CryptoPP__CombinedNameValuePairsdtor_CombinedNameValuePairs3_next);
        };
        
        static void CryptoPP__FileStorector_FileStore2_wrapper(struct CryptoPP::FileStore* _this)
        {
           CryptoPP__FileStorector_FileStore2_user(_this, CryptoPP__FileStorector_FileStore2_next);
        };
        static uint64_t CryptoPP__FileStoreMaxRetrievable3_wrapper(struct CryptoPP::FileStore* _this)
        {
           return CryptoPP__FileStoreMaxRetrievable3_user(_this, CryptoPP__FileStoreMaxRetrievable3_next);
        };
        static uint64_t CryptoPP__FileStoreSkip4_wrapper(struct CryptoPP::FileStore* _this, uint64_t arg_0)
        {
           return CryptoPP__FileStoreSkip4_user(_this, arg_0, CryptoPP__FileStoreSkip4_next);
        };
        static void CryptoPP__FileStoreStoreInitialize5_wrapper(struct CryptoPP::FileStore* _this, struct CryptoPP::NameValuePairs* arg_0)
        {
           CryptoPP__FileStoreStoreInitialize5_user(_this, arg_0, CryptoPP__FileStoreStoreInitialize5_next);
        };
        static void CryptoPP__FileStoredtor_FileStore10_wrapper(struct CryptoPP::FileStore* _this)
        {
           CryptoPP__FileStoredtor_FileStore10_user(_this, CryptoPP__FileStoredtor_FileStore10_next);
        };
        
        static int64_t CryptoPP__FileStore__Errctor_Err1_wrapper(struct CryptoPP::FileStore::Err* _this, struct CryptoPP::FileStore::Err* arg_0)
        {
           return CryptoPP__FileStore__Errctor_Err1_user(_this, arg_0, CryptoPP__FileStore__Errctor_Err1_next);
        };
        static int64_t CryptoPP__FileStore__Errdtor_Err2_wrapper(struct CryptoPP::FileStore::Err* _this)
        {
           return CryptoPP__FileStore__Errdtor_Err2_user(_this, CryptoPP__FileStore__Errdtor_Err2_next);
        };
        
        static int64_t CryptoPP__FileStore__OpenErrctor_OpenErr1_wrapper(struct CryptoPP::FileStore::OpenErr* _this, struct CryptoPP::FileStore::OpenErr* arg_0)
        {
           return CryptoPP__FileStore__OpenErrctor_OpenErr1_user(_this, arg_0, CryptoPP__FileStore__OpenErrctor_OpenErr1_next);
        };
        static int64_t CryptoPP__FileStore__OpenErrdtor_OpenErr2_wrapper(struct CryptoPP::FileStore::OpenErr* _this)
        {
           return CryptoPP__FileStore__OpenErrdtor_OpenErr2_user(_this, CryptoPP__FileStore__OpenErrdtor_OpenErr2_next);
        };
        
        static int64_t CryptoPP__FileStore__ReadErrctor_ReadErr1_wrapper(struct CryptoPP::FileStore::ReadErr* _this, struct CryptoPP::FileStore::ReadErr* arg_0)
        {
           return CryptoPP__FileStore__ReadErrctor_ReadErr1_user(_this, arg_0, CryptoPP__FileStore__ReadErrctor_ReadErr1_next);
        };
        static int64_t CryptoPP__FileStore__ReadErrctor_ReadErr2_wrapper(struct CryptoPP::FileStore::ReadErr* _this)
        {
           return CryptoPP__FileStore__ReadErrctor_ReadErr2_user(_this, CryptoPP__FileStore__ReadErrctor_ReadErr2_next);
        };
        static int64_t CryptoPP__FileStore__ReadErrdtor_ReadErr3_wrapper(struct CryptoPP::FileStore::ReadErr* _this)
        {
           return CryptoPP__FileStore__ReadErrdtor_ReadErr3_user(_this, CryptoPP__FileStore__ReadErrdtor_ReadErr3_next);
        };
        
        static int CryptoPP__SourceTemplateGetAutoSignalPropagation2_wrapper(struct CryptoPP::SourceTemplate<CryptoPP::FileStore>* _this)
        {
           return CryptoPP__SourceTemplateGetAutoSignalPropagation2_user(_this, CryptoPP__SourceTemplateGetAutoSignalPropagation2_next);
        };
        static void CryptoPP__SourceTemplateIsolatedInitialize4_wrapper(struct CryptoPP::SourceTemplate<CryptoPP::FileStore>* _this, struct CryptoPP::NameValuePairs* parameters)
        {
           CryptoPP__SourceTemplateIsolatedInitialize4_user(_this, parameters, CryptoPP__SourceTemplateIsolatedInitialize4_next);
        };
        static uint64_t CryptoPP__SourceTemplatePump26_wrapper(struct CryptoPP::SourceTemplate<CryptoPP::FileStore>* _this, uint64_t* byteCount, bool blocking)
        {
           return CryptoPP__SourceTemplatePump26_user(_this, byteCount, blocking, CryptoPP__SourceTemplatePump26_next);
        };
        static uint64_t CryptoPP__SourceTemplatePumpAll28_wrapper(struct CryptoPP::SourceTemplate<CryptoPP::FileStore>* _this, bool blocking)
        {
           return CryptoPP__SourceTemplatePumpAll28_user(_this, blocking, CryptoPP__SourceTemplatePumpAll28_next);
        };
        static uint64_t CryptoPP__SourceTemplatePumpMessages210_wrapper(struct CryptoPP::SourceTemplate<CryptoPP::FileStore>* _this, unsigned int* messageCount, bool blocking)
        {
           return CryptoPP__SourceTemplatePumpMessages210_user(_this, messageCount, blocking, CryptoPP__SourceTemplatePumpMessages210_next);
        };
        static void CryptoPP__SourceTemplateSetAutoSignalPropagation12_wrapper(struct CryptoPP::SourceTemplate<CryptoPP::FileStore>* _this, int propagation)
        {
           CryptoPP__SourceTemplateSetAutoSignalPropagation12_user(_this, propagation, CryptoPP__SourceTemplateSetAutoSignalPropagation12_next);
        };
        static bool CryptoPP__SourceTemplateSourceExhausted14_wrapper(struct CryptoPP::SourceTemplate<CryptoPP::FileStore>* _this)
        {
           return CryptoPP__SourceTemplateSourceExhausted14_user(_this, CryptoPP__SourceTemplateSourceExhausted14_next);
        };
        static void CryptoPP__SourceTemplatector_SourceTemplate16_wrapper(struct CryptoPP::SourceTemplate<CryptoPP::FileStore>* _this, struct CryptoPP::BufferedTransformation* attachment)
        {
           CryptoPP__SourceTemplatector_SourceTemplate16_user(_this, attachment, CryptoPP__SourceTemplatector_SourceTemplate16_next);
        };
        static void CryptoPP__SourceTemplatedtor_SourceTemplate21_wrapper(struct CryptoPP::SourceTemplate<CryptoPP::FileStore>* _this)
        {
           CryptoPP__SourceTemplatedtor_SourceTemplate21_user(_this, CryptoPP__SourceTemplatedtor_SourceTemplate21_next);
        };
        
        static int64_t CryptoPP__FileSourcector_FileSource1_wrapper(struct CryptoPP::FileSource* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           return CryptoPP__FileSourcector_FileSource1_user(_this, arg_0, CryptoPP__FileSourcector_FileSource1_next);
        };
        static void CryptoPP__FileSourcector_FileSource3_wrapper(struct CryptoPP::FileSource* _this, char* filename, bool pumpAll, struct CryptoPP::BufferedTransformation* attachment, bool binary)
        {
           CryptoPP__FileSourcector_FileSource3_user(_this, filename, pumpAll, attachment, binary, CryptoPP__FileSourcector_FileSource3_next);
        };
        static void CryptoPP__FileSourcedtor_FileSource8_wrapper(struct CryptoPP::FileSource* _this)
        {
           CryptoPP__FileSourcedtor_FileSource8_user(_this, CryptoPP__FileSourcedtor_FileSource8_next);
        };
        
        static int64_t CryptoPP__FileSinkctor_FileSink1_wrapper(struct CryptoPP::FileSink* _this)
        {
           return CryptoPP__FileSinkctor_FileSink1_user(_this, CryptoPP__FileSinkctor_FileSink1_next);
        };
        static bool CryptoPP__FileSinkIsolatedFlush2_wrapper(struct CryptoPP::FileSink* _this, bool arg_0, bool arg_1)
        {
           return CryptoPP__FileSinkIsolatedFlush2_user(_this, arg_0, arg_1, CryptoPP__FileSinkIsolatedFlush2_next);
        };
        static void CryptoPP__FileSinkIsolatedInitialize3_wrapper(struct CryptoPP::FileSink* _this, struct CryptoPP::NameValuePairs* arg_0)
        {
           CryptoPP__FileSinkIsolatedInitialize3_user(_this, arg_0, CryptoPP__FileSinkIsolatedInitialize3_next);
        };
        static uint64_t CryptoPP__FileSinkPut24_wrapper(struct CryptoPP::FileSink* _this, uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
        {
           return CryptoPP__FileSinkPut24_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__FileSinkPut24_next);
        };
        static int64_t CryptoPP__FileSinkdtor_FileSink5_wrapper(struct CryptoPP::FileSink* _this)
        {
           return CryptoPP__FileSinkdtor_FileSink5_user(_this, CryptoPP__FileSinkdtor_FileSink5_next);
        };
        
        static int64_t CryptoPP__FileSink__Errctor_Err1_wrapper(struct CryptoPP::FileSink::Err* _this, struct CryptoPP::FileSink::Err* arg_0)
        {
           return CryptoPP__FileSink__Errctor_Err1_user(_this, arg_0, CryptoPP__FileSink__Errctor_Err1_next);
        };
        static int64_t CryptoPP__FileSink__Errdtor_Err2_wrapper(struct CryptoPP::FileSink::Err* _this)
        {
           return CryptoPP__FileSink__Errdtor_Err2_user(_this, CryptoPP__FileSink__Errdtor_Err2_next);
        };
        
        static int64_t CryptoPP__FileSink__OpenErrctor_OpenErr1_wrapper(struct CryptoPP::FileSink::OpenErr* _this, struct CryptoPP::FileSink::OpenErr* arg_0)
        {
           return CryptoPP__FileSink__OpenErrctor_OpenErr1_user(_this, arg_0, CryptoPP__FileSink__OpenErrctor_OpenErr1_next);
        };
        static int64_t CryptoPP__FileSink__OpenErrdtor_OpenErr2_wrapper(struct CryptoPP::FileSink::OpenErr* _this)
        {
           return CryptoPP__FileSink__OpenErrdtor_OpenErr2_user(_this, CryptoPP__FileSink__OpenErrdtor_OpenErr2_next);
        };
        
        static int64_t CryptoPP__FileSink__WriteErrctor_WriteErr1_wrapper(struct CryptoPP::FileSink::WriteErr* _this, struct CryptoPP::FileSink::WriteErr* arg_0)
        {
           return CryptoPP__FileSink__WriteErrctor_WriteErr1_user(_this, arg_0, CryptoPP__FileSink__WriteErrctor_WriteErr1_next);
        };
        static int64_t CryptoPP__FileSink__WriteErrctor_WriteErr2_wrapper(struct CryptoPP::FileSink::WriteErr* _this)
        {
           return CryptoPP__FileSink__WriteErrctor_WriteErr2_user(_this, CryptoPP__FileSink__WriteErrctor_WriteErr2_next);
        };
        static int64_t CryptoPP__FileSink__WriteErrdtor_WriteErr3_wrapper(struct CryptoPP::FileSink::WriteErr* _this)
        {
           return CryptoPP__FileSink__WriteErrdtor_WriteErr3_user(_this, CryptoPP__FileSink__WriteErrdtor_WriteErr3_next);
        };
        
        static void CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase22_wrapper(struct CryptoPP::AlgorithmParametersBase2<char const *>* _this, struct CryptoPP::AlgorithmParametersBase2<char const *>* __that)
        {
           CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase22_user(_this, __that, CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase22_next);
        };
        static void CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase24_wrapper(struct CryptoPP::AlgorithmParametersBase2<char const *>* _this, char* name, char** value, bool throwIfNotUsed)
        {
           CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase24_user(_this, name, value, throwIfNotUsed, CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase24_next);
        };
        static void CryptoPP__AlgorithmParametersBase2AssignValue6_wrapper(struct CryptoPP::AlgorithmParametersBase2<char const *>* _this, char* name, struct type_info* valueType, void* pValue)
        {
           CryptoPP__AlgorithmParametersBase2AssignValue6_user(_this, name, valueType, pValue, CryptoPP__AlgorithmParametersBase2AssignValue6_next);
        };
        static void CryptoPP__AlgorithmParametersBase2dtor_AlgorithmParametersBase211_wrapper(struct CryptoPP::AlgorithmParametersBase2<char const *>* _this)
        {
           CryptoPP__AlgorithmParametersBase2dtor_AlgorithmParametersBase211_user(_this, CryptoPP__AlgorithmParametersBase2dtor_AlgorithmParametersBase211_next);
        };
        
        static void CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase22_wrapper(struct CryptoPP::AlgorithmParametersBase2<bool>* _this, char* name, bool* value, bool throwIfNotUsed)
        {
           CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase22_user(_this, name, value, throwIfNotUsed, CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase22_next);
        };
        static void CryptoPP__AlgorithmParametersBase2AssignValue4_wrapper(struct CryptoPP::AlgorithmParametersBase2<bool>* _this, char* name, struct type_info* valueType, void* pValue)
        {
           CryptoPP__AlgorithmParametersBase2AssignValue4_user(_this, name, valueType, pValue, CryptoPP__AlgorithmParametersBase2AssignValue4_next);
        };
        static void CryptoPP__AlgorithmParametersBase2dtor_AlgorithmParametersBase29_wrapper(struct CryptoPP::AlgorithmParametersBase2<bool>* _this)
        {
           CryptoPP__AlgorithmParametersBase2dtor_AlgorithmParametersBase29_user(_this, CryptoPP__AlgorithmParametersBase2dtor_AlgorithmParametersBase29_next);
        };
        
        static void CryptoPP__AlgorithmParametersctor_AlgorithmParameters2_wrapper(struct CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>* _this, struct CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>* copy)
        {
           CryptoPP__AlgorithmParametersctor_AlgorithmParameters2_user(_this, copy, CryptoPP__AlgorithmParametersctor_AlgorithmParameters2_next);
        };
        static void CryptoPP__AlgorithmParametersctor_AlgorithmParameters4_wrapper(struct CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>* _this, struct CryptoPP::NullNameValuePairs* parent, char* name, char** value, bool throwIfNotUsed)
        {
           CryptoPP__AlgorithmParametersctor_AlgorithmParameters4_user(_this, parent, name, value, throwIfNotUsed, CryptoPP__AlgorithmParametersctor_AlgorithmParameters4_next);
        };
        static struct CryptoPP::NameValuePairs* CryptoPP__AlgorithmParametersGetParent6_wrapper(struct CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>* _this)
        {
           return CryptoPP__AlgorithmParametersGetParent6_user(_this, CryptoPP__AlgorithmParametersGetParent6_next);
        };
        static void CryptoPP__AlgorithmParametersdtor_AlgorithmParameters13_wrapper(struct CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>* _this)
        {
           CryptoPP__AlgorithmParametersdtor_AlgorithmParameters13_user(_this, CryptoPP__AlgorithmParametersdtor_AlgorithmParameters13_next);
        };
        
        static void CryptoPP__AlgorithmParametersctor_AlgorithmParameters2_wrapper(struct CryptoPP::AlgorithmParameters<CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>,bool>* _this, struct CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>* parent, char* name, bool* value, bool throwIfNotUsed)
        {
           CryptoPP__AlgorithmParametersctor_AlgorithmParameters2_user(_this, parent, name, value, throwIfNotUsed, CryptoPP__AlgorithmParametersctor_AlgorithmParameters2_next);
        };
        static struct CryptoPP::NameValuePairs* CryptoPP__AlgorithmParametersGetParent4_wrapper(struct CryptoPP::AlgorithmParameters<CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>,bool>* _this)
        {
           return CryptoPP__AlgorithmParametersGetParent4_user(_this, CryptoPP__AlgorithmParametersGetParent4_next);
        };
        static void CryptoPP__AlgorithmParametersdtor_AlgorithmParameters9_wrapper(struct CryptoPP::AlgorithmParameters<CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>,bool>* _this)
        {
           CryptoPP__AlgorithmParametersdtor_AlgorithmParameters9_user(_this, CryptoPP__AlgorithmParametersdtor_AlgorithmParameters9_next);
        };
        
        static int64_t CryptoPP__ByteQueueNodector_ByteQueueNode1_wrapper(struct CryptoPP::ByteQueueNode* _this, struct CryptoPP::ByteQueueNode* arg_0)
        {
           return CryptoPP__ByteQueueNodector_ByteQueueNode1_user(_this, arg_0, CryptoPP__ByteQueueNodector_ByteQueueNode1_next);
        };
        static int64_t CryptoPP__ByteQueueNodector_ByteQueueNode2_wrapper(struct CryptoPP::ByteQueueNode* _this, uint64_t arg_0)
        {
           return CryptoPP__ByteQueueNodector_ByteQueueNode2_user(_this, arg_0, CryptoPP__ByteQueueNodector_ByteQueueNode2_next);
        };
        static void CryptoPP__ByteQueueNodeClear3_wrapper(struct CryptoPP::ByteQueueNode* _this)
        {
           CryptoPP__ByteQueueNodeClear3_user(_this, CryptoPP__ByteQueueNodeClear3_next);
        };
        static uint64_t CryptoPP__ByteQueueNodeCurrentSize4_wrapper(struct CryptoPP::ByteQueueNode* _this)
        {
           return CryptoPP__ByteQueueNodeCurrentSize4_user(_this, CryptoPP__ByteQueueNodeCurrentSize4_next);
        };
        static uint64_t CryptoPP__ByteQueueNodeGet5_wrapper(struct CryptoPP::ByteQueueNode* _this, uint8_t* arg_0)
        {
           return CryptoPP__ByteQueueNodeGet5_user(_this, arg_0, CryptoPP__ByteQueueNodeGet5_next);
        };
        static uint64_t CryptoPP__ByteQueueNodeMaxSize6_wrapper(struct CryptoPP::ByteQueueNode* _this)
        {
           return CryptoPP__ByteQueueNodeMaxSize6_user(_this, CryptoPP__ByteQueueNodeMaxSize6_next);
        };
        static uint64_t CryptoPP__ByteQueueNodePeek7_wrapper(struct CryptoPP::ByteQueueNode* _this, uint8_t* arg_0)
        {
           return CryptoPP__ByteQueueNodePeek7_user(_this, arg_0, CryptoPP__ByteQueueNodePeek7_next);
        };
        static uint64_t CryptoPP__ByteQueueNodePut8_wrapper(struct CryptoPP::ByteQueueNode* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           return CryptoPP__ByteQueueNodePut8_user(_this, arg_0, arg_1, CryptoPP__ByteQueueNodePut8_next);
        };
        static bool CryptoPP__ByteQueueNodeUsedUp9_wrapper(struct CryptoPP::ByteQueueNode* _this)
        {
           return CryptoPP__ByteQueueNodeUsedUp9_user(_this, CryptoPP__ByteQueueNodeUsedUp9_next);
        };
        static int64_t CryptoPP__ByteQueueNodedtor_ByteQueueNode10_wrapper(struct CryptoPP::ByteQueueNode* _this)
        {
           return CryptoPP__ByteQueueNodedtor_ByteQueueNode10_user(_this, CryptoPP__ByteQueueNodedtor_ByteQueueNode10_next);
        };
        
        static char* CryptoPP__NameCofactor1_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NameCofactor1_user(_this, CryptoPP__NameCofactor1_next);
        };
        static char* CryptoPP__NameCurve2_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NameCurve2_user(_this, CryptoPP__NameCurve2_next);
        };
        static char* CryptoPP__NameDecodingLookupArray3_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NameDecodingLookupArray3_user(_this, CryptoPP__NameDecodingLookupArray3_next);
        };
        static char* CryptoPP__NameEncodingLookupArray4_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NameEncodingLookupArray4_user(_this, CryptoPP__NameEncodingLookupArray4_next);
        };
        static char* CryptoPP__NameEncodingParameters6_wrapper()
        {
           return CryptoPP__NameEncodingParameters6_user(CryptoPP__NameEncodingParameters6_next);
        };
        static char* CryptoPP__NameFeedbackSize7_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NameFeedbackSize7_user(_this, CryptoPP__NameFeedbackSize7_next);
        };
        static char* CryptoPP__NameGroupOID8_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NameGroupOID8_user(_this, CryptoPP__NameGroupOID8_next);
        };
        static char* CryptoPP__NameGroupSize9_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NameGroupSize9_user(_this, CryptoPP__NameGroupSize9_next);
        };
        static char* CryptoPP__NameHashVerificationFilterFlags10_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NameHashVerificationFilterFlags10_user(_this, CryptoPP__NameHashVerificationFilterFlags10_next);
        };
        static char* CryptoPP__NameIV11_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NameIV11_user(_this, CryptoPP__NameIV11_next);
        };
        static char* CryptoPP__NameInputBinaryMode13_wrapper()
        {
           return CryptoPP__NameInputBinaryMode13_user(CryptoPP__NameInputBinaryMode13_next);
        };
        static char* CryptoPP__NameInputBuffer14_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NameInputBuffer14_user(_this, CryptoPP__NameInputBuffer14_next);
        };
        static char* CryptoPP__NameInputFileName16_wrapper()
        {
           return CryptoPP__NameInputFileName16_user(CryptoPP__NameInputFileName16_next);
        };
        static char* CryptoPP__NameInputStreamPointer17_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NameInputStreamPointer17_user(_this, CryptoPP__NameInputStreamPointer17_next);
        };
        static char* CryptoPP__NameKeyDerivationParameters19_wrapper()
        {
           return CryptoPP__NameKeyDerivationParameters19_user(CryptoPP__NameKeyDerivationParameters19_next);
        };
        static char* CryptoPP__NameLog2Base20_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NameLog2Base20_user(_this, CryptoPP__NameLog2Base20_next);
        };
        static char* CryptoPP__NameModulus21_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NameModulus21_user(_this, CryptoPP__NameModulus21_next);
        };
        static char* CryptoPP__NameOutputBinaryMode22_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NameOutputBinaryMode22_user(_this, CryptoPP__NameOutputBinaryMode22_next);
        };
        static char* CryptoPP__NameOutputBuffer23_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NameOutputBuffer23_user(_this, CryptoPP__NameOutputBuffer23_next);
        };
        static char* CryptoPP__NameOutputFileName24_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NameOutputFileName24_user(_this, CryptoPP__NameOutputFileName24_next);
        };
        static char* CryptoPP__NameOutputStreamPointer25_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NameOutputStreamPointer25_user(_this, CryptoPP__NameOutputStreamPointer25_next);
        };
        static char* CryptoPP__NamePad26_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NamePad26_user(_this, CryptoPP__NamePad26_next);
        };
        static char* CryptoPP__NamePaddingByte27_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NamePaddingByte27_user(_this, CryptoPP__NamePaddingByte27_next);
        };
        static char* CryptoPP__NamePointerToPrimeSelector28_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NamePointerToPrimeSelector28_user(_this, CryptoPP__NamePointerToPrimeSelector28_next);
        };
        static char* CryptoPP__NamePrivateExponent30_wrapper()
        {
           return CryptoPP__NamePrivateExponent30_user(CryptoPP__NamePrivateExponent30_next);
        };
        static char* CryptoPP__NamePublicElement32_wrapper()
        {
           return CryptoPP__NamePublicElement32_user(CryptoPP__NamePublicElement32_next);
        };
        static char* CryptoPP__NamePutMessage33_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NamePutMessage33_user(_this, CryptoPP__NamePutMessage33_next);
        };
        static char* CryptoPP__NameRounds34_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NameRounds34_user(_this, CryptoPP__NameRounds34_next);
        };
        static char* CryptoPP__NameSeparator35_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NameSeparator35_user(_this, CryptoPP__NameSeparator35_next);
        };
        static char* CryptoPP__NameSignatureVerificationFilterFlags36_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NameSignatureVerificationFilterFlags36_user(_this, CryptoPP__NameSignatureVerificationFilterFlags36_next);
        };
        static char* CryptoPP__NameStolenIV37_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NameStolenIV37_user(_this, CryptoPP__NameStolenIV37_next);
        };
        static char* CryptoPP__NameSubgroupGenerator39_wrapper()
        {
           return CryptoPP__NameSubgroupGenerator39_user(CryptoPP__NameSubgroupGenerator39_next);
        };
        static char* CryptoPP__NameSubgroupOrder41_wrapper()
        {
           return CryptoPP__NameSubgroupOrder41_user(CryptoPP__NameSubgroupOrder41_next);
        };
        static char* CryptoPP__NameTerminator42_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NameTerminator42_user(_this, CryptoPP__NameTerminator42_next);
        };
        static char* CryptoPP__NameTruncatedDigestSize43_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NameTruncatedDigestSize43_user(_this, CryptoPP__NameTruncatedDigestSize43_next);
        };
        static char* CryptoPP__NameUppercase44_wrapper(struct CryptoPP::Name* _this)
        {
           return CryptoPP__NameUppercase44_user(_this, CryptoPP__NameUppercase44_next);
        };
        
        static int64_t CryptoPP__BaseN_Decoderctor_BaseN_Decoder1_wrapper(struct CryptoPP::BaseN_Decoder* _this, int* arg_0, int arg_1, struct CryptoPP::BufferedTransformation* arg_2)
        {
           return CryptoPP__BaseN_Decoderctor_BaseN_Decoder1_user(_this, arg_0, arg_1, arg_2, CryptoPP__BaseN_Decoderctor_BaseN_Decoder1_next);
        };
        static void CryptoPP__BaseN_DecoderInitializeDecodingLookupArray2_wrapper(int* arg_0, uint8_t* arg_1, unsigned int arg_2, bool arg_3)
        {
           CryptoPP__BaseN_DecoderInitializeDecodingLookupArray2_user(arg_0, arg_1, arg_2, arg_3, CryptoPP__BaseN_DecoderInitializeDecodingLookupArray2_next);
        };
        static void CryptoPP__BaseN_DecoderIsolatedInitialize3_wrapper(struct CryptoPP::BaseN_Decoder* _this, struct CryptoPP::NameValuePairs* arg_0)
        {
           CryptoPP__BaseN_DecoderIsolatedInitialize3_user(_this, arg_0, CryptoPP__BaseN_DecoderIsolatedInitialize3_next);
        };
        static uint64_t CryptoPP__BaseN_DecoderPut24_wrapper(struct CryptoPP::BaseN_Decoder* _this, uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
        {
           return CryptoPP__BaseN_DecoderPut24_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__BaseN_DecoderPut24_next);
        };
        static int64_t CryptoPP__BaseN_Decoderdtor_BaseN_Decoder5_wrapper(struct CryptoPP::BaseN_Decoder* _this)
        {
           return CryptoPP__BaseN_Decoderdtor_BaseN_Decoder5_user(_this, CryptoPP__BaseN_Decoderdtor_BaseN_Decoder5_next);
        };
        
        static int* CryptoPP__HexDecoderGetDefaultDecodingLookupArray1_wrapper()
        {
           return CryptoPP__HexDecoderGetDefaultDecodingLookupArray1_user(CryptoPP__HexDecoderGetDefaultDecodingLookupArray1_next);
        };
        static int64_t CryptoPP__HexDecoderctor_HexDecoder2_wrapper(struct CryptoPP::HexDecoder* _this, struct CryptoPP::BufferedTransformation* arg_0)
        {
           return CryptoPP__HexDecoderctor_HexDecoder2_user(_this, arg_0, CryptoPP__HexDecoderctor_HexDecoder2_next);
        };
        static void CryptoPP__HexDecoderIsolatedInitialize3_wrapper(struct CryptoPP::HexDecoder* _this, struct CryptoPP::NameValuePairs* arg_0)
        {
           CryptoPP__HexDecoderIsolatedInitialize3_user(_this, arg_0, CryptoPP__HexDecoderIsolatedInitialize3_next);
        };
        static int64_t CryptoPP__HexDecoderdtor_HexDecoder4_wrapper(struct CryptoPP::HexDecoder* _this)
        {
           return CryptoPP__HexDecoderdtor_HexDecoder4_user(_this, CryptoPP__HexDecoderdtor_HexDecoder4_next);
        };
        
        static void CryptoPP__WindowSliderFindNextWindow1_wrapper(struct CryptoPP::WindowSlider* _this)
        {
           CryptoPP__WindowSliderFindNextWindow1_user(_this, CryptoPP__WindowSliderFindNextWindow1_next);
        };
        static int64_t CryptoPP__WindowSliderctor_WindowSlider2_wrapper(struct CryptoPP::WindowSlider* _this, struct CryptoPP::Integer* arg_0, bool arg_1, unsigned int arg_2)
        {
           return CryptoPP__WindowSliderctor_WindowSlider2_user(_this, arg_0, arg_1, arg_2, CryptoPP__WindowSliderctor_WindowSlider2_next);
        };
        static int64_t CryptoPP__WindowSliderctor_WindowSlider3_wrapper(struct CryptoPP::WindowSlider* _this, struct CryptoPP::WindowSlider* arg_0)
        {
           return CryptoPP__WindowSliderctor_WindowSlider3_user(_this, arg_0, CryptoPP__WindowSliderctor_WindowSlider3_next);
        };
        static int64_t CryptoPP__WindowSliderdtor_WindowSlider4_wrapper(struct CryptoPP::WindowSlider* _this)
        {
           return CryptoPP__WindowSliderdtor_WindowSlider4_user(_this, CryptoPP__WindowSliderdtor_WindowSlider4_next);
        };
        
        static int64_t CryptoPP__DWordctor_DWord1_wrapper(struct CryptoPP::DWord* _this, uint64_t arg_0)
        {
           return CryptoPP__DWordctor_DWord1_user(_this, arg_0, CryptoPP__DWordctor_DWord1_next);
        };
        static int64_t CryptoPP__DWordctor_DWord2_wrapper(struct CryptoPP::DWord* _this, uint64_t arg_0, uint64_t arg_1)
        {
           return CryptoPP__DWordctor_DWord2_user(_this, arg_0, arg_1, CryptoPP__DWordctor_DWord2_next);
        };
        static int64_t CryptoPP__DWordctor_DWord3_wrapper(struct CryptoPP::DWord* _this)
        {
           return CryptoPP__DWordctor_DWord3_user(_this, CryptoPP__DWordctor_DWord3_next);
        };
        static uint64_t CryptoPP__DWordGetHighHalf4_wrapper(struct CryptoPP::DWord* _this)
        {
           return CryptoPP__DWordGetHighHalf4_user(_this, CryptoPP__DWordGetHighHalf4_next);
        };
        static uint64_t CryptoPP__DWordGetHighHalfAsBorrow5_wrapper(struct CryptoPP::DWord* _this)
        {
           return CryptoPP__DWordGetHighHalfAsBorrow5_user(_this, CryptoPP__DWordGetHighHalfAsBorrow5_next);
        };
        static uint64_t CryptoPP__DWordGetLowHalf6_wrapper(struct CryptoPP::DWord* _this)
        {
           return CryptoPP__DWordGetLowHalf6_user(_this, CryptoPP__DWordGetLowHalf6_next);
        };
        
        static void CryptoPP__KDF2_RNGGenerateBlock1_wrapper(struct CryptoPP::KDF2_RNG* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__KDF2_RNGGenerateBlock1_user(_this, arg_0, arg_1, CryptoPP__KDF2_RNGGenerateBlock1_next);
        };
        static int64_t CryptoPP__KDF2_RNGctor_KDF2_RNG2_wrapper(struct CryptoPP::KDF2_RNG* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           return CryptoPP__KDF2_RNGctor_KDF2_RNG2_user(_this, arg_0, arg_1, CryptoPP__KDF2_RNGctor_KDF2_RNG2_next);
        };
        static int64_t CryptoPP__KDF2_RNGdtor_KDF2_RNG3_wrapper(struct CryptoPP::KDF2_RNG* _this)
        {
           return CryptoPP__KDF2_RNGdtor_KDF2_RNG3_user(_this, CryptoPP__KDF2_RNGdtor_KDF2_RNG3_next);
        };
        
        static unsigned int CryptoPP__WordGetHighHalf1_wrapper(struct CryptoPP::Word* _this)
        {
           return CryptoPP__WordGetHighHalf1_user(_this, CryptoPP__WordGetHighHalf1_next);
        };
        static unsigned int CryptoPP__WordGetHighHalfAsBorrow2_wrapper(struct CryptoPP::Word* _this)
        {
           return CryptoPP__WordGetHighHalfAsBorrow2_user(_this, CryptoPP__WordGetHighHalfAsBorrow2_next);
        };
        static unsigned int CryptoPP__WordGetLowHalf3_wrapper(struct CryptoPP::Word* _this)
        {
           return CryptoPP__WordGetLowHalf3_user(_this, CryptoPP__WordGetLowHalf3_next);
        };
        static uint64_t CryptoPP__WordGetWhole4_wrapper(struct CryptoPP::Word* _this)
        {
           return CryptoPP__WordGetWhole4_user(_this, CryptoPP__WordGetWhole4_next);
        };
        static int64_t CryptoPP__Wordctor_Word5_wrapper(struct CryptoPP::Word* _this, unsigned int arg_0, unsigned int arg_1)
        {
           return CryptoPP__Wordctor_Word5_user(_this, arg_0, arg_1, CryptoPP__Wordctor_Word5_next);
        };
        static int64_t CryptoPP__Wordctor_Word6_wrapper(struct CryptoPP::Word* _this, uint64_t arg_0)
        {
           return CryptoPP__Wordctor_Word6_user(_this, arg_0, CryptoPP__Wordctor_Word6_next);
        };
        static int64_t CryptoPP__Wordctor_Word7_wrapper(struct CryptoPP::Word* _this)
        {
           return CryptoPP__Wordctor_Word7_user(_this, CryptoPP__Wordctor_Word7_next);
        };
        
        static int64_t CryptoPP__ClassNullRNGctor_ClassNullRNG1_wrapper(struct CryptoPP::ClassNullRNG* _this)
        {
           return CryptoPP__ClassNullRNGctor_ClassNullRNG1_user(_this, CryptoPP__ClassNullRNGctor_ClassNullRNG1_next);
        };
        static void CryptoPP__ClassNullRNGGenerateBlock2_wrapper(struct CryptoPP::ClassNullRNG* _this, uint8_t* arg_0, uint64_t arg_1)
        {
           CryptoPP__ClassNullRNGGenerateBlock2_user(_this, arg_0, arg_1, CryptoPP__ClassNullRNGGenerateBlock2_next);
        };
        static int64_t CryptoPP__ClassNullRNGdtor_ClassNullRNG3_wrapper(struct CryptoPP::ClassNullRNG* _this)
        {
           return CryptoPP__ClassNullRNGdtor_ClassNullRNG3_user(_this, CryptoPP__ClassNullRNGdtor_ClassNullRNG3_next);
        };
        
        static int64_t CryptoPP__ProjectivePointctor_ProjectivePoint1_wrapper(struct CryptoPP::ProjectivePoint* _this, struct CryptoPP::ProjectivePoint* arg_0)
        {
           return CryptoPP__ProjectivePointctor_ProjectivePoint1_user(_this, arg_0, CryptoPP__ProjectivePointctor_ProjectivePoint1_next);
        };
        static int64_t CryptoPP__ProjectivePointctor_ProjectivePoint2_wrapper(struct CryptoPP::ProjectivePoint* _this)
        {
           return CryptoPP__ProjectivePointctor_ProjectivePoint2_user(_this, CryptoPP__ProjectivePointctor_ProjectivePoint2_next);
        };
        static int64_t CryptoPP__ProjectivePointdtor_ProjectivePoint3_wrapper(struct CryptoPP::ProjectivePoint* _this)
        {
           return CryptoPP__ProjectivePointdtor_ProjectivePoint3_user(_this, CryptoPP__ProjectivePointdtor_ProjectivePoint3_next);
        };
        
        static void CryptoPP__ProjectiveDoublingDouble1_wrapper(struct CryptoPP::ProjectiveDoubling* _this)
        {
           CryptoPP__ProjectiveDoublingDouble1_user(_this, CryptoPP__ProjectiveDoublingDouble1_next);
        };
        static int64_t CryptoPP__ProjectiveDoublingctor_ProjectiveDoubling2_wrapper(struct CryptoPP::ProjectiveDoubling* _this, struct CryptoPP::ModularArithmetic* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2, struct CryptoPP::ECPPoint* arg_3)
        {
           return CryptoPP__ProjectiveDoublingctor_ProjectiveDoubling2_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__ProjectiveDoublingctor_ProjectiveDoubling2_next);
        };
        static int64_t CryptoPP__ProjectiveDoublingdtor_ProjectiveDoubling3_wrapper(struct CryptoPP::ProjectiveDoubling* _this)
        {
           return CryptoPP__ProjectiveDoublingdtor_ProjectiveDoubling3_user(_this, CryptoPP__ProjectiveDoublingdtor_ProjectiveDoubling3_next);
        };
        
        static void CryptoPP__PrimeAndGeneratorGenerate1_wrapper(struct CryptoPP::PrimeAndGenerator* _this, int arg_0, struct CryptoPP::RandomNumberGenerator* arg_1, unsigned int arg_2, unsigned int arg_3)
        {
           CryptoPP__PrimeAndGeneratorGenerate1_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__PrimeAndGeneratorGenerate1_next);
        };
        static struct CryptoPP::Integer* CryptoPP__PrimeAndGeneratorctor_Generator2_wrapper(struct CryptoPP::PrimeAndGenerator* _this)
        {
           return CryptoPP__PrimeAndGeneratorctor_Generator2_user(_this, CryptoPP__PrimeAndGeneratorctor_Generator2_next);
        };
        static struct CryptoPP::Integer* CryptoPP__PrimeAndGeneratorPrime3_wrapper(struct CryptoPP::PrimeAndGenerator* _this)
        {
           return CryptoPP__PrimeAndGeneratorPrime3_user(_this, CryptoPP__PrimeAndGeneratorPrime3_next);
        };
        static int64_t CryptoPP__PrimeAndGeneratorctor_PrimeAndGenerator4_wrapper(struct CryptoPP::PrimeAndGenerator* _this)
        {
           return CryptoPP__PrimeAndGeneratorctor_PrimeAndGenerator4_user(_this, CryptoPP__PrimeAndGeneratorctor_PrimeAndGenerator4_next);
        };
        static struct CryptoPP::Integer* CryptoPP__PrimeAndGeneratorSubPrime5_wrapper(struct CryptoPP::PrimeAndGenerator* _this)
        {
           return CryptoPP__PrimeAndGeneratorSubPrime5_user(_this, CryptoPP__PrimeAndGeneratorSubPrime5_next);
        };
        static int64_t CryptoPP__PrimeAndGeneratordtor_PrimeAndGenerator6_wrapper(struct CryptoPP::PrimeAndGenerator* _this)
        {
           return CryptoPP__PrimeAndGeneratordtor_PrimeAndGenerator6_user(_this, CryptoPP__PrimeAndGeneratordtor_PrimeAndGenerator6_next);
        };
        
        static void CryptoPP__BaseN_EncoderIsolatedInitialize1_wrapper(struct CryptoPP::BaseN_Encoder* _this, struct CryptoPP::NameValuePairs* arg_0)
        {
           CryptoPP__BaseN_EncoderIsolatedInitialize1_user(_this, arg_0, CryptoPP__BaseN_EncoderIsolatedInitialize1_next);
        };
        static uint64_t CryptoPP__BaseN_EncoderPut22_wrapper(struct CryptoPP::BaseN_Encoder* _this, uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
        {
           return CryptoPP__BaseN_EncoderPut22_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__BaseN_EncoderPut22_next);
        };
        
        static void CryptoPP__GrouperIsolatedInitialize1_wrapper(struct CryptoPP::Grouper* _this, struct CryptoPP::NameValuePairs* arg_0)
        {
           CryptoPP__GrouperIsolatedInitialize1_user(_this, arg_0, CryptoPP__GrouperIsolatedInitialize1_next);
        };
        static uint64_t CryptoPP__GrouperPut22_wrapper(struct CryptoPP::Grouper* _this, uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
        {
           return CryptoPP__GrouperPut22_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__GrouperPut22_next);
        };
        
        static void CryptoPP__PrimeSieveDoSieve1_wrapper(struct CryptoPP::PrimeSieve* _this)
        {
           CryptoPP__PrimeSieveDoSieve1_user(_this, CryptoPP__PrimeSieveDoSieve1_next);
        };
        static bool CryptoPP__PrimeSieveNextCandidate2_wrapper(struct CryptoPP::PrimeSieve* _this, struct CryptoPP::Integer* arg_0)
        {
           return CryptoPP__PrimeSieveNextCandidate2_user(_this, arg_0, CryptoPP__PrimeSieveNextCandidate2_next);
        };
        static int64_t CryptoPP__PrimeSievector_PrimeSieve3_wrapper(struct CryptoPP::PrimeSieve* _this, struct CryptoPP::Integer* arg_0, struct CryptoPP::Integer* arg_1, struct CryptoPP::Integer* arg_2, int arg_3)
        {
           return CryptoPP__PrimeSievector_PrimeSieve3_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__PrimeSievector_PrimeSieve3_next);
        };
        static int64_t CryptoPP__PrimeSievedtor_PrimeSieve4_wrapper(struct CryptoPP::PrimeSieve* _this)
        {
           return CryptoPP__PrimeSievedtor_PrimeSieve4_user(_this, CryptoPP__PrimeSievedtor_PrimeSieve4_next);
        };
        
        static bool CryptoPP__MessageQueueAnyRetrievable1_wrapper(struct CryptoPP::MessageQueue* _this)
        {
           return CryptoPP__MessageQueueAnyRetrievable1_user(_this, CryptoPP__MessageQueueAnyRetrievable1_next);
        };
        static bool CryptoPP__MessageQueueGetNextMessage2_wrapper(struct CryptoPP::MessageQueue* _this)
        {
           return CryptoPP__MessageQueueGetNextMessage2_user(_this, CryptoPP__MessageQueueGetNextMessage2_next);
        };
        static bool CryptoPP__MessageQueueIsolatedFlush3_wrapper(struct CryptoPP::MessageQueue* _this, bool arg_0, bool arg_1)
        {
           return CryptoPP__MessageQueueIsolatedFlush3_user(_this, arg_0, arg_1, CryptoPP__MessageQueueIsolatedFlush3_next);
        };
        static void CryptoPP__MessageQueueIsolatedInitialize4_wrapper(struct CryptoPP::MessageQueue* _this, struct CryptoPP::NameValuePairs* arg_0)
        {
           CryptoPP__MessageQueueIsolatedInitialize4_user(_this, arg_0, CryptoPP__MessageQueueIsolatedInitialize4_next);
        };
        static bool CryptoPP__MessageQueueIsolatedMessageSeriesEnd5_wrapper(struct CryptoPP::MessageQueue* _this, bool arg_0)
        {
           return CryptoPP__MessageQueueIsolatedMessageSeriesEnd5_user(_this, arg_0, CryptoPP__MessageQueueIsolatedMessageSeriesEnd5_next);
        };
        static uint64_t CryptoPP__MessageQueueMaxRetrievable6_wrapper(struct CryptoPP::MessageQueue* _this)
        {
           return CryptoPP__MessageQueueMaxRetrievable6_user(_this, CryptoPP__MessageQueueMaxRetrievable6_next);
        };
        static int64_t CryptoPP__MessageQueuector_MessageQueue7_wrapper(struct CryptoPP::MessageQueue* _this, unsigned int arg_0)
        {
           return CryptoPP__MessageQueuector_MessageQueue7_user(_this, arg_0, CryptoPP__MessageQueuector_MessageQueue7_next);
        };
        static unsigned int CryptoPP__MessageQueueNumberOfMessageSeries8_wrapper(struct CryptoPP::MessageQueue* _this)
        {
           return CryptoPP__MessageQueueNumberOfMessageSeries8_user(_this, CryptoPP__MessageQueueNumberOfMessageSeries8_next);
        };
        static unsigned int CryptoPP__MessageQueueNumberOfMessages9_wrapper(struct CryptoPP::MessageQueue* _this)
        {
           return CryptoPP__MessageQueueNumberOfMessages9_user(_this, CryptoPP__MessageQueueNumberOfMessages9_next);
        };
        static unsigned int CryptoPP__MessageQueueNumberOfMessagesInThisSeries10_wrapper(struct CryptoPP::MessageQueue* _this)
        {
           return CryptoPP__MessageQueueNumberOfMessagesInThisSeries10_user(_this, CryptoPP__MessageQueueNumberOfMessagesInThisSeries10_next);
        };
        static uint64_t CryptoPP__MessageQueuePut211_wrapper(struct CryptoPP::MessageQueue* _this, uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
        {
           return CryptoPP__MessageQueuePut211_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__MessageQueuePut211_next);
        };
        static uint8_t* CryptoPP__MessageQueueSpy12_wrapper(struct CryptoPP::MessageQueue* _this, uint64_t* arg_0)
        {
           return CryptoPP__MessageQueueSpy12_user(_this, arg_0, CryptoPP__MessageQueueSpy12_next);
        };
        static uint64_t CryptoPP__MessageQueueTotalBytesRetrievable13_wrapper(struct CryptoPP::MessageQueue* _this)
        {
           return CryptoPP__MessageQueueTotalBytesRetrievable13_user(_this, CryptoPP__MessageQueueTotalBytesRetrievable13_next);
        };
        static void CryptoPP__MessageQueueswap14_wrapper(struct CryptoPP::MessageQueue* _this, struct CryptoPP::MessageQueue* arg_0)
        {
           CryptoPP__MessageQueueswap14_user(_this, arg_0, CryptoPP__MessageQueueswap14_next);
        };
        static int64_t CryptoPP__MessageQueuedtor_MessageQueue15_wrapper(struct CryptoPP::MessageQueue* _this)
        {
           return CryptoPP__MessageQueuedtor_MessageQueue15_user(_this, CryptoPP__MessageQueuedtor_MessageQueue15_next);
        };
        
        static uint32_t CryptoPP__TimerBaseElapsedTime1_wrapper(struct CryptoPP::TimerBase* _this)
        {
           return CryptoPP__TimerBaseElapsedTime1_user(_this, CryptoPP__TimerBaseElapsedTime1_next);
        };
        static double CryptoPP__TimerBaseElapsedTimeAsDouble2_wrapper(struct CryptoPP::TimerBase* _this)
        {
           return CryptoPP__TimerBaseElapsedTimeAsDouble2_user(_this, CryptoPP__TimerBaseElapsedTimeAsDouble2_next);
        };
        static void CryptoPP__TimerBaseStartTimer3_wrapper(struct CryptoPP::TimerBase* _this)
        {
           CryptoPP__TimerBaseStartTimer3_user(_this, CryptoPP__TimerBaseStartTimer3_next);
        };
        
        static uint64_t CryptoPP__TimerGetCurrentTimerValue1_wrapper(struct CryptoPP::Timer* _this)
        {
           return CryptoPP__TimerGetCurrentTimerValue1_user(_this, CryptoPP__TimerGetCurrentTimerValue1_next);
        };
        static uint64_t CryptoPP__TimerTicksPerSecond2_wrapper(struct CryptoPP::Timer* _this)
        {
           return CryptoPP__TimerTicksPerSecond2_user(_this, CryptoPP__TimerTicksPerSecond2_next);
        };
        
        static uint64_t CryptoPP__ThreadUserTimerGetCurrentTimerValue1_wrapper(struct CryptoPP::ThreadUserTimer* _this)
        {
           return CryptoPP__ThreadUserTimerGetCurrentTimerValue1_user(_this, CryptoPP__ThreadUserTimerGetCurrentTimerValue1_next);
        };
        static uint64_t CryptoPP__ThreadUserTimerTicksPerSecond2_wrapper(struct CryptoPP::ThreadUserTimer* _this)
        {
           return CryptoPP__ThreadUserTimerTicksPerSecond2_user(_this, CryptoPP__ThreadUserTimerTicksPerSecond2_next);
        };
        
        static void CryptoPP__SosemanukPolicyCipherResynchronize1_wrapper(struct CryptoPP::SosemanukPolicy* _this, uint8_t* arg_0, uint8_t* arg_1)
        {
           CryptoPP__SosemanukPolicyCipherResynchronize1_user(_this, arg_0, arg_1, CryptoPP__SosemanukPolicyCipherResynchronize1_next);
        };
        static void CryptoPP__SosemanukPolicyCipherSetKey2_wrapper(struct CryptoPP::SosemanukPolicy* _this, struct CryptoPP::NameValuePairs* arg_0, uint8_t* arg_1, uint64_t arg_2)
        {
           CryptoPP__SosemanukPolicyCipherSetKey2_user(_this, arg_0, arg_1, arg_2, CryptoPP__SosemanukPolicyCipherSetKey2_next);
        };
        static unsigned int CryptoPP__SosemanukPolicyGetAlignment3_wrapper(struct CryptoPP::SosemanukPolicy* _this)
        {
           return CryptoPP__SosemanukPolicyGetAlignment3_user(_this, CryptoPP__SosemanukPolicyGetAlignment3_next);
        };
        static unsigned int CryptoPP__SosemanukPolicyGetOptimalBlockSize4_wrapper(struct CryptoPP::SosemanukPolicy* _this)
        {
           return CryptoPP__SosemanukPolicyGetOptimalBlockSize4_user(_this, CryptoPP__SosemanukPolicyGetOptimalBlockSize4_next);
        };
        static void CryptoPP__SosemanukPolicyOperateKeystream5_wrapper(struct CryptoPP::SosemanukPolicy* _this, struct CryptoPP::KeystreamOperation arg_0, uint8_t* arg_1, uint8_t* arg_2, uint64_t arg_3)
        {
           CryptoPP__SosemanukPolicyOperateKeystream5_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__SosemanukPolicyOperateKeystream5_next);
        };
        
        static int64_t CryptoPP__PK_DefaultEncryptionFilterctor_PK_DefaultEncryptionFilter1_wrapper(struct CryptoPP::PK_DefaultEncryptionFilter* _this, struct CryptoPP::RandomNumberGenerator* arg_0, struct CryptoPP::PK_Encryptor* arg_1, struct CryptoPP::BufferedTransformation* arg_2, struct CryptoPP::NameValuePairs* arg_3)
        {
           return CryptoPP__PK_DefaultEncryptionFilterctor_PK_DefaultEncryptionFilter1_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__PK_DefaultEncryptionFilterctor_PK_DefaultEncryptionFilter1_next);
        };
        static uint64_t CryptoPP__PK_DefaultEncryptionFilterPut22_wrapper(struct CryptoPP::PK_DefaultEncryptionFilter* _this, uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
        {
           return CryptoPP__PK_DefaultEncryptionFilterPut22_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__PK_DefaultEncryptionFilterPut22_next);
        };
        static int64_t CryptoPP__PK_DefaultEncryptionFilterdtor_PK_DefaultEncryptionFilter3_wrapper(struct CryptoPP::PK_DefaultEncryptionFilter* _this)
        {
           return CryptoPP__PK_DefaultEncryptionFilterdtor_PK_DefaultEncryptionFilter3_user(_this, CryptoPP__PK_DefaultEncryptionFilterdtor_PK_DefaultEncryptionFilter3_next);
        };
        
        static int64_t CryptoPP__PK_DefaultDecryptionFilterctor_PK_DefaultDecryptionFilter1_wrapper(struct CryptoPP::PK_DefaultDecryptionFilter* _this, struct CryptoPP::RandomNumberGenerator* arg_0, struct CryptoPP::PK_Decryptor* arg_1, struct CryptoPP::BufferedTransformation* arg_2, struct CryptoPP::NameValuePairs* arg_3)
        {
           return CryptoPP__PK_DefaultDecryptionFilterctor_PK_DefaultDecryptionFilter1_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__PK_DefaultDecryptionFilterctor_PK_DefaultDecryptionFilter1_next);
        };
        static uint64_t CryptoPP__PK_DefaultDecryptionFilterPut22_wrapper(struct CryptoPP::PK_DefaultDecryptionFilter* _this, uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
        {
           return CryptoPP__PK_DefaultDecryptionFilterPut22_user(_this, arg_0, arg_1, arg_2, arg_3, CryptoPP__PK_DefaultDecryptionFilterPut22_next);
        };
        static int64_t CryptoPP__PK_DefaultDecryptionFilterdtor_PK_DefaultDecryptionFilter3_wrapper(struct CryptoPP::PK_DefaultDecryptionFilter* _this)
        {
           return CryptoPP__PK_DefaultDecryptionFilterdtor_PK_DefaultDecryptionFilter3_user(_this, CryptoPP__PK_DefaultDecryptionFilterdtor_PK_DefaultDecryptionFilter3_next);
        };
        
        static bool CryptoPP__EqualityComparisonFilterHandleMismatchDetected1_wrapper(struct CryptoPP::EqualityComparisonFilter* _this, bool arg_0)
        {
           return CryptoPP__EqualityComparisonFilterHandleMismatchDetected1_user(_this, arg_0, CryptoPP__EqualityComparisonFilterHandleMismatchDetected1_next);
        };
        
        static int64_t CryptoPP__EqualityComparisonFilter__MismatchDetectedctor_MismatchDetected1_wrapper(struct CryptoPP::EqualityComparisonFilter::MismatchDetected* _this, struct CryptoPP::EqualityComparisonFilter::MismatchDetected* arg_0)
        {
           return CryptoPP__EqualityComparisonFilter__MismatchDetectedctor_MismatchDetected1_user(_this, arg_0, CryptoPP__EqualityComparisonFilter__MismatchDetectedctor_MismatchDetected1_next);
        };
        static int64_t CryptoPP__EqualityComparisonFilter__MismatchDetectedctor_MismatchDetected2_wrapper(struct CryptoPP::EqualityComparisonFilter::MismatchDetected* _this)
        {
           return CryptoPP__EqualityComparisonFilter__MismatchDetectedctor_MismatchDetected2_user(_this, CryptoPP__EqualityComparisonFilter__MismatchDetectedctor_MismatchDetected2_next);
        };
        static int64_t CryptoPP__EqualityComparisonFilter__MismatchDetecteddtor_MismatchDetected3_wrapper(struct CryptoPP::EqualityComparisonFilter::MismatchDetected* _this)
        {
           return CryptoPP__EqualityComparisonFilter__MismatchDetecteddtor_MismatchDetected3_user(_this, CryptoPP__EqualityComparisonFilter__MismatchDetecteddtor_MismatchDetected3_next);
        };
        
        static int64_t CryptoPP__RawDESctor_RawDES1_wrapper(struct CryptoPP::RawDES* _this, struct CryptoPP::RawDES* arg_0)
        {
           return CryptoPP__RawDESctor_RawDES1_user(_this, arg_0, CryptoPP__RawDESctor_RawDES1_next);
        };
        static int64_t CryptoPP__RawDESctor_RawDES2_wrapper(struct CryptoPP::RawDES* _this)
        {
           return CryptoPP__RawDESctor_RawDES2_user(_this, CryptoPP__RawDESctor_RawDES2_next);
        };
        static void CryptoPP__RawDESRawProcessBlock3_wrapper(struct CryptoPP::RawDES* _this, unsigned int* arg_0, unsigned int* arg_1)
        {
           CryptoPP__RawDESRawProcessBlock3_user(_this, arg_0, arg_1, CryptoPP__RawDESRawProcessBlock3_next);
        };
        static void CryptoPP__RawDESRawSetKey4_wrapper(struct CryptoPP::RawDES* _this, struct CryptoPP::CipherDir arg_0, uint8_t* arg_1)
        {
           CryptoPP__RawDESRawSetKey4_user(_this, arg_0, arg_1, CryptoPP__RawDESRawSetKey4_next);
        };
        static int64_t CryptoPP__RawDESdtor_RawDES5_wrapper(struct CryptoPP::RawDES* _this)
        {
           return CryptoPP__RawDESdtor_RawDES5_user(_this, CryptoPP__RawDESdtor_RawDES5_next);
        };
        
        static void CryptoPP__DES_EDE2__BaseProcessAndXorBlock1_wrapper(struct CryptoPP::DES_EDE2::Base* _this, uint8_t* arg_0, uint8_t* arg_1, uint8_t* arg_2)
        {
           CryptoPP__DES_EDE2__BaseProcessAndXorBlock1_user(_this, arg_0, arg_1, arg_2, CryptoPP__DES_EDE2__BaseProcessAndXorBlock1_next);
        };
        static void CryptoPP__DES_EDE2__BaseUncheckedSetKey2_wrapper(struct CryptoPP::DES_EDE2::Base* _this, uint8_t* arg_0, unsigned int arg_1, struct CryptoPP::NameValuePairs* arg_2)
        {
           CryptoPP__DES_EDE2__BaseUncheckedSetKey2_user(_this, arg_0, arg_1, arg_2, CryptoPP__DES_EDE2__BaseUncheckedSetKey2_next);
        };
        
        static void CryptoPP__DES_EDE3__BaseProcessAndXorBlock1_wrapper(struct CryptoPP::DES_EDE3::Base* _this, uint8_t* arg_0, uint8_t* arg_1, uint8_t* arg_2)
        {
           CryptoPP__DES_EDE3__BaseProcessAndXorBlock1_user(_this, arg_0, arg_1, arg_2, CryptoPP__DES_EDE3__BaseProcessAndXorBlock1_next);
        };
        static void CryptoPP__DES_EDE3__BaseUncheckedSetKey2_wrapper(struct CryptoPP::DES_EDE3::Base* _this, uint8_t* arg_0, unsigned int arg_1, struct CryptoPP::NameValuePairs* arg_2)
        {
           CryptoPP__DES_EDE3__BaseUncheckedSetKey2_user(_this, arg_0, arg_1, arg_2, CryptoPP__DES_EDE3__BaseUncheckedSetKey2_next);
        };
        
        static void CryptoPP__DES_XEX3__BaseProcessAndXorBlock1_wrapper(struct CryptoPP::DES_XEX3::Base* _this, uint8_t* arg_0, uint8_t* arg_1, uint8_t* arg_2)
        {
           CryptoPP__DES_XEX3__BaseProcessAndXorBlock1_user(_this, arg_0, arg_1, arg_2, CryptoPP__DES_XEX3__BaseProcessAndXorBlock1_next);
        };
        static void CryptoPP__DES_XEX3__BaseUncheckedSetKey2_wrapper(struct CryptoPP::DES_XEX3::Base* _this, uint8_t* arg_0, unsigned int arg_1, struct CryptoPP::NameValuePairs* arg_2)
        {
           CryptoPP__DES_XEX3__BaseUncheckedSetKey2_user(_this, arg_0, arg_1, arg_2, CryptoPP__DES_XEX3__BaseUncheckedSetKey2_next);
        };
        
        static void CryptoPP__Serpent__EncProcessAndXorBlock1_wrapper(struct CryptoPP::Serpent::Enc* _this, uint8_t* arg_0, uint8_t* arg_1, uint8_t* arg_2)
        {
           CryptoPP__Serpent__EncProcessAndXorBlock1_user(_this, arg_0, arg_1, arg_2, CryptoPP__Serpent__EncProcessAndXorBlock1_next);
        };
        
        static void CryptoPP__Serpent__DecProcessAndXorBlock1_wrapper(struct CryptoPP::Serpent::Dec* _this, uint8_t* arg_0, uint8_t* arg_1, uint8_t* arg_2)
        {
           CryptoPP__Serpent__DecProcessAndXorBlock1_user(_this, arg_0, arg_1, arg_2, CryptoPP__Serpent__DecProcessAndXorBlock1_next);
        };
        
        static int64_t CryptoPP__ZIteratorctor_ZIterator1_wrapper(struct CryptoPP::ZIterator* _this, struct CryptoPP::ZIterator* arg_0)
        {
           return CryptoPP__ZIteratorctor_ZIterator1_user(_this, arg_0, CryptoPP__ZIteratorctor_ZIterator1_next);
        };
        static int64_t CryptoPP__ZIteratorctor_ZIterator2_wrapper(struct CryptoPP::ZIterator* _this)
        {
           return CryptoPP__ZIteratorctor_ZIterator2_user(_this, CryptoPP__ZIteratorctor_ZIterator2_next);
        };
        static int64_t CryptoPP__ZIteratordtor_ZIterator3_wrapper(struct CryptoPP::ZIterator* _this)
        {
           return CryptoPP__ZIteratordtor_ZIterator3_user(_this, CryptoPP__ZIteratordtor_ZIterator3_next);
        };
        
        static int64_t CryptoPP__DES__Basector_Base1_wrapper(struct CryptoPP::DES::Base* _this, struct CryptoPP::DES::Base* arg_0)
        {
           return CryptoPP__DES__Basector_Base1_user(_this, arg_0, CryptoPP__DES__Basector_Base1_next);
        };
        static int64_t CryptoPP__DES__Basector_Base2_wrapper(struct CryptoPP::DES::Base* _this)
        {
           return CryptoPP__DES__Basector_Base2_user(_this, CryptoPP__DES__Basector_Base2_next);
        };
        static void CryptoPP__DES__BaseProcessAndXorBlock3_wrapper(struct CryptoPP::DES::Base* _this, uint8_t* arg_0, uint8_t* arg_1, uint8_t* arg_2)
        {
           CryptoPP__DES__BaseProcessAndXorBlock3_user(_this, arg_0, arg_1, arg_2, CryptoPP__DES__BaseProcessAndXorBlock3_next);
        };
        static void CryptoPP__DES__BaseUncheckedSetKey4_wrapper(struct CryptoPP::DES::Base* _this, uint8_t* arg_0, unsigned int arg_1, struct CryptoPP::NameValuePairs* arg_2)
        {
           CryptoPP__DES__BaseUncheckedSetKey4_user(_this, arg_0, arg_1, arg_2, CryptoPP__DES__BaseUncheckedSetKey4_next);
        };
        static int64_t CryptoPP__DES__Basedtor_Base5_wrapper(struct CryptoPP::DES::Base* _this)
        {
           return CryptoPP__DES__Basedtor_Base5_user(_this, CryptoPP__DES__Basedtor_Base5_next);
        };
        
        static void CryptoPP__HexEncoderIsolatedInitialize1_wrapper(struct CryptoPP::HexEncoder* _this, struct CryptoPP::NameValuePairs* arg_0)
        {
           CryptoPP__HexEncoderIsolatedInitialize1_user(_this, arg_0, CryptoPP__HexEncoderIsolatedInitialize1_next);
        };
        
        static void CryptoPP__Serpent__BaseUncheckedSetKey1_wrapper(struct CryptoPP::Serpent::Base* _this, uint8_t* arg_0, unsigned int arg_1, struct CryptoPP::NameValuePairs* arg_2)
        {
           CryptoPP__Serpent__BaseUncheckedSetKey1_user(_this, arg_0, arg_1, arg_2, CryptoPP__Serpent__BaseUncheckedSetKey1_next);
        };
        
        static struct CryptoPP::OID* CryptoPP__ASN1ansi_x9_571_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1ansi_x9_571_user(_this, retstr, CryptoPP__ASN1ansi_x9_571_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1ansi_x9_622_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1ansi_x9_622_user(_this, retstr, CryptoPP__ASN1ansi_x9_622_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1ansi_x9_62_curves3_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1ansi_x9_62_curves3_user(_this, retstr, CryptoPP__ASN1ansi_x9_62_curves3_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1ansi_x9_62_curves_prime4_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1ansi_x9_62_curves_prime4_user(_this, retstr, CryptoPP__ASN1ansi_x9_62_curves_prime4_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1certicom5_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1certicom5_user(_this, retstr, CryptoPP__ASN1certicom5_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1certicom_ellipticCurve6_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1certicom_ellipticCurve6_user(_this, retstr, CryptoPP__ASN1certicom_ellipticCurve6_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1characteristic_two_field7_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1characteristic_two_field7_user(_this, retstr, CryptoPP__ASN1characteristic_two_field7_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1id_characteristic_two_basis8_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1id_characteristic_two_basis8_user(_this, retstr, CryptoPP__ASN1id_characteristic_two_basis8_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1id_dsa9_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1id_dsa9_user(_this, retstr, CryptoPP__ASN1id_dsa9_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1id_ecPublicKey10_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1id_ecPublicKey10_user(_this, retstr, CryptoPP__ASN1id_ecPublicKey10_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1id_fieldType11_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1id_fieldType11_user(_this, retstr, CryptoPP__ASN1id_fieldType11_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1id_publicKeyType12_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1id_publicKeyType12_user(_this, retstr, CryptoPP__ASN1id_publicKeyType12_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1identified_organization13_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1identified_organization13_user(_this, retstr, CryptoPP__ASN1identified_organization13_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1iso14_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1iso14_user(_this, retstr, CryptoPP__ASN1iso14_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1iso_us15_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1iso_us15_user(_this, retstr, CryptoPP__ASN1iso_us15_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1member_body16_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1member_body16_user(_this, retstr, CryptoPP__ASN1member_body16_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1ppBasis17_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1ppBasis17_user(_this, retstr, CryptoPP__ASN1ppBasis17_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1prime_field18_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1prime_field18_user(_this, retstr, CryptoPP__ASN1prime_field18_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1secp112r119_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1secp112r119_user(_this, retstr, CryptoPP__ASN1secp112r119_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1secp112r220_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1secp112r220_user(_this, retstr, CryptoPP__ASN1secp112r220_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1secp128r121_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1secp128r121_user(_this, retstr, CryptoPP__ASN1secp128r121_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1secp128r222_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1secp128r222_user(_this, retstr, CryptoPP__ASN1secp128r222_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1secp160k123_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1secp160k123_user(_this, retstr, CryptoPP__ASN1secp160k123_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1secp160r124_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1secp160r124_user(_this, retstr, CryptoPP__ASN1secp160r124_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1secp160r225_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1secp160r225_user(_this, retstr, CryptoPP__ASN1secp160r225_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1secp192k126_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1secp192k126_user(_this, retstr, CryptoPP__ASN1secp192k126_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1secp192r127_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1secp192r127_user(_this, retstr, CryptoPP__ASN1secp192r127_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1secp224k128_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1secp224k128_user(_this, retstr, CryptoPP__ASN1secp224k128_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1secp224r129_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1secp224r129_user(_this, retstr, CryptoPP__ASN1secp224r129_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1secp256k130_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1secp256k130_user(_this, retstr, CryptoPP__ASN1secp256k130_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1secp256r131_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1secp256r131_user(_this, retstr, CryptoPP__ASN1secp256r131_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1secp384r132_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1secp384r132_user(_this, retstr, CryptoPP__ASN1secp384r132_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1secp521r133_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1secp521r133_user(_this, retstr, CryptoPP__ASN1secp521r133_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1sect113r134_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1sect113r134_user(_this, retstr, CryptoPP__ASN1sect113r134_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1sect113r235_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1sect113r235_user(_this, retstr, CryptoPP__ASN1sect113r235_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1sect131r136_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1sect131r136_user(_this, retstr, CryptoPP__ASN1sect131r136_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1sect131r237_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1sect131r237_user(_this, retstr, CryptoPP__ASN1sect131r237_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1sect163k138_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1sect163k138_user(_this, retstr, CryptoPP__ASN1sect163k138_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1sect163r139_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1sect163r139_user(_this, retstr, CryptoPP__ASN1sect163r139_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1sect163r240_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1sect163r240_user(_this, retstr, CryptoPP__ASN1sect163r240_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1sect193r141_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1sect193r141_user(_this, retstr, CryptoPP__ASN1sect193r141_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1sect193r242_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1sect193r242_user(_this, retstr, CryptoPP__ASN1sect193r242_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1sect233k143_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1sect233k143_user(_this, retstr, CryptoPP__ASN1sect233k143_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1sect233r144_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1sect233r144_user(_this, retstr, CryptoPP__ASN1sect233r144_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1sect239k145_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1sect239k145_user(_this, retstr, CryptoPP__ASN1sect239k145_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1sect283k146_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1sect283k146_user(_this, retstr, CryptoPP__ASN1sect283k146_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1sect283r147_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1sect283r147_user(_this, retstr, CryptoPP__ASN1sect283r147_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1sect409k148_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1sect409k148_user(_this, retstr, CryptoPP__ASN1sect409k148_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1sect409r149_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1sect409r149_user(_this, retstr, CryptoPP__ASN1sect409r149_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1sect571k150_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1sect571k150_user(_this, retstr, CryptoPP__ASN1sect571k150_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1sect571r151_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1sect571r151_user(_this, retstr, CryptoPP__ASN1sect571r151_next);
        };
        static struct CryptoPP::OID* CryptoPP__ASN1tpBasis52_wrapper(struct CryptoPP::ASN1* _this, short retstr)
        {
           return CryptoPP__ASN1tpBasis52_user(_this, retstr, CryptoPP__ASN1tpBasis52_next);
        };
        
        static hook_record CryptoPP_functions[] = {
        {   (LPVOID)0x1405ee910L,
            (LPVOID *)&CryptoPPAdd1_user,
            (LPVOID *)&CryptoPPAdd1_next,
            (LPVOID)cast_pointer_function(CryptoPPAdd1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*, uint64_t))&CryptoPP::Add) },
        {   (LPVOID)0x1405e3980L,
            (LPVOID *)&CryptoPPAlmostInverse2_user,
            (LPVOID *)&CryptoPPAlmostInverse2_next,
            (LPVOID)cast_pointer_function(CryptoPPAlmostInverse2_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*, uint64_t, uint64_t*, uint64_t))&CryptoPP::AlmostInverse) },
        {   (LPVOID)0x14062c0c0L,
            (LPVOID *)&CryptoPPAndWords3_user,
            (LPVOID *)&CryptoPPAndWords3_next,
            (LPVOID)cast_pointer_function(CryptoPPAndWords3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*, uint64_t))&CryptoPP::AndWords) },
        {   (LPVOID)0x14045f4d0L,
            (LPVOID *)&CryptoPPAssignFromHelper5_user,
            (LPVOID *)&CryptoPPAssignFromHelper5_next,
            (LPVOID)cast_pointer_function(CryptoPPAssignFromHelper5_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >*(CryptoPP::*)(struct CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >*, struct CryptoPP::NameValuePairs*, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>*))&CryptoPP::AssignFromHelper) },
        {   (LPVOID)0x140467710L,
            (LPVOID *)&CryptoPPAssignFromHelper7_user,
            (LPVOID *)&CryptoPPAssignFromHelper7_next,
            (LPVOID)cast_pointer_function(CryptoPPAssignFromHelper7_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >*(CryptoPP::*)(struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>*, struct CryptoPP::NameValuePairs*))&CryptoPP::AssignFromHelper) },
        {   (LPVOID)0x14045f3d0L,
            (LPVOID *)&CryptoPPAssignFromHelper9_user,
            (LPVOID *)&CryptoPPAssignFromHelper9_next,
            (LPVOID)cast_pointer_function(CryptoPPAssignFromHelper9_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >*(CryptoPP::*)(struct CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >*, struct CryptoPP::NameValuePairs*, struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*))&CryptoPP::AssignFromHelper) },
        {   (LPVOID)0x140468900L,
            (LPVOID *)&CryptoPPAssignFromHelper11_user,
            (LPVOID *)&CryptoPPAssignFromHelper11_next,
            (LPVOID)cast_pointer_function(CryptoPPAssignFromHelper11_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >*(CryptoPP::*)(struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*, struct CryptoPP::NameValuePairs*))&CryptoPP::AssignFromHelper) },
        {   (LPVOID)0x1405ae320L,
            (LPVOID *)&CryptoPPAssignIntToInteger12_user,
            (LPVOID *)&CryptoPPAssignIntToInteger12_next,
            (LPVOID)cast_pointer_function(CryptoPPAssignIntToInteger12_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::*)(struct type_info*, void*, void*))&CryptoPP::AssignIntToInteger) },
        {   (LPVOID)0x1405e2120L,
            (LPVOID *)&CryptoPPAsymmetricMultiply13_user,
            (LPVOID *)&CryptoPPAsymmetricMultiply13_next,
            (LPVOID)cast_pointer_function(CryptoPPAsymmetricMultiply13_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*, uint64_t, uint64_t*, uint64_t))&CryptoPP::AsymmetricMultiply) },
        {   (LPVOID)0x14054e220L,
            (LPVOID *)&CryptoPPBERDecodeError14_user,
            (LPVOID *)&CryptoPPBERDecodeError14_next,
            (LPVOID)cast_pointer_function(CryptoPPBERDecodeError14_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)())&CryptoPP::BERDecodeError) },
        {   (LPVOID)0x14062ba00L,
            (LPVOID *)&CryptoPPBERDecodeGF2NP15_user,
            (LPVOID *)&CryptoPPBERDecodeGF2NP15_next,
            (LPVOID)cast_pointer_function(CryptoPPBERDecodeGF2NP15_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::GF2NP*(CryptoPP::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::BERDecodeGF2NP) },
        {   (LPVOID)0x14054be60L,
            (LPVOID *)&CryptoPPBERDecodeNull16_user,
            (LPVOID *)&CryptoPPBERDecodeNull16_next,
            (LPVOID)cast_pointer_function(CryptoPPBERDecodeNull16_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::BERDecodeNull) },
        {   (LPVOID)0x14054c040L,
            (LPVOID *)&CryptoPPBERDecodeOctetString17_user,
            (LPVOID *)&CryptoPPBERDecodeOctetString17_next,
            (LPVOID)cast_pointer_function(CryptoPPBERDecodeOctetString17_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::*)(struct CryptoPP::BufferedTransformation*, struct CryptoPP::BufferedTransformation*))&CryptoPP::BERDecodeOctetString) },
        {   (LPVOID)0x14054fab0L,
            (LPVOID *)&CryptoPPBERDecodeUnsigned18_user,
            (LPVOID *)&CryptoPPBERDecodeUnsigned18_next,
            (LPVOID)cast_pointer_function(CryptoPPBERDecodeUnsigned18_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::*)())&CryptoPP::BERDecodeUnsigned) },
        {   (LPVOID)0x14054bdc0L,
            (LPVOID *)&CryptoPPBERLengthDecode19_user,
            (LPVOID *)&CryptoPPBERLengthDecode19_next,
            (LPVOID)cast_pointer_function(CryptoPPBERLengthDecode19_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::*)(struct CryptoPP::BufferedTransformation*, uint64_t*))&CryptoPP::BERLengthDecode) },
        {   (LPVOID)0x14054bcb0L,
            (LPVOID *)&CryptoPPBERLengthDecode20_user,
            (LPVOID *)&CryptoPPBERLengthDecode20_next,
            (LPVOID)cast_pointer_function(CryptoPPBERLengthDecode20_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::*)(struct CryptoPP::BufferedTransformation*, uint64_t*, bool*))&CryptoPP::BERLengthDecode) },
        {   (LPVOID)0x1405bb130L,
            (LPVOID *)&CryptoPPBaseline_Multiply1621_user,
            (LPVOID *)&CryptoPPBaseline_Multiply1621_next,
            (LPVOID)cast_pointer_function(CryptoPPBaseline_Multiply1621_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*))&CryptoPP::Baseline_Multiply16) },
        {   (LPVOID)0x1405ae3b0L,
            (LPVOID *)&CryptoPPBaseline_Multiply222_user,
            (LPVOID *)&CryptoPPBaseline_Multiply222_next,
            (LPVOID)cast_pointer_function(CryptoPPBaseline_Multiply222_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*))&CryptoPP::Baseline_Multiply2) },
        {   (LPVOID)0x1405ae6a0L,
            (LPVOID *)&CryptoPPBaseline_Multiply423_user,
            (LPVOID *)&CryptoPPBaseline_Multiply423_next,
            (LPVOID)cast_pointer_function(CryptoPPBaseline_Multiply423_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*))&CryptoPP::Baseline_Multiply4) },
        {   (LPVOID)0x1405af4e0L,
            (LPVOID *)&CryptoPPBaseline_Multiply824_user,
            (LPVOID *)&CryptoPPBaseline_Multiply824_next,
            (LPVOID)cast_pointer_function(CryptoPPBaseline_Multiply824_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*))&CryptoPP::Baseline_Multiply8) },
        {   (LPVOID)0x1405d1dc0L,
            (LPVOID *)&CryptoPPBaseline_MultiplyBottom1625_user,
            (LPVOID *)&CryptoPPBaseline_MultiplyBottom1625_next,
            (LPVOID)cast_pointer_function(CryptoPPBaseline_MultiplyBottom1625_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*))&CryptoPP::Baseline_MultiplyBottom16) },
        {   (LPVOID)0x1405b5fe0L,
            (LPVOID *)&CryptoPPBaseline_MultiplyBottom226_user,
            (LPVOID *)&CryptoPPBaseline_MultiplyBottom226_next,
            (LPVOID)cast_pointer_function(CryptoPPBaseline_MultiplyBottom226_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*))&CryptoPP::Baseline_MultiplyBottom2) },
        {   (LPVOID)0x1405b60b0L,
            (LPVOID *)&CryptoPPBaseline_MultiplyBottom427_user,
            (LPVOID *)&CryptoPPBaseline_MultiplyBottom427_next,
            (LPVOID)cast_pointer_function(CryptoPPBaseline_MultiplyBottom427_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*))&CryptoPP::Baseline_MultiplyBottom4) },
        {   (LPVOID)0x1405b6670L,
            (LPVOID *)&CryptoPPBaseline_MultiplyBottom828_user,
            (LPVOID *)&CryptoPPBaseline_MultiplyBottom828_next,
            (LPVOID)cast_pointer_function(CryptoPPBaseline_MultiplyBottom828_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*))&CryptoPP::Baseline_MultiplyBottom8) },
        {   (LPVOID)0x1405d8c90L,
            (LPVOID *)&CryptoPPBaseline_MultiplyTop1629_user,
            (LPVOID *)&CryptoPPBaseline_MultiplyTop1629_next,
            (LPVOID)cast_pointer_function(CryptoPPBaseline_MultiplyTop1629_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*, uint64_t))&CryptoPP::Baseline_MultiplyTop16) },
        {   (LPVOID)0x1405b8100L,
            (LPVOID *)&CryptoPPBaseline_MultiplyTop230_user,
            (LPVOID *)&CryptoPPBaseline_MultiplyTop230_next,
            (LPVOID)cast_pointer_function(CryptoPPBaseline_MultiplyTop230_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*, uint64_t))&CryptoPP::Baseline_MultiplyTop2) },
        {   (LPVOID)0x1405b8160L,
            (LPVOID *)&CryptoPPBaseline_MultiplyTop431_user,
            (LPVOID *)&CryptoPPBaseline_MultiplyTop431_next,
            (LPVOID)cast_pointer_function(CryptoPPBaseline_MultiplyTop431_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*, uint64_t))&CryptoPP::Baseline_MultiplyTop4) },
        {   (LPVOID)0x1405b8c50L,
            (LPVOID *)&CryptoPPBaseline_MultiplyTop832_user,
            (LPVOID *)&CryptoPPBaseline_MultiplyTop832_next,
            (LPVOID)cast_pointer_function(CryptoPPBaseline_MultiplyTop832_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*, uint64_t))&CryptoPP::Baseline_MultiplyTop8) },
        {   (LPVOID)0x1405c98b0L,
            (LPVOID *)&CryptoPPBaseline_Square1633_user,
            (LPVOID *)&CryptoPPBaseline_Square1633_next,
            (LPVOID)cast_pointer_function(CryptoPPBaseline_Square1633_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*))&CryptoPP::Baseline_Square16) },
        {   (LPVOID)0x1405b2f10L,
            (LPVOID *)&CryptoPPBaseline_Square234_user,
            (LPVOID *)&CryptoPPBaseline_Square234_next,
            (LPVOID)cast_pointer_function(CryptoPPBaseline_Square234_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*))&CryptoPP::Baseline_Square2) },
        {   (LPVOID)0x1405b3160L,
            (LPVOID *)&CryptoPPBaseline_Square435_user,
            (LPVOID *)&CryptoPPBaseline_Square435_next,
            (LPVOID)cast_pointer_function(CryptoPPBaseline_Square435_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*))&CryptoPP::Baseline_Square4) },
        {   (LPVOID)0x1405b3b60L,
            (LPVOID *)&CryptoPPBaseline_Square836_user,
            (LPVOID *)&CryptoPPBaseline_Square836_next,
            (LPVOID)cast_pointer_function(CryptoPPBaseline_Square836_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*))&CryptoPP::Baseline_Square8) },
        {   (LPVOID)0x140557870L,
            (LPVOID *)&CryptoPPBitsToBytes37_user,
            (LPVOID *)&CryptoPPBitsToBytes37_next,
            (LPVOID)cast_pointer_function(CryptoPPBitsToBytes37_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::*)(uint64_t))&CryptoPP::BitsToBytes) },
        {   (LPVOID)0x1405eefd0L,
            (LPVOID *)&CryptoPPBitsToWords38_user,
            (LPVOID *)&CryptoPPBitsToWords38_next,
            (LPVOID)cast_pointer_function(CryptoPPBitsToWords38_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::*)(uint64_t))&CryptoPP::BitsToWords) },
        {   (LPVOID)0x140466a30L,
            (LPVOID *)&CryptoPPByteReverse40_user,
            (LPVOID *)&CryptoPPByteReverse40_next,
            (LPVOID)cast_pointer_function(CryptoPPByteReverse40_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::*)())&CryptoPP::ByteReverse) },
        {   (LPVOID)0x1405996f0L,
            (LPVOID *)&CryptoPPByteReverse41_user,
            (LPVOID *)&CryptoPPByteReverse41_next,
            (LPVOID)cast_pointer_function(CryptoPPByteReverse41_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::*)(uint64_t))&CryptoPP::ByteReverse) },
        {   (LPVOID)0x1405f8570L,
            (LPVOID *)&CryptoPPByteReverse42_user,
            (LPVOID *)&CryptoPPByteReverse42_next,
            (LPVOID)cast_pointer_function(CryptoPPByteReverse42_wrapper),
            (LPVOID)cast_pointer_function((uint16_t(CryptoPP::*)(uint16_t))&CryptoPP::ByteReverse) },
        {   (LPVOID)0x1405eeff0L,
            (LPVOID *)&CryptoPPBytesToWords43_user,
            (LPVOID *)&CryptoPPBytesToWords43_next,
            (LPVOID)cast_pointer_function(CryptoPPBytesToWords43_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::*)(uint64_t))&CryptoPP::BytesToWords) },
        {   (LPVOID)0x140647210L,
            (LPVOID *)&CryptoPPCRT44_user,
            (LPVOID *)&CryptoPPCRT44_next,
            (LPVOID)cast_pointer_function(CryptoPPCRT44_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::*)(short, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::CRT) },
        {   (LPVOID)0x140646fe0L,
            (LPVOID *)&CryptoPPCRT45_user,
            (LPVOID *)&CryptoPPCRT45_next,
            (LPVOID)cast_pointer_function(CryptoPPCRT45_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::CRT) },
        {   (LPVOID)0x14061f700L,
            (LPVOID *)&CryptoPPCallNewHandler46_user,
            (LPVOID *)&CryptoPPCallNewHandler46_next,
            (LPVOID)cast_pointer_function(CryptoPPCallNewHandler46_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)())&CryptoPP::CallNewHandler) },
        {   (LPVOID)0x140466930L,
            (LPVOID *)&CryptoPPConditionalByteReverse48_user,
            (LPVOID *)&CryptoPPConditionalByteReverse48_next,
            (LPVOID)cast_pointer_function(CryptoPPConditionalByteReverse48_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::*)(unsigned int))&CryptoPP::ConditionalByteReverse) },
        {   (LPVOID)0x14061a410L,
            (LPVOID *)&CryptoPPCopyOrZero49_user,
            (LPVOID *)&CryptoPPCopyOrZero49_next,
            (LPVOID)cast_pointer_function(CryptoPPCopyOrZero49_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(void*, void*, uint64_t))&CryptoPP::CopyOrZero) },
        {   (LPVOID)0x1405ee9e0L,
            (LPVOID *)&CryptoPPCopyWords50_user,
            (LPVOID *)&CryptoPPCopyWords50_next,
            (LPVOID)cast_pointer_function(CryptoPPCopyWords50_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t))&CryptoPP::CopyWords) },
        {   (LPVOID)0x1405ef010L,
            (LPVOID *)&CryptoPPCountWords51_user,
            (LPVOID *)&CryptoPPCountWords51_next,
            (LPVOID)cast_pointer_function(CryptoPPCountWords51_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::*)(uint64_t*, uint64_t))&CryptoPP::CountWords) },
        {   (LPVOID)0x140660670L,
            (LPVOID *)&CryptoPPCpuId52_user,
            (LPVOID *)&CryptoPPCpuId52_next,
            (LPVOID)cast_pointer_function(CryptoPPCpuId52_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::*)(unsigned int, unsigned int*))&CryptoPP::CpuId) },
        {   (LPVOID)0x14054c270L,
            (LPVOID *)&CryptoPPDEREncodeBitString53_user,
            (LPVOID *)&CryptoPPDEREncodeBitString53_next,
            (LPVOID)cast_pointer_function(CryptoPPDEREncodeBitString53_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::*)(struct CryptoPP::BufferedTransformation*, uint8_t*, uint64_t, unsigned int))&CryptoPP::DEREncodeBitString) },
        {   (LPVOID)0x14054be20L,
            (LPVOID *)&CryptoPPDEREncodeNull54_user,
            (LPVOID *)&CryptoPPDEREncodeNull54_next,
            (LPVOID)cast_pointer_function(CryptoPPDEREncodeNull54_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::DEREncodeNull) },
        {   (LPVOID)0x14054bed0L,
            (LPVOID *)&CryptoPPDEREncodeOctetString55_user,
            (LPVOID *)&CryptoPPDEREncodeOctetString55_next,
            (LPVOID)cast_pointer_function(CryptoPPDEREncodeOctetString55_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::*)(struct CryptoPP::BufferedTransformation*, uint8_t*, uint64_t))&CryptoPP::DEREncodeOctetString) },
        {   (LPVOID)0x14054bbd0L,
            (LPVOID *)&CryptoPPDERLengthEncode56_user,
            (LPVOID *)&CryptoPPDERLengthEncode56_next,
            (LPVOID)cast_pointer_function(CryptoPPDERLengthEncode56_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::*)(struct CryptoPP::BufferedTransformation*, uint64_t))&CryptoPP::DERLengthEncode) },
        {   (LPVOID)0x14054c410L,
            (LPVOID *)&CryptoPPDERReencode57_user,
            (LPVOID *)&CryptoPPDERReencode57_next,
            (LPVOID)cast_pointer_function(CryptoPPDERReencode57_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(struct CryptoPP::BufferedTransformation*, struct CryptoPP::BufferedTransformation*))&CryptoPP::DERReencode) },
        {   (LPVOID)0x140669c70L,
            (LPVOID *)&CryptoPPDES_VC60Workaround58_user,
            (LPVOID *)&CryptoPPDES_VC60Workaround58_next,
            (LPVOID)cast_pointer_function(CryptoPPDES_VC60Workaround58_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)())&CryptoPP::DES_VC60Workaround) },
        {   (LPVOID)0x1406606a0L,
            (LPVOID *)&CryptoPPDetectX86Features59_user,
            (LPVOID *)&CryptoPPDetectX86Features59_next,
            (LPVOID)cast_pointer_function(CryptoPPDetectX86Features59_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)())&CryptoPP::DetectX86Features) },
        {   (LPVOID)0x14064ab30L,
            (LPVOID *)&CryptoPPDiscreteLogWorkFactor60_user,
            (LPVOID *)&CryptoPPDiscreteLogWorkFactor60_next,
            (LPVOID)cast_pointer_function(CryptoPPDiscreteLogWorkFactor60_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::*)(unsigned int))&CryptoPP::DiscreteLogWorkFactor) },
        {   (LPVOID)0x1405e2f80L,
            (LPVOID *)&CryptoPPDivide61_user,
            (LPVOID *)&CryptoPPDivide61_next,
            (LPVOID)cast_pointer_function(CryptoPPDivide61_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t, uint64_t*, uint64_t))&CryptoPP::Divide) },
        {   (LPVOID)0x1405e3ea0L,
            (LPVOID *)&CryptoPPDivideByPower2Mod62_user,
            (LPVOID *)&CryptoPPDivideByPower2Mod62_next,
            (LPVOID)cast_pointer_function(CryptoPPDivideByPower2Mod62_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t, uint64_t*, uint64_t))&CryptoPP::DivideByPower2Mod) },
        {   (LPVOID)0x1405f0d50L,
            (LPVOID *)&CryptoPPDivideFourWordsByTwo63_user,
            (LPVOID *)&CryptoPPDivideFourWordsByTwo63_next,
            (LPVOID)cast_pointer_function(CryptoPPDivideFourWordsByTwo63_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::*)())&CryptoPP::DivideFourWordsByTwo) },
        {   (LPVOID)0x1405f0f20L,
            (LPVOID *)&CryptoPPDivideFourWordsByTwo64_user,
            (LPVOID *)&CryptoPPDivideFourWordsByTwo64_next,
            (LPVOID)cast_pointer_function(CryptoPPDivideFourWordsByTwo64_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::*)())&CryptoPP::DivideFourWordsByTwo) },
        {   (LPVOID)0x14062cf30L,
            (LPVOID *)&CryptoPPEncryptionPairwiseConsistencyTest_FIPS_140_Only65_user,
            (LPVOID *)&CryptoPPEncryptionPairwiseConsistencyTest_FIPS_140_Only65_next,
            (LPVOID)cast_pointer_function(CryptoPPEncryptionPairwiseConsistencyTest_FIPS_140_Only65_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(struct CryptoPP::PK_Encryptor*, struct CryptoPP::PK_Decryptor*))&CryptoPP::EncryptionPairwiseConsistencyTest_FIPS_140_Only) },
        {   (LPVOID)0x14064cb40L,
            (LPVOID *)&CryptoPPEuclideanMultiplicativeInverse66_user,
            (LPVOID *)&CryptoPPEuclideanMultiplicativeInverse66_next,
            (LPVOID)cast_pointer_function(CryptoPPEuclideanMultiplicativeInverse66_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::*)(short, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::EuclideanMultiplicativeInverse) },
        {   (LPVOID)0x14062cea0L,
            (LPVOID *)&CryptoPPFIPS_140_2_ComplianceEnabled67_user,
            (LPVOID *)&CryptoPPFIPS_140_2_ComplianceEnabled67_next,
            (LPVOID)cast_pointer_function(CryptoPPFIPS_140_2_ComplianceEnabled67_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::*)())&CryptoPP::FIPS_140_2_ComplianceEnabled) },
        {   (LPVOID)0x14064aaa0L,
            (LPVOID *)&CryptoPPFactoringWorkFactor68_user,
            (LPVOID *)&CryptoPPFactoringWorkFactor68_next,
            (LPVOID)cast_pointer_function(CryptoPPFactoringWorkFactor68_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::*)(unsigned int))&CryptoPP::FactoringWorkFactor) },
        {   (LPVOID)0x14061d230L,
            (LPVOID *)&CryptoPPFiles_TestInstantiations69_user,
            (LPVOID *)&CryptoPPFiles_TestInstantiations69_next,
            (LPVOID)cast_pointer_function(CryptoPPFiles_TestInstantiations69_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)())&CryptoPP::Files_TestInstantiations) },
        {   (LPVOID)0x1406446c0L,
            (LPVOID *)&CryptoPPFirstPrime70_user,
            (LPVOID *)&CryptoPPFirstPrime70_next,
            (LPVOID)cast_pointer_function(CryptoPPFirstPrime70_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP::PrimeSelector*))&CryptoPP::FirstPrime) },
        {   (LPVOID)0x14064c910L,
            (LPVOID *)&CryptoPPGCD71_user,
            (LPVOID *)&CryptoPPGCD71_next,
            (LPVOID)cast_pointer_function(CryptoPPGCD71_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::*)(short, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::GCD) },
        {   (LPVOID)0x14045f310L,
            (LPVOID *)&CryptoPPGetAlignmentOf73_user,
            (LPVOID *)&CryptoPPGetAlignmentOf73_next,
            (LPVOID)cast_pointer_function(CryptoPPGetAlignmentOf73_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::*)())&CryptoPP::GetAlignmentOf) },
        {   (LPVOID)0x140621fb0L,
            (LPVOID *)&CryptoPPGetCacheLineSize74_user,
            (LPVOID *)&CryptoPPGetCacheLineSize74_next,
            (LPVOID)cast_pointer_function(CryptoPPGetCacheLineSize74_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::*)())&CryptoPP::GetCacheLineSize) },
        {   (LPVOID)0x140466a00L,
            (LPVOID *)&CryptoPPGetNativeByteOrder76_user,
            (LPVOID *)&CryptoPPGetNativeByteOrder76_next,
            (LPVOID)cast_pointer_function(CryptoPPGetNativeByteOrder76_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ByteOrder(CryptoPP::*)())&CryptoPP::GetNativeByteOrder) },
        {   (LPVOID)0x140640560L,
            (LPVOID *)&CryptoPPGetPrimeTable77_user,
            (LPVOID *)&CryptoPPGetPrimeTable77_next,
            (LPVOID)cast_pointer_function(CryptoPPGetPrimeTable77_wrapper),
            (LPVOID)cast_pointer_function((uint16_t*(CryptoPP::*)(unsigned int*))&CryptoPP::GetPrimeTable) },
        {   (LPVOID)0x140469ce0L,
            (LPVOID *)&CryptoPPGetValueHelper79_user,
            (LPVOID *)&CryptoPPGetValueHelper79_next,
            (LPVOID)cast_pointer_function(CryptoPPGetValueHelper79_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::GetValueHelperClass<CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>,CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint> >*(CryptoPP::*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*, char*, struct type_info*, void*, struct CryptoPP::NameValuePairs*))&CryptoPP::GetValueHelper) },
        {   (LPVOID)0x14045f440L,
            (LPVOID *)&CryptoPPGetValueHelper81_user,
            (LPVOID *)&CryptoPPGetValueHelper81_next,
            (LPVOID)cast_pointer_function(CryptoPPGetValueHelper81_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >*(CryptoPP::*)(struct CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >*, char*, struct type_info*, void*, struct CryptoPP::NameValuePairs*, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>*))&CryptoPP::GetValueHelper) },
        {   (LPVOID)0x140467580L,
            (LPVOID *)&CryptoPPGetValueHelper83_user,
            (LPVOID *)&CryptoPPGetValueHelper83_next,
            (LPVOID)cast_pointer_function(CryptoPPGetValueHelper83_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >*(CryptoPP::*)(struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>*, char*, struct type_info*, void*, struct CryptoPP::NameValuePairs*))&CryptoPP::GetValueHelper) },
        {   (LPVOID)0x14045f340L,
            (LPVOID *)&CryptoPPGetValueHelper85_user,
            (LPVOID *)&CryptoPPGetValueHelper85_next,
            (LPVOID)cast_pointer_function(CryptoPPGetValueHelper85_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >*(CryptoPP::*)(struct CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >*, char*, struct type_info*, void*, struct CryptoPP::NameValuePairs*, struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*))&CryptoPP::GetValueHelper) },
        {   (LPVOID)0x1404673f0L,
            (LPVOID *)&CryptoPPGetValueHelper87_user,
            (LPVOID *)&CryptoPPGetValueHelper87_next,
            (LPVOID)cast_pointer_function(CryptoPPGetValueHelper87_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >*(CryptoPP::*)(struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*, char*, struct type_info*, void*, struct CryptoPP::NameValuePairs*))&CryptoPP::GetValueHelper) },
        {   (LPVOID)0x140469340L,
            (LPVOID *)&CryptoPPHack_DefaultValueFromConstReferenceType89_user,
            (LPVOID *)&CryptoPPHack_DefaultValueFromConstReferenceType89_next,
            (LPVOID)cast_pointer_function(CryptoPPHack_DefaultValueFromConstReferenceType89_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ECPPoint*(CryptoPP::*)(struct CryptoPP::ECPPoint*))&CryptoPP::Hack_DefaultValueFromConstReferenceType) },
        {   (LPVOID)0x140468e30L,
            (LPVOID *)&CryptoPPHack_DefaultValueFromConstReferenceType91_user,
            (LPVOID *)&CryptoPPHack_DefaultValueFromConstReferenceType91_next,
            (LPVOID)cast_pointer_function(CryptoPPHack_DefaultValueFromConstReferenceType91_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::*)(struct CryptoPP::Integer*))&CryptoPP::Hack_DefaultValueFromConstReferenceType) },
        {   (LPVOID)0x1404693b0L,
            (LPVOID *)&CryptoPPHack_GetValueIntoConstReference93_user,
            (LPVOID *)&CryptoPPHack_GetValueIntoConstReference93_next,
            (LPVOID)cast_pointer_function(CryptoPPHack_GetValueIntoConstReference93_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::*)(char*, struct CryptoPP::ECPPoint*))&CryptoPP::Hack_GetValueIntoConstReference) },
        {   (LPVOID)0x140468ea0L,
            (LPVOID *)&CryptoPPHack_GetValueIntoConstReference95_user,
            (LPVOID *)&CryptoPPHack_GetValueIntoConstReference95_next,
            (LPVOID)cast_pointer_function(CryptoPPHack_GetValueIntoConstReference95_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::*)(char*, struct CryptoPP::Integer*))&CryptoPP::Hack_GetValueIntoConstReference) },
        {   (LPVOID)0x1405e2b70L,
            (LPVOID *)&CryptoPPHalfMontgomeryReduce96_user,
            (LPVOID *)&CryptoPPHalfMontgomeryReduce96_next,
            (LPVOID)cast_pointer_function(CryptoPPHalfMontgomeryReduce96_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t))&CryptoPP::HalfMontgomeryReduce) },
        {   (LPVOID)0x14061d170L,
            (LPVOID *)&CryptoPPIncrementCounterByOne97_user,
            (LPVOID *)&CryptoPPIncrementCounterByOne97_next,
            (LPVOID)cast_pointer_function(CryptoPPIncrementCounterByOne97_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint8_t*, uint8_t*, unsigned int))&CryptoPP::IncrementCounterByOne) },
        {   (LPVOID)0x14061d0e0L,
            (LPVOID *)&CryptoPPIncrementCounterByOne98_user,
            (LPVOID *)&CryptoPPIncrementCounterByOne98_next,
            (LPVOID)cast_pointer_function(CryptoPPIncrementCounterByOne98_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint8_t*, unsigned int))&CryptoPP::IncrementCounterByOne) },
        {   (LPVOID)0x14064a990L,
            (LPVOID *)&CryptoPPInverseLucas99_user,
            (LPVOID *)&CryptoPPInverseLucas99_next,
            (LPVOID)cast_pointer_function(CryptoPPInverseLucas99_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::*)(short, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::InverseLucas) },
        {   (LPVOID)0x14064a410L,
            (LPVOID *)&CryptoPPInverseLucas100_user,
            (LPVOID *)&CryptoPPInverseLucas100_next,
            (LPVOID)cast_pointer_function(CryptoPPInverseLucas100_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::InverseLucas) },
        {   (LPVOID)0x1404587a0L,
            (LPVOID *)&CryptoPPIsAlignedOn102_user,
            (LPVOID *)&CryptoPPIsAlignedOn102_next,
            (LPVOID)cast_pointer_function(CryptoPPIsAlignedOn102_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::*)(unsigned int))&CryptoPP::IsAlignedOn) },
        {   (LPVOID)0x140640840L,
            (LPVOID *)&CryptoPPIsFermatProbablePrime103_user,
            (LPVOID *)&CryptoPPIsFermatProbablePrime103_next,
            (LPVOID)cast_pointer_function(CryptoPPIsFermatProbablePrime103_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::IsFermatProbablePrime) },
        {   (LPVOID)0x140641d90L,
            (LPVOID *)&CryptoPPIsLucasProbablePrime104_user,
            (LPVOID *)&CryptoPPIsLucasProbablePrime104_next,
            (LPVOID)cast_pointer_function(CryptoPPIsLucasProbablePrime104_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::*)(struct CryptoPP::Integer*))&CryptoPP::IsLucasProbablePrime) },
        {   (LPVOID)0x14045ed00L,
            (LPVOID *)&CryptoPPIsPowerOf2106_user,
            (LPVOID *)&CryptoPPIsPowerOf2106_next,
            (LPVOID)cast_pointer_function(CryptoPPIsPowerOf2106_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::*)())&CryptoPP::IsPowerOf2) },
        {   (LPVOID)0x140642dc0L,
            (LPVOID *)&CryptoPPIsPrime107_user,
            (LPVOID *)&CryptoPPIsPrime107_next,
            (LPVOID)cast_pointer_function(CryptoPPIsPrime107_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::*)(struct CryptoPP::Integer*))&CryptoPP::IsPrime) },
        {   (LPVOID)0x1406405c0L,
            (LPVOID *)&CryptoPPIsSmallPrime108_user,
            (LPVOID *)&CryptoPPIsSmallPrime108_next,
            (LPVOID)cast_pointer_function(CryptoPPIsSmallPrime108_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::*)(struct CryptoPP::Integer*))&CryptoPP::IsSmallPrime) },
        {   (LPVOID)0x1406422f0L,
            (LPVOID *)&CryptoPPIsStrongLucasProbablePrime109_user,
            (LPVOID *)&CryptoPPIsStrongLucasProbablePrime109_next,
            (LPVOID)cast_pointer_function(CryptoPPIsStrongLucasProbablePrime109_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::*)(struct CryptoPP::Integer*))&CryptoPP::IsStrongLucasProbablePrime) },
        {   (LPVOID)0x140640e20L,
            (LPVOID *)&CryptoPPIsStrongProbablePrime110_user,
            (LPVOID *)&CryptoPPIsStrongProbablePrime110_next,
            (LPVOID)cast_pointer_function(CryptoPPIsStrongProbablePrime110_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::IsStrongProbablePrime) },
        {   (LPVOID)0x140649db0L,
            (LPVOID *)&CryptoPPJacobi111_user,
            (LPVOID *)&CryptoPPJacobi111_next,
            (LPVOID)cast_pointer_function(CryptoPPJacobi111_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::Jacobi) },
        {   (LPVOID)0x14064a020L,
            (LPVOID *)&CryptoPPLucas112_user,
            (LPVOID *)&CryptoPPLucas112_next,
            (LPVOID)cast_pointer_function(CryptoPPLucas112_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::*)(short, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::Lucas) },
        {   (LPVOID)0x14045f160L,
            (LPVOID *)&CryptoPPMakeParameters114_user,
            (LPVOID *)&CryptoPPMakeParameters114_next,
            (LPVOID)cast_pointer_function(CryptoPPMakeParameters114_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>*(CryptoPP::*)(char*, char**, bool))&CryptoPP::MakeParameters) },
        {   (LPVOID)0x140646270L,
            (LPVOID *)&CryptoPPMaurerProvablePrime115_user,
            (LPVOID *)&CryptoPPMaurerProvablePrime115_next,
            (LPVOID)cast_pointer_function(CryptoPPMaurerProvablePrime115_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::*)(short, struct CryptoPP::Integer*, struct CryptoPP::RandomNumberGenerator*))&CryptoPP::MaurerProvablePrime) },
        {   (LPVOID)0x140645280L,
            (LPVOID *)&CryptoPPMihailescuProvablePrime116_user,
            (LPVOID *)&CryptoPPMihailescuProvablePrime116_next,
            (LPVOID)cast_pointer_function(CryptoPPMihailescuProvablePrime116_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::*)(short, struct CryptoPP::Integer*, struct CryptoPP::RandomNumberGenerator*))&CryptoPP::MihailescuProvablePrime) },
        {   (LPVOID)0x14045ed80L,
            (LPVOID *)&CryptoPPModPowerOf2118_user,
            (LPVOID *)&CryptoPPModPowerOf2118_next,
            (LPVOID)cast_pointer_function(CryptoPPModPowerOf2118_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::*)(unsigned int*))&CryptoPP::ModPowerOf2) },
        {   (LPVOID)0x1406189b0L,
            (LPVOID *)&CryptoPPModes_TestInstantiations119_user,
            (LPVOID *)&CryptoPPModes_TestInstantiations119_next,
            (LPVOID)cast_pointer_function(CryptoPPModes_TestInstantiations119_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)())&CryptoPP::Modes_TestInstantiations) },
        {   (LPVOID)0x14064cb90L,
            (LPVOID *)&CryptoPPModularExponentiation120_user,
            (LPVOID *)&CryptoPPModularExponentiation120_next,
            (LPVOID)cast_pointer_function(CryptoPPModularExponentiation120_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::*)(short, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::ModularExponentiation) },
        {   (LPVOID)0x140649a60L,
            (LPVOID *)&CryptoPPModularRoot121_user,
            (LPVOID *)&CryptoPPModularRoot121_next,
            (LPVOID)cast_pointer_function(CryptoPPModularRoot121_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::*)(short, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::ModularRoot) },
        {   (LPVOID)0x140649760L,
            (LPVOID *)&CryptoPPModularRoot122_user,
            (LPVOID *)&CryptoPPModularRoot122_next,
            (LPVOID)cast_pointer_function(CryptoPPModularRoot122_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::ModularRoot) },
        {   (LPVOID)0x140647320L,
            (LPVOID *)&CryptoPPModularSquareRoot123_user,
            (LPVOID *)&CryptoPPModularSquareRoot123_next,
            (LPVOID)cast_pointer_function(CryptoPPModularSquareRoot123_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::*)(short, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::ModularSquareRoot) },
        {   (LPVOID)0x1405e2a00L,
            (LPVOID *)&CryptoPPMontgomeryReduce124_user,
            (LPVOID *)&CryptoPPMontgomeryReduce124_next,
            (LPVOID)cast_pointer_function(CryptoPPMontgomeryReduce124_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t))&CryptoPP::MontgomeryReduce) },
        {   (LPVOID)0x1405e9ba0L,
            (LPVOID *)&CryptoPPMultiply125_user,
            (LPVOID *)&CryptoPPMultiply125_next,
            (LPVOID)cast_pointer_function(CryptoPPMultiply125_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::Multiply) },
        {   (LPVOID)0x1405eea20L,
            (LPVOID *)&CryptoPPMultiply126_user,
            (LPVOID *)&CryptoPPMultiply126_next,
            (LPVOID)cast_pointer_function(CryptoPPMultiply126_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t))&CryptoPP::Multiply) },
        {   (LPVOID)0x1405eeaa0L,
            (LPVOID *)&CryptoPPMultiplyBottom127_user,
            (LPVOID *)&CryptoPPMultiplyBottom127_next,
            (LPVOID)cast_pointer_function(CryptoPPMultiplyBottom127_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t))&CryptoPP::MultiplyBottom) },
        {   (LPVOID)0x1405e3f90L,
            (LPVOID *)&CryptoPPMultiplyByPower2Mod128_user,
            (LPVOID *)&CryptoPPMultiplyByPower2Mod128_next,
            (LPVOID)cast_pointer_function(CryptoPPMultiplyByPower2Mod128_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t, uint64_t*, uint64_t))&CryptoPP::MultiplyByPower2Mod) },
        {   (LPVOID)0x1405e1a20L,
            (LPVOID *)&CryptoPPMultiplyTop129_user,
            (LPVOID *)&CryptoPPMultiplyTop129_next,
            (LPVOID)cast_pointer_function(CryptoPPMultiplyTop129_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t))&CryptoPP::MultiplyTop) },
        {   (LPVOID)0x1404669a0L,
            (LPVOID *)&CryptoPPNativeByteOrderIs131_user,
            (LPVOID *)&CryptoPPNativeByteOrderIs131_next,
            (LPVOID)cast_pointer_function(CryptoPPNativeByteOrderIs131_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::*)())&CryptoPP::NativeByteOrderIs) },
        {   (LPVOID)0x1405f42c0L,
            (LPVOID *)&CryptoPPNullRNG132_user,
            (LPVOID *)&CryptoPPNullRNG132_next,
            (LPVOID)cast_pointer_function(CryptoPPNullRNG132_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::RandomNumberGenerator*(CryptoPP::*)())&CryptoPP::NullRNG) },
        {   (LPVOID)0x140625350L,
            (LPVOID *)&CryptoPPOS_GenerateRandomBlock133_user,
            (LPVOID *)&CryptoPPOS_GenerateRandomBlock133_next,
            (LPVOID)cast_pointer_function(CryptoPPOS_GenerateRandomBlock133_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(bool, uint8_t*, uint64_t))&CryptoPP::OS_GenerateRandomBlock) },
        {   (LPVOID)0x140622290L,
            (LPVOID *)&CryptoPPP1363_MGF1KDF2_Common134_user,
            (LPVOID *)&CryptoPPP1363_MGF1KDF2_Common134_next,
            (LPVOID)cast_pointer_function(CryptoPPP1363_MGF1KDF2_Common134_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(struct CryptoPP::HashTransformation*, uint8_t*, char, uint8_t*, uint64_t, uint8_t*, uint64_t, bool, unsigned int))&CryptoPP::P1363_MGF1KDF2_Common) },
        {   (LPVOID)0x1405e88c0L,
            (LPVOID *)&CryptoPPPositiveAdd135_user,
            (LPVOID *)&CryptoPPPositiveAdd135_next,
            (LPVOID)cast_pointer_function(CryptoPPPositiveAdd135_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::PositiveAdd) },
        {   (LPVOID)0x1405e9ce0L,
            (LPVOID *)&CryptoPPPositiveDivide136_user,
            (LPVOID *)&CryptoPPPositiveDivide136_next,
            (LPVOID)cast_pointer_function(CryptoPPPositiveDivide136_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::PositiveDivide) },
        {   (LPVOID)0x1405e9a30L,
            (LPVOID *)&CryptoPPPositiveMultiply137_user,
            (LPVOID *)&CryptoPPPositiveMultiply137_next,
            (LPVOID)cast_pointer_function(CryptoPPPositiveMultiply137_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::PositiveMultiply) },
        {   (LPVOID)0x1405e8e50L,
            (LPVOID *)&CryptoPPPositiveSubtract138_user,
            (LPVOID *)&CryptoPPPositiveSubtract138_next,
            (LPVOID)cast_pointer_function(CryptoPPPositiveSubtract138_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::PositiveSubtract) },
        {   (LPVOID)0x14062cee0L,
            (LPVOID *)&CryptoPPPowerUpSelfTestInProgressOnThisThread139_user,
            (LPVOID *)&CryptoPPPowerUpSelfTestInProgressOnThisThread139_next,
            (LPVOID)cast_pointer_function(CryptoPPPowerUpSelfTestInProgressOnThisThread139_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::*)())&CryptoPP::PowerUpSelfTestInProgressOnThisThread) },
        {   (LPVOID)0x140643060L,
            (LPVOID *)&CryptoPPPrimeSearchInterval140_user,
            (LPVOID *)&CryptoPPPrimeSearchInterval140_next,
            (LPVOID)cast_pointer_function(CryptoPPPrimeSearchInterval140_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::*)(struct CryptoPP::Integer*))&CryptoPP::PrimeSearchInterval) },
        {   (LPVOID)0x140465e30L,
            (LPVOID *)&CryptoPPPutWord142_user,
            (LPVOID *)&CryptoPPPutWord142_next,
            (LPVOID)cast_pointer_function(CryptoPPPutWord142_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(struct CryptoPP::ByteOrder, char*, unsigned int, char*))&CryptoPP::PutWord) },
        {   (LPVOID)0x140641940L,
            (LPVOID *)&CryptoPPRabinMillerTest143_user,
            (LPVOID *)&CryptoPPRabinMillerTest143_next,
            (LPVOID)cast_pointer_function(CryptoPPRabinMillerTest143_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::*)(struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::Integer*, unsigned int))&CryptoPP::RabinMillerTest) },
        {   (LPVOID)0x1405e26b0L,
            (LPVOID *)&CryptoPPRecursiveInverseModPower2144_user,
            (LPVOID *)&CryptoPPRecursiveInverseModPower2144_next,
            (LPVOID)cast_pointer_function(CryptoPPRecursiveInverseModPower2144_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*, uint64_t))&CryptoPP::RecursiveInverseModPower2) },
        {   (LPVOID)0x1405e0fe0L,
            (LPVOID *)&CryptoPPRecursiveMultiply145_user,
            (LPVOID *)&CryptoPPRecursiveMultiply145_next,
            (LPVOID)cast_pointer_function(CryptoPPRecursiveMultiply145_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t))&CryptoPP::RecursiveMultiply) },
        {   (LPVOID)0x1405e1870L,
            (LPVOID *)&CryptoPPRecursiveMultiplyBottom146_user,
            (LPVOID *)&CryptoPPRecursiveMultiplyBottom146_next,
            (LPVOID)cast_pointer_function(CryptoPPRecursiveMultiplyBottom146_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t))&CryptoPP::RecursiveMultiplyBottom) },
        {   (LPVOID)0x1405e1680L,
            (LPVOID *)&CryptoPPRecursiveSquare147_user,
            (LPVOID *)&CryptoPPRecursiveSquare147_next,
            (LPVOID)cast_pointer_function(CryptoPPRecursiveSquare147_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*, uint64_t))&CryptoPP::RecursiveSquare) },
        {   (LPVOID)0x140660330L,
            (LPVOID *)&CryptoPPReverseCipherDir148_user,
            (LPVOID *)&CryptoPPReverseCipherDir148_next,
            (LPVOID)cast_pointer_function(CryptoPPReverseCipherDir148_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::CipherDir(CryptoPP::*)(struct CryptoPP::CipherDir))&CryptoPP::ReverseCipherDir) },
        {   (LPVOID)0x140466850L,
            (LPVOID *)&CryptoPPSTDMIN150_user,
            (LPVOID *)&CryptoPPSTDMIN150_next,
            (LPVOID)cast_pointer_function(CryptoPPSTDMIN150_wrapper),
            (LPVOID)cast_pointer_function((uint64_t*(CryptoPP::*)(uint64_t*))&CryptoPP::STDMIN) },
        {   (LPVOID)0x140465db0L,
            (LPVOID *)&CryptoPPSaturatingSubtract152_user,
            (LPVOID *)&CryptoPPSaturatingSubtract152_next,
            (LPVOID)cast_pointer_function(CryptoPPSaturatingSubtract152_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::*)(unsigned int*))&CryptoPP::SaturatingSubtract) },
        {   (LPVOID)0x140669c80L,
            (LPVOID *)&CryptoPPSerpent_KeySchedule153_user,
            (LPVOID *)&CryptoPPSerpent_KeySchedule153_next,
            (LPVOID)cast_pointer_function(CryptoPPSerpent_KeySchedule153_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(unsigned int*, unsigned int, uint8_t*, uint64_t))&CryptoPP::Serpent_KeySchedule) },
        {   (LPVOID)0x14062cf20L,
            (LPVOID *)&CryptoPPSetPowerUpSelfTestInProgressOnThisThread154_user,
            (LPVOID *)&CryptoPPSetPowerUpSelfTestInProgressOnThisThread154_next,
            (LPVOID)cast_pointer_function(CryptoPPSetPowerUpSelfTestInProgressOnThisThread154_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(bool))&CryptoPP::SetPowerUpSelfTestInProgressOnThisThread) },
        {   (LPVOID)0x1405ee990L,
            (LPVOID *)&CryptoPPSetWords155_user,
            (LPVOID *)&CryptoPPSetWords155_next,
            (LPVOID)cast_pointer_function(CryptoPPSetWords155_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t, uint64_t))&CryptoPP::SetWords) },
        {   (LPVOID)0x1405eeae0L,
            (LPVOID *)&CryptoPPShiftWordsLeftByBits156_user,
            (LPVOID *)&CryptoPPShiftWordsLeftByBits156_next,
            (LPVOID)cast_pointer_function(CryptoPPShiftWordsLeftByBits156_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::*)(uint64_t*, uint64_t, unsigned int))&CryptoPP::ShiftWordsLeftByBits) },
        {   (LPVOID)0x1405eecd0L,
            (LPVOID *)&CryptoPPShiftWordsLeftByWords157_user,
            (LPVOID *)&CryptoPPShiftWordsLeftByWords157_next,
            (LPVOID)cast_pointer_function(CryptoPPShiftWordsLeftByWords157_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t, uint64_t))&CryptoPP::ShiftWordsLeftByWords) },
        {   (LPVOID)0x1405eebb0L,
            (LPVOID *)&CryptoPPShiftWordsRightByBits158_user,
            (LPVOID *)&CryptoPPShiftWordsRightByBits158_next,
            (LPVOID)cast_pointer_function(CryptoPPShiftWordsRightByBits158_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::*)(uint64_t*, uint64_t, unsigned int))&CryptoPP::ShiftWordsRightByBits) },
        {   (LPVOID)0x1405eed70L,
            (LPVOID *)&CryptoPPShiftWordsRightByWords159_user,
            (LPVOID *)&CryptoPPShiftWordsRightByWords159_next,
            (LPVOID)cast_pointer_function(CryptoPPShiftWordsRightByWords159_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t, uint64_t))&CryptoPP::ShiftWordsRightByWords) },
        {   (LPVOID)0x14062cf50L,
            (LPVOID *)&CryptoPPSignaturePairwiseConsistencyTest_FIPS_140_Only160_user,
            (LPVOID *)&CryptoPPSignaturePairwiseConsistencyTest_FIPS_140_Only160_next,
            (LPVOID)cast_pointer_function(CryptoPPSignaturePairwiseConsistencyTest_FIPS_140_Only160_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(struct CryptoPP::PK_Signer*, struct CryptoPP::PK_Verifier*))&CryptoPP::SignaturePairwiseConsistencyTest_FIPS_140_Only) },
        {   (LPVOID)0x14062ceb0L,
            (LPVOID *)&CryptoPPSimulatePowerUpSelfTestFailure161_user,
            (LPVOID *)&CryptoPPSimulatePowerUpSelfTestFailure161_next,
            (LPVOID)cast_pointer_function(CryptoPPSimulatePowerUpSelfTestFailure161_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)())&CryptoPP::SimulatePowerUpSelfTestFailure) },
        {   (LPVOID)0x1406407e0L,
            (LPVOID *)&CryptoPPSmallDivisorsTest162_user,
            (LPVOID *)&CryptoPPSmallDivisorsTest162_next,
            (LPVOID)cast_pointer_function(CryptoPPSmallDivisorsTest162_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::*)(struct CryptoPP::Integer*))&CryptoPP::SmallDivisorsTest) },
        {   (LPVOID)0x140648240L,
            (LPVOID *)&CryptoPPSolveModularQuadraticEquation163_user,
            (LPVOID *)&CryptoPPSolveModularQuadraticEquation163_next,
            (LPVOID)cast_pointer_function(CryptoPPSolveModularQuadraticEquation163_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::SolveModularQuadraticEquation) },
        {   (LPVOID)0x1405eea60L,
            (LPVOID *)&CryptoPPSquare164_user,
            (LPVOID *)&CryptoPPSquare164_next,
            (LPVOID)cast_pointer_function(CryptoPPSquare164_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*, uint64_t))&CryptoPP::Square) },
        {   (LPVOID)0x14045fb70L,
            (LPVOID *)&CryptoPPStandardReallocate166_user,
            (LPVOID *)&CryptoPPStandardReallocate166_next,
            (LPVOID)cast_pointer_function(CryptoPPStandardReallocate166_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::*)(char*, uint64_t, uint64_t, bool))&CryptoPP::StandardReallocate) },
        {   (LPVOID)0x1405ee950L,
            (LPVOID *)&CryptoPPSubtract167_user,
            (LPVOID *)&CryptoPPSubtract167_next,
            (LPVOID)cast_pointer_function(CryptoPPSubtract167_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*, uint64_t))&CryptoPP::Subtract) },
        {   (LPVOID)0x14062f8a0L,
            (LPVOID *)&CryptoPPTestInstantiations_gfpcrypt168_user,
            (LPVOID *)&CryptoPPTestInstantiations_gfpcrypt168_next,
            (LPVOID)cast_pointer_function(CryptoPPTestInstantiations_gfpcrypt168_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)())&CryptoPP::TestInstantiations_gfpcrypt) },
        {   (LPVOID)0x1405f34b0L,
            (LPVOID *)&CryptoPPTheBitBucket169_user,
            (LPVOID *)&CryptoPPTheBitBucket169_next,
            (LPVOID)cast_pointer_function(CryptoPPTheBitBucket169_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::BufferedTransformation*(CryptoPP::*)())&CryptoPP::TheBitBucket) },
        {   (LPVOID)0x1406406f0L,
            (LPVOID *)&CryptoPPTrialDivision170_user,
            (LPVOID *)&CryptoPPTrialDivision170_next,
            (LPVOID)cast_pointer_function(CryptoPPTrialDivision170_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::*)(struct CryptoPP::Integer*, unsigned int))&CryptoPP::TrialDivision) },
        {   (LPVOID)0x140642fa0L,
            (LPVOID *)&CryptoPPVerifyPrime171_user,
            (LPVOID *)&CryptoPPVerifyPrime171_next,
            (LPVOID)cast_pointer_function(CryptoPPVerifyPrime171_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::*)(struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::Integer*, unsigned int))&CryptoPP::VerifyPrime) },
        {   (LPVOID)0x14062c050L,
            (LPVOID *)&CryptoPPXorWords172_user,
            (LPVOID *)&CryptoPPXorWords172_next,
            (LPVOID)cast_pointer_function(CryptoPPXorWords172_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t*, uint64_t))&CryptoPP::XorWords) },
        {   (LPVOID)0x14062bfe0L,
            (LPVOID *)&CryptoPPXorWords173_user,
            (LPVOID *)&CryptoPPXorWords173_next,
            (LPVOID)cast_pointer_function(CryptoPPXorWords173_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint64_t*, uint64_t*, uint64_t))&CryptoPP::XorWords) },
        {   (LPVOID)0x1405eb3c0L,
            (LPVOID *)&CryptoPPa_exp_b_mod_c174_user,
            (LPVOID *)&CryptoPPa_exp_b_mod_c174_next,
            (LPVOID)cast_pointer_function(CryptoPPa_exp_b_mod_c174_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::*)(short, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::a_exp_b_mod_c) },
        {   (LPVOID)0x1405eb2e0L,
            (LPVOID *)&CryptoPPa_times_b_mod_c175_user,
            (LPVOID *)&CryptoPPa_times_b_mod_c175_next,
            (LPVOID)cast_pointer_function(CryptoPPa_times_b_mod_c175_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::*)(short, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::a_times_b_mod_c) },
        {   (LPVOID)0x14061f470L,
            (LPVOID *)&CryptoPPxorbuf188_user,
            (LPVOID *)&CryptoPPxorbuf188_next,
            (LPVOID)cast_pointer_function(CryptoPPxorbuf188_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint8_t*, uint8_t*, uint8_t*, uint64_t))&CryptoPP::xorbuf) },
        {   (LPVOID)0x14061f240L,
            (LPVOID *)&CryptoPPxorbuf189_user,
            (LPVOID *)&CryptoPPxorbuf189_next,
            (LPVOID)cast_pointer_function(CryptoPPxorbuf189_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::*)(uint8_t*, uint8_t*, uint64_t))&CryptoPP::xorbuf) },
        
        {   (LPVOID)0x140458620L,
            (LPVOID *)&CryptoPP__Clonablector_Clonable2_user,
            (LPVOID *)&CryptoPP__Clonablector_Clonable2_next,
            (LPVOID)cast_pointer_function(CryptoPP__Clonablector_Clonable2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Clonable::*)(struct CryptoPP::Clonable*))&CryptoPP::Clonable::ctor_Clonable) },
        {   (LPVOID)0x1405f6700L,
            (LPVOID *)&CryptoPP__Clonablector_Clonable3_user,
            (LPVOID *)&CryptoPP__Clonablector_Clonable3_next,
            (LPVOID)cast_pointer_function(CryptoPP__Clonablector_Clonable3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Clonable::*)())&CryptoPP::Clonable::ctor_Clonable) },
        {   (LPVOID)0x14044ccc0L,
            (LPVOID *)&CryptoPP__ClonableClone5_user,
            (LPVOID *)&CryptoPP__ClonableClone5_next,
            (LPVOID)cast_pointer_function(CryptoPP__ClonableClone5_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Clonable*(CryptoPP::Clonable::*)())&CryptoPP::Clonable::Clone) },
        {   (LPVOID)0x14044a190L,
            (LPVOID *)&CryptoPP__Clonabledtor_Clonable7_user,
            (LPVOID *)&CryptoPP__Clonabledtor_Clonable7_next,
            (LPVOID)cast_pointer_function(CryptoPP__Clonabledtor_Clonable7_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Clonable::*)())&CryptoPP::Clonable::dtor_Clonable) },
        
        {   (LPVOID)0x140458510L,
            (LPVOID *)&CryptoPP__Algorithmctor_Algorithm2_user,
            (LPVOID *)&CryptoPP__Algorithmctor_Algorithm2_next,
            (LPVOID)cast_pointer_function(CryptoPP__Algorithmctor_Algorithm2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Algorithm::*)(struct CryptoPP::Algorithm*))&CryptoPP::Algorithm::ctor_Algorithm) },
        {   (LPVOID)0x1405f3520L,
            (LPVOID *)&CryptoPP__Algorithmctor_Algorithm3_user,
            (LPVOID *)&CryptoPP__Algorithmctor_Algorithm3_next,
            (LPVOID)cast_pointer_function(CryptoPP__Algorithmctor_Algorithm3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Algorithm::*)(bool))&CryptoPP::Algorithm::ctor_Algorithm) },
        {   (LPVOID)0x14044cdc0L,
            (LPVOID *)&CryptoPP__AlgorithmAlgorithmName5_user,
            (LPVOID *)&CryptoPP__AlgorithmAlgorithmName5_next,
            (LPVOID)cast_pointer_function(CryptoPP__AlgorithmAlgorithmName5_wrapper),
            (LPVOID)cast_pointer_function((struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*(CryptoPP::Algorithm::*)(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*))&CryptoPP::Algorithm::AlgorithmName) },
        {   (LPVOID)0x14044a150L,
            (LPVOID *)&CryptoPP__Algorithmdtor_Algorithm7_user,
            (LPVOID *)&CryptoPP__Algorithmdtor_Algorithm7_next,
            (LPVOID)cast_pointer_function(CryptoPP__Algorithmdtor_Algorithm7_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Algorithm::*)())&CryptoPP::Algorithm::dtor_Algorithm) },
        
        {   (LPVOID)0x1405ef720L,
            (LPVOID *)&CryptoPP__RandomNumberGeneratorCanIncorporateEntropy1_user,
            (LPVOID *)&CryptoPP__RandomNumberGeneratorCanIncorporateEntropy1_next,
            (LPVOID)cast_pointer_function(CryptoPP__RandomNumberGeneratorCanIncorporateEntropy1_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::RandomNumberGenerator::*)())&CryptoPP::RandomNumberGenerator::CanIncorporateEntropy) },
        {   (LPVOID)0x1405f4110L,
            (LPVOID *)&CryptoPP__RandomNumberGeneratorDiscardBytes2_user,
            (LPVOID *)&CryptoPP__RandomNumberGeneratorDiscardBytes2_next,
            (LPVOID)cast_pointer_function(CryptoPP__RandomNumberGeneratorDiscardBytes2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::RandomNumberGenerator::*)(uint64_t))&CryptoPP::RandomNumberGenerator::DiscardBytes) },
        {   (LPVOID)0x1405f3f60L,
            (LPVOID *)&CryptoPP__RandomNumberGeneratorGenerateBit3_user,
            (LPVOID *)&CryptoPP__RandomNumberGeneratorGenerateBit3_next,
            (LPVOID)cast_pointer_function(CryptoPP__RandomNumberGeneratorGenerateBit3_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::RandomNumberGenerator::*)())&CryptoPP::RandomNumberGenerator::GenerateBit) },
        {   (LPVOID)0x1405f4060L,
            (LPVOID *)&CryptoPP__RandomNumberGeneratorGenerateBlock4_user,
            (LPVOID *)&CryptoPP__RandomNumberGeneratorGenerateBlock4_next,
            (LPVOID)cast_pointer_function(CryptoPP__RandomNumberGeneratorGenerateBlock4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::RandomNumberGenerator::*)(uint8_t*, uint64_t))&CryptoPP::RandomNumberGenerator::GenerateBlock) },
        {   (LPVOID)0x1405f3f90L,
            (LPVOID *)&CryptoPP__RandomNumberGeneratorGenerateByte5_user,
            (LPVOID *)&CryptoPP__RandomNumberGeneratorGenerateByte5_next,
            (LPVOID)cast_pointer_function(CryptoPP__RandomNumberGeneratorGenerateByte5_wrapper),
            (LPVOID)cast_pointer_function((uint8_t(CryptoPP::RandomNumberGenerator::*)())&CryptoPP::RandomNumberGenerator::GenerateByte) },
        {   (LPVOID)0x1405f3fd0L,
            (LPVOID *)&CryptoPP__RandomNumberGeneratorGenerateWord326_user,
            (LPVOID *)&CryptoPP__RandomNumberGeneratorGenerateWord326_next,
            (LPVOID)cast_pointer_function(CryptoPP__RandomNumberGeneratorGenerateWord326_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::RandomNumberGenerator::*)(unsigned int, unsigned int))&CryptoPP::RandomNumberGenerator::GenerateWord32) },
        {   (LPVOID)0x1405ef670L,
            (LPVOID *)&CryptoPP__RandomNumberGeneratorIncorporateEntropy7_user,
            (LPVOID *)&CryptoPP__RandomNumberGeneratorIncorporateEntropy7_next,
            (LPVOID)cast_pointer_function(CryptoPP__RandomNumberGeneratorIncorporateEntropy7_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::RandomNumberGenerator::*)(uint8_t*, uint64_t))&CryptoPP::RandomNumberGenerator::IncorporateEntropy) },
        {   (LPVOID)0x14055bad0L,
            (LPVOID *)&CryptoPP__RandomNumberGeneratorctor_RandomNumberGenerator8_user,
            (LPVOID *)&CryptoPP__RandomNumberGeneratorctor_RandomNumberGenerator8_next,
            (LPVOID)cast_pointer_function(CryptoPP__RandomNumberGeneratorctor_RandomNumberGenerator8_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::RandomNumberGenerator::*)())&CryptoPP::RandomNumberGenerator::ctor_RandomNumberGenerator) },
        {   (LPVOID)0x14046bcb0L,
            (LPVOID *)&CryptoPP__RandomNumberGeneratordtor_RandomNumberGenerator10_user,
            (LPVOID *)&CryptoPP__RandomNumberGeneratordtor_RandomNumberGenerator10_next,
            (LPVOID)cast_pointer_function(CryptoPP__RandomNumberGeneratordtor_RandomNumberGenerator10_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::RandomNumberGenerator::*)())&CryptoPP::RandomNumberGenerator::dtor_RandomNumberGenerator) },
        
        {   (LPVOID)0x140453a60L,
            (LPVOID *)&CryptoPP__NotCopyablector_NotCopyable2_user,
            (LPVOID *)&CryptoPP__NotCopyablector_NotCopyable2_next,
            (LPVOID)cast_pointer_function(CryptoPP__NotCopyablector_NotCopyable2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::NotCopyable::*)())&CryptoPP::NotCopyable::ctor_NotCopyable) },
        
        {   (LPVOID)0x1405f3df0L,
            (LPVOID *)&CryptoPP__BlockTransformationBlockAlignment1_user,
            (LPVOID *)&CryptoPP__BlockTransformationBlockAlignment1_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockTransformationBlockAlignment1_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::BlockTransformation::*)())&CryptoPP::BlockTransformation::BlockAlignment) },
        {   (LPVOID)0x14045a1d0L,
            (LPVOID *)&CryptoPP__BlockTransformationctor_BlockTransformation3_user,
            (LPVOID *)&CryptoPP__BlockTransformationctor_BlockTransformation3_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockTransformationctor_BlockTransformation3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BlockTransformation::*)(struct CryptoPP::BlockTransformation*))&CryptoPP::BlockTransformation::ctor_BlockTransformation) },
        {   (LPVOID)0x14045c970L,
            (LPVOID *)&CryptoPP__BlockTransformationctor_BlockTransformation5_user,
            (LPVOID *)&CryptoPP__BlockTransformationctor_BlockTransformation5_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockTransformationctor_BlockTransformation5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BlockTransformation::*)())&CryptoPP::BlockTransformation::ctor_BlockTransformation) },
        {   (LPVOID)0x140660620L,
            (LPVOID *)&CryptoPP__BlockTransformationGetCipherDirection6_user,
            (LPVOID *)&CryptoPP__BlockTransformationGetCipherDirection6_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockTransformationGetCipherDirection6_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::CipherDir(CryptoPP::BlockTransformation::*)())&CryptoPP::BlockTransformation::GetCipherDirection) },
        {   (LPVOID)0x140459a60L,
            (LPVOID *)&CryptoPP__BlockTransformationIsPermutation8_user,
            (LPVOID *)&CryptoPP__BlockTransformationIsPermutation8_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockTransformationIsPermutation8_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::BlockTransformation::*)())&CryptoPP::BlockTransformation::IsPermutation) },
        {   (LPVOID)0x140459a70L,
            (LPVOID *)&CryptoPP__BlockTransformationOptimalNumberOfParallelBlocks10_user,
            (LPVOID *)&CryptoPP__BlockTransformationOptimalNumberOfParallelBlocks10_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockTransformationOptimalNumberOfParallelBlocks10_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::BlockTransformation::*)())&CryptoPP::BlockTransformation::OptimalNumberOfParallelBlocks) },
        {   (LPVOID)0x1405f3d30L,
            (LPVOID *)&CryptoPP__BlockTransformationProcessAndXorMultipleBlocks11_user,
            (LPVOID *)&CryptoPP__BlockTransformationProcessAndXorMultipleBlocks11_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockTransformationProcessAndXorMultipleBlocks11_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BlockTransformation::*)(uint8_t*, uint8_t*, uint8_t*, uint64_t))&CryptoPP::BlockTransformation::ProcessAndXorMultipleBlocks) },
        {   (LPVOID)0x14061d0a0L,
            (LPVOID *)&CryptoPP__BlockTransformationProcessBlock12_user,
            (LPVOID *)&CryptoPP__BlockTransformationProcessBlock12_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockTransformationProcessBlock12_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BlockTransformation::*)(uint8_t*))&CryptoPP::BlockTransformation::ProcessBlock) },
        {   (LPVOID)0x14061d060L,
            (LPVOID *)&CryptoPP__BlockTransformationProcessBlock13_user,
            (LPVOID *)&CryptoPP__BlockTransformationProcessBlock13_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockTransformationProcessBlock13_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BlockTransformation::*)(uint8_t*, uint8_t*))&CryptoPP::BlockTransformation::ProcessBlock) },
        {   (LPVOID)0x14044a580L,
            (LPVOID *)&CryptoPP__BlockTransformationdtor_BlockTransformation15_user,
            (LPVOID *)&CryptoPP__BlockTransformationdtor_BlockTransformation15_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockTransformationdtor_BlockTransformation15_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BlockTransformation::*)())&CryptoPP::BlockTransformation::dtor_BlockTransformation) },
        
        {   (LPVOID)0x140622240L,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfaceAssertValidKeyLength1_user,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfaceAssertValidKeyLength1_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyingInterfaceAssertValidKeyLength1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SimpleKeyingInterface::*)(uint64_t))&CryptoPP::SimpleKeyingInterface::AssertValidKeyLength) },
        {   (LPVOID)0x1405f3c70L,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfaceGetIVAndThrowIfInvalid2_user,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfaceGetIVAndThrowIfInvalid2_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyingInterfaceGetIVAndThrowIfInvalid2_wrapper),
            (LPVOID)cast_pointer_function((uint8_t*(CryptoPP::SimpleKeyingInterface::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::SimpleKeyingInterface::GetIVAndThrowIfInvalid) },
        {   (LPVOID)0x1405f3cd0L,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfaceGetNextIV3_user,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfaceGetNextIV3_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyingInterfaceGetNextIV3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SimpleKeyingInterface::*)(struct CryptoPP::RandomNumberGenerator*, uint8_t*))&CryptoPP::SimpleKeyingInterface::GetNextIV) },
        {   (LPVOID)0x140586200L,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfaceIsResynchronizable4_user,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfaceIsResynchronizable4_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyingInterfaceIsResynchronizable4_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::SimpleKeyingInterface::*)())&CryptoPP::SimpleKeyingInterface::IsResynchronizable) },
        {   (LPVOID)0x1404598d0L,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfaceIsValidKeyLength6_user,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfaceIsValidKeyLength6_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyingInterfaceIsValidKeyLength6_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::SimpleKeyingInterface::*)(uint64_t))&CryptoPP::SimpleKeyingInterface::IsValidKeyLength) },
        {   (LPVOID)0x140459950L,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfaceResynchronize8_user,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfaceResynchronize8_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyingInterfaceResynchronize8_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SimpleKeyingInterface::*)(char*))&CryptoPP::SimpleKeyingInterface::Resynchronize) },
        {   (LPVOID)0x1405f36e0L,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfaceSetKey9_user,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfaceSetKey9_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyingInterfaceSetKey9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SimpleKeyingInterface::*)(uint8_t*, uint64_t, struct CryptoPP::NameValuePairs*))&CryptoPP::SimpleKeyingInterface::SetKey) },
        {   (LPVOID)0x1405f37e0L,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfaceSetKeyWithIV10_user,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfaceSetKeyWithIV10_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyingInterfaceSetKeyWithIV10_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SimpleKeyingInterface::*)(uint8_t*, uint64_t, uint8_t*))&CryptoPP::SimpleKeyingInterface::SetKeyWithIV) },
        {   (LPVOID)0x1405f3740L,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfaceSetKeyWithRounds11_user,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfaceSetKeyWithRounds11_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyingInterfaceSetKeyWithRounds11_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SimpleKeyingInterface::*)(uint8_t*, uint64_t, int))&CryptoPP::SimpleKeyingInterface::SetKeyWithRounds) },
        {   (LPVOID)0x14045a230L,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfacector_SimpleKeyingInterface13_user,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfacector_SimpleKeyingInterface13_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyingInterfacector_SimpleKeyingInterface13_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SimpleKeyingInterface::*)(struct CryptoPP::SimpleKeyingInterface*))&CryptoPP::SimpleKeyingInterface::ctor_SimpleKeyingInterface) },
        {   (LPVOID)0x140458210L,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfacector_SimpleKeyingInterface15_user,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfacector_SimpleKeyingInterface15_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyingInterfacector_SimpleKeyingInterface15_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SimpleKeyingInterface::*)())&CryptoPP::SimpleKeyingInterface::ctor_SimpleKeyingInterface) },
        {   (LPVOID)0x1405f3ad0L,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfaceThrowIfInvalidIV16_user,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfaceThrowIfInvalidIV16_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyingInterfaceThrowIfInvalidIV16_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SimpleKeyingInterface::*)(uint8_t*))&CryptoPP::SimpleKeyingInterface::ThrowIfInvalidIV) },
        {   (LPVOID)0x1405f3880L,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfaceThrowIfInvalidKeyLength17_user,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfaceThrowIfInvalidKeyLength17_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyingInterfaceThrowIfInvalidKeyLength17_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SimpleKeyingInterface::*)(uint64_t))&CryptoPP::SimpleKeyingInterface::ThrowIfInvalidKeyLength) },
        {   (LPVOID)0x1405f3980L,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfaceThrowIfResynchronizable18_user,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfaceThrowIfResynchronizable18_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyingInterfaceThrowIfResynchronizable18_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SimpleKeyingInterface::*)())&CryptoPP::SimpleKeyingInterface::ThrowIfResynchronizable) },
        {   (LPVOID)0x140449ef0L,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfacedtor_SimpleKeyingInterface20_user,
            (LPVOID *)&CryptoPP__SimpleKeyingInterfacedtor_SimpleKeyingInterface20_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyingInterfacedtor_SimpleKeyingInterface20_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SimpleKeyingInterface::*)())&CryptoPP::SimpleKeyingInterface::dtor_SimpleKeyingInterface) },
        
        {   (LPVOID)0x1405ef560L,
            (LPVOID *)&CryptoPP__NameValuePairsGetIntValue1_user,
            (LPVOID *)&CryptoPP__NameValuePairsGetIntValue1_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameValuePairsGetIntValue1_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::NameValuePairs::*)(char*, int*))&CryptoPP::NameValuePairs::GetIntValue) },
        {   (LPVOID)0x14054b860L,
            (LPVOID *)&CryptoPP__NameValuePairsGetIntValueWithDefault2_user,
            (LPVOID *)&CryptoPP__NameValuePairsGetIntValueWithDefault2_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameValuePairsGetIntValueWithDefault2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::NameValuePairs::*)(char*, int))&CryptoPP::NameValuePairs::GetIntValueWithDefault) },
        {   (LPVOID)0x1405ffb70L,
            (LPVOID *)&CryptoPP__NameValuePairsGetRequiredIntParameter3_user,
            (LPVOID *)&CryptoPP__NameValuePairsGetRequiredIntParameter3_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameValuePairsGetRequiredIntParameter3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::NameValuePairs::*)(char*, char*, int*))&CryptoPP::NameValuePairs::GetRequiredIntParameter) },
        {   (LPVOID)0x14045f540L,
            (LPVOID *)&CryptoPP__NameValuePairsGetThisObject5_user,
            (LPVOID *)&CryptoPP__NameValuePairsGetThisObject5_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameValuePairsGetThisObject5_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::NameValuePairs::*)(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*))&CryptoPP::NameValuePairs::GetThisObject) },
        {   (LPVOID)0x140468f50L,
            (LPVOID *)&CryptoPP__NameValuePairsGetThisObject7_user,
            (LPVOID *)&CryptoPP__NameValuePairsGetThisObject7_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameValuePairsGetThisObject7_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::NameValuePairs::*)(struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>*))&CryptoPP::NameValuePairs::GetThisObject) },
        {   (LPVOID)0x140467210L,
            (LPVOID *)&CryptoPP__NameValuePairsGetThisObject9_user,
            (LPVOID *)&CryptoPP__NameValuePairsGetThisObject9_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameValuePairsGetThisObject9_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::NameValuePairs::*)(struct CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >*))&CryptoPP::NameValuePairs::GetThisObject) },
        {   (LPVOID)0x1404695e0L,
            (LPVOID *)&CryptoPP__NameValuePairsGetThisObject11_user,
            (LPVOID *)&CryptoPP__NameValuePairsGetThisObject11_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameValuePairsGetThisObject11_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::NameValuePairs::*)(struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*))&CryptoPP::NameValuePairs::GetThisObject) },
        {   (LPVOID)0x140467030L,
            (LPVOID *)&CryptoPP__NameValuePairsGetThisObject13_user,
            (LPVOID *)&CryptoPP__NameValuePairsGetThisObject13_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameValuePairsGetThisObject13_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::NameValuePairs::*)(struct CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >*))&CryptoPP::NameValuePairs::GetThisObject) },
        {   (LPVOID)0x140468720L,
            (LPVOID *)&CryptoPP__NameValuePairsGetThisPointer15_user,
            (LPVOID *)&CryptoPP__NameValuePairsGetThisPointer15_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameValuePairsGetThisPointer15_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::NameValuePairs::*)(struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>**))&CryptoPP::NameValuePairs::GetThisPointer) },
        {   (LPVOID)0x140464560L,
            (LPVOID *)&CryptoPP__NameValuePairsGetValue17_user,
            (LPVOID *)&CryptoPP__NameValuePairsGetValue17_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameValuePairsGetValue17_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::NameValuePairs::*)(char*, struct CryptoPP::ConstByteArrayParameter*))&CryptoPP::NameValuePairs::GetValue) },
        {   (LPVOID)0x1404667e0L,
            (LPVOID *)&CryptoPP__NameValuePairsGetValue19_user,
            (LPVOID *)&CryptoPP__NameValuePairsGetValue19_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameValuePairsGetValue19_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::NameValuePairs::*)(char*, struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*))&CryptoPP::NameValuePairs::GetValue) },
        {   (LPVOID)0x1404692d0L,
            (LPVOID *)&CryptoPP__NameValuePairsGetValue21_user,
            (LPVOID *)&CryptoPP__NameValuePairsGetValue21_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameValuePairsGetValue21_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::NameValuePairs::*)(char*, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>**))&CryptoPP::NameValuePairs::GetValue) },
        {   (LPVOID)0x140469480L,
            (LPVOID *)&CryptoPP__NameValuePairsGetValue23_user,
            (LPVOID *)&CryptoPP__NameValuePairsGetValue23_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameValuePairsGetValue23_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::NameValuePairs::*)(char*, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>*))&CryptoPP::NameValuePairs::GetValue) },
        {   (LPVOID)0x140468dc0L,
            (LPVOID *)&CryptoPP__NameValuePairsGetValue25_user,
            (LPVOID *)&CryptoPP__NameValuePairsGetValue25_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameValuePairsGetValue25_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::NameValuePairs::*)(char*, struct CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >*))&CryptoPP::NameValuePairs::GetValue) },
        {   (LPVOID)0x140469830L,
            (LPVOID *)&CryptoPP__NameValuePairsGetValue27_user,
            (LPVOID *)&CryptoPP__NameValuePairsGetValue27_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameValuePairsGetValue27_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::NameValuePairs::*)(char*, struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*))&CryptoPP::NameValuePairs::GetValue) },
        {   (LPVOID)0x140468d50L,
            (LPVOID *)&CryptoPP__NameValuePairsGetValue29_user,
            (LPVOID *)&CryptoPP__NameValuePairsGetValue29_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameValuePairsGetValue29_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::NameValuePairs::*)(char*, struct CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >*))&CryptoPP::NameValuePairs::GetValue) },
        {   (LPVOID)0x1404697c0L,
            (LPVOID *)&CryptoPP__NameValuePairsGetValue31_user,
            (LPVOID *)&CryptoPP__NameValuePairsGetValue31_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameValuePairsGetValue31_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::NameValuePairs::*)(char*, struct CryptoPP::ECPPoint*))&CryptoPP::NameValuePairs::GetValue) },
        {   (LPVOID)0x140469410L,
            (LPVOID *)&CryptoPP__NameValuePairsGetValue33_user,
            (LPVOID *)&CryptoPP__NameValuePairsGetValue33_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameValuePairsGetValue33_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::NameValuePairs::*)(char*, struct CryptoPP::Integer*))&CryptoPP::NameValuePairs::GetValue) },
        {   (LPVOID)0x140465f30L,
            (LPVOID *)&CryptoPP__NameValuePairsctor_NameValuePairs35_user,
            (LPVOID *)&CryptoPP__NameValuePairsctor_NameValuePairs35_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameValuePairsctor_NameValuePairs35_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::NameValuePairs::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::NameValuePairs::ctor_NameValuePairs) },
        {   (LPVOID)0x14044b080L,
            (LPVOID *)&CryptoPP__NameValuePairsctor_NameValuePairs37_user,
            (LPVOID *)&CryptoPP__NameValuePairsctor_NameValuePairs37_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameValuePairsctor_NameValuePairs37_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::NameValuePairs::*)())&CryptoPP::NameValuePairs::ctor_NameValuePairs) },
        {   (LPVOID)0x14045af00L,
            (LPVOID *)&CryptoPP__NameValuePairsThrowIfTypeMismatch39_user,
            (LPVOID *)&CryptoPP__NameValuePairsThrowIfTypeMismatch39_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameValuePairsThrowIfTypeMismatch39_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::NameValuePairs::*)(char*, struct type_info*, struct type_info*))&CryptoPP::NameValuePairs::ThrowIfTypeMismatch) },
        {   (LPVOID)0x140448b80L,
            (LPVOID *)&CryptoPP__NameValuePairsdtor_NameValuePairs43_user,
            (LPVOID *)&CryptoPP__NameValuePairsdtor_NameValuePairs43_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameValuePairsdtor_NameValuePairs43_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::NameValuePairs::*)())&CryptoPP::NameValuePairs::dtor_NameValuePairs) },
        
        {   (LPVOID)0x14045b5c0L,
            (LPVOID *)&CryptoPP__NameValuePairs__ValueTypeMismatchctor_ValueTypeMismatch2_user,
            (LPVOID *)&CryptoPP__NameValuePairs__ValueTypeMismatchctor_ValueTypeMismatch2_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameValuePairs__ValueTypeMismatchctor_ValueTypeMismatch2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::NameValuePairs::ValueTypeMismatch::*)(struct CryptoPP::NameValuePairs::ValueTypeMismatch*))&CryptoPP::NameValuePairs::ValueTypeMismatch::ctor_ValueTypeMismatch) },
        {   (LPVOID)0x14045b050L,
            (LPVOID *)&CryptoPP__NameValuePairs__ValueTypeMismatchctor_ValueTypeMismatch4_user,
            (LPVOID *)&CryptoPP__NameValuePairs__ValueTypeMismatchctor_ValueTypeMismatch4_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameValuePairs__ValueTypeMismatchctor_ValueTypeMismatch4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::NameValuePairs::ValueTypeMismatch::*)(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, struct type_info*, struct type_info*))&CryptoPP::NameValuePairs::ValueTypeMismatch::ctor_ValueTypeMismatch) },
        {   (LPVOID)0x14045b580L,
            (LPVOID *)&CryptoPP__NameValuePairs__ValueTypeMismatchdtor_ValueTypeMismatch9_user,
            (LPVOID *)&CryptoPP__NameValuePairs__ValueTypeMismatchdtor_ValueTypeMismatch9_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameValuePairs__ValueTypeMismatchdtor_ValueTypeMismatch9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::NameValuePairs::ValueTypeMismatch::*)())&CryptoPP::NameValuePairs::ValueTypeMismatch::dtor_ValueTypeMismatch) },
        
        {   (LPVOID)0x140459a80L,
            (LPVOID *)&CryptoPP__SimpleKeyedTransformationGetAlgorithm2_user,
            (LPVOID *)&CryptoPP__SimpleKeyedTransformationGetAlgorithm2_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyedTransformationGetAlgorithm2_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Algorithm*(CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>::*)())&CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>::GetAlgorithm) },
        {   (LPVOID)0x14045a130L,
            (LPVOID *)&CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_user,
            (LPVOID *)&CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>::*)(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>*))&CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>::ctor_SimpleKeyedTransformation) },
        {   (LPVOID)0x14045c910L,
            (LPVOID *)&CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation6_user,
            (LPVOID *)&CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation6_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>::*)())&CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>::ctor_SimpleKeyedTransformation) },
        {   (LPVOID)0x14044a4c0L,
            (LPVOID *)&CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation8_user,
            (LPVOID *)&CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation8_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation8_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>::*)())&CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>::dtor_SimpleKeyedTransformation) },
        
        {   (LPVOID)0x14046bae0L,
            (LPVOID *)&CryptoPP__RandomPoolCanIncorporateEntropy2_user,
            (LPVOID *)&CryptoPP__RandomPoolCanIncorporateEntropy2_next,
            (LPVOID)cast_pointer_function(CryptoPP__RandomPoolCanIncorporateEntropy2_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::RandomPool::*)())&CryptoPP::RandomPool::CanIncorporateEntropy) },
        {   (LPVOID)0x140625bd0L,
            (LPVOID *)&CryptoPP__RandomPoolIncorporateEntropy3_user,
            (LPVOID *)&CryptoPP__RandomPoolIncorporateEntropy3_next,
            (LPVOID)cast_pointer_function(CryptoPP__RandomPoolIncorporateEntropy3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::RandomPool::*)(uint8_t*, uint64_t))&CryptoPP::RandomPool::IncorporateEntropy) },
        {   (LPVOID)0x140625a80L,
            (LPVOID *)&CryptoPP__RandomPoolctor_RandomPool4_user,
            (LPVOID *)&CryptoPP__RandomPoolctor_RandomPool4_next,
            (LPVOID)cast_pointer_function(CryptoPP__RandomPoolctor_RandomPool4_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::RandomPool::*)())&CryptoPP::RandomPool::ctor_RandomPool) },
        {   (LPVOID)0x14046bb60L,
            (LPVOID *)&CryptoPP__RandomPooldtor_RandomPool6_user,
            (LPVOID *)&CryptoPP__RandomPooldtor_RandomPool6_next,
            (LPVOID)cast_pointer_function(CryptoPP__RandomPooldtor_RandomPool6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::RandomPool::*)())&CryptoPP::RandomPool::dtor_RandomPool) },
        
        {   (LPVOID)0x14046ba20L,
            (LPVOID *)&CryptoPP__AutoSeededRandomPoolctor_AutoSeededRandomPool2_user,
            (LPVOID *)&CryptoPP__AutoSeededRandomPoolctor_AutoSeededRandomPool2_next,
            (LPVOID)cast_pointer_function(CryptoPP__AutoSeededRandomPoolctor_AutoSeededRandomPool2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AutoSeededRandomPool::*)(bool, unsigned int))&CryptoPP::AutoSeededRandomPool::ctor_AutoSeededRandomPool) },
        {   (LPVOID)0x1406253c0L,
            (LPVOID *)&CryptoPP__AutoSeededRandomPoolReseed3_user,
            (LPVOID *)&CryptoPP__AutoSeededRandomPoolReseed3_next,
            (LPVOID)cast_pointer_function(CryptoPP__AutoSeededRandomPoolReseed3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AutoSeededRandomPool::*)(bool, unsigned int))&CryptoPP::AutoSeededRandomPool::Reseed) },
        {   (LPVOID)0x14046bcf0L,
            (LPVOID *)&CryptoPP__AutoSeededRandomPooldtor_AutoSeededRandomPool8_user,
            (LPVOID *)&CryptoPP__AutoSeededRandomPooldtor_AutoSeededRandomPool8_next,
            (LPVOID)cast_pointer_function(CryptoPP__AutoSeededRandomPooldtor_AutoSeededRandomPool8_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AutoSeededRandomPool::*)())&CryptoPP::AutoSeededRandomPool::dtor_AutoSeededRandomPool) },
        
        {   (LPVOID)0x140560410L,
            (LPVOID *)&CryptoPP__GeneratableCryptoMaterialctor_GeneratableCryptoMaterial1_user,
            (LPVOID *)&CryptoPP__GeneratableCryptoMaterialctor_GeneratableCryptoMaterial1_next,
            (LPVOID)cast_pointer_function(CryptoPP__GeneratableCryptoMaterialctor_GeneratableCryptoMaterial1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::GeneratableCryptoMaterial::*)(struct CryptoPP::GeneratableCryptoMaterial*))&CryptoPP::GeneratableCryptoMaterial::ctor_GeneratableCryptoMaterial) },
        {   (LPVOID)0x14044c9f0L,
            (LPVOID *)&CryptoPP__GeneratableCryptoMaterialctor_GeneratableCryptoMaterial3_user,
            (LPVOID *)&CryptoPP__GeneratableCryptoMaterialctor_GeneratableCryptoMaterial3_next,
            (LPVOID)cast_pointer_function(CryptoPP__GeneratableCryptoMaterialctor_GeneratableCryptoMaterial3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::GeneratableCryptoMaterial::*)())&CryptoPP::GeneratableCryptoMaterial::ctor_GeneratableCryptoMaterial) },
        {   (LPVOID)0x14044bb80L,
            (LPVOID *)&CryptoPP__GeneratableCryptoMaterialGenerateRandom5_user,
            (LPVOID *)&CryptoPP__GeneratableCryptoMaterialGenerateRandom5_next,
            (LPVOID)cast_pointer_function(CryptoPP__GeneratableCryptoMaterialGenerateRandom5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::GeneratableCryptoMaterial::*)(struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::NameValuePairs*))&CryptoPP::GeneratableCryptoMaterial::GenerateRandom) },
        {   (LPVOID)0x1405f5d60L,
            (LPVOID *)&CryptoPP__GeneratableCryptoMaterialGenerateRandomWithKeySize6_user,
            (LPVOID *)&CryptoPP__GeneratableCryptoMaterialGenerateRandomWithKeySize6_next,
            (LPVOID)cast_pointer_function(CryptoPP__GeneratableCryptoMaterialGenerateRandomWithKeySize6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::GeneratableCryptoMaterial::*)(struct CryptoPP::RandomNumberGenerator*, unsigned int))&CryptoPP::GeneratableCryptoMaterial::GenerateRandomWithKeySize) },
        {   (LPVOID)0x140449f80L,
            (LPVOID *)&CryptoPP__GeneratableCryptoMaterialdtor_GeneratableCryptoMaterial10_user,
            (LPVOID *)&CryptoPP__GeneratableCryptoMaterialdtor_GeneratableCryptoMaterial10_next,
            (LPVOID)cast_pointer_function(CryptoPP__GeneratableCryptoMaterialdtor_GeneratableCryptoMaterial10_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::GeneratableCryptoMaterial::*)())&CryptoPP::GeneratableCryptoMaterial::dtor_GeneratableCryptoMaterial) },
        
        {   (LPVOID)0x1405601e0L,
            (LPVOID *)&CryptoPP__CryptoParametersctor_CryptoParameters1_user,
            (LPVOID *)&CryptoPP__CryptoParametersctor_CryptoParameters1_next,
            (LPVOID)cast_pointer_function(CryptoPP__CryptoParametersctor_CryptoParameters1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::CryptoParameters::*)(struct CryptoPP::CryptoParameters*))&CryptoPP::CryptoParameters::ctor_CryptoParameters) },
        {   (LPVOID)0x14045b850L,
            (LPVOID *)&CryptoPP__CryptoParametersctor_CryptoParameters3_user,
            (LPVOID *)&CryptoPP__CryptoParametersctor_CryptoParameters3_next,
            (LPVOID)cast_pointer_function(CryptoPP__CryptoParametersctor_CryptoParameters3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CryptoParameters::*)())&CryptoPP::CryptoParameters::ctor_CryptoParameters) },
        {   (LPVOID)0x14044a330L,
            (LPVOID *)&CryptoPP__CryptoParametersdtor_CryptoParameters7_user,
            (LPVOID *)&CryptoPP__CryptoParametersdtor_CryptoParameters7_next,
            (LPVOID)cast_pointer_function(CryptoPP__CryptoParametersdtor_CryptoParameters7_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CryptoParameters::*)())&CryptoPP::CryptoParameters::dtor_CryptoParameters) },
        
        {   (LPVOID)0x140459480L,
            (LPVOID *)&CryptoPP__DL_GroupParametersctor_DL_GroupParameters2_user,
            (LPVOID *)&CryptoPP__DL_GroupParametersctor_DL_GroupParameters2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParametersctor_DL_GroupParameters2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::*)())&CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::ctor_DL_GroupParameters) },
        {   (LPVOID)0x140450410L,
            (LPVOID *)&CryptoPP__DL_GroupParametersExponentiateBase4_user,
            (LPVOID *)&CryptoPP__DL_GroupParametersExponentiateBase4_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParametersExponentiateBase4_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ECPPoint*(CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::*)(struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*))&CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::ExponentiateBase) },
        {   (LPVOID)0x1404504d0L,
            (LPVOID *)&CryptoPP__DL_GroupParametersExponentiateElement6_user,
            (LPVOID *)&CryptoPP__DL_GroupParametersExponentiateElement6_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParametersExponentiateElement6_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ECPPoint*(CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::*)(struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*))&CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::ExponentiateElement) },
        {   (LPVOID)0x1404549c0L,
            (LPVOID *)&CryptoPP__DL_GroupParametersGetCofactor8_user,
            (LPVOID *)&CryptoPP__DL_GroupParametersGetCofactor8_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParametersGetCofactor8_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::*)(struct CryptoPP::Integer*))&CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::GetCofactor) },
        {   (LPVOID)0x140450680L,
            (LPVOID *)&CryptoPP__DL_GroupParametersGetGroupOrder10_user,
            (LPVOID *)&CryptoPP__DL_GroupParametersGetGroupOrder10_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParametersGetGroupOrder10_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::*)(struct CryptoPP::Integer*))&CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::GetGroupOrder) },
        {   (LPVOID)0x1404502e0L,
            (LPVOID *)&CryptoPP__DL_GroupParametersGetSubgroupGenerator12_user,
            (LPVOID *)&CryptoPP__DL_GroupParametersGetSubgroupGenerator12_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParametersGetSubgroupGenerator12_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ECPPoint*(CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::*)())&CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::GetSubgroupGenerator) },
        {   (LPVOID)0x140469b00L,
            (LPVOID *)&CryptoPP__DL_GroupParametersGetVoidValue14_user,
            (LPVOID *)&CryptoPP__DL_GroupParametersGetVoidValue14_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParametersGetVoidValue14_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::*)(char*, struct type_info*, void*))&CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::GetVoidValue) },
        {   (LPVOID)0x14046a5e0L,
            (LPVOID *)&CryptoPP__DL_GroupParametersLoadPrecomputation16_user,
            (LPVOID *)&CryptoPP__DL_GroupParametersLoadPrecomputation16_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParametersLoadPrecomputation16_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::LoadPrecomputation) },
        {   (LPVOID)0x1404699c0L,
            (LPVOID *)&CryptoPP__DL_GroupParametersPrecompute18_user,
            (LPVOID *)&CryptoPP__DL_GroupParametersPrecompute18_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParametersPrecompute18_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::*)(unsigned int))&CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::Precompute) },
        {   (LPVOID)0x14046acc0L,
            (LPVOID *)&CryptoPP__DL_GroupParametersSavePrecomputation20_user,
            (LPVOID *)&CryptoPP__DL_GroupParametersSavePrecomputation20_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParametersSavePrecomputation20_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::SavePrecomputation) },
        {   (LPVOID)0x140450370L,
            (LPVOID *)&CryptoPP__DL_GroupParametersSetSubgroupGenerator22_user,
            (LPVOID *)&CryptoPP__DL_GroupParametersSetSubgroupGenerator22_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParametersSetSubgroupGenerator22_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::*)(struct CryptoPP::ECPPoint*))&CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::SetSubgroupGenerator) },
        {   (LPVOID)0x140469ad0L,
            (LPVOID *)&CryptoPP__DL_GroupParametersSupportsPrecomputation24_user,
            (LPVOID *)&CryptoPP__DL_GroupParametersSupportsPrecomputation24_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParametersSupportsPrecomputation24_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::*)())&CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::SupportsPrecomputation) },
        {   (LPVOID)0x14046a920L,
            (LPVOID *)&CryptoPP__DL_GroupParametersValidate26_user,
            (LPVOID *)&CryptoPP__DL_GroupParametersValidate26_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParametersValidate26_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::*)(struct CryptoPP::RandomNumberGenerator*, unsigned int))&CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::Validate) },
        {   (LPVOID)0x140449f90L,
            (LPVOID *)&CryptoPP__DL_GroupParametersdtor_DL_GroupParameters30_user,
            (LPVOID *)&CryptoPP__DL_GroupParametersdtor_DL_GroupParameters30_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParametersdtor_DL_GroupParameters30_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::*)())&CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>::dtor_DL_GroupParameters) },
        
        {   (LPVOID)0x14044c040L,
            (LPVOID *)&CryptoPP__DL_Keyctor_DL_Key2_user,
            (LPVOID *)&CryptoPP__DL_Keyctor_DL_Key2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_Keyctor_DL_Key2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_Key<CryptoPP::ECPPoint>::*)())&CryptoPP::DL_Key<CryptoPP::ECPPoint>::ctor_DL_Key) },
        
        {   (LPVOID)0x1404661e0L,
            (LPVOID *)&CryptoPP__DL_PrivateKeyAssignFrom2_user,
            (LPVOID *)&CryptoPP__DL_PrivateKeyAssignFrom2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_PrivateKeyAssignFrom2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>::AssignFrom) },
        {   (LPVOID)0x14044b400L,
            (LPVOID *)&CryptoPP__DL_PrivateKeyctor_DL_PrivateKey4_user,
            (LPVOID *)&CryptoPP__DL_PrivateKeyctor_DL_PrivateKey4_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_PrivateKeyctor_DL_PrivateKey4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>::*)())&CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>::ctor_DL_PrivateKey) },
        {   (LPVOID)0x1404660b0L,
            (LPVOID *)&CryptoPP__DL_PrivateKeyGetVoidValue6_user,
            (LPVOID *)&CryptoPP__DL_PrivateKeyGetVoidValue6_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_PrivateKeyGetVoidValue6_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>::*)(char*, struct type_info*, void*))&CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>::GetVoidValue) },
        {   (LPVOID)0x140467bb0L,
            (LPVOID *)&CryptoPP__DL_PrivateKeyMakePublicKey8_user,
            (LPVOID *)&CryptoPP__DL_PrivateKeyMakePublicKey8_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_PrivateKeyMakePublicKey8_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>::*)(struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*))&CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>::MakePublicKey) },
        
        {   (LPVOID)0x14055fdf0L,
            (LPVOID *)&CryptoPP__ASN1Objectctor_ASN1Object1_user,
            (LPVOID *)&CryptoPP__ASN1Objectctor_ASN1Object1_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1Objectctor_ASN1Object1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ASN1Object::*)(struct CryptoPP::ASN1Object*))&CryptoPP::ASN1Object::ctor_ASN1Object) },
        {   (LPVOID)0x14044c870L,
            (LPVOID *)&CryptoPP__ASN1Objectctor_ASN1Object3_user,
            (LPVOID *)&CryptoPP__ASN1Objectctor_ASN1Object3_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1Objectctor_ASN1Object3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ASN1Object::*)())&CryptoPP::ASN1Object::ctor_ASN1Object) },
        {   (LPVOID)0x14044ae80L,
            (LPVOID *)&CryptoPP__ASN1ObjectBEREncode5_user,
            (LPVOID *)&CryptoPP__ASN1ObjectBEREncode5_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1ObjectBEREncode5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ASN1Object::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::ASN1Object::BEREncode) },
        {   (LPVOID)0x140448e50L,
            (LPVOID *)&CryptoPP__ASN1Objectdtor_ASN1Object9_user,
            (LPVOID *)&CryptoPP__ASN1Objectdtor_ASN1Object9_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1Objectdtor_ASN1Object9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ASN1Object::*)())&CryptoPP::ASN1Object::dtor_ASN1Object) },
        
        {   (LPVOID)0x14054b570L,
            (LPVOID *)&CryptoPP__Waitablector_Waitable1_user,
            (LPVOID *)&CryptoPP__Waitablector_Waitable1_next,
            (LPVOID)cast_pointer_function(CryptoPP__Waitablector_Waitable1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Waitable::*)(struct CryptoPP::Waitable*))&CryptoPP::Waitable::ctor_Waitable) },
        {   (LPVOID)0x140453d70L,
            (LPVOID *)&CryptoPP__Waitablector_Waitable3_user,
            (LPVOID *)&CryptoPP__Waitablector_Waitable3_next,
            (LPVOID)cast_pointer_function(CryptoPP__Waitablector_Waitable3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Waitable::*)())&CryptoPP::Waitable::ctor_Waitable) },
        {   (LPVOID)0x14044d9a0L,
            (LPVOID *)&CryptoPP__Waitabledtor_Waitable5_user,
            (LPVOID *)&CryptoPP__Waitabledtor_Waitable5_next,
            (LPVOID)cast_pointer_function(CryptoPP__Waitabledtor_Waitable5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Waitable::*)())&CryptoPP::Waitable::dtor_Waitable) },
        
        {   (LPVOID)0x1405f5210L,
            (LPVOID *)&CryptoPP__BufferedTransformationAnyMessages1_user,
            (LPVOID *)&CryptoPP__BufferedTransformationAnyMessages1_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationAnyMessages1_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::BufferedTransformation::*)())&CryptoPP::BufferedTransformation::AnyMessages) },
        {   (LPVOID)0x1405f4ca0L,
            (LPVOID *)&CryptoPP__BufferedTransformationAnyRetrievable2_user,
            (LPVOID *)&CryptoPP__BufferedTransformationAnyRetrievable2_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationAnyRetrievable2_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::BufferedTransformation::*)())&CryptoPP::BufferedTransformation::AnyRetrievable) },
        {   (LPVOID)0x1405f5cb0L,
            (LPVOID *)&CryptoPP__BufferedTransformationAttach3_user,
            (LPVOID *)&CryptoPP__BufferedTransformationAttach3_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationAttach3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BufferedTransformation::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::BufferedTransformation::Attach) },
        {   (LPVOID)0x140453830L,
            (LPVOID *)&CryptoPP__BufferedTransformationAttachable5_user,
            (LPVOID *)&CryptoPP__BufferedTransformationAttachable5_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationAttachable5_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::BufferedTransformation::*)())&CryptoPP::BufferedTransformation::Attachable) },
        {   (LPVOID)0x140453840L,
            (LPVOID *)&CryptoPP__BufferedTransformationAttachedTransformation8_user,
            (LPVOID *)&CryptoPP__BufferedTransformationAttachedTransformation8_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationAttachedTransformation8_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::BufferedTransformation*(CryptoPP::BufferedTransformation::*)())&CryptoPP::BufferedTransformation::AttachedTransformation) },
        {   (LPVOID)0x1404538c0L,
            (LPVOID *)&CryptoPP__BufferedTransformationAttachedTransformation9_user,
            (LPVOID *)&CryptoPP__BufferedTransformationAttachedTransformation9_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationAttachedTransformation9_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::BufferedTransformation*(CryptoPP::BufferedTransformation::*)())&CryptoPP::BufferedTransformation::AttachedTransformation) },
        {   (LPVOID)0x14054b500L,
            (LPVOID *)&CryptoPP__BufferedTransformationctor_BufferedTransformation10_user,
            (LPVOID *)&CryptoPP__BufferedTransformationctor_BufferedTransformation10_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationctor_BufferedTransformation10_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::BufferedTransformation::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::BufferedTransformation::ctor_BufferedTransformation) },
        {   (LPVOID)0x140453d10L,
            (LPVOID *)&CryptoPP__BufferedTransformationctor_BufferedTransformation12_user,
            (LPVOID *)&CryptoPP__BufferedTransformationctor_BufferedTransformation12_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationctor_BufferedTransformation12_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BufferedTransformation::*)())&CryptoPP::BufferedTransformation::ctor_BufferedTransformation) },
        {   (LPVOID)0x14044ce80L,
            (LPVOID *)&CryptoPP__BufferedTransformationCanModifyInput14_user,
            (LPVOID *)&CryptoPP__BufferedTransformationCanModifyInput14_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationCanModifyInput14_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::BufferedTransformation::*)())&CryptoPP::BufferedTransformation::CanModifyInput) },
        {   (LPVOID)0x14044ce50L,
            (LPVOID *)&CryptoPP__BufferedTransformationCreatePutSpace16_user,
            (LPVOID *)&CryptoPP__BufferedTransformationCreatePutSpace16_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationCreatePutSpace16_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::BufferedTransformation::*)(uint64_t*))&CryptoPP::BufferedTransformation::CreatePutSpace) },
        {   (LPVOID)0x140453910L,
            (LPVOID *)&CryptoPP__BufferedTransformationDetach18_user,
            (LPVOID *)&CryptoPP__BufferedTransformationDetach18_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationDetach18_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BufferedTransformation::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::BufferedTransformation::Detach) },
        {   (LPVOID)0x1405f4870L,
            (LPVOID *)&CryptoPP__BufferedTransformationFlush19_user,
            (LPVOID *)&CryptoPP__BufferedTransformationFlush19_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationFlush19_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::BufferedTransformation::*)(bool, int, bool))&CryptoPP::BufferedTransformation::Flush) },
        {   (LPVOID)0x1405f4d30L,
            (LPVOID *)&CryptoPP__BufferedTransformationGet20_user,
            (LPVOID *)&CryptoPP__BufferedTransformationGet20_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationGet20_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::BufferedTransformation::*)(uint8_t*))&CryptoPP::BufferedTransformation::Get) },
        {   (LPVOID)0x1405f4dc0L,
            (LPVOID *)&CryptoPP__BufferedTransformationGet21_user,
            (LPVOID *)&CryptoPP__BufferedTransformationGet21_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationGet21_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::BufferedTransformation::*)(uint8_t*, uint64_t))&CryptoPP::BufferedTransformation::Get) },
        {   (LPVOID)0x14054b930L,
            (LPVOID *)&CryptoPP__BufferedTransformationGetAutoSignalPropagation22_user,
            (LPVOID *)&CryptoPP__BufferedTransformationGetAutoSignalPropagation22_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationGetAutoSignalPropagation22_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::BufferedTransformation::*)())&CryptoPP::BufferedTransformation::GetAutoSignalPropagation) },
        {   (LPVOID)0x1405f4700L,
            (LPVOID *)&CryptoPP__BufferedTransformationGetMaxWaitObjectCount23_user,
            (LPVOID *)&CryptoPP__BufferedTransformationGetMaxWaitObjectCount23_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationGetMaxWaitObjectCount23_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::BufferedTransformation::*)())&CryptoPP::BufferedTransformation::GetMaxWaitObjectCount) },
        {   (LPVOID)0x1405f52a0L,
            (LPVOID *)&CryptoPP__BufferedTransformationGetNextMessage24_user,
            (LPVOID *)&CryptoPP__BufferedTransformationGetNextMessage24_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationGetNextMessage24_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::BufferedTransformation::*)())&CryptoPP::BufferedTransformation::GetNextMessage) },
        {   (LPVOID)0x14044cf10L,
            (LPVOID *)&CryptoPP__BufferedTransformationGetNextMessageSeries26_user,
            (LPVOID *)&CryptoPP__BufferedTransformationGetNextMessageSeries26_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationGetNextMessageSeries26_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::BufferedTransformation::*)())&CryptoPP::BufferedTransformation::GetNextMessageSeries) },
        {   (LPVOID)0x1405f4780L,
            (LPVOID *)&CryptoPP__BufferedTransformationGetWaitObjects27_user,
            (LPVOID *)&CryptoPP__BufferedTransformationGetWaitObjects27_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationGetWaitObjects27_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BufferedTransformation::*)(CryptoPP::WaitObjectContainer*, CryptoPP::CallStack*))&CryptoPP::BufferedTransformation::GetWaitObjects) },
        {   (LPVOID)0x1405f5bf0L,
            (LPVOID *)&CryptoPP__BufferedTransformationGetWord1628_user,
            (LPVOID *)&CryptoPP__BufferedTransformationGetWord1628_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationGetWord1628_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::BufferedTransformation::*)(uint16_t*, struct CryptoPP::ByteOrder))&CryptoPP::BufferedTransformation::GetWord16) },
        {   (LPVOID)0x1405f5c50L,
            (LPVOID *)&CryptoPP__BufferedTransformationGetWord3229_user,
            (LPVOID *)&CryptoPP__BufferedTransformationGetWord3229_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationGetWord3229_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::BufferedTransformation::*)(unsigned int*, struct CryptoPP::ByteOrder))&CryptoPP::BufferedTransformation::GetWord32) },
        {   (LPVOID)0x1405f4800L,
            (LPVOID *)&CryptoPP__BufferedTransformationInitialize30_user,
            (LPVOID *)&CryptoPP__BufferedTransformationInitialize30_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationInitialize30_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BufferedTransformation::*)(struct CryptoPP::NameValuePairs*, int))&CryptoPP::BufferedTransformation::Initialize) },
        {   (LPVOID)0x1405f77d0L,
            (LPVOID *)&CryptoPP__BufferedTransformationIsolatedInitialize31_user,
            (LPVOID *)&CryptoPP__BufferedTransformationIsolatedInitialize31_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationIsolatedInitialize31_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BufferedTransformation::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::BufferedTransformation::IsolatedInitialize) },
        {   (LPVOID)0x14054b910L,
            (LPVOID *)&CryptoPP__BufferedTransformationIsolatedMessageSeriesEnd32_user,
            (LPVOID *)&CryptoPP__BufferedTransformationIsolatedMessageSeriesEnd32_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationIsolatedMessageSeriesEnd32_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::BufferedTransformation::*)(bool))&CryptoPP::BufferedTransformation::IsolatedMessageSeriesEnd) },
        {   (LPVOID)0x1405f4c20L,
            (LPVOID *)&CryptoPP__BufferedTransformationMaxRetrievable33_user,
            (LPVOID *)&CryptoPP__BufferedTransformationMaxRetrievable33_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationMaxRetrievable33_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::BufferedTransformation::*)())&CryptoPP::BufferedTransformation::MaxRetrievable) },
        {   (LPVOID)0x14054f440L,
            (LPVOID *)&CryptoPP__BufferedTransformationMessageEnd34_user,
            (LPVOID *)&CryptoPP__BufferedTransformationMessageEnd34_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationMessageEnd34_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::BufferedTransformation::*)(int, bool))&CryptoPP::BufferedTransformation::MessageEnd) },
        {   (LPVOID)0x1405f48f0L,
            (LPVOID *)&CryptoPP__BufferedTransformationMessageSeriesEnd35_user,
            (LPVOID *)&CryptoPP__BufferedTransformationMessageSeriesEnd35_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationMessageSeriesEnd35_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::BufferedTransformation::*)(int, bool))&CryptoPP::BufferedTransformation::MessageSeriesEnd) },
        {   (LPVOID)0x14044cf70L,
            (LPVOID *)&CryptoPP__BufferedTransformationNumberOfMessageSeries37_user,
            (LPVOID *)&CryptoPP__BufferedTransformationNumberOfMessageSeries37_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationNumberOfMessageSeries37_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::BufferedTransformation::*)())&CryptoPP::BufferedTransformation::NumberOfMessageSeries) },
        {   (LPVOID)0x1405f5190L,
            (LPVOID *)&CryptoPP__BufferedTransformationNumberOfMessages38_user,
            (LPVOID *)&CryptoPP__BufferedTransformationNumberOfMessages38_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationNumberOfMessages38_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::BufferedTransformation::*)())&CryptoPP::BufferedTransformation::NumberOfMessages) },
        {   (LPVOID)0x14044cf20L,
            (LPVOID *)&CryptoPP__BufferedTransformationNumberOfMessagesInThisSeries40_user,
            (LPVOID *)&CryptoPP__BufferedTransformationNumberOfMessagesInThisSeries40_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationNumberOfMessagesInThisSeries40_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::BufferedTransformation::*)())&CryptoPP::BufferedTransformation::NumberOfMessagesInThisSeries) },
        {   (LPVOID)0x1405f4ee0L,
            (LPVOID *)&CryptoPP__BufferedTransformationPeek41_user,
            (LPVOID *)&CryptoPP__BufferedTransformationPeek41_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationPeek41_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::BufferedTransformation::*)(uint8_t*))&CryptoPP::BufferedTransformation::Peek) },
        {   (LPVOID)0x1405f4f70L,
            (LPVOID *)&CryptoPP__BufferedTransformationPeek42_user,
            (LPVOID *)&CryptoPP__BufferedTransformationPeek42_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationPeek42_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::BufferedTransformation::*)(uint8_t*, uint64_t))&CryptoPP::BufferedTransformation::Peek) },
        {   (LPVOID)0x1405f5aa0L,
            (LPVOID *)&CryptoPP__BufferedTransformationPeekWord1643_user,
            (LPVOID *)&CryptoPP__BufferedTransformationPeekWord1643_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationPeekWord1643_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::BufferedTransformation::*)(uint16_t*, struct CryptoPP::ByteOrder))&CryptoPP::BufferedTransformation::PeekWord16) },
        {   (LPVOID)0x1405f5b30L,
            (LPVOID *)&CryptoPP__BufferedTransformationPeekWord3244_user,
            (LPVOID *)&CryptoPP__BufferedTransformationPeekWord3244_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationPeekWord3244_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::BufferedTransformation::*)(unsigned int*, struct CryptoPP::ByteOrder))&CryptoPP::BufferedTransformation::PeekWord32) },
        {   (LPVOID)0x14054b8c0L,
            (LPVOID *)&CryptoPP__BufferedTransformationPut45_user,
            (LPVOID *)&CryptoPP__BufferedTransformationPut45_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationPut45_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::BufferedTransformation::*)(uint8_t*, uint64_t, bool))&CryptoPP::BufferedTransformation::Put) },
        {   (LPVOID)0x14054f400L,
            (LPVOID *)&CryptoPP__BufferedTransformationPut46_user,
            (LPVOID *)&CryptoPP__BufferedTransformationPut46_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationPut46_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::BufferedTransformation::*)(uint8_t, bool))&CryptoPP::BufferedTransformation::Put) },
        {   (LPVOID)0x140600310L,
            (LPVOID *)&CryptoPP__BufferedTransformationPutModifiable47_user,
            (LPVOID *)&CryptoPP__BufferedTransformationPutModifiable47_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationPutModifiable47_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::BufferedTransformation::*)(uint8_t*, uint64_t, bool))&CryptoPP::BufferedTransformation::PutModifiable) },
        {   (LPVOID)0x14044ce90L,
            (LPVOID *)&CryptoPP__BufferedTransformationPutModifiable249_user,
            (LPVOID *)&CryptoPP__BufferedTransformationPutModifiable249_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationPutModifiable249_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::BufferedTransformation::*)(char*, uint64_t, int, bool))&CryptoPP::BufferedTransformation::PutModifiable2) },
        {   (LPVOID)0x1405f5a00L,
            (LPVOID *)&CryptoPP__BufferedTransformationPutWord1650_user,
            (LPVOID *)&CryptoPP__BufferedTransformationPutWord1650_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationPutWord1650_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::BufferedTransformation::*)(uint16_t, struct CryptoPP::ByteOrder, bool))&CryptoPP::BufferedTransformation::PutWord16) },
        {   (LPVOID)0x1405f5a50L,
            (LPVOID *)&CryptoPP__BufferedTransformationPutWord3251_user,
            (LPVOID *)&CryptoPP__BufferedTransformationPutWord3251_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationPutWord3251_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::BufferedTransformation::*)(unsigned int, struct CryptoPP::ByteOrder, bool))&CryptoPP::BufferedTransformation::PutWord32) },
        {   (LPVOID)0x14054b920L,
            (LPVOID *)&CryptoPP__BufferedTransformationSetAutoSignalPropagation52_user,
            (LPVOID *)&CryptoPP__BufferedTransformationSetAutoSignalPropagation52_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationSetAutoSignalPropagation52_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BufferedTransformation::*)(int))&CryptoPP::BufferedTransformation::SetAutoSignalPropagation) },
        {   (LPVOID)0x1405f5090L,
            (LPVOID *)&CryptoPP__BufferedTransformationSkip53_user,
            (LPVOID *)&CryptoPP__BufferedTransformationSkip53_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationSkip53_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::BufferedTransformation::*)(uint64_t))&CryptoPP::BufferedTransformation::Skip) },
        {   (LPVOID)0x1405f5600L,
            (LPVOID *)&CryptoPP__BufferedTransformationSkipAll54_user,
            (LPVOID *)&CryptoPP__BufferedTransformationSkipAll54_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationSkipAll54_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BufferedTransformation::*)())&CryptoPP::BufferedTransformation::SkipAll) },
        {   (LPVOID)0x1405f5340L,
            (LPVOID *)&CryptoPP__BufferedTransformationSkipMessages55_user,
            (LPVOID *)&CryptoPP__BufferedTransformationSkipMessages55_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationSkipMessages55_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::BufferedTransformation::*)(unsigned int))&CryptoPP::BufferedTransformation::SkipMessages) },
        {   (LPVOID)0x1405f5120L,
            (LPVOID *)&CryptoPP__BufferedTransformationTotalBytesRetrievable56_user,
            (LPVOID *)&CryptoPP__BufferedTransformationTotalBytesRetrievable56_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationTotalBytesRetrievable56_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::BufferedTransformation::*)())&CryptoPP::BufferedTransformation::TotalBytesRetrievable) },
        {   (LPVOID)0x14044d8e0L,
            (LPVOID *)&CryptoPP__BufferedTransformationdtor_BufferedTransformation58_user,
            (LPVOID *)&CryptoPP__BufferedTransformationdtor_BufferedTransformation58_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformationdtor_BufferedTransformation58_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BufferedTransformation::*)())&CryptoPP::BufferedTransformation::dtor_BufferedTransformation) },
        
        {   (LPVOID)0x1405feb60L,
            (LPVOID *)&CryptoPP__BufferedTransformation__BlockingInputOnlyctor_BlockingInputOnly1_user,
            (LPVOID *)&CryptoPP__BufferedTransformation__BlockingInputOnlyctor_BlockingInputOnly1_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformation__BlockingInputOnlyctor_BlockingInputOnly1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::BufferedTransformation::BlockingInputOnly::*)(struct CryptoPP::BufferedTransformation::BlockingInputOnly*))&CryptoPP::BufferedTransformation::BlockingInputOnly::ctor_BlockingInputOnly) },
        {   (LPVOID)0x140600460L,
            (LPVOID *)&CryptoPP__BufferedTransformation__BlockingInputOnlydtor_BlockingInputOnly2_user,
            (LPVOID *)&CryptoPP__BufferedTransformation__BlockingInputOnlydtor_BlockingInputOnly2_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformation__BlockingInputOnlydtor_BlockingInputOnly2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::BufferedTransformation::BlockingInputOnly::*)())&CryptoPP::BufferedTransformation::BlockingInputOnly::dtor_BlockingInputOnly) },
        
        {   (LPVOID)0x1405f6a10L,
            (LPVOID *)&CryptoPP__BufferedTransformation__NoChannelSupportctor_NoChannelSupport1_user,
            (LPVOID *)&CryptoPP__BufferedTransformation__NoChannelSupportctor_NoChannelSupport1_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformation__NoChannelSupportctor_NoChannelSupport1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::BufferedTransformation::NoChannelSupport::*)(struct CryptoPP::BufferedTransformation::NoChannelSupport*))&CryptoPP::BufferedTransformation::NoChannelSupport::ctor_NoChannelSupport) },
        {   (LPVOID)0x1405f79e0L,
            (LPVOID *)&CryptoPP__BufferedTransformation__NoChannelSupportctor_NoChannelSupport2_user,
            (LPVOID *)&CryptoPP__BufferedTransformation__NoChannelSupportctor_NoChannelSupport2_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformation__NoChannelSupportctor_NoChannelSupport2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::BufferedTransformation::NoChannelSupport::*)())&CryptoPP::BufferedTransformation::NoChannelSupport::ctor_NoChannelSupport) },
        {   (LPVOID)0x1405f7b70L,
            (LPVOID *)&CryptoPP__BufferedTransformation__NoChannelSupportdtor_NoChannelSupport3_user,
            (LPVOID *)&CryptoPP__BufferedTransformation__NoChannelSupportdtor_NoChannelSupport3_next,
            (LPVOID)cast_pointer_function(CryptoPP__BufferedTransformation__NoChannelSupportdtor_NoChannelSupport3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::BufferedTransformation::NoChannelSupport::*)())&CryptoPP::BufferedTransformation::NoChannelSupport::dtor_NoChannelSupport) },
        
        {   (LPVOID)0x140633b10L,
            (LPVOID *)&CryptoPP__PrivateKeyctor_PrivateKey1_user,
            (LPVOID *)&CryptoPP__PrivateKeyctor_PrivateKey1_next,
            (LPVOID)cast_pointer_function(CryptoPP__PrivateKeyctor_PrivateKey1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PrivateKey::*)(struct CryptoPP::PrivateKey*))&CryptoPP::PrivateKey::ctor_PrivateKey) },
        {   (LPVOID)0x14044c880L,
            (LPVOID *)&CryptoPP__PrivateKeyctor_PrivateKey3_user,
            (LPVOID *)&CryptoPP__PrivateKeyctor_PrivateKey3_next,
            (LPVOID)cast_pointer_function(CryptoPP__PrivateKeyctor_PrivateKey3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PrivateKey::*)())&CryptoPP::PrivateKey::ctor_PrivateKey) },
        {   (LPVOID)0x140449c80L,
            (LPVOID *)&CryptoPP__PrivateKeydtor_PrivateKey7_user,
            (LPVOID *)&CryptoPP__PrivateKeydtor_PrivateKey7_next,
            (LPVOID)cast_pointer_function(CryptoPP__PrivateKeydtor_PrivateKey7_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PrivateKey::*)())&CryptoPP::PrivateKey::dtor_PrivateKey) },
        
        {   (LPVOID)0x14044c5e0L,
            (LPVOID *)&CryptoPP__ASN1CryptoMaterialctor_ASN1CryptoMaterial2_user,
            (LPVOID *)&CryptoPP__ASN1CryptoMaterialctor_ASN1CryptoMaterial2_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1CryptoMaterialctor_ASN1CryptoMaterial2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ASN1CryptoMaterial<CryptoPP::PrivateKey>::*)())&CryptoPP::ASN1CryptoMaterial<CryptoPP::PrivateKey>::ctor_ASN1CryptoMaterial) },
        {   (LPVOID)0x14046a3e0L,
            (LPVOID *)&CryptoPP__ASN1CryptoMaterialLoad4_user,
            (LPVOID *)&CryptoPP__ASN1CryptoMaterialLoad4_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1CryptoMaterialLoad4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ASN1CryptoMaterial<CryptoPP::PrivateKey>::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::ASN1CryptoMaterial<CryptoPP::PrivateKey>::Load) },
        {   (LPVOID)0x14046a7d0L,
            (LPVOID *)&CryptoPP__ASN1CryptoMaterialSave6_user,
            (LPVOID *)&CryptoPP__ASN1CryptoMaterialSave6_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1CryptoMaterialSave6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ASN1CryptoMaterial<CryptoPP::PrivateKey>::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::ASN1CryptoMaterial<CryptoPP::PrivateKey>::Save) },
        {   (LPVOID)0x1404497a0L,
            (LPVOID *)&CryptoPP__ASN1CryptoMaterialdtor_ASN1CryptoMaterial10_user,
            (LPVOID *)&CryptoPP__ASN1CryptoMaterialdtor_ASN1CryptoMaterial10_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1CryptoMaterialdtor_ASN1CryptoMaterial10_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ASN1CryptoMaterial<CryptoPP::PrivateKey>::*)())&CryptoPP::ASN1CryptoMaterial<CryptoPP::PrivateKey>::dtor_ASN1CryptoMaterial) },
        
        {   (LPVOID)0x14054acb0L,
            (LPVOID *)&CryptoPP__ByteQueueAnyRetrievable1_user,
            (LPVOID *)&CryptoPP__ByteQueueAnyRetrievable1_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueAnyRetrievable1_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::ByteQueue::*)())&CryptoPP::ByteQueue::AnyRetrievable) },
        {   (LPVOID)0x140548ea0L,
            (LPVOID *)&CryptoPP__ByteQueuector_ByteQueue2_user,
            (LPVOID *)&CryptoPP__ByteQueuector_ByteQueue2_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueuector_ByteQueue2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ByteQueue::*)(struct CryptoPP::ByteQueue*))&CryptoPP::ByteQueue::ctor_ByteQueue) },
        {   (LPVOID)0x140548d20L,
            (LPVOID *)&CryptoPP__ByteQueuector_ByteQueue3_user,
            (LPVOID *)&CryptoPP__ByteQueuector_ByteQueue3_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueuector_ByteQueue3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ByteQueue::*)(uint64_t))&CryptoPP::ByteQueue::ctor_ByteQueue) },
        {   (LPVOID)0x140549540L,
            (LPVOID *)&CryptoPP__ByteQueueCleanupUsedNodes4_user,
            (LPVOID *)&CryptoPP__ByteQueueCleanupUsedNodes4_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueCleanupUsedNodes4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ByteQueue::*)())&CryptoPP::ByteQueue::CleanupUsedNodes) },
        {   (LPVOID)0x1405492f0L,
            (LPVOID *)&CryptoPP__ByteQueueClear5_user,
            (LPVOID *)&CryptoPP__ByteQueueClear5_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueClear5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ByteQueue::*)())&CryptoPP::ByteQueue::Clear) },
        {   (LPVOID)0x140548f20L,
            (LPVOID *)&CryptoPP__ByteQueueCopyFrom6_user,
            (LPVOID *)&CryptoPP__ByteQueueCopyFrom6_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueCopyFrom6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ByteQueue::*)(struct CryptoPP::ByteQueue*))&CryptoPP::ByteQueue::CopyFrom) },
        {   (LPVOID)0x14054a130L,
            (LPVOID *)&CryptoPP__ByteQueueCreatePutSpace7_user,
            (LPVOID *)&CryptoPP__ByteQueueCreatePutSpace7_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueCreatePutSpace7_wrapper),
            (LPVOID)cast_pointer_function((uint8_t*(CryptoPP::ByteQueue::*)(uint64_t*))&CryptoPP::ByteQueue::CreatePutSpace) },
        {   (LPVOID)0x140549210L,
            (LPVOID *)&CryptoPP__ByteQueueCurrentSize8_user,
            (LPVOID *)&CryptoPP__ByteQueueCurrentSize8_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueCurrentSize8_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::ByteQueue::*)())&CryptoPP::ByteQueue::CurrentSize) },
        {   (LPVOID)0x140549140L,
            (LPVOID *)&CryptoPP__ByteQueueDestroy9_user,
            (LPVOID *)&CryptoPP__ByteQueueDestroy9_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueDestroy9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ByteQueue::*)())&CryptoPP::ByteQueue::Destroy) },
        {   (LPVOID)0x1405497f0L,
            (LPVOID *)&CryptoPP__ByteQueueFinalizeLazyPut10_user,
            (LPVOID *)&CryptoPP__ByteQueueFinalizeLazyPut10_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueFinalizeLazyPut10_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ByteQueue::*)())&CryptoPP::ByteQueue::FinalizeLazyPut) },
        {   (LPVOID)0x140549850L,
            (LPVOID *)&CryptoPP__ByteQueueGet11_user,
            (LPVOID *)&CryptoPP__ByteQueueGet11_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueGet11_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::ByteQueue::*)(uint8_t*))&CryptoPP::ByteQueue::Get) },
        {   (LPVOID)0x140549910L,
            (LPVOID *)&CryptoPP__ByteQueueGet12_user,
            (LPVOID *)&CryptoPP__ByteQueueGet12_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueGet12_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::ByteQueue::*)(uint8_t*, uint64_t))&CryptoPP::ByteQueue::Get) },
        {   (LPVOID)0x140549290L,
            (LPVOID *)&CryptoPP__ByteQueueIsEmpty13_user,
            (LPVOID *)&CryptoPP__ByteQueueIsEmpty13_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueIsEmpty13_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::ByteQueue::*)())&CryptoPP::ByteQueue::IsEmpty) },
        {   (LPVOID)0x1405491c0L,
            (LPVOID *)&CryptoPP__ByteQueueIsolatedInitialize14_user,
            (LPVOID *)&CryptoPP__ByteQueueIsolatedInitialize14_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueIsolatedInitialize14_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ByteQueue::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::ByteQueue::IsolatedInitialize) },
        {   (LPVOID)0x140549610L,
            (LPVOID *)&CryptoPP__ByteQueueLazyPut15_user,
            (LPVOID *)&CryptoPP__ByteQueueLazyPut15_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueLazyPut15_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ByteQueue::*)(uint8_t*, uint64_t))&CryptoPP::ByteQueue::LazyPut) },
        {   (LPVOID)0x1405496b0L,
            (LPVOID *)&CryptoPP__ByteQueueLazyPutModifiable16_user,
            (LPVOID *)&CryptoPP__ByteQueueLazyPutModifiable16_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueLazyPutModifiable16_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ByteQueue::*)(uint8_t*, uint64_t))&CryptoPP::ByteQueue::LazyPutModifiable) },
        {   (LPVOID)0x14054ac90L,
            (LPVOID *)&CryptoPP__ByteQueueMaxRetrievable17_user,
            (LPVOID *)&CryptoPP__ByteQueueMaxRetrievable17_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueMaxRetrievable17_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::ByteQueue::*)())&CryptoPP::ByteQueue::MaxRetrievable) },
        {   (LPVOID)0x1405499c0L,
            (LPVOID *)&CryptoPP__ByteQueuePeek18_user,
            (LPVOID *)&CryptoPP__ByteQueuePeek18_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueuePeek18_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::ByteQueue::*)(uint8_t*))&CryptoPP::ByteQueue::Peek) },
        {   (LPVOID)0x140549a30L,
            (LPVOID *)&CryptoPP__ByteQueuePeek19_user,
            (LPVOID *)&CryptoPP__ByteQueuePeek19_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueuePeek19_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::ByteQueue::*)(uint8_t*, uint64_t))&CryptoPP::ByteQueue::Peek) },
        {   (LPVOID)0x1405493b0L,
            (LPVOID *)&CryptoPP__ByteQueuePut220_user,
            (LPVOID *)&CryptoPP__ByteQueuePut220_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueuePut220_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::ByteQueue::*)(uint8_t*, uint64_t, int, bool))&CryptoPP::ByteQueue::Put2) },
        {   (LPVOID)0x140548e30L,
            (LPVOID *)&CryptoPP__ByteQueueSetNodeSize21_user,
            (LPVOID *)&CryptoPP__ByteQueueSetNodeSize21_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueSetNodeSize21_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ByteQueue::*)(uint64_t))&CryptoPP::ByteQueue::SetNodeSize) },
        {   (LPVOID)0x14054a090L,
            (LPVOID *)&CryptoPP__ByteQueueSpy22_user,
            (LPVOID *)&CryptoPP__ByteQueueSpy22_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueSpy22_wrapper),
            (LPVOID)cast_pointer_function((uint8_t*(CryptoPP::ByteQueue::*)(uint64_t*))&CryptoPP::ByteQueue::Spy) },
        {   (LPVOID)0x140549710L,
            (LPVOID *)&CryptoPP__ByteQueueUndoLazyPut23_user,
            (LPVOID *)&CryptoPP__ByteQueueUndoLazyPut23_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueUndoLazyPut23_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ByteQueue::*)(uint64_t))&CryptoPP::ByteQueue::UndoLazyPut) },
        {   (LPVOID)0x140549ee0L,
            (LPVOID *)&CryptoPP__ByteQueueUnget24_user,
            (LPVOID *)&CryptoPP__ByteQueueUnget24_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueUnget24_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ByteQueue::*)(uint8_t*, uint64_t))&CryptoPP::ByteQueue::Unget) },
        {   (LPVOID)0x140549eb0L,
            (LPVOID *)&CryptoPP__ByteQueueUnget25_user,
            (LPVOID *)&CryptoPP__ByteQueueUnget25_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueUnget25_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ByteQueue::*)(uint8_t))&CryptoPP::ByteQueue::Unget) },
        {   (LPVOID)0x14054a4f0L,
            (LPVOID *)&CryptoPP__ByteQueueswap26_user,
            (LPVOID *)&CryptoPP__ByteQueueswap26_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueswap26_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ByteQueue::*)(struct CryptoPP::ByteQueue*))&CryptoPP::ByteQueue::swap) },
        {   (LPVOID)0x1405490d0L,
            (LPVOID *)&CryptoPP__ByteQueuedtor_ByteQueue27_user,
            (LPVOID *)&CryptoPP__ByteQueuedtor_ByteQueue27_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueuedtor_ByteQueue27_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ByteQueue::*)())&CryptoPP::ByteQueue::dtor_ByteQueue) },
        
        {   (LPVOID)0x14054a630L,
            (LPVOID *)&CryptoPP__ByteQueue__WalkerGet1_user,
            (LPVOID *)&CryptoPP__ByteQueue__WalkerGet1_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueue__WalkerGet1_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::ByteQueue::Walker::*)(uint8_t*))&CryptoPP::ByteQueue::Walker::Get) },
        {   (LPVOID)0x14054a6e0L,
            (LPVOID *)&CryptoPP__ByteQueue__WalkerGet2_user,
            (LPVOID *)&CryptoPP__ByteQueue__WalkerGet2_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueue__WalkerGet2_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::ByteQueue::Walker::*)(uint8_t*, uint64_t))&CryptoPP::ByteQueue::Walker::Get) },
        {   (LPVOID)0x14054e370L,
            (LPVOID *)&CryptoPP__ByteQueue__WalkerGetCurrentPosition3_user,
            (LPVOID *)&CryptoPP__ByteQueue__WalkerGetCurrentPosition3_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueue__WalkerGetCurrentPosition3_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::ByteQueue::Walker::*)())&CryptoPP::ByteQueue::Walker::GetCurrentPosition) },
        {   (LPVOID)0x14054a5c0L,
            (LPVOID *)&CryptoPP__ByteQueue__WalkerIsolatedInitialize4_user,
            (LPVOID *)&CryptoPP__ByteQueue__WalkerIsolatedInitialize4_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueue__WalkerIsolatedInitialize4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ByteQueue::Walker::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::ByteQueue::Walker::IsolatedInitialize) },
        {   (LPVOID)0x14054b2a0L,
            (LPVOID *)&CryptoPP__ByteQueue__WalkerMaxRetrievable5_user,
            (LPVOID *)&CryptoPP__ByteQueue__WalkerMaxRetrievable5_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueue__WalkerMaxRetrievable5_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::ByteQueue::Walker::*)())&CryptoPP::ByteQueue::Walker::MaxRetrievable) },
        {   (LPVOID)0x14054a790L,
            (LPVOID *)&CryptoPP__ByteQueue__WalkerPeek6_user,
            (LPVOID *)&CryptoPP__ByteQueue__WalkerPeek6_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueue__WalkerPeek6_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::ByteQueue::Walker::*)(uint8_t*))&CryptoPP::ByteQueue::Walker::Peek) },
        {   (LPVOID)0x14054a840L,
            (LPVOID *)&CryptoPP__ByteQueue__WalkerPeek7_user,
            (LPVOID *)&CryptoPP__ByteQueue__WalkerPeek7_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueue__WalkerPeek7_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::ByteQueue::Walker::*)(uint8_t*, uint64_t))&CryptoPP::ByteQueue::Walker::Peek) },
        {   (LPVOID)0x14054b200L,
            (LPVOID *)&CryptoPP__ByteQueue__Walkerctor_Walker8_user,
            (LPVOID *)&CryptoPP__ByteQueue__Walkerctor_Walker8_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueue__Walkerctor_Walker8_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ByteQueue::Walker::*)(struct CryptoPP::ByteQueue*))&CryptoPP::ByteQueue::Walker::ctor_Walker) },
        {   (LPVOID)0x14054b410L,
            (LPVOID *)&CryptoPP__ByteQueue__Walkerctor_Walker9_user,
            (LPVOID *)&CryptoPP__ByteQueue__Walkerctor_Walker9_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueue__Walkerctor_Walker9_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ByteQueue::Walker::*)(struct CryptoPP::ByteQueue::Walker*))&CryptoPP::ByteQueue::Walker::ctor_Walker) },
        {   (LPVOID)0x14054b310L,
            (LPVOID *)&CryptoPP__ByteQueue__Walkerdtor_Walker10_user,
            (LPVOID *)&CryptoPP__ByteQueue__Walkerdtor_Walker10_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueue__Walkerdtor_Walker10_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ByteQueue::Walker::*)())&CryptoPP::ByteQueue::Walker::dtor_Walker) },
        
        {   (LPVOID)0x14054dce0L,
            (LPVOID *)&CryptoPP__PKCS8PrivateKeyBERDecode1_user,
            (LPVOID *)&CryptoPP__PKCS8PrivateKeyBERDecode1_next,
            (LPVOID)cast_pointer_function(CryptoPP__PKCS8PrivateKeyBERDecode1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PKCS8PrivateKey::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::PKCS8PrivateKey::BERDecode) },
        {   (LPVOID)0x14044c260L,
            (LPVOID *)&CryptoPP__PKCS8PrivateKeyBERDecodeAlgorithmParameters3_user,
            (LPVOID *)&CryptoPP__PKCS8PrivateKeyBERDecodeAlgorithmParameters3_next,
            (LPVOID)cast_pointer_function(CryptoPP__PKCS8PrivateKeyBERDecodeAlgorithmParameters3_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::PKCS8PrivateKey::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::PKCS8PrivateKey::BERDecodeAlgorithmParameters) },
        {   (LPVOID)0x14054e1b0L,
            (LPVOID *)&CryptoPP__PKCS8PrivateKeyBERDecodeOptionalAttributes4_user,
            (LPVOID *)&CryptoPP__PKCS8PrivateKeyBERDecodeOptionalAttributes4_next,
            (LPVOID)cast_pointer_function(CryptoPP__PKCS8PrivateKeyBERDecodeOptionalAttributes4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PKCS8PrivateKey::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::PKCS8PrivateKey::BERDecodeOptionalAttributes) },
        {   (LPVOID)0x14054df80L,
            (LPVOID *)&CryptoPP__PKCS8PrivateKeyDEREncode5_user,
            (LPVOID *)&CryptoPP__PKCS8PrivateKeyDEREncode5_next,
            (LPVOID)cast_pointer_function(CryptoPP__PKCS8PrivateKeyDEREncode5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PKCS8PrivateKey::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::PKCS8PrivateKey::DEREncode) },
        {   (LPVOID)0x14044c2b0L,
            (LPVOID *)&CryptoPP__PKCS8PrivateKeyDEREncodeAlgorithmParameters7_user,
            (LPVOID *)&CryptoPP__PKCS8PrivateKeyDEREncodeAlgorithmParameters7_next,
            (LPVOID)cast_pointer_function(CryptoPP__PKCS8PrivateKeyDEREncodeAlgorithmParameters7_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::PKCS8PrivateKey::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::PKCS8PrivateKey::DEREncodeAlgorithmParameters) },
        {   (LPVOID)0x14054e1e0L,
            (LPVOID *)&CryptoPP__PKCS8PrivateKeyDEREncodeOptionalAttributes8_user,
            (LPVOID *)&CryptoPP__PKCS8PrivateKeyDEREncodeOptionalAttributes8_next,
            (LPVOID)cast_pointer_function(CryptoPP__PKCS8PrivateKeyDEREncodeOptionalAttributes8_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PKCS8PrivateKey::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::PKCS8PrivateKey::DEREncodeOptionalAttributes) },
        {   (LPVOID)0x140633770L,
            (LPVOID *)&CryptoPP__PKCS8PrivateKeyctor_PKCS8PrivateKey9_user,
            (LPVOID *)&CryptoPP__PKCS8PrivateKeyctor_PKCS8PrivateKey9_next,
            (LPVOID)cast_pointer_function(CryptoPP__PKCS8PrivateKeyctor_PKCS8PrivateKey9_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PKCS8PrivateKey::*)(struct CryptoPP::PKCS8PrivateKey*))&CryptoPP::PKCS8PrivateKey::ctor_PKCS8PrivateKey) },
        {   (LPVOID)0x14044c0c0L,
            (LPVOID *)&CryptoPP__PKCS8PrivateKeyctor_PKCS8PrivateKey11_user,
            (LPVOID *)&CryptoPP__PKCS8PrivateKeyctor_PKCS8PrivateKey11_next,
            (LPVOID)cast_pointer_function(CryptoPP__PKCS8PrivateKeyctor_PKCS8PrivateKey11_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PKCS8PrivateKey::*)())&CryptoPP::PKCS8PrivateKey::ctor_PKCS8PrivateKey) },
        {   (LPVOID)0x140449510L,
            (LPVOID *)&CryptoPP__PKCS8PrivateKeydtor_PKCS8PrivateKey20_user,
            (LPVOID *)&CryptoPP__PKCS8PrivateKeydtor_PKCS8PrivateKey20_next,
            (LPVOID)cast_pointer_function(CryptoPP__PKCS8PrivateKeydtor_PKCS8PrivateKey20_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PKCS8PrivateKey::*)())&CryptoPP::PKCS8PrivateKey::dtor_PKCS8PrivateKey) },
        
        {   (LPVOID)0x140457ae0L,
            (LPVOID *)&CryptoPP__DL_GroupPrecomputationConvertIn2_user,
            (LPVOID *)&CryptoPP__DL_GroupPrecomputationConvertIn2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupPrecomputationConvertIn2_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ECPPoint*(CryptoPP::DL_GroupPrecomputation<CryptoPP::ECPPoint>::*)(struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*))&CryptoPP::DL_GroupPrecomputation<CryptoPP::ECPPoint>::ConvertIn) },
        {   (LPVOID)0x140457b50L,
            (LPVOID *)&CryptoPP__DL_GroupPrecomputationConvertOut4_user,
            (LPVOID *)&CryptoPP__DL_GroupPrecomputationConvertOut4_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupPrecomputationConvertOut4_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ECPPoint*(CryptoPP::DL_GroupPrecomputation<CryptoPP::ECPPoint>::*)(struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*))&CryptoPP::DL_GroupPrecomputation<CryptoPP::ECPPoint>::ConvertOut) },
        {   (LPVOID)0x140457aa0L,
            (LPVOID *)&CryptoPP__DL_GroupPrecomputationctor_DL_GroupPrecomputation6_user,
            (LPVOID *)&CryptoPP__DL_GroupPrecomputationctor_DL_GroupPrecomputation6_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupPrecomputationctor_DL_GroupPrecomputation6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_GroupPrecomputation<CryptoPP::ECPPoint>::*)())&CryptoPP::DL_GroupPrecomputation<CryptoPP::ECPPoint>::ctor_DL_GroupPrecomputation) },
        {   (LPVOID)0x140457ad0L,
            (LPVOID *)&CryptoPP__DL_GroupPrecomputationNeedConversions8_user,
            (LPVOID *)&CryptoPP__DL_GroupPrecomputationNeedConversions8_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupPrecomputationNeedConversions8_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::DL_GroupPrecomputation<CryptoPP::ECPPoint>::*)())&CryptoPP::DL_GroupPrecomputation<CryptoPP::ECPPoint>::NeedConversions) },
        
        {   (LPVOID)0x1405e4030L,
            (LPVOID *)&CryptoPP__InitializeIntegerctor_InitializeInteger1_user,
            (LPVOID *)&CryptoPP__InitializeIntegerctor_InitializeInteger1_next,
            (LPVOID)cast_pointer_function(CryptoPP__InitializeIntegerctor_InitializeInteger1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::InitializeInteger::*)())&CryptoPP::InitializeInteger::ctor_InitializeInteger) },
        
        {   (LPVOID)0x140458a30L,
            (LPVOID *)&CryptoPP__AllocatorWithCleanupdeallocate2_user,
            (LPVOID *)&CryptoPP__AllocatorWithCleanupdeallocate2_next,
            (LPVOID)cast_pointer_function(CryptoPP__AllocatorWithCleanupdeallocate2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AllocatorWithCleanup<unsigned __int64,0>::*)(void*, uint64_t))&CryptoPP::AllocatorWithCleanup<unsigned __int64,0>::deallocate) },
        
        {   (LPVOID)0x1405e55f0L,
            (LPVOID *)&CryptoPP__IntegerAbsoluteValue1_user,
            (LPVOID *)&CryptoPP__IntegerAbsoluteValue1_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerAbsoluteValue1_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::Integer::*)(short))&CryptoPP::Integer::AbsoluteValue) },
        {   (LPVOID)0x1405e65b0L,
            (LPVOID *)&CryptoPP__IntegerBERDecode2_user,
            (LPVOID *)&CryptoPP__IntegerBERDecode2_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerBERDecode2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Integer::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::Integer::BERDecode) },
        {   (LPVOID)0x1405e6500L,
            (LPVOID *)&CryptoPP__IntegerBERDecode3_user,
            (LPVOID *)&CryptoPP__IntegerBERDecode3_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerBERDecode3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Integer::*)(uint8_t*, uint64_t))&CryptoPP::Integer::BERDecode) },
        {   (LPVOID)0x1405e6760L,
            (LPVOID *)&CryptoPP__IntegerBERDecodeAsOctetString4_user,
            (LPVOID *)&CryptoPP__IntegerBERDecodeAsOctetString4_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerBERDecodeAsOctetString4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Integer::*)(struct CryptoPP::BufferedTransformation*, uint64_t))&CryptoPP::Integer::BERDecodeAsOctetString) },
        {   (LPVOID)0x1405e5b00L,
            (LPVOID *)&CryptoPP__IntegerBitCount5_user,
            (LPVOID *)&CryptoPP__IntegerBitCount5_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerBitCount5_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::Integer::*)())&CryptoPP::Integer::BitCount) },
        {   (LPVOID)0x1405e5aa0L,
            (LPVOID *)&CryptoPP__IntegerByteCount6_user,
            (LPVOID *)&CryptoPP__IntegerByteCount6_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerByteCount6_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::Integer::*)())&CryptoPP::Integer::ByteCount) },
        {   (LPVOID)0x1405ead20L,
            (LPVOID *)&CryptoPP__IntegerCompare7_user,
            (LPVOID *)&CryptoPP__IntegerCompare7_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerCompare7_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Integer::*)(struct CryptoPP::Integer*))&CryptoPP::Integer::Compare) },
        {   (LPVOID)0x1405e4820L,
            (LPVOID *)&CryptoPP__IntegerConvertToLong8_user,
            (LPVOID *)&CryptoPP__IntegerConvertToLong8_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerConvertToLong8_wrapper),
            (LPVOID)cast_pointer_function((int32_t(CryptoPP::Integer::*)())&CryptoPP::Integer::ConvertToLong) },
        {   (LPVOID)0x1405e6440L,
            (LPVOID *)&CryptoPP__IntegerDEREncode9_user,
            (LPVOID *)&CryptoPP__IntegerDEREncode9_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerDEREncode9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Integer::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::Integer::DEREncode) },
        {   (LPVOID)0x1405e66a0L,
            (LPVOID *)&CryptoPP__IntegerDEREncodeAsOctetString10_user,
            (LPVOID *)&CryptoPP__IntegerDEREncodeAsOctetString10_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerDEREncodeAsOctetString10_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Integer::*)(struct CryptoPP::BufferedTransformation*, uint64_t))&CryptoPP::Integer::DEREncodeAsOctetString) },
        {   (LPVOID)0x1405e5c20L,
            (LPVOID *)&CryptoPP__IntegerDecode11_user,
            (LPVOID *)&CryptoPP__IntegerDecode11_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerDecode11_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Integer::*)(struct CryptoPP::BufferedTransformation*, uint64_t, struct CryptoPP::Integer::Signedness))&CryptoPP::Integer::Decode) },
        {   (LPVOID)0x1405e5b70L,
            (LPVOID *)&CryptoPP__IntegerDecode12_user,
            (LPVOID *)&CryptoPP__IntegerDecode12_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerDecode12_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Integer::*)(uint8_t*, uint64_t, struct CryptoPP::Integer::Signedness))&CryptoPP::Integer::Decode) },
        {   (LPVOID)0x1405e9f80L,
            (LPVOID *)&CryptoPP__IntegerDivide13_user,
            (LPVOID *)&CryptoPP__IntegerDivide13_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerDivide13_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Integer::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::Integer::Divide) },
        {   (LPVOID)0x1405ea6a0L,
            (LPVOID *)&CryptoPP__IntegerDivide14_user,
            (LPVOID *)&CryptoPP__IntegerDivide14_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerDivide14_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Integer::*)(uint64_t*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, uint64_t))&CryptoPP::Integer::Divide) },
        {   (LPVOID)0x1405ea100L,
            (LPVOID *)&CryptoPP__IntegerDivideByPowerOf215_user,
            (LPVOID *)&CryptoPP__IntegerDivideByPowerOf215_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerDivideByPowerOf215_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Integer::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, unsigned int))&CryptoPP::Integer::DivideByPowerOf2) },
        {   (LPVOID)0x1405ea480L,
            (LPVOID *)&CryptoPP__IntegerDividedBy16_user,
            (LPVOID *)&CryptoPP__IntegerDividedBy16_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerDividedBy16_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::Integer::*)(short, struct CryptoPP::Integer*))&CryptoPP::Integer::DividedBy) },
        {   (LPVOID)0x1405ea980L,
            (LPVOID *)&CryptoPP__IntegerDividedBy17_user,
            (LPVOID *)&CryptoPP__IntegerDividedBy17_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerDividedBy17_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::Integer::*)(short, struct CryptoPP::Integer*))&CryptoPP::Integer::DividedBy) },
        {   (LPVOID)0x1405f06f0L,
            (LPVOID *)&CryptoPP__IntegerDoubled18_user,
            (LPVOID *)&CryptoPP__IntegerDoubled18_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerDoubled18_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::Integer::*)(short))&CryptoPP::Integer::Doubled) },
        {   (LPVOID)0x1405e62b0L,
            (LPVOID *)&CryptoPP__IntegerEncode19_user,
            (LPVOID *)&CryptoPP__IntegerEncode19_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerEncode19_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Integer::*)(struct CryptoPP::BufferedTransformation*, uint64_t, struct CryptoPP::Integer::Signedness))&CryptoPP::Integer::Encode) },
        {   (LPVOID)0x1405e6200L,
            (LPVOID *)&CryptoPP__IntegerEncode20_user,
            (LPVOID *)&CryptoPP__IntegerEncode20_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerEncode20_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Integer::*)(uint8_t*, uint64_t, struct CryptoPP::Integer::Signedness))&CryptoPP::Integer::Encode) },
        {   (LPVOID)0x1405eb4c0L,
            (LPVOID *)&CryptoPP__IntegerGcd21_user,
            (LPVOID *)&CryptoPP__IntegerGcd21_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerGcd21_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::Integer::*)(short, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::Integer::Gcd) },
        {   (LPVOID)0x1405e6fc0L,
            (LPVOID *)&CryptoPP__IntegerGenerateRandomNoThrow22_user,
            (LPVOID *)&CryptoPP__IntegerGenerateRandomNoThrow22_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerGenerateRandomNoThrow22_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::Integer::*)(struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::NameValuePairs*))&CryptoPP::Integer::GenerateRandomNoThrow) },
        {   (LPVOID)0x1405e5090L,
            (LPVOID *)&CryptoPP__IntegerGetBit23_user,
            (LPVOID *)&CryptoPP__IntegerGetBit23_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerGetBit23_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::Integer::*)(uint64_t))&CryptoPP::Integer::GetBit) },
        {   (LPVOID)0x1405e5480L,
            (LPVOID *)&CryptoPP__IntegerGetBits24_user,
            (LPVOID *)&CryptoPP__IntegerGetBits24_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerGetBits24_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::Integer::*)(uint64_t, uint64_t))&CryptoPP::Integer::GetBits) },
        {   (LPVOID)0x1405e52a0L,
            (LPVOID *)&CryptoPP__IntegerGetByte25_user,
            (LPVOID *)&CryptoPP__IntegerGetByte25_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerGetByte25_wrapper),
            (LPVOID)cast_pointer_function((uint8_t(CryptoPP::Integer::*)(uint64_t))&CryptoPP::Integer::GetByte) },
        {   (LPVOID)0x1405e4a80L,
            (LPVOID *)&CryptoPP__Integerctor_Integer26_user,
            (LPVOID *)&CryptoPP__Integerctor_Integer26_next,
            (LPVOID)cast_pointer_function(CryptoPP__Integerctor_Integer26_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Integer::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::Integer::ctor_Integer) },
        {   (LPVOID)0x1405e48c0L,
            (LPVOID *)&CryptoPP__Integerctor_Integer27_user,
            (LPVOID *)&CryptoPP__Integerctor_Integer27_next,
            (LPVOID)cast_pointer_function(CryptoPP__Integerctor_Integer27_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Integer::*)(struct CryptoPP::BufferedTransformation*, uint64_t, struct CryptoPP::Integer::Signedness))&CryptoPP::Integer::ctor_Integer) },
        {   (LPVOID)0x1405e4250L,
            (LPVOID *)&CryptoPP__Integerctor_Integer28_user,
            (LPVOID *)&CryptoPP__Integerctor_Integer28_next,
            (LPVOID)cast_pointer_function(CryptoPP__Integerctor_Integer28_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Integer::*)(struct CryptoPP::Integer*))&CryptoPP::Integer::ctor_Integer) },
        {   (LPVOID)0x1405e4420L,
            (LPVOID *)&CryptoPP__Integerctor_Integer29_user,
            (LPVOID *)&CryptoPP__Integerctor_Integer29_next,
            (LPVOID)cast_pointer_function(CryptoPP__Integerctor_Integer29_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Integer::*)(struct CryptoPP::Integer::Sign, uint64_t))&CryptoPP::Integer::ctor_Integer) },
        {   (LPVOID)0x1405e4660L,
            (LPVOID *)&CryptoPP__Integerctor_Integer30_user,
            (LPVOID *)&CryptoPP__Integerctor_Integer30_next,
            (LPVOID)cast_pointer_function(CryptoPP__Integerctor_Integer30_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Integer::*)(struct CryptoPP::Integer::Sign, uint64_t, uint64_t))&CryptoPP::Integer::ctor_Integer) },
        {   (LPVOID)0x1405e4c10L,
            (LPVOID *)&CryptoPP__Integerctor_Integer31_user,
            (LPVOID *)&CryptoPP__Integerctor_Integer31_next,
            (LPVOID)cast_pointer_function(CryptoPP__Integerctor_Integer31_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Integer::*)(struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer::RandomNumberType, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::Integer::ctor_Integer) },
        {   (LPVOID)0x1405e4b40L,
            (LPVOID *)&CryptoPP__Integerctor_Integer32_user,
            (LPVOID *)&CryptoPP__Integerctor_Integer32_next,
            (LPVOID)cast_pointer_function(CryptoPP__Integerctor_Integer32_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Integer::*)(struct CryptoPP::RandomNumberGenerator*, uint64_t))&CryptoPP::Integer::ctor_Integer) },
        {   (LPVOID)0x1405e5830L,
            (LPVOID *)&CryptoPP__Integerctor_Integer33_user,
            (LPVOID *)&CryptoPP__Integerctor_Integer33_next,
            (LPVOID)cast_pointer_function(CryptoPP__Integerctor_Integer33_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Integer::*)(char*))&CryptoPP::Integer::ctor_Integer) },
        {   (LPVOID)0x1405e4530L,
            (LPVOID *)&CryptoPP__Integerctor_Integer34_user,
            (LPVOID *)&CryptoPP__Integerctor_Integer34_next,
            (LPVOID)cast_pointer_function(CryptoPP__Integerctor_Integer34_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Integer::*)(int32_t))&CryptoPP::Integer::ctor_Integer) },
        {   (LPVOID)0x1405e49a0L,
            (LPVOID *)&CryptoPP__Integerctor_Integer35_user,
            (LPVOID *)&CryptoPP__Integerctor_Integer35_next,
            (LPVOID)cast_pointer_function(CryptoPP__Integerctor_Integer35_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Integer::*)(uint8_t*, uint64_t, struct CryptoPP::Integer::Signedness))&CryptoPP::Integer::ctor_Integer) },
        {   (LPVOID)0x1405e5700L,
            (LPVOID *)&CryptoPP__Integerctor_Integer36_user,
            (LPVOID *)&CryptoPP__Integerctor_Integer36_next,
            (LPVOID)cast_pointer_function(CryptoPP__Integerctor_Integer36_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Integer::*)(uint64_t, uint64_t))&CryptoPP::Integer::ctor_Integer) },
        {   (LPVOID)0x1405e4160L,
            (LPVOID *)&CryptoPP__Integerctor_Integer37_user,
            (LPVOID *)&CryptoPP__Integerctor_Integer37_next,
            (LPVOID)cast_pointer_function(CryptoPP__Integerctor_Integer37_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Integer::*)())&CryptoPP::Integer::ctor_Integer) },
        {   (LPVOID)0x1405e5940L,
            (LPVOID *)&CryptoPP__Integerctor_Integer38_user,
            (LPVOID *)&CryptoPP__Integerctor_Integer38_next,
            (LPVOID)cast_pointer_function(CryptoPP__Integerctor_Integer38_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Integer::*)(wchar_t*))&CryptoPP::Integer::ctor_Integer) },
        {   (LPVOID)0x1405eb5f0L,
            (LPVOID *)&CryptoPP__IntegerInverseMod39_user,
            (LPVOID *)&CryptoPP__IntegerInverseMod39_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerInverseMod39_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::Integer::*)(short, struct CryptoPP::Integer*))&CryptoPP::Integer::InverseMod) },
        {   (LPVOID)0x1405ebde0L,
            (LPVOID *)&CryptoPP__IntegerInverseMod40_user,
            (LPVOID *)&CryptoPP__IntegerInverseMod40_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerInverseMod40_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::Integer::*)(uint64_t))&CryptoPP::Integer::InverseMod) },
        {   (LPVOID)0x1405e4760L,
            (LPVOID *)&CryptoPP__IntegerIsConvertableToLong41_user,
            (LPVOID *)&CryptoPP__IntegerIsConvertableToLong41_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerIsConvertableToLong41_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::Integer::*)())&CryptoPP::Integer::IsConvertableToLong) },
        {   (LPVOID)0x14057fad0L,
            (LPVOID *)&CryptoPP__IntegerIsEven42_user,
            (LPVOID *)&CryptoPP__IntegerIsEven42_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerIsEven42_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::Integer::*)())&CryptoPP::Integer::IsEven) },
        {   (LPVOID)0x140451ad0L,
            (LPVOID *)&CryptoPP__IntegerIsNegative44_user,
            (LPVOID *)&CryptoPP__IntegerIsNegative44_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerIsNegative44_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::Integer::*)())&CryptoPP::Integer::IsNegative) },
        {   (LPVOID)0x1405eff90L,
            (LPVOID *)&CryptoPP__IntegerIsOdd45_user,
            (LPVOID *)&CryptoPP__IntegerIsOdd45_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerIsOdd45_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::Integer::*)())&CryptoPP::Integer::IsOdd) },
        {   (LPVOID)0x140451930L,
            (LPVOID *)&CryptoPP__IntegerIsPositive47_user,
            (LPVOID *)&CryptoPP__IntegerIsPositive47_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerIsPositive47_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::Integer::*)())&CryptoPP::Integer::IsPositive) },
        {   (LPVOID)0x1405eb140L,
            (LPVOID *)&CryptoPP__IntegerIsSquare48_user,
            (LPVOID *)&CryptoPP__IntegerIsSquare48_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerIsSquare48_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::Integer::*)())&CryptoPP::Integer::IsSquare) },
        {   (LPVOID)0x1405eb210L,
            (LPVOID *)&CryptoPP__IntegerIsUnit49_user,
            (LPVOID *)&CryptoPP__IntegerIsUnit49_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerIsUnit49_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::Integer::*)())&CryptoPP::Integer::IsUnit) },
        {   (LPVOID)0x140451a20L,
            (LPVOID *)&CryptoPP__IntegerIsZero51_user,
            (LPVOID *)&CryptoPP__IntegerIsZero51_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerIsZero51_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::Integer::*)())&CryptoPP::Integer::IsZero) },
        {   (LPVOID)0x1405e5fa0L,
            (LPVOID *)&CryptoPP__IntegerMinEncodedSize52_user,
            (LPVOID *)&CryptoPP__IntegerMinEncodedSize52_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerMinEncodedSize52_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::Integer::*)(struct CryptoPP::Integer::Signedness))&CryptoPP::Integer::MinEncodedSize) },
        {   (LPVOID)0x1405e9590L,
            (LPVOID *)&CryptoPP__IntegerMinus53_user,
            (LPVOID *)&CryptoPP__IntegerMinus53_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerMinus53_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::Integer::*)(short, struct CryptoPP::Integer*))&CryptoPP::Integer::Minus) },
        {   (LPVOID)0x1405ea590L,
            (LPVOID *)&CryptoPP__IntegerModulo54_user,
            (LPVOID *)&CryptoPP__IntegerModulo54_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerModulo54_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::Integer::*)(short, struct CryptoPP::Integer*))&CryptoPP::Integer::Modulo) },
        {   (LPVOID)0x1405eaa50L,
            (LPVOID *)&CryptoPP__IntegerModulo55_user,
            (LPVOID *)&CryptoPP__IntegerModulo55_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerModulo55_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::Integer::*)(uint64_t))&CryptoPP::Integer::Modulo) },
        {   (LPVOID)0x1405eb260L,
            (LPVOID *)&CryptoPP__IntegerMultiplicativeInverse56_user,
            (LPVOID *)&CryptoPP__IntegerMultiplicativeInverse56_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerMultiplicativeInverse56_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::Integer::*)(short))&CryptoPP::Integer::MultiplicativeInverse) },
        {   (LPVOID)0x1405eac30L,
            (LPVOID *)&CryptoPP__IntegerNegate57_user,
            (LPVOID *)&CryptoPP__IntegerNegate57_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerNegate57_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Integer::*)())&CryptoPP::Integer::Negate) },
        {   (LPVOID)0x140451a60L,
            (LPVOID *)&CryptoPP__IntegerNotNegative59_user,
            (LPVOID *)&CryptoPP__IntegerNotNegative59_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerNotNegative59_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::Integer::*)())&CryptoPP::Integer::NotNegative) },
        {   (LPVOID)0x1404519b0L,
            (LPVOID *)&CryptoPP__IntegerNotZero61_user,
            (LPVOID *)&CryptoPP__IntegerNotZero61_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerNotZero61_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::Integer::*)())&CryptoPP::Integer::NotZero) },
        {   (LPVOID)0x1405e4e70L,
            (LPVOID *)&CryptoPP__IntegerOne62_user,
            (LPVOID *)&CryptoPP__IntegerOne62_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerOne62_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::Integer::*)())&CryptoPP::Integer::One) },
        {   (LPVOID)0x1405e6a00L,
            (LPVOID *)&CryptoPP__IntegerOpenPGPDecode63_user,
            (LPVOID *)&CryptoPP__IntegerOpenPGPDecode63_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerOpenPGPDecode63_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Integer::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::Integer::OpenPGPDecode) },
        {   (LPVOID)0x1405e6960L,
            (LPVOID *)&CryptoPP__IntegerOpenPGPDecode64_user,
            (LPVOID *)&CryptoPP__IntegerOpenPGPDecode64_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerOpenPGPDecode64_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Integer::*)(uint8_t*, uint64_t))&CryptoPP::Integer::OpenPGPDecode) },
        {   (LPVOID)0x1405e68e0L,
            (LPVOID *)&CryptoPP__IntegerOpenPGPEncode65_user,
            (LPVOID *)&CryptoPP__IntegerOpenPGPEncode65_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerOpenPGPEncode65_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::Integer::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::Integer::OpenPGPEncode) },
        {   (LPVOID)0x1405e6840L,
            (LPVOID *)&CryptoPP__IntegerOpenPGPEncode66_user,
            (LPVOID *)&CryptoPP__IntegerOpenPGPEncode66_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerOpenPGPEncode66_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::Integer::*)(uint8_t*, uint64_t))&CryptoPP::Integer::OpenPGPEncode) },
        {   (LPVOID)0x1405e9300L,
            (LPVOID *)&CryptoPP__IntegerPlus67_user,
            (LPVOID *)&CryptoPP__IntegerPlus67_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerPlus67_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::Integer::*)(short, struct CryptoPP::Integer*))&CryptoPP::Integer::Plus) },
        {   (LPVOID)0x1405eac70L,
            (LPVOID *)&CryptoPP__IntegerPositiveCompare68_user,
            (LPVOID *)&CryptoPP__IntegerPositiveCompare68_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerPositiveCompare68_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Integer::*)(struct CryptoPP::Integer*))&CryptoPP::Integer::PositiveCompare) },
        {   (LPVOID)0x1405e4d50L,
            (LPVOID *)&CryptoPP__IntegerPower269_user,
            (LPVOID *)&CryptoPP__IntegerPower269_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerPower269_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::Integer::*)(short, struct CryptoPP::Integer*))&CryptoPP::Integer::Power2) },
        {   (LPVOID)0x1405e6bd0L,
            (LPVOID *)&CryptoPP__IntegerRandomize70_user,
            (LPVOID *)&CryptoPP__IntegerRandomize70_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerRandomize70_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Integer::*)(struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::Integer::Randomize) },
        {   (LPVOID)0x1405e6d50L,
            (LPVOID *)&CryptoPP__IntegerRandomize71_user,
            (LPVOID *)&CryptoPP__IntegerRandomize71_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerRandomize71_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::Integer::*)(struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer::RandomNumberType, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::Integer::Randomize) },
        {   (LPVOID)0x1405e6ab0L,
            (LPVOID *)&CryptoPP__IntegerRandomize72_user,
            (LPVOID *)&CryptoPP__IntegerRandomize72_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerRandomize72_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Integer::*)(struct CryptoPP::RandomNumberGenerator*, uint64_t))&CryptoPP::Integer::Randomize) },
        {   (LPVOID)0x1405e5130L,
            (LPVOID *)&CryptoPP__IntegerSetBit73_user,
            (LPVOID *)&CryptoPP__IntegerSetBit73_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerSetBit73_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Integer::*)(uint64_t, bool))&CryptoPP::Integer::SetBit) },
        {   (LPVOID)0x1405e5340L,
            (LPVOID *)&CryptoPP__IntegerSetByte74_user,
            (LPVOID *)&CryptoPP__IntegerSetByte74_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerSetByte74_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Integer::*)(uint64_t, uint8_t))&CryptoPP::Integer::SetByte) },
        {   (LPVOID)0x1405eadb0L,
            (LPVOID *)&CryptoPP__IntegerSquareRoot75_user,
            (LPVOID *)&CryptoPP__IntegerSquareRoot75_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerSquareRoot75_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::Integer::*)(short))&CryptoPP::Integer::SquareRoot) },
        {   (LPVOID)0x140462670L,
            (LPVOID *)&CryptoPP__IntegerSquared77_user,
            (LPVOID *)&CryptoPP__IntegerSquared77_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerSquared77_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::Integer::*)(struct CryptoPP::Integer*))&CryptoPP::Integer::Squared) },
        {   (LPVOID)0x1405e9c10L,
            (LPVOID *)&CryptoPP__IntegerTimes78_user,
            (LPVOID *)&CryptoPP__IntegerTimes78_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerTimes78_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::Integer::*)(short, struct CryptoPP::Integer*))&CryptoPP::Integer::Times) },
        {   (LPVOID)0x1405e4eb0L,
            (LPVOID *)&CryptoPP__IntegerTwo79_user,
            (LPVOID *)&CryptoPP__IntegerTwo79_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerTwo79_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::Integer::*)())&CryptoPP::Integer::Two) },
        {   (LPVOID)0x1405e5a50L,
            (LPVOID *)&CryptoPP__IntegerWordCount80_user,
            (LPVOID *)&CryptoPP__IntegerWordCount80_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerWordCount80_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::Integer::*)())&CryptoPP::Integer::WordCount) },
        {   (LPVOID)0x1405e4e30L,
            (LPVOID *)&CryptoPP__IntegerZero81_user,
            (LPVOID *)&CryptoPP__IntegerZero81_next,
            (LPVOID)cast_pointer_function(CryptoPP__IntegerZero81_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::Integer::*)())&CryptoPP::Integer::Zero) },
        {   (LPVOID)0x1405e56b0L,
            (LPVOID *)&CryptoPP__Integerswap82_user,
            (LPVOID *)&CryptoPP__Integerswap82_next,
            (LPVOID)cast_pointer_function(CryptoPP__Integerswap82_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Integer::*)(struct CryptoPP::Integer*))&CryptoPP::Integer::swap) },
        {   (LPVOID)0x140448dc0L,
            (LPVOID *)&CryptoPP__Integerdtor_Integer84_user,
            (LPVOID *)&CryptoPP__Integerdtor_Integer84_next,
            (LPVOID)cast_pointer_function(CryptoPP__Integerdtor_Integer84_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Integer::*)())&CryptoPP::Integer::dtor_Integer) },
        
        {   (LPVOID)0x1405ef9a0L,
            (LPVOID *)&CryptoPP__Integer__DivideByZeroctor_DivideByZero1_user,
            (LPVOID *)&CryptoPP__Integer__DivideByZeroctor_DivideByZero1_next,
            (LPVOID)cast_pointer_function(CryptoPP__Integer__DivideByZeroctor_DivideByZero1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Integer::DivideByZero::*)(struct CryptoPP::Integer::DivideByZero*))&CryptoPP::Integer::DivideByZero::ctor_DivideByZero) },
        {   (LPVOID)0x1405ef880L,
            (LPVOID *)&CryptoPP__Integer__DivideByZeroctor_DivideByZero2_user,
            (LPVOID *)&CryptoPP__Integer__DivideByZeroctor_DivideByZero2_next,
            (LPVOID)cast_pointer_function(CryptoPP__Integer__DivideByZeroctor_DivideByZero2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Integer::DivideByZero::*)())&CryptoPP::Integer::DivideByZero::ctor_DivideByZero) },
        {   (LPVOID)0x1405ef980L,
            (LPVOID *)&CryptoPP__Integer__DivideByZerodtor_DivideByZero3_user,
            (LPVOID *)&CryptoPP__Integer__DivideByZerodtor_DivideByZero3_next,
            (LPVOID)cast_pointer_function(CryptoPP__Integer__DivideByZerodtor_DivideByZero3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Integer::DivideByZero::*)())&CryptoPP::Integer::DivideByZero::dtor_DivideByZero) },
        
        {   (LPVOID)0x1405eef90L,
            (LPVOID *)&CryptoPP__Integer__RandomNumberNotFoundctor_RandomNumberNotFound1_user,
            (LPVOID *)&CryptoPP__Integer__RandomNumberNotFoundctor_RandomNumberNotFound1_next,
            (LPVOID)cast_pointer_function(CryptoPP__Integer__RandomNumberNotFoundctor_RandomNumberNotFound1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Integer::RandomNumberNotFound::*)(struct CryptoPP::Integer::RandomNumberNotFound*))&CryptoPP::Integer::RandomNumberNotFound::ctor_RandomNumberNotFound) },
        {   (LPVOID)0x1405eee70L,
            (LPVOID *)&CryptoPP__Integer__RandomNumberNotFoundctor_RandomNumberNotFound2_user,
            (LPVOID *)&CryptoPP__Integer__RandomNumberNotFoundctor_RandomNumberNotFound2_next,
            (LPVOID)cast_pointer_function(CryptoPP__Integer__RandomNumberNotFoundctor_RandomNumberNotFound2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Integer::RandomNumberNotFound::*)())&CryptoPP::Integer::RandomNumberNotFound::ctor_RandomNumberNotFound) },
        {   (LPVOID)0x1405eef70L,
            (LPVOID *)&CryptoPP__Integer__RandomNumberNotFounddtor_RandomNumberNotFound3_user,
            (LPVOID *)&CryptoPP__Integer__RandomNumberNotFounddtor_RandomNumberNotFound3_next,
            (LPVOID)cast_pointer_function(CryptoPP__Integer__RandomNumberNotFounddtor_RandomNumberNotFound3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Integer::RandomNumberNotFound::*)())&CryptoPP::Integer::RandomNumberNotFound::dtor_RandomNumberNotFound) },
        
        {   (LPVOID)0x1405ef350L,
            (LPVOID *)&CryptoPP__Integer__OpenPGPDecodeErrctor_OpenPGPDecodeErr1_user,
            (LPVOID *)&CryptoPP__Integer__OpenPGPDecodeErrctor_OpenPGPDecodeErr1_next,
            (LPVOID)cast_pointer_function(CryptoPP__Integer__OpenPGPDecodeErrctor_OpenPGPDecodeErr1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Integer::OpenPGPDecodeErr::*)(struct CryptoPP::Integer::OpenPGPDecodeErr*))&CryptoPP::Integer::OpenPGPDecodeErr::ctor_OpenPGPDecodeErr) },
        {   (LPVOID)0x1405ef230L,
            (LPVOID *)&CryptoPP__Integer__OpenPGPDecodeErrctor_OpenPGPDecodeErr2_user,
            (LPVOID *)&CryptoPP__Integer__OpenPGPDecodeErrctor_OpenPGPDecodeErr2_next,
            (LPVOID)cast_pointer_function(CryptoPP__Integer__OpenPGPDecodeErrctor_OpenPGPDecodeErr2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Integer::OpenPGPDecodeErr::*)())&CryptoPP::Integer::OpenPGPDecodeErr::ctor_OpenPGPDecodeErr) },
        {   (LPVOID)0x1405ef330L,
            (LPVOID *)&CryptoPP__Integer__OpenPGPDecodeErrdtor_OpenPGPDecodeErr3_user,
            (LPVOID *)&CryptoPP__Integer__OpenPGPDecodeErrdtor_OpenPGPDecodeErr3_next,
            (LPVOID)cast_pointer_function(CryptoPP__Integer__OpenPGPDecodeErrdtor_OpenPGPDecodeErr3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Integer::OpenPGPDecodeErr::*)())&CryptoPP::Integer::OpenPGPDecodeErr::dtor_OpenPGPDecodeErr) },
        
        {   (LPVOID)0x140450080L,
            (LPVOID *)&CryptoPP__ECPPointctor_ECPPoint2_user,
            (LPVOID *)&CryptoPP__ECPPointctor_ECPPoint2_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPPointctor_ECPPoint2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ECPPoint::*)(struct CryptoPP::ECPPoint*))&CryptoPP::ECPPoint::ctor_ECPPoint) },
        {   (LPVOID)0x140456fe0L,
            (LPVOID *)&CryptoPP__ECPPointctor_ECPPoint4_user,
            (LPVOID *)&CryptoPP__ECPPointctor_ECPPoint4_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPPointctor_ECPPoint4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ECPPoint::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::ECPPoint::ctor_ECPPoint) },
        {   (LPVOID)0x14044bf80L,
            (LPVOID *)&CryptoPP__ECPPointctor_ECPPoint6_user,
            (LPVOID *)&CryptoPP__ECPPointctor_ECPPoint6_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPPointctor_ECPPoint6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ECPPoint::*)())&CryptoPP::ECPPoint::ctor_ECPPoint) },
        {   (LPVOID)0x1404492c0L,
            (LPVOID *)&CryptoPP__ECPPointdtor_ECPPoint12_user,
            (LPVOID *)&CryptoPP__ECPPointdtor_ECPPoint12_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPPointdtor_ECPPoint12_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ECPPoint::*)())&CryptoPP::ECPPoint::dtor_ECPPoint) },
        
        {   (LPVOID)0x140576df0L,
            (LPVOID *)&CryptoPP__AbstractGroupCascadeScalarMultiply1_user,
            (LPVOID *)&CryptoPP__AbstractGroupCascadeScalarMultiply1_next,
            (LPVOID)cast_pointer_function(CryptoPP__AbstractGroupCascadeScalarMultiply1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::AbstractGroup<CryptoPP::ECPPoint>::*)(struct CryptoPP::Integer*))&CryptoPP::AbstractGroup<CryptoPP::ECPPoint>::CascadeScalarMultiply) },
        
        {   (LPVOID)0x140462cb0L,
            (LPVOID *)&CryptoPP__AbstractGroupctor_AbstractGroup2_user,
            (LPVOID *)&CryptoPP__AbstractGroupctor_AbstractGroup2_next,
            (LPVOID)cast_pointer_function(CryptoPP__AbstractGroupctor_AbstractGroup2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AbstractGroup<CryptoPP::Integer>::*)())&CryptoPP::AbstractGroup<CryptoPP::Integer>::ctor_AbstractGroup) },
        {   (LPVOID)0x14056d330L,
            (LPVOID *)&CryptoPP__AbstractGroupCascadeScalarMultiply3_user,
            (LPVOID *)&CryptoPP__AbstractGroupCascadeScalarMultiply3_next,
            (LPVOID)cast_pointer_function(CryptoPP__AbstractGroupCascadeScalarMultiply3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::AbstractGroup<CryptoPP::Integer>::*)(struct CryptoPP::Integer*))&CryptoPP::AbstractGroup<CryptoPP::Integer>::CascadeScalarMultiply) },
        {   (LPVOID)0x140462c10L,
            (LPVOID *)&CryptoPP__AbstractGroupInversionIsFast5_user,
            (LPVOID *)&CryptoPP__AbstractGroupInversionIsFast5_next,
            (LPVOID)cast_pointer_function(CryptoPP__AbstractGroupInversionIsFast5_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::AbstractGroup<CryptoPP::Integer>::*)())&CryptoPP::AbstractGroup<CryptoPP::Integer>::InversionIsFast) },
        {   (LPVOID)0x140462c00L,
            (LPVOID *)&CryptoPP__AbstractGroupdtor_AbstractGroup7_user,
            (LPVOID *)&CryptoPP__AbstractGroupdtor_AbstractGroup7_next,
            (LPVOID)cast_pointer_function(CryptoPP__AbstractGroupdtor_AbstractGroup7_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AbstractGroup<CryptoPP::Integer>::*)())&CryptoPP::AbstractGroup<CryptoPP::Integer>::dtor_AbstractGroup) },
        
        {   (LPVOID)0x140462c20L,
            (LPVOID *)&CryptoPP__AbstractRingctor_AbstractRing2_user,
            (LPVOID *)&CryptoPP__AbstractRingctor_AbstractRing2_next,
            (LPVOID)cast_pointer_function(CryptoPP__AbstractRingctor_AbstractRing2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AbstractRing<CryptoPP::Integer>::*)())&CryptoPP::AbstractRing<CryptoPP::Integer>::ctor_AbstractRing) },
        {   (LPVOID)0x140462c90L,
            (LPVOID *)&CryptoPP__AbstractRingMultiplicativeGroup4_user,
            (LPVOID *)&CryptoPP__AbstractRingMultiplicativeGroup4_next,
            (LPVOID)cast_pointer_function(CryptoPP__AbstractRingMultiplicativeGroup4_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::AbstractGroup<CryptoPP::Integer>*(CryptoPP::AbstractRing<CryptoPP::Integer>::*)())&CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroup) },
        {   (LPVOID)0x1404629c0L,
            (LPVOID *)&CryptoPP__AbstractRingdtor_AbstractRing6_user,
            (LPVOID *)&CryptoPP__AbstractRingdtor_AbstractRing6_next,
            (LPVOID)cast_pointer_function(CryptoPP__AbstractRingdtor_AbstractRing6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AbstractRing<CryptoPP::Integer>::*)())&CryptoPP::AbstractRing<CryptoPP::Integer>::dtor_AbstractRing) },
        
        {   (LPVOID)0x140462e80L,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTAccumulate2_user,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTAccumulate2_next,
            (LPVOID)cast_pointer_function(CryptoPP__AbstractRing__MultiplicativeGroupTAccumulate2_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::Accumulate) },
        {   (LPVOID)0x140462e00L,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTAdd4_user,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTAdd4_next,
            (LPVOID)cast_pointer_function(CryptoPP__AbstractRing__MultiplicativeGroupTAdd4_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::Add) },
        {   (LPVOID)0x1404631b0L,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTCascadeScalarMultiply6_user,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTCascadeScalarMultiply6_next,
            (LPVOID)cast_pointer_function(CryptoPP__AbstractRing__MultiplicativeGroupTCascadeScalarMultiply6_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::CascadeScalarMultiply) },
        {   (LPVOID)0x140463090L,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTDouble8_user,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTDouble8_next,
            (LPVOID)cast_pointer_function(CryptoPP__AbstractRing__MultiplicativeGroupTDouble8_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::*)(struct CryptoPP::Integer*))&CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::Double) },
        {   (LPVOID)0x140462d20L,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTEqual10_user,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTEqual10_next,
            (LPVOID)cast_pointer_function(CryptoPP__AbstractRing__MultiplicativeGroupTEqual10_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::Equal) },
        {   (LPVOID)0x140463370L,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTGetRing12_user,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTGetRing12_next,
            (LPVOID)cast_pointer_function(CryptoPP__AbstractRing__MultiplicativeGroupTGetRing12_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::AbstractRing<CryptoPP::Integer>*(CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::*)())&CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::GetRing) },
        {   (LPVOID)0x140462da0L,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTIdentity14_user,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTIdentity14_next,
            (LPVOID)cast_pointer_function(CryptoPP__AbstractRing__MultiplicativeGroupTIdentity14_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::*)())&CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::Identity) },
        {   (LPVOID)0x140462f10L,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTInverse16_user,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTInverse16_next,
            (LPVOID)cast_pointer_function(CryptoPP__AbstractRing__MultiplicativeGroupTInverse16_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::*)(struct CryptoPP::Integer*))&CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::Inverse) },
        {   (LPVOID)0x140462cc0L,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTctor_MultiplicativeGroupT18_user,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTctor_MultiplicativeGroupT18_next,
            (LPVOID)cast_pointer_function(CryptoPP__AbstractRing__MultiplicativeGroupTctor_MultiplicativeGroupT18_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::*)())&CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::ctor_MultiplicativeGroupT) },
        {   (LPVOID)0x140463000L,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTReduce20_user,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTReduce20_next,
            (LPVOID)cast_pointer_function(CryptoPP__AbstractRing__MultiplicativeGroupTReduce20_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::Reduce) },
        {   (LPVOID)0x140463100L,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTScalarMultiply22_user,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTScalarMultiply22_next,
            (LPVOID)cast_pointer_function(CryptoPP__AbstractRing__MultiplicativeGroupTScalarMultiply22_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::ScalarMultiply) },
        {   (LPVOID)0x140463270L,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTSimultaneousMultiply24_user,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTSimultaneousMultiply24_next,
            (LPVOID)cast_pointer_function(CryptoPP__AbstractRing__MultiplicativeGroupTSimultaneousMultiply24_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, unsigned int))&CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::SimultaneousMultiply) },
        {   (LPVOID)0x140462f80L,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTSubtract26_user,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTSubtract26_next,
            (LPVOID)cast_pointer_function(CryptoPP__AbstractRing__MultiplicativeGroupTSubtract26_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::Subtract) },
        {   (LPVOID)0x140462ba0L,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTdtor_MultiplicativeGroupT31_user,
            (LPVOID *)&CryptoPP__AbstractRing__MultiplicativeGroupTdtor_MultiplicativeGroupT31_next,
            (LPVOID)cast_pointer_function(CryptoPP__AbstractRing__MultiplicativeGroupTdtor_MultiplicativeGroupT31_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::*)())&CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::dtor_MultiplicativeGroupT) },
        
        {   (LPVOID)0x1405ec9b0L,
            (LPVOID *)&CryptoPP__ModularArithmeticAccumulate1_user,
            (LPVOID *)&CryptoPP__ModularArithmeticAccumulate1_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticAccumulate1_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::ModularArithmetic::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::ModularArithmetic::Accumulate) },
        {   (LPVOID)0x1405ec6c0L,
            (LPVOID *)&CryptoPP__ModularArithmeticAdd2_user,
            (LPVOID *)&CryptoPP__ModularArithmeticAdd2_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticAdd2_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::ModularArithmetic::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::ModularArithmetic::Add) },
        {   (LPVOID)0x1405ec320L,
            (LPVOID *)&CryptoPP__ModularArithmeticBERDecodeElement3_user,
            (LPVOID *)&CryptoPP__ModularArithmeticBERDecodeElement3_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticBERDecodeElement3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ModularArithmetic::*)(struct CryptoPP::BufferedTransformation*, struct CryptoPP::Integer*))&CryptoPP::ModularArithmetic::BERDecodeElement) },
        {   (LPVOID)0x1405ed170L,
            (LPVOID *)&CryptoPP__ModularArithmeticCascadeExponentiate4_user,
            (LPVOID *)&CryptoPP__ModularArithmeticCascadeExponentiate4_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticCascadeExponentiate4_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::ModularArithmetic::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::ModularArithmetic::CascadeExponentiate) },
        {   (LPVOID)0x140461e00L,
            (LPVOID *)&CryptoPP__ModularArithmeticClone6_user,
            (LPVOID *)&CryptoPP__ModularArithmeticClone6_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticClone6_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ModularArithmetic*(CryptoPP::ModularArithmetic::*)())&CryptoPP::ModularArithmetic::Clone) },
        {   (LPVOID)0x140462070L,
            (LPVOID *)&CryptoPP__ModularArithmeticConvertIn8_user,
            (LPVOID *)&CryptoPP__ModularArithmeticConvertIn8_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticConvertIn8_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::ModularArithmetic::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::ModularArithmetic::ConvertIn) },
        {   (LPVOID)0x140462170L,
            (LPVOID *)&CryptoPP__ModularArithmeticConvertOut10_user,
            (LPVOID *)&CryptoPP__ModularArithmeticConvertOut10_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticConvertOut10_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::ModularArithmetic::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::ModularArithmetic::ConvertOut) },
        {   (LPVOID)0x1405ec1a0L,
            (LPVOID *)&CryptoPP__ModularArithmeticDEREncode11_user,
            (LPVOID *)&CryptoPP__ModularArithmeticDEREncode11_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticDEREncode11_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ModularArithmetic::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::ModularArithmetic::DEREncode) },
        {   (LPVOID)0x1405ec2e0L,
            (LPVOID *)&CryptoPP__ModularArithmeticDEREncodeElement12_user,
            (LPVOID *)&CryptoPP__ModularArithmeticDEREncodeElement12_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticDEREncodeElement12_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ModularArithmetic::*)(struct CryptoPP::BufferedTransformation*, struct CryptoPP::Integer*))&CryptoPP::ModularArithmetic::DEREncodeElement) },
        {   (LPVOID)0x1404628c0L,
            (LPVOID *)&CryptoPP__ModularArithmeticDivide14_user,
            (LPVOID *)&CryptoPP__ModularArithmeticDivide14_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticDivide14_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::ModularArithmetic::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::ModularArithmetic::Divide) },
        {   (LPVOID)0x140462280L,
            (LPVOID *)&CryptoPP__ModularArithmeticDouble16_user,
            (LPVOID *)&CryptoPP__ModularArithmeticDouble16_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticDouble16_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::ModularArithmetic::*)(struct CryptoPP::Integer*))&CryptoPP::ModularArithmetic::Double) },
        {   (LPVOID)0x1404621e0L,
            (LPVOID *)&CryptoPP__ModularArithmeticEqual18_user,
            (LPVOID *)&CryptoPP__ModularArithmeticEqual18_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticEqual18_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::ModularArithmetic::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::ModularArithmetic::Equal) },
        {   (LPVOID)0x1405524b0L,
            (LPVOID *)&CryptoPP__ModularArithmeticGetModulus19_user,
            (LPVOID *)&CryptoPP__ModularArithmeticGetModulus19_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticGetModulus19_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::ModularArithmetic::*)())&CryptoPP::ModularArithmetic::GetModulus) },
        {   (LPVOID)0x1405ec360L,
            (LPVOID *)&CryptoPP__ModularArithmeticHalf20_user,
            (LPVOID *)&CryptoPP__ModularArithmeticHalf20_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticHalf20_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::ModularArithmetic::*)(struct CryptoPP::Integer*))&CryptoPP::ModularArithmetic::Half) },
        {   (LPVOID)0x140462240L,
            (LPVOID *)&CryptoPP__ModularArithmeticIdentity22_user,
            (LPVOID *)&CryptoPP__ModularArithmeticIdentity22_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticIdentity22_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::ModularArithmetic::*)())&CryptoPP::ModularArithmetic::Identity) },
        {   (LPVOID)0x1405ed000L,
            (LPVOID *)&CryptoPP__ModularArithmeticInverse23_user,
            (LPVOID *)&CryptoPP__ModularArithmeticInverse23_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticInverse23_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::ModularArithmetic::*)(struct CryptoPP::Integer*))&CryptoPP::ModularArithmetic::Inverse) },
        {   (LPVOID)0x140462060L,
            (LPVOID *)&CryptoPP__ModularArithmeticIsMontgomeryRepresentation25_user,
            (LPVOID *)&CryptoPP__ModularArithmeticIsMontgomeryRepresentation25_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticIsMontgomeryRepresentation25_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::ModularArithmetic::*)())&CryptoPP::ModularArithmetic::IsMontgomeryRepresentation) },
        {   (LPVOID)0x1404626e0L,
            (LPVOID *)&CryptoPP__ModularArithmeticIsUnit27_user,
            (LPVOID *)&CryptoPP__ModularArithmeticIsUnit27_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticIsUnit27_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::ModularArithmetic::*)(struct CryptoPP::Integer*))&CryptoPP::ModularArithmetic::IsUnit) },
        {   (LPVOID)0x14044f980L,
            (LPVOID *)&CryptoPP__ModularArithmeticMaxElementByteLength29_user,
            (LPVOID *)&CryptoPP__ModularArithmeticMaxElementByteLength29_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticMaxElementByteLength29_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::ModularArithmetic::*)())&CryptoPP::ModularArithmetic::MaxElementByteLength) },
        {   (LPVOID)0x1405ebf00L,
            (LPVOID *)&CryptoPP__ModularArithmeticctor_ModularArithmetic30_user,
            (LPVOID *)&CryptoPP__ModularArithmeticctor_ModularArithmetic30_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticctor_ModularArithmetic30_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ModularArithmetic::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::ModularArithmetic::ctor_ModularArithmetic) },
        {   (LPVOID)0x140461c70L,
            (LPVOID *)&CryptoPP__ModularArithmeticctor_ModularArithmetic32_user,
            (LPVOID *)&CryptoPP__ModularArithmeticctor_ModularArithmetic32_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticctor_ModularArithmetic32_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ModularArithmetic::*)(struct CryptoPP::Integer*))&CryptoPP::ModularArithmetic::ctor_ModularArithmetic) },
        {   (LPVOID)0x140461ed0L,
            (LPVOID *)&CryptoPP__ModularArithmeticctor_ModularArithmetic34_user,
            (LPVOID *)&CryptoPP__ModularArithmeticctor_ModularArithmetic34_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticctor_ModularArithmetic34_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ModularArithmetic::*)(struct CryptoPP::ModularArithmetic*))&CryptoPP::ModularArithmetic::ctor_ModularArithmetic) },
        {   (LPVOID)0x1404622e0L,
            (LPVOID *)&CryptoPP__ModularArithmeticMultiplicativeIdentity36_user,
            (LPVOID *)&CryptoPP__ModularArithmeticMultiplicativeIdentity36_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticMultiplicativeIdentity36_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::ModularArithmetic::*)())&CryptoPP::ModularArithmetic::MultiplicativeIdentity) },
        {   (LPVOID)0x1404627c0L,
            (LPVOID *)&CryptoPP__ModularArithmeticMultiplicativeInverse38_user,
            (LPVOID *)&CryptoPP__ModularArithmeticMultiplicativeInverse38_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticMultiplicativeInverse38_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::ModularArithmetic::*)(struct CryptoPP::Integer*))&CryptoPP::ModularArithmetic::MultiplicativeInverse) },
        {   (LPVOID)0x140462320L,
            (LPVOID *)&CryptoPP__ModularArithmeticMultiply40_user,
            (LPVOID *)&CryptoPP__ModularArithmeticMultiply40_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticMultiply40_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::ModularArithmetic::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::ModularArithmetic::Multiply) },
        {   (LPVOID)0x1405ece60L,
            (LPVOID *)&CryptoPP__ModularArithmeticReduce41_user,
            (LPVOID *)&CryptoPP__ModularArithmeticReduce41_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticReduce41_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::ModularArithmetic::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::ModularArithmetic::Reduce) },
        {   (LPVOID)0x1405ed3f0L,
            (LPVOID *)&CryptoPP__ModularArithmeticSimultaneousExponentiate42_user,
            (LPVOID *)&CryptoPP__ModularArithmeticSimultaneousExponentiate42_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticSimultaneousExponentiate42_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ModularArithmetic::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, unsigned int))&CryptoPP::ModularArithmetic::SimultaneousExponentiate) },
        {   (LPVOID)0x1404624d0L,
            (LPVOID *)&CryptoPP__ModularArithmeticSquare44_user,
            (LPVOID *)&CryptoPP__ModularArithmeticSquare44_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticSquare44_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::ModularArithmetic::*)(struct CryptoPP::Integer*))&CryptoPP::ModularArithmetic::Square) },
        {   (LPVOID)0x1405ecbf0L,
            (LPVOID *)&CryptoPP__ModularArithmeticSubtract45_user,
            (LPVOID *)&CryptoPP__ModularArithmeticSubtract45_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticSubtract45_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::ModularArithmetic::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::ModularArithmetic::Subtract) },
        {   (LPVOID)0x140462a50L,
            (LPVOID *)&CryptoPP__ModularArithmeticdtor_ModularArithmetic50_user,
            (LPVOID *)&CryptoPP__ModularArithmeticdtor_ModularArithmetic50_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModularArithmeticdtor_ModularArithmetic50_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ModularArithmetic::*)())&CryptoPP::ModularArithmetic::dtor_ModularArithmetic) },
        
        {   (LPVOID)0x14060f1e0L,
            (LPVOID *)&CryptoPP__ECPAdd1_user,
            (LPVOID *)&CryptoPP__ECPAdd1_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPAdd1_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ECPPoint*(CryptoPP::ECP::*)(struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*))&CryptoPP::ECP::Add) },
        {   (LPVOID)0x14060e070L,
            (LPVOID *)&CryptoPP__ECPBERDecodePoint2_user,
            (LPVOID *)&CryptoPP__ECPBERDecodePoint2_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPBERDecodePoint2_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ECPPoint*(CryptoPP::ECP::*)(short, struct CryptoPP::ECPPoint*))&CryptoPP::ECP::BERDecodePoint) },
        {   (LPVOID)0x1405802f0L,
            (LPVOID *)&CryptoPP__ECPCascadeMultiply3_user,
            (LPVOID *)&CryptoPP__ECPCascadeMultiply3_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPCascadeMultiply3_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ECPPoint*(CryptoPP::ECP::*)(struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*, struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*, struct CryptoPP::ECPPoint*))&CryptoPP::ECP::CascadeMultiply) },
        {   (LPVOID)0x1406114e0L,
            (LPVOID *)&CryptoPP__ECPCascadeScalarMultiply4_user,
            (LPVOID *)&CryptoPP__ECPCascadeScalarMultiply4_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPCascadeScalarMultiply4_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ECPPoint*(CryptoPP::ECP::*)(struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*, struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*))&CryptoPP::ECP::CascadeScalarMultiply) },
        {   (LPVOID)0x14060d5f0L,
            (LPVOID *)&CryptoPP__ECPDEREncode5_user,
            (LPVOID *)&CryptoPP__ECPDEREncode5_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPDEREncode5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ECP::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::ECP::DEREncode) },
        {   (LPVOID)0x14060e1f0L,
            (LPVOID *)&CryptoPP__ECPDEREncodePoint6_user,
            (LPVOID *)&CryptoPP__ECPDEREncodePoint6_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPDEREncodePoint6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ECP::*)(struct CryptoPP::BufferedTransformation*, struct CryptoPP::ECPPoint*, bool))&CryptoPP::ECP::DEREncodePoint) },
        {   (LPVOID)0x14060d7e0L,
            (LPVOID *)&CryptoPP__ECPDecodePoint7_user,
            (LPVOID *)&CryptoPP__ECPDecodePoint7_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPDecodePoint7_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::ECP::*)(struct CryptoPP::ECPPoint*, struct CryptoPP::BufferedTransformation*, uint64_t))&CryptoPP::ECP::DecodePoint) },
        {   (LPVOID)0x14060d720L,
            (LPVOID *)&CryptoPP__ECPDecodePoint8_user,
            (LPVOID *)&CryptoPP__ECPDecodePoint8_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPDecodePoint8_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::ECP::*)(struct CryptoPP::ECPPoint*, uint8_t*, uint64_t))&CryptoPP::ECP::DecodePoint) },
        {   (LPVOID)0x14060f720L,
            (LPVOID *)&CryptoPP__ECPDouble9_user,
            (LPVOID *)&CryptoPP__ECPDouble9_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPDouble9_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ECPPoint*(CryptoPP::ECP::*)(struct CryptoPP::ECPPoint*))&CryptoPP::ECP::Double) },
        {   (LPVOID)0x14060d2f0L,
            (LPVOID *)&CryptoPP__ECPctor_ECP10_user,
            (LPVOID *)&CryptoPP__ECPctor_ECP10_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPctor_ECP10_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ECP::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::ECP::ctor_ECP) },
        {   (LPVOID)0x14060cf50L,
            (LPVOID *)&CryptoPP__ECPctor_ECP11_user,
            (LPVOID *)&CryptoPP__ECPctor_ECP11_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPctor_ECP11_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ECP::*)(struct CryptoPP::ECP*, bool))&CryptoPP::ECP::ctor_ECP) },
        {   (LPVOID)0x14057a4d0L,
            (LPVOID *)&CryptoPP__ECPctor_ECP12_user,
            (LPVOID *)&CryptoPP__ECPctor_ECP12_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPctor_ECP12_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ECP::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::ECP::ctor_ECP) },
        {   (LPVOID)0x14057ed40L,
            (LPVOID *)&CryptoPP__ECPctor_ECP13_user,
            (LPVOID *)&CryptoPP__ECPctor_ECP13_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPctor_ECP13_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ECP::*)())&CryptoPP::ECP::ctor_ECP) },
        {   (LPVOID)0x14060ddb0L,
            (LPVOID *)&CryptoPP__ECPEncodePoint14_user,
            (LPVOID *)&CryptoPP__ECPEncodePoint14_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPEncodePoint14_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ECP::*)(struct CryptoPP::BufferedTransformation*, struct CryptoPP::ECPPoint*, bool))&CryptoPP::ECP::EncodePoint) },
        {   (LPVOID)0x14060df60L,
            (LPVOID *)&CryptoPP__ECPEncodePoint15_user,
            (LPVOID *)&CryptoPP__ECPEncodePoint15_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPEncodePoint15_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ECP::*)(uint8_t*, struct CryptoPP::ECPPoint*, bool))&CryptoPP::ECP::EncodePoint) },
        {   (LPVOID)0x14044fb50L,
            (LPVOID *)&CryptoPP__ECPEncodedPointSize17_user,
            (LPVOID *)&CryptoPP__ECPEncodedPointSize17_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPEncodedPointSize17_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::ECP::*)(bool))&CryptoPP::ECP::EncodedPointSize) },
        {   (LPVOID)0x14060efc0L,
            (LPVOID *)&CryptoPP__ECPEqual18_user,
            (LPVOID *)&CryptoPP__ECPEqual18_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPEqual18_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::ECP::*)(struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*))&CryptoPP::ECP::Equal) },
        {   (LPVOID)0x14057f2b0L,
            (LPVOID *)&CryptoPP__ECPFieldSize19_user,
            (LPVOID *)&CryptoPP__ECPFieldSize19_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPFieldSize19_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::ECP::*)(short))&CryptoPP::ECP::FieldSize) },
        {   (LPVOID)0x14044fbd0L,
            (LPVOID *)&CryptoPP__ECPGetField21_user,
            (LPVOID *)&CryptoPP__ECPGetField21_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPGetField21_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ModularArithmetic*(CryptoPP::ECP::*)())&CryptoPP::ECP::GetField) },
        {   (LPVOID)0x14060f0f0L,
            (LPVOID *)&CryptoPP__ECPIdentity22_user,
            (LPVOID *)&CryptoPP__ECPIdentity22_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPIdentity22_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ECPPoint*(CryptoPP::ECP::*)())&CryptoPP::ECP::Identity) },
        {   (LPVOID)0x14060f130L,
            (LPVOID *)&CryptoPP__ECPInverse23_user,
            (LPVOID *)&CryptoPP__ECPInverse23_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPInverse23_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ECPPoint*(CryptoPP::ECP::*)(struct CryptoPP::ECPPoint*))&CryptoPP::ECP::Inverse) },
        {   (LPVOID)0x14057a740L,
            (LPVOID *)&CryptoPP__ECPInversionIsFast24_user,
            (LPVOID *)&CryptoPP__ECPInversionIsFast24_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPInversionIsFast24_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::ECP::*)())&CryptoPP::ECP::InversionIsFast) },
        {   (LPVOID)0x14060fc40L,
            (LPVOID *)&CryptoPP__ECPScalarMultiply25_user,
            (LPVOID *)&CryptoPP__ECPScalarMultiply25_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPScalarMultiply25_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ECPPoint*(CryptoPP::ECP::*)(short, struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*))&CryptoPP::ECP::ScalarMultiply) },
        {   (LPVOID)0x14060fd90L,
            (LPVOID *)&CryptoPP__ECPSimultaneousMultiply26_user,
            (LPVOID *)&CryptoPP__ECPSimultaneousMultiply26_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPSimultaneousMultiply26_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ECP::*)(struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*, unsigned int))&CryptoPP::ECP::SimultaneousMultiply) },
        {   (LPVOID)0x14060e2a0L,
            (LPVOID *)&CryptoPP__ECPValidateParameters27_user,
            (LPVOID *)&CryptoPP__ECPValidateParameters27_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPValidateParameters27_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::ECP::*)(struct CryptoPP::RandomNumberGenerator*, unsigned int))&CryptoPP::ECP::ValidateParameters) },
        {   (LPVOID)0x14060ea20L,
            (LPVOID *)&CryptoPP__ECPVerifyPoint28_user,
            (LPVOID *)&CryptoPP__ECPVerifyPoint28_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPVerifyPoint28_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::ECP::*)(struct CryptoPP::ECPPoint*))&CryptoPP::ECP::VerifyPoint) },
        {   (LPVOID)0x14057a7b0L,
            (LPVOID *)&CryptoPP__ECPdtor_ECP29_user,
            (LPVOID *)&CryptoPP__ECPdtor_ECP29_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECPdtor_ECP29_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ECP::*)())&CryptoPP::ECP::dtor_ECP) },
        
        {   (LPVOID)0x140458e20L,
            (LPVOID *)&CryptoPP__member_ptrctor_member_ptr2_user,
            (LPVOID *)&CryptoPP__member_ptrctor_member_ptr2_next,
            (LPVOID)cast_pointer_function(CryptoPP__member_ptrctor_member_ptr2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::member_ptr<CryptoPP::ECP>::*)(struct CryptoPP::ECP*))&CryptoPP::member_ptr<CryptoPP::ECP>::ctor_member_ptr) },
        {   (LPVOID)0x14045eea0L,
            (LPVOID *)&CryptoPP__member_ptrdtor_member_ptr8_user,
            (LPVOID *)&CryptoPP__member_ptrdtor_member_ptr8_next,
            (LPVOID)cast_pointer_function(CryptoPP__member_ptrdtor_member_ptr8_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::member_ptr<CryptoPP::ECP>::*)())&CryptoPP::member_ptr<CryptoPP::ECP>::dtor_member_ptr) },
        
        {   (LPVOID)0x140458dc0L,
            (LPVOID *)&CryptoPP__value_ptrctor_value_ptr4_user,
            (LPVOID *)&CryptoPP__value_ptrctor_value_ptr4_next,
            (LPVOID)cast_pointer_function(CryptoPP__value_ptrctor_value_ptr4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::value_ptr<CryptoPP::ECP>::*)(struct CryptoPP::ECP*))&CryptoPP::value_ptr<CryptoPP::ECP>::ctor_value_ptr) },
        {   (LPVOID)0x14044a090L,
            (LPVOID *)&CryptoPP__value_ptrdtor_value_ptr6_user,
            (LPVOID *)&CryptoPP__value_ptrdtor_value_ptr6_next,
            (LPVOID)cast_pointer_function(CryptoPP__value_ptrdtor_value_ptr6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::value_ptr<CryptoPP::ECP>::*)())&CryptoPP::value_ptr<CryptoPP::ECP>::dtor_value_ptr) },
        
        {   (LPVOID)0x140457570L,
            (LPVOID *)&CryptoPP__EcPrecomputationBERDecodeElement2_user,
            (LPVOID *)&CryptoPP__EcPrecomputationBERDecodeElement2_next,
            (LPVOID)cast_pointer_function(CryptoPP__EcPrecomputationBERDecodeElement2_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ECPPoint*(CryptoPP::EcPrecomputation<CryptoPP::ECP>::*)(struct CryptoPP::ECPPoint*, struct CryptoPP::BufferedTransformation*))&CryptoPP::EcPrecomputation<CryptoPP::ECP>::BERDecodeElement) },
        {   (LPVOID)0x140456b70L,
            (LPVOID *)&CryptoPP__EcPrecomputationConvertIn4_user,
            (LPVOID *)&CryptoPP__EcPrecomputationConvertIn4_next,
            (LPVOID)cast_pointer_function(CryptoPP__EcPrecomputationConvertIn4_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ECPPoint*(CryptoPP::EcPrecomputation<CryptoPP::ECP>::*)(struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*))&CryptoPP::EcPrecomputation<CryptoPP::ECP>::ConvertIn) },
        {   (LPVOID)0x1404570b0L,
            (LPVOID *)&CryptoPP__EcPrecomputationConvertOut6_user,
            (LPVOID *)&CryptoPP__EcPrecomputationConvertOut6_next,
            (LPVOID)cast_pointer_function(CryptoPP__EcPrecomputationConvertOut6_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ECPPoint*(CryptoPP::EcPrecomputation<CryptoPP::ECP>::*)(struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*))&CryptoPP::EcPrecomputation<CryptoPP::ECP>::ConvertOut) },
        {   (LPVOID)0x140457600L,
            (LPVOID *)&CryptoPP__EcPrecomputationDEREncodeElement8_user,
            (LPVOID *)&CryptoPP__EcPrecomputationDEREncodeElement8_next,
            (LPVOID)cast_pointer_function(CryptoPP__EcPrecomputationDEREncodeElement8_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::EcPrecomputation<CryptoPP::ECP>::*)(struct CryptoPP::BufferedTransformation*, struct CryptoPP::ECPPoint*))&CryptoPP::EcPrecomputation<CryptoPP::ECP>::DEREncodeElement) },
        {   (LPVOID)0x140456a90L,
            (LPVOID *)&CryptoPP__EcPrecomputationctor_EcPrecomputation10_user,
            (LPVOID *)&CryptoPP__EcPrecomputationctor_EcPrecomputation10_next,
            (LPVOID)cast_pointer_function(CryptoPP__EcPrecomputationctor_EcPrecomputation10_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::EcPrecomputation<CryptoPP::ECP>::*)())&CryptoPP::EcPrecomputation<CryptoPP::ECP>::ctor_EcPrecomputation) },
        {   (LPVOID)0x140459430L,
            (LPVOID *)&CryptoPP__EcPrecomputationGetCurve12_user,
            (LPVOID *)&CryptoPP__EcPrecomputationGetCurve12_next,
            (LPVOID)cast_pointer_function(CryptoPP__EcPrecomputationGetCurve12_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ECP*(CryptoPP::EcPrecomputation<CryptoPP::ECP>::*)())&CryptoPP::EcPrecomputation<CryptoPP::ECP>::GetCurve) },
        {   (LPVOID)0x140457520L,
            (LPVOID *)&CryptoPP__EcPrecomputationGetGroup14_user,
            (LPVOID *)&CryptoPP__EcPrecomputationGetGroup14_next,
            (LPVOID)cast_pointer_function(CryptoPP__EcPrecomputationGetGroup14_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::AbstractGroup<CryptoPP::ECPPoint>*(CryptoPP::EcPrecomputation<CryptoPP::ECP>::*)())&CryptoPP::EcPrecomputation<CryptoPP::ECP>::GetGroup) },
        {   (LPVOID)0x140456b60L,
            (LPVOID *)&CryptoPP__EcPrecomputationNeedConversions16_user,
            (LPVOID *)&CryptoPP__EcPrecomputationNeedConversions16_next,
            (LPVOID)cast_pointer_function(CryptoPP__EcPrecomputationNeedConversions16_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::EcPrecomputation<CryptoPP::ECP>::*)())&CryptoPP::EcPrecomputation<CryptoPP::ECP>::NeedConversions) },
        {   (LPVOID)0x140449fe0L,
            (LPVOID *)&CryptoPP__EcPrecomputationdtor_EcPrecomputation20_user,
            (LPVOID *)&CryptoPP__EcPrecomputationdtor_EcPrecomputation20_next,
            (LPVOID)cast_pointer_function(CryptoPP__EcPrecomputationdtor_EcPrecomputation20_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::EcPrecomputation<CryptoPP::ECP>::*)())&CryptoPP::EcPrecomputation<CryptoPP::ECP>::dtor_EcPrecomputation) },
        
        {   (LPVOID)0x14044c4e0L,
            (LPVOID *)&CryptoPP__DL_FixedBasePrecomputationctor_DL_FixedBasePrecomputation2_user,
            (LPVOID *)&CryptoPP__DL_FixedBasePrecomputationctor_DL_FixedBasePrecomputation2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_FixedBasePrecomputationctor_DL_FixedBasePrecomputation2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_FixedBasePrecomputation<CryptoPP::ECPPoint>::*)())&CryptoPP::DL_FixedBasePrecomputation<CryptoPP::ECPPoint>::ctor_DL_FixedBasePrecomputation) },
        
        {   (LPVOID)0x14044be60L,
            (LPVOID *)&CryptoPP__DL_FixedBasePrecomputationImplctor_DL_FixedBasePrecomputationImpl2_user,
            (LPVOID *)&CryptoPP__DL_FixedBasePrecomputationImplctor_DL_FixedBasePrecomputationImpl2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_FixedBasePrecomputationImplctor_DL_FixedBasePrecomputationImpl2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_FixedBasePrecomputationImpl<CryptoPP::ECPPoint>::*)())&CryptoPP::DL_FixedBasePrecomputationImpl<CryptoPP::ECPPoint>::ctor_DL_FixedBasePrecomputationImpl) },
        {   (LPVOID)0x14044eac0L,
            (LPVOID *)&CryptoPP__DL_FixedBasePrecomputationImplGetBase4_user,
            (LPVOID *)&CryptoPP__DL_FixedBasePrecomputationImplGetBase4_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_FixedBasePrecomputationImplGetBase4_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ECPPoint*(CryptoPP::DL_FixedBasePrecomputationImpl<CryptoPP::ECPPoint>::*)(struct CryptoPP::DL_GroupPrecomputation<CryptoPP::ECPPoint>*))&CryptoPP::DL_FixedBasePrecomputationImpl<CryptoPP::ECPPoint>::GetBase) },
        {   (LPVOID)0x14044ea50L,
            (LPVOID *)&CryptoPP__DL_FixedBasePrecomputationImplIsInitialized6_user,
            (LPVOID *)&CryptoPP__DL_FixedBasePrecomputationImplIsInitialized6_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_FixedBasePrecomputationImplIsInitialized6_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::DL_FixedBasePrecomputationImpl<CryptoPP::ECPPoint>::*)())&CryptoPP::DL_FixedBasePrecomputationImpl<CryptoPP::ECPPoint>::IsInitialized) },
        {   (LPVOID)0x1404491c0L,
            (LPVOID *)&CryptoPP__DL_FixedBasePrecomputationImpldtor_DL_FixedBasePrecomputationImpl10_user,
            (LPVOID *)&CryptoPP__DL_FixedBasePrecomputationImpldtor_DL_FixedBasePrecomputationImpl10_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_FixedBasePrecomputationImpldtor_DL_FixedBasePrecomputationImpl10_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_FixedBasePrecomputationImpl<CryptoPP::ECPPoint>::*)())&CryptoPP::DL_FixedBasePrecomputationImpl<CryptoPP::ECPPoint>::dtor_DL_FixedBasePrecomputationImpl) },
        
        {   (LPVOID)0x14054c890L,
            (LPVOID *)&CryptoPP__OIDBERDecode1_user,
            (LPVOID *)&CryptoPP__OIDBERDecode1_next,
            (LPVOID)cast_pointer_function(CryptoPP__OIDBERDecode1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::OID::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::OID::BERDecode) },
        {   (LPVOID)0x14054c9e0L,
            (LPVOID *)&CryptoPP__OIDBERDecodeAndCheck2_user,
            (LPVOID *)&CryptoPP__OIDBERDecodeAndCheck2_next,
            (LPVOID)cast_pointer_function(CryptoPP__OIDBERDecodeAndCheck2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::OID::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::OID::BERDecodeAndCheck) },
        {   (LPVOID)0x14054c6f0L,
            (LPVOID *)&CryptoPP__OIDDEREncode3_user,
            (LPVOID *)&CryptoPP__OIDDEREncode3_next,
            (LPVOID)cast_pointer_function(CryptoPP__OIDDEREncode3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::OID::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::OID::DEREncode) },
        {   (LPVOID)0x14054c640L,
            (LPVOID *)&CryptoPP__OIDDecodeValue4_user,
            (LPVOID *)&CryptoPP__OIDDecodeValue4_next,
            (LPVOID)cast_pointer_function(CryptoPP__OIDDecodeValue4_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::OID::*)(struct CryptoPP::BufferedTransformation*, unsigned int*))&CryptoPP::OID::DecodeValue) },
        {   (LPVOID)0x14054c590L,
            (LPVOID *)&CryptoPP__OIDEncodeValue5_user,
            (LPVOID *)&CryptoPP__OIDEncodeValue5_next,
            (LPVOID)cast_pointer_function(CryptoPP__OIDEncodeValue5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::OID::*)(struct CryptoPP::BufferedTransformation*, unsigned int))&CryptoPP::OID::EncodeValue) },
        {   (LPVOID)0x14054e2e0L,
            (LPVOID *)&CryptoPP__OIDctor_OID6_user,
            (LPVOID *)&CryptoPP__OIDctor_OID6_next,
            (LPVOID)cast_pointer_function(CryptoPP__OIDctor_OID6_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::OID::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::OID::ctor_OID) },
        {   (LPVOID)0x14057cb20L,
            (LPVOID *)&CryptoPP__OIDctor_OID7_user,
            (LPVOID *)&CryptoPP__OIDctor_OID7_next,
            (LPVOID)cast_pointer_function(CryptoPP__OIDctor_OID7_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::OID::*)(struct CryptoPP::OID*))&CryptoPP::OID::ctor_OID) },
        {   (LPVOID)0x14057cf50L,
            (LPVOID *)&CryptoPP__OIDctor_OID8_user,
            (LPVOID *)&CryptoPP__OIDctor_OID8_next,
            (LPVOID)cast_pointer_function(CryptoPP__OIDctor_OID8_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::OID::*)(unsigned int))&CryptoPP::OID::ctor_OID) },
        {   (LPVOID)0x14044f6f0L,
            (LPVOID *)&CryptoPP__OIDctor_OID10_user,
            (LPVOID *)&CryptoPP__OIDctor_OID10_next,
            (LPVOID)cast_pointer_function(CryptoPP__OIDctor_OID10_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::OID::*)())&CryptoPP::OID::ctor_OID) },
        {   (LPVOID)0x1404499e0L,
            (LPVOID *)&CryptoPP__OIDdtor_OID14_user,
            (LPVOID *)&CryptoPP__OIDdtor_OID14_next,
            (LPVOID)cast_pointer_function(CryptoPP__OIDdtor_OID14_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::OID::*)())&CryptoPP::OID::dtor_OID) },
        
        {   (LPVOID)0x14044f7e0L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECAccessBasePrecomputation2_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECAccessBasePrecomputation2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_ECAccessBasePrecomputation2_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::DL_FixedBasePrecomputation<CryptoPP::ECPPoint>*(CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>::*)())&CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>::AccessBasePrecomputation) },
        {   (LPVOID)0x140580280L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECCascadeExponentiate3_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECCascadeExponentiate3_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_ECCascadeExponentiate3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>::*)(struct CryptoPP::Integer*))&CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>::CascadeExponentiate) },
        {   (LPVOID)0x14044f250L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECctor_DL_GroupParameters_EC5_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECctor_DL_GroupParameters_EC5_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_ECctor_DL_GroupParameters_EC5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>::*)())&CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>::ctor_DL_GroupParameters_EC) },
        {   (LPVOID)0x14044fc40L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECDecodeElement7_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECDecodeElement7_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_ECDecodeElement7_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ECPPoint*(CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>::*)(struct CryptoPP::ECPPoint*, char*, bool))&CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>::DecodeElement) },
        {   (LPVOID)0x14044f830L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECEncodeElement9_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECEncodeElement9_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_ECEncodeElement9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>::*)(bool, struct CryptoPP::ECPPoint*, char*))&CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>::EncodeElement) },
        {   (LPVOID)0x14044f820L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECFastSubgroupCheckAvailable11_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECFastSubgroupCheckAvailable11_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_ECFastSubgroupCheckAvailable11_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>::*)())&CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>::FastSubgroupCheckAvailable) },
        {   (LPVOID)0x14044f7c0L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECGetBasePrecomputation13_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECGetBasePrecomputation13_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_ECGetBasePrecomputation13_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::DL_FixedBasePrecomputation<CryptoPP::ECPPoint>*(CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>::*)())&CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>::GetBasePrecomputation) },
        {   (LPVOID)0x1404593e0L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECGetCurve15_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECGetCurve15_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_ECGetCurve15_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ECP*(CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>::*)())&CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>::GetCurve) },
        {   (LPVOID)0x14044f8f0L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECGetEncodedElementSize17_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECGetEncodedElementSize17_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_ECGetEncodedElementSize17_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>::*)(bool))&CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>::GetEncodedElementSize) },
        {   (LPVOID)0x140450170L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECGetMaxExponent19_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECGetMaxExponent19_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_ECGetMaxExponent19_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>::*)(struct CryptoPP::Integer*))&CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>::GetMaxExponent) },
        {   (LPVOID)0x14044f800L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECGetSubgroupOrder21_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECGetSubgroupOrder21_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_ECGetSubgroupOrder21_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>::*)())&CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>::GetSubgroupOrder) },
        {   (LPVOID)0x1404502a0L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECIsIdentity23_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECIsIdentity23_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_ECIsIdentity23_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>::*)(struct CryptoPP::ECPPoint*))&CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>::IsIdentity) },
        {   (LPVOID)0x140449860L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECdtor_DL_GroupParameters_EC32_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECdtor_DL_GroupParameters_EC32_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_ECdtor_DL_GroupParameters_EC32_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>::*)())&CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>::dtor_DL_GroupParameters_EC) },
        
        {   (LPVOID)0x140459590L,
            (LPVOID *)&CryptoPP__DL_KeyImplAccessGroupParameters2_user,
            (LPVOID *)&CryptoPP__DL_KeyImplAccessGroupParameters2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_KeyImplAccessGroupParameters2_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*(CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::*)())&CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::AccessGroupParameters) },
        {   (LPVOID)0x140452500L,
            (LPVOID *)&CryptoPP__DL_KeyImplBERDecodeAlgorithmParameters4_user,
            (LPVOID *)&CryptoPP__DL_KeyImplBERDecodeAlgorithmParameters4_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_KeyImplBERDecodeAlgorithmParameters4_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::BERDecodeAlgorithmParameters) },
        {   (LPVOID)0x140452560L,
            (LPVOID *)&CryptoPP__DL_KeyImplDEREncodeAlgorithmParameters6_user,
            (LPVOID *)&CryptoPP__DL_KeyImplDEREncodeAlgorithmParameters6_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_KeyImplDEREncodeAlgorithmParameters6_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::DEREncodeAlgorithmParameters) },
        {   (LPVOID)0x14044b450L,
            (LPVOID *)&CryptoPP__DL_KeyImplctor_DL_KeyImpl8_user,
            (LPVOID *)&CryptoPP__DL_KeyImplctor_DL_KeyImpl8_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_KeyImplctor_DL_KeyImpl8_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::*)())&CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::ctor_DL_KeyImpl) },
        {   (LPVOID)0x140452480L,
            (LPVOID *)&CryptoPP__DL_KeyImplGetAlgorithmID10_user,
            (LPVOID *)&CryptoPP__DL_KeyImplGetAlgorithmID10_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_KeyImplGetAlgorithmID10_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::*)(struct CryptoPP::OID*))&CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::GetAlgorithmID) },
        {   (LPVOID)0x140459570L,
            (LPVOID *)&CryptoPP__DL_KeyImplGetGroupParameters12_user,
            (LPVOID *)&CryptoPP__DL_KeyImplGetGroupParameters12_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_KeyImplGetGroupParameters12_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*(CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::*)())&CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::GetGroupParameters) },
        {   (LPVOID)0x1404490a0L,
            (LPVOID *)&CryptoPP__DL_KeyImpldtor_DL_KeyImpl21_user,
            (LPVOID *)&CryptoPP__DL_KeyImpldtor_DL_KeyImpl21_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_KeyImpldtor_DL_KeyImpl21_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::*)())&CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::dtor_DL_KeyImpl) },
        
        {   (LPVOID)0x14044a5c0L,
            (LPVOID *)&CryptoPP__DL_PrivateKey_ECctor_DL_PrivateKey_EC2_user,
            (LPVOID *)&CryptoPP__DL_PrivateKey_ECctor_DL_PrivateKey_EC2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_PrivateKey_ECctor_DL_PrivateKey_EC2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_PrivateKey_EC<CryptoPP::ECP>::*)())&CryptoPP::DL_PrivateKey_EC<CryptoPP::ECP>::ctor_DL_PrivateKey_EC) },
        {   (LPVOID)0x140448b00L,
            (LPVOID *)&CryptoPP__DL_PrivateKey_ECdtor_DL_PrivateKey_EC9_user,
            (LPVOID *)&CryptoPP__DL_PrivateKey_ECdtor_DL_PrivateKey_EC9_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_PrivateKey_ECdtor_DL_PrivateKey_EC9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_PrivateKey_EC<CryptoPP::ECP>::*)())&CryptoPP::DL_PrivateKey_EC<CryptoPP::ECP>::dtor_DL_PrivateKey_EC) },
        
        {   (LPVOID)0x140466f00L,
            (LPVOID *)&CryptoPP__DL_PublicKeyAssignFrom2_user,
            (LPVOID *)&CryptoPP__DL_PublicKeyAssignFrom2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_PublicKeyAssignFrom2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>::AssignFrom) },
        {   (LPVOID)0x140451380L,
            (LPVOID *)&CryptoPP__DL_PublicKeyCascadeExponentiateBaseAndPublicElement4_user,
            (LPVOID *)&CryptoPP__DL_PublicKeyCascadeExponentiateBaseAndPublicElement4_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_PublicKeyCascadeExponentiateBaseAndPublicElement4_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ECPPoint*(CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>::*)(struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>::CascadeExponentiateBaseAndPublicElement) },
        {   (LPVOID)0x14044bc90L,
            (LPVOID *)&CryptoPP__DL_PublicKeyctor_DL_PublicKey6_user,
            (LPVOID *)&CryptoPP__DL_PublicKeyctor_DL_PublicKey6_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_PublicKeyctor_DL_PublicKey6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>::*)())&CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>::ctor_DL_PublicKey) },
        {   (LPVOID)0x1404512a0L,
            (LPVOID *)&CryptoPP__DL_PublicKeyExponentiatePublicElement8_user,
            (LPVOID *)&CryptoPP__DL_PublicKeyExponentiatePublicElement8_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_PublicKeyExponentiatePublicElement8_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ECPPoint*(CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>::*)(struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*))&CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>::ExponentiatePublicElement) },
        {   (LPVOID)0x140451150L,
            (LPVOID *)&CryptoPP__DL_PublicKeyGetPublicElement10_user,
            (LPVOID *)&CryptoPP__DL_PublicKeyGetPublicElement10_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_PublicKeyGetPublicElement10_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ECPPoint*(CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>::*)())&CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>::GetPublicElement) },
        {   (LPVOID)0x140465f80L,
            (LPVOID *)&CryptoPP__DL_PublicKeyGetVoidValue12_user,
            (LPVOID *)&CryptoPP__DL_PublicKeyGetVoidValue12_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_PublicKeyGetVoidValue12_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>::*)(char*, struct type_info*, void*))&CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>::GetVoidValue) },
        {   (LPVOID)0x1404511f0L,
            (LPVOID *)&CryptoPP__DL_PublicKeySetPublicElement14_user,
            (LPVOID *)&CryptoPP__DL_PublicKeySetPublicElement14_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_PublicKeySetPublicElement14_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>::*)(struct CryptoPP::ECPPoint*))&CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>::SetPublicElement) },
        
        {   (LPVOID)0x14044c970L,
            (LPVOID *)&CryptoPP__PublicKeyctor_PublicKey2_user,
            (LPVOID *)&CryptoPP__PublicKeyctor_PublicKey2_next,
            (LPVOID)cast_pointer_function(CryptoPP__PublicKeyctor_PublicKey2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PublicKey::*)())&CryptoPP::PublicKey::ctor_PublicKey) },
        {   (LPVOID)0x140449de0L,
            (LPVOID *)&CryptoPP__PublicKeydtor_PublicKey6_user,
            (LPVOID *)&CryptoPP__PublicKeydtor_PublicKey6_next,
            (LPVOID)cast_pointer_function(CryptoPP__PublicKeydtor_PublicKey6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PublicKey::*)())&CryptoPP::PublicKey::dtor_PublicKey) },
        
        {   (LPVOID)0x14044c760L,
            (LPVOID *)&CryptoPP__ASN1CryptoMaterialctor_ASN1CryptoMaterial2_user,
            (LPVOID *)&CryptoPP__ASN1CryptoMaterialctor_ASN1CryptoMaterial2_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1CryptoMaterialctor_ASN1CryptoMaterial2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>::*)())&CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>::ctor_ASN1CryptoMaterial) },
        {   (LPVOID)0x14044f1e0L,
            (LPVOID *)&CryptoPP__ASN1CryptoMaterialLoad4_user,
            (LPVOID *)&CryptoPP__ASN1CryptoMaterialLoad4_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1CryptoMaterialLoad4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>::Load) },
        {   (LPVOID)0x14044f170L,
            (LPVOID *)&CryptoPP__ASN1CryptoMaterialSave6_user,
            (LPVOID *)&CryptoPP__ASN1CryptoMaterialSave6_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1CryptoMaterialSave6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>::Save) },
        {   (LPVOID)0x140449a20L,
            (LPVOID *)&CryptoPP__ASN1CryptoMaterialdtor_ASN1CryptoMaterial10_user,
            (LPVOID *)&CryptoPP__ASN1CryptoMaterialdtor_ASN1CryptoMaterial10_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1CryptoMaterialdtor_ASN1CryptoMaterial10_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>::*)())&CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>::dtor_ASN1CryptoMaterial) },
        
        {   (LPVOID)0x14054d870L,
            (LPVOID *)&CryptoPP__X509PublicKeyBERDecode1_user,
            (LPVOID *)&CryptoPP__X509PublicKeyBERDecode1_next,
            (LPVOID)cast_pointer_function(CryptoPP__X509PublicKeyBERDecode1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::X509PublicKey::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::X509PublicKey::BERDecode) },
        {   (LPVOID)0x14044c440L,
            (LPVOID *)&CryptoPP__X509PublicKeyBERDecodeAlgorithmParameters3_user,
            (LPVOID *)&CryptoPP__X509PublicKeyBERDecodeAlgorithmParameters3_next,
            (LPVOID)cast_pointer_function(CryptoPP__X509PublicKeyBERDecodeAlgorithmParameters3_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::X509PublicKey::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::X509PublicKey::BERDecodeAlgorithmParameters) },
        {   (LPVOID)0x14054dad0L,
            (LPVOID *)&CryptoPP__X509PublicKeyDEREncode4_user,
            (LPVOID *)&CryptoPP__X509PublicKeyDEREncode4_next,
            (LPVOID)cast_pointer_function(CryptoPP__X509PublicKeyDEREncode4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::X509PublicKey::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::X509PublicKey::DEREncode) },
        {   (LPVOID)0x14044c490L,
            (LPVOID *)&CryptoPP__X509PublicKeyDEREncodeAlgorithmParameters6_user,
            (LPVOID *)&CryptoPP__X509PublicKeyDEREncodeAlgorithmParameters6_next,
            (LPVOID)cast_pointer_function(CryptoPP__X509PublicKeyDEREncodeAlgorithmParameters6_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::X509PublicKey::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::X509PublicKey::DEREncodeAlgorithmParameters) },
        {   (LPVOID)0x14044c370L,
            (LPVOID *)&CryptoPP__X509PublicKeyctor_X509PublicKey8_user,
            (LPVOID *)&CryptoPP__X509PublicKeyctor_X509PublicKey8_next,
            (LPVOID)cast_pointer_function(CryptoPP__X509PublicKeyctor_X509PublicKey8_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::X509PublicKey::*)())&CryptoPP::X509PublicKey::ctor_X509PublicKey) },
        {   (LPVOID)0x140449610L,
            (LPVOID *)&CryptoPP__X509PublicKeydtor_X509PublicKey17_user,
            (LPVOID *)&CryptoPP__X509PublicKeydtor_X509PublicKey17_next,
            (LPVOID)cast_pointer_function(CryptoPP__X509PublicKeydtor_X509PublicKey17_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::X509PublicKey::*)())&CryptoPP::X509PublicKey::dtor_X509PublicKey) },
        
        {   (LPVOID)0x140459550L,
            (LPVOID *)&CryptoPP__DL_KeyImplAccessGroupParameters2_user,
            (LPVOID *)&CryptoPP__DL_KeyImplAccessGroupParameters2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_KeyImplAccessGroupParameters2_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*(CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::*)())&CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::AccessGroupParameters) },
        {   (LPVOID)0x140451530L,
            (LPVOID *)&CryptoPP__DL_KeyImplBERDecodeAlgorithmParameters4_user,
            (LPVOID *)&CryptoPP__DL_KeyImplBERDecodeAlgorithmParameters4_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_KeyImplBERDecodeAlgorithmParameters4_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::BERDecodeAlgorithmParameters) },
        {   (LPVOID)0x140451590L,
            (LPVOID *)&CryptoPP__DL_KeyImplDEREncodeAlgorithmParameters6_user,
            (LPVOID *)&CryptoPP__DL_KeyImplDEREncodeAlgorithmParameters6_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_KeyImplDEREncodeAlgorithmParameters6_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::DEREncodeAlgorithmParameters) },
        {   (LPVOID)0x14044bce0L,
            (LPVOID *)&CryptoPP__DL_KeyImplctor_DL_KeyImpl8_user,
            (LPVOID *)&CryptoPP__DL_KeyImplctor_DL_KeyImpl8_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_KeyImplctor_DL_KeyImpl8_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::*)())&CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::ctor_DL_KeyImpl) },
        {   (LPVOID)0x1404514b0L,
            (LPVOID *)&CryptoPP__DL_KeyImplGetAlgorithmID10_user,
            (LPVOID *)&CryptoPP__DL_KeyImplGetAlgorithmID10_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_KeyImplGetAlgorithmID10_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::*)(struct CryptoPP::OID*))&CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::GetAlgorithmID) },
        {   (LPVOID)0x140459530L,
            (LPVOID *)&CryptoPP__DL_KeyImplGetGroupParameters12_user,
            (LPVOID *)&CryptoPP__DL_KeyImplGetGroupParameters12_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_KeyImplGetGroupParameters12_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*(CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::*)())&CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::GetGroupParameters) },
        {   (LPVOID)0x140449130L,
            (LPVOID *)&CryptoPP__DL_KeyImpldtor_DL_KeyImpl21_user,
            (LPVOID *)&CryptoPP__DL_KeyImpldtor_DL_KeyImpl21_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_KeyImpldtor_DL_KeyImpl21_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::*)())&CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>::dtor_DL_KeyImpl) },
        
        {   (LPVOID)0x14044aee0L,
            (LPVOID *)&CryptoPP__DL_PublicKey_ECctor_DL_PublicKey_EC2_user,
            (LPVOID *)&CryptoPP__DL_PublicKey_ECctor_DL_PublicKey_EC2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_PublicKey_ECctor_DL_PublicKey_EC2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_PublicKey_EC<CryptoPP::ECP>::*)())&CryptoPP::DL_PublicKey_EC<CryptoPP::ECP>::ctor_DL_PublicKey_EC) },
        {   (LPVOID)0x140448b90L,
            (LPVOID *)&CryptoPP__DL_PublicKey_ECdtor_DL_PublicKey_EC9_user,
            (LPVOID *)&CryptoPP__DL_PublicKey_ECdtor_DL_PublicKey_EC9_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_PublicKey_ECdtor_DL_PublicKey_EC9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_PublicKey_EC<CryptoPP::ECP>::*)())&CryptoPP::DL_PublicKey_EC<CryptoPP::ECP>::dtor_DL_PublicKey_EC) },
        
        {   (LPVOID)0x14045a250L,
            (LPVOID *)&CryptoPP__VariableKeyLengthStaticGetValidKeyLength2_user,
            (LPVOID *)&CryptoPP__VariableKeyLengthStaticGetValidKeyLength2_next,
            (LPVOID)cast_pointer_function(CryptoPP__VariableKeyLengthStaticGetValidKeyLength2_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::VariableKeyLength<16,16,32,8,4,0>::*)(uint64_t))&CryptoPP::VariableKeyLength<16,16,32,8,4,0>::StaticGetValidKeyLength) },
        
        {   (LPVOID)0x140459b40L,
            (LPVOID *)&CryptoPP__Rijndael_InfoStaticAlgorithmName2_user,
            (LPVOID *)&CryptoPP__Rijndael_InfoStaticAlgorithmName2_next,
            (LPVOID)cast_pointer_function(CryptoPP__Rijndael_InfoStaticAlgorithmName2_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Rijndael_Info::*)())&CryptoPP::Rijndael_Info::StaticAlgorithmName) },
        
        {   (LPVOID)0x14045a0a0L,
            (LPVOID *)&CryptoPP__TwoBasesctor_TwoBases2_user,
            (LPVOID *)&CryptoPP__TwoBasesctor_TwoBases2_next,
            (LPVOID)cast_pointer_function(CryptoPP__TwoBasesctor_TwoBases2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::TwoBases<CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>,CryptoPP::Rijndael_Info>::*)(struct CryptoPP::TwoBases<CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>,CryptoPP::Rijndael_Info>*))&CryptoPP::TwoBases<CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>,CryptoPP::Rijndael_Info>::ctor_TwoBases) },
        {   (LPVOID)0x14045c8c0L,
            (LPVOID *)&CryptoPP__TwoBasesctor_TwoBases4_user,
            (LPVOID *)&CryptoPP__TwoBasesctor_TwoBases4_next,
            (LPVOID)cast_pointer_function(CryptoPP__TwoBasesctor_TwoBases4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::TwoBases<CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>,CryptoPP::Rijndael_Info>::*)())&CryptoPP::TwoBases<CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>,CryptoPP::Rijndael_Info>::ctor_TwoBases) },
        {   (LPVOID)0x14044a440L,
            (LPVOID *)&CryptoPP__TwoBasesdtor_TwoBases6_user,
            (LPVOID *)&CryptoPP__TwoBasesdtor_TwoBases6_next,
            (LPVOID)cast_pointer_function(CryptoPP__TwoBasesdtor_TwoBases6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::TwoBases<CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>,CryptoPP::Rijndael_Info>::*)())&CryptoPP::TwoBases<CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>,CryptoPP::Rijndael_Info>::dtor_TwoBases) },
        
        {   (LPVOID)0x140459df0L,
            (LPVOID *)&CryptoPP__ClonableImplctor_ClonableImpl2_user,
            (LPVOID *)&CryptoPP__ClonableImplctor_ClonableImpl2_next,
            (LPVOID)cast_pointer_function(CryptoPP__ClonableImplctor_ClonableImpl2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::Rijndael::Dec>::*)(struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::Rijndael::Dec>*))&CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::Rijndael::Dec>::ctor_ClonableImpl) },
        {   (LPVOID)0x14045b8e0L,
            (LPVOID *)&CryptoPP__ClonableImplctor_ClonableImpl4_user,
            (LPVOID *)&CryptoPP__ClonableImplctor_ClonableImpl4_next,
            (LPVOID)cast_pointer_function(CryptoPP__ClonableImplctor_ClonableImpl4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::Rijndael::Dec>::*)())&CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::Rijndael::Dec>::ctor_ClonableImpl) },
        {   (LPVOID)0x140459c30L,
            (LPVOID *)&CryptoPP__ClonableImplClone6_user,
            (LPVOID *)&CryptoPP__ClonableImplClone6_next,
            (LPVOID)cast_pointer_function(CryptoPP__ClonableImplClone6_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Clonable*(CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::Rijndael::Dec>::*)())&CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::Rijndael::Dec>::Clone) },
        {   (LPVOID)0x140449370L,
            (LPVOID *)&CryptoPP__ClonableImpldtor_ClonableImpl8_user,
            (LPVOID *)&CryptoPP__ClonableImpldtor_ClonableImpl8_next,
            (LPVOID)cast_pointer_function(CryptoPP__ClonableImpldtor_ClonableImpl8_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::Rijndael::Dec>::*)())&CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::Rijndael::Dec>::dtor_ClonableImpl) },
        
        {   (LPVOID)0x140459d00L,
            (LPVOID *)&CryptoPP__BlockCipherFinalctor_BlockCipherFinal2_user,
            (LPVOID *)&CryptoPP__BlockCipherFinalctor_BlockCipherFinal2_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockCipherFinalctor_BlockCipherFinal2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>::*)(struct CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>*))&CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>::ctor_BlockCipherFinal) },
        {   (LPVOID)0x140459860L,
            (LPVOID *)&CryptoPP__BlockCipherFinalctor_BlockCipherFinal4_user,
            (LPVOID *)&CryptoPP__BlockCipherFinalctor_BlockCipherFinal4_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockCipherFinalctor_BlockCipherFinal4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>::*)())&CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>::ctor_BlockCipherFinal) },
        {   (LPVOID)0x140459c20L,
            (LPVOID *)&CryptoPP__BlockCipherFinalIsForwardTransformation6_user,
            (LPVOID *)&CryptoPP__BlockCipherFinalIsForwardTransformation6_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockCipherFinalIsForwardTransformation6_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>::*)())&CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>::IsForwardTransformation) },
        {   (LPVOID)0x140448f50L,
            (LPVOID *)&CryptoPP__BlockCipherFinaldtor_BlockCipherFinal11_user,
            (LPVOID *)&CryptoPP__BlockCipherFinaldtor_BlockCipherFinal11_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockCipherFinaldtor_BlockCipherFinal11_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>::*)())&CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>::dtor_BlockCipherFinal) },
        
        {   (LPVOID)0x140452730L,
            (LPVOID *)&CryptoPP__StreamTransformationGetOptimalBlockSizeUsed2_user,
            (LPVOID *)&CryptoPP__StreamTransformationGetOptimalBlockSizeUsed2_next,
            (LPVOID)cast_pointer_function(CryptoPP__StreamTransformationGetOptimalBlockSizeUsed2_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::StreamTransformation::*)())&CryptoPP::StreamTransformation::GetOptimalBlockSizeUsed) },
        {   (LPVOID)0x14061d0d0L,
            (LPVOID *)&CryptoPP__StreamTransformationMandatoryBlockSize3_user,
            (LPVOID *)&CryptoPP__StreamTransformationMandatoryBlockSize3_next,
            (LPVOID)cast_pointer_function(CryptoPP__StreamTransformationMandatoryBlockSize3_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::StreamTransformation::*)())&CryptoPP::StreamTransformation::MandatoryBlockSize) },
        {   (LPVOID)0x14055b1f0L,
            (LPVOID *)&CryptoPP__StreamTransformationMinLastBlockSize4_user,
            (LPVOID *)&CryptoPP__StreamTransformationMinLastBlockSize4_next,
            (LPVOID)cast_pointer_function(CryptoPP__StreamTransformationMinLastBlockSize4_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::StreamTransformation::*)())&CryptoPP::StreamTransformation::MinLastBlockSize) },
        {   (LPVOID)0x1404526e0L,
            (LPVOID *)&CryptoPP__StreamTransformationOptimalBlockSize6_user,
            (LPVOID *)&CryptoPP__StreamTransformationOptimalBlockSize6_next,
            (LPVOID)cast_pointer_function(CryptoPP__StreamTransformationOptimalBlockSize6_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::StreamTransformation::*)())&CryptoPP::StreamTransformation::OptimalBlockSize) },
        {   (LPVOID)0x1405f3e10L,
            (LPVOID *)&CryptoPP__StreamTransformationProcessLastBlock7_user,
            (LPVOID *)&CryptoPP__StreamTransformationProcessLastBlock7_next,
            (LPVOID)cast_pointer_function(CryptoPP__StreamTransformationProcessLastBlock7_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::StreamTransformation::*)(uint8_t*, uint8_t*, uint64_t))&CryptoPP::StreamTransformation::ProcessLastBlock) },
        {   (LPVOID)0x1406001e0L,
            (LPVOID *)&CryptoPP__StreamTransformationProcessString8_user,
            (LPVOID *)&CryptoPP__StreamTransformationProcessString8_next,
            (LPVOID)cast_pointer_function(CryptoPP__StreamTransformationProcessString8_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::StreamTransformation::*)(uint8_t*, uint8_t*, uint64_t))&CryptoPP::StreamTransformation::ProcessString) },
        {   (LPVOID)0x140600180L,
            (LPVOID *)&CryptoPP__StreamTransformationProcessString9_user,
            (LPVOID *)&CryptoPP__StreamTransformationProcessString9_next,
            (LPVOID)cast_pointer_function(CryptoPP__StreamTransformationProcessString9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::StreamTransformation::*)(uint8_t*, uint64_t))&CryptoPP::StreamTransformation::ProcessString) },
        {   (LPVOID)0x140452740L,
            (LPVOID *)&CryptoPP__StreamTransformationSeek11_user,
            (LPVOID *)&CryptoPP__StreamTransformationSeek11_next,
            (LPVOID)cast_pointer_function(CryptoPP__StreamTransformationSeek11_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::StreamTransformation::*)(uint64_t))&CryptoPP::StreamTransformation::Seek) },
        {   (LPVOID)0x140458340L,
            (LPVOID *)&CryptoPP__StreamTransformationctor_StreamTransformation13_user,
            (LPVOID *)&CryptoPP__StreamTransformationctor_StreamTransformation13_next,
            (LPVOID)cast_pointer_function(CryptoPP__StreamTransformationctor_StreamTransformation13_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::StreamTransformation::*)())&CryptoPP::StreamTransformation::ctor_StreamTransformation) },
        {   (LPVOID)0x14044a110L,
            (LPVOID *)&CryptoPP__StreamTransformationdtor_StreamTransformation15_user,
            (LPVOID *)&CryptoPP__StreamTransformationdtor_StreamTransformation15_next,
            (LPVOID)cast_pointer_function(CryptoPP__StreamTransformationdtor_StreamTransformation15_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::StreamTransformation::*)())&CryptoPP::StreamTransformation::dtor_StreamTransformation) },
        
        {   (LPVOID)0x140453140L,
            (LPVOID *)&CryptoPP__SimpleKeyedTransformationGetAlgorithm2_user,
            (LPVOID *)&CryptoPP__SimpleKeyedTransformationGetAlgorithm2_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyedTransformationGetAlgorithm2_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Algorithm*(CryptoPP::SimpleKeyedTransformation<CryptoPP::StreamTransformation>::*)())&CryptoPP::SimpleKeyedTransformation<CryptoPP::StreamTransformation>::GetAlgorithm) },
        {   (LPVOID)0x1404581b0L,
            (LPVOID *)&CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_user,
            (LPVOID *)&CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SimpleKeyedTransformation<CryptoPP::StreamTransformation>::*)())&CryptoPP::SimpleKeyedTransformation<CryptoPP::StreamTransformation>::ctor_SimpleKeyedTransformation) },
        {   (LPVOID)0x140449e30L,
            (LPVOID *)&CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation6_user,
            (LPVOID *)&CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation6_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SimpleKeyedTransformation<CryptoPP::StreamTransformation>::*)())&CryptoPP::SimpleKeyedTransformation<CryptoPP::StreamTransformation>::dtor_SimpleKeyedTransformation) },
        
        {   (LPVOID)0x140452b20L,
            (LPVOID *)&CryptoPP__CipherModeBaseBlockSize2_user,
            (LPVOID *)&CryptoPP__CipherModeBaseBlockSize2_next,
            (LPVOID)cast_pointer_function(CryptoPP__CipherModeBaseBlockSize2_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::CipherModeBase::*)())&CryptoPP::CipherModeBase::BlockSize) },
        {   (LPVOID)0x140457fe0L,
            (LPVOID *)&CryptoPP__CipherModeBasector_CipherModeBase4_user,
            (LPVOID *)&CryptoPP__CipherModeBasector_CipherModeBase4_next,
            (LPVOID)cast_pointer_function(CryptoPP__CipherModeBasector_CipherModeBase4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CipherModeBase::*)())&CryptoPP::CipherModeBase::ctor_CipherModeBase) },
        {   (LPVOID)0x140452950L,
            (LPVOID *)&CryptoPP__CipherModeBaseDefaultKeyLength6_user,
            (LPVOID *)&CryptoPP__CipherModeBaseDefaultKeyLength6_next,
            (LPVOID)cast_pointer_function(CryptoPP__CipherModeBaseDefaultKeyLength6_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::CipherModeBase::*)())&CryptoPP::CipherModeBase::DefaultKeyLength) },
        {   (LPVOID)0x1404529b0L,
            (LPVOID *)&CryptoPP__CipherModeBaseGetValidKeyLength8_user,
            (LPVOID *)&CryptoPP__CipherModeBaseGetValidKeyLength8_next,
            (LPVOID)cast_pointer_function(CryptoPP__CipherModeBaseGetValidKeyLength8_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::CipherModeBase::*)(uint64_t))&CryptoPP::CipherModeBase::GetValidKeyLength) },
        {   (LPVOID)0x140452ad0L,
            (LPVOID *)&CryptoPP__CipherModeBaseIVSize10_user,
            (LPVOID *)&CryptoPP__CipherModeBaseIVSize10_next,
            (LPVOID)cast_pointer_function(CryptoPP__CipherModeBaseIVSize10_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::CipherModeBase::*)())&CryptoPP::CipherModeBase::IVSize) },
        {   (LPVOID)0x140452a20L,
            (LPVOID *)&CryptoPP__CipherModeBaseIsValidKeyLength12_user,
            (LPVOID *)&CryptoPP__CipherModeBaseIsValidKeyLength12_next,
            (LPVOID)cast_pointer_function(CryptoPP__CipherModeBaseIsValidKeyLength12_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::CipherModeBase::*)(uint64_t))&CryptoPP::CipherModeBase::IsValidKeyLength) },
        {   (LPVOID)0x1404528f0L,
            (LPVOID *)&CryptoPP__CipherModeBaseMaxKeyLength14_user,
            (LPVOID *)&CryptoPP__CipherModeBaseMaxKeyLength14_next,
            (LPVOID)cast_pointer_function(CryptoPP__CipherModeBaseMaxKeyLength14_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::CipherModeBase::*)())&CryptoPP::CipherModeBase::MaxKeyLength) },
        {   (LPVOID)0x140452890L,
            (LPVOID *)&CryptoPP__CipherModeBaseMinKeyLength16_user,
            (LPVOID *)&CryptoPP__CipherModeBaseMinKeyLength16_next,
            (LPVOID)cast_pointer_function(CryptoPP__CipherModeBaseMinKeyLength16_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::CipherModeBase::*)())&CryptoPP::CipherModeBase::MinKeyLength) },
        {   (LPVOID)0x140452a90L,
            (LPVOID *)&CryptoPP__CipherModeBaseOptimalDataAlignment18_user,
            (LPVOID *)&CryptoPP__CipherModeBaseOptimalDataAlignment18_next,
            (LPVOID)cast_pointer_function(CryptoPP__CipherModeBaseOptimalDataAlignment18_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::CipherModeBase::*)())&CryptoPP::CipherModeBase::OptimalDataAlignment) },
        {   (LPVOID)0x1404530d0L,
            (LPVOID *)&CryptoPP__CipherModeBaseResizeBuffers20_user,
            (LPVOID *)&CryptoPP__CipherModeBaseResizeBuffers20_next,
            (LPVOID)cast_pointer_function(CryptoPP__CipherModeBaseResizeBuffers20_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CipherModeBase::*)())&CryptoPP::CipherModeBase::ResizeBuffers) },
        {   (LPVOID)0x140452bb0L,
            (LPVOID *)&CryptoPP__CipherModeBaseSetFeedbackSize22_user,
            (LPVOID *)&CryptoPP__CipherModeBaseSetFeedbackSize22_next,
            (LPVOID)cast_pointer_function(CryptoPP__CipherModeBaseSetFeedbackSize22_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CipherModeBase::*)(unsigned int))&CryptoPP::CipherModeBase::SetFeedbackSize) },
        {   (LPVOID)0x140449b70L,
            (LPVOID *)&CryptoPP__CipherModeBasedtor_CipherModeBase24_user,
            (LPVOID *)&CryptoPP__CipherModeBasedtor_CipherModeBase24_next,
            (LPVOID)cast_pointer_function(CryptoPP__CipherModeBasedtor_CipherModeBase24_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CipherModeBase::*)())&CryptoPP::CipherModeBase::dtor_CipherModeBase) },
        
        {   (LPVOID)0x140457dd0L,
            (LPVOID *)&CryptoPP__BlockOrientedCipherModeBasector_BlockOrientedCipherModeBase2_user,
            (LPVOID *)&CryptoPP__BlockOrientedCipherModeBasector_BlockOrientedCipherModeBase2_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockOrientedCipherModeBasector_BlockOrientedCipherModeBase2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BlockOrientedCipherModeBase::*)())&CryptoPP::BlockOrientedCipherModeBase::ctor_BlockOrientedCipherModeBase) },
        {   (LPVOID)0x140452ec0L,
            (LPVOID *)&CryptoPP__BlockOrientedCipherModeBaseIsForwardTransformation4_user,
            (LPVOID *)&CryptoPP__BlockOrientedCipherModeBaseIsForwardTransformation4_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockOrientedCipherModeBaseIsForwardTransformation4_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::BlockOrientedCipherModeBase::*)())&CryptoPP::BlockOrientedCipherModeBase::IsForwardTransformation) },
        {   (LPVOID)0x140452ea0L,
            (LPVOID *)&CryptoPP__BlockOrientedCipherModeBaseIsRandomAccess6_user,
            (LPVOID *)&CryptoPP__BlockOrientedCipherModeBaseIsRandomAccess6_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockOrientedCipherModeBaseIsRandomAccess6_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::BlockOrientedCipherModeBase::*)())&CryptoPP::BlockOrientedCipherModeBase::IsRandomAccess) },
        {   (LPVOID)0x140452eb0L,
            (LPVOID *)&CryptoPP__BlockOrientedCipherModeBaseIsSelfInverting8_user,
            (LPVOID *)&CryptoPP__BlockOrientedCipherModeBaseIsSelfInverting8_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockOrientedCipherModeBaseIsSelfInverting8_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::BlockOrientedCipherModeBase::*)())&CryptoPP::BlockOrientedCipherModeBase::IsSelfInverting) },
        {   (LPVOID)0x140452e60L,
            (LPVOID *)&CryptoPP__BlockOrientedCipherModeBaseMandatoryBlockSize10_user,
            (LPVOID *)&CryptoPP__BlockOrientedCipherModeBaseMandatoryBlockSize10_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockOrientedCipherModeBaseMandatoryBlockSize10_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::BlockOrientedCipherModeBase::*)())&CryptoPP::BlockOrientedCipherModeBase::MandatoryBlockSize) },
        {   (LPVOID)0x140618f70L,
            (LPVOID *)&CryptoPP__BlockOrientedCipherModeBaseProcessData11_user,
            (LPVOID *)&CryptoPP__BlockOrientedCipherModeBaseProcessData11_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockOrientedCipherModeBaseProcessData11_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BlockOrientedCipherModeBase::*)(uint8_t*, uint8_t*, uint64_t))&CryptoPP::BlockOrientedCipherModeBase::ProcessData) },
        {   (LPVOID)0x14061a460L,
            (LPVOID *)&CryptoPP__BlockOrientedCipherModeBaseRequireAlignedInput12_user,
            (LPVOID *)&CryptoPP__BlockOrientedCipherModeBaseRequireAlignedInput12_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockOrientedCipherModeBaseRequireAlignedInput12_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::BlockOrientedCipherModeBase::*)())&CryptoPP::BlockOrientedCipherModeBase::RequireAlignedInput) },
        {   (LPVOID)0x140453060L,
            (LPVOID *)&CryptoPP__BlockOrientedCipherModeBaseResizeBuffers14_user,
            (LPVOID *)&CryptoPP__BlockOrientedCipherModeBaseResizeBuffers14_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockOrientedCipherModeBaseResizeBuffers14_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BlockOrientedCipherModeBase::*)())&CryptoPP::BlockOrientedCipherModeBase::ResizeBuffers) },
        {   (LPVOID)0x140452f20L,
            (LPVOID *)&CryptoPP__BlockOrientedCipherModeBaseResynchronize16_user,
            (LPVOID *)&CryptoPP__BlockOrientedCipherModeBaseResynchronize16_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockOrientedCipherModeBaseResynchronize16_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BlockOrientedCipherModeBase::*)(char*))&CryptoPP::BlockOrientedCipherModeBase::Resynchronize) },
        {   (LPVOID)0x140618ea0L,
            (LPVOID *)&CryptoPP__BlockOrientedCipherModeBaseUncheckedSetKey17_user,
            (LPVOID *)&CryptoPP__BlockOrientedCipherModeBaseUncheckedSetKey17_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockOrientedCipherModeBaseUncheckedSetKey17_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BlockOrientedCipherModeBase::*)(uint8_t*, unsigned int, struct CryptoPP::NameValuePairs*))&CryptoPP::BlockOrientedCipherModeBase::UncheckedSetKey) },
        {   (LPVOID)0x140449690L,
            (LPVOID *)&CryptoPP__BlockOrientedCipherModeBasedtor_BlockOrientedCipherModeBase19_user,
            (LPVOID *)&CryptoPP__BlockOrientedCipherModeBasedtor_BlockOrientedCipherModeBase19_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockOrientedCipherModeBasedtor_BlockOrientedCipherModeBase19_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BlockOrientedCipherModeBase::*)())&CryptoPP::BlockOrientedCipherModeBase::dtor_BlockOrientedCipherModeBase) },
        
        {   (LPVOID)0x140457bc0L,
            (LPVOID *)&CryptoPP__CBC_ModeBasector_CBC_ModeBase2_user,
            (LPVOID *)&CryptoPP__CBC_ModeBasector_CBC_ModeBase2_next,
            (LPVOID)cast_pointer_function(CryptoPP__CBC_ModeBasector_CBC_ModeBase2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CBC_ModeBase::*)())&CryptoPP::CBC_ModeBase::ctor_CBC_ModeBase) },
        {   (LPVOID)0x140452fd0L,
            (LPVOID *)&CryptoPP__CBC_ModeBaseIVRequirement4_user,
            (LPVOID *)&CryptoPP__CBC_ModeBaseIVRequirement4_next,
            (LPVOID)cast_pointer_function(CryptoPP__CBC_ModeBaseIVRequirement4_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::SimpleKeyingInterface::IV_Requirement(CryptoPP::CBC_ModeBase::*)())&CryptoPP::CBC_ModeBase::IVRequirement) },
        {   (LPVOID)0x140452fe0L,
            (LPVOID *)&CryptoPP__CBC_ModeBaseMinLastBlockSize6_user,
            (LPVOID *)&CryptoPP__CBC_ModeBaseMinLastBlockSize6_next,
            (LPVOID)cast_pointer_function(CryptoPP__CBC_ModeBaseMinLastBlockSize6_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::CBC_ModeBase::*)())&CryptoPP::CBC_ModeBase::MinLastBlockSize) },
        {   (LPVOID)0x140459850L,
            (LPVOID *)&CryptoPP__CBC_ModeBaseStaticAlgorithmName8_user,
            (LPVOID *)&CryptoPP__CBC_ModeBaseStaticAlgorithmName8_next,
            (LPVOID)cast_pointer_function(CryptoPP__CBC_ModeBaseStaticAlgorithmName8_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::CBC_ModeBase::*)())&CryptoPP::CBC_ModeBase::StaticAlgorithmName) },
        {   (LPVOID)0x1404493b0L,
            (LPVOID *)&CryptoPP__CBC_ModeBasedtor_CBC_ModeBase10_user,
            (LPVOID *)&CryptoPP__CBC_ModeBasedtor_CBC_ModeBase10_next,
            (LPVOID)cast_pointer_function(CryptoPP__CBC_ModeBasedtor_CBC_ModeBase10_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CBC_ModeBase::*)())&CryptoPP::CBC_ModeBase::dtor_CBC_ModeBase) },
        
        {   (LPVOID)0x1404576b0L,
            (LPVOID *)&CryptoPP__CBC_Decryptionctor_CBC_Decryption2_user,
            (LPVOID *)&CryptoPP__CBC_Decryptionctor_CBC_Decryption2_next,
            (LPVOID)cast_pointer_function(CryptoPP__CBC_Decryptionctor_CBC_Decryption2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CBC_Decryption::*)())&CryptoPP::CBC_Decryption::ctor_CBC_Decryption) },
        {   (LPVOID)0x140619550L,
            (LPVOID *)&CryptoPP__CBC_DecryptionProcessBlocks3_user,
            (LPVOID *)&CryptoPP__CBC_DecryptionProcessBlocks3_next,
            (LPVOID)cast_pointer_function(CryptoPP__CBC_DecryptionProcessBlocks3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CBC_Decryption::*)(uint8_t*, uint8_t*, uint64_t))&CryptoPP::CBC_Decryption::ProcessBlocks) },
        {   (LPVOID)0x140452ff0L,
            (LPVOID *)&CryptoPP__CBC_DecryptionResizeBuffers5_user,
            (LPVOID *)&CryptoPP__CBC_DecryptionResizeBuffers5_next,
            (LPVOID)cast_pointer_function(CryptoPP__CBC_DecryptionResizeBuffers5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CBC_Decryption::*)())&CryptoPP::CBC_Decryption::ResizeBuffers) },
        {   (LPVOID)0x140448f90L,
            (LPVOID *)&CryptoPP__CBC_Decryptiondtor_CBC_Decryption7_user,
            (LPVOID *)&CryptoPP__CBC_Decryptiondtor_CBC_Decryption7_next,
            (LPVOID)cast_pointer_function(CryptoPP__CBC_Decryptiondtor_CBC_Decryption7_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CBC_Decryption::*)())&CryptoPP::CBC_Decryption::dtor_CBC_Decryption) },
        
        {   (LPVOID)0x1404525c0L,
            (LPVOID *)&CryptoPP__CipherModeFinalTemplate_CipherHolderctor_CipherModeFinalTemplate_CipherHolder2_user,
            (LPVOID *)&CryptoPP__CipherModeFinalTemplate_CipherHolderctor_CipherModeFinalTemplate_CipherHolder2_next,
            (LPVOID)cast_pointer_function(CryptoPP__CipherModeFinalTemplate_CipherHolderctor_CipherModeFinalTemplate_CipherHolder2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::CBC_Decryption>::*)())&CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::CBC_Decryption>::ctor_CipherModeFinalTemplate_CipherHolder) },
        {   (LPVOID)0x140459640L,
            (LPVOID *)&CryptoPP__CipherModeFinalTemplate_CipherHolderStaticAlgorithmName4_user,
            (LPVOID *)&CryptoPP__CipherModeFinalTemplate_CipherHolderStaticAlgorithmName4_next,
            (LPVOID)cast_pointer_function(CryptoPP__CipherModeFinalTemplate_CipherHolderStaticAlgorithmName4_wrapper),
            (LPVOID)cast_pointer_function((struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*(CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::CBC_Decryption>::*)(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*))&CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::CBC_Decryption>::StaticAlgorithmName) },
        {   (LPVOID)0x1404489a0L,
            (LPVOID *)&CryptoPP__CipherModeFinalTemplate_CipherHolderdtor_CipherModeFinalTemplate_CipherHolder9_user,
            (LPVOID *)&CryptoPP__CipherModeFinalTemplate_CipherHolderdtor_CipherModeFinalTemplate_CipherHolder9_next,
            (LPVOID)cast_pointer_function(CryptoPP__CipherModeFinalTemplate_CipherHolderdtor_CipherModeFinalTemplate_CipherHolder9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::CBC_Decryption>::*)())&CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::CBC_Decryption>::dtor_CipherModeFinalTemplate_CipherHolder) },
        
        {   (LPVOID)0x140454f40L,
            (LPVOID *)&CryptoPP__PK_CryptoSystemFixedCiphertextLength2_user,
            (LPVOID *)&CryptoPP__PK_CryptoSystemFixedCiphertextLength2_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_CryptoSystemFixedCiphertextLength2_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::PK_CryptoSystem::*)())&CryptoPP::PK_CryptoSystem::FixedCiphertextLength) },
        {   (LPVOID)0x140454f50L,
            (LPVOID *)&CryptoPP__PK_CryptoSystemFixedMaxPlaintextLength4_user,
            (LPVOID *)&CryptoPP__PK_CryptoSystemFixedMaxPlaintextLength4_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_CryptoSystemFixedMaxPlaintextLength4_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::PK_CryptoSystem::*)())&CryptoPP::PK_CryptoSystem::FixedMaxPlaintextLength) },
        {   (LPVOID)0x140458570L,
            (LPVOID *)&CryptoPP__PK_CryptoSystemctor_PK_CryptoSystem6_user,
            (LPVOID *)&CryptoPP__PK_CryptoSystemctor_PK_CryptoSystem6_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_CryptoSystemctor_PK_CryptoSystem6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PK_CryptoSystem::*)())&CryptoPP::PK_CryptoSystem::ctor_PK_CryptoSystem) },
        {   (LPVOID)0x14044a260L,
            (LPVOID *)&CryptoPP__PK_CryptoSystemdtor_PK_CryptoSystem8_user,
            (LPVOID *)&CryptoPP__PK_CryptoSystemdtor_PK_CryptoSystem8_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_CryptoSystemdtor_PK_CryptoSystem8_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PK_CryptoSystem::*)())&CryptoPP::PK_CryptoSystem::dtor_PK_CryptoSystem) },
        
        {   (LPVOID)0x140633a10L,
            (LPVOID *)&CryptoPP__AsymmetricAlgorithmctor_AsymmetricAlgorithm1_user,
            (LPVOID *)&CryptoPP__AsymmetricAlgorithmctor_AsymmetricAlgorithm1_next,
            (LPVOID)cast_pointer_function(CryptoPP__AsymmetricAlgorithmctor_AsymmetricAlgorithm1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::AsymmetricAlgorithm::*)(struct CryptoPP::AsymmetricAlgorithm*))&CryptoPP::AsymmetricAlgorithm::ctor_AsymmetricAlgorithm) },
        {   (LPVOID)0x140458640L,
            (LPVOID *)&CryptoPP__AsymmetricAlgorithmctor_AsymmetricAlgorithm3_user,
            (LPVOID *)&CryptoPP__AsymmetricAlgorithmctor_AsymmetricAlgorithm3_next,
            (LPVOID)cast_pointer_function(CryptoPP__AsymmetricAlgorithmctor_AsymmetricAlgorithm3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AsymmetricAlgorithm::*)())&CryptoPP::AsymmetricAlgorithm::ctor_AsymmetricAlgorithm) },
        {   (LPVOID)0x14044a480L,
            (LPVOID *)&CryptoPP__AsymmetricAlgorithmdtor_AsymmetricAlgorithm5_user,
            (LPVOID *)&CryptoPP__AsymmetricAlgorithmdtor_AsymmetricAlgorithm5_next,
            (LPVOID)cast_pointer_function(CryptoPP__AsymmetricAlgorithmdtor_AsymmetricAlgorithm5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AsymmetricAlgorithm::*)())&CryptoPP::AsymmetricAlgorithm::dtor_AsymmetricAlgorithm) },
        
        {   (LPVOID)0x140454dd0L,
            (LPVOID *)&CryptoPP__PublicKeyAlgorithmAccessMaterial2_user,
            (LPVOID *)&CryptoPP__PublicKeyAlgorithmAccessMaterial2_next,
            (LPVOID)cast_pointer_function(CryptoPP__PublicKeyAlgorithmAccessMaterial2_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::CryptoMaterial*(CryptoPP::PublicKeyAlgorithm::*)())&CryptoPP::PublicKeyAlgorithm::AccessMaterial) },
        {   (LPVOID)0x140454e60L,
            (LPVOID *)&CryptoPP__PublicKeyAlgorithmGetMaterial4_user,
            (LPVOID *)&CryptoPP__PublicKeyAlgorithmGetMaterial4_next,
            (LPVOID)cast_pointer_function(CryptoPP__PublicKeyAlgorithmGetMaterial4_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::CryptoMaterial*(CryptoPP::PublicKeyAlgorithm::*)())&CryptoPP::PublicKeyAlgorithm::GetMaterial) },
        {   (LPVOID)0x140454ef0L,
            (LPVOID *)&CryptoPP__PublicKeyAlgorithmGetPublicKey6_user,
            (LPVOID *)&CryptoPP__PublicKeyAlgorithmGetPublicKey6_next,
            (LPVOID)cast_pointer_function(CryptoPP__PublicKeyAlgorithmGetPublicKey6_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::PublicKey*(CryptoPP::PublicKeyAlgorithm::*)())&CryptoPP::PublicKeyAlgorithm::GetPublicKey) },
        {   (LPVOID)0x140458580L,
            (LPVOID *)&CryptoPP__PublicKeyAlgorithmctor_PublicKeyAlgorithm8_user,
            (LPVOID *)&CryptoPP__PublicKeyAlgorithmctor_PublicKeyAlgorithm8_next,
            (LPVOID)cast_pointer_function(CryptoPP__PublicKeyAlgorithmctor_PublicKeyAlgorithm8_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PublicKeyAlgorithm::*)())&CryptoPP::PublicKeyAlgorithm::ctor_PublicKeyAlgorithm) },
        {   (LPVOID)0x14044a3c0L,
            (LPVOID *)&CryptoPP__PublicKeyAlgorithmdtor_PublicKeyAlgorithm10_user,
            (LPVOID *)&CryptoPP__PublicKeyAlgorithmdtor_PublicKeyAlgorithm10_next,
            (LPVOID)cast_pointer_function(CryptoPP__PublicKeyAlgorithmdtor_PublicKeyAlgorithm10_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PublicKeyAlgorithm::*)())&CryptoPP::PublicKeyAlgorithm::dtor_PublicKeyAlgorithm) },
        
        {   (LPVOID)0x1405f5e10L,
            (LPVOID *)&CryptoPP__PK_EncryptorCreateEncryptionFilter1_user,
            (LPVOID *)&CryptoPP__PK_EncryptorCreateEncryptionFilter1_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_EncryptorCreateEncryptionFilter1_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::BufferedTransformation*(CryptoPP::PK_Encryptor::*)(struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::NameValuePairs*))&CryptoPP::PK_Encryptor::CreateEncryptionFilter) },
        {   (LPVOID)0x140458390L,
            (LPVOID *)&CryptoPP__PK_Encryptorctor_PK_Encryptor3_user,
            (LPVOID *)&CryptoPP__PK_Encryptorctor_PK_Encryptor3_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_Encryptorctor_PK_Encryptor3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PK_Encryptor::*)())&CryptoPP::PK_Encryptor::ctor_PK_Encryptor) },
        {   (LPVOID)0x14044a1a0L,
            (LPVOID *)&CryptoPP__PK_Encryptordtor_PK_Encryptor5_user,
            (LPVOID *)&CryptoPP__PK_Encryptordtor_PK_Encryptor5_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_Encryptordtor_PK_Encryptor5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PK_Encryptor::*)())&CryptoPP::PK_Encryptor::dtor_PK_Encryptor) },
        
        {   (LPVOID)0x140458090L,
            (LPVOID *)&CryptoPP__DL_EncryptorBasector_DL_EncryptorBase2_user,
            (LPVOID *)&CryptoPP__DL_EncryptorBasector_DL_EncryptorBase2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_EncryptorBasector_DL_EncryptorBase2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_EncryptorBase<CryptoPP::ECPPoint>::*)())&CryptoPP::DL_EncryptorBase<CryptoPP::ECPPoint>::ctor_DL_EncryptorBase) },
        {   (LPVOID)0x1404551d0L,
            (LPVOID *)&CryptoPP__DL_EncryptorBaseEncrypt4_user,
            (LPVOID *)&CryptoPP__DL_EncryptorBaseEncrypt4_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_EncryptorBaseEncrypt4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_EncryptorBase<CryptoPP::ECPPoint>::*)(struct CryptoPP::RandomNumberGenerator*, char*, uint64_t, char*, struct CryptoPP::NameValuePairs*))&CryptoPP::DL_EncryptorBase<CryptoPP::ECPPoint>::Encrypt) },
        {   (LPVOID)0x140449c00L,
            (LPVOID *)&CryptoPP__DL_EncryptorBasedtor_DL_EncryptorBase6_user,
            (LPVOID *)&CryptoPP__DL_EncryptorBasedtor_DL_EncryptorBase6_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_EncryptorBasedtor_DL_EncryptorBase6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_EncryptorBase<CryptoPP::ECPPoint>::*)())&CryptoPP::DL_EncryptorBase<CryptoPP::ECPPoint>::dtor_DL_EncryptorBase) },
        
        {   (LPVOID)0x140455ad0L,
            (LPVOID *)&CryptoPP__PrivateKeyAlgorithmAccessMaterial2_user,
            (LPVOID *)&CryptoPP__PrivateKeyAlgorithmAccessMaterial2_next,
            (LPVOID)cast_pointer_function(CryptoPP__PrivateKeyAlgorithmAccessMaterial2_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::CryptoMaterial*(CryptoPP::PrivateKeyAlgorithm::*)())&CryptoPP::PrivateKeyAlgorithm::AccessMaterial) },
        {   (LPVOID)0x140455b60L,
            (LPVOID *)&CryptoPP__PrivateKeyAlgorithmGetMaterial4_user,
            (LPVOID *)&CryptoPP__PrivateKeyAlgorithmGetMaterial4_next,
            (LPVOID)cast_pointer_function(CryptoPP__PrivateKeyAlgorithmGetMaterial4_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::CryptoMaterial*(CryptoPP::PrivateKeyAlgorithm::*)())&CryptoPP::PrivateKeyAlgorithm::GetMaterial) },
        {   (LPVOID)0x140455bf0L,
            (LPVOID *)&CryptoPP__PrivateKeyAlgorithmGetPrivateKey6_user,
            (LPVOID *)&CryptoPP__PrivateKeyAlgorithmGetPrivateKey6_next,
            (LPVOID)cast_pointer_function(CryptoPP__PrivateKeyAlgorithmGetPrivateKey6_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::PrivateKey*(CryptoPP::PrivateKeyAlgorithm::*)())&CryptoPP::PrivateKeyAlgorithm::GetPrivateKey) },
        {   (LPVOID)0x140633730L,
            (LPVOID *)&CryptoPP__PrivateKeyAlgorithmctor_PrivateKeyAlgorithm7_user,
            (LPVOID *)&CryptoPP__PrivateKeyAlgorithmctor_PrivateKeyAlgorithm7_next,
            (LPVOID)cast_pointer_function(CryptoPP__PrivateKeyAlgorithmctor_PrivateKeyAlgorithm7_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PrivateKeyAlgorithm::*)(struct CryptoPP::PrivateKeyAlgorithm*))&CryptoPP::PrivateKeyAlgorithm::ctor_PrivateKeyAlgorithm) },
        {   (LPVOID)0x1404585d0L,
            (LPVOID *)&CryptoPP__PrivateKeyAlgorithmctor_PrivateKeyAlgorithm9_user,
            (LPVOID *)&CryptoPP__PrivateKeyAlgorithmctor_PrivateKeyAlgorithm9_next,
            (LPVOID)cast_pointer_function(CryptoPP__PrivateKeyAlgorithmctor_PrivateKeyAlgorithm9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PrivateKeyAlgorithm::*)())&CryptoPP::PrivateKeyAlgorithm::ctor_PrivateKeyAlgorithm) },
        {   (LPVOID)0x14044a400L,
            (LPVOID *)&CryptoPP__PrivateKeyAlgorithmdtor_PrivateKeyAlgorithm11_user,
            (LPVOID *)&CryptoPP__PrivateKeyAlgorithmdtor_PrivateKeyAlgorithm11_next,
            (LPVOID)cast_pointer_function(CryptoPP__PrivateKeyAlgorithmdtor_PrivateKeyAlgorithm11_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PrivateKeyAlgorithm::*)())&CryptoPP::PrivateKeyAlgorithm::dtor_PrivateKeyAlgorithm) },
        
        {   (LPVOID)0x1405f5eb0L,
            (LPVOID *)&CryptoPP__PK_DecryptorCreateDecryptionFilter1_user,
            (LPVOID *)&CryptoPP__PK_DecryptorCreateDecryptionFilter1_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_DecryptorCreateDecryptionFilter1_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::BufferedTransformation*(CryptoPP::PK_Decryptor::*)(struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::NameValuePairs*))&CryptoPP::PK_Decryptor::CreateDecryptionFilter) },
        {   (LPVOID)0x140458450L,
            (LPVOID *)&CryptoPP__PK_Decryptorctor_PK_Decryptor3_user,
            (LPVOID *)&CryptoPP__PK_Decryptorctor_PK_Decryptor3_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_Decryptorctor_PK_Decryptor3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PK_Decryptor::*)())&CryptoPP::PK_Decryptor::ctor_PK_Decryptor) },
        {   (LPVOID)0x14044a270L,
            (LPVOID *)&CryptoPP__PK_Decryptordtor_PK_Decryptor5_user,
            (LPVOID *)&CryptoPP__PK_Decryptordtor_PK_Decryptor5_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_Decryptordtor_PK_Decryptor5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PK_Decryptor::*)())&CryptoPP::PK_Decryptor::dtor_PK_Decryptor) },
        
        {   (LPVOID)0x1404580e0L,
            (LPVOID *)&CryptoPP__DL_DecryptorBasector_DL_DecryptorBase2_user,
            (LPVOID *)&CryptoPP__DL_DecryptorBasector_DL_DecryptorBase2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_DecryptorBasector_DL_DecryptorBase2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_DecryptorBase<CryptoPP::ECPPoint>::*)())&CryptoPP::DL_DecryptorBase<CryptoPP::ECPPoint>::ctor_DL_DecryptorBase) },
        {   (LPVOID)0x140455eb0L,
            (LPVOID *)&CryptoPP__DL_DecryptorBaseDecrypt4_user,
            (LPVOID *)&CryptoPP__DL_DecryptorBaseDecrypt4_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_DecryptorBaseDecrypt4_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::DecodingResult*(CryptoPP::DL_DecryptorBase<CryptoPP::ECPPoint>::*)(struct CryptoPP::DecodingResult*, struct CryptoPP::RandomNumberGenerator*, char*, uint64_t, char*, struct CryptoPP::NameValuePairs*))&CryptoPP::DL_DecryptorBase<CryptoPP::ECPPoint>::Decrypt) },
        {   (LPVOID)0x140449c40L,
            (LPVOID *)&CryptoPP__DL_DecryptorBasedtor_DL_DecryptorBase6_user,
            (LPVOID *)&CryptoPP__DL_DecryptorBasedtor_DL_DecryptorBase6_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_DecryptorBasedtor_DL_DecryptorBase6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_DecryptorBase<CryptoPP::ECPPoint>::*)())&CryptoPP::DL_DecryptorBase<CryptoPP::ECPPoint>::dtor_DL_DecryptorBase) },
        
        {   (LPVOID)0x1404652d0L,
            (LPVOID *)&CryptoPP__HashTransformationBlockSize2_user,
            (LPVOID *)&CryptoPP__HashTransformationBlockSize2_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashTransformationBlockSize2_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::HashTransformation::*)())&CryptoPP::HashTransformation::BlockSize) },
        {   (LPVOID)0x14044de50L,
            (LPVOID *)&CryptoPP__HashTransformationCalculateDigest4_user,
            (LPVOID *)&CryptoPP__HashTransformationCalculateDigest4_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashTransformationCalculateDigest4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::HashTransformation::*)(char*, char*, uint64_t))&CryptoPP::HashTransformation::CalculateDigest) },
        {   (LPVOID)0x14044df50L,
            (LPVOID *)&CryptoPP__HashTransformationCalculateTruncatedDigest6_user,
            (LPVOID *)&CryptoPP__HashTransformationCalculateTruncatedDigest6_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashTransformationCalculateTruncatedDigest6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::HashTransformation::*)(char*, uint64_t, char*, uint64_t))&CryptoPP::HashTransformation::CalculateTruncatedDigest) },
        {   (LPVOID)0x1404652a0L,
            (LPVOID *)&CryptoPP__HashTransformationCreateUpdateSpace8_user,
            (LPVOID *)&CryptoPP__HashTransformationCreateUpdateSpace8_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashTransformationCreateUpdateSpace8_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::HashTransformation::*)(uint64_t*))&CryptoPP::HashTransformation::CreateUpdateSpace) },
        {   (LPVOID)0x14044ddd0L,
            (LPVOID *)&CryptoPP__HashTransformationFinal10_user,
            (LPVOID *)&CryptoPP__HashTransformationFinal10_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashTransformationFinal10_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::HashTransformation::*)(char*))&CryptoPP::HashTransformation::Final) },
        {   (LPVOID)0x1404582e0L,
            (LPVOID *)&CryptoPP__HashTransformationctor_HashTransformation12_user,
            (LPVOID *)&CryptoPP__HashTransformationctor_HashTransformation12_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashTransformationctor_HashTransformation12_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::HashTransformation::*)(struct CryptoPP::HashTransformation*))&CryptoPP::HashTransformation::ctor_HashTransformation) },
        {   (LPVOID)0x140458ec0L,
            (LPVOID *)&CryptoPP__HashTransformationctor_HashTransformation14_user,
            (LPVOID *)&CryptoPP__HashTransformationctor_HashTransformation14_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashTransformationctor_HashTransformation14_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::HashTransformation::*)())&CryptoPP::HashTransformation::ctor_HashTransformation) },
        {   (LPVOID)0x140562e00L,
            (LPVOID *)&CryptoPP__HashTransformationOptimalBlockSize15_user,
            (LPVOID *)&CryptoPP__HashTransformationOptimalBlockSize15_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashTransformationOptimalBlockSize15_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::HashTransformation::*)())&CryptoPP::HashTransformation::OptimalBlockSize) },
        {   (LPVOID)0x1404652e0L,
            (LPVOID *)&CryptoPP__HashTransformationOptimalDataAlignment17_user,
            (LPVOID *)&CryptoPP__HashTransformationOptimalDataAlignment17_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashTransformationOptimalDataAlignment17_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::HashTransformation::*)())&CryptoPP::HashTransformation::OptimalDataAlignment) },
        {   (LPVOID)0x140562dd0L,
            (LPVOID *)&CryptoPP__HashTransformationRestart18_user,
            (LPVOID *)&CryptoPP__HashTransformationRestart18_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashTransformationRestart18_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::HashTransformation::*)())&CryptoPP::HashTransformation::Restart) },
        {   (LPVOID)0x1405f4420L,
            (LPVOID *)&CryptoPP__HashTransformationThrowIfInvalidTruncatedSize19_user,
            (LPVOID *)&CryptoPP__HashTransformationThrowIfInvalidTruncatedSize19_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashTransformationThrowIfInvalidTruncatedSize19_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::HashTransformation::*)(uint64_t))&CryptoPP::HashTransformation::ThrowIfInvalidTruncatedSize) },
        {   (LPVOID)0x1405f4330L,
            (LPVOID *)&CryptoPP__HashTransformationTruncatedVerify20_user,
            (LPVOID *)&CryptoPP__HashTransformationTruncatedVerify20_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashTransformationTruncatedVerify20_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::HashTransformation::*)(uint8_t*, uint64_t))&CryptoPP::HashTransformation::TruncatedVerify) },
        {   (LPVOID)0x14044ded0L,
            (LPVOID *)&CryptoPP__HashTransformationVerify22_user,
            (LPVOID *)&CryptoPP__HashTransformationVerify22_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashTransformationVerify22_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::HashTransformation::*)(char*))&CryptoPP::HashTransformation::Verify) },
        {   (LPVOID)0x14044dcf0L,
            (LPVOID *)&CryptoPP__HashTransformationVerifyDigest24_user,
            (LPVOID *)&CryptoPP__HashTransformationVerifyDigest24_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashTransformationVerifyDigest24_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::HashTransformation::*)(char*, char*, uint64_t))&CryptoPP::HashTransformation::VerifyDigest) },
        {   (LPVOID)0x14044dfe0L,
            (LPVOID *)&CryptoPP__HashTransformationVerifyTruncatedDigest26_user,
            (LPVOID *)&CryptoPP__HashTransformationVerifyTruncatedDigest26_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashTransformationVerifyTruncatedDigest26_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::HashTransformation::*)(char*, uint64_t, char*, uint64_t))&CryptoPP::HashTransformation::VerifyTruncatedDigest) },
        {   (LPVOID)0x14044e340L,
            (LPVOID *)&CryptoPP__HashTransformationdtor_HashTransformation28_user,
            (LPVOID *)&CryptoPP__HashTransformationdtor_HashTransformation28_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashTransformationdtor_HashTransformation28_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::HashTransformation::*)())&CryptoPP::HashTransformation::dtor_HashTransformation) },
        
        {   (LPVOID)0x1406087b0L,
            (LPVOID *)&CryptoPP__SHA256InitState1_user,
            (LPVOID *)&CryptoPP__SHA256InitState1_next,
            (LPVOID)cast_pointer_function(CryptoPP__SHA256InitState1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SHA256::*)(unsigned int*))&CryptoPP::SHA256::InitState) },
        {   (LPVOID)0x140454710L,
            (LPVOID *)&CryptoPP__SHA256ctor_SHA2563_user,
            (LPVOID *)&CryptoPP__SHA256ctor_SHA2563_next,
            (LPVOID)cast_pointer_function(CryptoPP__SHA256ctor_SHA2563_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SHA256::*)(struct CryptoPP::SHA256*))&CryptoPP::SHA256::ctor_SHA256) },
        {   (LPVOID)0x14044dd70L,
            (LPVOID *)&CryptoPP__SHA256ctor_SHA2565_user,
            (LPVOID *)&CryptoPP__SHA256ctor_SHA2565_next,
            (LPVOID)cast_pointer_function(CryptoPP__SHA256ctor_SHA2565_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SHA256::*)())&CryptoPP::SHA256::ctor_SHA256) },
        {   (LPVOID)0x14044f120L,
            (LPVOID *)&CryptoPP__SHA256StaticAlgorithmName7_user,
            (LPVOID *)&CryptoPP__SHA256StaticAlgorithmName7_next,
            (LPVOID)cast_pointer_function(CryptoPP__SHA256StaticAlgorithmName7_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::SHA256::*)())&CryptoPP::SHA256::StaticAlgorithmName) },
        {   (LPVOID)0x1406087e0L,
            (LPVOID *)&CryptoPP__SHA256Transform8_user,
            (LPVOID *)&CryptoPP__SHA256Transform8_next,
            (LPVOID)cast_pointer_function(CryptoPP__SHA256Transform8_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SHA256::*)(unsigned int*, unsigned int*))&CryptoPP::SHA256::Transform) },
        {   (LPVOID)0x14044e070L,
            (LPVOID *)&CryptoPP__SHA256dtor_SHA25613_user,
            (LPVOID *)&CryptoPP__SHA256dtor_SHA25613_next,
            (LPVOID)cast_pointer_function(CryptoPP__SHA256dtor_SHA25613_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SHA256::*)())&CryptoPP::SHA256::dtor_SHA256) },
        
        {   (LPVOID)0x14044a870L,
            (LPVOID *)&CryptoPP__Exceptionctor_Exception2_user,
            (LPVOID *)&CryptoPP__Exceptionctor_Exception2_next,
            (LPVOID)cast_pointer_function(CryptoPP__Exceptionctor_Exception2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Exception::*)(struct CryptoPP::Exception*))&CryptoPP::Exception::ctor_Exception) },
        {   (LPVOID)0x14044ab70L,
            (LPVOID *)&CryptoPP__Exceptionctor_Exception4_user,
            (LPVOID *)&CryptoPP__Exceptionctor_Exception4_next,
            (LPVOID)cast_pointer_function(CryptoPP__Exceptionctor_Exception4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Exception::*)(struct CryptoPP::Exception::ErrorType, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*))&CryptoPP::Exception::ctor_Exception) },
        {   (LPVOID)0x14044a960L,
            (LPVOID *)&CryptoPP__Exceptionwhat9_user,
            (LPVOID *)&CryptoPP__Exceptionwhat9_next,
            (LPVOID)cast_pointer_function(CryptoPP__Exceptionwhat9_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Exception::*)())&CryptoPP::Exception::what) },
        {   (LPVOID)0x14044aa20L,
            (LPVOID *)&CryptoPP__Exceptiondtor_Exception11_user,
            (LPVOID *)&CryptoPP__Exceptiondtor_Exception11_next,
            (LPVOID)cast_pointer_function(CryptoPP__Exceptiondtor_Exception11_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Exception::*)())&CryptoPP::Exception::dtor_Exception) },
        
        {   (LPVOID)0x140626580L,
            (LPVOID *)&CryptoPP__PolynomialMod2AllOnes1_user,
            (LPVOID *)&CryptoPP__PolynomialMod2AllOnes1_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2AllOnes1_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::PolynomialMod2*(CryptoPP::PolynomialMod2::*)(short, struct CryptoPP::PolynomialMod2*))&CryptoPP::PolynomialMod2::AllOnes) },
        {   (LPVOID)0x1406277f0L,
            (LPVOID *)&CryptoPP__PolynomialMod2And2_user,
            (LPVOID *)&CryptoPP__PolynomialMod2And2_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2And2_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::PolynomialMod2*(CryptoPP::PolynomialMod2::*)(short, struct CryptoPP::PolynomialMod2*))&CryptoPP::PolynomialMod2::And) },
        {   (LPVOID)0x140627110L,
            (LPVOID *)&CryptoPP__PolynomialMod2BERDecodeAsOctetString3_user,
            (LPVOID *)&CryptoPP__PolynomialMod2BERDecodeAsOctetString3_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2BERDecodeAsOctetString3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PolynomialMod2::*)(struct CryptoPP::BufferedTransformation*, uint64_t))&CryptoPP::PolynomialMod2::BERDecodeAsOctetString) },
        {   (LPVOID)0x140627290L,
            (LPVOID *)&CryptoPP__PolynomialMod2BitCount4_user,
            (LPVOID *)&CryptoPP__PolynomialMod2BitCount4_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2BitCount4_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::PolynomialMod2::*)())&CryptoPP::PolynomialMod2::BitCount) },
        {   (LPVOID)0x140627230L,
            (LPVOID *)&CryptoPP__PolynomialMod2ByteCount5_user,
            (LPVOID *)&CryptoPP__PolynomialMod2ByteCount5_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2ByteCount5_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::PolynomialMod2::*)())&CryptoPP::PolynomialMod2::ByteCount) },
        {   (LPVOID)0x14062f650L,
            (LPVOID *)&CryptoPP__PolynomialMod2CoefficientCount6_user,
            (LPVOID *)&CryptoPP__PolynomialMod2CoefficientCount6_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2CoefficientCount6_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::PolynomialMod2::*)())&CryptoPP::PolynomialMod2::CoefficientCount) },
        {   (LPVOID)0x140627050L,
            (LPVOID *)&CryptoPP__PolynomialMod2DEREncodeAsOctetString7_user,
            (LPVOID *)&CryptoPP__PolynomialMod2DEREncodeAsOctetString7_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2DEREncodeAsOctetString7_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PolynomialMod2::*)(struct CryptoPP::BufferedTransformation*, uint64_t))&CryptoPP::PolynomialMod2::DEREncodeAsOctetString) },
        {   (LPVOID)0x140626ee0L,
            (LPVOID *)&CryptoPP__PolynomialMod2Decode8_user,
            (LPVOID *)&CryptoPP__PolynomialMod2Decode8_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2Decode8_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PolynomialMod2::*)(struct CryptoPP::BufferedTransformation*, uint64_t))&CryptoPP::PolynomialMod2::Decode) },
        {   (LPVOID)0x140626d90L,
            (LPVOID *)&CryptoPP__PolynomialMod2Decode9_user,
            (LPVOID *)&CryptoPP__PolynomialMod2Decode9_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2Decode9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PolynomialMod2::*)(uint8_t*, uint64_t))&CryptoPP::PolynomialMod2::Decode) },
        {   (LPVOID)0x140581880L,
            (LPVOID *)&CryptoPP__PolynomialMod2Degree10_user,
            (LPVOID *)&CryptoPP__PolynomialMod2Degree10_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2Degree10_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PolynomialMod2::*)())&CryptoPP::PolynomialMod2::Degree) },
        {   (LPVOID)0x140627d60L,
            (LPVOID *)&CryptoPP__PolynomialMod2Divide11_user,
            (LPVOID *)&CryptoPP__PolynomialMod2Divide11_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2Divide11_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PolynomialMod2::*)(struct CryptoPP::PolynomialMod2*, struct CryptoPP::PolynomialMod2*, struct CryptoPP::PolynomialMod2*, struct CryptoPP::PolynomialMod2*))&CryptoPP::PolynomialMod2::Divide) },
        {   (LPVOID)0x140627f30L,
            (LPVOID *)&CryptoPP__PolynomialMod2DividedBy12_user,
            (LPVOID *)&CryptoPP__PolynomialMod2DividedBy12_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2DividedBy12_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::PolynomialMod2*(CryptoPP::PolynomialMod2::*)(short, struct CryptoPP::PolynomialMod2*))&CryptoPP::PolynomialMod2::DividedBy) },
        {   (LPVOID)0x140555610L,
            (LPVOID *)&CryptoPP__PolynomialMod2Doubled13_user,
            (LPVOID *)&CryptoPP__PolynomialMod2Doubled13_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2Doubled13_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::PolynomialMod2*(CryptoPP::PolynomialMod2::*)(short))&CryptoPP::PolynomialMod2::Doubled) },
        {   (LPVOID)0x140626fe0L,
            (LPVOID *)&CryptoPP__PolynomialMod2Encode14_user,
            (LPVOID *)&CryptoPP__PolynomialMod2Encode14_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2Encode14_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PolynomialMod2::*)(struct CryptoPP::BufferedTransformation*, uint64_t))&CryptoPP::PolynomialMod2::Encode) },
        {   (LPVOID)0x140626e40L,
            (LPVOID *)&CryptoPP__PolynomialMod2Encode15_user,
            (LPVOID *)&CryptoPP__PolynomialMod2Encode15_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2Encode15_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PolynomialMod2::*)(uint8_t*, uint64_t))&CryptoPP::PolynomialMod2::Encode) },
        {   (LPVOID)0x140628830L,
            (LPVOID *)&CryptoPP__PolynomialMod2Equals16_user,
            (LPVOID *)&CryptoPP__PolynomialMod2Equals16_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2Equals16_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::PolynomialMod2::*)(struct CryptoPP::PolynomialMod2*))&CryptoPP::PolynomialMod2::Equals) },
        {   (LPVOID)0x140628c30L,
            (LPVOID *)&CryptoPP__PolynomialMod2Gcd17_user,
            (LPVOID *)&CryptoPP__PolynomialMod2Gcd17_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2Gcd17_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::PolynomialMod2*(CryptoPP::PolynomialMod2::*)(short, struct CryptoPP::PolynomialMod2*, struct CryptoPP::PolynomialMod2*))&CryptoPP::PolynomialMod2::Gcd) },
        {   (LPVOID)0x14062f610L,
            (LPVOID *)&CryptoPP__PolynomialMod2GetBit18_user,
            (LPVOID *)&CryptoPP__PolynomialMod2GetBit18_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2GetBit18_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::PolynomialMod2::*)(uint64_t))&CryptoPP::PolynomialMod2::GetBit) },
        {   (LPVOID)0x140626850L,
            (LPVOID *)&CryptoPP__PolynomialMod2GetByte19_user,
            (LPVOID *)&CryptoPP__PolynomialMod2GetByte19_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2GetByte19_wrapper),
            (LPVOID)cast_pointer_function((uint8_t(CryptoPP::PolynomialMod2::*)(uint64_t))&CryptoPP::PolynomialMod2::GetByte) },
        {   (LPVOID)0x14062c160L,
            (LPVOID *)&CryptoPP__PolynomialMod2GetCoefficient20_user,
            (LPVOID *)&CryptoPP__PolynomialMod2GetCoefficient20_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2GetCoefficient20_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PolynomialMod2::*)(uint64_t))&CryptoPP::PolynomialMod2::GetCoefficient) },
        {   (LPVOID)0x140628d40L,
            (LPVOID *)&CryptoPP__PolynomialMod2InverseMod21_user,
            (LPVOID *)&CryptoPP__PolynomialMod2InverseMod21_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2InverseMod21_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::PolynomialMod2*(CryptoPP::PolynomialMod2::*)(short, struct CryptoPP::PolynomialMod2*))&CryptoPP::PolynomialMod2::InverseMod) },
        {   (LPVOID)0x140628ec0L,
            (LPVOID *)&CryptoPP__PolynomialMod2IsIrreducible22_user,
            (LPVOID *)&CryptoPP__PolynomialMod2IsIrreducible22_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2IsIrreducible22_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::PolynomialMod2::*)())&CryptoPP::PolynomialMod2::IsIrreducible) },
        {   (LPVOID)0x140555810L,
            (LPVOID *)&CryptoPP__PolynomialMod2IsUnit23_user,
            (LPVOID *)&CryptoPP__PolynomialMod2IsUnit23_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2IsUnit23_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::PolynomialMod2::*)())&CryptoPP::PolynomialMod2::IsUnit) },
        {   (LPVOID)0x14062c3d0L,
            (LPVOID *)&CryptoPP__PolynomialMod2IsZero24_user,
            (LPVOID *)&CryptoPP__PolynomialMod2IsZero24_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2IsZero24_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::PolynomialMod2::*)())&CryptoPP::PolynomialMod2::IsZero) },
        {   (LPVOID)0x1405554d0L,
            (LPVOID *)&CryptoPP__PolynomialMod2Minus25_user,
            (LPVOID *)&CryptoPP__PolynomialMod2Minus25_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2Minus25_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::PolynomialMod2*(CryptoPP::PolynomialMod2::*)(short, struct CryptoPP::PolynomialMod2*))&CryptoPP::PolynomialMod2::Minus) },
        {   (LPVOID)0x140628030L,
            (LPVOID *)&CryptoPP__PolynomialMod2Modulo26_user,
            (LPVOID *)&CryptoPP__PolynomialMod2Modulo26_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2Modulo26_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::PolynomialMod2*(CryptoPP::PolynomialMod2::*)(short, struct CryptoPP::PolynomialMod2*))&CryptoPP::PolynomialMod2::Modulo) },
        {   (LPVOID)0x140626a10L,
            (LPVOID *)&CryptoPP__PolynomialMod2Monomial27_user,
            (LPVOID *)&CryptoPP__PolynomialMod2Monomial27_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2Monomial27_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::PolynomialMod2*(CryptoPP::PolynomialMod2::*)(short, struct CryptoPP::PolynomialMod2*))&CryptoPP::PolynomialMod2::Monomial) },
        {   (LPVOID)0x1405558c0L,
            (LPVOID *)&CryptoPP__PolynomialMod2MultiplicativeInverse28_user,
            (LPVOID *)&CryptoPP__PolynomialMod2MultiplicativeInverse28_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2MultiplicativeInverse28_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::PolynomialMod2*(CryptoPP::PolynomialMod2::*)(short))&CryptoPP::PolynomialMod2::MultiplicativeInverse) },
        {   (LPVOID)0x140626d50L,
            (LPVOID *)&CryptoPP__PolynomialMod2One29_user,
            (LPVOID *)&CryptoPP__PolynomialMod2One29_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2One29_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::PolynomialMod2*(CryptoPP::PolynomialMod2::*)())&CryptoPP::PolynomialMod2::One) },
        {   (LPVOID)0x140627300L,
            (LPVOID *)&CryptoPP__PolynomialMod2Parity30_user,
            (LPVOID *)&CryptoPP__PolynomialMod2Parity30_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2Parity30_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::PolynomialMod2::*)())&CryptoPP::PolynomialMod2::Parity) },
        {   (LPVOID)0x140626be0L,
            (LPVOID *)&CryptoPP__PolynomialMod2Pentanomial31_user,
            (LPVOID *)&CryptoPP__PolynomialMod2Pentanomial31_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2Pentanomial31_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::PolynomialMod2*(CryptoPP::PolynomialMod2::*)(struct CryptoPP::PolynomialMod2*, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&CryptoPP::PolynomialMod2::Pentanomial) },
        {   (LPVOID)0x140555260L,
            (LPVOID *)&CryptoPP__PolynomialMod2Plus32_user,
            (LPVOID *)&CryptoPP__PolynomialMod2Plus32_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2Plus32_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::PolynomialMod2*(CryptoPP::PolynomialMod2::*)(short, struct CryptoPP::PolynomialMod2*))&CryptoPP::PolynomialMod2::Plus) },
        {   (LPVOID)0x1405815b0L,
            (LPVOID *)&CryptoPP__PolynomialMod2ctor_PolynomialMod233_user,
            (LPVOID *)&CryptoPP__PolynomialMod2ctor_PolynomialMod233_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2ctor_PolynomialMod233_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PolynomialMod2::*)(struct CryptoPP::BufferedTransformation*, uint64_t))&CryptoPP::PolynomialMod2::ctor_PolynomialMod2) },
        {   (LPVOID)0x1406263d0L,
            (LPVOID *)&CryptoPP__PolynomialMod2ctor_PolynomialMod234_user,
            (LPVOID *)&CryptoPP__PolynomialMod2ctor_PolynomialMod234_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2ctor_PolynomialMod234_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PolynomialMod2::*)(struct CryptoPP::PolynomialMod2*))&CryptoPP::PolynomialMod2::ctor_PolynomialMod2) },
        {   (LPVOID)0x14062c360L,
            (LPVOID *)&CryptoPP__PolynomialMod2ctor_PolynomialMod235_user,
            (LPVOID *)&CryptoPP__PolynomialMod2ctor_PolynomialMod235_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2ctor_PolynomialMod235_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PolynomialMod2::*)(struct CryptoPP::RandomNumberGenerator*, uint64_t))&CryptoPP::PolynomialMod2::ctor_PolynomialMod2) },
        {   (LPVOID)0x1406262e0L,
            (LPVOID *)&CryptoPP__PolynomialMod2ctor_PolynomialMod236_user,
            (LPVOID *)&CryptoPP__PolynomialMod2ctor_PolynomialMod236_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2ctor_PolynomialMod236_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PolynomialMod2::*)(uint64_t, uint64_t))&CryptoPP::PolynomialMod2::ctor_PolynomialMod2) },
        {   (LPVOID)0x1406262b0L,
            (LPVOID *)&CryptoPP__PolynomialMod2ctor_PolynomialMod237_user,
            (LPVOID *)&CryptoPP__PolynomialMod2ctor_PolynomialMod237_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2ctor_PolynomialMod237_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PolynomialMod2::*)())&CryptoPP::PolynomialMod2::ctor_PolynomialMod2) },
        {   (LPVOID)0x140626470L,
            (LPVOID *)&CryptoPP__PolynomialMod2Randomize38_user,
            (LPVOID *)&CryptoPP__PolynomialMod2Randomize38_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2Randomize38_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PolynomialMod2::*)(struct CryptoPP::RandomNumberGenerator*, uint64_t))&CryptoPP::PolynomialMod2::Randomize) },
        {   (LPVOID)0x140626700L,
            (LPVOID *)&CryptoPP__PolynomialMod2SetBit39_user,
            (LPVOID *)&CryptoPP__PolynomialMod2SetBit39_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2SetBit39_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PolynomialMod2::*)(uint64_t, int))&CryptoPP::PolynomialMod2::SetBit) },
        {   (LPVOID)0x1406268f0L,
            (LPVOID *)&CryptoPP__PolynomialMod2SetByte40_user,
            (LPVOID *)&CryptoPP__PolynomialMod2SetByte40_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2SetByte40_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PolynomialMod2::*)(uint64_t, uint8_t))&CryptoPP::PolynomialMod2::SetByte) },
        {   (LPVOID)0x14062f5e0L,
            (LPVOID *)&CryptoPP__PolynomialMod2SetCoefficient41_user,
            (LPVOID *)&CryptoPP__PolynomialMod2SetCoefficient41_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2SetCoefficient41_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PolynomialMod2::*)(uint64_t, int))&CryptoPP::PolynomialMod2::SetCoefficient) },
        {   (LPVOID)0x140627ab0L,
            (LPVOID *)&CryptoPP__PolynomialMod2Squared42_user,
            (LPVOID *)&CryptoPP__PolynomialMod2Squared42_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2Squared42_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::PolynomialMod2*(CryptoPP::PolynomialMod2::*)(short))&CryptoPP::PolynomialMod2::Squared) },
        {   (LPVOID)0x140627940L,
            (LPVOID *)&CryptoPP__PolynomialMod2Times43_user,
            (LPVOID *)&CryptoPP__PolynomialMod2Times43_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2Times43_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::PolynomialMod2*(CryptoPP::PolynomialMod2::*)(short, struct CryptoPP::PolynomialMod2*))&CryptoPP::PolynomialMod2::Times) },
        {   (LPVOID)0x140626ae0L,
            (LPVOID *)&CryptoPP__PolynomialMod2Trinomial44_user,
            (LPVOID *)&CryptoPP__PolynomialMod2Trinomial44_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2Trinomial44_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::PolynomialMod2*(CryptoPP::PolynomialMod2::*)(short, struct CryptoPP::PolynomialMod2*, uint64_t, uint64_t))&CryptoPP::PolynomialMod2::Trinomial) },
        {   (LPVOID)0x1406271f0L,
            (LPVOID *)&CryptoPP__PolynomialMod2WordCount45_user,
            (LPVOID *)&CryptoPP__PolynomialMod2WordCount45_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2WordCount45_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::PolynomialMod2::*)())&CryptoPP::PolynomialMod2::WordCount) },
        {   (LPVOID)0x140627430L,
            (LPVOID *)&CryptoPP__PolynomialMod2Xor46_user,
            (LPVOID *)&CryptoPP__PolynomialMod2Xor46_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2Xor46_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::PolynomialMod2*(CryptoPP::PolynomialMod2::*)(short, struct CryptoPP::PolynomialMod2*))&CryptoPP::PolynomialMod2::Xor) },
        {   (LPVOID)0x140626d10L,
            (LPVOID *)&CryptoPP__PolynomialMod2Zero47_user,
            (LPVOID *)&CryptoPP__PolynomialMod2Zero47_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2Zero47_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::PolynomialMod2*(CryptoPP::PolynomialMod2::*)())&CryptoPP::PolynomialMod2::Zero) },
        {   (LPVOID)0x14062f670L,
            (LPVOID *)&CryptoPP__PolynomialMod2swap48_user,
            (LPVOID *)&CryptoPP__PolynomialMod2swap48_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2swap48_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PolynomialMod2::*)(struct CryptoPP::PolynomialMod2*))&CryptoPP::PolynomialMod2::swap) },
        {   (LPVOID)0x140550d30L,
            (LPVOID *)&CryptoPP__PolynomialMod2dtor_PolynomialMod249_user,
            (LPVOID *)&CryptoPP__PolynomialMod2dtor_PolynomialMod249_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2dtor_PolynomialMod249_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PolynomialMod2::*)())&CryptoPP::PolynomialMod2::dtor_PolynomialMod2) },
        
        {   (LPVOID)0x14062c320L,
            (LPVOID *)&CryptoPP__PolynomialMod2__DivideByZeroctor_DivideByZero1_user,
            (LPVOID *)&CryptoPP__PolynomialMod2__DivideByZeroctor_DivideByZero1_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2__DivideByZeroctor_DivideByZero1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PolynomialMod2::DivideByZero::*)(struct CryptoPP::PolynomialMod2::DivideByZero*))&CryptoPP::PolynomialMod2::DivideByZero::ctor_DivideByZero) },
        {   (LPVOID)0x14062c200L,
            (LPVOID *)&CryptoPP__PolynomialMod2__DivideByZeroctor_DivideByZero2_user,
            (LPVOID *)&CryptoPP__PolynomialMod2__DivideByZeroctor_DivideByZero2_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2__DivideByZeroctor_DivideByZero2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PolynomialMod2::DivideByZero::*)())&CryptoPP::PolynomialMod2::DivideByZero::ctor_DivideByZero) },
        {   (LPVOID)0x14062c300L,
            (LPVOID *)&CryptoPP__PolynomialMod2__DivideByZerodtor_DivideByZero3_user,
            (LPVOID *)&CryptoPP__PolynomialMod2__DivideByZerodtor_DivideByZero3_next,
            (LPVOID)cast_pointer_function(CryptoPP__PolynomialMod2__DivideByZerodtor_DivideByZero3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PolynomialMod2::DivideByZero::*)())&CryptoPP::PolynomialMod2::DivideByZero::dtor_DivideByZero) },
        
        {   (LPVOID)0x14055cb20L,
            (LPVOID *)&CryptoPP__EC2NPointctor_EC2NPoint1_user,
            (LPVOID *)&CryptoPP__EC2NPointctor_EC2NPoint1_next,
            (LPVOID)cast_pointer_function(CryptoPP__EC2NPointctor_EC2NPoint1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::EC2NPoint::*)(struct CryptoPP::EC2NPoint*))&CryptoPP::EC2NPoint::ctor_EC2NPoint) },
        {   (LPVOID)0x140557ae0L,
            (LPVOID *)&CryptoPP__EC2NPointctor_EC2NPoint2_user,
            (LPVOID *)&CryptoPP__EC2NPointctor_EC2NPoint2_next,
            (LPVOID)cast_pointer_function(CryptoPP__EC2NPointctor_EC2NPoint2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::EC2NPoint::*)())&CryptoPP::EC2NPoint::ctor_EC2NPoint) },
        {   (LPVOID)0x140557b50L,
            (LPVOID *)&CryptoPP__EC2NPointdtor_EC2NPoint3_user,
            (LPVOID *)&CryptoPP__EC2NPointdtor_EC2NPoint3_next,
            (LPVOID)cast_pointer_function(CryptoPP__EC2NPointdtor_EC2NPoint3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::EC2NPoint::*)())&CryptoPP::EC2NPoint::dtor_EC2NPoint) },
        
        {   (LPVOID)0x140562e10L,
            (LPVOID *)&CryptoPP__PK_MessageAccumulatorDigestSize1_user,
            (LPVOID *)&CryptoPP__PK_MessageAccumulatorDigestSize1_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_MessageAccumulatorDigestSize1_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::PK_MessageAccumulator::*)())&CryptoPP::PK_MessageAccumulator::DigestSize) },
        {   (LPVOID)0x140563160L,
            (LPVOID *)&CryptoPP__PK_MessageAccumulatorctor_PK_MessageAccumulator2_user,
            (LPVOID *)&CryptoPP__PK_MessageAccumulatorctor_PK_MessageAccumulator2_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_MessageAccumulatorctor_PK_MessageAccumulator2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PK_MessageAccumulator::*)())&CryptoPP::PK_MessageAccumulator::ctor_PK_MessageAccumulator) },
        {   (LPVOID)0x140562eb0L,
            (LPVOID *)&CryptoPP__PK_MessageAccumulatorTruncatedFinal3_user,
            (LPVOID *)&CryptoPP__PK_MessageAccumulatorTruncatedFinal3_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_MessageAccumulatorTruncatedFinal3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PK_MessageAccumulator::*)(uint8_t*, uint64_t))&CryptoPP::PK_MessageAccumulator::TruncatedFinal) },
        {   (LPVOID)0x140563180L,
            (LPVOID *)&CryptoPP__PK_MessageAccumulatordtor_PK_MessageAccumulator4_user,
            (LPVOID *)&CryptoPP__PK_MessageAccumulatordtor_PK_MessageAccumulator4_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_MessageAccumulatordtor_PK_MessageAccumulator4_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PK_MessageAccumulator::*)())&CryptoPP::PK_MessageAccumulator::dtor_PK_MessageAccumulator) },
        
        {   (LPVOID)0x140562f60L,
            (LPVOID *)&CryptoPP__PK_MessageAccumulatorBasector_PK_MessageAccumulatorBase1_user,
            (LPVOID *)&CryptoPP__PK_MessageAccumulatorBasector_PK_MessageAccumulatorBase1_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_MessageAccumulatorBasector_PK_MessageAccumulatorBase1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PK_MessageAccumulatorBase::*)())&CryptoPP::PK_MessageAccumulatorBase::ctor_PK_MessageAccumulatorBase) },
        {   (LPVOID)0x1405630d0L,
            (LPVOID *)&CryptoPP__PK_MessageAccumulatorBaseUpdate2_user,
            (LPVOID *)&CryptoPP__PK_MessageAccumulatorBaseUpdate2_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_MessageAccumulatorBaseUpdate2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PK_MessageAccumulatorBase::*)(uint8_t*, uint64_t))&CryptoPP::PK_MessageAccumulatorBase::Update) },
        {   (LPVOID)0x1405631a0L,
            (LPVOID *)&CryptoPP__PK_MessageAccumulatorBasedtor_PK_MessageAccumulatorBase3_user,
            (LPVOID *)&CryptoPP__PK_MessageAccumulatorBasedtor_PK_MessageAccumulatorBase3_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_MessageAccumulatorBasedtor_PK_MessageAccumulatorBase3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PK_MessageAccumulatorBase::*)())&CryptoPP::PK_MessageAccumulatorBase::dtor_PK_MessageAccumulatorBase) },
        
        {   (LPVOID)0x14045a8b0L,
            (LPVOID *)&CryptoPP__ClonableImplctor_ClonableImpl2_user,
            (LPVOID *)&CryptoPP__ClonableImplctor_ClonableImpl2_next,
            (LPVOID)cast_pointer_function(CryptoPP__ClonableImplctor_ClonableImpl2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::Rijndael::Enc>::*)(struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::Rijndael::Enc>*))&CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::Rijndael::Enc>::ctor_ClonableImpl) },
        {   (LPVOID)0x14045b930L,
            (LPVOID *)&CryptoPP__ClonableImplctor_ClonableImpl4_user,
            (LPVOID *)&CryptoPP__ClonableImplctor_ClonableImpl4_next,
            (LPVOID)cast_pointer_function(CryptoPP__ClonableImplctor_ClonableImpl4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::Rijndael::Enc>::*)())&CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::Rijndael::Enc>::ctor_ClonableImpl) },
        {   (LPVOID)0x14045a6f0L,
            (LPVOID *)&CryptoPP__ClonableImplClone6_user,
            (LPVOID *)&CryptoPP__ClonableImplClone6_next,
            (LPVOID)cast_pointer_function(CryptoPP__ClonableImplClone6_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Clonable*(CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::Rijndael::Enc>::*)())&CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::Rijndael::Enc>::Clone) },
        {   (LPVOID)0x14044e6e0L,
            (LPVOID *)&CryptoPP__ClonableImpldtor_ClonableImpl8_user,
            (LPVOID *)&CryptoPP__ClonableImpldtor_ClonableImpl8_next,
            (LPVOID)cast_pointer_function(CryptoPP__ClonableImpldtor_ClonableImpl8_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::Rijndael::Enc>::*)())&CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::Rijndael::Enc>::dtor_ClonableImpl) },
        
        {   (LPVOID)0x14045a7c0L,
            (LPVOID *)&CryptoPP__BlockCipherFinalctor_BlockCipherFinal2_user,
            (LPVOID *)&CryptoPP__BlockCipherFinalctor_BlockCipherFinal2_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockCipherFinalctor_BlockCipherFinal2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>::*)(struct CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>*))&CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>::ctor_BlockCipherFinal) },
        {   (LPVOID)0x14045a670L,
            (LPVOID *)&CryptoPP__BlockCipherFinalctor_BlockCipherFinal4_user,
            (LPVOID *)&CryptoPP__BlockCipherFinalctor_BlockCipherFinal4_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockCipherFinalctor_BlockCipherFinal4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>::*)())&CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>::ctor_BlockCipherFinal) },
        {   (LPVOID)0x14045a6e0L,
            (LPVOID *)&CryptoPP__BlockCipherFinalIsForwardTransformation6_user,
            (LPVOID *)&CryptoPP__BlockCipherFinalIsForwardTransformation6_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockCipherFinalIsForwardTransformation6_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>::*)())&CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>::IsForwardTransformation) },
        {   (LPVOID)0x14044e660L,
            (LPVOID *)&CryptoPP__BlockCipherFinaldtor_BlockCipherFinal11_user,
            (LPVOID *)&CryptoPP__BlockCipherFinaldtor_BlockCipherFinal11_next,
            (LPVOID)cast_pointer_function(CryptoPP__BlockCipherFinaldtor_BlockCipherFinal11_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>::*)())&CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>::dtor_BlockCipherFinal) },
        
        {   (LPVOID)0x1404578e0L,
            (LPVOID *)&CryptoPP__CBC_Encryptionctor_CBC_Encryption2_user,
            (LPVOID *)&CryptoPP__CBC_Encryptionctor_CBC_Encryption2_next,
            (LPVOID)cast_pointer_function(CryptoPP__CBC_Encryptionctor_CBC_Encryption2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CBC_Encryption::*)())&CryptoPP::CBC_Encryption::ctor_CBC_Encryption) },
        {   (LPVOID)0x140619140L,
            (LPVOID *)&CryptoPP__CBC_EncryptionProcessBlocks3_user,
            (LPVOID *)&CryptoPP__CBC_EncryptionProcessBlocks3_next,
            (LPVOID)cast_pointer_function(CryptoPP__CBC_EncryptionProcessBlocks3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CBC_Encryption::*)(uint8_t*, uint8_t*, uint64_t))&CryptoPP::CBC_Encryption::ProcessBlocks) },
        {   (LPVOID)0x14044e6a0L,
            (LPVOID *)&CryptoPP__CBC_Encryptiondtor_CBC_Encryption5_user,
            (LPVOID *)&CryptoPP__CBC_Encryptiondtor_CBC_Encryption5_next,
            (LPVOID)cast_pointer_function(CryptoPP__CBC_Encryptiondtor_CBC_Encryption5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CBC_Encryption::*)())&CryptoPP::CBC_Encryption::dtor_CBC_Encryption) },
        
        {   (LPVOID)0x140453380L,
            (LPVOID *)&CryptoPP__CipherModeFinalTemplate_CipherHolderctor_CipherModeFinalTemplate_CipherHolder2_user,
            (LPVOID *)&CryptoPP__CipherModeFinalTemplate_CipherHolderctor_CipherModeFinalTemplate_CipherHolder2_next,
            (LPVOID)cast_pointer_function(CryptoPP__CipherModeFinalTemplate_CipherHolderctor_CipherModeFinalTemplate_CipherHolder2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::CBC_Encryption>::*)())&CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::CBC_Encryption>::ctor_CipherModeFinalTemplate_CipherHolder) },
        {   (LPVOID)0x14045a460L,
            (LPVOID *)&CryptoPP__CipherModeFinalTemplate_CipherHolderStaticAlgorithmName4_user,
            (LPVOID *)&CryptoPP__CipherModeFinalTemplate_CipherHolderStaticAlgorithmName4_next,
            (LPVOID)cast_pointer_function(CryptoPP__CipherModeFinalTemplate_CipherHolderStaticAlgorithmName4_wrapper),
            (LPVOID)cast_pointer_function((struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*(CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::CBC_Encryption>::*)(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*))&CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::CBC_Encryption>::StaticAlgorithmName) },
        {   (LPVOID)0x14044e500L,
            (LPVOID *)&CryptoPP__CipherModeFinalTemplate_CipherHolderdtor_CipherModeFinalTemplate_CipherHolder9_user,
            (LPVOID *)&CryptoPP__CipherModeFinalTemplate_CipherHolderdtor_CipherModeFinalTemplate_CipherHolder9_next,
            (LPVOID)cast_pointer_function(CryptoPP__CipherModeFinalTemplate_CipherHolderdtor_CipherModeFinalTemplate_CipherHolder9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::CBC_Encryption>::*)())&CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::CBC_Encryption>::dtor_CipherModeFinalTemplate_CipherHolder) },
        
        {   (LPVOID)0x1406612c0L,
            (LPVOID *)&CryptoPP__DSAGeneratePrimes1_user,
            (LPVOID *)&CryptoPP__DSAGeneratePrimes1_next,
            (LPVOID)cast_pointer_function(CryptoPP__DSAGeneratePrimes1_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::DSA::*)(uint8_t*, unsigned int, struct CryptoPP::Integer*, struct CryptoPP::Integer*, unsigned int, struct CryptoPP::Integer*, bool))&CryptoPP::DSA::GeneratePrimes) },
        {   (LPVOID)0x140633bf0L,
            (LPVOID *)&CryptoPP__DSAIsValidPrimeLength2_user,
            (LPVOID *)&CryptoPP__DSAIsValidPrimeLength2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DSAIsValidPrimeLength2_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::DSA::*)(unsigned int))&CryptoPP::DSA::IsValidPrimeLength) },
        {   (LPVOID)0x1405621d0L,
            (LPVOID *)&CryptoPP__DSAStaticAlgorithmName3_user,
            (LPVOID *)&CryptoPP__DSAStaticAlgorithmName3_next,
            (LPVOID)cast_pointer_function(CryptoPP__DSAStaticAlgorithmName3_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::DSA::*)())&CryptoPP::DSA::StaticAlgorithmName) },
        
        {   (LPVOID)0x140631e10L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedAssignFrom1_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedAssignFrom1_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_IntegerBasedAssignFrom1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_GroupParameters_IntegerBased::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::DL_GroupParameters_IntegerBased::AssignFrom) },
        {   (LPVOID)0x140631930L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedBERDecode2_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedBERDecode2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_IntegerBasedBERDecode2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_GroupParameters_IntegerBased::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::DL_GroupParameters_IntegerBased::BERDecode) },
        {   (LPVOID)0x140553360L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedComputeGroupOrder3_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedComputeGroupOrder3_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_IntegerBasedComputeGroupOrder3_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::DL_GroupParameters_IntegerBased::*)(short, struct CryptoPP::Integer*))&CryptoPP::DL_GroupParameters_IntegerBased::ComputeGroupOrder) },
        {   (LPVOID)0x14055c7a0L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedConvertElementToInteger4_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedConvertElementToInteger4_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_IntegerBasedConvertElementToInteger4_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::DL_GroupParameters_IntegerBased::*)(short, struct CryptoPP::Integer*))&CryptoPP::DL_GroupParameters_IntegerBased::ConvertElementToInteger) },
        {   (LPVOID)0x140631be0L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedDEREncode5_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedDEREncode5_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_IntegerBasedDEREncode5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_GroupParameters_IntegerBased::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::DL_GroupParameters_IntegerBased::DEREncode) },
        {   (LPVOID)0x14055f3e0L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedctor_DL_GroupParameters_IntegerBased6_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedctor_DL_GroupParameters_IntegerBased6_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_IntegerBasedctor_DL_GroupParameters_IntegerBased6_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DL_GroupParameters_IntegerBased::*)(struct CryptoPP::DL_GroupParameters_IntegerBased*))&CryptoPP::DL_GroupParameters_IntegerBased::ctor_DL_GroupParameters_IntegerBased) },
        {   (LPVOID)0x14055ef70L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedctor_DL_GroupParameters_IntegerBased7_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedctor_DL_GroupParameters_IntegerBased7_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_IntegerBasedctor_DL_GroupParameters_IntegerBased7_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DL_GroupParameters_IntegerBased::*)())&CryptoPP::DL_GroupParameters_IntegerBased::ctor_DL_GroupParameters_IntegerBased) },
        {   (LPVOID)0x1406317b0L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedDecodeElement8_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedDecodeElement8_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_IntegerBasedDecodeElement8_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::DL_GroupParameters_IntegerBased::*)(short, struct CryptoPP::Integer*, uint8_t*))&CryptoPP::DL_GroupParameters_IntegerBased::DecodeElement) },
        {   (LPVOID)0x14055c700L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedEncodeElement9_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedEncodeElement9_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_IntegerBasedEncodeElement9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_GroupParameters_IntegerBased::*)(bool, struct CryptoPP::Integer*, uint8_t*))&CryptoPP::DL_GroupParameters_IntegerBased::EncodeElement) },
        {   (LPVOID)0x14055c610L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedFastSubgroupCheckAvailable10_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedFastSubgroupCheckAvailable10_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_IntegerBasedFastSubgroupCheckAvailable10_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::DL_GroupParameters_IntegerBased::*)())&CryptoPP::DL_GroupParameters_IntegerBased::FastSubgroupCheckAvailable) },
        {   (LPVOID)0x140631390L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedGenerateRandom11_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedGenerateRandom11_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_IntegerBasedGenerateRandom11_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_GroupParameters_IntegerBased::*)(struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::NameValuePairs*))&CryptoPP::DL_GroupParameters_IntegerBased::GenerateRandom) },
        {   (LPVOID)0x140631f20L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedGetAlgorithmID12_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedGetAlgorithmID12_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_IntegerBasedGetAlgorithmID12_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::DL_GroupParameters_IntegerBased::*)(short))&CryptoPP::DL_GroupParameters_IntegerBased::GetAlgorithmID) },
        {   (LPVOID)0x1406323f0L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedGetDefaultSubgroupOrderSize13_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedGetDefaultSubgroupOrderSize13_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_IntegerBasedGetDefaultSubgroupOrderSize13_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::DL_GroupParameters_IntegerBased::*)(unsigned int))&CryptoPP::DL_GroupParameters_IntegerBased::GetDefaultSubgroupOrderSize) },
        {   (LPVOID)0x14055c760L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedGetEncodedElementSize14_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedGetEncodedElementSize14_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_IntegerBasedGetEncodedElementSize14_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::DL_GroupParameters_IntegerBased::*)(bool))&CryptoPP::DL_GroupParameters_IntegerBased::GetEncodedElementSize) },
        {   (LPVOID)0x14055c3d0L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedGetGroupOrder15_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedGetGroupOrder15_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_IntegerBasedGetGroupOrder15_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::DL_GroupParameters_IntegerBased::*)(short))&CryptoPP::DL_GroupParameters_IntegerBased::GetGroupOrder) },
        {   (LPVOID)0x1406321c0L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedGetMaxExponent16_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedGetMaxExponent16_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_IntegerBasedGetMaxExponent16_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::DL_GroupParameters_IntegerBased::*)(short))&CryptoPP::DL_GroupParameters_IntegerBased::GetMaxExponent) },
        {   (LPVOID)0x14055c3c0L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedGetSubgroupOrder17_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedGetSubgroupOrder17_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_IntegerBasedGetSubgroupOrder17_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::DL_GroupParameters_IntegerBased::*)())&CryptoPP::DL_GroupParameters_IntegerBased::GetSubgroupOrder) },
        {   (LPVOID)0x140631d30L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedGetVoidValue18_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedGetVoidValue18_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_IntegerBasedGetVoidValue18_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::DL_GroupParameters_IntegerBased::*)(char*, struct type_info*, void*))&CryptoPP::DL_GroupParameters_IntegerBased::GetVoidValue) },
        {   (LPVOID)0x140553070L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedInitialize19_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedInitialize19_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_IntegerBasedInitialize19_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_GroupParameters_IntegerBased::*)(struct CryptoPP::DL_GroupParameters_IntegerBased*))&CryptoPP::DL_GroupParameters_IntegerBased::Initialize) },
        {   (LPVOID)0x1405531f0L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedInitialize20_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedInitialize20_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_IntegerBasedInitialize20_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_GroupParameters_IntegerBased::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::DL_GroupParameters_IntegerBased::Initialize) },
        {   (LPVOID)0x140553100L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedInitialize21_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedInitialize21_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_IntegerBasedInitialize21_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_GroupParameters_IntegerBased::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::DL_GroupParameters_IntegerBased::Initialize) },
        {   (LPVOID)0x140553150L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedSetSubgroupOrder22_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedSetSubgroupOrder22_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_IntegerBasedSetSubgroupOrder22_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_GroupParameters_IntegerBased::*)(struct CryptoPP::Integer*))&CryptoPP::DL_GroupParameters_IntegerBased::SetSubgroupOrder) },
        {   (LPVOID)0x140630680L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedValidateGroup23_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBasedValidateGroup23_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_IntegerBasedValidateGroup23_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::DL_GroupParameters_IntegerBased::*)(struct CryptoPP::RandomNumberGenerator*, unsigned int))&CryptoPP::DL_GroupParameters_IntegerBased::ValidateGroup) },
        {   (LPVOID)0x14055f040L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBaseddtor_DL_GroupParameters_IntegerBased24_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_IntegerBaseddtor_DL_GroupParameters_IntegerBased24_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_IntegerBaseddtor_DL_GroupParameters_IntegerBased24_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DL_GroupParameters_IntegerBased::*)())&CryptoPP::DL_GroupParameters_IntegerBased::dtor_DL_GroupParameters_IntegerBased) },
        
        {   (LPVOID)0x140561080L,
            (LPVOID *)&CryptoPP__MontgomeryRepresentationCascadeExponentiate1_user,
            (LPVOID *)&CryptoPP__MontgomeryRepresentationCascadeExponentiate1_next,
            (LPVOID)cast_pointer_function(CryptoPP__MontgomeryRepresentationCascadeExponentiate1_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::MontgomeryRepresentation::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::MontgomeryRepresentation::CascadeExponentiate) },
        {   (LPVOID)0x140560cf0L,
            (LPVOID *)&CryptoPP__MontgomeryRepresentationClone2_user,
            (LPVOID *)&CryptoPP__MontgomeryRepresentationClone2_next,
            (LPVOID)cast_pointer_function(CryptoPP__MontgomeryRepresentationClone2_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::ModularArithmetic*(CryptoPP::MontgomeryRepresentation::*)())&CryptoPP::MontgomeryRepresentation::Clone) },
        {   (LPVOID)0x140560d80L,
            (LPVOID *)&CryptoPP__MontgomeryRepresentationConvertIn3_user,
            (LPVOID *)&CryptoPP__MontgomeryRepresentationConvertIn3_next,
            (LPVOID)cast_pointer_function(CryptoPP__MontgomeryRepresentationConvertIn3_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::MontgomeryRepresentation::*)(short, struct CryptoPP::Integer*))&CryptoPP::MontgomeryRepresentation::ConvertIn) },
        {   (LPVOID)0x1405edcd0L,
            (LPVOID *)&CryptoPP__MontgomeryRepresentationConvertOut4_user,
            (LPVOID *)&CryptoPP__MontgomeryRepresentationConvertOut4_next,
            (LPVOID)cast_pointer_function(CryptoPP__MontgomeryRepresentationConvertOut4_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::MontgomeryRepresentation::*)(short, struct CryptoPP::Integer*))&CryptoPP::MontgomeryRepresentation::ConvertOut) },
        {   (LPVOID)0x140560d70L,
            (LPVOID *)&CryptoPP__MontgomeryRepresentationIsMontgomeryRepresentation5_user,
            (LPVOID *)&CryptoPP__MontgomeryRepresentationIsMontgomeryRepresentation5_next,
            (LPVOID)cast_pointer_function(CryptoPP__MontgomeryRepresentationIsMontgomeryRepresentation5_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::MontgomeryRepresentation::*)())&CryptoPP::MontgomeryRepresentation::IsMontgomeryRepresentation) },
        {   (LPVOID)0x1405ed630L,
            (LPVOID *)&CryptoPP__MontgomeryRepresentationctor_MontgomeryRepresentation6_user,
            (LPVOID *)&CryptoPP__MontgomeryRepresentationctor_MontgomeryRepresentation6_next,
            (LPVOID)cast_pointer_function(CryptoPP__MontgomeryRepresentationctor_MontgomeryRepresentation6_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::MontgomeryRepresentation::*)(struct CryptoPP::Integer*))&CryptoPP::MontgomeryRepresentation::ctor_MontgomeryRepresentation) },
        {   (LPVOID)0x140560c30L,
            (LPVOID *)&CryptoPP__MontgomeryRepresentationctor_MontgomeryRepresentation7_user,
            (LPVOID *)&CryptoPP__MontgomeryRepresentationctor_MontgomeryRepresentation7_next,
            (LPVOID)cast_pointer_function(CryptoPP__MontgomeryRepresentationctor_MontgomeryRepresentation7_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::MontgomeryRepresentation::*)(struct CryptoPP::MontgomeryRepresentation*))&CryptoPP::MontgomeryRepresentation::ctor_MontgomeryRepresentation) },
        {   (LPVOID)0x140560f60L,
            (LPVOID *)&CryptoPP__MontgomeryRepresentationMultiplicativeIdentity8_user,
            (LPVOID *)&CryptoPP__MontgomeryRepresentationMultiplicativeIdentity8_next,
            (LPVOID)cast_pointer_function(CryptoPP__MontgomeryRepresentationMultiplicativeIdentity8_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::MontgomeryRepresentation::*)())&CryptoPP::MontgomeryRepresentation::MultiplicativeIdentity) },
        {   (LPVOID)0x1405edeb0L,
            (LPVOID *)&CryptoPP__MontgomeryRepresentationMultiplicativeInverse9_user,
            (LPVOID *)&CryptoPP__MontgomeryRepresentationMultiplicativeInverse9_next,
            (LPVOID)cast_pointer_function(CryptoPP__MontgomeryRepresentationMultiplicativeInverse9_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::MontgomeryRepresentation::*)(struct CryptoPP::Integer*))&CryptoPP::MontgomeryRepresentation::MultiplicativeInverse) },
        {   (LPVOID)0x1405ed890L,
            (LPVOID *)&CryptoPP__MontgomeryRepresentationMultiply10_user,
            (LPVOID *)&CryptoPP__MontgomeryRepresentationMultiply10_next,
            (LPVOID)cast_pointer_function(CryptoPP__MontgomeryRepresentationMultiply10_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::MontgomeryRepresentation::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::MontgomeryRepresentation::Multiply) },
        {   (LPVOID)0x1405610f0L,
            (LPVOID *)&CryptoPP__MontgomeryRepresentationSimultaneousExponentiate11_user,
            (LPVOID *)&CryptoPP__MontgomeryRepresentationSimultaneousExponentiate11_next,
            (LPVOID)cast_pointer_function(CryptoPP__MontgomeryRepresentationSimultaneousExponentiate11_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::MontgomeryRepresentation::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, unsigned int))&CryptoPP::MontgomeryRepresentation::SimultaneousExponentiate) },
        {   (LPVOID)0x1405edb00L,
            (LPVOID *)&CryptoPP__MontgomeryRepresentationSquare12_user,
            (LPVOID *)&CryptoPP__MontgomeryRepresentationSquare12_next,
            (LPVOID)cast_pointer_function(CryptoPP__MontgomeryRepresentationSquare12_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::MontgomeryRepresentation::*)(struct CryptoPP::Integer*))&CryptoPP::MontgomeryRepresentation::Square) },
        {   (LPVOID)0x140561170L,
            (LPVOID *)&CryptoPP__MontgomeryRepresentationdtor_MontgomeryRepresentation13_user,
            (LPVOID *)&CryptoPP__MontgomeryRepresentationdtor_MontgomeryRepresentation13_next,
            (LPVOID)cast_pointer_function(CryptoPP__MontgomeryRepresentationdtor_MontgomeryRepresentation13_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::MontgomeryRepresentation::*)())&CryptoPP::MontgomeryRepresentation::dtor_MontgomeryRepresentation) },
        
        {   (LPVOID)0x14055f210L,
            (LPVOID *)&CryptoPP__ModExpPrecomputationBERDecodeElement1_user,
            (LPVOID *)&CryptoPP__ModExpPrecomputationBERDecodeElement1_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModExpPrecomputationBERDecodeElement1_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::ModExpPrecomputation::*)(short, struct CryptoPP::Integer*))&CryptoPP::ModExpPrecomputation::BERDecodeElement) },
        {   (LPVOID)0x14055f0f0L,
            (LPVOID *)&CryptoPP__ModExpPrecomputationConvertIn2_user,
            (LPVOID *)&CryptoPP__ModExpPrecomputationConvertIn2_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModExpPrecomputationConvertIn2_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::ModExpPrecomputation::*)(short, struct CryptoPP::Integer*))&CryptoPP::ModExpPrecomputation::ConvertIn) },
        {   (LPVOID)0x14055f160L,
            (LPVOID *)&CryptoPP__ModExpPrecomputationConvertOut3_user,
            (LPVOID *)&CryptoPP__ModExpPrecomputationConvertOut3_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModExpPrecomputationConvertOut3_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::ModExpPrecomputation::*)(short, struct CryptoPP::Integer*))&CryptoPP::ModExpPrecomputation::ConvertOut) },
        {   (LPVOID)0x14055f250L,
            (LPVOID *)&CryptoPP__ModExpPrecomputationDEREncodeElement4_user,
            (LPVOID *)&CryptoPP__ModExpPrecomputationDEREncodeElement4_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModExpPrecomputationDEREncodeElement4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ModExpPrecomputation::*)(struct CryptoPP::BufferedTransformation*, struct CryptoPP::Integer*))&CryptoPP::ModExpPrecomputation::DEREncodeElement) },
        {   (LPVOID)0x140552480L,
            (LPVOID *)&CryptoPP__ModExpPrecomputationGetModulus5_user,
            (LPVOID *)&CryptoPP__ModExpPrecomputationGetModulus5_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModExpPrecomputationGetModulus5_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::ModExpPrecomputation::*)())&CryptoPP::ModExpPrecomputation::GetModulus) },
        {   (LPVOID)0x14055f500L,
            (LPVOID *)&CryptoPP__ModExpPrecomputationctor_ModExpPrecomputation6_user,
            (LPVOID *)&CryptoPP__ModExpPrecomputationctor_ModExpPrecomputation6_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModExpPrecomputationctor_ModExpPrecomputation6_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ModExpPrecomputation::*)(struct CryptoPP::ModExpPrecomputation*))&CryptoPP::ModExpPrecomputation::ctor_ModExpPrecomputation) },
        {   (LPVOID)0x14055f0a0L,
            (LPVOID *)&CryptoPP__ModExpPrecomputationctor_ModExpPrecomputation7_user,
            (LPVOID *)&CryptoPP__ModExpPrecomputationctor_ModExpPrecomputation7_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModExpPrecomputationctor_ModExpPrecomputation7_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ModExpPrecomputation::*)())&CryptoPP::ModExpPrecomputation::ctor_ModExpPrecomputation) },
        {   (LPVOID)0x14055f0e0L,
            (LPVOID *)&CryptoPP__ModExpPrecomputationNeedConversions8_user,
            (LPVOID *)&CryptoPP__ModExpPrecomputationNeedConversions8_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModExpPrecomputationNeedConversions8_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::ModExpPrecomputation::*)())&CryptoPP::ModExpPrecomputation::NeedConversions) },
        {   (LPVOID)0x1405525c0L,
            (LPVOID *)&CryptoPP__ModExpPrecomputationSetModulus9_user,
            (LPVOID *)&CryptoPP__ModExpPrecomputationSetModulus9_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModExpPrecomputationSetModulus9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ModExpPrecomputation::*)(struct CryptoPP::Integer*))&CryptoPP::ModExpPrecomputation::SetModulus) },
        {   (LPVOID)0x14055f280L,
            (LPVOID *)&CryptoPP__ModExpPrecomputationdtor_ModExpPrecomputation10_user,
            (LPVOID *)&CryptoPP__ModExpPrecomputationdtor_ModExpPrecomputation10_next,
            (LPVOID)cast_pointer_function(CryptoPP__ModExpPrecomputationdtor_ModExpPrecomputation10_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ModExpPrecomputation::*)())&CryptoPP::ModExpPrecomputation::dtor_ModExpPrecomputation) },
        
        {   (LPVOID)0x1406320a0L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_GFPCascadeExponentiate1_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_GFPCascadeExponentiate1_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_GFPCascadeExponentiate1_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::DL_GroupParameters_GFP::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::DL_GroupParameters_GFP::CascadeExponentiate) },
        {   (LPVOID)0x14055d790L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_GFPctor_DL_GroupParameters_GFP2_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_GFPctor_DL_GroupParameters_GFP2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_GFPctor_DL_GroupParameters_GFP2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DL_GroupParameters_GFP::*)(struct CryptoPP::DL_GroupParameters_GFP*))&CryptoPP::DL_GroupParameters_GFP::ctor_DL_GroupParameters_GFP) },
        {   (LPVOID)0x14055d620L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_GFPctor_DL_GroupParameters_GFP3_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_GFPctor_DL_GroupParameters_GFP3_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_GFPctor_DL_GroupParameters_GFP3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DL_GroupParameters_GFP::*)())&CryptoPP::DL_GroupParameters_GFP::ctor_DL_GroupParameters_GFP) },
        {   (LPVOID)0x14055c810L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_GFPGetFieldType4_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_GFPGetFieldType4_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_GFPGetFieldType4_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DL_GroupParameters_GFP::*)())&CryptoPP::DL_GroupParameters_GFP::GetFieldType) },
        {   (LPVOID)0x1405ad530L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_GFPGetVoidValue5_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_GFPGetVoidValue5_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_GFPGetVoidValue5_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::DL_GroupParameters_GFP::*)(char*, struct type_info*, void*))&CryptoPP::DL_GroupParameters_GFP::GetVoidValue) },
        {   (LPVOID)0x14055c7e0L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_GFPIsIdentity6_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_GFPIsIdentity6_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_GFPIsIdentity6_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::DL_GroupParameters_GFP::*)(struct CryptoPP::Integer*))&CryptoPP::DL_GroupParameters_GFP::IsIdentity) },
        {   (LPVOID)0x140632030L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_GFPMultiplyElements7_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_GFPMultiplyElements7_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_GFPMultiplyElements7_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::DL_GroupParameters_GFP::*)(short, struct CryptoPP::Integer*, struct CryptoPP::Integer*))&CryptoPP::DL_GroupParameters_GFP::MultiplyElements) },
        {   (LPVOID)0x140631f60L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_GFPSimultaneousExponentiate8_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_GFPSimultaneousExponentiate8_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_GFPSimultaneousExponentiate8_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_GroupParameters_GFP::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, unsigned int))&CryptoPP::DL_GroupParameters_GFP::SimultaneousExponentiate) },
        {   (LPVOID)0x14055d740L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_GFPdtor_DL_GroupParameters_GFP9_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_GFPdtor_DL_GroupParameters_GFP9_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_GFPdtor_DL_GroupParameters_GFP9_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DL_GroupParameters_GFP::*)())&CryptoPP::DL_GroupParameters_GFP::dtor_DL_GroupParameters_GFP) },
        
        {   (LPVOID)0x1406338d0L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_DSActor_DL_GroupParameters_DSA1_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_DSActor_DL_GroupParameters_DSA1_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_DSActor_DL_GroupParameters_DSA1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DL_GroupParameters_DSA::*)(struct CryptoPP::DL_GroupParameters_DSA*))&CryptoPP::DL_GroupParameters_DSA::ctor_DL_GroupParameters_DSA) },
        {   (LPVOID)0x14056b140L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_DSActor_DL_GroupParameters_DSA2_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_DSActor_DL_GroupParameters_DSA2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_DSActor_DL_GroupParameters_DSA2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DL_GroupParameters_DSA::*)())&CryptoPP::DL_GroupParameters_DSA::ctor_DL_GroupParameters_DSA) },
        {   (LPVOID)0x14062fad0L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_DSAGenerateRandom3_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_DSAGenerateRandom3_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_DSAGenerateRandom3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_GroupParameters_DSA::*)(struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::NameValuePairs*))&CryptoPP::DL_GroupParameters_DSA::GenerateRandom) },
        {   (LPVOID)0x140630230L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_DSAValidateGroup4_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_DSAValidateGroup4_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_DSAValidateGroup4_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::DL_GroupParameters_DSA::*)(struct CryptoPP::RandomNumberGenerator*, unsigned int))&CryptoPP::DL_GroupParameters_DSA::ValidateGroup) },
        {   (LPVOID)0x140560500L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_DSAdtor_DL_GroupParameters_DSA5_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_DSAdtor_DL_GroupParameters_DSA5_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_DSAdtor_DL_GroupParameters_DSA5_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DL_GroupParameters_DSA::*)())&CryptoPP::DL_GroupParameters_DSA::dtor_DL_GroupParameters_DSA) },
        
        {   (LPVOID)0x1405746d0L,
            (LPVOID *)&CryptoPP__AbstractGroupCascadeScalarMultiply1_user,
            (LPVOID *)&CryptoPP__AbstractGroupCascadeScalarMultiply1_next,
            (LPVOID)cast_pointer_function(CryptoPP__AbstractGroupCascadeScalarMultiply1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::AbstractGroup<CryptoPP::EC2NPoint>::*)(struct CryptoPP::Integer*))&CryptoPP::AbstractGroup<CryptoPP::EC2NPoint>::CascadeScalarMultiply) },
        
        {   (LPVOID)0x140572780L,
            (LPVOID *)&CryptoPP__AbstractGroupCascadeScalarMultiply1_user,
            (LPVOID *)&CryptoPP__AbstractGroupCascadeScalarMultiply1_next,
            (LPVOID)cast_pointer_function(CryptoPP__AbstractGroupCascadeScalarMultiply1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::AbstractGroup<CryptoPP::PolynomialMod2>::*)(struct CryptoPP::Integer*))&CryptoPP::AbstractGroup<CryptoPP::PolynomialMod2>::CascadeScalarMultiply) },
        
        {   (LPVOID)0x140555b10L,
            (LPVOID *)&CryptoPP__EuclideanDomainOfDivisionAlgorithm1_user,
            (LPVOID *)&CryptoPP__EuclideanDomainOfDivisionAlgorithm1_next,
            (LPVOID)cast_pointer_function(CryptoPP__EuclideanDomainOfDivisionAlgorithm1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::*)())&CryptoPP::EuclideanDomainOf<CryptoPP::PolynomialMod2>::DivisionAlgorithm) },
        
        {   (LPVOID)0x14062b540L,
            (LPVOID *)&CryptoPP__GF2NPBERDecodeElement1_user,
            (LPVOID *)&CryptoPP__GF2NPBERDecodeElement1_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NPBERDecodeElement1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::GF2NP::*)(struct CryptoPP::BufferedTransformation*, struct CryptoPP::PolynomialMod2*))&CryptoPP::GF2NP::BERDecodeElement) },
        {   (LPVOID)0x140581ac0L,
            (LPVOID *)&CryptoPP__GF2NPClone2_user,
            (LPVOID *)&CryptoPP__GF2NPClone2_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NPClone2_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::GF2NP*(CryptoPP::GF2NP::*)())&CryptoPP::GF2NP::Clone) },
        {   (LPVOID)0x140581b40L,
            (LPVOID *)&CryptoPP__GF2NPDEREncode3_user,
            (LPVOID *)&CryptoPP__GF2NPDEREncode3_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NPDEREncode3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::GF2NP::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::GF2NP::DEREncode) },
        {   (LPVOID)0x14062b500L,
            (LPVOID *)&CryptoPP__GF2NPDEREncodeElement4_user,
            (LPVOID *)&CryptoPP__GF2NPDEREncodeElement4_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NPDEREncodeElement4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::GF2NP::*)(struct CryptoPP::BufferedTransformation*, struct CryptoPP::PolynomialMod2*))&CryptoPP::GF2NP::DEREncodeElement) },
        {   (LPVOID)0x1405817f0L,
            (LPVOID *)&CryptoPP__GF2NPEqual5_user,
            (LPVOID *)&CryptoPP__GF2NPEqual5_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NPEqual5_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::GF2NP::*)(struct CryptoPP::PolynomialMod2*, struct CryptoPP::PolynomialMod2*))&CryptoPP::GF2NP::Equal) },
        {   (LPVOID)0x140581a70L,
            (LPVOID *)&CryptoPP__GF2NPctor_GF2NP6_user,
            (LPVOID *)&CryptoPP__GF2NPctor_GF2NP6_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NPctor_GF2NP6_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::GF2NP::*)(struct CryptoPP::GF2NP*))&CryptoPP::GF2NP::ctor_GF2NP) },
        {   (LPVOID)0x1406291c0L,
            (LPVOID *)&CryptoPP__GF2NPctor_GF2NP7_user,
            (LPVOID *)&CryptoPP__GF2NPctor_GF2NP7_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NPctor_GF2NP7_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::GF2NP::*)(struct CryptoPP::PolynomialMod2*))&CryptoPP::GF2NP::ctor_GF2NP) },
        {   (LPVOID)0x1406293b0L,
            (LPVOID *)&CryptoPP__GF2NPHalfTrace8_user,
            (LPVOID *)&CryptoPP__GF2NPHalfTrace8_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NPHalfTrace8_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::PolynomialMod2*(CryptoPP::GF2NP::*)(short, struct CryptoPP::PolynomialMod2*))&CryptoPP::GF2NP::HalfTrace) },
        {   (LPVOID)0x1405818a0L,
            (LPVOID *)&CryptoPP__GF2NPIsUnit9_user,
            (LPVOID *)&CryptoPP__GF2NPIsUnit9_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NPIsUnit9_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::GF2NP::*)(struct CryptoPP::PolynomialMod2*))&CryptoPP::GF2NP::IsUnit) },
        {   (LPVOID)0x140557890L,
            (LPVOID *)&CryptoPP__GF2NPMaxElementBitLength10_user,
            (LPVOID *)&CryptoPP__GF2NPMaxElementBitLength10_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NPMaxElementBitLength10_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::GF2NP::*)())&CryptoPP::GF2NP::MaxElementBitLength) },
        {   (LPVOID)0x140557840L,
            (LPVOID *)&CryptoPP__GF2NPMaxElementByteLength11_user,
            (LPVOID *)&CryptoPP__GF2NPMaxElementByteLength11_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NPMaxElementByteLength11_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::GF2NP::*)())&CryptoPP::GF2NP::MaxElementByteLength) },
        {   (LPVOID)0x140629540L,
            (LPVOID *)&CryptoPP__GF2NPSolveQuadraticEquation12_user,
            (LPVOID *)&CryptoPP__GF2NPSolveQuadraticEquation12_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NPSolveQuadraticEquation12_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::PolynomialMod2*(CryptoPP::GF2NP::*)(short, struct CryptoPP::PolynomialMod2*))&CryptoPP::GF2NP::SolveQuadraticEquation) },
        {   (LPVOID)0x1406292b0L,
            (LPVOID *)&CryptoPP__GF2NPSquareRoot13_user,
            (LPVOID *)&CryptoPP__GF2NPSquareRoot13_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NPSquareRoot13_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::PolynomialMod2*(CryptoPP::GF2NP::*)(short, struct CryptoPP::PolynomialMod2*))&CryptoPP::GF2NP::SquareRoot) },
        {   (LPVOID)0x140581680L,
            (LPVOID *)&CryptoPP__GF2NPdtor_GF2NP14_user,
            (LPVOID *)&CryptoPP__GF2NPdtor_GF2NP14_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NPdtor_GF2NP14_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::GF2NP::*)())&CryptoPP::GF2NP::dtor_GF2NP) },
        
        {   (LPVOID)0x14062ebc0L,
            (LPVOID *)&CryptoPP__EC2NAdd1_user,
            (LPVOID *)&CryptoPP__EC2NAdd1_next,
            (LPVOID)cast_pointer_function(CryptoPP__EC2NAdd1_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::EC2NPoint*(CryptoPP::EC2N::*)(struct CryptoPP::EC2NPoint*, struct CryptoPP::EC2NPoint*))&CryptoPP::EC2N::Add) },
        {   (LPVOID)0x14062e010L,
            (LPVOID *)&CryptoPP__EC2NBERDecodePoint2_user,
            (LPVOID *)&CryptoPP__EC2NBERDecodePoint2_next,
            (LPVOID)cast_pointer_function(CryptoPP__EC2NBERDecodePoint2_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::EC2NPoint*(CryptoPP::EC2N::*)(short, struct CryptoPP::EC2NPoint*))&CryptoPP::EC2N::BERDecodePoint) },
        {   (LPVOID)0x140584340L,
            (LPVOID *)&CryptoPP__EC2NCascadeMultiply3_user,
            (LPVOID *)&CryptoPP__EC2NCascadeMultiply3_next,
            (LPVOID)cast_pointer_function(CryptoPP__EC2NCascadeMultiply3_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::EC2NPoint*(CryptoPP::EC2N::*)(struct CryptoPP::EC2NPoint*, struct CryptoPP::Integer*, struct CryptoPP::EC2NPoint*, struct CryptoPP::Integer*, struct CryptoPP::EC2NPoint*))&CryptoPP::EC2N::CascadeMultiply) },
        {   (LPVOID)0x14062d1b0L,
            (LPVOID *)&CryptoPP__EC2NDEREncode4_user,
            (LPVOID *)&CryptoPP__EC2NDEREncode4_next,
            (LPVOID)cast_pointer_function(CryptoPP__EC2NDEREncode4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::EC2N::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::EC2N::DEREncode) },
        {   (LPVOID)0x14062e160L,
            (LPVOID *)&CryptoPP__EC2NDEREncodePoint5_user,
            (LPVOID *)&CryptoPP__EC2NDEREncodePoint5_next,
            (LPVOID)cast_pointer_function(CryptoPP__EC2NDEREncodePoint5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::EC2N::*)(struct CryptoPP::BufferedTransformation*, struct CryptoPP::EC2NPoint*, bool))&CryptoPP::EC2N::DEREncodePoint) },
        {   (LPVOID)0x14062d3c0L,
            (LPVOID *)&CryptoPP__EC2NDecodePoint6_user,
            (LPVOID *)&CryptoPP__EC2NDecodePoint6_next,
            (LPVOID)cast_pointer_function(CryptoPP__EC2NDecodePoint6_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::EC2N::*)(struct CryptoPP::EC2NPoint*, struct CryptoPP::BufferedTransformation*, uint64_t))&CryptoPP::EC2N::DecodePoint) },
        {   (LPVOID)0x14062d300L,
            (LPVOID *)&CryptoPP__EC2NDecodePoint7_user,
            (LPVOID *)&CryptoPP__EC2NDecodePoint7_next,
            (LPVOID)cast_pointer_function(CryptoPP__EC2NDecodePoint7_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::EC2N::*)(struct CryptoPP::EC2NPoint*, uint8_t*, uint64_t))&CryptoPP::EC2N::DecodePoint) },
        {   (LPVOID)0x14062f1d0L,
            (LPVOID *)&CryptoPP__EC2NDouble8_user,
            (LPVOID *)&CryptoPP__EC2NDouble8_next,
            (LPVOID)cast_pointer_function(CryptoPP__EC2NDouble8_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::EC2NPoint*(CryptoPP::EC2N::*)(struct CryptoPP::EC2NPoint*))&CryptoPP::EC2N::Double) },
        {   (LPVOID)0x14062cf60L,
            (LPVOID *)&CryptoPP__EC2Nctor_EC2N9_user,
            (LPVOID *)&CryptoPP__EC2Nctor_EC2N9_next,
            (LPVOID)cast_pointer_function(CryptoPP__EC2Nctor_EC2N9_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::EC2N::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::EC2N::ctor_EC2N) },
        {   (LPVOID)0x140581be0L,
            (LPVOID *)&CryptoPP__EC2Nctor_EC2N10_user,
            (LPVOID *)&CryptoPP__EC2Nctor_EC2N10_next,
            (LPVOID)cast_pointer_function(CryptoPP__EC2Nctor_EC2N10_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::EC2N::*)(struct CryptoPP::GF2NP*, struct CryptoPP::PolynomialMod2*, struct CryptoPP::PolynomialMod2*))&CryptoPP::EC2N::ctor_EC2N) },
        {   (LPVOID)0x14055d970L,
            (LPVOID *)&CryptoPP__EC2Nctor_EC2N11_user,
            (LPVOID *)&CryptoPP__EC2Nctor_EC2N11_next,
            (LPVOID)cast_pointer_function(CryptoPP__EC2Nctor_EC2N11_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::EC2N::*)())&CryptoPP::EC2N::ctor_EC2N) },
        {   (LPVOID)0x14062dcc0L,
            (LPVOID *)&CryptoPP__EC2NEncodePoint12_user,
            (LPVOID *)&CryptoPP__EC2NEncodePoint12_next,
            (LPVOID)cast_pointer_function(CryptoPP__EC2NEncodePoint12_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::EC2N::*)(struct CryptoPP::BufferedTransformation*, struct CryptoPP::EC2NPoint*, bool))&CryptoPP::EC2N::EncodePoint) },
        {   (LPVOID)0x14062df00L,
            (LPVOID *)&CryptoPP__EC2NEncodePoint13_user,
            (LPVOID *)&CryptoPP__EC2NEncodePoint13_next,
            (LPVOID)cast_pointer_function(CryptoPP__EC2NEncodePoint13_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::EC2N::*)(uint8_t*, struct CryptoPP::EC2NPoint*, bool))&CryptoPP::EC2N::EncodePoint) },
        {   (LPVOID)0x1405578a0L,
            (LPVOID *)&CryptoPP__EC2NEncodedPointSize14_user,
            (LPVOID *)&CryptoPP__EC2NEncodedPointSize14_next,
            (LPVOID)cast_pointer_function(CryptoPP__EC2NEncodedPointSize14_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::EC2N::*)(bool))&CryptoPP::EC2N::EncodedPointSize) },
        {   (LPVOID)0x14062e990L,
            (LPVOID *)&CryptoPP__EC2NEqual15_user,
            (LPVOID *)&CryptoPP__EC2NEqual15_next,
            (LPVOID)cast_pointer_function(CryptoPP__EC2NEqual15_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::EC2N::*)(struct CryptoPP::EC2NPoint*, struct CryptoPP::EC2NPoint*))&CryptoPP::EC2N::Equal) },
        {   (LPVOID)0x140583540L,
            (LPVOID *)&CryptoPP__EC2NFieldSize16_user,
            (LPVOID *)&CryptoPP__EC2NFieldSize16_next,
            (LPVOID)cast_pointer_function(CryptoPP__EC2NFieldSize16_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::EC2N::*)(short))&CryptoPP::EC2N::FieldSize) },
        {   (LPVOID)0x140557900L,
            (LPVOID *)&CryptoPP__EC2NGetField17_user,
            (LPVOID *)&CryptoPP__EC2NGetField17_next,
            (LPVOID)cast_pointer_function(CryptoPP__EC2NGetField17_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::GF2NP*(CryptoPP::EC2N::*)())&CryptoPP::EC2N::GetField) },
        {   (LPVOID)0x14062eac0L,
            (LPVOID *)&CryptoPP__EC2NIdentity18_user,
            (LPVOID *)&CryptoPP__EC2NIdentity18_next,
            (LPVOID)cast_pointer_function(CryptoPP__EC2NIdentity18_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::EC2NPoint*(CryptoPP::EC2N::*)())&CryptoPP::EC2N::Identity) },
        {   (LPVOID)0x14062eb00L,
            (LPVOID *)&CryptoPP__EC2NInverse19_user,
            (LPVOID *)&CryptoPP__EC2NInverse19_next,
            (LPVOID)cast_pointer_function(CryptoPP__EC2NInverse19_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::EC2NPoint*(CryptoPP::EC2N::*)(struct CryptoPP::EC2NPoint*))&CryptoPP::EC2N::Inverse) },
        {   (LPVOID)0x14055da70L,
            (LPVOID *)&CryptoPP__EC2NInversionIsFast20_user,
            (LPVOID *)&CryptoPP__EC2NInversionIsFast20_next,
            (LPVOID)cast_pointer_function(CryptoPP__EC2NInversionIsFast20_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::EC2N::*)())&CryptoPP::EC2N::InversionIsFast) },
        {   (LPVOID)0x14062e210L,
            (LPVOID *)&CryptoPP__EC2NValidateParameters21_user,
            (LPVOID *)&CryptoPP__EC2NValidateParameters21_next,
            (LPVOID)cast_pointer_function(CryptoPP__EC2NValidateParameters21_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::EC2N::*)(struct CryptoPP::RandomNumberGenerator*, unsigned int))&CryptoPP::EC2N::ValidateParameters) },
        {   (LPVOID)0x14062e370L,
            (LPVOID *)&CryptoPP__EC2NVerifyPoint22_user,
            (LPVOID *)&CryptoPP__EC2NVerifyPoint22_next,
            (LPVOID)cast_pointer_function(CryptoPP__EC2NVerifyPoint22_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::EC2N::*)(struct CryptoPP::EC2NPoint*))&CryptoPP::EC2N::VerifyPoint) },
        {   (LPVOID)0x14055dae0L,
            (LPVOID *)&CryptoPP__EC2Ndtor_EC2N23_user,
            (LPVOID *)&CryptoPP__EC2Ndtor_EC2N23_next,
            (LPVOID)cast_pointer_function(CryptoPP__EC2Ndtor_EC2N23_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::EC2N::*)())&CryptoPP::EC2N::dtor_EC2N) },
        
        {   (LPVOID)0x1405842d0L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECCascadeExponentiate1_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_ECCascadeExponentiate1_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_ECCascadeExponentiate1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DL_GroupParameters_EC<CryptoPP::EC2N>::*)(struct CryptoPP::Integer*))&CryptoPP::DL_GroupParameters_EC<CryptoPP::EC2N>::CascadeExponentiate) },
        
        {   (LPVOID)0x14055a0e0L,
            (LPVOID *)&CryptoPP__DL_Algorithm_GDSASign1_user,
            (LPVOID *)&CryptoPP__DL_Algorithm_GDSASign1_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_Algorithm_GDSASign1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DL_Algorithm_GDSA<CryptoPP::EC2NPoint>::*)(struct CryptoPP::Integer*, int64_t))&CryptoPP::DL_Algorithm_GDSA<CryptoPP::EC2NPoint>::Sign) },
        {   (LPVOID)0x14055a360L,
            (LPVOID *)&CryptoPP__DL_Algorithm_GDSAVerify2_user,
            (LPVOID *)&CryptoPP__DL_Algorithm_GDSAVerify2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_Algorithm_GDSAVerify2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DL_Algorithm_GDSA<CryptoPP::EC2NPoint>::*)(struct CryptoPP::Integer*))&CryptoPP::DL_Algorithm_GDSA<CryptoPP::EC2NPoint>::Verify) },
        
        {   (LPVOID)0x14045ee10L,
            (LPVOID *)&CryptoPP__member_ptrdtor_member_ptr2_user,
            (LPVOID *)&CryptoPP__member_ptrdtor_member_ptr2_next,
            (LPVOID)cast_pointer_function(CryptoPP__member_ptrdtor_member_ptr2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::*)())&CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::dtor_member_ptr) },
        
        {   (LPVOID)0x14044cf80L,
            (LPVOID *)&CryptoPP__FilterAttachable2_user,
            (LPVOID *)&CryptoPP__FilterAttachable2_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterAttachable2_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::Filter::*)())&CryptoPP::Filter::Attachable) },
        {   (LPVOID)0x14044cf90L,
            (LPVOID *)&CryptoPP__FilterShouldPropagateMessageEnd4_user,
            (LPVOID *)&CryptoPP__FilterShouldPropagateMessageEnd4_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterShouldPropagateMessageEnd4_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::Filter::*)())&CryptoPP::Filter::ShouldPropagateMessageEnd) },
        {   (LPVOID)0x14044cfa0L,
            (LPVOID *)&CryptoPP__FilterShouldPropagateMessageSeriesEnd6_user,
            (LPVOID *)&CryptoPP__FilterShouldPropagateMessageSeriesEnd6_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterShouldPropagateMessageSeriesEnd6_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::Filter::*)())&CryptoPP::Filter::ShouldPropagateMessageSeriesEnd) },
        {   (LPVOID)0x14044d850L,
            (LPVOID *)&CryptoPP__Filterdtor_Filter8_user,
            (LPVOID *)&CryptoPP__Filterdtor_Filter8_next,
            (LPVOID)cast_pointer_function(CryptoPP__Filterdtor_Filter8_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Filter::*)())&CryptoPP::Filter::dtor_Filter) },
        
        {   (LPVOID)0x140561f20L,
            (LPVOID *)&CryptoPP__PK_SignatureSchemeMaxSignatureLength1_user,
            (LPVOID *)&CryptoPP__PK_SignatureSchemeMaxSignatureLength1_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_SignatureSchemeMaxSignatureLength1_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::PK_SignatureScheme::*)(uint64_t))&CryptoPP::PK_SignatureScheme::MaxSignatureLength) },
        {   (LPVOID)0x140633720L,
            (LPVOID *)&CryptoPP__PK_SignatureSchemector_PK_SignatureScheme2_user,
            (LPVOID *)&CryptoPP__PK_SignatureSchemector_PK_SignatureScheme2_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_SignatureSchemector_PK_SignatureScheme2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PK_SignatureScheme::*)(struct CryptoPP::PK_SignatureScheme*))&CryptoPP::PK_SignatureScheme::ctor_PK_SignatureScheme) },
        {   (LPVOID)0x14056b480L,
            (LPVOID *)&CryptoPP__PK_SignatureSchemector_PK_SignatureScheme3_user,
            (LPVOID *)&CryptoPP__PK_SignatureSchemector_PK_SignatureScheme3_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_SignatureSchemector_PK_SignatureScheme3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PK_SignatureScheme::*)())&CryptoPP::PK_SignatureScheme::ctor_PK_SignatureScheme) },
        {   (LPVOID)0x140561f50L,
            (LPVOID *)&CryptoPP__PK_SignatureSchemeSignatureUpfront4_user,
            (LPVOID *)&CryptoPP__PK_SignatureSchemeSignatureUpfront4_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_SignatureSchemeSignatureUpfront4_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::PK_SignatureScheme::*)())&CryptoPP::PK_SignatureScheme::SignatureUpfront) },
        {   (LPVOID)0x140560060L,
            (LPVOID *)&CryptoPP__PK_SignatureSchemedtor_PK_SignatureScheme5_user,
            (LPVOID *)&CryptoPP__PK_SignatureSchemedtor_PK_SignatureScheme5_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_SignatureSchemedtor_PK_SignatureScheme5_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PK_SignatureScheme::*)())&CryptoPP::PK_SignatureScheme::dtor_PK_SignatureScheme) },
        
        {   (LPVOID)0x1406240e0L,
            (LPVOID *)&CryptoPP__PK_SignatureScheme__InvalidKeyLengthctor_InvalidKeyLength1_user,
            (LPVOID *)&CryptoPP__PK_SignatureScheme__InvalidKeyLengthctor_InvalidKeyLength1_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_SignatureScheme__InvalidKeyLengthctor_InvalidKeyLength1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PK_SignatureScheme::InvalidKeyLength::*)(struct CryptoPP::PK_SignatureScheme::InvalidKeyLength*))&CryptoPP::PK_SignatureScheme::InvalidKeyLength::ctor_InvalidKeyLength) },
        {   (LPVOID)0x140624600L,
            (LPVOID *)&CryptoPP__PK_SignatureScheme__InvalidKeyLengthdtor_InvalidKeyLength2_user,
            (LPVOID *)&CryptoPP__PK_SignatureScheme__InvalidKeyLengthdtor_InvalidKeyLength2_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_SignatureScheme__InvalidKeyLengthdtor_InvalidKeyLength2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PK_SignatureScheme::InvalidKeyLength::*)())&CryptoPP::PK_SignatureScheme::InvalidKeyLength::dtor_InvalidKeyLength) },
        
        {   (LPVOID)0x1406240a0L,
            (LPVOID *)&CryptoPP__PK_SignatureScheme__KeyTooShortctor_KeyTooShort1_user,
            (LPVOID *)&CryptoPP__PK_SignatureScheme__KeyTooShortctor_KeyTooShort1_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_SignatureScheme__KeyTooShortctor_KeyTooShort1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PK_SignatureScheme::KeyTooShort::*)(struct CryptoPP::PK_SignatureScheme::KeyTooShort*))&CryptoPP::PK_SignatureScheme::KeyTooShort::ctor_KeyTooShort) },
        {   (LPVOID)0x140624480L,
            (LPVOID *)&CryptoPP__PK_SignatureScheme__KeyTooShortctor_KeyTooShort2_user,
            (LPVOID *)&CryptoPP__PK_SignatureScheme__KeyTooShortctor_KeyTooShort2_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_SignatureScheme__KeyTooShortctor_KeyTooShort2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PK_SignatureScheme::KeyTooShort::*)())&CryptoPP::PK_SignatureScheme::KeyTooShort::ctor_KeyTooShort) },
        {   (LPVOID)0x140624620L,
            (LPVOID *)&CryptoPP__PK_SignatureScheme__KeyTooShortdtor_KeyTooShort3_user,
            (LPVOID *)&CryptoPP__PK_SignatureScheme__KeyTooShortdtor_KeyTooShort3_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_SignatureScheme__KeyTooShortdtor_KeyTooShort3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PK_SignatureScheme::KeyTooShort::*)())&CryptoPP::PK_SignatureScheme::KeyTooShort::dtor_KeyTooShort) },
        
        {   (LPVOID)0x140633460L,
            (LPVOID *)&CryptoPP__PK_Signerctor_PK_Signer1_user,
            (LPVOID *)&CryptoPP__PK_Signerctor_PK_Signer1_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_Signerctor_PK_Signer1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PK_Signer::*)(struct CryptoPP::PK_Signer*))&CryptoPP::PK_Signer::ctor_PK_Signer) },
        {   (LPVOID)0x14056aeb0L,
            (LPVOID *)&CryptoPP__PK_Signerctor_PK_Signer2_user,
            (LPVOID *)&CryptoPP__PK_Signerctor_PK_Signer2_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_Signerctor_PK_Signer2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PK_Signer::*)())&CryptoPP::PK_Signer::ctor_PK_Signer) },
        {   (LPVOID)0x1405f5f50L,
            (LPVOID *)&CryptoPP__PK_SignerSign3_user,
            (LPVOID *)&CryptoPP__PK_SignerSign3_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_SignerSign3_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::PK_Signer::*)(struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::PK_MessageAccumulator*, uint8_t*))&CryptoPP::PK_Signer::Sign) },
        {   (LPVOID)0x1405f5ff0L,
            (LPVOID *)&CryptoPP__PK_SignerSignMessage4_user,
            (LPVOID *)&CryptoPP__PK_SignerSignMessage4_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_SignerSignMessage4_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::PK_Signer::*)(struct CryptoPP::RandomNumberGenerator*, uint8_t*, uint64_t, uint8_t*))&CryptoPP::PK_Signer::SignMessage) },
        {   (LPVOID)0x1405f60e0L,
            (LPVOID *)&CryptoPP__PK_SignerSignMessageWithRecovery5_user,
            (LPVOID *)&CryptoPP__PK_SignerSignMessageWithRecovery5_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_SignerSignMessageWithRecovery5_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::PK_Signer::*)(struct CryptoPP::RandomNumberGenerator*, uint8_t*, uint64_t, uint8_t*, uint64_t, uint8_t*))&CryptoPP::PK_Signer::SignMessageWithRecovery) },
        {   (LPVOID)0x14055fff0L,
            (LPVOID *)&CryptoPP__PK_Signerdtor_PK_Signer6_user,
            (LPVOID *)&CryptoPP__PK_Signerdtor_PK_Signer6_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_Signerdtor_PK_Signer6_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PK_Signer::*)())&CryptoPP::PK_Signer::dtor_PK_Signer) },
        
        {   (LPVOID)0x14056b080L,
            (LPVOID *)&CryptoPP__PK_Verifierctor_PK_Verifier1_user,
            (LPVOID *)&CryptoPP__PK_Verifierctor_PK_Verifier1_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_Verifierctor_PK_Verifier1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PK_Verifier::*)())&CryptoPP::PK_Verifier::ctor_PK_Verifier) },
        {   (LPVOID)0x1405f6390L,
            (LPVOID *)&CryptoPP__PK_VerifierRecover2_user,
            (LPVOID *)&CryptoPP__PK_VerifierRecover2_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_VerifierRecover2_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::DecodingResult*(CryptoPP::PK_Verifier::*)(short, struct CryptoPP::DecodingResult*, uint8_t*))&CryptoPP::PK_Verifier::Recover) },
        {   (LPVOID)0x1405f6430L,
            (LPVOID *)&CryptoPP__PK_VerifierRecoverMessage3_user,
            (LPVOID *)&CryptoPP__PK_VerifierRecoverMessage3_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_VerifierRecoverMessage3_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::DecodingResult*(CryptoPP::PK_Verifier::*)(struct CryptoPP::DecodingResult*, uint8_t*, uint8_t*, uint64_t, uint8_t*, uint64_t))&CryptoPP::PK_Verifier::RecoverMessage) },
        {   (LPVOID)0x1405f6200L,
            (LPVOID *)&CryptoPP__PK_VerifierVerify4_user,
            (LPVOID *)&CryptoPP__PK_VerifierVerify4_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_VerifierVerify4_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::PK_Verifier::*)(struct CryptoPP::PK_MessageAccumulator*))&CryptoPP::PK_Verifier::Verify) },
        {   (LPVOID)0x1405f6290L,
            (LPVOID *)&CryptoPP__PK_VerifierVerifyMessage5_user,
            (LPVOID *)&CryptoPP__PK_VerifierVerifyMessage5_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_VerifierVerifyMessage5_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::PK_Verifier::*)(uint8_t*, uint64_t, uint8_t*, uint64_t))&CryptoPP::PK_Verifier::VerifyMessage) },
        {   (LPVOID)0x140560110L,
            (LPVOID *)&CryptoPP__PK_Verifierdtor_PK_Verifier6_user,
            (LPVOID *)&CryptoPP__PK_Verifierdtor_PK_Verifier6_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_Verifierdtor_PK_Verifier6_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PK_Verifier::*)())&CryptoPP::PK_Verifier::dtor_PK_Verifier) },
        
        {   (LPVOID)0x140465b20L,
            (LPVOID *)&CryptoPP__VariableKeyLengthStaticGetValidKeyLength2_user,
            (LPVOID *)&CryptoPP__VariableKeyLengthStaticGetValidKeyLength2_next,
            (LPVOID)cast_pointer_function(CryptoPP__VariableKeyLengthStaticGetValidKeyLength2_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::VariableKeyLength<16,0,2147483647,1,4,0>::*)(uint64_t))&CryptoPP::VariableKeyLength<16,0,2147483647,1,4,0>::StaticGetValidKeyLength) },
        
        {   (LPVOID)0x1404653d0L,
            (LPVOID *)&CryptoPP__SimpleKeyedTransformationGetAlgorithm2_user,
            (LPVOID *)&CryptoPP__SimpleKeyedTransformationGetAlgorithm2_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyedTransformationGetAlgorithm2_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Algorithm*(CryptoPP::SimpleKeyedTransformation<CryptoPP::HashTransformation>::*)())&CryptoPP::SimpleKeyedTransformation<CryptoPP::HashTransformation>::GetAlgorithm) },
        {   (LPVOID)0x140465ac0L,
            (LPVOID *)&CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_user,
            (LPVOID *)&CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SimpleKeyedTransformation<CryptoPP::HashTransformation>::*)())&CryptoPP::SimpleKeyedTransformation<CryptoPP::HashTransformation>::ctor_SimpleKeyedTransformation) },
        {   (LPVOID)0x1404650a0L,
            (LPVOID *)&CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation6_user,
            (LPVOID *)&CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation6_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SimpleKeyedTransformation<CryptoPP::HashTransformation>::*)())&CryptoPP::SimpleKeyedTransformation<CryptoPP::HashTransformation>::dtor_SimpleKeyedTransformation) },
        
        {   (LPVOID)0x140624dd0L,
            (LPVOID *)&CryptoPP__HMAC_BaseAccessInnerHash1_user,
            (LPVOID *)&CryptoPP__HMAC_BaseAccessInnerHash1_next,
            (LPVOID)cast_pointer_function(CryptoPP__HMAC_BaseAccessInnerHash1_wrapper),
            (LPVOID)cast_pointer_function((uint8_t*(CryptoPP::HMAC_Base::*)())&CryptoPP::HMAC_Base::AccessInnerHash) },
        {   (LPVOID)0x140624d50L,
            (LPVOID *)&CryptoPP__HMAC_BaseAccessIpad2_user,
            (LPVOID *)&CryptoPP__HMAC_BaseAccessIpad2_next,
            (LPVOID)cast_pointer_function(CryptoPP__HMAC_BaseAccessIpad2_wrapper),
            (LPVOID)cast_pointer_function((uint8_t*(CryptoPP::HMAC_Base::*)())&CryptoPP::HMAC_Base::AccessIpad) },
        {   (LPVOID)0x140624d70L,
            (LPVOID *)&CryptoPP__HMAC_BaseAccessOpad3_user,
            (LPVOID *)&CryptoPP__HMAC_BaseAccessOpad3_next,
            (LPVOID)cast_pointer_function(CryptoPP__HMAC_BaseAccessOpad3_wrapper),
            (LPVOID)cast_pointer_function((uint8_t*(CryptoPP::HMAC_Base::*)())&CryptoPP::HMAC_Base::AccessOpad) },
        {   (LPVOID)0x140465360L,
            (LPVOID *)&CryptoPP__HMAC_BaseDigestSize5_user,
            (LPVOID *)&CryptoPP__HMAC_BaseDigestSize5_next,
            (LPVOID)cast_pointer_function(CryptoPP__HMAC_BaseDigestSize5_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::HMAC_Base::*)())&CryptoPP::HMAC_Base::DigestSize) },
        {   (LPVOID)0x140465a10L,
            (LPVOID *)&CryptoPP__HMAC_Basector_HMAC_Base7_user,
            (LPVOID *)&CryptoPP__HMAC_Basector_HMAC_Base7_next,
            (LPVOID)cast_pointer_function(CryptoPP__HMAC_Basector_HMAC_Base7_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::HMAC_Base::*)())&CryptoPP::HMAC_Base::ctor_HMAC_Base) },
        {   (LPVOID)0x140624aa0L,
            (LPVOID *)&CryptoPP__HMAC_BaseKeyInnerHash8_user,
            (LPVOID *)&CryptoPP__HMAC_BaseKeyInnerHash8_next,
            (LPVOID)cast_pointer_function(CryptoPP__HMAC_BaseKeyInnerHash8_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::HMAC_Base::*)())&CryptoPP::HMAC_Base::KeyInnerHash) },
        {   (LPVOID)0x1404652f0L,
            (LPVOID *)&CryptoPP__HMAC_BaseOptimalBlockSize10_user,
            (LPVOID *)&CryptoPP__HMAC_BaseOptimalBlockSize10_next,
            (LPVOID)cast_pointer_function(CryptoPP__HMAC_BaseOptimalBlockSize10_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::HMAC_Base::*)())&CryptoPP::HMAC_Base::OptimalBlockSize) },
        {   (LPVOID)0x140624b50L,
            (LPVOID *)&CryptoPP__HMAC_BaseRestart11_user,
            (LPVOID *)&CryptoPP__HMAC_BaseRestart11_next,
            (LPVOID)cast_pointer_function(CryptoPP__HMAC_BaseRestart11_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::HMAC_Base::*)())&CryptoPP::HMAC_Base::Restart) },
        {   (LPVOID)0x140624c20L,
            (LPVOID *)&CryptoPP__HMAC_BaseTruncatedFinal12_user,
            (LPVOID *)&CryptoPP__HMAC_BaseTruncatedFinal12_next,
            (LPVOID)cast_pointer_function(CryptoPP__HMAC_BaseTruncatedFinal12_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::HMAC_Base::*)(uint8_t*, uint64_t))&CryptoPP::HMAC_Base::TruncatedFinal) },
        {   (LPVOID)0x140624660L,
            (LPVOID *)&CryptoPP__HMAC_BaseUncheckedSetKey13_user,
            (LPVOID *)&CryptoPP__HMAC_BaseUncheckedSetKey13_next,
            (LPVOID)cast_pointer_function(CryptoPP__HMAC_BaseUncheckedSetKey13_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::HMAC_Base::*)(uint8_t*, unsigned int, struct CryptoPP::NameValuePairs*))&CryptoPP::HMAC_Base::UncheckedSetKey) },
        {   (LPVOID)0x140624bb0L,
            (LPVOID *)&CryptoPP__HMAC_BaseUpdate14_user,
            (LPVOID *)&CryptoPP__HMAC_BaseUpdate14_next,
            (LPVOID)cast_pointer_function(CryptoPP__HMAC_BaseUpdate14_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::HMAC_Base::*)(uint8_t*, uint64_t))&CryptoPP::HMAC_Base::Update) },
        {   (LPVOID)0x140465010L,
            (LPVOID *)&CryptoPP__HMAC_Basedtor_HMAC_Base16_user,
            (LPVOID *)&CryptoPP__HMAC_Basedtor_HMAC_Base16_next,
            (LPVOID)cast_pointer_function(CryptoPP__HMAC_Basedtor_HMAC_Base16_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::HMAC_Base::*)())&CryptoPP::HMAC_Base::dtor_HMAC_Base) },
        
        {   (LPVOID)0x14054b140L,
            (LPVOID *)&CryptoPP__Sinkctor_Sink1_user,
            (LPVOID *)&CryptoPP__Sinkctor_Sink1_next,
            (LPVOID)cast_pointer_function(CryptoPP__Sinkctor_Sink1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Sink::*)())&CryptoPP::Sink::ctor_Sink) },
        {   (LPVOID)0x14054b1e0L,
            (LPVOID *)&CryptoPP__Sinkdtor_Sink2_user,
            (LPVOID *)&CryptoPP__Sinkdtor_Sink2_next,
            (LPVOID)cast_pointer_function(CryptoPP__Sinkdtor_Sink2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Sink::*)())&CryptoPP::Sink::dtor_Sink) },
        
        {   (LPVOID)0x140453f20L,
            (LPVOID *)&CryptoPP__InputRejectingChannelMessageSeriesEnd2_user,
            (LPVOID *)&CryptoPP__InputRejectingChannelMessageSeriesEnd2_next,
            (LPVOID)cast_pointer_function(CryptoPP__InputRejectingChannelMessageSeriesEnd2_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::*)(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, int, bool))&CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::ChannelMessageSeriesEnd) },
        {   (LPVOID)0x140453eb0L,
            (LPVOID *)&CryptoPP__InputRejectingChannelPut24_user,
            (LPVOID *)&CryptoPP__InputRejectingChannelPut24_next,
            (LPVOID)cast_pointer_function(CryptoPP__InputRejectingChannelPut24_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::*)(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, char*, uint64_t, int, bool))&CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::ChannelPut2) },
        {   (LPVOID)0x140453cc0L,
            (LPVOID *)&CryptoPP__InputRejectingctor_InputRejecting6_user,
            (LPVOID *)&CryptoPP__InputRejectingctor_InputRejecting6_next,
            (LPVOID)cast_pointer_function(CryptoPP__InputRejectingctor_InputRejecting6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::*)())&CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::ctor_InputRejecting) },
        {   (LPVOID)0x140453e30L,
            (LPVOID *)&CryptoPP__InputRejectingIsolatedFlush8_user,
            (LPVOID *)&CryptoPP__InputRejectingIsolatedFlush8_next,
            (LPVOID)cast_pointer_function(CryptoPP__InputRejectingIsolatedFlush8_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::*)(bool, bool))&CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::IsolatedFlush) },
        {   (LPVOID)0x140453e50L,
            (LPVOID *)&CryptoPP__InputRejectingIsolatedMessageSeriesEnd10_user,
            (LPVOID *)&CryptoPP__InputRejectingIsolatedMessageSeriesEnd10_next,
            (LPVOID)cast_pointer_function(CryptoPP__InputRejectingIsolatedMessageSeriesEnd10_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::*)(bool))&CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::IsolatedMessageSeriesEnd) },
        {   (LPVOID)0x140453dc0L,
            (LPVOID *)&CryptoPP__InputRejectingPut212_user,
            (LPVOID *)&CryptoPP__InputRejectingPut212_next,
            (LPVOID)cast_pointer_function(CryptoPP__InputRejectingPut212_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::*)(char*, uint64_t, int, bool))&CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::Put2) },
        {   (LPVOID)0x14044db60L,
            (LPVOID *)&CryptoPP__InputRejectingdtor_InputRejecting14_user,
            (LPVOID *)&CryptoPP__InputRejectingdtor_InputRejecting14_next,
            (LPVOID)cast_pointer_function(CryptoPP__InputRejectingdtor_InputRejecting14_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::*)())&CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::dtor_InputRejecting) },
        
        {   (LPVOID)0x1404545a0L,
            (LPVOID *)&CryptoPP__InputRejecting__InputRejectedctor_InputRejected2_user,
            (LPVOID *)&CryptoPP__InputRejecting__InputRejectedctor_InputRejected2_next,
            (LPVOID)cast_pointer_function(CryptoPP__InputRejecting__InputRejectedctor_InputRejected2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::*)(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected*))&CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::ctor_InputRejected) },
        {   (LPVOID)0x14045ab20L,
            (LPVOID *)&CryptoPP__InputRejecting__InputRejectedctor_InputRejected4_user,
            (LPVOID *)&CryptoPP__InputRejecting__InputRejectedctor_InputRejected4_next,
            (LPVOID)cast_pointer_function(CryptoPP__InputRejecting__InputRejectedctor_InputRejected4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::*)())&CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::ctor_InputRejected) },
        {   (LPVOID)0x140454560L,
            (LPVOID *)&CryptoPP__InputRejecting__InputRejecteddtor_InputRejected9_user,
            (LPVOID *)&CryptoPP__InputRejecting__InputRejecteddtor_InputRejected9_next,
            (LPVOID)cast_pointer_function(CryptoPP__InputRejecting__InputRejecteddtor_InputRejected9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::*)())&CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::dtor_InputRejected) },
        
        {   (LPVOID)0x1405fe100L,
            (LPVOID *)&CryptoPP__StoreGetNextMessage1_user,
            (LPVOID *)&CryptoPP__StoreGetNextMessage1_next,
            (LPVOID)cast_pointer_function(CryptoPP__StoreGetNextMessage1_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::Store::*)())&CryptoPP::Store::GetNextMessage) },
        {   (LPVOID)0x140453ad0L,
            (LPVOID *)&CryptoPP__StoreIsolatedInitialize3_user,
            (LPVOID *)&CryptoPP__StoreIsolatedInitialize3_next,
            (LPVOID)cast_pointer_function(CryptoPP__StoreIsolatedInitialize3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Store::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::Store::IsolatedInitialize) },
        {   (LPVOID)0x140453b40L,
            (LPVOID *)&CryptoPP__StoreNumberOfMessages5_user,
            (LPVOID *)&CryptoPP__StoreNumberOfMessages5_next,
            (LPVOID)cast_pointer_function(CryptoPP__StoreNumberOfMessages5_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::Store::*)())&CryptoPP::Store::NumberOfMessages) },
        {   (LPVOID)0x140453a70L,
            (LPVOID *)&CryptoPP__Storector_Store7_user,
            (LPVOID *)&CryptoPP__Storector_Store7_next,
            (LPVOID)cast_pointer_function(CryptoPP__Storector_Store7_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Store::*)())&CryptoPP::Store::ctor_Store) },
        {   (LPVOID)0x14044dae0L,
            (LPVOID *)&CryptoPP__Storedtor_Store9_user,
            (LPVOID *)&CryptoPP__Storedtor_Store9_next,
            (LPVOID)cast_pointer_function(CryptoPP__Storedtor_Store9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Store::*)())&CryptoPP::Store::dtor_Store) },
        
        {   (LPVOID)0x14054b0b0L,
            (LPVOID *)&CryptoPP__ArraySinkctor_ArraySink1_user,
            (LPVOID *)&CryptoPP__ArraySinkctor_ArraySink1_next,
            (LPVOID)cast_pointer_function(CryptoPP__ArraySinkctor_ArraySink1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ArraySink::*)(uint8_t*, uint64_t))&CryptoPP::ArraySink::ctor_ArraySink) },
        {   (LPVOID)0x140623f90L,
            (LPVOID *)&CryptoPP__ArraySinkAvailableSize2_user,
            (LPVOID *)&CryptoPP__ArraySinkAvailableSize2_next,
            (LPVOID)cast_pointer_function(CryptoPP__ArraySinkAvailableSize2_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::ArraySink::*)())&CryptoPP::ArraySink::AvailableSize) },
        {   (LPVOID)0x1405fb730L,
            (LPVOID *)&CryptoPP__ArraySinkCreatePutSpace3_user,
            (LPVOID *)&CryptoPP__ArraySinkCreatePutSpace3_next,
            (LPVOID)cast_pointer_function(CryptoPP__ArraySinkCreatePutSpace3_wrapper),
            (LPVOID)cast_pointer_function((uint8_t*(CryptoPP::ArraySink::*)(uint64_t*))&CryptoPP::ArraySink::CreatePutSpace) },
        {   (LPVOID)0x1405fb780L,
            (LPVOID *)&CryptoPP__ArraySinkIsolatedInitialize4_user,
            (LPVOID *)&CryptoPP__ArraySinkIsolatedInitialize4_next,
            (LPVOID)cast_pointer_function(CryptoPP__ArraySinkIsolatedInitialize4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ArraySink::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::ArraySink::IsolatedInitialize) },
        {   (LPVOID)0x1405fb680L,
            (LPVOID *)&CryptoPP__ArraySinkPut25_user,
            (LPVOID *)&CryptoPP__ArraySinkPut25_next,
            (LPVOID)cast_pointer_function(CryptoPP__ArraySinkPut25_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::ArraySink::*)(uint8_t*, uint64_t, int, bool))&CryptoPP::ArraySink::Put2) },
        {   (LPVOID)0x140611850L,
            (LPVOID *)&CryptoPP__ArraySinkTotalPutLength6_user,
            (LPVOID *)&CryptoPP__ArraySinkTotalPutLength6_next,
            (LPVOID)cast_pointer_function(CryptoPP__ArraySinkTotalPutLength6_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::ArraySink::*)())&CryptoPP::ArraySink::TotalPutLength) },
        {   (LPVOID)0x14054b1a0L,
            (LPVOID *)&CryptoPP__ArraySinkdtor_ArraySink7_user,
            (LPVOID *)&CryptoPP__ArraySinkdtor_ArraySink7_next,
            (LPVOID)cast_pointer_function(CryptoPP__ArraySinkdtor_ArraySink7_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ArraySink::*)())&CryptoPP::ArraySink::dtor_ArraySink) },
        
        {   (LPVOID)0x1405fe1f0L,
            (LPVOID *)&CryptoPP__StringStoreStoreInitialize1_user,
            (LPVOID *)&CryptoPP__StringStoreStoreInitialize1_next,
            (LPVOID)cast_pointer_function(CryptoPP__StringStoreStoreInitialize1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::StringStore::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::StringStore::StoreInitialize) },
        {   (LPVOID)0x14057e040L,
            (LPVOID *)&CryptoPP__StringStorector_StringStore2_user,
            (LPVOID *)&CryptoPP__StringStorector_StringStore2_next,
            (LPVOID)cast_pointer_function(CryptoPP__StringStorector_StringStore2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::StringStore::*)(char*))&CryptoPP::StringStore::ctor_StringStore) },
        {   (LPVOID)0x1405ef050L,
            (LPVOID *)&CryptoPP__StringStorector_StringStore3_user,
            (LPVOID *)&CryptoPP__StringStorector_StringStore3_next,
            (LPVOID)cast_pointer_function(CryptoPP__StringStorector_StringStore3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::StringStore::*)(uint8_t*, uint64_t))&CryptoPP::StringStore::ctor_StringStore) },
        {   (LPVOID)0x140579970L,
            (LPVOID *)&CryptoPP__StringStoredtor_StringStore4_user,
            (LPVOID *)&CryptoPP__StringStoredtor_StringStore4_next,
            (LPVOID)cast_pointer_function(CryptoPP__StringStoredtor_StringStore4_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::StringStore::*)())&CryptoPP::StringStore::dtor_StringStore) },
        
        {   (LPVOID)0x14062c3f0L,
            (LPVOID *)&CryptoPP__GF2NTClone1_user,
            (LPVOID *)&CryptoPP__GF2NTClone1_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NTClone1_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::GF2NP*(CryptoPP::GF2NT::*)())&CryptoPP::GF2NT::Clone) },
        {   (LPVOID)0x14062b580L,
            (LPVOID *)&CryptoPP__GF2NTDEREncode2_user,
            (LPVOID *)&CryptoPP__GF2NTDEREncode2_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NTDEREncode2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::GF2NT::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::GF2NT::DEREncode) },
        {   (LPVOID)0x14062c4f0L,
            (LPVOID *)&CryptoPP__GF2NTctor_GF2NT3_user,
            (LPVOID *)&CryptoPP__GF2NTctor_GF2NT3_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NTctor_GF2NT3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::GF2NT::*)(struct CryptoPP::GF2NT*))&CryptoPP::GF2NT::ctor_GF2NT) },
        {   (LPVOID)0x140629860L,
            (LPVOID *)&CryptoPP__GF2NTctor_GF2NT4_user,
            (LPVOID *)&CryptoPP__GF2NTctor_GF2NT4_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NTctor_GF2NT4_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::GF2NT::*)(unsigned int, unsigned int, unsigned int))&CryptoPP::GF2NT::ctor_GF2NT) },
        {   (LPVOID)0x1406299a0L,
            (LPVOID *)&CryptoPP__GF2NTMultiplicativeInverse5_user,
            (LPVOID *)&CryptoPP__GF2NTMultiplicativeInverse5_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NTMultiplicativeInverse5_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::PolynomialMod2*(CryptoPP::GF2NT::*)(struct CryptoPP::PolynomialMod2*))&CryptoPP::GF2NT::MultiplicativeInverse) },
        {   (LPVOID)0x14062a7d0L,
            (LPVOID *)&CryptoPP__GF2NTMultiply6_user,
            (LPVOID *)&CryptoPP__GF2NTMultiply6_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NTMultiply6_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::PolynomialMod2*(CryptoPP::GF2NT::*)(struct CryptoPP::PolynomialMod2*, struct CryptoPP::PolynomialMod2*))&CryptoPP::GF2NT::Multiply) },
        {   (LPVOID)0x14062aaf0L,
            (LPVOID *)&CryptoPP__GF2NTReduced7_user,
            (LPVOID *)&CryptoPP__GF2NTReduced7_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NTReduced7_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::PolynomialMod2*(CryptoPP::GF2NT::*)(struct CryptoPP::PolynomialMod2*))&CryptoPP::GF2NT::Reduced) },
        {   (LPVOID)0x14062c470L,
            (LPVOID *)&CryptoPP__GF2NTSquare8_user,
            (LPVOID *)&CryptoPP__GF2NTSquare8_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NTSquare8_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::PolynomialMod2*(CryptoPP::GF2NT::*)(struct CryptoPP::PolynomialMod2*))&CryptoPP::GF2NT::Square) },
        {   (LPVOID)0x140581620L,
            (LPVOID *)&CryptoPP__GF2NTdtor_GF2NT9_user,
            (LPVOID *)&CryptoPP__GF2NTdtor_GF2NT9_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NTdtor_GF2NT9_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::GF2NT::*)())&CryptoPP::GF2NT::dtor_GF2NT) },
        
        {   (LPVOID)0x14055e120L,
            (LPVOID *)&CryptoPP__MaskGeneratingFunctionctor_MaskGeneratingFunction1_user,
            (LPVOID *)&CryptoPP__MaskGeneratingFunctionctor_MaskGeneratingFunction1_next,
            (LPVOID)cast_pointer_function(CryptoPP__MaskGeneratingFunctionctor_MaskGeneratingFunction1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::MaskGeneratingFunction::*)())&CryptoPP::MaskGeneratingFunction::ctor_MaskGeneratingFunction) },
        {   (LPVOID)0x14055e610L,
            (LPVOID *)&CryptoPP__MaskGeneratingFunctiondtor_MaskGeneratingFunction2_user,
            (LPVOID *)&CryptoPP__MaskGeneratingFunctiondtor_MaskGeneratingFunction2_next,
            (LPVOID)cast_pointer_function(CryptoPP__MaskGeneratingFunctiondtor_MaskGeneratingFunction2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::MaskGeneratingFunction::*)())&CryptoPP::MaskGeneratingFunction::dtor_MaskGeneratingFunction) },
        
        {   (LPVOID)0x14055d350L,
            (LPVOID *)&CryptoPP__P1363_MGF1GenerateAndMask1_user,
            (LPVOID *)&CryptoPP__P1363_MGF1GenerateAndMask1_next,
            (LPVOID)cast_pointer_function(CryptoPP__P1363_MGF1GenerateAndMask1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::P1363_MGF1::*)(struct CryptoPP::HashTransformation*, uint8_t*, char, uint8_t*, uint64_t, bool))&CryptoPP::P1363_MGF1::GenerateAndMask) },
        {   (LPVOID)0x14055d320L,
            (LPVOID *)&CryptoPP__P1363_MGF1ctor_P1363_MGF12_user,
            (LPVOID *)&CryptoPP__P1363_MGF1ctor_P1363_MGF12_next,
            (LPVOID)cast_pointer_function(CryptoPP__P1363_MGF1ctor_P1363_MGF12_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::P1363_MGF1::*)())&CryptoPP::P1363_MGF1::ctor_P1363_MGF1) },
        {   (LPVOID)0x14055bde0L,
            (LPVOID *)&CryptoPP__P1363_MGF1StaticAlgorithmName3_user,
            (LPVOID *)&CryptoPP__P1363_MGF1StaticAlgorithmName3_next,
            (LPVOID)cast_pointer_function(CryptoPP__P1363_MGF1StaticAlgorithmName3_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::P1363_MGF1::*)())&CryptoPP::P1363_MGF1::StaticAlgorithmName) },
        {   (LPVOID)0x14055e5f0L,
            (LPVOID *)&CryptoPP__P1363_MGF1dtor_P1363_MGF14_user,
            (LPVOID *)&CryptoPP__P1363_MGF1dtor_P1363_MGF14_next,
            (LPVOID)cast_pointer_function(CryptoPP__P1363_MGF1dtor_P1363_MGF14_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::P1363_MGF1::*)())&CryptoPP::P1363_MGF1::dtor_P1363_MGF1) },
        
        {   (LPVOID)0x14055d760L,
            (LPVOID *)&CryptoPP__CryptoMaterialctor_CryptoMaterial1_user,
            (LPVOID *)&CryptoPP__CryptoMaterialctor_CryptoMaterial1_next,
            (LPVOID)cast_pointer_function(CryptoPP__CryptoMaterialctor_CryptoMaterial1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::CryptoMaterial::*)(struct CryptoPP::CryptoMaterial*))&CryptoPP::CryptoMaterial::ctor_CryptoMaterial) },
        {   (LPVOID)0x14044b030L,
            (LPVOID *)&CryptoPP__CryptoMaterialctor_CryptoMaterial3_user,
            (LPVOID *)&CryptoPP__CryptoMaterialctor_CryptoMaterial3_next,
            (LPVOID)cast_pointer_function(CryptoPP__CryptoMaterialctor_CryptoMaterial3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CryptoMaterial::*)())&CryptoPP::CryptoMaterial::ctor_CryptoMaterial) },
        {   (LPVOID)0x140562a90L,
            (LPVOID *)&CryptoPP__CryptoMaterialDoQuickSanityCheck4_user,
            (LPVOID *)&CryptoPP__CryptoMaterialDoQuickSanityCheck4_next,
            (LPVOID)cast_pointer_function(CryptoPP__CryptoMaterialDoQuickSanityCheck4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CryptoMaterial::*)())&CryptoPP::CryptoMaterial::DoQuickSanityCheck) },
        {   (LPVOID)0x14044f5e0L,
            (LPVOID *)&CryptoPP__CryptoMaterialLoad6_user,
            (LPVOID *)&CryptoPP__CryptoMaterialLoad6_next,
            (LPVOID)cast_pointer_function(CryptoPP__CryptoMaterialLoad6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CryptoMaterial::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::CryptoMaterial::Load) },
        {   (LPVOID)0x14044b8e0L,
            (LPVOID *)&CryptoPP__CryptoMaterialLoadPrecomputation8_user,
            (LPVOID *)&CryptoPP__CryptoMaterialLoadPrecomputation8_next,
            (LPVOID)cast_pointer_function(CryptoPP__CryptoMaterialLoadPrecomputation8_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CryptoMaterial::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::CryptoMaterial::LoadPrecomputation) },
        {   (LPVOID)0x14044b600L,
            (LPVOID *)&CryptoPP__CryptoMaterialPrecompute10_user,
            (LPVOID *)&CryptoPP__CryptoMaterialPrecompute10_next,
            (LPVOID)cast_pointer_function(CryptoPP__CryptoMaterialPrecompute10_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CryptoMaterial::*)(unsigned int))&CryptoPP::CryptoMaterial::Precompute) },
        {   (LPVOID)0x14044f4d0L,
            (LPVOID *)&CryptoPP__CryptoMaterialSave12_user,
            (LPVOID *)&CryptoPP__CryptoMaterialSave12_next,
            (LPVOID)cast_pointer_function(CryptoPP__CryptoMaterialSave12_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CryptoMaterial::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::CryptoMaterial::Save) },
        {   (LPVOID)0x14044ba30L,
            (LPVOID *)&CryptoPP__CryptoMaterialSavePrecomputation14_user,
            (LPVOID *)&CryptoPP__CryptoMaterialSavePrecomputation14_next,
            (LPVOID)cast_pointer_function(CryptoPP__CryptoMaterialSavePrecomputation14_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CryptoMaterial::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::CryptoMaterial::SavePrecomputation) },
        {   (LPVOID)0x14044b5f0L,
            (LPVOID *)&CryptoPP__CryptoMaterialSupportsPrecomputation16_user,
            (LPVOID *)&CryptoPP__CryptoMaterialSupportsPrecomputation16_next,
            (LPVOID)cast_pointer_function(CryptoPP__CryptoMaterialSupportsPrecomputation16_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::CryptoMaterial::*)())&CryptoPP::CryptoMaterial::SupportsPrecomputation) },
        {   (LPVOID)0x14044a720L,
            (LPVOID *)&CryptoPP__CryptoMaterialThrowIfInvalid18_user,
            (LPVOID *)&CryptoPP__CryptoMaterialThrowIfInvalid18_next,
            (LPVOID)cast_pointer_function(CryptoPP__CryptoMaterialThrowIfInvalid18_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CryptoMaterial::*)(struct CryptoPP::RandomNumberGenerator*, unsigned int))&CryptoPP::CryptoMaterial::ThrowIfInvalid) },
        {   (LPVOID)0x140448b40L,
            (LPVOID *)&CryptoPP__CryptoMaterialdtor_CryptoMaterial22_user,
            (LPVOID *)&CryptoPP__CryptoMaterialdtor_CryptoMaterial22_next,
            (LPVOID)cast_pointer_function(CryptoPP__CryptoMaterialdtor_CryptoMaterial22_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CryptoMaterial::*)())&CryptoPP::CryptoMaterial::dtor_CryptoMaterial) },
        
        {   (LPVOID)0x14044ada0L,
            (LPVOID *)&CryptoPP__CryptoMaterial__InvalidMaterialctor_InvalidMaterial2_user,
            (LPVOID *)&CryptoPP__CryptoMaterial__InvalidMaterialctor_InvalidMaterial2_next,
            (LPVOID)cast_pointer_function(CryptoPP__CryptoMaterial__InvalidMaterialctor_InvalidMaterial2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CryptoMaterial::InvalidMaterial::*)(struct CryptoPP::CryptoMaterial::InvalidMaterial*))&CryptoPP::CryptoMaterial::InvalidMaterial::ctor_InvalidMaterial) },
        {   (LPVOID)0x14044aa90L,
            (LPVOID *)&CryptoPP__CryptoMaterial__InvalidMaterialctor_InvalidMaterial4_user,
            (LPVOID *)&CryptoPP__CryptoMaterial__InvalidMaterialctor_InvalidMaterial4_next,
            (LPVOID)cast_pointer_function(CryptoPP__CryptoMaterial__InvalidMaterialctor_InvalidMaterial4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CryptoMaterial::InvalidMaterial::*)(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*))&CryptoPP::CryptoMaterial::InvalidMaterial::ctor_InvalidMaterial) },
        {   (LPVOID)0x14044ad60L,
            (LPVOID *)&CryptoPP__CryptoMaterial__InvalidMaterialdtor_InvalidMaterial9_user,
            (LPVOID *)&CryptoPP__CryptoMaterial__InvalidMaterialdtor_InvalidMaterial9_next,
            (LPVOID)cast_pointer_function(CryptoPP__CryptoMaterial__InvalidMaterialdtor_InvalidMaterial9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CryptoMaterial::InvalidMaterial::*)())&CryptoPP::CryptoMaterial::InvalidMaterial::dtor_InvalidMaterial) },
        
        {   (LPVOID)0x14060a720L,
            (LPVOID *)&CryptoPP__SHA384InitState1_user,
            (LPVOID *)&CryptoPP__SHA384InitState1_next,
            (LPVOID)cast_pointer_function(CryptoPP__SHA384InitState1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SHA384::*)(uint64_t*))&CryptoPP::SHA384::InitState) },
        
        {   (LPVOID)0x140465f50L,
            (LPVOID *)&CryptoPP__DL_KeyAgreementAlgorithmctor_DL_KeyAgreementAlgorithm2_user,
            (LPVOID *)&CryptoPP__DL_KeyAgreementAlgorithmctor_DL_KeyAgreementAlgorithm2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_KeyAgreementAlgorithmctor_DL_KeyAgreementAlgorithm2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_KeyAgreementAlgorithm<CryptoPP::ECPPoint>::*)())&CryptoPP::DL_KeyAgreementAlgorithm<CryptoPP::ECPPoint>::ctor_DL_KeyAgreementAlgorithm) },
        
        {   (LPVOID)0x1405fed00L,
            (LPVOID *)&CryptoPP__OutputProxyCreatePutSpace1_user,
            (LPVOID *)&CryptoPP__OutputProxyCreatePutSpace1_next,
            (LPVOID)cast_pointer_function(CryptoPP__OutputProxyCreatePutSpace1_wrapper),
            (LPVOID)cast_pointer_function((uint8_t*(CryptoPP::OutputProxy::*)(uint64_t*))&CryptoPP::OutputProxy::CreatePutSpace) },
        {   (LPVOID)0x1405feed0L,
            (LPVOID *)&CryptoPP__OutputProxyFlush2_user,
            (LPVOID *)&CryptoPP__OutputProxyFlush2_next,
            (LPVOID)cast_pointer_function(CryptoPP__OutputProxyFlush2_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::OutputProxy::*)(bool, int, bool))&CryptoPP::OutputProxy::Flush) },
        {   (LPVOID)0x1405fee70L,
            (LPVOID *)&CryptoPP__OutputProxyInitialize3_user,
            (LPVOID *)&CryptoPP__OutputProxyInitialize3_next,
            (LPVOID)cast_pointer_function(CryptoPP__OutputProxyInitialize3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::OutputProxy::*)(struct CryptoPP::NameValuePairs*, int))&CryptoPP::OutputProxy::Initialize) },
        {   (LPVOID)0x1405fef50L,
            (LPVOID *)&CryptoPP__OutputProxyMessageSeriesEnd4_user,
            (LPVOID *)&CryptoPP__OutputProxyMessageSeriesEnd4_next,
            (LPVOID)cast_pointer_function(CryptoPP__OutputProxyMessageSeriesEnd4_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::OutputProxy::*)(int, bool))&CryptoPP::OutputProxy::MessageSeriesEnd) },
        {   (LPVOID)0x1405fec50L,
            (LPVOID *)&CryptoPP__OutputProxyctor_OutputProxy5_user,
            (LPVOID *)&CryptoPP__OutputProxyctor_OutputProxy5_next,
            (LPVOID)cast_pointer_function(CryptoPP__OutputProxyctor_OutputProxy5_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::OutputProxy::*)(struct CryptoPP::BufferedTransformation*, bool))&CryptoPP::OutputProxy::ctor_OutputProxy) },
        {   (LPVOID)0x1405fed50L,
            (LPVOID *)&CryptoPP__OutputProxyPut26_user,
            (LPVOID *)&CryptoPP__OutputProxyPut26_next,
            (LPVOID)cast_pointer_function(CryptoPP__OutputProxyPut26_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::OutputProxy::*)(uint8_t*, uint64_t, int, bool))&CryptoPP::OutputProxy::Put2) },
        {   (LPVOID)0x1405fede0L,
            (LPVOID *)&CryptoPP__OutputProxyPutModifiable27_user,
            (LPVOID *)&CryptoPP__OutputProxyPutModifiable27_next,
            (LPVOID)cast_pointer_function(CryptoPP__OutputProxyPutModifiable27_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::OutputProxy::*)(uint8_t*, uint64_t, int, bool))&CryptoPP::OutputProxy::PutModifiable2) },
        {   (LPVOID)0x1405ff230L,
            (LPVOID *)&CryptoPP__OutputProxydtor_OutputProxy8_user,
            (LPVOID *)&CryptoPP__OutputProxydtor_OutputProxy8_next,
            (LPVOID)cast_pointer_function(CryptoPP__OutputProxydtor_OutputProxy8_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::OutputProxy::*)())&CryptoPP::OutputProxy::dtor_OutputProxy) },
        
        {   (LPVOID)0x14044ae10L,
            (LPVOID *)&CryptoPP__InvalidDataFormatctor_InvalidDataFormat2_user,
            (LPVOID *)&CryptoPP__InvalidDataFormatctor_InvalidDataFormat2_next,
            (LPVOID)cast_pointer_function(CryptoPP__InvalidDataFormatctor_InvalidDataFormat2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::InvalidDataFormat::*)(struct CryptoPP::InvalidDataFormat*))&CryptoPP::InvalidDataFormat::ctor_InvalidDataFormat) },
        {   (LPVOID)0x14044ab00L,
            (LPVOID *)&CryptoPP__InvalidDataFormatctor_InvalidDataFormat4_user,
            (LPVOID *)&CryptoPP__InvalidDataFormatctor_InvalidDataFormat4_next,
            (LPVOID)cast_pointer_function(CryptoPP__InvalidDataFormatctor_InvalidDataFormat4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::InvalidDataFormat::*)(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*))&CryptoPP::InvalidDataFormat::ctor_InvalidDataFormat) },
        {   (LPVOID)0x14044acb0L,
            (LPVOID *)&CryptoPP__InvalidDataFormatdtor_InvalidDataFormat9_user,
            (LPVOID *)&CryptoPP__InvalidDataFormatdtor_InvalidDataFormat9_next,
            (LPVOID)cast_pointer_function(CryptoPP__InvalidDataFormatdtor_InvalidDataFormat9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::InvalidDataFormat::*)())&CryptoPP::InvalidDataFormat::dtor_InvalidDataFormat) },
        
        {   (LPVOID)0x140454bd0L,
            (LPVOID *)&CryptoPP__DL_BadElementctor_DL_BadElement2_user,
            (LPVOID *)&CryptoPP__DL_BadElementctor_DL_BadElement2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_BadElementctor_DL_BadElement2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_BadElement::*)(struct CryptoPP::DL_BadElement*))&CryptoPP::DL_BadElement::ctor_DL_BadElement) },
        {   (LPVOID)0x14044feb0L,
            (LPVOID *)&CryptoPP__DL_BadElementctor_DL_BadElement4_user,
            (LPVOID *)&CryptoPP__DL_BadElementctor_DL_BadElement4_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_BadElementctor_DL_BadElement4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_BadElement::*)())&CryptoPP::DL_BadElement::ctor_DL_BadElement) },
        {   (LPVOID)0x140450040L,
            (LPVOID *)&CryptoPP__DL_BadElementdtor_DL_BadElement9_user,
            (LPVOID *)&CryptoPP__DL_BadElementdtor_DL_BadElement9_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_BadElementdtor_DL_BadElement9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_BadElement::*)())&CryptoPP::DL_BadElement::dtor_DL_BadElement) },
        
        {   (LPVOID)0x14061bc60L,
            (LPVOID *)&CryptoPP__AdditiveCipherAbstractPolicyctor_AdditiveCipherAbstractPolicy1_user,
            (LPVOID *)&CryptoPP__AdditiveCipherAbstractPolicyctor_AdditiveCipherAbstractPolicy1_next,
            (LPVOID)cast_pointer_function(CryptoPP__AdditiveCipherAbstractPolicyctor_AdditiveCipherAbstractPolicy1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::AdditiveCipherAbstractPolicy::*)())&CryptoPP::AdditiveCipherAbstractPolicy::ctor_AdditiveCipherAbstractPolicy) },
        {   (LPVOID)0x14061ad50L,
            (LPVOID *)&CryptoPP__AdditiveCipherAbstractPolicyCanOperateKeystream2_user,
            (LPVOID *)&CryptoPP__AdditiveCipherAbstractPolicyCanOperateKeystream2_next,
            (LPVOID)cast_pointer_function(CryptoPP__AdditiveCipherAbstractPolicyCanOperateKeystream2_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::AdditiveCipherAbstractPolicy::*)())&CryptoPP::AdditiveCipherAbstractPolicy::CanOperateKeystream) },
        {   (LPVOID)0x14061ad30L,
            (LPVOID *)&CryptoPP__AdditiveCipherAbstractPolicyGetOptimalBlockSize3_user,
            (LPVOID *)&CryptoPP__AdditiveCipherAbstractPolicyGetOptimalBlockSize3_next,
            (LPVOID)cast_pointer_function(CryptoPP__AdditiveCipherAbstractPolicyGetOptimalBlockSize3_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::AdditiveCipherAbstractPolicy::*)())&CryptoPP::AdditiveCipherAbstractPolicy::GetOptimalBlockSize) },
        {   (LPVOID)0x14061ad60L,
            (LPVOID *)&CryptoPP__AdditiveCipherAbstractPolicyOperateKeystream4_user,
            (LPVOID *)&CryptoPP__AdditiveCipherAbstractPolicyOperateKeystream4_next,
            (LPVOID)cast_pointer_function(CryptoPP__AdditiveCipherAbstractPolicyOperateKeystream4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AdditiveCipherAbstractPolicy::*)(struct CryptoPP::KeystreamOperation, uint8_t*, uint8_t*, uint64_t))&CryptoPP::AdditiveCipherAbstractPolicy::OperateKeystream) },
        {   (LPVOID)0x14061ada0L,
            (LPVOID *)&CryptoPP__AdditiveCipherAbstractPolicySeekToIteration5_user,
            (LPVOID *)&CryptoPP__AdditiveCipherAbstractPolicySeekToIteration5_next,
            (LPVOID)cast_pointer_function(CryptoPP__AdditiveCipherAbstractPolicySeekToIteration5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AdditiveCipherAbstractPolicy::*)(uint64_t))&CryptoPP::AdditiveCipherAbstractPolicy::SeekToIteration) },
        {   (LPVOID)0x14061a1d0L,
            (LPVOID *)&CryptoPP__AdditiveCipherAbstractPolicydtor_AdditiveCipherAbstractPolicy6_user,
            (LPVOID *)&CryptoPP__AdditiveCipherAbstractPolicydtor_AdditiveCipherAbstractPolicy6_next,
            (LPVOID)cast_pointer_function(CryptoPP__AdditiveCipherAbstractPolicydtor_AdditiveCipherAbstractPolicy6_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::AdditiveCipherAbstractPolicy::*)())&CryptoPP::AdditiveCipherAbstractPolicy::dtor_AdditiveCipherAbstractPolicy) },
        
        {   (LPVOID)0x1405f9440L,
            (LPVOID *)&CryptoPP__MeterFilterAddRangeToSkip1_user,
            (LPVOID *)&CryptoPP__MeterFilterAddRangeToSkip1_next,
            (LPVOID)cast_pointer_function(CryptoPP__MeterFilterAddRangeToSkip1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::MeterFilter::*)(unsigned int, uint64_t, uint64_t, bool))&CryptoPP::MeterFilter::AddRangeToSkip) },
        {   (LPVOID)0x1405f9d80L,
            (LPVOID *)&CryptoPP__MeterFilterIsolatedMessageSeriesEnd2_user,
            (LPVOID *)&CryptoPP__MeterFilterIsolatedMessageSeriesEnd2_next,
            (LPVOID)cast_pointer_function(CryptoPP__MeterFilterIsolatedMessageSeriesEnd2_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::MeterFilter::*)(bool))&CryptoPP::MeterFilter::IsolatedMessageSeriesEnd) },
        {   (LPVOID)0x1405f9ce0L,
            (LPVOID *)&CryptoPP__MeterFilterPut23_user,
            (LPVOID *)&CryptoPP__MeterFilterPut23_next,
            (LPVOID)cast_pointer_function(CryptoPP__MeterFilterPut23_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::MeterFilter::*)(uint8_t*, uint64_t, int, bool))&CryptoPP::MeterFilter::Put2) },
        {   (LPVOID)0x1405f9560L,
            (LPVOID *)&CryptoPP__MeterFilterPutMaybeModifiable4_user,
            (LPVOID *)&CryptoPP__MeterFilterPutMaybeModifiable4_next,
            (LPVOID)cast_pointer_function(CryptoPP__MeterFilterPutMaybeModifiable4_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::MeterFilter::*)(uint8_t*, char, int, bool, bool))&CryptoPP::MeterFilter::PutMaybeModifiable) },
        {   (LPVOID)0x1405f9d30L,
            (LPVOID *)&CryptoPP__MeterFilterPutModifiable25_user,
            (LPVOID *)&CryptoPP__MeterFilterPutModifiable25_next,
            (LPVOID)cast_pointer_function(CryptoPP__MeterFilterPutModifiable25_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::MeterFilter::*)(uint8_t*, uint64_t, int, bool))&CryptoPP::MeterFilter::PutModifiable2) },
        {   (LPVOID)0x1405f93d0L,
            (LPVOID *)&CryptoPP__MeterFilterResetMeter6_user,
            (LPVOID *)&CryptoPP__MeterFilterResetMeter6_next,
            (LPVOID)cast_pointer_function(CryptoPP__MeterFilterResetMeter6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::MeterFilter::*)())&CryptoPP::MeterFilter::ResetMeter) },
        
        {   (LPVOID)0x1405fb5f0L,
            (LPVOID *)&CryptoPP__RandomNumberSinkIsolatedInitialize1_user,
            (LPVOID *)&CryptoPP__RandomNumberSinkIsolatedInitialize1_next,
            (LPVOID)cast_pointer_function(CryptoPP__RandomNumberSinkIsolatedInitialize1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::RandomNumberSink::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::RandomNumberSink::IsolatedInitialize) },
        {   (LPVOID)0x1405fb630L,
            (LPVOID *)&CryptoPP__RandomNumberSinkPut22_user,
            (LPVOID *)&CryptoPP__RandomNumberSinkPut22_next,
            (LPVOID)cast_pointer_function(CryptoPP__RandomNumberSinkPut22_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::RandomNumberSink::*)(uint8_t*, uint64_t, int, bool))&CryptoPP::RandomNumberSink::Put2) },
        
        {   (LPVOID)0x1405fa240L,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputctor_FilterWithBufferedInput1_user,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputctor_FilterWithBufferedInput1_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterWithBufferedInputctor_FilterWithBufferedInput1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::FilterWithBufferedInput::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::FilterWithBufferedInput::ctor_FilterWithBufferedInput) },
        {   (LPVOID)0x1405fa2d0L,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputctor_FilterWithBufferedInput2_user,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputctor_FilterWithBufferedInput2_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterWithBufferedInputctor_FilterWithBufferedInput2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::FilterWithBufferedInput::*)(uint64_t, uint64_t, uint64_t, struct CryptoPP::BufferedTransformation*))&CryptoPP::FilterWithBufferedInput::ctor_FilterWithBufferedInput) },
        {   (LPVOID)0x1405fea30L,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputFlushDerived3_user,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputFlushDerived3_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterWithBufferedInputFlushDerived3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::FilterWithBufferedInput::*)())&CryptoPP::FilterWithBufferedInput::FlushDerived) },
        {   (LPVOID)0x1405faf70L,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputForceNextPut4_user,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputForceNextPut4_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterWithBufferedInputForceNextPut4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::FilterWithBufferedInput::*)())&CryptoPP::FilterWithBufferedInput::ForceNextPut) },
        {   (LPVOID)0x1405fe9a0L,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputInitializeDerived5_user,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputInitializeDerived5_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterWithBufferedInputInitializeDerived5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::FilterWithBufferedInput::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::FilterWithBufferedInput::InitializeDerived) },
        {   (LPVOID)0x1405fe960L,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputInitializeDerivedAndReturnNewSizes6_user,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputInitializeDerivedAndReturnNewSizes6_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterWithBufferedInputInitializeDerivedAndReturnNewSizes6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::FilterWithBufferedInput::*)(struct CryptoPP::NameValuePairs*, uint64_t*, uint64_t*, uint64_t*))&CryptoPP::FilterWithBufferedInput::InitializeDerivedAndReturnNewSizes) },
        {   (LPVOID)0x1405fa640L,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputIsolatedFlush7_user,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputIsolatedFlush7_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterWithBufferedInputIsolatedFlush7_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::FilterWithBufferedInput::*)(bool, bool))&CryptoPP::FilterWithBufferedInput::IsolatedFlush) },
        {   (LPVOID)0x1405fa4c0L,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputIsolatedInitialize8_user,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputIsolatedInitialize8_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterWithBufferedInputIsolatedInitialize8_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::FilterWithBufferedInput::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::FilterWithBufferedInput::IsolatedInitialize) },
        {   (LPVOID)0x1405fea40L,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputNextPut9_user,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputNextPut9_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterWithBufferedInputNextPut9_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::FilterWithBufferedInput::*)(uint8_t*, uint64_t))&CryptoPP::FilterWithBufferedInput::NextPut) },
        {   (LPVOID)0x1405feba0L,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputNextPutMaybeModifiable10_user,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputNextPutMaybeModifiable10_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterWithBufferedInputNextPutMaybeModifiable10_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::FilterWithBufferedInput::*)(uint8_t*, uint64_t, bool))&CryptoPP::FilterWithBufferedInput::NextPutMaybeModifiable) },
        {   (LPVOID)0x1405fe9f0L,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputNextPutModifiable11_user,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputNextPutModifiable11_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterWithBufferedInputNextPutModifiable11_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::FilterWithBufferedInput::*)(uint8_t*, uint64_t))&CryptoPP::FilterWithBufferedInput::NextPutModifiable) },
        {   (LPVOID)0x1405fb060L,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputNextPutMultiple12_user,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputNextPutMultiple12_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterWithBufferedInputNextPutMultiple12_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::FilterWithBufferedInput::*)(uint8_t*, uint64_t))&CryptoPP::FilterWithBufferedInput::NextPutMultiple) },
        {   (LPVOID)0x1405fe9b0L,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputNextPutSingle13_user,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputNextPutSingle13_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterWithBufferedInputNextPutSingle13_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::FilterWithBufferedInput::*)(uint8_t*))&CryptoPP::FilterWithBufferedInput::NextPutSingle) },
        {   (LPVOID)0x1405fe8c0L,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputPut214_user,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputPut214_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterWithBufferedInputPut214_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::FilterWithBufferedInput::*)(uint8_t*, uint64_t, int, bool))&CryptoPP::FilterWithBufferedInput::Put2) },
        {   (LPVOID)0x1405fa730L,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputPutMaybeModifiable15_user,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputPutMaybeModifiable15_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterWithBufferedInputPutMaybeModifiable15_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::FilterWithBufferedInput::*)(uint8_t*, char, int, bool, bool))&CryptoPP::FilterWithBufferedInput::PutMaybeModifiable) },
        {   (LPVOID)0x1405fe910L,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputPutModifiable216_user,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputPutModifiable216_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterWithBufferedInputPutModifiable216_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::FilterWithBufferedInput::*)(uint8_t*, uint64_t, int, bool))&CryptoPP::FilterWithBufferedInput::PutModifiable2) },
        {   (LPVOID)0x1405feac0L,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputdtor_FilterWithBufferedInput17_user,
            (LPVOID *)&CryptoPP__FilterWithBufferedInputdtor_FilterWithBufferedInput17_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterWithBufferedInputdtor_FilterWithBufferedInput17_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::FilterWithBufferedInput::*)())&CryptoPP::FilterWithBufferedInput::dtor_FilterWithBufferedInput) },
        
        {   (LPVOID)0x1405feb40L,
            (LPVOID *)&CryptoPP__FilterWithBufferedInput__BlockQueuector_BlockQueue1_user,
            (LPVOID *)&CryptoPP__FilterWithBufferedInput__BlockQueuector_BlockQueue1_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterWithBufferedInput__BlockQueuector_BlockQueue1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::FilterWithBufferedInput::BlockQueue::*)())&CryptoPP::FilterWithBufferedInput::BlockQueue::ctor_BlockQueue) },
        {   (LPVOID)0x1405fec10L,
            (LPVOID *)&CryptoPP__FilterWithBufferedInput__BlockQueueCurrentSize2_user,
            (LPVOID *)&CryptoPP__FilterWithBufferedInput__BlockQueueCurrentSize2_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterWithBufferedInput__BlockQueueCurrentSize2_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::FilterWithBufferedInput::BlockQueue::*)())&CryptoPP::FilterWithBufferedInput::BlockQueue::CurrentSize) },
        {   (LPVOID)0x1405f9fd0L,
            (LPVOID *)&CryptoPP__FilterWithBufferedInput__BlockQueueGetAll3_user,
            (LPVOID *)&CryptoPP__FilterWithBufferedInput__BlockQueueGetAll3_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterWithBufferedInput__BlockQueueGetAll3_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::FilterWithBufferedInput::BlockQueue::*)(uint8_t*))&CryptoPP::FilterWithBufferedInput::BlockQueue::GetAll) },
        {   (LPVOID)0x1405f9e40L,
            (LPVOID *)&CryptoPP__FilterWithBufferedInput__BlockQueueGetBlock4_user,
            (LPVOID *)&CryptoPP__FilterWithBufferedInput__BlockQueueGetBlock4_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterWithBufferedInput__BlockQueueGetBlock4_wrapper),
            (LPVOID)cast_pointer_function((uint8_t*(CryptoPP::FilterWithBufferedInput::BlockQueue::*)())&CryptoPP::FilterWithBufferedInput::BlockQueue::GetBlock) },
        {   (LPVOID)0x1405f9ef0L,
            (LPVOID *)&CryptoPP__FilterWithBufferedInput__BlockQueueGetContigousBlocks5_user,
            (LPVOID *)&CryptoPP__FilterWithBufferedInput__BlockQueueGetContigousBlocks5_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterWithBufferedInput__BlockQueueGetContigousBlocks5_wrapper),
            (LPVOID)cast_pointer_function((uint8_t*(CryptoPP::FilterWithBufferedInput::BlockQueue::*)(uint64_t*))&CryptoPP::FilterWithBufferedInput::BlockQueue::GetContigousBlocks) },
        {   (LPVOID)0x1405fa080L,
            (LPVOID *)&CryptoPP__FilterWithBufferedInput__BlockQueuePut6_user,
            (LPVOID *)&CryptoPP__FilterWithBufferedInput__BlockQueuePut6_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterWithBufferedInput__BlockQueuePut6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::FilterWithBufferedInput::BlockQueue::*)(uint8_t*, uint64_t))&CryptoPP::FilterWithBufferedInput::BlockQueue::Put) },
        {   (LPVOID)0x1405f9dc0L,
            (LPVOID *)&CryptoPP__FilterWithBufferedInput__BlockQueueResetQueue7_user,
            (LPVOID *)&CryptoPP__FilterWithBufferedInput__BlockQueueResetQueue7_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterWithBufferedInput__BlockQueueResetQueue7_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::FilterWithBufferedInput::BlockQueue::*)(uint64_t, uint64_t))&CryptoPP::FilterWithBufferedInput::BlockQueue::ResetQueue) },
        {   (LPVOID)0x1405feb20L,
            (LPVOID *)&CryptoPP__FilterWithBufferedInput__BlockQueuedtor_BlockQueue8_user,
            (LPVOID *)&CryptoPP__FilterWithBufferedInput__BlockQueuedtor_BlockQueue8_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterWithBufferedInput__BlockQueuedtor_BlockQueue8_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::FilterWithBufferedInput::BlockQueue::*)())&CryptoPP::FilterWithBufferedInput::BlockQueue::dtor_BlockQueue) },
        
        {   (LPVOID)0x1405fb350L,
            (LPVOID *)&CryptoPP__ProxyFilterIsolatedFlush1_user,
            (LPVOID *)&CryptoPP__ProxyFilterIsolatedFlush1_next,
            (LPVOID)cast_pointer_function(CryptoPP__ProxyFilterIsolatedFlush1_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::ProxyFilter::*)(bool, bool))&CryptoPP::ProxyFilter::IsolatedFlush) },
        {   (LPVOID)0x1405fb590L,
            (LPVOID *)&CryptoPP__ProxyFilterNextPutModifiable2_user,
            (LPVOID *)&CryptoPP__ProxyFilterNextPutModifiable2_next,
            (LPVOID)cast_pointer_function(CryptoPP__ProxyFilterNextPutModifiable2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ProxyFilter::*)(uint8_t*, uint64_t))&CryptoPP::ProxyFilter::NextPutModifiable) },
        {   (LPVOID)0x1405fb530L,
            (LPVOID *)&CryptoPP__ProxyFilterNextPutMultiple3_user,
            (LPVOID *)&CryptoPP__ProxyFilterNextPutMultiple3_next,
            (LPVOID)cast_pointer_function(CryptoPP__ProxyFilterNextPutMultiple3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ProxyFilter::*)(uint8_t*, uint64_t))&CryptoPP::ProxyFilter::NextPutMultiple) },
        {   (LPVOID)0x1405fb1d0L,
            (LPVOID *)&CryptoPP__ProxyFilterctor_ProxyFilter4_user,
            (LPVOID *)&CryptoPP__ProxyFilterctor_ProxyFilter4_next,
            (LPVOID)cast_pointer_function(CryptoPP__ProxyFilterctor_ProxyFilter4_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ProxyFilter::*)(struct CryptoPP::BufferedTransformation*, uint64_t, uint64_t, struct CryptoPP::BufferedTransformation*))&CryptoPP::ProxyFilter::ctor_ProxyFilter) },
        {   (LPVOID)0x1405fb3d0L,
            (LPVOID *)&CryptoPP__ProxyFilterSetFilter5_user,
            (LPVOID *)&CryptoPP__ProxyFilterSetFilter5_next,
            (LPVOID)cast_pointer_function(CryptoPP__ProxyFilterSetFilter5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ProxyFilter::*)(Filter*))&CryptoPP::ProxyFilter::SetFilter) },
        {   (LPVOID)0x1405ff2d0L,
            (LPVOID *)&CryptoPP__ProxyFilterdtor_ProxyFilter6_user,
            (LPVOID *)&CryptoPP__ProxyFilterdtor_ProxyFilter6_next,
            (LPVOID)cast_pointer_function(CryptoPP__ProxyFilterdtor_ProxyFilter6_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ProxyFilter::*)())&CryptoPP::ProxyFilter::dtor_ProxyFilter) },
        
        {   (LPVOID)0x14061bc70L,
            (LPVOID *)&CryptoPP__CFB_CipherAbstractPolicyctor_CFB_CipherAbstractPolicy1_user,
            (LPVOID *)&CryptoPP__CFB_CipherAbstractPolicyctor_CFB_CipherAbstractPolicy1_next,
            (LPVOID)cast_pointer_function(CryptoPP__CFB_CipherAbstractPolicyctor_CFB_CipherAbstractPolicy1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::CFB_CipherAbstractPolicy::*)())&CryptoPP::CFB_CipherAbstractPolicy::ctor_CFB_CipherAbstractPolicy) },
        {   (LPVOID)0x14061a5d0L,
            (LPVOID *)&CryptoPP__CFB_CipherAbstractPolicyCanIterate2_user,
            (LPVOID *)&CryptoPP__CFB_CipherAbstractPolicyCanIterate2_next,
            (LPVOID)cast_pointer_function(CryptoPP__CFB_CipherAbstractPolicyCanIterate2_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::CFB_CipherAbstractPolicy::*)())&CryptoPP::CFB_CipherAbstractPolicy::CanIterate) },
        {   (LPVOID)0x14061a5e0L,
            (LPVOID *)&CryptoPP__CFB_CipherAbstractPolicyIterate3_user,
            (LPVOID *)&CryptoPP__CFB_CipherAbstractPolicyIterate3_next,
            (LPVOID)cast_pointer_function(CryptoPP__CFB_CipherAbstractPolicyIterate3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CFB_CipherAbstractPolicy::*)(uint8_t*, uint8_t*, struct CryptoPP::CipherDir, uint64_t))&CryptoPP::CFB_CipherAbstractPolicy::Iterate) },
        {   (LPVOID)0x14061a270L,
            (LPVOID *)&CryptoPP__CFB_CipherAbstractPolicydtor_CFB_CipherAbstractPolicy4_user,
            (LPVOID *)&CryptoPP__CFB_CipherAbstractPolicydtor_CFB_CipherAbstractPolicy4_next,
            (LPVOID)cast_pointer_function(CryptoPP__CFB_CipherAbstractPolicydtor_CFB_CipherAbstractPolicy4_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::CFB_CipherAbstractPolicy::*)())&CryptoPP::CFB_CipherAbstractPolicy::dtor_CFB_CipherAbstractPolicy) },
        
        {   (LPVOID)0x14061bba0L,
            (LPVOID *)&CryptoPP__CFB_ModePolicyctor_CFB_ModePolicy1_user,
            (LPVOID *)&CryptoPP__CFB_ModePolicyctor_CFB_ModePolicy1_next,
            (LPVOID)cast_pointer_function(CryptoPP__CFB_ModePolicyctor_CFB_ModePolicy1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::CFB_ModePolicy::*)())&CryptoPP::CFB_ModePolicy::ctor_CFB_ModePolicy) },
        {   (LPVOID)0x14061a810L,
            (LPVOID *)&CryptoPP__CFB_ModePolicyCipherResynchronize2_user,
            (LPVOID *)&CryptoPP__CFB_ModePolicyCipherResynchronize2_next,
            (LPVOID)cast_pointer_function(CryptoPP__CFB_ModePolicyCipherResynchronize2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CFB_ModePolicy::*)(uint8_t*))&CryptoPP::CFB_ModePolicy::CipherResynchronize) },
        {   (LPVOID)0x14061a630L,
            (LPVOID *)&CryptoPP__CFB_ModePolicyGetBytesPerIteration3_user,
            (LPVOID *)&CryptoPP__CFB_ModePolicyGetBytesPerIteration3_next,
            (LPVOID)cast_pointer_function(CryptoPP__CFB_ModePolicyGetBytesPerIteration3_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::CFB_ModePolicy::*)())&CryptoPP::CFB_ModePolicy::GetBytesPerIteration) },
        {   (LPVOID)0x14061a640L,
            (LPVOID *)&CryptoPP__CFB_ModePolicyGetRegisterBegin4_user,
            (LPVOID *)&CryptoPP__CFB_ModePolicyGetRegisterBegin4_next,
            (LPVOID)cast_pointer_function(CryptoPP__CFB_ModePolicyGetRegisterBegin4_wrapper),
            (LPVOID)cast_pointer_function((uint8_t*(CryptoPP::CFB_ModePolicy::*)())&CryptoPP::CFB_ModePolicy::GetRegisterBegin) },
        {   (LPVOID)0x14061a620L,
            (LPVOID *)&CryptoPP__CFB_ModePolicyIVRequirement5_user,
            (LPVOID *)&CryptoPP__CFB_ModePolicyIVRequirement5_next,
            (LPVOID)cast_pointer_function(CryptoPP__CFB_ModePolicyIVRequirement5_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::SimpleKeyingInterface::IV_Requirement(CryptoPP::CFB_ModePolicy::*)())&CryptoPP::CFB_ModePolicy::IVRequirement) },
        {   (LPVOID)0x14061a9a0L,
            (LPVOID *)&CryptoPP__CFB_ModePolicyResizeBuffers6_user,
            (LPVOID *)&CryptoPP__CFB_ModePolicyResizeBuffers6_next,
            (LPVOID)cast_pointer_function(CryptoPP__CFB_ModePolicyResizeBuffers6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CFB_ModePolicy::*)())&CryptoPP::CFB_ModePolicy::ResizeBuffers) },
        {   (LPVOID)0x14061a8a0L,
            (LPVOID *)&CryptoPP__CFB_ModePolicySetFeedbackSize7_user,
            (LPVOID *)&CryptoPP__CFB_ModePolicySetFeedbackSize7_next,
            (LPVOID)cast_pointer_function(CryptoPP__CFB_ModePolicySetFeedbackSize7_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CFB_ModePolicy::*)(unsigned int))&CryptoPP::CFB_ModePolicy::SetFeedbackSize) },
        {   (LPVOID)0x14061bea0L,
            (LPVOID *)&CryptoPP__CFB_ModePolicyStaticAlgorithmName8_user,
            (LPVOID *)&CryptoPP__CFB_ModePolicyStaticAlgorithmName8_next,
            (LPVOID)cast_pointer_function(CryptoPP__CFB_ModePolicyStaticAlgorithmName8_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::CFB_ModePolicy::*)())&CryptoPP::CFB_ModePolicy::StaticAlgorithmName) },
        {   (LPVOID)0x14061a690L,
            (LPVOID *)&CryptoPP__CFB_ModePolicyTransformRegister9_user,
            (LPVOID *)&CryptoPP__CFB_ModePolicyTransformRegister9_next,
            (LPVOID)cast_pointer_function(CryptoPP__CFB_ModePolicyTransformRegister9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CFB_ModePolicy::*)())&CryptoPP::CFB_ModePolicy::TransformRegister) },
        {   (LPVOID)0x14061a100L,
            (LPVOID *)&CryptoPP__CFB_ModePolicydtor_CFB_ModePolicy10_user,
            (LPVOID *)&CryptoPP__CFB_ModePolicydtor_CFB_ModePolicy10_next,
            (LPVOID)cast_pointer_function(CryptoPP__CFB_ModePolicydtor_CFB_ModePolicy10_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::CFB_ModePolicy::*)())&CryptoPP::CFB_ModePolicy::dtor_CFB_ModePolicy) },
        
        {   (LPVOID)0x140562c80L,
            (LPVOID *)&CryptoPP__PK_SignatureMessageEncodingMethodAllowNonrecoverablePart1_user,
            (LPVOID *)&CryptoPP__PK_SignatureMessageEncodingMethodAllowNonrecoverablePart1_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_SignatureMessageEncodingMethodAllowNonrecoverablePart1_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::PK_SignatureMessageEncodingMethod::*)())&CryptoPP::PK_SignatureMessageEncodingMethod::AllowNonrecoverablePart) },
        {   (LPVOID)0x14058f830L,
            (LPVOID *)&CryptoPP__PK_SignatureMessageEncodingMethodMaxRecoverableLength2_user,
            (LPVOID *)&CryptoPP__PK_SignatureMessageEncodingMethodMaxRecoverableLength2_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_SignatureMessageEncodingMethodMaxRecoverableLength2_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::PK_SignatureMessageEncodingMethod::*)(uint64_t, uint64_t, uint64_t))&CryptoPP::PK_SignatureMessageEncodingMethod::MaxRecoverableLength) },
        {   (LPVOID)0x14058f810L,
            (LPVOID *)&CryptoPP__PK_SignatureMessageEncodingMethodMinRepresentativeBitLength3_user,
            (LPVOID *)&CryptoPP__PK_SignatureMessageEncodingMethodMinRepresentativeBitLength3_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_SignatureMessageEncodingMethodMinRepresentativeBitLength3_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::PK_SignatureMessageEncodingMethod::*)(uint64_t, uint64_t))&CryptoPP::PK_SignatureMessageEncodingMethod::MinRepresentativeBitLength) },
        {   (LPVOID)0x14058ff00L,
            (LPVOID *)&CryptoPP__PK_SignatureMessageEncodingMethodctor_PK_SignatureMessageEncodingMethod4_user,
            (LPVOID *)&CryptoPP__PK_SignatureMessageEncodingMethodctor_PK_SignatureMessageEncodingMethod4_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_SignatureMessageEncodingMethodctor_PK_SignatureMessageEncodingMethod4_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PK_SignatureMessageEncodingMethod::*)())&CryptoPP::PK_SignatureMessageEncodingMethod::ctor_PK_SignatureMessageEncodingMethod) },
        {   (LPVOID)0x14058f8f0L,
            (LPVOID *)&CryptoPP__PK_SignatureMessageEncodingMethodProcessSemisignature5_user,
            (LPVOID *)&CryptoPP__PK_SignatureMessageEncodingMethodProcessSemisignature5_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_SignatureMessageEncodingMethodProcessSemisignature5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PK_SignatureMessageEncodingMethod::*)(struct CryptoPP::HashTransformation*, uint8_t*, uint64_t))&CryptoPP::PK_SignatureMessageEncodingMethod::ProcessSemisignature) },
        {   (LPVOID)0x14058f850L,
            (LPVOID *)&CryptoPP__PK_SignatureMessageEncodingMethodRecoverablePartFirst6_user,
            (LPVOID *)&CryptoPP__PK_SignatureMessageEncodingMethodRecoverablePartFirst6_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_SignatureMessageEncodingMethodRecoverablePartFirst6_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::PK_SignatureMessageEncodingMethod::*)())&CryptoPP::PK_SignatureMessageEncodingMethod::RecoverablePartFirst) },
        {   (LPVOID)0x14058fef0L,
            (LPVOID *)&CryptoPP__PK_SignatureMessageEncodingMethoddtor_PK_SignatureMessageEncodingMethod7_user,
            (LPVOID *)&CryptoPP__PK_SignatureMessageEncodingMethoddtor_PK_SignatureMessageEncodingMethod7_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_SignatureMessageEncodingMethoddtor_PK_SignatureMessageEncodingMethod7_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PK_SignatureMessageEncodingMethod::*)())&CryptoPP::PK_SignatureMessageEncodingMethod::dtor_PK_SignatureMessageEncodingMethod) },
        
        {   (LPVOID)0x140464e80L,
            (LPVOID *)&CryptoPP__DecodingResultctor_DecodingResult2_user,
            (LPVOID *)&CryptoPP__DecodingResultctor_DecodingResult2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DecodingResultctor_DecodingResult2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DecodingResult::*)(uint64_t))&CryptoPP::DecodingResult::ctor_DecodingResult) },
        {   (LPVOID)0x140456450L,
            (LPVOID *)&CryptoPP__DecodingResultctor_DecodingResult4_user,
            (LPVOID *)&CryptoPP__DecodingResultctor_DecodingResult4_next,
            (LPVOID)cast_pointer_function(CryptoPP__DecodingResultctor_DecodingResult4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DecodingResult::*)())&CryptoPP::DecodingResult::ctor_DecodingResult) },
        
        {   (LPVOID)0x14054e380L,
            (LPVOID *)&CryptoPP__LazyPutterctor_LazyPutter1_user,
            (LPVOID *)&CryptoPP__LazyPutterctor_LazyPutter1_next,
            (LPVOID)cast_pointer_function(CryptoPP__LazyPutterctor_LazyPutter1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::LazyPutter::*)(struct CryptoPP::ByteQueue*, uint8_t*, uint64_t))&CryptoPP::LazyPutter::ctor_LazyPutter) },
        {   (LPVOID)0x14054e3d0L,
            (LPVOID *)&CryptoPP__LazyPutterdtor_LazyPutter2_user,
            (LPVOID *)&CryptoPP__LazyPutterdtor_LazyPutter2_next,
            (LPVOID)cast_pointer_function(CryptoPP__LazyPutterdtor_LazyPutter2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::LazyPutter::*)())&CryptoPP::LazyPutter::dtor_LazyPutter) },
        
        {   (LPVOID)0x140466680L,
            (LPVOID *)&CryptoPP__AlgorithmParametersBasector_AlgorithmParametersBase2_user,
            (LPVOID *)&CryptoPP__AlgorithmParametersBasector_AlgorithmParametersBase2_next,
            (LPVOID)cast_pointer_function(CryptoPP__AlgorithmParametersBasector_AlgorithmParametersBase2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AlgorithmParametersBase::*)(struct CryptoPP::AlgorithmParametersBase*))&CryptoPP::AlgorithmParametersBase::ctor_AlgorithmParametersBase) },
        {   (LPVOID)0x1404663f0L,
            (LPVOID *)&CryptoPP__AlgorithmParametersBasector_AlgorithmParametersBase4_user,
            (LPVOID *)&CryptoPP__AlgorithmParametersBasector_AlgorithmParametersBase4_next,
            (LPVOID)cast_pointer_function(CryptoPP__AlgorithmParametersBasector_AlgorithmParametersBase4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AlgorithmParametersBase::*)(char*, bool))&CryptoPP::AlgorithmParametersBase::ctor_AlgorithmParametersBase) },
        {   (LPVOID)0x140606280L,
            (LPVOID *)&CryptoPP__AlgorithmParametersBaseGetVoidValue5_user,
            (LPVOID *)&CryptoPP__AlgorithmParametersBaseGetVoidValue5_next,
            (LPVOID)cast_pointer_function(CryptoPP__AlgorithmParametersBaseGetVoidValue5_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::AlgorithmParametersBase::*)(char*, struct type_info*, void*))&CryptoPP::AlgorithmParametersBase::GetVoidValue) },
        {   (LPVOID)0x14044d1a0L,
            (LPVOID *)&CryptoPP__AlgorithmParametersBasedtor_AlgorithmParametersBase10_user,
            (LPVOID *)&CryptoPP__AlgorithmParametersBasedtor_AlgorithmParametersBase10_next,
            (LPVOID)cast_pointer_function(CryptoPP__AlgorithmParametersBasedtor_AlgorithmParametersBase10_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AlgorithmParametersBase::*)())&CryptoPP::AlgorithmParametersBase::dtor_AlgorithmParametersBase) },
        
        {   (LPVOID)0x14044d660L,
            (LPVOID *)&CryptoPP__AlgorithmParametersBase__ParameterNotUsedctor_ParameterNotUsed2_user,
            (LPVOID *)&CryptoPP__AlgorithmParametersBase__ParameterNotUsedctor_ParameterNotUsed2_next,
            (LPVOID)cast_pointer_function(CryptoPP__AlgorithmParametersBase__ParameterNotUsedctor_ParameterNotUsed2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AlgorithmParametersBase::ParameterNotUsed::*)(struct CryptoPP::AlgorithmParametersBase::ParameterNotUsed*))&CryptoPP::AlgorithmParametersBase::ParameterNotUsed::ctor_ParameterNotUsed) },
        {   (LPVOID)0x14044d2b0L,
            (LPVOID *)&CryptoPP__AlgorithmParametersBase__ParameterNotUsedctor_ParameterNotUsed4_user,
            (LPVOID *)&CryptoPP__AlgorithmParametersBase__ParameterNotUsedctor_ParameterNotUsed4_next,
            (LPVOID)cast_pointer_function(CryptoPP__AlgorithmParametersBase__ParameterNotUsedctor_ParameterNotUsed4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AlgorithmParametersBase::ParameterNotUsed::*)(char*))&CryptoPP::AlgorithmParametersBase::ParameterNotUsed::ctor_ParameterNotUsed) },
        {   (LPVOID)0x14044d620L,
            (LPVOID *)&CryptoPP__AlgorithmParametersBase__ParameterNotUseddtor_ParameterNotUsed9_user,
            (LPVOID *)&CryptoPP__AlgorithmParametersBase__ParameterNotUseddtor_ParameterNotUsed9_next,
            (LPVOID)cast_pointer_function(CryptoPP__AlgorithmParametersBase__ParameterNotUseddtor_ParameterNotUsed9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AlgorithmParametersBase::ParameterNotUsed::*)())&CryptoPP::AlgorithmParametersBase::ParameterNotUsed::dtor_ParameterNotUsed) },
        
        {   (LPVOID)0x140460f30L,
            (LPVOID *)&CryptoPP__NullNameValuePairsGetVoidValue2_user,
            (LPVOID *)&CryptoPP__NullNameValuePairsGetVoidValue2_next,
            (LPVOID)cast_pointer_function(CryptoPP__NullNameValuePairsGetVoidValue2_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::NullNameValuePairs::*)(char*, struct type_info*, void*))&CryptoPP::NullNameValuePairs::GetVoidValue) },
        {   (LPVOID)0x140460ec0L,
            (LPVOID *)&CryptoPP__NullNameValuePairsctor_NullNameValuePairs4_user,
            (LPVOID *)&CryptoPP__NullNameValuePairsctor_NullNameValuePairs4_next,
            (LPVOID)cast_pointer_function(CryptoPP__NullNameValuePairsctor_NullNameValuePairs4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::NullNameValuePairs::*)(struct CryptoPP::NullNameValuePairs*))&CryptoPP::NullNameValuePairs::ctor_NullNameValuePairs) },
        {   (LPVOID)0x1405f8b80L,
            (LPVOID *)&CryptoPP__NullNameValuePairsctor_NullNameValuePairs5_user,
            (LPVOID *)&CryptoPP__NullNameValuePairsctor_NullNameValuePairs5_next,
            (LPVOID)cast_pointer_function(CryptoPP__NullNameValuePairsctor_NullNameValuePairs5_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::NullNameValuePairs::*)())&CryptoPP::NullNameValuePairs::ctor_NullNameValuePairs) },
        {   (LPVOID)0x14044d120L,
            (LPVOID *)&CryptoPP__NullNameValuePairsdtor_NullNameValuePairs10_user,
            (LPVOID *)&CryptoPP__NullNameValuePairsdtor_NullNameValuePairs10_next,
            (LPVOID)cast_pointer_function(CryptoPP__NullNameValuePairsdtor_NullNameValuePairs10_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::NullNameValuePairs::*)())&CryptoPP::NullNameValuePairs::dtor_NullNameValuePairs) },
        
        {   (LPVOID)0x14061bb40L,
            (LPVOID *)&CryptoPP__CTR_ModePolicyctor_CTR_ModePolicy1_user,
            (LPVOID *)&CryptoPP__CTR_ModePolicyctor_CTR_ModePolicy1_next,
            (LPVOID)cast_pointer_function(CryptoPP__CTR_ModePolicyctor_CTR_ModePolicy1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::CTR_ModePolicy::*)())&CryptoPP::CTR_ModePolicy::ctor_CTR_ModePolicy) },
        {   (LPVOID)0x14061b230L,
            (LPVOID *)&CryptoPP__CTR_ModePolicyCanOperateKeystream2_user,
            (LPVOID *)&CryptoPP__CTR_ModePolicyCanOperateKeystream2_next,
            (LPVOID)cast_pointer_function(CryptoPP__CTR_ModePolicyCanOperateKeystream2_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::CTR_ModePolicy::*)())&CryptoPP::CTR_ModePolicy::CanOperateKeystream) },
        {   (LPVOID)0x140618de0L,
            (LPVOID *)&CryptoPP__CTR_ModePolicyCipherResynchronize3_user,
            (LPVOID *)&CryptoPP__CTR_ModePolicyCipherResynchronize3_next,
            (LPVOID)cast_pointer_function(CryptoPP__CTR_ModePolicyCipherResynchronize3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CTR_ModePolicy::*)(uint8_t*, uint8_t*))&CryptoPP::CTR_ModePolicy::CipherResynchronize) },
        {   (LPVOID)0x14061b160L,
            (LPVOID *)&CryptoPP__CTR_ModePolicyGetAlignment4_user,
            (LPVOID *)&CryptoPP__CTR_ModePolicyGetAlignment4_next,
            (LPVOID)cast_pointer_function(CryptoPP__CTR_ModePolicyGetAlignment4_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::CTR_ModePolicy::*)())&CryptoPP::CTR_ModePolicy::GetAlignment) },
        {   (LPVOID)0x14061b190L,
            (LPVOID *)&CryptoPP__CTR_ModePolicyGetBytesPerIteration5_user,
            (LPVOID *)&CryptoPP__CTR_ModePolicyGetBytesPerIteration5_next,
            (LPVOID)cast_pointer_function(CryptoPP__CTR_ModePolicyGetBytesPerIteration5_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::CTR_ModePolicy::*)())&CryptoPP::CTR_ModePolicy::GetBytesPerIteration) },
        {   (LPVOID)0x14061b1b0L,
            (LPVOID *)&CryptoPP__CTR_ModePolicyGetIterationsToBuffer6_user,
            (LPVOID *)&CryptoPP__CTR_ModePolicyGetIterationsToBuffer6_next,
            (LPVOID)cast_pointer_function(CryptoPP__CTR_ModePolicyGetIterationsToBuffer6_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::CTR_ModePolicy::*)())&CryptoPP::CTR_ModePolicy::GetIterationsToBuffer) },
        {   (LPVOID)0x14061b150L,
            (LPVOID *)&CryptoPP__CTR_ModePolicyIVRequirement7_user,
            (LPVOID *)&CryptoPP__CTR_ModePolicyIVRequirement7_next,
            (LPVOID)cast_pointer_function(CryptoPP__CTR_ModePolicyIVRequirement7_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::SimpleKeyingInterface::IV_Requirement(CryptoPP::CTR_ModePolicy::*)())&CryptoPP::CTR_ModePolicy::IVRequirement) },
        {   (LPVOID)0x140618be0L,
            (LPVOID *)&CryptoPP__CTR_ModePolicyOperateKeystream8_user,
            (LPVOID *)&CryptoPP__CTR_ModePolicyOperateKeystream8_next,
            (LPVOID)cast_pointer_function(CryptoPP__CTR_ModePolicyOperateKeystream8_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CTR_ModePolicy::*)(struct CryptoPP::KeystreamOperation, uint8_t*, uint8_t*, uint64_t))&CryptoPP::CTR_ModePolicy::OperateKeystream) },
        {   (LPVOID)0x14061a2a0L,
            (LPVOID *)&CryptoPP__CTR_ModePolicyProcessMultipleBlocks9_user,
            (LPVOID *)&CryptoPP__CTR_ModePolicyProcessMultipleBlocks9_next,
            (LPVOID)cast_pointer_function(CryptoPP__CTR_ModePolicyProcessMultipleBlocks9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CTR_ModePolicy::*)(uint8_t*, uint8_t*, uint64_t))&CryptoPP::CTR_ModePolicy::ProcessMultipleBlocks) },
        {   (LPVOID)0x140618b20L,
            (LPVOID *)&CryptoPP__CTR_ModePolicySeekToIteration10_user,
            (LPVOID *)&CryptoPP__CTR_ModePolicySeekToIteration10_next,
            (LPVOID)cast_pointer_function(CryptoPP__CTR_ModePolicySeekToIteration10_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CTR_ModePolicy::*)(uint64_t))&CryptoPP::CTR_ModePolicy::SeekToIteration) },
        {   (LPVOID)0x14061c7d0L,
            (LPVOID *)&CryptoPP__CTR_ModePolicyStaticAlgorithmName11_user,
            (LPVOID *)&CryptoPP__CTR_ModePolicyStaticAlgorithmName11_next,
            (LPVOID)cast_pointer_function(CryptoPP__CTR_ModePolicyStaticAlgorithmName11_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::CTR_ModePolicy::*)())&CryptoPP::CTR_ModePolicy::StaticAlgorithmName) },
        {   (LPVOID)0x14061b1e0L,
            (LPVOID *)&CryptoPP__CTR_ModePolicyWriteKeystream12_user,
            (LPVOID *)&CryptoPP__CTR_ModePolicyWriteKeystream12_next,
            (LPVOID)cast_pointer_function(CryptoPP__CTR_ModePolicyWriteKeystream12_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CTR_ModePolicy::*)(uint8_t*, uint64_t))&CryptoPP::CTR_ModePolicy::WriteKeystream) },
        {   (LPVOID)0x14061a060L,
            (LPVOID *)&CryptoPP__CTR_ModePolicydtor_CTR_ModePolicy13_user,
            (LPVOID *)&CryptoPP__CTR_ModePolicydtor_CTR_ModePolicy13_next,
            (LPVOID)cast_pointer_function(CryptoPP__CTR_ModePolicydtor_CTR_ModePolicy13_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::CTR_ModePolicy::*)())&CryptoPP::CTR_ModePolicy::dtor_CTR_ModePolicy) },
        
        {   (LPVOID)0x14061af50L,
            (LPVOID *)&CryptoPP__OFB_ModePolicyCipherResynchronize1_user,
            (LPVOID *)&CryptoPP__OFB_ModePolicyCipherResynchronize1_next,
            (LPVOID)cast_pointer_function(CryptoPP__OFB_ModePolicyCipherResynchronize1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::OFB_ModePolicy::*)(uint8_t*, uint8_t*))&CryptoPP::OFB_ModePolicy::CipherResynchronize) },
        {   (LPVOID)0x14061ae90L,
            (LPVOID *)&CryptoPP__OFB_ModePolicyGetBytesPerIteration2_user,
            (LPVOID *)&CryptoPP__OFB_ModePolicyGetBytesPerIteration2_next,
            (LPVOID)cast_pointer_function(CryptoPP__OFB_ModePolicyGetBytesPerIteration2_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::OFB_ModePolicy::*)())&CryptoPP::OFB_ModePolicy::GetBytesPerIteration) },
        {   (LPVOID)0x14061aeb0L,
            (LPVOID *)&CryptoPP__OFB_ModePolicyGetIterationsToBuffer3_user,
            (LPVOID *)&CryptoPP__OFB_ModePolicyGetIterationsToBuffer3_next,
            (LPVOID)cast_pointer_function(CryptoPP__OFB_ModePolicyGetIterationsToBuffer3_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::OFB_ModePolicy::*)())&CryptoPP::OFB_ModePolicy::GetIterationsToBuffer) },
        {   (LPVOID)0x14061ae80L,
            (LPVOID *)&CryptoPP__OFB_ModePolicyIVRequirement4_user,
            (LPVOID *)&CryptoPP__OFB_ModePolicyIVRequirement4_next,
            (LPVOID)cast_pointer_function(CryptoPP__OFB_ModePolicyIVRequirement4_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::SimpleKeyingInterface::IV_Requirement(CryptoPP::OFB_ModePolicy::*)())&CryptoPP::OFB_ModePolicy::IVRequirement) },
        {   (LPVOID)0x14061bb20L,
            (LPVOID *)&CryptoPP__OFB_ModePolicyctor_OFB_ModePolicy5_user,
            (LPVOID *)&CryptoPP__OFB_ModePolicyctor_OFB_ModePolicy5_next,
            (LPVOID)cast_pointer_function(CryptoPP__OFB_ModePolicyctor_OFB_ModePolicy5_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::OFB_ModePolicy::*)())&CryptoPP::OFB_ModePolicy::ctor_OFB_ModePolicy) },
        {   (LPVOID)0x14061c670L,
            (LPVOID *)&CryptoPP__OFB_ModePolicyStaticAlgorithmName6_user,
            (LPVOID *)&CryptoPP__OFB_ModePolicyStaticAlgorithmName6_next,
            (LPVOID)cast_pointer_function(CryptoPP__OFB_ModePolicyStaticAlgorithmName6_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::OFB_ModePolicy::*)())&CryptoPP::OFB_ModePolicy::StaticAlgorithmName) },
        {   (LPVOID)0x14061aec0L,
            (LPVOID *)&CryptoPP__OFB_ModePolicyWriteKeystream7_user,
            (LPVOID *)&CryptoPP__OFB_ModePolicyWriteKeystream7_next,
            (LPVOID)cast_pointer_function(CryptoPP__OFB_ModePolicyWriteKeystream7_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::OFB_ModePolicy::*)(uint8_t*, uint64_t))&CryptoPP::OFB_ModePolicy::WriteKeystream) },
        {   (LPVOID)0x14061a040L,
            (LPVOID *)&CryptoPP__OFB_ModePolicydtor_OFB_ModePolicy8_user,
            (LPVOID *)&CryptoPP__OFB_ModePolicydtor_OFB_ModePolicy8_next,
            (LPVOID)cast_pointer_function(CryptoPP__OFB_ModePolicydtor_OFB_ModePolicy8_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::OFB_ModePolicy::*)())&CryptoPP::OFB_ModePolicy::dtor_OFB_ModePolicy) },
        
        {   (LPVOID)0x140465f70L,
            (LPVOID *)&CryptoPP__DL_SymmetricEncryptionAlgorithmctor_DL_SymmetricEncryptionAlgorithm2_user,
            (LPVOID *)&CryptoPP__DL_SymmetricEncryptionAlgorithmctor_DL_SymmetricEncryptionAlgorithm2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_SymmetricEncryptionAlgorithmctor_DL_SymmetricEncryptionAlgorithm2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_SymmetricEncryptionAlgorithm::*)())&CryptoPP::DL_SymmetricEncryptionAlgorithm::ctor_DL_SymmetricEncryptionAlgorithm) },
        
        {   (LPVOID)0x1405527b0L,
            (LPVOID *)&CryptoPP__DL_Algorithm_GDSASign1_user,
            (LPVOID *)&CryptoPP__DL_Algorithm_GDSASign1_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_Algorithm_GDSASign1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DL_Algorithm_GDSA<CryptoPP::Integer>::*)(struct CryptoPP::Integer*, int64_t))&CryptoPP::DL_Algorithm_GDSA<CryptoPP::Integer>::Sign) },
        {   (LPVOID)0x140552b10L,
            (LPVOID *)&CryptoPP__DL_Algorithm_GDSAVerify2_user,
            (LPVOID *)&CryptoPP__DL_Algorithm_GDSAVerify2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_Algorithm_GDSAVerify2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DL_Algorithm_GDSA<CryptoPP::Integer>::*)(struct CryptoPP::Integer*))&CryptoPP::DL_Algorithm_GDSA<CryptoPP::Integer>::Verify) },
        
        {   (LPVOID)0x140651030L,
            (LPVOID *)&CryptoPP__X917RNGctor_X917RNG1_user,
            (LPVOID *)&CryptoPP__X917RNGctor_X917RNG1_next,
            (LPVOID)cast_pointer_function(CryptoPP__X917RNGctor_X917RNG1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::X917RNG::*)(struct CryptoPP::BlockTransformation*, uint8_t*, uint8_t*))&CryptoPP::X917RNG::ctor_X917RNG) },
        {   (LPVOID)0x140651d20L,
            (LPVOID *)&CryptoPP__X917RNGdtor_X917RNG2_user,
            (LPVOID *)&CryptoPP__X917RNGdtor_X917RNG2_next,
            (LPVOID)cast_pointer_function(CryptoPP__X917RNGdtor_X917RNG2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::X917RNG::*)())&CryptoPP::X917RNG::dtor_X917RNG) },
        
        {   (LPVOID)0x140465f60L,
            (LPVOID *)&CryptoPP__DL_KeyDerivationAlgorithmctor_DL_KeyDerivationAlgorithm2_user,
            (LPVOID *)&CryptoPP__DL_KeyDerivationAlgorithmctor_DL_KeyDerivationAlgorithm2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_KeyDerivationAlgorithmctor_DL_KeyDerivationAlgorithm2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_KeyDerivationAlgorithm<CryptoPP::ECPPoint>::*)())&CryptoPP::DL_KeyDerivationAlgorithm<CryptoPP::ECPPoint>::ctor_DL_KeyDerivationAlgorithm) },
        
        {   (LPVOID)0x140452df0L,
            (LPVOID *)&CryptoPP__InvalidArgumentctor_InvalidArgument2_user,
            (LPVOID *)&CryptoPP__InvalidArgumentctor_InvalidArgument2_next,
            (LPVOID)cast_pointer_function(CryptoPP__InvalidArgumentctor_InvalidArgument2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::InvalidArgument::*)(struct CryptoPP::InvalidArgument*))&CryptoPP::InvalidArgument::ctor_InvalidArgument) },
        {   (LPVOID)0x140452cd0L,
            (LPVOID *)&CryptoPP__InvalidArgumentctor_InvalidArgument4_user,
            (LPVOID *)&CryptoPP__InvalidArgumentctor_InvalidArgument4_next,
            (LPVOID)cast_pointer_function(CryptoPP__InvalidArgumentctor_InvalidArgument4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::InvalidArgument::*)(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*))&CryptoPP::InvalidArgument::ctor_InvalidArgument) },
        {   (LPVOID)0x140452db0L,
            (LPVOID *)&CryptoPP__InvalidArgumentdtor_InvalidArgument9_user,
            (LPVOID *)&CryptoPP__InvalidArgumentdtor_InvalidArgument9_next,
            (LPVOID)cast_pointer_function(CryptoPP__InvalidArgumentdtor_InvalidArgument9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::InvalidArgument::*)())&CryptoPP::InvalidArgument::dtor_InvalidArgument) },
        
        {   (LPVOID)0x14054e250L,
            (LPVOID *)&CryptoPP__BERDecodeErrctor_BERDecodeErr1_user,
            (LPVOID *)&CryptoPP__BERDecodeErrctor_BERDecodeErr1_next,
            (LPVOID)cast_pointer_function(CryptoPP__BERDecodeErrctor_BERDecodeErr1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::BERDecodeErr::*)(struct CryptoPP::BERDecodeErr*))&CryptoPP::BERDecodeErr::ctor_BERDecodeErr) },
        {   (LPVOID)0x14054ff40L,
            (LPVOID *)&CryptoPP__BERDecodeErrctor_BERDecodeErr2_user,
            (LPVOID *)&CryptoPP__BERDecodeErrctor_BERDecodeErr2_next,
            (LPVOID)cast_pointer_function(CryptoPP__BERDecodeErrctor_BERDecodeErr2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::BERDecodeErr::*)())&CryptoPP::BERDecodeErr::ctor_BERDecodeErr) },
        {   (LPVOID)0x140550040L,
            (LPVOID *)&CryptoPP__BERDecodeErrdtor_BERDecodeErr3_user,
            (LPVOID *)&CryptoPP__BERDecodeErrdtor_BERDecodeErr3_next,
            (LPVOID)cast_pointer_function(CryptoPP__BERDecodeErrdtor_BERDecodeErr3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::BERDecodeErr::*)())&CryptoPP::BERDecodeErr::dtor_BERDecodeErr) },
        
        {   (LPVOID)0x140625570L,
            (LPVOID *)&CryptoPP__MicrosoftCryptoProviderGetProviderHandle1_user,
            (LPVOID *)&CryptoPP__MicrosoftCryptoProviderGetProviderHandle1_next,
            (LPVOID)cast_pointer_function(CryptoPP__MicrosoftCryptoProviderGetProviderHandle1_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::MicrosoftCryptoProvider::*)())&CryptoPP::MicrosoftCryptoProvider::GetProviderHandle) },
        {   (LPVOID)0x1406250a0L,
            (LPVOID *)&CryptoPP__MicrosoftCryptoProviderctor_MicrosoftCryptoProvider2_user,
            (LPVOID *)&CryptoPP__MicrosoftCryptoProviderctor_MicrosoftCryptoProvider2_next,
            (LPVOID)cast_pointer_function(CryptoPP__MicrosoftCryptoProviderctor_MicrosoftCryptoProvider2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::MicrosoftCryptoProvider::*)())&CryptoPP::MicrosoftCryptoProvider::ctor_MicrosoftCryptoProvider) },
        {   (LPVOID)0x140625190L,
            (LPVOID *)&CryptoPP__MicrosoftCryptoProviderdtor_MicrosoftCryptoProvider3_user,
            (LPVOID *)&CryptoPP__MicrosoftCryptoProviderdtor_MicrosoftCryptoProvider3_next,
            (LPVOID)cast_pointer_function(CryptoPP__MicrosoftCryptoProviderdtor_MicrosoftCryptoProvider3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::MicrosoftCryptoProvider::*)())&CryptoPP::MicrosoftCryptoProvider::dtor_MicrosoftCryptoProvider) },
        
        {   (LPVOID)0x140553db0L,
            (LPVOID *)&CryptoPP__KeyAgreementAlgorithmAccessMaterial1_user,
            (LPVOID *)&CryptoPP__KeyAgreementAlgorithmAccessMaterial1_next,
            (LPVOID)cast_pointer_function(CryptoPP__KeyAgreementAlgorithmAccessMaterial1_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::CryptoMaterial*(CryptoPP::KeyAgreementAlgorithm::*)())&CryptoPP::KeyAgreementAlgorithm::AccessMaterial) },
        {   (LPVOID)0x140553e70L,
            (LPVOID *)&CryptoPP__KeyAgreementAlgorithmGetCryptoParameters2_user,
            (LPVOID *)&CryptoPP__KeyAgreementAlgorithmGetCryptoParameters2_next,
            (LPVOID)cast_pointer_function(CryptoPP__KeyAgreementAlgorithmGetCryptoParameters2_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::CryptoParameters*(CryptoPP::KeyAgreementAlgorithm::*)())&CryptoPP::KeyAgreementAlgorithm::GetCryptoParameters) },
        {   (LPVOID)0x140553e10L,
            (LPVOID *)&CryptoPP__KeyAgreementAlgorithmGetMaterial3_user,
            (LPVOID *)&CryptoPP__KeyAgreementAlgorithmGetMaterial3_next,
            (LPVOID)cast_pointer_function(CryptoPP__KeyAgreementAlgorithmGetMaterial3_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::CryptoMaterial*(CryptoPP::KeyAgreementAlgorithm::*)())&CryptoPP::KeyAgreementAlgorithm::GetMaterial) },
        {   (LPVOID)0x14055e1f0L,
            (LPVOID *)&CryptoPP__KeyAgreementAlgorithmctor_KeyAgreementAlgorithm4_user,
            (LPVOID *)&CryptoPP__KeyAgreementAlgorithmctor_KeyAgreementAlgorithm4_next,
            (LPVOID)cast_pointer_function(CryptoPP__KeyAgreementAlgorithmctor_KeyAgreementAlgorithm4_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::KeyAgreementAlgorithm::*)())&CryptoPP::KeyAgreementAlgorithm::ctor_KeyAgreementAlgorithm) },
        {   (LPVOID)0x14055e210L,
            (LPVOID *)&CryptoPP__KeyAgreementAlgorithmdtor_KeyAgreementAlgorithm5_user,
            (LPVOID *)&CryptoPP__KeyAgreementAlgorithmdtor_KeyAgreementAlgorithm5_next,
            (LPVOID)cast_pointer_function(CryptoPP__KeyAgreementAlgorithmdtor_KeyAgreementAlgorithm5_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::KeyAgreementAlgorithm::*)())&CryptoPP::KeyAgreementAlgorithm::dtor_KeyAgreementAlgorithm) },
        
        {   (LPVOID)0x1405f6540L,
            (LPVOID *)&CryptoPP__SimpleKeyAgreementDomainGenerateKeyPair1_user,
            (LPVOID *)&CryptoPP__SimpleKeyAgreementDomainGenerateKeyPair1_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyAgreementDomainGenerateKeyPair1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SimpleKeyAgreementDomain::*)(struct CryptoPP::RandomNumberGenerator*, uint8_t*, uint8_t*))&CryptoPP::SimpleKeyAgreementDomain::GenerateKeyPair) },
        {   (LPVOID)0x14055d5a0L,
            (LPVOID *)&CryptoPP__SimpleKeyAgreementDomainctor_SimpleKeyAgreementDomain2_user,
            (LPVOID *)&CryptoPP__SimpleKeyAgreementDomainctor_SimpleKeyAgreementDomain2_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyAgreementDomainctor_SimpleKeyAgreementDomain2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::SimpleKeyAgreementDomain::*)())&CryptoPP::SimpleKeyAgreementDomain::ctor_SimpleKeyAgreementDomain) },
        {   (LPVOID)0x14055d5c0L,
            (LPVOID *)&CryptoPP__SimpleKeyAgreementDomaindtor_SimpleKeyAgreementDomain3_user,
            (LPVOID *)&CryptoPP__SimpleKeyAgreementDomaindtor_SimpleKeyAgreementDomain3_next,
            (LPVOID)cast_pointer_function(CryptoPP__SimpleKeyAgreementDomaindtor_SimpleKeyAgreementDomain3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::SimpleKeyAgreementDomain::*)())&CryptoPP::SimpleKeyAgreementDomain::dtor_SimpleKeyAgreementDomain) },
        
        {   (LPVOID)0x14055c880L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimector_DL_GroupParameters_GFP_DefaultSafePrime1_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimector_DL_GroupParameters_GFP_DefaultSafePrime1_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimector_DL_GroupParameters_GFP_DefaultSafePrime1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DL_GroupParameters_GFP_DefaultSafePrime::*)(struct CryptoPP::DL_GroupParameters_GFP_DefaultSafePrime*))&CryptoPP::DL_GroupParameters_GFP_DefaultSafePrime::ctor_DL_GroupParameters_GFP_DefaultSafePrime) },
        {   (LPVOID)0x14055c2c0L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimector_DL_GroupParameters_GFP_DefaultSafePrime2_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimector_DL_GroupParameters_GFP_DefaultSafePrime2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimector_DL_GroupParameters_GFP_DefaultSafePrime2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DL_GroupParameters_GFP_DefaultSafePrime::*)())&CryptoPP::DL_GroupParameters_GFP_DefaultSafePrime::ctor_DL_GroupParameters_GFP_DefaultSafePrime) },
        {   (LPVOID)0x14055c820L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimeGetDefaultSubgroupOrderSize3_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimeGetDefaultSubgroupOrderSize3_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimeGetDefaultSubgroupOrderSize3_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::DL_GroupParameters_GFP_DefaultSafePrime::*)(unsigned int))&CryptoPP::DL_GroupParameters_GFP_DefaultSafePrime::GetDefaultSubgroupOrderSize) },
        {   (LPVOID)0x14055d720L,
            (LPVOID *)&CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimedtor_DL_GroupParameters_GFP_DefaultSafePrime4_user,
            (LPVOID *)&CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimedtor_DL_GroupParameters_GFP_DefaultSafePrime4_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimedtor_DL_GroupParameters_GFP_DefaultSafePrime4_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DL_GroupParameters_GFP_DefaultSafePrime::*)())&CryptoPP::DL_GroupParameters_GFP_DefaultSafePrime::dtor_DL_GroupParameters_GFP_DefaultSafePrime) },
        
        {   (LPVOID)0x14044b870L,
            (LPVOID *)&CryptoPP__NotImplementedctor_NotImplemented2_user,
            (LPVOID *)&CryptoPP__NotImplementedctor_NotImplemented2_next,
            (LPVOID)cast_pointer_function(CryptoPP__NotImplementedctor_NotImplemented2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::NotImplemented::*)(struct CryptoPP::NotImplemented*))&CryptoPP::NotImplemented::ctor_NotImplemented) },
        {   (LPVOID)0x14044b750L,
            (LPVOID *)&CryptoPP__NotImplementedctor_NotImplemented4_user,
            (LPVOID *)&CryptoPP__NotImplementedctor_NotImplemented4_next,
            (LPVOID)cast_pointer_function(CryptoPP__NotImplementedctor_NotImplemented4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::NotImplemented::*)(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*))&CryptoPP::NotImplemented::ctor_NotImplemented) },
        {   (LPVOID)0x14044b830L,
            (LPVOID *)&CryptoPP__NotImplementeddtor_NotImplemented9_user,
            (LPVOID *)&CryptoPP__NotImplementeddtor_NotImplemented9_next,
            (LPVOID)cast_pointer_function(CryptoPP__NotImplementeddtor_NotImplemented9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::NotImplemented::*)())&CryptoPP::NotImplemented::dtor_NotImplemented) },
        
        {   (LPVOID)0x14057e630L,
            (LPVOID *)&CryptoPP__CannotFlushctor_CannotFlush1_user,
            (LPVOID *)&CryptoPP__CannotFlushctor_CannotFlush1_next,
            (LPVOID)cast_pointer_function(CryptoPP__CannotFlushctor_CannotFlush1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::CannotFlush::*)(struct CryptoPP::CannotFlush*))&CryptoPP::CannotFlush::ctor_CannotFlush) },
        {   (LPVOID)0x14057df80L,
            (LPVOID *)&CryptoPP__CannotFlushdtor_CannotFlush2_user,
            (LPVOID *)&CryptoPP__CannotFlushdtor_CannotFlush2_next,
            (LPVOID)cast_pointer_function(CryptoPP__CannotFlushdtor_CannotFlush2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::CannotFlush::*)())&CryptoPP::CannotFlush::dtor_CannotFlush) },
        
        {   (LPVOID)0x140453ba0L,
            (LPVOID *)&CryptoPP__FilterPutSpaceHelperctor_FilterPutSpaceHelper2_user,
            (LPVOID *)&CryptoPP__FilterPutSpaceHelperctor_FilterPutSpaceHelper2_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterPutSpaceHelperctor_FilterPutSpaceHelper2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::FilterPutSpaceHelper::*)())&CryptoPP::FilterPutSpaceHelper::ctor_FilterPutSpaceHelper) },
        {   (LPVOID)0x14044dba0L,
            (LPVOID *)&CryptoPP__FilterPutSpaceHelperdtor_FilterPutSpaceHelper4_user,
            (LPVOID *)&CryptoPP__FilterPutSpaceHelperdtor_FilterPutSpaceHelper4_next,
            (LPVOID)cast_pointer_function(CryptoPP__FilterPutSpaceHelperdtor_FilterPutSpaceHelper4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::FilterPutSpaceHelper::*)())&CryptoPP::FilterPutSpaceHelper::dtor_FilterPutSpaceHelper) },
        
        {   (LPVOID)0x140623eb0L,
            (LPVOID *)&CryptoPP__HashFilterCreatePutSpace1_user,
            (LPVOID *)&CryptoPP__HashFilterCreatePutSpace1_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashFilterCreatePutSpace1_wrapper),
            (LPVOID)cast_pointer_function((uint8_t*(CryptoPP::HashFilter::*)(uint64_t*))&CryptoPP::HashFilter::CreatePutSpace) },
        {   (LPVOID)0x140623d40L,
            (LPVOID *)&CryptoPP__HashFilterctor_HashFilter2_user,
            (LPVOID *)&CryptoPP__HashFilterctor_HashFilter2_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashFilterctor_HashFilter2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::HashFilter::*)(struct CryptoPP::HashTransformation*, struct CryptoPP::BufferedTransformation*, bool, int))&CryptoPP::HashFilter::ctor_HashFilter) },
        {   (LPVOID)0x1405fcb10L,
            (LPVOID *)&CryptoPP__HashFilterIsolatedInitialize3_user,
            (LPVOID *)&CryptoPP__HashFilterIsolatedInitialize3_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashFilterIsolatedInitialize3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::HashFilter::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::HashFilter::IsolatedInitialize) },
        {   (LPVOID)0x1405fcb80L,
            (LPVOID *)&CryptoPP__HashFilterPut24_user,
            (LPVOID *)&CryptoPP__HashFilterPut24_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashFilterPut24_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::HashFilter::*)(uint8_t*, uint64_t, int, bool))&CryptoPP::HashFilter::Put2) },
        {   (LPVOID)0x140623f20L,
            (LPVOID *)&CryptoPP__HashFilterdtor_HashFilter5_user,
            (LPVOID *)&CryptoPP__HashFilterdtor_HashFilter5_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashFilterdtor_HashFilter5_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::HashFilter::*)())&CryptoPP::HashFilter::dtor_HashFilter) },
        
        {   (LPVOID)0x14058fdf0L,
            (LPVOID *)&CryptoPP__PK_DeterministicSignatureMessageEncodingMethodctor_PK_DeterministicSignatureMessageEncodingMethod1_user,
            (LPVOID *)&CryptoPP__PK_DeterministicSignatureMessageEncodingMethodctor_PK_DeterministicSignatureMessageEncodingMethod1_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_DeterministicSignatureMessageEncodingMethodctor_PK_DeterministicSignatureMessageEncodingMethod1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PK_DeterministicSignatureMessageEncodingMethod::*)())&CryptoPP::PK_DeterministicSignatureMessageEncodingMethod::ctor_PK_DeterministicSignatureMessageEncodingMethod) },
        {   (LPVOID)0x140622520L,
            (LPVOID *)&CryptoPP__PK_DeterministicSignatureMessageEncodingMethodVerifyMessageRepresentative2_user,
            (LPVOID *)&CryptoPP__PK_DeterministicSignatureMessageEncodingMethodVerifyMessageRepresentative2_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_DeterministicSignatureMessageEncodingMethodVerifyMessageRepresentative2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PK_DeterministicSignatureMessageEncodingMethod::*)(struct CryptoPP*))&CryptoPP::PK_DeterministicSignatureMessageEncodingMethod::VerifyMessageRepresentative) },
        {   (LPVOID)0x14058fed0L,
            (LPVOID *)&CryptoPP__PK_DeterministicSignatureMessageEncodingMethoddtor_PK_DeterministicSignatureMessageEncodingMethod3_user,
            (LPVOID *)&CryptoPP__PK_DeterministicSignatureMessageEncodingMethoddtor_PK_DeterministicSignatureMessageEncodingMethod3_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_DeterministicSignatureMessageEncodingMethoddtor_PK_DeterministicSignatureMessageEncodingMethod3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PK_DeterministicSignatureMessageEncodingMethod::*)())&CryptoPP::PK_DeterministicSignatureMessageEncodingMethod::dtor_PK_DeterministicSignatureMessageEncodingMethod) },
        
        {   (LPVOID)0x140630320L,
            (LPVOID *)&CryptoPP__DL_SignatureMessageEncodingMethod_DSAComputeMessageRepresentative1_user,
            (LPVOID *)&CryptoPP__DL_SignatureMessageEncodingMethod_DSAComputeMessageRepresentative1_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_SignatureMessageEncodingMethod_DSAComputeMessageRepresentative1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DL_SignatureMessageEncodingMethod_DSA::*)(int64_t, int, int, uint8_t*, struct CryptoPP*))&CryptoPP::DL_SignatureMessageEncodingMethod_DSA::ComputeMessageRepresentative) },
        {   (LPVOID)0x14058f7e0L,
            (LPVOID *)&CryptoPP__DL_SignatureMessageEncodingMethod_DSActor_DL_SignatureMessageEncodingMethod_DSA2_user,
            (LPVOID *)&CryptoPP__DL_SignatureMessageEncodingMethod_DSActor_DL_SignatureMessageEncodingMethod_DSA2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_SignatureMessageEncodingMethod_DSActor_DL_SignatureMessageEncodingMethod_DSA2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DL_SignatureMessageEncodingMethod_DSA::*)())&CryptoPP::DL_SignatureMessageEncodingMethod_DSA::ctor_DL_SignatureMessageEncodingMethod_DSA) },
        {   (LPVOID)0x14058feb0L,
            (LPVOID *)&CryptoPP__DL_SignatureMessageEncodingMethod_DSAdtor_DL_SignatureMessageEncodingMethod_DSA3_user,
            (LPVOID *)&CryptoPP__DL_SignatureMessageEncodingMethod_DSAdtor_DL_SignatureMessageEncodingMethod_DSA3_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_SignatureMessageEncodingMethod_DSAdtor_DL_SignatureMessageEncodingMethod_DSA3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DL_SignatureMessageEncodingMethod_DSA::*)())&CryptoPP::DL_SignatureMessageEncodingMethod_DSA::dtor_DL_SignatureMessageEncodingMethod_DSA) },
        
        {   (LPVOID)0x140623fc0L,
            (LPVOID *)&CryptoPP__ArrayXorSinkctor_ArrayXorSink1_user,
            (LPVOID *)&CryptoPP__ArrayXorSinkctor_ArrayXorSink1_next,
            (LPVOID)cast_pointer_function(CryptoPP__ArrayXorSinkctor_ArrayXorSink1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ArrayXorSink::*)(uint8_t*, uint64_t))&CryptoPP::ArrayXorSink::ctor_ArrayXorSink) },
        {   (LPVOID)0x140624010L,
            (LPVOID *)&CryptoPP__ArrayXorSinkCreatePutSpace2_user,
            (LPVOID *)&CryptoPP__ArrayXorSinkCreatePutSpace2_next,
            (LPVOID)cast_pointer_function(CryptoPP__ArrayXorSinkCreatePutSpace2_wrapper),
            (LPVOID)cast_pointer_function((uint8_t*(CryptoPP::ArrayXorSink::*)(uint64_t*))&CryptoPP::ArrayXorSink::CreatePutSpace) },
        {   (LPVOID)0x1405fb8b0L,
            (LPVOID *)&CryptoPP__ArrayXorSinkPut23_user,
            (LPVOID *)&CryptoPP__ArrayXorSinkPut23_next,
            (LPVOID)cast_pointer_function(CryptoPP__ArrayXorSinkPut23_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::ArrayXorSink::*)(uint8_t*, uint64_t, int, bool))&CryptoPP::ArrayXorSink::Put2) },
        {   (LPVOID)0x140624080L,
            (LPVOID *)&CryptoPP__ArrayXorSinkdtor_ArrayXorSink4_user,
            (LPVOID *)&CryptoPP__ArrayXorSinkdtor_ArrayXorSink4_next,
            (LPVOID)cast_pointer_function(CryptoPP__ArrayXorSinkdtor_ArrayXorSink4_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ArrayXorSink::*)())&CryptoPP::ArrayXorSink::dtor_ArrayXorSink) },
        
        {   (LPVOID)0x1405ff330L,
            (LPVOID *)&CryptoPP__ByteArrayParameterctor_ByteArrayParameter1_user,
            (LPVOID *)&CryptoPP__ByteArrayParameterctor_ByteArrayParameter1_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteArrayParameterctor_ByteArrayParameter1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ByteArrayParameter::*)(uint8_t*, unsigned int))&CryptoPP::ByteArrayParameter::ctor_ByteArrayParameter) },
        {   (LPVOID)0x1405ff360L,
            (LPVOID *)&CryptoPP__ByteArrayParameterbegin2_user,
            (LPVOID *)&CryptoPP__ByteArrayParameterbegin2_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteArrayParameterbegin2_wrapper),
            (LPVOID)cast_pointer_function((uint8_t*(CryptoPP::ByteArrayParameter::*)())&CryptoPP::ByteArrayParameter::begin) },
        {   (LPVOID)0x1405ff370L,
            (LPVOID *)&CryptoPP__ByteArrayParametersize3_user,
            (LPVOID *)&CryptoPP__ByteArrayParametersize3_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteArrayParametersize3_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::ByteArrayParameter::*)())&CryptoPP::ByteArrayParameter::size) },
        
        {   (LPVOID)0x14044e9e0L,
            (LPVOID *)&CryptoPP__InputRejectingChannelMessageSeriesEnd2_user,
            (LPVOID *)&CryptoPP__InputRejectingChannelMessageSeriesEnd2_next,
            (LPVOID)cast_pointer_function(CryptoPP__InputRejectingChannelMessageSeriesEnd2_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::InputRejecting<CryptoPP::Filter>::*)(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, int, bool))&CryptoPP::InputRejecting<CryptoPP::Filter>::ChannelMessageSeriesEnd) },
        {   (LPVOID)0x14044e970L,
            (LPVOID *)&CryptoPP__InputRejectingChannelPut24_user,
            (LPVOID *)&CryptoPP__InputRejectingChannelPut24_next,
            (LPVOID)cast_pointer_function(CryptoPP__InputRejectingChannelPut24_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::InputRejecting<CryptoPP::Filter>::*)(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, char*, uint64_t, int, bool))&CryptoPP::InputRejecting<CryptoPP::Filter>::ChannelPut2) },
        {   (LPVOID)0x140453690L,
            (LPVOID *)&CryptoPP__InputRejectingctor_InputRejecting6_user,
            (LPVOID *)&CryptoPP__InputRejectingctor_InputRejecting6_next,
            (LPVOID)cast_pointer_function(CryptoPP__InputRejectingctor_InputRejecting6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::InputRejecting<CryptoPP::Filter>::*)())&CryptoPP::InputRejecting<CryptoPP::Filter>::ctor_InputRejecting) },
        {   (LPVOID)0x14044e8f0L,
            (LPVOID *)&CryptoPP__InputRejectingIsolatedFlush8_user,
            (LPVOID *)&CryptoPP__InputRejectingIsolatedFlush8_next,
            (LPVOID)cast_pointer_function(CryptoPP__InputRejectingIsolatedFlush8_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::InputRejecting<CryptoPP::Filter>::*)(bool, bool))&CryptoPP::InputRejecting<CryptoPP::Filter>::IsolatedFlush) },
        {   (LPVOID)0x14044e910L,
            (LPVOID *)&CryptoPP__InputRejectingIsolatedMessageSeriesEnd10_user,
            (LPVOID *)&CryptoPP__InputRejectingIsolatedMessageSeriesEnd10_next,
            (LPVOID)cast_pointer_function(CryptoPP__InputRejectingIsolatedMessageSeriesEnd10_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::InputRejecting<CryptoPP::Filter>::*)(bool))&CryptoPP::InputRejecting<CryptoPP::Filter>::IsolatedMessageSeriesEnd) },
        {   (LPVOID)0x14044e880L,
            (LPVOID *)&CryptoPP__InputRejectingPut212_user,
            (LPVOID *)&CryptoPP__InputRejectingPut212_next,
            (LPVOID)cast_pointer_function(CryptoPP__InputRejectingPut212_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::InputRejecting<CryptoPP::Filter>::*)(char*, uint64_t, int, bool))&CryptoPP::InputRejecting<CryptoPP::Filter>::Put2) },
        {   (LPVOID)0x14044d810L,
            (LPVOID *)&CryptoPP__InputRejectingdtor_InputRejecting14_user,
            (LPVOID *)&CryptoPP__InputRejectingdtor_InputRejecting14_next,
            (LPVOID)cast_pointer_function(CryptoPP__InputRejectingdtor_InputRejecting14_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::InputRejecting<CryptoPP::Filter>::*)())&CryptoPP::InputRejecting<CryptoPP::Filter>::dtor_InputRejecting) },
        
        {   (LPVOID)0x140454650L,
            (LPVOID *)&CryptoPP__InputRejecting__InputRejectedctor_InputRejected2_user,
            (LPVOID *)&CryptoPP__InputRejecting__InputRejectedctor_InputRejected2_next,
            (LPVOID)cast_pointer_function(CryptoPP__InputRejecting__InputRejectedctor_InputRejected2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::*)(struct CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected*))&CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::ctor_InputRejected) },
        {   (LPVOID)0x14045ac40L,
            (LPVOID *)&CryptoPP__InputRejecting__InputRejectedctor_InputRejected4_user,
            (LPVOID *)&CryptoPP__InputRejecting__InputRejectedctor_InputRejected4_next,
            (LPVOID)cast_pointer_function(CryptoPP__InputRejecting__InputRejectedctor_InputRejected4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::*)())&CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::ctor_InputRejected) },
        {   (LPVOID)0x140454610L,
            (LPVOID *)&CryptoPP__InputRejecting__InputRejecteddtor_InputRejected9_user,
            (LPVOID *)&CryptoPP__InputRejecting__InputRejecteddtor_InputRejected9_next,
            (LPVOID)cast_pointer_function(CryptoPP__InputRejecting__InputRejecteddtor_InputRejected9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::*)())&CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::dtor_InputRejected) },
        
        {   (LPVOID)0x14044d020L,
            (LPVOID *)&CryptoPP__SourcePumpAll2_user,
            (LPVOID *)&CryptoPP__SourcePumpAll2_next,
            (LPVOID)cast_pointer_function(CryptoPP__SourcePumpAll2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Source::*)())&CryptoPP::Source::PumpAll) },
        {   (LPVOID)0x1405fe0a0L,
            (LPVOID *)&CryptoPP__SourcePumpAll23_user,
            (LPVOID *)&CryptoPP__SourcePumpAll23_next,
            (LPVOID)cast_pointer_function(CryptoPP__SourcePumpAll23_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::Source::*)(bool))&CryptoPP::Source::PumpAll2) },
        {   (LPVOID)0x1404535e0L,
            (LPVOID *)&CryptoPP__Sourcector_Source5_user,
            (LPVOID *)&CryptoPP__Sourcector_Source5_next,
            (LPVOID)cast_pointer_function(CryptoPP__Sourcector_Source5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Source::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::Source::ctor_Source) },
        {   (LPVOID)0x14044cfb0L,
            (LPVOID *)&CryptoPP__SourceSourceInitialize7_user,
            (LPVOID *)&CryptoPP__SourceSourceInitialize7_next,
            (LPVOID)cast_pointer_function(CryptoPP__SourceSourceInitialize7_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Source::*)(bool, struct CryptoPP::NameValuePairs*))&CryptoPP::Source::SourceInitialize) },
        {   (LPVOID)0x14044d7d0L,
            (LPVOID *)&CryptoPP__Sourcedtor_Source9_user,
            (LPVOID *)&CryptoPP__Sourcedtor_Source9_next,
            (LPVOID)cast_pointer_function(CryptoPP__Sourcedtor_Source9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Source::*)())&CryptoPP::Source::dtor_Source) },
        
        {   (LPVOID)0x1405796a0L,
            (LPVOID *)&CryptoPP__StringSourcector_StringSource1_user,
            (LPVOID *)&CryptoPP__StringSourcector_StringSource1_next,
            (LPVOID)cast_pointer_function(CryptoPP__StringSourcector_StringSource1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::StringSource::*)(char*, bool, struct CryptoPP::BufferedTransformation*))&CryptoPP::StringSource::ctor_StringSource) },
        {   (LPVOID)0x140579990L,
            (LPVOID *)&CryptoPP__StringSourcedtor_StringSource2_user,
            (LPVOID *)&CryptoPP__StringSourcedtor_StringSource2_next,
            (LPVOID)cast_pointer_function(CryptoPP__StringSourcedtor_StringSource2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::StringSource::*)())&CryptoPP::StringSource::dtor_StringSource) },
        
        {   (LPVOID)0x14055d120L,
            (LPVOID *)&CryptoPP__ECB_OneWayctor_ECB_OneWay1_user,
            (LPVOID *)&CryptoPP__ECB_OneWayctor_ECB_OneWay1_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECB_OneWayctor_ECB_OneWay1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ECB_OneWay::*)())&CryptoPP::ECB_OneWay::ctor_ECB_OneWay) },
        {   (LPVOID)0x14055b260L,
            (LPVOID *)&CryptoPP__ECB_OneWayIVRequirement2_user,
            (LPVOID *)&CryptoPP__ECB_OneWayIVRequirement2_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECB_OneWayIVRequirement2_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::SimpleKeyingInterface::IV_Requirement(CryptoPP::ECB_OneWay::*)())&CryptoPP::ECB_OneWay::IVRequirement) },
        {   (LPVOID)0x14055b270L,
            (LPVOID *)&CryptoPP__ECB_OneWayOptimalBlockSize3_user,
            (LPVOID *)&CryptoPP__ECB_OneWayOptimalBlockSize3_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECB_OneWayOptimalBlockSize3_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::ECB_OneWay::*)())&CryptoPP::ECB_OneWay::OptimalBlockSize) },
        {   (LPVOID)0x14055b2c0L,
            (LPVOID *)&CryptoPP__ECB_OneWayProcessBlocks4_user,
            (LPVOID *)&CryptoPP__ECB_OneWayProcessBlocks4_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECB_OneWayProcessBlocks4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ECB_OneWay::*)(uint8_t*, uint8_t*, uint64_t))&CryptoPP::ECB_OneWay::ProcessBlocks) },
        {   (LPVOID)0x14055b200L,
            (LPVOID *)&CryptoPP__ECB_OneWaySetKey5_user,
            (LPVOID *)&CryptoPP__ECB_OneWaySetKey5_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECB_OneWaySetKey5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ECB_OneWay::*)(uint8_t*, uint64_t, struct CryptoPP::NameValuePairs*))&CryptoPP::ECB_OneWay::SetKey) },
        {   (LPVOID)0x14061c930L,
            (LPVOID *)&CryptoPP__ECB_OneWayStaticAlgorithmName6_user,
            (LPVOID *)&CryptoPP__ECB_OneWayStaticAlgorithmName6_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECB_OneWayStaticAlgorithmName6_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::ECB_OneWay::*)())&CryptoPP::ECB_OneWay::StaticAlgorithmName) },
        {   (LPVOID)0x14055d140L,
            (LPVOID *)&CryptoPP__ECB_OneWaydtor_ECB_OneWay7_user,
            (LPVOID *)&CryptoPP__ECB_OneWaydtor_ECB_OneWay7_next,
            (LPVOID)cast_pointer_function(CryptoPP__ECB_OneWaydtor_ECB_OneWay7_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ECB_OneWay::*)())&CryptoPP::ECB_OneWay::dtor_ECB_OneWay) },
        
        {   (LPVOID)0x140650f30L,
            (LPVOID *)&CryptoPP__LC_RNGGenerateBlock1_user,
            (LPVOID *)&CryptoPP__LC_RNGGenerateBlock1_next,
            (LPVOID)cast_pointer_function(CryptoPP__LC_RNGGenerateBlock1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::LC_RNG::*)(uint8_t*, uint64_t))&CryptoPP::LC_RNG::GenerateBlock) },
        
        {   (LPVOID)0x14054d120L,
            (LPVOID *)&CryptoPP__BERGeneralDecoderctor_BERGeneralDecoder1_user,
            (LPVOID *)&CryptoPP__BERGeneralDecoderctor_BERGeneralDecoder1_next,
            (LPVOID)cast_pointer_function(CryptoPP__BERGeneralDecoderctor_BERGeneralDecoder1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::BERGeneralDecoder::*)(struct CryptoPP::BERGeneralDecoder*, uint8_t))&CryptoPP::BERGeneralDecoder::ctor_BERGeneralDecoder) },
        {   (LPVOID)0x14054d080L,
            (LPVOID *)&CryptoPP__BERGeneralDecoderctor_BERGeneralDecoder2_user,
            (LPVOID *)&CryptoPP__BERGeneralDecoderctor_BERGeneralDecoder2_next,
            (LPVOID)cast_pointer_function(CryptoPP__BERGeneralDecoderctor_BERGeneralDecoder2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::BERGeneralDecoder::*)(struct CryptoPP::BufferedTransformation*, uint8_t))&CryptoPP::BERGeneralDecoder::ctor_BERGeneralDecoder) },
        {   (LPVOID)0x14054d3e0L,
            (LPVOID *)&CryptoPP__BERGeneralDecoderCheckByte3_user,
            (LPVOID *)&CryptoPP__BERGeneralDecoderCheckByte3_next,
            (LPVOID)cast_pointer_function(CryptoPP__BERGeneralDecoderCheckByte3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BERGeneralDecoder::*)(uint8_t))&CryptoPP::BERGeneralDecoder::CheckByte) },
        {   (LPVOID)0x14054d310L,
            (LPVOID *)&CryptoPP__BERGeneralDecoderEndReached4_user,
            (LPVOID *)&CryptoPP__BERGeneralDecoderEndReached4_next,
            (LPVOID)cast_pointer_function(CryptoPP__BERGeneralDecoderEndReached4_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::BERGeneralDecoder::*)())&CryptoPP::BERGeneralDecoder::EndReached) },
        {   (LPVOID)0x14054d1c0L,
            (LPVOID *)&CryptoPP__BERGeneralDecoderInit5_user,
            (LPVOID *)&CryptoPP__BERGeneralDecoderInit5_next,
            (LPVOID)cast_pointer_function(CryptoPP__BERGeneralDecoderInit5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BERGeneralDecoder::*)(uint8_t))&CryptoPP::BERGeneralDecoder::Init) },
        {   (LPVOID)0x14054e290L,
            (LPVOID *)&CryptoPP__BERGeneralDecoderIsDefiniteLength6_user,
            (LPVOID *)&CryptoPP__BERGeneralDecoderIsDefiniteLength6_next,
            (LPVOID)cast_pointer_function(CryptoPP__BERGeneralDecoderIsDefiniteLength6_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::BERGeneralDecoder::*)())&CryptoPP::BERGeneralDecoder::IsDefiniteLength) },
        {   (LPVOID)0x14054d430L,
            (LPVOID *)&CryptoPP__BERGeneralDecoderMessageEnd7_user,
            (LPVOID *)&CryptoPP__BERGeneralDecoderMessageEnd7_next,
            (LPVOID)cast_pointer_function(CryptoPP__BERGeneralDecoderMessageEnd7_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BERGeneralDecoder::*)())&CryptoPP::BERGeneralDecoder::MessageEnd) },
        {   (LPVOID)0x14054d3a0L,
            (LPVOID *)&CryptoPP__BERGeneralDecoderPeekByte8_user,
            (LPVOID *)&CryptoPP__BERGeneralDecoderPeekByte8_next,
            (LPVOID)cast_pointer_function(CryptoPP__BERGeneralDecoderPeekByte8_wrapper),
            (LPVOID)cast_pointer_function((uint8_t(CryptoPP::BERGeneralDecoder::*)())&CryptoPP::BERGeneralDecoder::PeekByte) },
        {   (LPVOID)0x14054d5e0L,
            (LPVOID *)&CryptoPP__BERGeneralDecoderReduceLength9_user,
            (LPVOID *)&CryptoPP__BERGeneralDecoderReduceLength9_next,
            (LPVOID)cast_pointer_function(CryptoPP__BERGeneralDecoderReduceLength9_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::BERGeneralDecoder::*)(uint64_t))&CryptoPP::BERGeneralDecoder::ReduceLength) },
        {   (LPVOID)0x14054e2a0L,
            (LPVOID *)&CryptoPP__BERGeneralDecoderRemainingLength10_user,
            (LPVOID *)&CryptoPP__BERGeneralDecoderRemainingLength10_next,
            (LPVOID)cast_pointer_function(CryptoPP__BERGeneralDecoderRemainingLength10_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::BERGeneralDecoder::*)())&CryptoPP::BERGeneralDecoder::RemainingLength) },
        {   (LPVOID)0x14054e460L,
            (LPVOID *)&CryptoPP__BERGeneralDecoderStoreInitialize11_user,
            (LPVOID *)&CryptoPP__BERGeneralDecoderStoreInitialize11_next,
            (LPVOID)cast_pointer_function(CryptoPP__BERGeneralDecoderStoreInitialize11_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BERGeneralDecoder::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::BERGeneralDecoder::StoreInitialize) },
        {   (LPVOID)0x14054d260L,
            (LPVOID *)&CryptoPP__BERGeneralDecoderdtor_BERGeneralDecoder12_user,
            (LPVOID *)&CryptoPP__BERGeneralDecoderdtor_BERGeneralDecoder12_next,
            (LPVOID)cast_pointer_function(CryptoPP__BERGeneralDecoderdtor_BERGeneralDecoder12_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::BERGeneralDecoder::*)())&CryptoPP::BERGeneralDecoder::dtor_BERGeneralDecoder) },
        
        {   (LPVOID)0x140623020L,
            (LPVOID *)&CryptoPP__TF_VerifierBaseInputSignature1_user,
            (LPVOID *)&CryptoPP__TF_VerifierBaseInputSignature1_next,
            (LPVOID)cast_pointer_function(CryptoPP__TF_VerifierBaseInputSignature1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::TF_VerifierBase::*)(struct CryptoPP::PK_MessageAccumulator*, uint8_t*, uint64_t))&CryptoPP::TF_VerifierBase::InputSignature) },
        {   (LPVOID)0x1406234c0L,
            (LPVOID *)&CryptoPP__TF_VerifierBaseRecoverAndRestart2_user,
            (LPVOID *)&CryptoPP__TF_VerifierBaseRecoverAndRestart2_next,
            (LPVOID)cast_pointer_function(CryptoPP__TF_VerifierBaseRecoverAndRestart2_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::DecodingResult*(CryptoPP::TF_VerifierBase::*)(short, struct CryptoPP::DecodingResult*, uint8_t*))&CryptoPP::TF_VerifierBase::RecoverAndRestart) },
        {   (LPVOID)0x1406232d0L,
            (LPVOID *)&CryptoPP__TF_VerifierBaseVerifyAndRestart3_user,
            (LPVOID *)&CryptoPP__TF_VerifierBaseVerifyAndRestart3_next,
            (LPVOID)cast_pointer_function(CryptoPP__TF_VerifierBaseVerifyAndRestart3_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::TF_VerifierBase::*)(struct CryptoPP::PK_MessageAccumulator*))&CryptoPP::TF_VerifierBase::VerifyAndRestart) },
        
        {   (LPVOID)0x1406063e0L,
            (LPVOID *)&CryptoPP__SHA1InitState1_user,
            (LPVOID *)&CryptoPP__SHA1InitState1_next,
            (LPVOID)cast_pointer_function(CryptoPP__SHA1InitState1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SHA1::*)(unsigned int*))&CryptoPP::SHA1::InitState) },
        {   (LPVOID)0x140464170L,
            (LPVOID *)&CryptoPP__SHA1ctor_SHA13_user,
            (LPVOID *)&CryptoPP__SHA1ctor_SHA13_next,
            (LPVOID)cast_pointer_function(CryptoPP__SHA1ctor_SHA13_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SHA1::*)(struct CryptoPP::SHA1*))&CryptoPP::SHA1::ctor_SHA1) },
        {   (LPVOID)0x140463e80L,
            (LPVOID *)&CryptoPP__SHA1ctor_SHA15_user,
            (LPVOID *)&CryptoPP__SHA1ctor_SHA15_next,
            (LPVOID)cast_pointer_function(CryptoPP__SHA1ctor_SHA15_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SHA1::*)())&CryptoPP::SHA1::ctor_SHA1) },
        {   (LPVOID)0x140464160L,
            (LPVOID *)&CryptoPP__SHA1StaticAlgorithmName7_user,
            (LPVOID *)&CryptoPP__SHA1StaticAlgorithmName7_next,
            (LPVOID)cast_pointer_function(CryptoPP__SHA1StaticAlgorithmName7_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::SHA1::*)())&CryptoPP::SHA1::StaticAlgorithmName) },
        {   (LPVOID)0x140606430L,
            (LPVOID *)&CryptoPP__SHA1Transform8_user,
            (LPVOID *)&CryptoPP__SHA1Transform8_next,
            (LPVOID)cast_pointer_function(CryptoPP__SHA1Transform8_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SHA1::*)(unsigned int*, unsigned int*))&CryptoPP::SHA1::Transform) },
        {   (LPVOID)0x140463d30L,
            (LPVOID *)&CryptoPP__SHA1dtor_SHA113_user,
            (LPVOID *)&CryptoPP__SHA1dtor_SHA113_next,
            (LPVOID)cast_pointer_function(CryptoPP__SHA1dtor_SHA113_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SHA1::*)())&CryptoPP::SHA1::dtor_SHA1) },
        
        {   (LPVOID)0x140559980L,
            (LPVOID *)&CryptoPP__DL_Algorithm_GDSASign1_user,
            (LPVOID *)&CryptoPP__DL_Algorithm_GDSASign1_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_Algorithm_GDSASign1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DL_Algorithm_GDSA<CryptoPP::ECPPoint>::*)(struct CryptoPP::Integer*, int64_t))&CryptoPP::DL_Algorithm_GDSA<CryptoPP::ECPPoint>::Sign) },
        {   (LPVOID)0x140559c00L,
            (LPVOID *)&CryptoPP__DL_Algorithm_GDSAVerify2_user,
            (LPVOID *)&CryptoPP__DL_Algorithm_GDSAVerify2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_Algorithm_GDSAVerify2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DL_Algorithm_GDSA<CryptoPP::ECPPoint>::*)(struct CryptoPP::Integer*))&CryptoPP::DL_Algorithm_GDSA<CryptoPP::ECPPoint>::Verify) },
        
        {   (LPVOID)0x1405fdaf0L,
            (LPVOID *)&CryptoPP__SignatureVerificationFilterFirstPut1_user,
            (LPVOID *)&CryptoPP__SignatureVerificationFilterFirstPut1_next,
            (LPVOID)cast_pointer_function(CryptoPP__SignatureVerificationFilterFirstPut1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SignatureVerificationFilter::*)(uint8_t*))&CryptoPP::SignatureVerificationFilter::FirstPut) },
        {   (LPVOID)0x1405fd9b0L,
            (LPVOID *)&CryptoPP__SignatureVerificationFilterInitializeDerivedAndReturnNewSizes2_user,
            (LPVOID *)&CryptoPP__SignatureVerificationFilterInitializeDerivedAndReturnNewSizes2_next,
            (LPVOID)cast_pointer_function(CryptoPP__SignatureVerificationFilterInitializeDerivedAndReturnNewSizes2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SignatureVerificationFilter::*)(struct CryptoPP::NameValuePairs*, uint64_t*, uint64_t*, uint64_t*))&CryptoPP::SignatureVerificationFilter::InitializeDerivedAndReturnNewSizes) },
        {   (LPVOID)0x1405fdd70L,
            (LPVOID *)&CryptoPP__SignatureVerificationFilterLastPut3_user,
            (LPVOID *)&CryptoPP__SignatureVerificationFilterLastPut3_next,
            (LPVOID)cast_pointer_function(CryptoPP__SignatureVerificationFilterLastPut3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SignatureVerificationFilter::*)(uint8_t*, uint64_t))&CryptoPP::SignatureVerificationFilter::LastPut) },
        {   (LPVOID)0x1405fdce0L,
            (LPVOID *)&CryptoPP__SignatureVerificationFilterNextPutMultiple4_user,
            (LPVOID *)&CryptoPP__SignatureVerificationFilterNextPutMultiple4_next,
            (LPVOID)cast_pointer_function(CryptoPP__SignatureVerificationFilterNextPutMultiple4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SignatureVerificationFilter::*)(uint8_t*, uint64_t))&CryptoPP::SignatureVerificationFilter::NextPutMultiple) },
        {   (LPVOID)0x1405fd840L,
            (LPVOID *)&CryptoPP__SignatureVerificationFilterctor_SignatureVerificationFilter5_user,
            (LPVOID *)&CryptoPP__SignatureVerificationFilterctor_SignatureVerificationFilter5_next,
            (LPVOID)cast_pointer_function(CryptoPP__SignatureVerificationFilterctor_SignatureVerificationFilter5_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::SignatureVerificationFilter::*)(struct CryptoPP::PK_Verifier*, struct CryptoPP::BufferedTransformation*, unsigned int))&CryptoPP::SignatureVerificationFilter::ctor_SignatureVerificationFilter) },
        {   (LPVOID)0x1405ff970L,
            (LPVOID *)&CryptoPP__SignatureVerificationFilterdtor_SignatureVerificationFilter6_user,
            (LPVOID *)&CryptoPP__SignatureVerificationFilterdtor_SignatureVerificationFilter6_next,
            (LPVOID)cast_pointer_function(CryptoPP__SignatureVerificationFilterdtor_SignatureVerificationFilter6_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::SignatureVerificationFilter::*)())&CryptoPP::SignatureVerificationFilter::dtor_SignatureVerificationFilter) },
        
        {   (LPVOID)0x1405ffb20L,
            (LPVOID *)&CryptoPP__SignatureVerificationFilter__SignatureVerificationFailedctor_SignatureVerificationFailed1_user,
            (LPVOID *)&CryptoPP__SignatureVerificationFilter__SignatureVerificationFailedctor_SignatureVerificationFailed1_next,
            (LPVOID)cast_pointer_function(CryptoPP__SignatureVerificationFilter__SignatureVerificationFailedctor_SignatureVerificationFailed1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::SignatureVerificationFilter::SignatureVerificationFailed::*)(struct CryptoPP::SignatureVerificationFilter::SignatureVerificationFailed*))&CryptoPP::SignatureVerificationFilter::SignatureVerificationFailed::ctor_SignatureVerificationFailed) },
        {   (LPVOID)0x1405ffa00L,
            (LPVOID *)&CryptoPP__SignatureVerificationFilter__SignatureVerificationFailedctor_SignatureVerificationFailed2_user,
            (LPVOID *)&CryptoPP__SignatureVerificationFilter__SignatureVerificationFailedctor_SignatureVerificationFailed2_next,
            (LPVOID)cast_pointer_function(CryptoPP__SignatureVerificationFilter__SignatureVerificationFailedctor_SignatureVerificationFailed2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::SignatureVerificationFilter::SignatureVerificationFailed::*)())&CryptoPP::SignatureVerificationFilter::SignatureVerificationFailed::ctor_SignatureVerificationFailed) },
        {   (LPVOID)0x1405ffb00L,
            (LPVOID *)&CryptoPP__SignatureVerificationFilter__SignatureVerificationFaileddtor_SignatureVerificationFailed3_user,
            (LPVOID *)&CryptoPP__SignatureVerificationFilter__SignatureVerificationFaileddtor_SignatureVerificationFailed3_next,
            (LPVOID)cast_pointer_function(CryptoPP__SignatureVerificationFilter__SignatureVerificationFaileddtor_SignatureVerificationFailed3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::SignatureVerificationFilter::SignatureVerificationFailed::*)())&CryptoPP::SignatureVerificationFilter::SignatureVerificationFailed::dtor_SignatureVerificationFailed) },
        
        {   (LPVOID)0x140463960L,
            (LPVOID *)&CryptoPP__ConstByteArrayParameterAssign2_user,
            (LPVOID *)&CryptoPP__ConstByteArrayParameterAssign2_next,
            (LPVOID)cast_pointer_function(CryptoPP__ConstByteArrayParameterAssign2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ConstByteArrayParameter::*)(char*, uint64_t, bool))&CryptoPP::ConstByteArrayParameter::Assign) },
        {   (LPVOID)0x1405950b0L,
            (LPVOID *)&CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter3_user,
            (LPVOID *)&CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter3_next,
            (LPVOID)cast_pointer_function(CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ConstByteArrayParameter::*)(struct CryptoPP::ConstByteArrayParameter*))&CryptoPP::ConstByteArrayParameter::ctor_ConstByteArrayParameter) },
        {   (LPVOID)0x140463860L,
            (LPVOID *)&CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter5_user,
            (LPVOID *)&CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter5_next,
            (LPVOID)cast_pointer_function(CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ConstByteArrayParameter::*)(char*, bool))&CryptoPP::ConstByteArrayParameter::ctor_ConstByteArrayParameter) },
        {   (LPVOID)0x1405ef1b0L,
            (LPVOID *)&CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter6_user,
            (LPVOID *)&CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter6_next,
            (LPVOID)cast_pointer_function(CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter6_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ConstByteArrayParameter::*)(uint8_t*, uint64_t, bool))&CryptoPP::ConstByteArrayParameter::ctor_ConstByteArrayParameter) },
        {   (LPVOID)0x140463a10L,
            (LPVOID *)&CryptoPP__ConstByteArrayParameterbegin8_user,
            (LPVOID *)&CryptoPP__ConstByteArrayParameterbegin8_next,
            (LPVOID)cast_pointer_function(CryptoPP__ConstByteArrayParameterbegin8_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::ConstByteArrayParameter::*)())&CryptoPP::ConstByteArrayParameter::begin) },
        {   (LPVOID)0x140463a90L,
            (LPVOID *)&CryptoPP__ConstByteArrayParametersize10_user,
            (LPVOID *)&CryptoPP__ConstByteArrayParametersize10_next,
            (LPVOID)cast_pointer_function(CryptoPP__ConstByteArrayParametersize10_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::ConstByteArrayParameter::*)())&CryptoPP::ConstByteArrayParameter::size) },
        {   (LPVOID)0x140463b10L,
            (LPVOID *)&CryptoPP__ConstByteArrayParameterdtor_ConstByteArrayParameter12_user,
            (LPVOID *)&CryptoPP__ConstByteArrayParameterdtor_ConstByteArrayParameter12_next,
            (LPVOID)cast_pointer_function(CryptoPP__ConstByteArrayParameterdtor_ConstByteArrayParameter12_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ConstByteArrayParameter::*)())&CryptoPP::ConstByteArrayParameter::dtor_ConstByteArrayParameter) },
        
        {   (LPVOID)0x1406236e0L,
            (LPVOID *)&CryptoPP__TF_DecryptorBaseDecrypt1_user,
            (LPVOID *)&CryptoPP__TF_DecryptorBaseDecrypt1_next,
            (LPVOID)cast_pointer_function(CryptoPP__TF_DecryptorBaseDecrypt1_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::DecodingResult*(CryptoPP::TF_DecryptorBase::*)(struct CryptoPP::DecodingResult*, struct CryptoPP::RandomNumberGenerator*, uint8_t*, uint64_t, uint8_t*, struct CryptoPP::NameValuePairs*))&CryptoPP::TF_DecryptorBase::Decrypt) },
        
        {   (LPVOID)0x1405fd100L,
            (LPVOID *)&CryptoPP__HashVerificationFilterFirstPut1_user,
            (LPVOID *)&CryptoPP__HashVerificationFilterFirstPut1_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashVerificationFilterFirstPut1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::HashVerificationFilter::*)(uint8_t*))&CryptoPP::HashVerificationFilter::FirstPut) },
        {   (LPVOID)0x1405fcec0L,
            (LPVOID *)&CryptoPP__HashVerificationFilterctor_HashVerificationFilter2_user,
            (LPVOID *)&CryptoPP__HashVerificationFilterctor_HashVerificationFilter2_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashVerificationFilterctor_HashVerificationFilter2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::HashVerificationFilter::*)(struct CryptoPP::HashTransformation*, struct CryptoPP::BufferedTransformation*, unsigned int))&CryptoPP::HashVerificationFilter::ctor_HashVerificationFilter) },
        {   (LPVOID)0x1405fcff0L,
            (LPVOID *)&CryptoPP__HashVerificationFilterInitializeDerivedAndReturnNewSizes3_user,
            (LPVOID *)&CryptoPP__HashVerificationFilterInitializeDerivedAndReturnNewSizes3_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashVerificationFilterInitializeDerivedAndReturnNewSizes3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::HashVerificationFilter::*)(struct CryptoPP::NameValuePairs*, uint64_t*, uint64_t*, uint64_t*))&CryptoPP::HashVerificationFilter::InitializeDerivedAndReturnNewSizes) },
        {   (LPVOID)0x1405fd290L,
            (LPVOID *)&CryptoPP__HashVerificationFilterLastPut4_user,
            (LPVOID *)&CryptoPP__HashVerificationFilterLastPut4_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashVerificationFilterLastPut4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::HashVerificationFilter::*)(uint8_t*, uint64_t))&CryptoPP::HashVerificationFilter::LastPut) },
        {   (LPVOID)0x1405fd210L,
            (LPVOID *)&CryptoPP__HashVerificationFilterNextPutMultiple5_user,
            (LPVOID *)&CryptoPP__HashVerificationFilterNextPutMultiple5_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashVerificationFilterNextPutMultiple5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::HashVerificationFilter::*)(uint8_t*, uint64_t))&CryptoPP::HashVerificationFilter::NextPutMultiple) },
        {   (LPVOID)0x1405ff6e0L,
            (LPVOID *)&CryptoPP__HashVerificationFilterdtor_HashVerificationFilter6_user,
            (LPVOID *)&CryptoPP__HashVerificationFilterdtor_HashVerificationFilter6_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashVerificationFilterdtor_HashVerificationFilter6_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::HashVerificationFilter::*)())&CryptoPP::HashVerificationFilter::dtor_HashVerificationFilter) },
        
        {   (LPVOID)0x1405ff880L,
            (LPVOID *)&CryptoPP__HashVerificationFilter__HashVerificationFailedctor_HashVerificationFailed1_user,
            (LPVOID *)&CryptoPP__HashVerificationFilter__HashVerificationFailedctor_HashVerificationFailed1_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashVerificationFilter__HashVerificationFailedctor_HashVerificationFailed1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::HashVerificationFilter::HashVerificationFailed::*)(struct CryptoPP::HashVerificationFilter::HashVerificationFailed*))&CryptoPP::HashVerificationFilter::HashVerificationFailed::ctor_HashVerificationFailed) },
        {   (LPVOID)0x1405ff760L,
            (LPVOID *)&CryptoPP__HashVerificationFilter__HashVerificationFailedctor_HashVerificationFailed2_user,
            (LPVOID *)&CryptoPP__HashVerificationFilter__HashVerificationFailedctor_HashVerificationFailed2_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashVerificationFilter__HashVerificationFailedctor_HashVerificationFailed2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::HashVerificationFilter::HashVerificationFailed::*)())&CryptoPP::HashVerificationFilter::HashVerificationFailed::ctor_HashVerificationFailed) },
        {   (LPVOID)0x1405ff860L,
            (LPVOID *)&CryptoPP__HashVerificationFilter__HashVerificationFaileddtor_HashVerificationFailed3_user,
            (LPVOID *)&CryptoPP__HashVerificationFilter__HashVerificationFaileddtor_HashVerificationFailed3_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashVerificationFilter__HashVerificationFaileddtor_HashVerificationFailed3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::HashVerificationFilter::HashVerificationFailed::*)())&CryptoPP::HashVerificationFilter::HashVerificationFailed::dtor_HashVerificationFailed) },
        
        {   (LPVOID)0x140588bd0L,
            (LPVOID *)&CryptoPP__AutoSeededX917RNGReseed1_user,
            (LPVOID *)&CryptoPP__AutoSeededX917RNGReseed1_next,
            (LPVOID)cast_pointer_function(CryptoPP__AutoSeededX917RNGReseed1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::AutoSeededX917RNG<CryptoPP::Rijndael>::*)())&CryptoPP::AutoSeededX917RNG<CryptoPP::Rijndael>::Reseed) },
        
        {   (LPVOID)0x14054e580L,
            (LPVOID *)&CryptoPP__BERSequenceDecoderctor_BERSequenceDecoder1_user,
            (LPVOID *)&CryptoPP__BERSequenceDecoderctor_BERSequenceDecoder1_next,
            (LPVOID)cast_pointer_function(CryptoPP__BERSequenceDecoderctor_BERSequenceDecoder1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::BERSequenceDecoder::*)(struct CryptoPP::BERSequenceDecoder*, uint8_t))&CryptoPP::BERSequenceDecoder::ctor_BERSequenceDecoder) },
        {   (LPVOID)0x14054e520L,
            (LPVOID *)&CryptoPP__BERSequenceDecoderctor_BERSequenceDecoder2_user,
            (LPVOID *)&CryptoPP__BERSequenceDecoderctor_BERSequenceDecoder2_next,
            (LPVOID)cast_pointer_function(CryptoPP__BERSequenceDecoderctor_BERSequenceDecoder2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::BERSequenceDecoder::*)(struct CryptoPP::BufferedTransformation*, uint8_t))&CryptoPP::BERSequenceDecoder::ctor_BERSequenceDecoder) },
        {   (LPVOID)0x14054e620L,
            (LPVOID *)&CryptoPP__BERSequenceDecoderdtor_BERSequenceDecoder3_user,
            (LPVOID *)&CryptoPP__BERSequenceDecoderdtor_BERSequenceDecoder3_next,
            (LPVOID)cast_pointer_function(CryptoPP__BERSequenceDecoderdtor_BERSequenceDecoder3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::BERSequenceDecoder::*)())&CryptoPP::BERSequenceDecoder::dtor_BERSequenceDecoder) },
        
        {   (LPVOID)0x14055d220L,
            (LPVOID *)&CryptoPP__CBC_CTS_Encryptionctor_CBC_CTS_Encryption1_user,
            (LPVOID *)&CryptoPP__CBC_CTS_Encryptionctor_CBC_CTS_Encryption1_next,
            (LPVOID)cast_pointer_function(CryptoPP__CBC_CTS_Encryptionctor_CBC_CTS_Encryption1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::CBC_CTS_Encryption::*)())&CryptoPP::CBC_CTS_Encryption::ctor_CBC_CTS_Encryption) },
        {   (LPVOID)0x14055b700L,
            (LPVOID *)&CryptoPP__CBC_CTS_EncryptionMinLastBlockSize2_user,
            (LPVOID *)&CryptoPP__CBC_CTS_EncryptionMinLastBlockSize2_next,
            (LPVOID)cast_pointer_function(CryptoPP__CBC_CTS_EncryptionMinLastBlockSize2_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::CBC_CTS_Encryption::*)())&CryptoPP::CBC_CTS_Encryption::MinLastBlockSize) },
        {   (LPVOID)0x140619290L,
            (LPVOID *)&CryptoPP__CBC_CTS_EncryptionProcessLastBlock3_user,
            (LPVOID *)&CryptoPP__CBC_CTS_EncryptionProcessLastBlock3_next,
            (LPVOID)cast_pointer_function(CryptoPP__CBC_CTS_EncryptionProcessLastBlock3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CBC_CTS_Encryption::*)(uint8_t*, uint8_t*, uint64_t))&CryptoPP::CBC_CTS_Encryption::ProcessLastBlock) },
        {   (LPVOID)0x14055b720L,
            (LPVOID *)&CryptoPP__CBC_CTS_EncryptionUncheckedSetKey4_user,
            (LPVOID *)&CryptoPP__CBC_CTS_EncryptionUncheckedSetKey4_next,
            (LPVOID)cast_pointer_function(CryptoPP__CBC_CTS_EncryptionUncheckedSetKey4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CBC_CTS_Encryption::*)(uint8_t*, unsigned int, struct CryptoPP::NameValuePairs*))&CryptoPP::CBC_CTS_Encryption::UncheckedSetKey) },
        {   (LPVOID)0x14055d240L,
            (LPVOID *)&CryptoPP__CBC_CTS_Encryptiondtor_CBC_CTS_Encryption5_user,
            (LPVOID *)&CryptoPP__CBC_CTS_Encryptiondtor_CBC_CTS_Encryption5_next,
            (LPVOID)cast_pointer_function(CryptoPP__CBC_CTS_Encryptiondtor_CBC_CTS_Encryption5_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::CBC_CTS_Encryption::*)())&CryptoPP::CBC_CTS_Encryption::dtor_CBC_CTS_Encryption) },
        
        {   (LPVOID)0x14055d2a0L,
            (LPVOID *)&CryptoPP__CBC_CTS_Decryptionctor_CBC_CTS_Decryption1_user,
            (LPVOID *)&CryptoPP__CBC_CTS_Decryptionctor_CBC_CTS_Decryption1_next,
            (LPVOID)cast_pointer_function(CryptoPP__CBC_CTS_Decryptionctor_CBC_CTS_Decryption1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::CBC_CTS_Decryption::*)())&CryptoPP::CBC_CTS_Decryption::ctor_CBC_CTS_Decryption) },
        {   (LPVOID)0x14055b8e0L,
            (LPVOID *)&CryptoPP__CBC_CTS_DecryptionMinLastBlockSize2_user,
            (LPVOID *)&CryptoPP__CBC_CTS_DecryptionMinLastBlockSize2_next,
            (LPVOID)cast_pointer_function(CryptoPP__CBC_CTS_DecryptionMinLastBlockSize2_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::CBC_CTS_Decryption::*)())&CryptoPP::CBC_CTS_Decryption::MinLastBlockSize) },
        {   (LPVOID)0x140619680L,
            (LPVOID *)&CryptoPP__CBC_CTS_DecryptionProcessLastBlock3_user,
            (LPVOID *)&CryptoPP__CBC_CTS_DecryptionProcessLastBlock3_next,
            (LPVOID)cast_pointer_function(CryptoPP__CBC_CTS_DecryptionProcessLastBlock3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::CBC_CTS_Decryption::*)(uint8_t*, uint8_t*, uint64_t))&CryptoPP::CBC_CTS_Decryption::ProcessLastBlock) },
        {   (LPVOID)0x14055d2c0L,
            (LPVOID *)&CryptoPP__CBC_CTS_Decryptiondtor_CBC_CTS_Decryption4_user,
            (LPVOID *)&CryptoPP__CBC_CTS_Decryptiondtor_CBC_CTS_Decryption4_next,
            (LPVOID)cast_pointer_function(CryptoPP__CBC_CTS_Decryptiondtor_CBC_CTS_Decryption4_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::CBC_CTS_Decryption::*)())&CryptoPP::CBC_CTS_Decryption::dtor_CBC_CTS_Decryption) },
        
        {   (LPVOID)0x140581920L,
            (LPVOID *)&CryptoPP__GF2NPPClone1_user,
            (LPVOID *)&CryptoPP__GF2NPPClone1_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NPPClone1_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::GF2NP*(CryptoPP::GF2NPP::*)())&CryptoPP::GF2NPP::Clone) },
        {   (LPVOID)0x14062b780L,
            (LPVOID *)&CryptoPP__GF2NPPDEREncode2_user,
            (LPVOID *)&CryptoPP__GF2NPPDEREncode2_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NPPDEREncode2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::GF2NPP::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::GF2NPP::DEREncode) },
        {   (LPVOID)0x1405819e0L,
            (LPVOID *)&CryptoPP__GF2NPPctor_GF2NPP3_user,
            (LPVOID *)&CryptoPP__GF2NPPctor_GF2NPP3_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NPPctor_GF2NPP3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::GF2NPP::*)(struct CryptoPP::GF2NPP*))&CryptoPP::GF2NPP::ctor_GF2NPP) },
        {   (LPVOID)0x1405816a0L,
            (LPVOID *)&CryptoPP__GF2NPPctor_GF2NPP4_user,
            (LPVOID *)&CryptoPP__GF2NPPctor_GF2NPP4_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NPPctor_GF2NPP4_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::GF2NPP::*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))&CryptoPP::GF2NPP::ctor_GF2NPP) },
        {   (LPVOID)0x140581bc0L,
            (LPVOID *)&CryptoPP__GF2NPPdtor_GF2NPP5_user,
            (LPVOID *)&CryptoPP__GF2NPPdtor_GF2NPP5_next,
            (LPVOID)cast_pointer_function(CryptoPP__GF2NPPdtor_GF2NPP5_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::GF2NPP::*)())&CryptoPP::GF2NPP::dtor_GF2NPP) },
        
        {   (LPVOID)0x14060a750L,
            (LPVOID *)&CryptoPP__SHA512InitState1_user,
            (LPVOID *)&CryptoPP__SHA512InitState1_next,
            (LPVOID)cast_pointer_function(CryptoPP__SHA512InitState1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SHA512::*)(uint64_t*))&CryptoPP::SHA512::InitState) },
        {   (LPVOID)0x14060a780L,
            (LPVOID *)&CryptoPP__SHA512Transform2_user,
            (LPVOID *)&CryptoPP__SHA512Transform2_next,
            (LPVOID)cast_pointer_function(CryptoPP__SHA512Transform2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SHA512::*)(uint64_t*, uint64_t*))&CryptoPP::SHA512::Transform) },
        
        {   (LPVOID)0x1404656d0L,
            (LPVOID *)&CryptoPP__HMACAccessHash2_user,
            (LPVOID *)&CryptoPP__HMACAccessHash2_next,
            (LPVOID)cast_pointer_function(CryptoPP__HMACAccessHash2_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::HashTransformation*(CryptoPP::HMAC<CryptoPP::SHA1>::*)())&CryptoPP::HMAC<CryptoPP::SHA1>::AccessHash) },
        {   (LPVOID)0x1404653f0L,
            (LPVOID *)&CryptoPP__HMACAlgorithmName4_user,
            (LPVOID *)&CryptoPP__HMACAlgorithmName4_next,
            (LPVOID)cast_pointer_function(CryptoPP__HMACAlgorithmName4_wrapper),
            (LPVOID)cast_pointer_function((struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*(CryptoPP::HMAC<CryptoPP::SHA1>::*)(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*))&CryptoPP::HMAC<CryptoPP::SHA1>::AlgorithmName) },
        {   (LPVOID)0x140465160L,
            (LPVOID *)&CryptoPP__HMACctor_HMAC6_user,
            (LPVOID *)&CryptoPP__HMACctor_HMAC6_next,
            (LPVOID)cast_pointer_function(CryptoPP__HMACctor_HMAC6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::HMAC<CryptoPP::SHA1>::*)(char*, uint64_t))&CryptoPP::HMAC<CryptoPP::SHA1>::ctor_HMAC) },
        {   (LPVOID)0x140465b80L,
            (LPVOID *)&CryptoPP__HMACStaticAlgorithmName8_user,
            (LPVOID *)&CryptoPP__HMACStaticAlgorithmName8_next,
            (LPVOID)cast_pointer_function(CryptoPP__HMACStaticAlgorithmName8_wrapper),
            (LPVOID)cast_pointer_function((struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*(CryptoPP::HMAC<CryptoPP::SHA1>::*)(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*))&CryptoPP::HMAC<CryptoPP::SHA1>::StaticAlgorithmName) },
        {   (LPVOID)0x140464ec0L,
            (LPVOID *)&CryptoPP__HMACdtor_HMAC13_user,
            (LPVOID *)&CryptoPP__HMACdtor_HMAC13_next,
            (LPVOID)cast_pointer_function(CryptoPP__HMACdtor_HMAC13_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::HMAC<CryptoPP::SHA1>::*)())&CryptoPP::HMAC<CryptoPP::SHA1>::dtor_HMAC) },
        
        {   (LPVOID)0x1404645d0L,
            (LPVOID *)&CryptoPP__DL_EncryptionAlgorithm_Xorctor_DL_EncryptionAlgorithm_Xor2_user,
            (LPVOID *)&CryptoPP__DL_EncryptionAlgorithm_Xorctor_DL_EncryptionAlgorithm_Xor2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_EncryptionAlgorithm_Xorctor_DL_EncryptionAlgorithm_Xor2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>::*)())&CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>::ctor_DL_EncryptionAlgorithm_Xor) },
        {   (LPVOID)0x1404646f0L,
            (LPVOID *)&CryptoPP__DL_EncryptionAlgorithm_XorGetMaxSymmetricPlaintextLength4_user,
            (LPVOID *)&CryptoPP__DL_EncryptionAlgorithm_XorGetMaxSymmetricPlaintextLength4_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_EncryptionAlgorithm_XorGetMaxSymmetricPlaintextLength4_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>::*)(uint64_t))&CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>::GetMaxSymmetricPlaintextLength) },
        {   (LPVOID)0x1404646d0L,
            (LPVOID *)&CryptoPP__DL_EncryptionAlgorithm_XorGetSymmetricCiphertextLength6_user,
            (LPVOID *)&CryptoPP__DL_EncryptionAlgorithm_XorGetSymmetricCiphertextLength6_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_EncryptionAlgorithm_XorGetSymmetricCiphertextLength6_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>::*)(uint64_t))&CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>::GetSymmetricCiphertextLength) },
        {   (LPVOID)0x1404646b0L,
            (LPVOID *)&CryptoPP__DL_EncryptionAlgorithm_XorGetSymmetricKeyLength8_user,
            (LPVOID *)&CryptoPP__DL_EncryptionAlgorithm_XorGetSymmetricKeyLength8_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_EncryptionAlgorithm_XorGetSymmetricKeyLength8_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>::*)(uint64_t))&CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>::GetSymmetricKeyLength) },
        {   (LPVOID)0x140464630L,
            (LPVOID *)&CryptoPP__DL_EncryptionAlgorithm_XorParameterSupported10_user,
            (LPVOID *)&CryptoPP__DL_EncryptionAlgorithm_XorParameterSupported10_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_EncryptionAlgorithm_XorParameterSupported10_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>::*)(char*))&CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>::ParameterSupported) },
        {   (LPVOID)0x140464aa0L,
            (LPVOID *)&CryptoPP__DL_EncryptionAlgorithm_XorSymmetricDecrypt12_user,
            (LPVOID *)&CryptoPP__DL_EncryptionAlgorithm_XorSymmetricDecrypt12_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_EncryptionAlgorithm_XorSymmetricDecrypt12_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::DecodingResult*(CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>::*)(struct CryptoPP::DecodingResult*, char*, char*, uint64_t, char*, struct CryptoPP::NameValuePairs*))&CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>::SymmetricDecrypt) },
        {   (LPVOID)0x140464750L,
            (LPVOID *)&CryptoPP__DL_EncryptionAlgorithm_XorSymmetricEncrypt14_user,
            (LPVOID *)&CryptoPP__DL_EncryptionAlgorithm_XorSymmetricEncrypt14_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_EncryptionAlgorithm_XorSymmetricEncrypt14_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>::*)(struct CryptoPP::RandomNumberGenerator*, char*, char*, uint64_t, char*, struct CryptoPP::NameValuePairs*))&CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>::SymmetricEncrypt) },
        
        {   (LPVOID)0x140651ea0L,
            (LPVOID *)&CryptoPP__MaurerRandomnessTestBytesNeeded1_user,
            (LPVOID *)&CryptoPP__MaurerRandomnessTestBytesNeeded1_next,
            (LPVOID)cast_pointer_function(CryptoPP__MaurerRandomnessTestBytesNeeded1_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::MaurerRandomnessTest::*)())&CryptoPP::MaurerRandomnessTest::BytesNeeded) },
        {   (LPVOID)0x140651aa0L,
            (LPVOID *)&CryptoPP__MaurerRandomnessTestGetTestValue2_user,
            (LPVOID *)&CryptoPP__MaurerRandomnessTestGetTestValue2_next,
            (LPVOID)cast_pointer_function(CryptoPP__MaurerRandomnessTestGetTestValue2_wrapper),
            (LPVOID)cast_pointer_function((double(CryptoPP::MaurerRandomnessTest::*)())&CryptoPP::MaurerRandomnessTest::GetTestValue) },
        {   (LPVOID)0x140651930L,
            (LPVOID *)&CryptoPP__MaurerRandomnessTestctor_MaurerRandomnessTest3_user,
            (LPVOID *)&CryptoPP__MaurerRandomnessTestctor_MaurerRandomnessTest3_next,
            (LPVOID)cast_pointer_function(CryptoPP__MaurerRandomnessTestctor_MaurerRandomnessTest3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::MaurerRandomnessTest::*)())&CryptoPP::MaurerRandomnessTest::ctor_MaurerRandomnessTest) },
        {   (LPVOID)0x1406519c0L,
            (LPVOID *)&CryptoPP__MaurerRandomnessTestPut24_user,
            (LPVOID *)&CryptoPP__MaurerRandomnessTestPut24_next,
            (LPVOID)cast_pointer_function(CryptoPP__MaurerRandomnessTestPut24_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::MaurerRandomnessTest::*)(uint8_t*, uint64_t, int, bool))&CryptoPP::MaurerRandomnessTest::Put2) },
        {   (LPVOID)0x140651e80L,
            (LPVOID *)&CryptoPP__MaurerRandomnessTestdtor_MaurerRandomnessTest5_user,
            (LPVOID *)&CryptoPP__MaurerRandomnessTestdtor_MaurerRandomnessTest5_next,
            (LPVOID)cast_pointer_function(CryptoPP__MaurerRandomnessTestdtor_MaurerRandomnessTest5_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::MaurerRandomnessTest::*)())&CryptoPP::MaurerRandomnessTest::dtor_MaurerRandomnessTest) },
        
        {   (LPVOID)0x1405f6660L,
            (LPVOID *)&CryptoPP__BitBucketctor_BitBucket1_user,
            (LPVOID *)&CryptoPP__BitBucketctor_BitBucket1_next,
            (LPVOID)cast_pointer_function(CryptoPP__BitBucketctor_BitBucket1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::BitBucket::*)())&CryptoPP::BitBucket::ctor_BitBucket) },
        {   (LPVOID)0x1405f7f70L,
            (LPVOID *)&CryptoPP__BitBucketIsolatedInitialize2_user,
            (LPVOID *)&CryptoPP__BitBucketIsolatedInitialize2_next,
            (LPVOID)cast_pointer_function(CryptoPP__BitBucketIsolatedInitialize2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BitBucket::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::BitBucket::IsolatedInitialize) },
        {   (LPVOID)0x1405f7f80L,
            (LPVOID *)&CryptoPP__BitBucketPut23_user,
            (LPVOID *)&CryptoPP__BitBucketPut23_next,
            (LPVOID)cast_pointer_function(CryptoPP__BitBucketPut23_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::BitBucket::*)(uint8_t*, uint64_t, int, bool))&CryptoPP::BitBucket::Put2) },
        {   (LPVOID)0x1405f66e0L,
            (LPVOID *)&CryptoPP__BitBucketdtor_BitBucket4_user,
            (LPVOID *)&CryptoPP__BitBucketdtor_BitBucket4_next,
            (LPVOID)cast_pointer_function(CryptoPP__BitBucketdtor_BitBucket4_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::BitBucket::*)())&CryptoPP::BitBucket::dtor_BitBucket) },
        
        {   (LPVOID)0x140622820L,
            (LPVOID *)&CryptoPP__TF_SignerBaseInputRecoverableMessage1_user,
            (LPVOID *)&CryptoPP__TF_SignerBaseInputRecoverableMessage1_next,
            (LPVOID)cast_pointer_function(CryptoPP__TF_SignerBaseInputRecoverableMessage1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::TF_SignerBase::*)(struct CryptoPP::PK_MessageAccumulator*, uint8_t*, uint64_t))&CryptoPP::TF_SignerBase::InputRecoverableMessage) },
        {   (LPVOID)0x140622bf0L,
            (LPVOID *)&CryptoPP__TF_SignerBaseSignAndRestart2_user,
            (LPVOID *)&CryptoPP__TF_SignerBaseSignAndRestart2_next,
            (LPVOID)cast_pointer_function(CryptoPP__TF_SignerBaseSignAndRestart2_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::TF_SignerBase::*)(struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::PK_MessageAccumulator*, uint8_t*, bool))&CryptoPP::TF_SignerBase::SignAndRestart) },
        
        {   (LPVOID)0x14058a610L,
            (LPVOID *)&CryptoPP__UnknownOIDctor_UnknownOID1_user,
            (LPVOID *)&CryptoPP__UnknownOIDctor_UnknownOID1_next,
            (LPVOID)cast_pointer_function(CryptoPP__UnknownOIDctor_UnknownOID1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::UnknownOID::*)(struct CryptoPP::UnknownOID*))&CryptoPP::UnknownOID::ctor_UnknownOID) },
        {   (LPVOID)0x1405799b0L,
            (LPVOID *)&CryptoPP__UnknownOIDctor_UnknownOID2_user,
            (LPVOID *)&CryptoPP__UnknownOIDctor_UnknownOID2_next,
            (LPVOID)cast_pointer_function(CryptoPP__UnknownOIDctor_UnknownOID2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::UnknownOID::*)())&CryptoPP::UnknownOID::ctor_UnknownOID) },
        {   (LPVOID)0x140579af0L,
            (LPVOID *)&CryptoPP__UnknownOIDdtor_UnknownOID3_user,
            (LPVOID *)&CryptoPP__UnknownOIDdtor_UnknownOID3_next,
            (LPVOID)cast_pointer_function(CryptoPP__UnknownOIDdtor_UnknownOID3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::UnknownOID::*)())&CryptoPP::UnknownOID::dtor_UnknownOID) },
        
        {   (LPVOID)0x14054e420L,
            (LPVOID *)&CryptoPP__EncodedObjectFilterCurrentTarget1_user,
            (LPVOID *)&CryptoPP__EncodedObjectFilterCurrentTarget1_next,
            (LPVOID)cast_pointer_function(CryptoPP__EncodedObjectFilterCurrentTarget1_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::BufferedTransformation*(CryptoPP::EncodedObjectFilter::*)())&CryptoPP::EncodedObjectFilter::CurrentTarget) },
        {   (LPVOID)0x14054ca60L,
            (LPVOID *)&CryptoPP__EncodedObjectFilterPut2_user,
            (LPVOID *)&CryptoPP__EncodedObjectFilterPut2_next,
            (LPVOID)cast_pointer_function(CryptoPP__EncodedObjectFilterPut2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::EncodedObjectFilter::*)(uint8_t*, uint64_t))&CryptoPP::EncodedObjectFilter::Put) },
        
        {   (LPVOID)0x14055c9c0L,
            (LPVOID *)&CryptoPP__SelfTestFailurector_SelfTestFailure1_user,
            (LPVOID *)&CryptoPP__SelfTestFailurector_SelfTestFailure1_next,
            (LPVOID)cast_pointer_function(CryptoPP__SelfTestFailurector_SelfTestFailure1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::SelfTestFailure::*)(struct CryptoPP::SelfTestFailure*))&CryptoPP::SelfTestFailure::ctor_SelfTestFailure) },
        {   (LPVOID)0x140554460L,
            (LPVOID *)&CryptoPP__SelfTestFailuredtor_SelfTestFailure2_user,
            (LPVOID *)&CryptoPP__SelfTestFailuredtor_SelfTestFailure2_next,
            (LPVOID)cast_pointer_function(CryptoPP__SelfTestFailuredtor_SelfTestFailure2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::SelfTestFailure::*)())&CryptoPP::SelfTestFailure::dtor_SelfTestFailure) },
        
        {   (LPVOID)0x1405fe520L,
            (LPVOID *)&CryptoPP__RandomNumberStoreStoreInitialize1_user,
            (LPVOID *)&CryptoPP__RandomNumberStoreStoreInitialize1_next,
            (LPVOID)cast_pointer_function(CryptoPP__RandomNumberStoreStoreInitialize1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::RandomNumberStore::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::RandomNumberStore::StoreInitialize) },
        
        {   (LPVOID)0x14058a4d0L,
            (LPVOID *)&CryptoPP__HashInputTooLongctor_HashInputTooLong1_user,
            (LPVOID *)&CryptoPP__HashInputTooLongctor_HashInputTooLong1_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashInputTooLongctor_HashInputTooLong1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::HashInputTooLong::*)(struct CryptoPP::HashInputTooLong*))&CryptoPP::HashInputTooLong::ctor_HashInputTooLong) },
        {   (LPVOID)0x1405706c0L,
            (LPVOID *)&CryptoPP__HashInputTooLongdtor_HashInputTooLong2_user,
            (LPVOID *)&CryptoPP__HashInputTooLongdtor_HashInputTooLong2_next,
            (LPVOID)cast_pointer_function(CryptoPP__HashInputTooLongdtor_HashInputTooLong2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::HashInputTooLong::*)())&CryptoPP::HashInputTooLong::dtor_HashInputTooLong) },
        
        {   (LPVOID)0x1405fec20L,
            (LPVOID *)&CryptoPP__RedirectorGetPassSignals1_user,
            (LPVOID *)&CryptoPP__RedirectorGetPassSignals1_next,
            (LPVOID)cast_pointer_function(CryptoPP__RedirectorGetPassSignals1_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::Redirector::*)())&CryptoPP::Redirector::GetPassSignals) },
        {   (LPVOID)0x1405fb130L,
            (LPVOID *)&CryptoPP__RedirectorInitialize2_user,
            (LPVOID *)&CryptoPP__RedirectorInitialize2_next,
            (LPVOID)cast_pointer_function(CryptoPP__RedirectorInitialize2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Redirector::*)(struct CryptoPP::NameValuePairs*, int))&CryptoPP::Redirector::Initialize) },
        
        {   (LPVOID)0x140623980L,
            (LPVOID *)&CryptoPP__TF_EncryptorBaseEncrypt1_user,
            (LPVOID *)&CryptoPP__TF_EncryptorBaseEncrypt1_next,
            (LPVOID)cast_pointer_function(CryptoPP__TF_EncryptorBaseEncrypt1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::TF_EncryptorBase::*)(struct CryptoPP::RandomNumberGenerator*, uint8_t*, uint64_t, uint8_t*, struct CryptoPP::NameValuePairs*))&CryptoPP::TF_EncryptorBase::Encrypt) },
        
        {   (LPVOID)0x140608780L,
            (LPVOID *)&CryptoPP__SHA224InitState1_user,
            (LPVOID *)&CryptoPP__SHA224InitState1_next,
            (LPVOID)cast_pointer_function(CryptoPP__SHA224InitState1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SHA224::*)(unsigned int*))&CryptoPP::SHA224::InitState) },
        
        {   (LPVOID)0x1405f6810L,
            (LPVOID *)&CryptoPP__InvalidKeyLengthctor_InvalidKeyLength1_user,
            (LPVOID *)&CryptoPP__InvalidKeyLengthctor_InvalidKeyLength1_next,
            (LPVOID)cast_pointer_function(CryptoPP__InvalidKeyLengthctor_InvalidKeyLength1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::InvalidKeyLength::*)(struct CryptoPP::InvalidKeyLength*))&CryptoPP::InvalidKeyLength::ctor_InvalidKeyLength) },
        {   (LPVOID)0x1405f7ef0L,
            (LPVOID *)&CryptoPP__InvalidKeyLengthdtor_InvalidKeyLength2_user,
            (LPVOID *)&CryptoPP__InvalidKeyLengthdtor_InvalidKeyLength2_next,
            (LPVOID)cast_pointer_function(CryptoPP__InvalidKeyLengthdtor_InvalidKeyLength2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::InvalidKeyLength::*)())&CryptoPP::InvalidKeyLength::dtor_InvalidKeyLength) },
        
        {   (LPVOID)0x1405f7630L,
            (LPVOID *)&CryptoPP__InvalidCiphertextctor_InvalidCiphertext1_user,
            (LPVOID *)&CryptoPP__InvalidCiphertextctor_InvalidCiphertext1_next,
            (LPVOID)cast_pointer_function(CryptoPP__InvalidCiphertextctor_InvalidCiphertext1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::InvalidCiphertext::*)(struct CryptoPP::InvalidCiphertext*))&CryptoPP::InvalidCiphertext::ctor_InvalidCiphertext) },
        {   (LPVOID)0x1405f7780L,
            (LPVOID *)&CryptoPP__InvalidCiphertextdtor_InvalidCiphertext2_user,
            (LPVOID *)&CryptoPP__InvalidCiphertextdtor_InvalidCiphertext2_next,
            (LPVOID)cast_pointer_function(CryptoPP__InvalidCiphertextdtor_InvalidCiphertext2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::InvalidCiphertext::*)())&CryptoPP::InvalidCiphertext::dtor_InvalidCiphertext) },
        
        {   (LPVOID)0x1405f6600L,
            (LPVOID *)&CryptoPP__AuthenticatedKeyAgreementDomainGenerateEphemeralKeyPair1_user,
            (LPVOID *)&CryptoPP__AuthenticatedKeyAgreementDomainGenerateEphemeralKeyPair1_next,
            (LPVOID)cast_pointer_function(CryptoPP__AuthenticatedKeyAgreementDomainGenerateEphemeralKeyPair1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AuthenticatedKeyAgreementDomain::*)(struct CryptoPP::RandomNumberGenerator*, uint8_t*, uint8_t*))&CryptoPP::AuthenticatedKeyAgreementDomain::GenerateEphemeralKeyPair) },
        {   (LPVOID)0x1405f65a0L,
            (LPVOID *)&CryptoPP__AuthenticatedKeyAgreementDomainGenerateStaticKeyPair2_user,
            (LPVOID *)&CryptoPP__AuthenticatedKeyAgreementDomainGenerateStaticKeyPair2_next,
            (LPVOID)cast_pointer_function(CryptoPP__AuthenticatedKeyAgreementDomainGenerateStaticKeyPair2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AuthenticatedKeyAgreementDomain::*)(struct CryptoPP::RandomNumberGenerator*, uint8_t*, uint8_t*))&CryptoPP::AuthenticatedKeyAgreementDomain::GenerateStaticKeyPair) },
        
        {   (LPVOID)0x140625230L,
            (LPVOID *)&CryptoPP__NonblockingRngGenerateBlock1_user,
            (LPVOID *)&CryptoPP__NonblockingRngGenerateBlock1_next,
            (LPVOID)cast_pointer_function(CryptoPP__NonblockingRngGenerateBlock1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::NonblockingRng::*)(uint8_t*, uint64_t))&CryptoPP::NonblockingRng::GenerateBlock) },
        {   (LPVOID)0x1406251c0L,
            (LPVOID *)&CryptoPP__NonblockingRngctor_NonblockingRng2_user,
            (LPVOID *)&CryptoPP__NonblockingRngctor_NonblockingRng2_next,
            (LPVOID)cast_pointer_function(CryptoPP__NonblockingRngctor_NonblockingRng2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::NonblockingRng::*)())&CryptoPP::NonblockingRng::ctor_NonblockingRng) },
        {   (LPVOID)0x140625200L,
            (LPVOID *)&CryptoPP__NonblockingRngdtor_NonblockingRng3_user,
            (LPVOID *)&CryptoPP__NonblockingRngdtor_NonblockingRng3_next,
            (LPVOID)cast_pointer_function(CryptoPP__NonblockingRngdtor_NonblockingRng3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::NonblockingRng::*)())&CryptoPP::NonblockingRng::dtor_NonblockingRng) },
        
        {   (LPVOID)0x1405fbd90L,
            (LPVOID *)&CryptoPP__StreamTransformationFilterFirstPut1_user,
            (LPVOID *)&CryptoPP__StreamTransformationFilterFirstPut1_next,
            (LPVOID)cast_pointer_function(CryptoPP__StreamTransformationFilterFirstPut1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::StreamTransformationFilter::*)(uint8_t*))&CryptoPP::StreamTransformationFilter::FirstPut) },
        {   (LPVOID)0x1405fb940L,
            (LPVOID *)&CryptoPP__StreamTransformationFilterLastBlockSize2_user,
            (LPVOID *)&CryptoPP__StreamTransformationFilterLastBlockSize2_next,
            (LPVOID)cast_pointer_function(CryptoPP__StreamTransformationFilterLastBlockSize2_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::StreamTransformationFilter::*)(struct CryptoPP::StreamTransformation*, struct CryptoPP::StreamTransformationFilter::BlockPaddingScheme))&CryptoPP::StreamTransformationFilter::LastBlockSize) },
        {   (LPVOID)0x1405fc030L,
            (LPVOID *)&CryptoPP__StreamTransformationFilterLastPut3_user,
            (LPVOID *)&CryptoPP__StreamTransformationFilterLastPut3_next,
            (LPVOID)cast_pointer_function(CryptoPP__StreamTransformationFilterLastPut3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::StreamTransformationFilter::*)(uint8_t*, uint64_t))&CryptoPP::StreamTransformationFilter::LastPut) },
        {   (LPVOID)0x1405fbfc0L,
            (LPVOID *)&CryptoPP__StreamTransformationFilterNextPutModifiable4_user,
            (LPVOID *)&CryptoPP__StreamTransformationFilterNextPutModifiable4_next,
            (LPVOID)cast_pointer_function(CryptoPP__StreamTransformationFilterNextPutModifiable4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::StreamTransformationFilter::*)(uint8_t*, uint64_t))&CryptoPP::StreamTransformationFilter::NextPutModifiable) },
        {   (LPVOID)0x1405fbe20L,
            (LPVOID *)&CryptoPP__StreamTransformationFilterNextPutMultiple5_user,
            (LPVOID *)&CryptoPP__StreamTransformationFilterNextPutMultiple5_next,
            (LPVOID)cast_pointer_function(CryptoPP__StreamTransformationFilterNextPutMultiple5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::StreamTransformationFilter::*)(uint8_t*, uint64_t))&CryptoPP::StreamTransformationFilter::NextPutMultiple) },
        {   (LPVOID)0x1405fb9e0L,
            (LPVOID *)&CryptoPP__StreamTransformationFilterctor_StreamTransformationFilter6_user,
            (LPVOID *)&CryptoPP__StreamTransformationFilterctor_StreamTransformationFilter6_next,
            (LPVOID)cast_pointer_function(CryptoPP__StreamTransformationFilterctor_StreamTransformationFilter6_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::StreamTransformationFilter::*)(struct CryptoPP::StreamTransformation*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::StreamTransformationFilter::BlockPaddingScheme))&CryptoPP::StreamTransformationFilter::ctor_StreamTransformationFilter) },
        {   (LPVOID)0x1405ff3d0L,
            (LPVOID *)&CryptoPP__StreamTransformationFilterdtor_StreamTransformationFilter7_user,
            (LPVOID *)&CryptoPP__StreamTransformationFilterdtor_StreamTransformationFilter7_next,
            (LPVOID)cast_pointer_function(CryptoPP__StreamTransformationFilterdtor_StreamTransformationFilter7_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::StreamTransformationFilter::*)())&CryptoPP::StreamTransformationFilter::dtor_StreamTransformationFilter) },
        
        {   (LPVOID)0x1405fd4c0L,
            (LPVOID *)&CryptoPP__SignerFilterIsolatedInitialize1_user,
            (LPVOID *)&CryptoPP__SignerFilterIsolatedInitialize1_next,
            (LPVOID)cast_pointer_function(CryptoPP__SignerFilterIsolatedInitialize1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SignerFilter::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::SignerFilter::IsolatedInitialize) },
        {   (LPVOID)0x1405fd530L,
            (LPVOID *)&CryptoPP__SignerFilterPut22_user,
            (LPVOID *)&CryptoPP__SignerFilterPut22_next,
            (LPVOID)cast_pointer_function(CryptoPP__SignerFilterPut22_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::SignerFilter::*)(uint8_t*, uint64_t, int, bool))&CryptoPP::SignerFilter::Put2) },
        
        {   (LPVOID)0x14054d640L,
            (LPVOID *)&CryptoPP__DERGeneralEncoderctor_DERGeneralEncoder1_user,
            (LPVOID *)&CryptoPP__DERGeneralEncoderctor_DERGeneralEncoder1_next,
            (LPVOID)cast_pointer_function(CryptoPP__DERGeneralEncoderctor_DERGeneralEncoder1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DERGeneralEncoder::*)(struct CryptoPP::BufferedTransformation*, uint8_t))&CryptoPP::DERGeneralEncoder::ctor_DERGeneralEncoder) },
        {   (LPVOID)0x14054d6c0L,
            (LPVOID *)&CryptoPP__DERGeneralEncoderctor_DERGeneralEncoder2_user,
            (LPVOID *)&CryptoPP__DERGeneralEncoderctor_DERGeneralEncoder2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DERGeneralEncoderctor_DERGeneralEncoder2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DERGeneralEncoder::*)(struct CryptoPP::DERGeneralEncoder*, uint8_t))&CryptoPP::DERGeneralEncoder::ctor_DERGeneralEncoder) },
        {   (LPVOID)0x14054d7f0L,
            (LPVOID *)&CryptoPP__DERGeneralEncoderMessageEnd3_user,
            (LPVOID *)&CryptoPP__DERGeneralEncoderMessageEnd3_next,
            (LPVOID)cast_pointer_function(CryptoPP__DERGeneralEncoderMessageEnd3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DERGeneralEncoder::*)())&CryptoPP::DERGeneralEncoder::MessageEnd) },
        {   (LPVOID)0x14054d740L,
            (LPVOID *)&CryptoPP__DERGeneralEncoderdtor_DERGeneralEncoder4_user,
            (LPVOID *)&CryptoPP__DERGeneralEncoderdtor_DERGeneralEncoder4_next,
            (LPVOID)cast_pointer_function(CryptoPP__DERGeneralEncoderdtor_DERGeneralEncoder4_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DERGeneralEncoder::*)())&CryptoPP::DERGeneralEncoder::dtor_DERGeneralEncoder) },
        
        
        {   (LPVOID)0x140459eb0L,
            (LPVOID *)&CryptoPP__Rijndael__Basector_Base2_user,
            (LPVOID *)&CryptoPP__Rijndael__Basector_Base2_next,
            (LPVOID)cast_pointer_function(CryptoPP__Rijndael__Basector_Base2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Rijndael::Base::*)(struct CryptoPP::Rijndael::Base*))&CryptoPP::Rijndael::Base::ctor_Base) },
        {   (LPVOID)0x14045be30L,
            (LPVOID *)&CryptoPP__Rijndael__Basector_Base4_user,
            (LPVOID *)&CryptoPP__Rijndael__Basector_Base4_next,
            (LPVOID)cast_pointer_function(CryptoPP__Rijndael__Basector_Base4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Rijndael::Base::*)())&CryptoPP::Rijndael::Base::ctor_Base) },
        {   (LPVOID)0x14061f7a0L,
            (LPVOID *)&CryptoPP__Rijndael__BaseUncheckedSetKey5_user,
            (LPVOID *)&CryptoPP__Rijndael__BaseUncheckedSetKey5_next,
            (LPVOID)cast_pointer_function(CryptoPP__Rijndael__BaseUncheckedSetKey5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Rijndael::Base::*)(uint8_t*, unsigned int, struct CryptoPP::NameValuePairs*))&CryptoPP::Rijndael::Base::UncheckedSetKey) },
        {   (LPVOID)0x140449ae0L,
            (LPVOID *)&CryptoPP__Rijndael__Basedtor_Base7_user,
            (LPVOID *)&CryptoPP__Rijndael__Basedtor_Base7_next,
            (LPVOID)cast_pointer_function(CryptoPP__Rijndael__Basedtor_Base7_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Rijndael::Base::*)())&CryptoPP::Rijndael::Base::dtor_Base) },
        
        {   (LPVOID)0x140459e50L,
            (LPVOID *)&CryptoPP__Rijndael__Decctor_Dec2_user,
            (LPVOID *)&CryptoPP__Rijndael__Decctor_Dec2_next,
            (LPVOID)cast_pointer_function(CryptoPP__Rijndael__Decctor_Dec2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Rijndael::Dec::*)(struct CryptoPP::Rijndael::Dec*))&CryptoPP::Rijndael::Dec::ctor_Dec) },
        {   (LPVOID)0x14045bb00L,
            (LPVOID *)&CryptoPP__Rijndael__Decctor_Dec4_user,
            (LPVOID *)&CryptoPP__Rijndael__Decctor_Dec4_next,
            (LPVOID)cast_pointer_function(CryptoPP__Rijndael__Decctor_Dec4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Rijndael::Dec::*)())&CryptoPP::Rijndael::Dec::ctor_Dec) },
        {   (LPVOID)0x140621160L,
            (LPVOID *)&CryptoPP__Rijndael__DecProcessAndXorBlock5_user,
            (LPVOID *)&CryptoPP__Rijndael__DecProcessAndXorBlock5_next,
            (LPVOID)cast_pointer_function(CryptoPP__Rijndael__DecProcessAndXorBlock5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Rijndael::Dec::*)(uint8_t*, uint8_t*, uint8_t*))&CryptoPP::Rijndael::Dec::ProcessAndXorBlock) },
        {   (LPVOID)0x140449650L,
            (LPVOID *)&CryptoPP__Rijndael__Decdtor_Dec7_user,
            (LPVOID *)&CryptoPP__Rijndael__Decdtor_Dec7_next,
            (LPVOID)cast_pointer_function(CryptoPP__Rijndael__Decdtor_Dec7_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Rijndael::Dec::*)())&CryptoPP::Rijndael::Dec::dtor_Dec) },
        
        {   (LPVOID)0x14045a910L,
            (LPVOID *)&CryptoPP__Rijndael__Encctor_Enc2_user,
            (LPVOID *)&CryptoPP__Rijndael__Encctor_Enc2_next,
            (LPVOID)cast_pointer_function(CryptoPP__Rijndael__Encctor_Enc2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Rijndael::Enc::*)(struct CryptoPP::Rijndael::Enc*))&CryptoPP::Rijndael::Enc::ctor_Enc) },
        {   (LPVOID)0x14045bb50L,
            (LPVOID *)&CryptoPP__Rijndael__Encctor_Enc4_user,
            (LPVOID *)&CryptoPP__Rijndael__Encctor_Enc4_next,
            (LPVOID)cast_pointer_function(CryptoPP__Rijndael__Encctor_Enc4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Rijndael::Enc::*)())&CryptoPP::Rijndael::Enc::ctor_Enc) },
        {   (LPVOID)0x140620120L,
            (LPVOID *)&CryptoPP__Rijndael__EncProcessAndXorBlock5_user,
            (LPVOID *)&CryptoPP__Rijndael__EncProcessAndXorBlock5_next,
            (LPVOID)cast_pointer_function(CryptoPP__Rijndael__EncProcessAndXorBlock5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Rijndael::Enc::*)(uint8_t*, uint8_t*, uint8_t*))&CryptoPP::Rijndael::Enc::ProcessAndXorBlock) },
        {   (LPVOID)0x14044e720L,
            (LPVOID *)&CryptoPP__Rijndael__Encdtor_Enc7_user,
            (LPVOID *)&CryptoPP__Rijndael__Encdtor_Enc7_next,
            (LPVOID)cast_pointer_function(CryptoPP__Rijndael__Encdtor_Enc7_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Rijndael::Enc::*)())&CryptoPP::Rijndael::Enc::dtor_Enc) },
        
        {   (LPVOID)0x1406117e0L,
            (LPVOID *)&CryptoPP__NullStoreMaxRetrievable1_user,
            (LPVOID *)&CryptoPP__NullStoreMaxRetrievable1_next,
            (LPVOID)cast_pointer_function(CryptoPP__NullStoreMaxRetrievable1_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::NullStore::*)())&CryptoPP::NullStore::MaxRetrievable) },
        {   (LPVOID)0x140611780L,
            (LPVOID *)&CryptoPP__NullStorector_NullStore2_user,
            (LPVOID *)&CryptoPP__NullStorector_NullStore2_next,
            (LPVOID)cast_pointer_function(CryptoPP__NullStorector_NullStore2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::NullStore::*)(uint64_t))&CryptoPP::NullStore::ctor_NullStore) },
        {   (LPVOID)0x1406117d0L,
            (LPVOID *)&CryptoPP__NullStoreStoreInitialize3_user,
            (LPVOID *)&CryptoPP__NullStoreStoreInitialize3_next,
            (LPVOID)cast_pointer_function(CryptoPP__NullStoreStoreInitialize3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::NullStore::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::NullStore::StoreInitialize) },
        {   (LPVOID)0x140611830L,
            (LPVOID *)&CryptoPP__NullStoredtor_NullStore4_user,
            (LPVOID *)&CryptoPP__NullStoredtor_NullStore4_next,
            (LPVOID)cast_pointer_function(CryptoPP__NullStoredtor_NullStore4_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::NullStore::*)())&CryptoPP::NullStore::dtor_NullStore) },
        
        {   (LPVOID)0x14054e640L,
            (LPVOID *)&CryptoPP__DERSequenceEncoderctor_DERSequenceEncoder1_user,
            (LPVOID *)&CryptoPP__DERSequenceEncoderctor_DERSequenceEncoder1_next,
            (LPVOID)cast_pointer_function(CryptoPP__DERSequenceEncoderctor_DERSequenceEncoder1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DERSequenceEncoder::*)(struct CryptoPP::BufferedTransformation*, uint8_t))&CryptoPP::DERSequenceEncoder::ctor_DERSequenceEncoder) },
        {   (LPVOID)0x14054e6a0L,
            (LPVOID *)&CryptoPP__DERSequenceEncoderctor_DERSequenceEncoder2_user,
            (LPVOID *)&CryptoPP__DERSequenceEncoderctor_DERSequenceEncoder2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DERSequenceEncoderctor_DERSequenceEncoder2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DERSequenceEncoder::*)(struct CryptoPP::DERSequenceEncoder*, uint8_t))&CryptoPP::DERSequenceEncoder::ctor_DERSequenceEncoder) },
        {   (LPVOID)0x14054e740L,
            (LPVOID *)&CryptoPP__DERSequenceEncoderdtor_DERSequenceEncoder3_user,
            (LPVOID *)&CryptoPP__DERSequenceEncoderdtor_DERSequenceEncoder3_next,
            (LPVOID)cast_pointer_function(CryptoPP__DERSequenceEncoderdtor_DERSequenceEncoder3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DERSequenceEncoder::*)())&CryptoPP::DERSequenceEncoder::dtor_DERSequenceEncoder) },
        
        {   (LPVOID)0x1406304d0L,
            (LPVOID *)&CryptoPP__DL_SignatureMessageEncodingMethod_NRComputeMessageRepresentative1_user,
            (LPVOID *)&CryptoPP__DL_SignatureMessageEncodingMethod_NRComputeMessageRepresentative1_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_SignatureMessageEncodingMethod_NRComputeMessageRepresentative1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DL_SignatureMessageEncodingMethod_NR::*)(int64_t, int, int, uint8_t*, struct CryptoPP*))&CryptoPP::DL_SignatureMessageEncodingMethod_NR::ComputeMessageRepresentative) },
        {   (LPVOID)0x14063c950L,
            (LPVOID *)&CryptoPP__DL_SignatureMessageEncodingMethod_NRctor_DL_SignatureMessageEncodingMethod_NR2_user,
            (LPVOID *)&CryptoPP__DL_SignatureMessageEncodingMethod_NRctor_DL_SignatureMessageEncodingMethod_NR2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_SignatureMessageEncodingMethod_NRctor_DL_SignatureMessageEncodingMethod_NR2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DL_SignatureMessageEncodingMethod_NR::*)())&CryptoPP::DL_SignatureMessageEncodingMethod_NR::ctor_DL_SignatureMessageEncodingMethod_NR) },
        {   (LPVOID)0x14063d350L,
            (LPVOID *)&CryptoPP__DL_SignatureMessageEncodingMethod_NRdtor_DL_SignatureMessageEncodingMethod_NR3_user,
            (LPVOID *)&CryptoPP__DL_SignatureMessageEncodingMethod_NRdtor_DL_SignatureMessageEncodingMethod_NR3_next,
            (LPVOID)cast_pointer_function(CryptoPP__DL_SignatureMessageEncodingMethod_NRdtor_DL_SignatureMessageEncodingMethod_NR3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DL_SignatureMessageEncodingMethod_NR::*)())&CryptoPP::DL_SignatureMessageEncodingMethod_NR::dtor_DL_SignatureMessageEncodingMethod_NR) },
        
        {   (LPVOID)0x140463c00L,
            (LPVOID *)&CryptoPP__P1363_KDF2DeriveKey2_user,
            (LPVOID *)&CryptoPP__P1363_KDF2DeriveKey2_next,
            (LPVOID)cast_pointer_function(CryptoPP__P1363_KDF2DeriveKey2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::P1363_KDF2<CryptoPP::SHA1>::*)(char*, uint64_t, char*, uint64_t, char*, uint64_t))&CryptoPP::P1363_KDF2<CryptoPP::SHA1>::DeriveKey) },
        
        {   (LPVOID)0x1406254f0L,
            (LPVOID *)&CryptoPP__OS_RNG_Errctor_OS_RNG_Err1_user,
            (LPVOID *)&CryptoPP__OS_RNG_Errctor_OS_RNG_Err1_next,
            (LPVOID)cast_pointer_function(CryptoPP__OS_RNG_Errctor_OS_RNG_Err1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::OS_RNG_Err::*)(struct CryptoPP::OS_RNG_Err*))&CryptoPP::OS_RNG_Err::ctor_OS_RNG_Err) },
        {   (LPVOID)0x1406254d0L,
            (LPVOID *)&CryptoPP__OS_RNG_Errdtor_OS_RNG_Err2_user,
            (LPVOID *)&CryptoPP__OS_RNG_Errdtor_OS_RNG_Err2_next,
            (LPVOID)cast_pointer_function(CryptoPP__OS_RNG_Errdtor_OS_RNG_Err2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::OS_RNG_Err::*)())&CryptoPP::OS_RNG_Err::dtor_OS_RNG_Err) },
        
        {   (LPVOID)0x14063e3c0L,
            (LPVOID *)&CryptoPP__CombinedNameValuePairsctor_CombinedNameValuePairs1_user,
            (LPVOID *)&CryptoPP__CombinedNameValuePairsctor_CombinedNameValuePairs1_next,
            (LPVOID)cast_pointer_function(CryptoPP__CombinedNameValuePairsctor_CombinedNameValuePairs1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::CombinedNameValuePairs::*)(struct CryptoPP::NameValuePairs*, struct CryptoPP::NameValuePairs*))&CryptoPP::CombinedNameValuePairs::ctor_CombinedNameValuePairs) },
        {   (LPVOID)0x140606140L,
            (LPVOID *)&CryptoPP__CombinedNameValuePairsGetVoidValue2_user,
            (LPVOID *)&CryptoPP__CombinedNameValuePairsGetVoidValue2_next,
            (LPVOID)cast_pointer_function(CryptoPP__CombinedNameValuePairsGetVoidValue2_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::CombinedNameValuePairs::*)(char*, struct type_info*, void*))&CryptoPP::CombinedNameValuePairs::GetVoidValue) },
        {   (LPVOID)0x14063e460L,
            (LPVOID *)&CryptoPP__CombinedNameValuePairsdtor_CombinedNameValuePairs3_user,
            (LPVOID *)&CryptoPP__CombinedNameValuePairsdtor_CombinedNameValuePairs3_next,
            (LPVOID)cast_pointer_function(CryptoPP__CombinedNameValuePairsdtor_CombinedNameValuePairs3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::CombinedNameValuePairs::*)())&CryptoPP::CombinedNameValuePairs::dtor_CombinedNameValuePairs) },
        
        {   (LPVOID)0x1404536e0L,
            (LPVOID *)&CryptoPP__FileStorector_FileStore2_user,
            (LPVOID *)&CryptoPP__FileStorector_FileStore2_next,
            (LPVOID)cast_pointer_function(CryptoPP__FileStorector_FileStore2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::FileStore::*)())&CryptoPP::FileStore::ctor_FileStore) },
        {   (LPVOID)0x14061d5c0L,
            (LPVOID *)&CryptoPP__FileStoreMaxRetrievable3_user,
            (LPVOID *)&CryptoPP__FileStoreMaxRetrievable3_next,
            (LPVOID)cast_pointer_function(CryptoPP__FileStoreMaxRetrievable3_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::FileStore::*)())&CryptoPP::FileStore::MaxRetrievable) },
        {   (LPVOID)0x14061dd10L,
            (LPVOID *)&CryptoPP__FileStoreSkip4_user,
            (LPVOID *)&CryptoPP__FileStoreSkip4_next,
            (LPVOID)cast_pointer_function(CryptoPP__FileStoreSkip4_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::FileStore::*)(uint64_t))&CryptoPP::FileStore::Skip) },
        {   (LPVOID)0x14061d310L,
            (LPVOID *)&CryptoPP__FileStoreStoreInitialize5_user,
            (LPVOID *)&CryptoPP__FileStoreStoreInitialize5_next,
            (LPVOID)cast_pointer_function(CryptoPP__FileStoreStoreInitialize5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::FileStore::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::FileStore::StoreInitialize) },
        {   (LPVOID)0x14044d9b0L,
            (LPVOID *)&CryptoPP__FileStoredtor_FileStore10_user,
            (LPVOID *)&CryptoPP__FileStoredtor_FileStore10_next,
            (LPVOID)cast_pointer_function(CryptoPP__FileStoredtor_FileStore10_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::FileStore::*)())&CryptoPP::FileStore::dtor_FileStore) },
        
        {   (LPVOID)0x14061e7c0L,
            (LPVOID *)&CryptoPP__FileStore__Errctor_Err1_user,
            (LPVOID *)&CryptoPP__FileStore__Errctor_Err1_next,
            (LPVOID)cast_pointer_function(CryptoPP__FileStore__Errctor_Err1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::FileStore::Err::*)(struct CryptoPP::FileStore::Err*))&CryptoPP::FileStore::Err::ctor_Err) },
        {   (LPVOID)0x14061e6f0L,
            (LPVOID *)&CryptoPP__FileStore__Errdtor_Err2_user,
            (LPVOID *)&CryptoPP__FileStore__Errdtor_Err2_next,
            (LPVOID)cast_pointer_function(CryptoPP__FileStore__Errdtor_Err2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::FileStore::Err::*)())&CryptoPP::FileStore::Err::dtor_Err) },
        
        {   (LPVOID)0x14061e780L,
            (LPVOID *)&CryptoPP__FileStore__OpenErrctor_OpenErr1_user,
            (LPVOID *)&CryptoPP__FileStore__OpenErrctor_OpenErr1_next,
            (LPVOID)cast_pointer_function(CryptoPP__FileStore__OpenErrctor_OpenErr1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::FileStore::OpenErr::*)(struct CryptoPP::FileStore::OpenErr*))&CryptoPP::FileStore::OpenErr::ctor_OpenErr) },
        {   (LPVOID)0x14061e710L,
            (LPVOID *)&CryptoPP__FileStore__OpenErrdtor_OpenErr2_user,
            (LPVOID *)&CryptoPP__FileStore__OpenErrdtor_OpenErr2_next,
            (LPVOID)cast_pointer_function(CryptoPP__FileStore__OpenErrdtor_OpenErr2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::FileStore::OpenErr::*)())&CryptoPP::FileStore::OpenErr::dtor_OpenErr) },
        
        {   (LPVOID)0x14061e920L,
            (LPVOID *)&CryptoPP__FileStore__ReadErrctor_ReadErr1_user,
            (LPVOID *)&CryptoPP__FileStore__ReadErrctor_ReadErr1_next,
            (LPVOID)cast_pointer_function(CryptoPP__FileStore__ReadErrctor_ReadErr1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::FileStore::ReadErr::*)(struct CryptoPP::FileStore::ReadErr*))&CryptoPP::FileStore::ReadErr::ctor_ReadErr) },
        {   (LPVOID)0x14061e800L,
            (LPVOID *)&CryptoPP__FileStore__ReadErrctor_ReadErr2_user,
            (LPVOID *)&CryptoPP__FileStore__ReadErrctor_ReadErr2_next,
            (LPVOID)cast_pointer_function(CryptoPP__FileStore__ReadErrctor_ReadErr2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::FileStore::ReadErr::*)())&CryptoPP::FileStore::ReadErr::ctor_ReadErr) },
        {   (LPVOID)0x14061e900L,
            (LPVOID *)&CryptoPP__FileStore__ReadErrdtor_ReadErr3_user,
            (LPVOID *)&CryptoPP__FileStore__ReadErrdtor_ReadErr3_next,
            (LPVOID)cast_pointer_function(CryptoPP__FileStore__ReadErrdtor_ReadErr3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::FileStore::ReadErr::*)())&CryptoPP::FileStore::ReadErr::dtor_ReadErr) },
        
        {   (LPVOID)0x1404543a0L,
            (LPVOID *)&CryptoPP__SourceTemplateGetAutoSignalPropagation2_user,
            (LPVOID *)&CryptoPP__SourceTemplateGetAutoSignalPropagation2_next,
            (LPVOID)cast_pointer_function(CryptoPP__SourceTemplateGetAutoSignalPropagation2_wrapper),
            (LPVOID)cast_pointer_function((int(CryptoPP::SourceTemplate<CryptoPP::FileStore>::*)())&CryptoPP::SourceTemplate<CryptoPP::FileStore>::GetAutoSignalPropagation) },
        {   (LPVOID)0x140454040L,
            (LPVOID *)&CryptoPP__SourceTemplateIsolatedInitialize4_user,
            (LPVOID *)&CryptoPP__SourceTemplateIsolatedInitialize4_next,
            (LPVOID)cast_pointer_function(CryptoPP__SourceTemplateIsolatedInitialize4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SourceTemplate<CryptoPP::FileStore>::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::SourceTemplate<CryptoPP::FileStore>::IsolatedInitialize) },
        {   (LPVOID)0x1404540b0L,
            (LPVOID *)&CryptoPP__SourceTemplatePump26_user,
            (LPVOID *)&CryptoPP__SourceTemplatePump26_next,
            (LPVOID)cast_pointer_function(CryptoPP__SourceTemplatePump26_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::SourceTemplate<CryptoPP::FileStore>::*)(uint64_t*, bool))&CryptoPP::SourceTemplate<CryptoPP::FileStore>::Pump2) },
        {   (LPVOID)0x1404541f0L,
            (LPVOID *)&CryptoPP__SourceTemplatePumpAll28_user,
            (LPVOID *)&CryptoPP__SourceTemplatePumpAll28_next,
            (LPVOID)cast_pointer_function(CryptoPP__SourceTemplatePumpAll28_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::SourceTemplate<CryptoPP::FileStore>::*)(bool))&CryptoPP::SourceTemplate<CryptoPP::FileStore>::PumpAll2) },
        {   (LPVOID)0x140454160L,
            (LPVOID *)&CryptoPP__SourceTemplatePumpMessages210_user,
            (LPVOID *)&CryptoPP__SourceTemplatePumpMessages210_next,
            (LPVOID)cast_pointer_function(CryptoPP__SourceTemplatePumpMessages210_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::SourceTemplate<CryptoPP::FileStore>::*)(unsigned int*, bool))&CryptoPP::SourceTemplate<CryptoPP::FileStore>::PumpMessages2) },
        {   (LPVOID)0x140454330L,
            (LPVOID *)&CryptoPP__SourceTemplateSetAutoSignalPropagation12_user,
            (LPVOID *)&CryptoPP__SourceTemplateSetAutoSignalPropagation12_next,
            (LPVOID)cast_pointer_function(CryptoPP__SourceTemplateSetAutoSignalPropagation12_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SourceTemplate<CryptoPP::FileStore>::*)(int))&CryptoPP::SourceTemplate<CryptoPP::FileStore>::SetAutoSignalPropagation) },
        {   (LPVOID)0x140454270L,
            (LPVOID *)&CryptoPP__SourceTemplateSourceExhausted14_user,
            (LPVOID *)&CryptoPP__SourceTemplateSourceExhausted14_next,
            (LPVOID)cast_pointer_function(CryptoPP__SourceTemplateSourceExhausted14_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::SourceTemplate<CryptoPP::FileStore>::*)())&CryptoPP::SourceTemplate<CryptoPP::FileStore>::SourceExhausted) },
        {   (LPVOID)0x140453510L,
            (LPVOID *)&CryptoPP__SourceTemplatector_SourceTemplate16_user,
            (LPVOID *)&CryptoPP__SourceTemplatector_SourceTemplate16_next,
            (LPVOID)cast_pointer_function(CryptoPP__SourceTemplatector_SourceTemplate16_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SourceTemplate<CryptoPP::FileStore>::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::SourceTemplate<CryptoPP::FileStore>::ctor_SourceTemplate) },
        {   (LPVOID)0x14044d740L,
            (LPVOID *)&CryptoPP__SourceTemplatedtor_SourceTemplate21_user,
            (LPVOID *)&CryptoPP__SourceTemplatedtor_SourceTemplate21_next,
            (LPVOID)cast_pointer_function(CryptoPP__SourceTemplatedtor_SourceTemplate21_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SourceTemplate<CryptoPP::FileStore>::*)())&CryptoPP::SourceTemplate<CryptoPP::FileStore>::dtor_SourceTemplate) },
        
        {   (LPVOID)0x14061e3d0L,
            (LPVOID *)&CryptoPP__FileSourcector_FileSource1_user,
            (LPVOID *)&CryptoPP__FileSourcector_FileSource1_next,
            (LPVOID)cast_pointer_function(CryptoPP__FileSourcector_FileSource1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::FileSource::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::FileSource::ctor_FileSource) },
        {   (LPVOID)0x14044ca70L,
            (LPVOID *)&CryptoPP__FileSourcector_FileSource3_user,
            (LPVOID *)&CryptoPP__FileSourcector_FileSource3_next,
            (LPVOID)cast_pointer_function(CryptoPP__FileSourcector_FileSource3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::FileSource::*)(char*, bool, struct CryptoPP::BufferedTransformation*, bool))&CryptoPP::FileSource::ctor_FileSource) },
        {   (LPVOID)0x14044dc70L,
            (LPVOID *)&CryptoPP__FileSourcedtor_FileSource8_user,
            (LPVOID *)&CryptoPP__FileSourcedtor_FileSource8_next,
            (LPVOID)cast_pointer_function(CryptoPP__FileSourcedtor_FileSource8_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::FileSource::*)())&CryptoPP::FileSource::dtor_FileSource) },
        
        {   (LPVOID)0x14061e420L,
            (LPVOID *)&CryptoPP__FileSinkctor_FileSink1_user,
            (LPVOID *)&CryptoPP__FileSinkctor_FileSink1_next,
            (LPVOID)cast_pointer_function(CryptoPP__FileSinkctor_FileSink1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::FileSink::*)())&CryptoPP::FileSink::ctor_FileSink) },
        {   (LPVOID)0x14061e0f0L,
            (LPVOID *)&CryptoPP__FileSinkIsolatedFlush2_user,
            (LPVOID *)&CryptoPP__FileSinkIsolatedFlush2_next,
            (LPVOID)cast_pointer_function(CryptoPP__FileSinkIsolatedFlush2_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::FileSink::*)(bool, bool))&CryptoPP::FileSink::IsolatedFlush) },
        {   (LPVOID)0x14061de50L,
            (LPVOID *)&CryptoPP__FileSinkIsolatedInitialize3_user,
            (LPVOID *)&CryptoPP__FileSinkIsolatedInitialize3_next,
            (LPVOID)cast_pointer_function(CryptoPP__FileSinkIsolatedInitialize3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::FileSink::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::FileSink::IsolatedInitialize) },
        {   (LPVOID)0x14061e210L,
            (LPVOID *)&CryptoPP__FileSinkPut24_user,
            (LPVOID *)&CryptoPP__FileSinkPut24_next,
            (LPVOID)cast_pointer_function(CryptoPP__FileSinkPut24_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::FileSink::*)(uint8_t*, uint64_t, int, bool))&CryptoPP::FileSink::Put2) },
        {   (LPVOID)0x14061e500L,
            (LPVOID *)&CryptoPP__FileSinkdtor_FileSink5_user,
            (LPVOID *)&CryptoPP__FileSinkdtor_FileSink5_next,
            (LPVOID)cast_pointer_function(CryptoPP__FileSinkdtor_FileSink5_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::FileSink::*)())&CryptoPP::FileSink::dtor_FileSink) },
        
        {   (LPVOID)0x14061ebe0L,
            (LPVOID *)&CryptoPP__FileSink__Errctor_Err1_user,
            (LPVOID *)&CryptoPP__FileSink__Errctor_Err1_next,
            (LPVOID)cast_pointer_function(CryptoPP__FileSink__Errctor_Err1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::FileSink::Err::*)(struct CryptoPP::FileSink::Err*))&CryptoPP::FileSink::Err::ctor_Err) },
        {   (LPVOID)0x14061eb10L,
            (LPVOID *)&CryptoPP__FileSink__Errdtor_Err2_user,
            (LPVOID *)&CryptoPP__FileSink__Errdtor_Err2_next,
            (LPVOID)cast_pointer_function(CryptoPP__FileSink__Errdtor_Err2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::FileSink::Err::*)())&CryptoPP::FileSink::Err::dtor_Err) },
        
        {   (LPVOID)0x14061eba0L,
            (LPVOID *)&CryptoPP__FileSink__OpenErrctor_OpenErr1_user,
            (LPVOID *)&CryptoPP__FileSink__OpenErrctor_OpenErr1_next,
            (LPVOID)cast_pointer_function(CryptoPP__FileSink__OpenErrctor_OpenErr1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::FileSink::OpenErr::*)(struct CryptoPP::FileSink::OpenErr*))&CryptoPP::FileSink::OpenErr::ctor_OpenErr) },
        {   (LPVOID)0x14061eb30L,
            (LPVOID *)&CryptoPP__FileSink__OpenErrdtor_OpenErr2_user,
            (LPVOID *)&CryptoPP__FileSink__OpenErrdtor_OpenErr2_next,
            (LPVOID)cast_pointer_function(CryptoPP__FileSink__OpenErrdtor_OpenErr2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::FileSink::OpenErr::*)())&CryptoPP::FileSink::OpenErr::dtor_OpenErr) },
        
        {   (LPVOID)0x14061ed40L,
            (LPVOID *)&CryptoPP__FileSink__WriteErrctor_WriteErr1_user,
            (LPVOID *)&CryptoPP__FileSink__WriteErrctor_WriteErr1_next,
            (LPVOID)cast_pointer_function(CryptoPP__FileSink__WriteErrctor_WriteErr1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::FileSink::WriteErr::*)(struct CryptoPP::FileSink::WriteErr*))&CryptoPP::FileSink::WriteErr::ctor_WriteErr) },
        {   (LPVOID)0x14061ec20L,
            (LPVOID *)&CryptoPP__FileSink__WriteErrctor_WriteErr2_user,
            (LPVOID *)&CryptoPP__FileSink__WriteErrctor_WriteErr2_next,
            (LPVOID)cast_pointer_function(CryptoPP__FileSink__WriteErrctor_WriteErr2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::FileSink::WriteErr::*)())&CryptoPP::FileSink::WriteErr::ctor_WriteErr) },
        {   (LPVOID)0x14061ed20L,
            (LPVOID *)&CryptoPP__FileSink__WriteErrdtor_WriteErr3_user,
            (LPVOID *)&CryptoPP__FileSink__WriteErrdtor_WriteErr3_next,
            (LPVOID)cast_pointer_function(CryptoPP__FileSink__WriteErrdtor_WriteErr3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::FileSink::WriteErr::*)())&CryptoPP::FileSink::WriteErr::dtor_WriteErr) },
        
        {   (LPVOID)0x140466520L,
            (LPVOID *)&CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase22_user,
            (LPVOID *)&CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase22_next,
            (LPVOID)cast_pointer_function(CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase22_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AlgorithmParametersBase2<char const *>::*)(struct CryptoPP::AlgorithmParametersBase2<char const *>*))&CryptoPP::AlgorithmParametersBase2<char const *>::ctor_AlgorithmParametersBase2) },
        {   (LPVOID)0x140466360L,
            (LPVOID *)&CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase24_user,
            (LPVOID *)&CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase24_next,
            (LPVOID)cast_pointer_function(CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase24_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AlgorithmParametersBase2<char const *>::*)(char*, char**, bool))&CryptoPP::AlgorithmParametersBase2<char const *>::ctor_AlgorithmParametersBase2) },
        {   (LPVOID)0x140460200L,
            (LPVOID *)&CryptoPP__AlgorithmParametersBase2AssignValue6_user,
            (LPVOID *)&CryptoPP__AlgorithmParametersBase2AssignValue6_next,
            (LPVOID)cast_pointer_function(CryptoPP__AlgorithmParametersBase2AssignValue6_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AlgorithmParametersBase2<char const *>::*)(char*, struct type_info*, void*))&CryptoPP::AlgorithmParametersBase2<char const *>::AssignValue) },
        {   (LPVOID)0x14044d160L,
            (LPVOID *)&CryptoPP__AlgorithmParametersBase2dtor_AlgorithmParametersBase211_user,
            (LPVOID *)&CryptoPP__AlgorithmParametersBase2dtor_AlgorithmParametersBase211_next,
            (LPVOID)cast_pointer_function(CryptoPP__AlgorithmParametersBase2dtor_AlgorithmParametersBase211_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AlgorithmParametersBase2<char const *>::*)())&CryptoPP::AlgorithmParametersBase2<char const *>::dtor_AlgorithmParametersBase2) },
        
        {   (LPVOID)0x140466490L,
            (LPVOID *)&CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase22_user,
            (LPVOID *)&CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase22_next,
            (LPVOID)cast_pointer_function(CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase22_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AlgorithmParametersBase2<bool>::*)(char*, bool*, bool))&CryptoPP::AlgorithmParametersBase2<bool>::ctor_AlgorithmParametersBase2) },
        {   (LPVOID)0x1404603d0L,
            (LPVOID *)&CryptoPP__AlgorithmParametersBase2AssignValue4_user,
            (LPVOID *)&CryptoPP__AlgorithmParametersBase2AssignValue4_next,
            (LPVOID)cast_pointer_function(CryptoPP__AlgorithmParametersBase2AssignValue4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AlgorithmParametersBase2<bool>::*)(char*, struct type_info*, void*))&CryptoPP::AlgorithmParametersBase2<bool>::AssignValue) },
        {   (LPVOID)0x14044dcb0L,
            (LPVOID *)&CryptoPP__AlgorithmParametersBase2dtor_AlgorithmParametersBase29_user,
            (LPVOID *)&CryptoPP__AlgorithmParametersBase2dtor_AlgorithmParametersBase29_next,
            (LPVOID)cast_pointer_function(CryptoPP__AlgorithmParametersBase2dtor_AlgorithmParametersBase29_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AlgorithmParametersBase2<bool>::*)())&CryptoPP::AlgorithmParametersBase2<bool>::dtor_AlgorithmParametersBase2) },
        
        {   (LPVOID)0x1404662c0L,
            (LPVOID *)&CryptoPP__AlgorithmParametersctor_AlgorithmParameters2_user,
            (LPVOID *)&CryptoPP__AlgorithmParametersctor_AlgorithmParameters2_next,
            (LPVOID)cast_pointer_function(CryptoPP__AlgorithmParametersctor_AlgorithmParameters2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>::*)(struct CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>*))&CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>::ctor_AlgorithmParameters) },
        {   (LPVOID)0x140460140L,
            (LPVOID *)&CryptoPP__AlgorithmParametersctor_AlgorithmParameters4_user,
            (LPVOID *)&CryptoPP__AlgorithmParametersctor_AlgorithmParameters4_next,
            (LPVOID)cast_pointer_function(CryptoPP__AlgorithmParametersctor_AlgorithmParameters4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>::*)(struct CryptoPP::NullNameValuePairs*, char*, char**, bool))&CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>::ctor_AlgorithmParameters) },
        {   (LPVOID)0x1404601e0L,
            (LPVOID *)&CryptoPP__AlgorithmParametersGetParent6_user,
            (LPVOID *)&CryptoPP__AlgorithmParametersGetParent6_next,
            (LPVOID)cast_pointer_function(CryptoPP__AlgorithmParametersGetParent6_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::NameValuePairs*(CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>::*)())&CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>::GetParent) },
        {   (LPVOID)0x14044d090L,
            (LPVOID *)&CryptoPP__AlgorithmParametersdtor_AlgorithmParameters13_user,
            (LPVOID *)&CryptoPP__AlgorithmParametersdtor_AlgorithmParameters13_next,
            (LPVOID)cast_pointer_function(CryptoPP__AlgorithmParametersdtor_AlgorithmParameters13_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>::*)())&CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>::dtor_AlgorithmParameters) },
        
        {   (LPVOID)0x1404602d0L,
            (LPVOID *)&CryptoPP__AlgorithmParametersctor_AlgorithmParameters2_user,
            (LPVOID *)&CryptoPP__AlgorithmParametersctor_AlgorithmParameters2_next,
            (LPVOID)cast_pointer_function(CryptoPP__AlgorithmParametersctor_AlgorithmParameters2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AlgorithmParameters<CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>,bool>::*)(struct CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>*, char*, bool*, bool))&CryptoPP::AlgorithmParameters<CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>,bool>::ctor_AlgorithmParameters) },
        {   (LPVOID)0x1404603b0L,
            (LPVOID *)&CryptoPP__AlgorithmParametersGetParent4_user,
            (LPVOID *)&CryptoPP__AlgorithmParametersGetParent4_next,
            (LPVOID)cast_pointer_function(CryptoPP__AlgorithmParametersGetParent4_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::NameValuePairs*(CryptoPP::AlgorithmParameters<CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>,bool>::*)())&CryptoPP::AlgorithmParameters<CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>,bool>::GetParent) },
        {   (LPVOID)0x14044dbe0L,
            (LPVOID *)&CryptoPP__AlgorithmParametersdtor_AlgorithmParameters9_user,
            (LPVOID *)&CryptoPP__AlgorithmParametersdtor_AlgorithmParameters9_next,
            (LPVOID)cast_pointer_function(CryptoPP__AlgorithmParametersdtor_AlgorithmParameters9_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::AlgorithmParameters<CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>,bool>::*)())&CryptoPP::AlgorithmParameters<CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>,bool>::dtor_AlgorithmParameters) },
        
        {   (LPVOID)0x14054add0L,
            (LPVOID *)&CryptoPP__ByteQueueNodector_ByteQueueNode1_user,
            (LPVOID *)&CryptoPP__ByteQueueNodector_ByteQueueNode1_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueNodector_ByteQueueNode1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ByteQueueNode::*)(struct CryptoPP::ByteQueueNode*))&CryptoPP::ByteQueueNode::ctor_ByteQueueNode) },
        {   (LPVOID)0x14054acf0L,
            (LPVOID *)&CryptoPP__ByteQueueNodector_ByteQueueNode2_user,
            (LPVOID *)&CryptoPP__ByteQueueNodector_ByteQueueNode2_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueNodector_ByteQueueNode2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ByteQueueNode::*)(uint64_t))&CryptoPP::ByteQueueNode::ctor_ByteQueueNode) },
        {   (LPVOID)0x14054aec0L,
            (LPVOID *)&CryptoPP__ByteQueueNodeClear3_user,
            (LPVOID *)&CryptoPP__ByteQueueNodeClear3_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueNodeClear3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ByteQueueNode::*)())&CryptoPP::ByteQueueNode::Clear) },
        {   (LPVOID)0x14054aea0L,
            (LPVOID *)&CryptoPP__ByteQueueNodeCurrentSize4_user,
            (LPVOID *)&CryptoPP__ByteQueueNodeCurrentSize4_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueNodeCurrentSize4_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::ByteQueueNode::*)())&CryptoPP::ByteQueueNode::CurrentSize) },
        {   (LPVOID)0x14054b000L,
            (LPVOID *)&CryptoPP__ByteQueueNodeGet5_user,
            (LPVOID *)&CryptoPP__ByteQueueNodeGet5_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueNodeGet5_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::ByteQueueNode::*)(uint8_t*))&CryptoPP::ByteQueueNode::Get) },
        {   (LPVOID)0x14054afa0L,
            (LPVOID *)&CryptoPP__ByteQueueNodeMaxSize6_user,
            (LPVOID *)&CryptoPP__ByteQueueNodeMaxSize6_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueNodeMaxSize6_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::ByteQueueNode::*)())&CryptoPP::ByteQueueNode::MaxSize) },
        {   (LPVOID)0x14054b050L,
            (LPVOID *)&CryptoPP__ByteQueueNodePeek7_user,
            (LPVOID *)&CryptoPP__ByteQueueNodePeek7_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueNodePeek7_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::ByteQueueNode::*)(uint8_t*))&CryptoPP::ByteQueueNode::Peek) },
        {   (LPVOID)0x14054aee0L,
            (LPVOID *)&CryptoPP__ByteQueueNodePut8_user,
            (LPVOID *)&CryptoPP__ByteQueueNodePut8_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueNodePut8_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::ByteQueueNode::*)(uint8_t*, uint64_t))&CryptoPP::ByteQueueNode::Put) },
        {   (LPVOID)0x14054afc0L,
            (LPVOID *)&CryptoPP__ByteQueueNodeUsedUp9_user,
            (LPVOID *)&CryptoPP__ByteQueueNodeUsedUp9_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueNodeUsedUp9_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::ByteQueueNode::*)())&CryptoPP::ByteQueueNode::UsedUp) },
        {   (LPVOID)0x14054ae80L,
            (LPVOID *)&CryptoPP__ByteQueueNodedtor_ByteQueueNode10_user,
            (LPVOID *)&CryptoPP__ByteQueueNodedtor_ByteQueueNode10_next,
            (LPVOID)cast_pointer_function(CryptoPP__ByteQueueNodedtor_ByteQueueNode10_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ByteQueueNode::*)())&CryptoPP::ByteQueueNode::dtor_ByteQueueNode) },
        
        {   (LPVOID)0x14057ed30L,
            (LPVOID *)&CryptoPP__NameCofactor1_user,
            (LPVOID *)&CryptoPP__NameCofactor1_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameCofactor1_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::Cofactor) },
        {   (LPVOID)0x14057ea70L,
            (LPVOID *)&CryptoPP__NameCurve2_user,
            (LPVOID *)&CryptoPP__NameCurve2_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameCurve2_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::Curve) },
        {   (LPVOID)0x140579d90L,
            (LPVOID *)&CryptoPP__NameDecodingLookupArray3_user,
            (LPVOID *)&CryptoPP__NameDecodingLookupArray3_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameDecodingLookupArray3_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::DecodingLookupArray) },
        {   (LPVOID)0x14063e490L,
            (LPVOID *)&CryptoPP__NameEncodingLookupArray4_user,
            (LPVOID *)&CryptoPP__NameEncodingLookupArray4_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameEncodingLookupArray4_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::EncodingLookupArray) },
        {   (LPVOID)0x1404646a0L,
            (LPVOID *)&CryptoPP__NameEncodingParameters6_user,
            (LPVOID *)&CryptoPP__NameEncodingParameters6_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameEncodingParameters6_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::EncodingParameters) },
        {   (LPVOID)0x14061ce30L,
            (LPVOID *)&CryptoPP__NameFeedbackSize7_user,
            (LPVOID *)&CryptoPP__NameFeedbackSize7_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameFeedbackSize7_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::FeedbackSize) },
        {   (LPVOID)0x14057ea80L,
            (LPVOID *)&CryptoPP__NameGroupOID8_user,
            (LPVOID *)&CryptoPP__NameGroupOID8_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameGroupOID8_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::GroupOID) },
        {   (LPVOID)0x14063fe70L,
            (LPVOID *)&CryptoPP__NameGroupSize9_user,
            (LPVOID *)&CryptoPP__NameGroupSize9_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameGroupSize9_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::GroupSize) },
        {   (LPVOID)0x1405ff630L,
            (LPVOID *)&CryptoPP__NameHashVerificationFilterFlags10_user,
            (LPVOID *)&CryptoPP__NameHashVerificationFilterFlags10_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameHashVerificationFilterFlags10_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::HashVerificationFilterFlags) },
        {   (LPVOID)0x1405f6780L,
            (LPVOID *)&CryptoPP__NameIV11_user,
            (LPVOID *)&CryptoPP__NameIV11_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameIV11_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::IV) },
        {   (LPVOID)0x14044d080L,
            (LPVOID *)&CryptoPP__NameInputBinaryMode13_user,
            (LPVOID *)&CryptoPP__NameInputBinaryMode13_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameInputBinaryMode13_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::InputBinaryMode) },
        {   (LPVOID)0x1405ffb60L,
            (LPVOID *)&CryptoPP__NameInputBuffer14_user,
            (LPVOID *)&CryptoPP__NameInputBuffer14_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameInputBuffer14_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::InputBuffer) },
        {   (LPVOID)0x14044d070L,
            (LPVOID *)&CryptoPP__NameInputFileName16_user,
            (LPVOID *)&CryptoPP__NameInputFileName16_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameInputFileName16_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::InputFileName) },
        {   (LPVOID)0x14061e560L,
            (LPVOID *)&CryptoPP__NameInputStreamPointer17_user,
            (LPVOID *)&CryptoPP__NameInputStreamPointer17_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameInputStreamPointer17_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::InputStreamPointer) },
        {   (LPVOID)0x140463470L,
            (LPVOID *)&CryptoPP__NameKeyDerivationParameters19_user,
            (LPVOID *)&CryptoPP__NameKeyDerivationParameters19_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameKeyDerivationParameters19_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::KeyDerivationParameters) },
        {   (LPVOID)0x140579d80L,
            (LPVOID *)&CryptoPP__NameLog2Base20_user,
            (LPVOID *)&CryptoPP__NameLog2Base20_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameLog2Base20_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::Log2Base) },
        {   (LPVOID)0x140633d90L,
            (LPVOID *)&CryptoPP__NameModulus21_user,
            (LPVOID *)&CryptoPP__NameModulus21_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameModulus21_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::Modulus) },
        {   (LPVOID)0x14061e980L,
            (LPVOID *)&CryptoPP__NameOutputBinaryMode22_user,
            (LPVOID *)&CryptoPP__NameOutputBinaryMode22_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameOutputBinaryMode22_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::OutputBinaryMode) },
        {   (LPVOID)0x1405ff380L,
            (LPVOID *)&CryptoPP__NameOutputBuffer23_user,
            (LPVOID *)&CryptoPP__NameOutputBuffer23_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameOutputBuffer23_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::OutputBuffer) },
        {   (LPVOID)0x14061e960L,
            (LPVOID *)&CryptoPP__NameOutputFileName24_user,
            (LPVOID *)&CryptoPP__NameOutputFileName24_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameOutputFileName24_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::OutputFileName) },
        {   (LPVOID)0x14061e970L,
            (LPVOID *)&CryptoPP__NameOutputStreamPointer25_user,
            (LPVOID *)&CryptoPP__NameOutputStreamPointer25_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameOutputStreamPointer25_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::OutputStreamPointer) },
        {   (LPVOID)0x14063fe30L,
            (LPVOID *)&CryptoPP__NamePad26_user,
            (LPVOID *)&CryptoPP__NamePad26_next,
            (LPVOID)cast_pointer_function(CryptoPP__NamePad26_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::Pad) },
        {   (LPVOID)0x14063fe40L,
            (LPVOID *)&CryptoPP__NamePaddingByte27_user,
            (LPVOID *)&CryptoPP__NamePaddingByte27_next,
            (LPVOID)cast_pointer_function(CryptoPP__NamePaddingByte27_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::PaddingByte) },
        {   (LPVOID)0x1405ef590L,
            (LPVOID *)&CryptoPP__NamePointerToPrimeSelector28_user,
            (LPVOID *)&CryptoPP__NamePointerToPrimeSelector28_next,
            (LPVOID)cast_pointer_function(CryptoPP__NamePointerToPrimeSelector28_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::PointerToPrimeSelector) },
        {   (LPVOID)0x1404661d0L,
            (LPVOID *)&CryptoPP__NamePrivateExponent30_user,
            (LPVOID *)&CryptoPP__NamePrivateExponent30_next,
            (LPVOID)cast_pointer_function(CryptoPP__NamePrivateExponent30_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::PrivateExponent) },
        {   (LPVOID)0x1404660a0L,
            (LPVOID *)&CryptoPP__NamePublicElement32_user,
            (LPVOID *)&CryptoPP__NamePublicElement32_next,
            (LPVOID)cast_pointer_function(CryptoPP__NamePublicElement32_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::PublicElement) },
        {   (LPVOID)0x1405ff5c0L,
            (LPVOID *)&CryptoPP__NamePutMessage33_user,
            (LPVOID *)&CryptoPP__NamePutMessage33_next,
            (LPVOID)cast_pointer_function(CryptoPP__NamePutMessage33_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::PutMessage) },
        {   (LPVOID)0x1405f6710L,
            (LPVOID *)&CryptoPP__NameRounds34_user,
            (LPVOID *)&CryptoPP__NameRounds34_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameRounds34_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::Rounds) },
        {   (LPVOID)0x14063fe50L,
            (LPVOID *)&CryptoPP__NameSeparator35_user,
            (LPVOID *)&CryptoPP__NameSeparator35_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameSeparator35_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::Separator) },
        {   (LPVOID)0x1405ff920L,
            (LPVOID *)&CryptoPP__NameSignatureVerificationFilterFlags36_user,
            (LPVOID *)&CryptoPP__NameSignatureVerificationFilterFlags36_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameSignatureVerificationFilterFlags36_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::SignatureVerificationFilterFlags) },
        {   (LPVOID)0x14055b780L,
            (LPVOID *)&CryptoPP__NameStolenIV37_user,
            (LPVOID *)&CryptoPP__NameStolenIV37_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameStolenIV37_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::StolenIV) },
        {   (LPVOID)0x140469cb0L,
            (LPVOID *)&CryptoPP__NameSubgroupGenerator39_user,
            (LPVOID *)&CryptoPP__NameSubgroupGenerator39_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameSubgroupGenerator39_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::SubgroupGenerator) },
        {   (LPVOID)0x140469ca0L,
            (LPVOID *)&CryptoPP__NameSubgroupOrder41_user,
            (LPVOID *)&CryptoPP__NameSubgroupOrder41_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameSubgroupOrder41_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::SubgroupOrder) },
        {   (LPVOID)0x14063fe60L,
            (LPVOID *)&CryptoPP__NameTerminator42_user,
            (LPVOID *)&CryptoPP__NameTerminator42_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameTerminator42_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::Terminator) },
        {   (LPVOID)0x1405ff5d0L,
            (LPVOID *)&CryptoPP__NameTruncatedDigestSize43_user,
            (LPVOID *)&CryptoPP__NameTruncatedDigestSize43_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameTruncatedDigestSize43_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::TruncatedDigestSize) },
        {   (LPVOID)0x14063e480L,
            (LPVOID *)&CryptoPP__NameUppercase44_user,
            (LPVOID *)&CryptoPP__NameUppercase44_next,
            (LPVOID)cast_pointer_function(CryptoPP__NameUppercase44_wrapper),
            (LPVOID)cast_pointer_function((char*(CryptoPP::Name::*)())&CryptoPP::Name::Uppercase) },
        
        {   (LPVOID)0x140579b70L,
            (LPVOID *)&CryptoPP__BaseN_Decoderctor_BaseN_Decoder1_user,
            (LPVOID *)&CryptoPP__BaseN_Decoderctor_BaseN_Decoder1_next,
            (LPVOID)cast_pointer_function(CryptoPP__BaseN_Decoderctor_BaseN_Decoder1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::BaseN_Decoder::*)(int*, int, struct CryptoPP::BufferedTransformation*))&CryptoPP::BaseN_Decoder::ctor_BaseN_Decoder) },
        {   (LPVOID)0x14063f670L,
            (LPVOID *)&CryptoPP__BaseN_DecoderInitializeDecodingLookupArray2_user,
            (LPVOID *)&CryptoPP__BaseN_DecoderInitializeDecodingLookupArray2_next,
            (LPVOID)cast_pointer_function(CryptoPP__BaseN_DecoderInitializeDecodingLookupArray2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BaseN_Decoder::*)(int*, uint8_t*, unsigned int, bool))&CryptoPP::BaseN_Decoder::InitializeDecodingLookupArray) },
        {   (LPVOID)0x14063f020L,
            (LPVOID *)&CryptoPP__BaseN_DecoderIsolatedInitialize3_user,
            (LPVOID *)&CryptoPP__BaseN_DecoderIsolatedInitialize3_next,
            (LPVOID)cast_pointer_function(CryptoPP__BaseN_DecoderIsolatedInitialize3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BaseN_Decoder::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::BaseN_Decoder::IsolatedInitialize) },
        {   (LPVOID)0x14063f1f0L,
            (LPVOID *)&CryptoPP__BaseN_DecoderPut24_user,
            (LPVOID *)&CryptoPP__BaseN_DecoderPut24_next,
            (LPVOID)cast_pointer_function(CryptoPP__BaseN_DecoderPut24_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::BaseN_Decoder::*)(uint8_t*, uint64_t, int, bool))&CryptoPP::BaseN_Decoder::Put2) },
        {   (LPVOID)0x140579ec0L,
            (LPVOID *)&CryptoPP__BaseN_Decoderdtor_BaseN_Decoder5_user,
            (LPVOID *)&CryptoPP__BaseN_Decoderdtor_BaseN_Decoder5_next,
            (LPVOID)cast_pointer_function(CryptoPP__BaseN_Decoderdtor_BaseN_Decoder5_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::BaseN_Decoder::*)())&CryptoPP::BaseN_Decoder::dtor_BaseN_Decoder) },
        
        {   (LPVOID)0x14063e380L,
            (LPVOID *)&CryptoPP__HexDecoderGetDefaultDecodingLookupArray1_user,
            (LPVOID *)&CryptoPP__HexDecoderGetDefaultDecodingLookupArray1_next,
            (LPVOID)cast_pointer_function(CryptoPP__HexDecoderGetDefaultDecodingLookupArray1_wrapper),
            (LPVOID)cast_pointer_function((int*(CryptoPP::HexDecoder::*)())&CryptoPP::HexDecoder::GetDefaultDecodingLookupArray) },
        {   (LPVOID)0x140579b10L,
            (LPVOID *)&CryptoPP__HexDecoderctor_HexDecoder2_user,
            (LPVOID *)&CryptoPP__HexDecoderctor_HexDecoder2_next,
            (LPVOID)cast_pointer_function(CryptoPP__HexDecoderctor_HexDecoder2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::HexDecoder::*)(struct CryptoPP::BufferedTransformation*))&CryptoPP::HexDecoder::ctor_HexDecoder) },
        {   (LPVOID)0x14063e1f0L,
            (LPVOID *)&CryptoPP__HexDecoderIsolatedInitialize3_user,
            (LPVOID *)&CryptoPP__HexDecoderIsolatedInitialize3_next,
            (LPVOID)cast_pointer_function(CryptoPP__HexDecoderIsolatedInitialize3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::HexDecoder::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::HexDecoder::IsolatedInitialize) },
        {   (LPVOID)0x140579f80L,
            (LPVOID *)&CryptoPP__HexDecoderdtor_HexDecoder4_user,
            (LPVOID *)&CryptoPP__HexDecoderdtor_HexDecoder4_next,
            (LPVOID)cast_pointer_function(CryptoPP__HexDecoderdtor_HexDecoder4_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::HexDecoder::*)())&CryptoPP::HexDecoder::dtor_HexDecoder) },
        
        {   (LPVOID)0x14056e6b0L,
            (LPVOID *)&CryptoPP__WindowSliderFindNextWindow1_user,
            (LPVOID *)&CryptoPP__WindowSliderFindNextWindow1_next,
            (LPVOID)cast_pointer_function(CryptoPP__WindowSliderFindNextWindow1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::WindowSlider::*)())&CryptoPP::WindowSlider::FindNextWindow) },
        {   (LPVOID)0x14056e500L,
            (LPVOID *)&CryptoPP__WindowSliderctor_WindowSlider2_user,
            (LPVOID *)&CryptoPP__WindowSliderctor_WindowSlider2_next,
            (LPVOID)cast_pointer_function(CryptoPP__WindowSliderctor_WindowSlider2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::WindowSlider::*)(struct CryptoPP::Integer*, bool, unsigned int))&CryptoPP::WindowSlider::ctor_WindowSlider) },
        {   (LPVOID)0x1405980d0L,
            (LPVOID *)&CryptoPP__WindowSliderctor_WindowSlider3_user,
            (LPVOID *)&CryptoPP__WindowSliderctor_WindowSlider3_next,
            (LPVOID)cast_pointer_function(CryptoPP__WindowSliderctor_WindowSlider3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::WindowSlider::*)(struct CryptoPP::WindowSlider*))&CryptoPP::WindowSlider::ctor_WindowSlider) },
        {   (LPVOID)0x14058a3f0L,
            (LPVOID *)&CryptoPP__WindowSliderdtor_WindowSlider4_user,
            (LPVOID *)&CryptoPP__WindowSliderdtor_WindowSlider4_next,
            (LPVOID)cast_pointer_function(CryptoPP__WindowSliderdtor_WindowSlider4_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::WindowSlider::*)())&CryptoPP::WindowSlider::dtor_WindowSlider) },
        
        {   (LPVOID)0x1405f3210L,
            (LPVOID *)&CryptoPP__DWordctor_DWord1_user,
            (LPVOID *)&CryptoPP__DWordctor_DWord1_next,
            (LPVOID)cast_pointer_function(CryptoPP__DWordctor_DWord1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DWord::*)(uint64_t))&CryptoPP::DWord::ctor_DWord) },
        {   (LPVOID)0x1405eec80L,
            (LPVOID *)&CryptoPP__DWordctor_DWord2_user,
            (LPVOID *)&CryptoPP__DWordctor_DWord2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DWordctor_DWord2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DWord::*)(uint64_t, uint64_t))&CryptoPP::DWord::ctor_DWord) },
        {   (LPVOID)0x1405f32b0L,
            (LPVOID *)&CryptoPP__DWordctor_DWord3_user,
            (LPVOID *)&CryptoPP__DWordctor_DWord3_next,
            (LPVOID)cast_pointer_function(CryptoPP__DWordctor_DWord3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DWord::*)())&CryptoPP::DWord::ctor_DWord) },
        {   (LPVOID)0x1405eecc0L,
            (LPVOID *)&CryptoPP__DWordGetHighHalf4_user,
            (LPVOID *)&CryptoPP__DWordGetHighHalf4_next,
            (LPVOID)cast_pointer_function(CryptoPP__DWordGetHighHalf4_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::DWord::*)())&CryptoPP::DWord::GetHighHalf) },
        {   (LPVOID)0x1405f33f0L,
            (LPVOID *)&CryptoPP__DWordGetHighHalfAsBorrow5_user,
            (LPVOID *)&CryptoPP__DWordGetHighHalfAsBorrow5_next,
            (LPVOID)cast_pointer_function(CryptoPP__DWordGetHighHalfAsBorrow5_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::DWord::*)())&CryptoPP::DWord::GetHighHalfAsBorrow) },
        {   (LPVOID)0x1405eecb0L,
            (LPVOID *)&CryptoPP__DWordGetLowHalf6_user,
            (LPVOID *)&CryptoPP__DWordGetLowHalf6_next,
            (LPVOID)cast_pointer_function(CryptoPP__DWordGetLowHalf6_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::DWord::*)())&CryptoPP::DWord::GetLowHalf) },
        
        {   (LPVOID)0x1405ef730L,
            (LPVOID *)&CryptoPP__KDF2_RNGGenerateBlock1_user,
            (LPVOID *)&CryptoPP__KDF2_RNGGenerateBlock1_next,
            (LPVOID)cast_pointer_function(CryptoPP__KDF2_RNGGenerateBlock1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::KDF2_RNG::*)(uint8_t*, uint64_t))&CryptoPP::KDF2_RNG::GenerateBlock) },
        {   (LPVOID)0x1405ef5a0L,
            (LPVOID *)&CryptoPP__KDF2_RNGctor_KDF2_RNG2_user,
            (LPVOID *)&CryptoPP__KDF2_RNGctor_KDF2_RNG2_next,
            (LPVOID)cast_pointer_function(CryptoPP__KDF2_RNGctor_KDF2_RNG2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::KDF2_RNG::*)(uint8_t*, uint64_t))&CryptoPP::KDF2_RNG::ctor_KDF2_RNG) },
        {   (LPVOID)0x1405ef820L,
            (LPVOID *)&CryptoPP__KDF2_RNGdtor_KDF2_RNG3_user,
            (LPVOID *)&CryptoPP__KDF2_RNGdtor_KDF2_RNG3_next,
            (LPVOID)cast_pointer_function(CryptoPP__KDF2_RNGdtor_KDF2_RNG3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::KDF2_RNG::*)())&CryptoPP::KDF2_RNG::dtor_KDF2_RNG) },
        
        {   (LPVOID)0x1405f0ec0L,
            (LPVOID *)&CryptoPP__WordGetHighHalf1_user,
            (LPVOID *)&CryptoPP__WordGetHighHalf1_next,
            (LPVOID)cast_pointer_function(CryptoPP__WordGetHighHalf1_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::Word::*)())&CryptoPP::Word::GetHighHalf) },
        {   (LPVOID)0x1405f2da0L,
            (LPVOID *)&CryptoPP__WordGetHighHalfAsBorrow2_user,
            (LPVOID *)&CryptoPP__WordGetHighHalfAsBorrow2_next,
            (LPVOID)cast_pointer_function(CryptoPP__WordGetHighHalfAsBorrow2_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::Word::*)())&CryptoPP::Word::GetHighHalfAsBorrow) },
        {   (LPVOID)0x1405f0eb0L,
            (LPVOID *)&CryptoPP__WordGetLowHalf3_user,
            (LPVOID *)&CryptoPP__WordGetLowHalf3_next,
            (LPVOID)cast_pointer_function(CryptoPP__WordGetLowHalf3_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::Word::*)())&CryptoPP::Word::GetLowHalf) },
        {   (LPVOID)0x1405efb60L,
            (LPVOID *)&CryptoPP__WordGetWhole4_user,
            (LPVOID *)&CryptoPP__WordGetWhole4_next,
            (LPVOID)cast_pointer_function(CryptoPP__WordGetWhole4_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::Word::*)())&CryptoPP::Word::GetWhole) },
        {   (LPVOID)0x1405efcb0L,
            (LPVOID *)&CryptoPP__Wordctor_Word5_user,
            (LPVOID *)&CryptoPP__Wordctor_Word5_next,
            (LPVOID)cast_pointer_function(CryptoPP__Wordctor_Word5_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Word::*)(unsigned int, unsigned int))&CryptoPP::Word::ctor_Word) },
        {   (LPVOID)0x1405efb40L,
            (LPVOID *)&CryptoPP__Wordctor_Word6_user,
            (LPVOID *)&CryptoPP__Wordctor_Word6_next,
            (LPVOID)cast_pointer_function(CryptoPP__Wordctor_Word6_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Word::*)(uint64_t))&CryptoPP::Word::ctor_Word) },
        {   (LPVOID)0x1405f2cc0L,
            (LPVOID *)&CryptoPP__Wordctor_Word7_user,
            (LPVOID *)&CryptoPP__Wordctor_Word7_next,
            (LPVOID)cast_pointer_function(CryptoPP__Wordctor_Word7_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::Word::*)())&CryptoPP::Word::ctor_Word) },
        
        {   (LPVOID)0x1405f6870L,
            (LPVOID *)&CryptoPP__ClassNullRNGctor_ClassNullRNG1_user,
            (LPVOID *)&CryptoPP__ClassNullRNGctor_ClassNullRNG1_next,
            (LPVOID)cast_pointer_function(CryptoPP__ClassNullRNGctor_ClassNullRNG1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ClassNullRNG::*)())&CryptoPP::ClassNullRNG::ctor_ClassNullRNG) },
        {   (LPVOID)0x1405f6900L,
            (LPVOID *)&CryptoPP__ClassNullRNGGenerateBlock2_user,
            (LPVOID *)&CryptoPP__ClassNullRNGGenerateBlock2_next,
            (LPVOID)cast_pointer_function(CryptoPP__ClassNullRNGGenerateBlock2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ClassNullRNG::*)(uint8_t*, uint64_t))&CryptoPP::ClassNullRNG::GenerateBlock) },
        {   (LPVOID)0x1405f69f0L,
            (LPVOID *)&CryptoPP__ClassNullRNGdtor_ClassNullRNG3_user,
            (LPVOID *)&CryptoPP__ClassNullRNGdtor_ClassNullRNG3_next,
            (LPVOID)cast_pointer_function(CryptoPP__ClassNullRNGdtor_ClassNullRNG3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ClassNullRNG::*)())&CryptoPP::ClassNullRNG::dtor_ClassNullRNG) },
        
        {   (LPVOID)0x140614de0L,
            (LPVOID *)&CryptoPP__ProjectivePointctor_ProjectivePoint1_user,
            (LPVOID *)&CryptoPP__ProjectivePointctor_ProjectivePoint1_next,
            (LPVOID)cast_pointer_function(CryptoPP__ProjectivePointctor_ProjectivePoint1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ProjectivePoint::*)(struct CryptoPP::ProjectivePoint*))&CryptoPP::ProjectivePoint::ctor_ProjectivePoint) },
        {   (LPVOID)0x140611b30L,
            (LPVOID *)&CryptoPP__ProjectivePointctor_ProjectivePoint2_user,
            (LPVOID *)&CryptoPP__ProjectivePointctor_ProjectivePoint2_next,
            (LPVOID)cast_pointer_function(CryptoPP__ProjectivePointctor_ProjectivePoint2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ProjectivePoint::*)())&CryptoPP::ProjectivePoint::ctor_ProjectivePoint) },
        {   (LPVOID)0x140612210L,
            (LPVOID *)&CryptoPP__ProjectivePointdtor_ProjectivePoint3_user,
            (LPVOID *)&CryptoPP__ProjectivePointdtor_ProjectivePoint3_next,
            (LPVOID)cast_pointer_function(CryptoPP__ProjectivePointdtor_ProjectivePoint3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ProjectivePoint::*)())&CryptoPP::ProjectivePoint::dtor_ProjectivePoint) },
        
        {   (LPVOID)0x140611bc0L,
            (LPVOID *)&CryptoPP__ProjectiveDoublingDouble1_user,
            (LPVOID *)&CryptoPP__ProjectiveDoublingDouble1_next,
            (LPVOID)cast_pointer_function(CryptoPP__ProjectiveDoublingDouble1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::ProjectiveDoubling::*)())&CryptoPP::ProjectiveDoubling::Double) },
        {   (LPVOID)0x140611860L,
            (LPVOID *)&CryptoPP__ProjectiveDoublingctor_ProjectiveDoubling2_user,
            (LPVOID *)&CryptoPP__ProjectiveDoublingctor_ProjectiveDoubling2_next,
            (LPVOID)cast_pointer_function(CryptoPP__ProjectiveDoublingctor_ProjectiveDoubling2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ProjectiveDoubling::*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::ECPPoint*))&CryptoPP::ProjectiveDoubling::ctor_ProjectiveDoubling) },
        {   (LPVOID)0x140612450L,
            (LPVOID *)&CryptoPP__ProjectiveDoublingdtor_ProjectiveDoubling3_user,
            (LPVOID *)&CryptoPP__ProjectiveDoublingdtor_ProjectiveDoubling3_next,
            (LPVOID)cast_pointer_function(CryptoPP__ProjectiveDoublingdtor_ProjectiveDoubling3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ProjectiveDoubling::*)())&CryptoPP::ProjectiveDoubling::dtor_ProjectiveDoubling) },
        
        {   (LPVOID)0x14064abc0L,
            (LPVOID *)&CryptoPP__PrimeAndGeneratorGenerate1_user,
            (LPVOID *)&CryptoPP__PrimeAndGeneratorGenerate1_next,
            (LPVOID)cast_pointer_function(CryptoPP__PrimeAndGeneratorGenerate1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PrimeAndGenerator::*)(int, struct CryptoPP::RandomNumberGenerator*, unsigned int, unsigned int))&CryptoPP::PrimeAndGenerator::Generate) },
        {   (LPVOID)0x140633cf0L,
            (LPVOID *)&CryptoPP__PrimeAndGeneratorctor_Generator2_user,
            (LPVOID *)&CryptoPP__PrimeAndGeneratorctor_Generator2_next,
            (LPVOID)cast_pointer_function(CryptoPP__PrimeAndGeneratorctor_Generator2_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::PrimeAndGenerator::*)())&CryptoPP::PrimeAndGenerator::ctor_Generator) },
        {   (LPVOID)0x140633cd0L,
            (LPVOID *)&CryptoPP__PrimeAndGeneratorPrime3_user,
            (LPVOID *)&CryptoPP__PrimeAndGeneratorPrime3_next,
            (LPVOID)cast_pointer_function(CryptoPP__PrimeAndGeneratorPrime3_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::PrimeAndGenerator::*)())&CryptoPP::PrimeAndGenerator::Prime) },
        {   (LPVOID)0x140633c40L,
            (LPVOID *)&CryptoPP__PrimeAndGeneratorctor_PrimeAndGenerator4_user,
            (LPVOID *)&CryptoPP__PrimeAndGeneratorctor_PrimeAndGenerator4_next,
            (LPVOID)cast_pointer_function(CryptoPP__PrimeAndGeneratorctor_PrimeAndGenerator4_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PrimeAndGenerator::*)())&CryptoPP::PrimeAndGenerator::ctor_PrimeAndGenerator) },
        {   (LPVOID)0x140633ce0L,
            (LPVOID *)&CryptoPP__PrimeAndGeneratorSubPrime5_user,
            (LPVOID *)&CryptoPP__PrimeAndGeneratorSubPrime5_next,
            (LPVOID)cast_pointer_function(CryptoPP__PrimeAndGeneratorSubPrime5_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::Integer*(CryptoPP::PrimeAndGenerator::*)())&CryptoPP::PrimeAndGenerator::SubPrime) },
        {   (LPVOID)0x140633d00L,
            (LPVOID *)&CryptoPP__PrimeAndGeneratordtor_PrimeAndGenerator6_user,
            (LPVOID *)&CryptoPP__PrimeAndGeneratordtor_PrimeAndGenerator6_next,
            (LPVOID)cast_pointer_function(CryptoPP__PrimeAndGeneratordtor_PrimeAndGenerator6_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PrimeAndGenerator::*)())&CryptoPP::PrimeAndGenerator::dtor_PrimeAndGenerator) },
        
        {   (LPVOID)0x14063e750L,
            (LPVOID *)&CryptoPP__BaseN_EncoderIsolatedInitialize1_user,
            (LPVOID *)&CryptoPP__BaseN_EncoderIsolatedInitialize1_next,
            (LPVOID)cast_pointer_function(CryptoPP__BaseN_EncoderIsolatedInitialize1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::BaseN_Encoder::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::BaseN_Encoder::IsolatedInitialize) },
        {   (LPVOID)0x14063e990L,
            (LPVOID *)&CryptoPP__BaseN_EncoderPut22_user,
            (LPVOID *)&CryptoPP__BaseN_EncoderPut22_next,
            (LPVOID)cast_pointer_function(CryptoPP__BaseN_EncoderPut22_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::BaseN_Encoder::*)(uint8_t*, uint64_t, int, bool))&CryptoPP::BaseN_Encoder::Put2) },
        
        {   (LPVOID)0x14063f820L,
            (LPVOID *)&CryptoPP__GrouperIsolatedInitialize1_user,
            (LPVOID *)&CryptoPP__GrouperIsolatedInitialize1_next,
            (LPVOID)cast_pointer_function(CryptoPP__GrouperIsolatedInitialize1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Grouper::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::Grouper::IsolatedInitialize) },
        {   (LPVOID)0x14063f9d0L,
            (LPVOID *)&CryptoPP__GrouperPut22_user,
            (LPVOID *)&CryptoPP__GrouperPut22_next,
            (LPVOID)cast_pointer_function(CryptoPP__GrouperPut22_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::Grouper::*)(uint8_t*, uint64_t, int, bool))&CryptoPP::Grouper::Put2) },
        
        {   (LPVOID)0x1406440f0L,
            (LPVOID *)&CryptoPP__PrimeSieveDoSieve1_user,
            (LPVOID *)&CryptoPP__PrimeSieveDoSieve1_next,
            (LPVOID)cast_pointer_function(CryptoPP__PrimeSieveDoSieve1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::PrimeSieve::*)())&CryptoPP::PrimeSieve::DoSieve) },
        {   (LPVOID)0x1406437e0L,
            (LPVOID *)&CryptoPP__PrimeSieveNextCandidate2_user,
            (LPVOID *)&CryptoPP__PrimeSieveNextCandidate2_next,
            (LPVOID)cast_pointer_function(CryptoPP__PrimeSieveNextCandidate2_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::PrimeSieve::*)(struct CryptoPP::Integer*))&CryptoPP::PrimeSieve::NextCandidate) },
        {   (LPVOID)0x1406436a0L,
            (LPVOID *)&CryptoPP__PrimeSievector_PrimeSieve3_user,
            (LPVOID *)&CryptoPP__PrimeSievector_PrimeSieve3_next,
            (LPVOID)cast_pointer_function(CryptoPP__PrimeSievector_PrimeSieve3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PrimeSieve::*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, int))&CryptoPP::PrimeSieve::ctor_PrimeSieve) },
        {   (LPVOID)0x14064ca80L,
            (LPVOID *)&CryptoPP__PrimeSievedtor_PrimeSieve4_user,
            (LPVOID *)&CryptoPP__PrimeSievedtor_PrimeSieve4_next,
            (LPVOID)cast_pointer_function(CryptoPP__PrimeSievedtor_PrimeSieve4_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PrimeSieve::*)())&CryptoPP::PrimeSieve::dtor_PrimeSieve) },
        
        {   (LPVOID)0x140655190L,
            (LPVOID *)&CryptoPP__MessageQueueAnyRetrievable1_user,
            (LPVOID *)&CryptoPP__MessageQueueAnyRetrievable1_next,
            (LPVOID)cast_pointer_function(CryptoPP__MessageQueueAnyRetrievable1_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::MessageQueue::*)())&CryptoPP::MessageQueue::AnyRetrievable) },
        {   (LPVOID)0x140654540L,
            (LPVOID *)&CryptoPP__MessageQueueGetNextMessage2_user,
            (LPVOID *)&CryptoPP__MessageQueueGetNextMessage2_next,
            (LPVOID)cast_pointer_function(CryptoPP__MessageQueueGetNextMessage2_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::MessageQueue::*)())&CryptoPP::MessageQueue::GetNextMessage) },
        {   (LPVOID)0x140655100L,
            (LPVOID *)&CryptoPP__MessageQueueIsolatedFlush3_user,
            (LPVOID *)&CryptoPP__MessageQueueIsolatedFlush3_next,
            (LPVOID)cast_pointer_function(CryptoPP__MessageQueueIsolatedFlush3_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::MessageQueue::*)(bool, bool))&CryptoPP::MessageQueue::IsolatedFlush) },
        {   (LPVOID)0x140654fb0L,
            (LPVOID *)&CryptoPP__MessageQueueIsolatedInitialize4_user,
            (LPVOID *)&CryptoPP__MessageQueueIsolatedInitialize4_next,
            (LPVOID)cast_pointer_function(CryptoPP__MessageQueueIsolatedInitialize4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::MessageQueue::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::MessageQueue::IsolatedInitialize) },
        {   (LPVOID)0x140655120L,
            (LPVOID *)&CryptoPP__MessageQueueIsolatedMessageSeriesEnd5_user,
            (LPVOID *)&CryptoPP__MessageQueueIsolatedMessageSeriesEnd5_next,
            (LPVOID)cast_pointer_function(CryptoPP__MessageQueueIsolatedMessageSeriesEnd5_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::MessageQueue::*)(bool))&CryptoPP::MessageQueue::IsolatedMessageSeriesEnd) },
        {   (LPVOID)0x140655160L,
            (LPVOID *)&CryptoPP__MessageQueueMaxRetrievable6_user,
            (LPVOID *)&CryptoPP__MessageQueueMaxRetrievable6_next,
            (LPVOID)cast_pointer_function(CryptoPP__MessageQueueMaxRetrievable6_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::MessageQueue::*)())&CryptoPP::MessageQueue::MaxRetrievable) },
        {   (LPVOID)0x1406542a0L,
            (LPVOID *)&CryptoPP__MessageQueuector_MessageQueue7_user,
            (LPVOID *)&CryptoPP__MessageQueuector_MessageQueue7_next,
            (LPVOID)cast_pointer_function(CryptoPP__MessageQueuector_MessageQueue7_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::MessageQueue::*)(unsigned int))&CryptoPP::MessageQueue::ctor_MessageQueue) },
        {   (LPVOID)0x140655260L,
            (LPVOID *)&CryptoPP__MessageQueueNumberOfMessageSeries8_user,
            (LPVOID *)&CryptoPP__MessageQueueNumberOfMessageSeries8_next,
            (LPVOID)cast_pointer_function(CryptoPP__MessageQueueNumberOfMessageSeries8_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::MessageQueue::*)())&CryptoPP::MessageQueue::NumberOfMessageSeries) },
        {   (LPVOID)0x140655200L,
            (LPVOID *)&CryptoPP__MessageQueueNumberOfMessages9_user,
            (LPVOID *)&CryptoPP__MessageQueueNumberOfMessages9_next,
            (LPVOID)cast_pointer_function(CryptoPP__MessageQueueNumberOfMessages9_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::MessageQueue::*)())&CryptoPP::MessageQueue::NumberOfMessages) },
        {   (LPVOID)0x140655230L,
            (LPVOID *)&CryptoPP__MessageQueueNumberOfMessagesInThisSeries10_user,
            (LPVOID *)&CryptoPP__MessageQueueNumberOfMessagesInThisSeries10_next,
            (LPVOID)cast_pointer_function(CryptoPP__MessageQueueNumberOfMessagesInThisSeries10_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::MessageQueue::*)())&CryptoPP::MessageQueue::NumberOfMessagesInThisSeries) },
        {   (LPVOID)0x140655040L,
            (LPVOID *)&CryptoPP__MessageQueuePut211_user,
            (LPVOID *)&CryptoPP__MessageQueuePut211_next,
            (LPVOID)cast_pointer_function(CryptoPP__MessageQueuePut211_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::MessageQueue::*)(uint8_t*, uint64_t, int, bool))&CryptoPP::MessageQueue::Put2) },
        {   (LPVOID)0x1406548e0L,
            (LPVOID *)&CryptoPP__MessageQueueSpy12_user,
            (LPVOID *)&CryptoPP__MessageQueueSpy12_next,
            (LPVOID)cast_pointer_function(CryptoPP__MessageQueueSpy12_wrapper),
            (LPVOID)cast_pointer_function((uint8_t*(CryptoPP::MessageQueue::*)(uint64_t*))&CryptoPP::MessageQueue::Spy) },
        {   (LPVOID)0x1406551d0L,
            (LPVOID *)&CryptoPP__MessageQueueTotalBytesRetrievable13_user,
            (LPVOID *)&CryptoPP__MessageQueueTotalBytesRetrievable13_next,
            (LPVOID)cast_pointer_function(CryptoPP__MessageQueueTotalBytesRetrievable13_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::MessageQueue::*)())&CryptoPP::MessageQueue::TotalBytesRetrievable) },
        {   (LPVOID)0x140654890L,
            (LPVOID *)&CryptoPP__MessageQueueswap14_user,
            (LPVOID *)&CryptoPP__MessageQueueswap14_next,
            (LPVOID)cast_pointer_function(CryptoPP__MessageQueueswap14_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::MessageQueue::*)(struct CryptoPP::MessageQueue*))&CryptoPP::MessageQueue::swap) },
        {   (LPVOID)0x1406552f0L,
            (LPVOID *)&CryptoPP__MessageQueuedtor_MessageQueue15_user,
            (LPVOID *)&CryptoPP__MessageQueuedtor_MessageQueue15_next,
            (LPVOID)cast_pointer_function(CryptoPP__MessageQueuedtor_MessageQueue15_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::MessageQueue::*)())&CryptoPP::MessageQueue::dtor_MessageQueue) },
        
        {   (LPVOID)0x140660a50L,
            (LPVOID *)&CryptoPP__TimerBaseElapsedTime1_user,
            (LPVOID *)&CryptoPP__TimerBaseElapsedTime1_next,
            (LPVOID)cast_pointer_function(CryptoPP__TimerBaseElapsedTime1_wrapper),
            (LPVOID)cast_pointer_function((uint32_t(CryptoPP::TimerBase::*)())&CryptoPP::TimerBase::ElapsedTime) },
        {   (LPVOID)0x1406609a0L,
            (LPVOID *)&CryptoPP__TimerBaseElapsedTimeAsDouble2_user,
            (LPVOID *)&CryptoPP__TimerBaseElapsedTimeAsDouble2_next,
            (LPVOID)cast_pointer_function(CryptoPP__TimerBaseElapsedTimeAsDouble2_wrapper),
            (LPVOID)cast_pointer_function((double(CryptoPP::TimerBase::*)())&CryptoPP::TimerBase::ElapsedTimeAsDouble) },
        {   (LPVOID)0x140660950L,
            (LPVOID *)&CryptoPP__TimerBaseStartTimer3_user,
            (LPVOID *)&CryptoPP__TimerBaseStartTimer3_next,
            (LPVOID)cast_pointer_function(CryptoPP__TimerBaseStartTimer3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::TimerBase::*)())&CryptoPP::TimerBase::StartTimer) },
        
        {   (LPVOID)0x140660ab0L,
            (LPVOID *)&CryptoPP__TimerGetCurrentTimerValue1_user,
            (LPVOID *)&CryptoPP__TimerGetCurrentTimerValue1_next,
            (LPVOID)cast_pointer_function(CryptoPP__TimerGetCurrentTimerValue1_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::Timer::*)())&CryptoPP::Timer::GetCurrentTimerValue) },
        {   (LPVOID)0x140660be0L,
            (LPVOID *)&CryptoPP__TimerTicksPerSecond2_user,
            (LPVOID *)&CryptoPP__TimerTicksPerSecond2_next,
            (LPVOID)cast_pointer_function(CryptoPP__TimerTicksPerSecond2_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::Timer::*)())&CryptoPP::Timer::TicksPerSecond) },
        
        {   (LPVOID)0x140660d30L,
            (LPVOID *)&CryptoPP__ThreadUserTimerGetCurrentTimerValue1_user,
            (LPVOID *)&CryptoPP__ThreadUserTimerGetCurrentTimerValue1_next,
            (LPVOID)cast_pointer_function(CryptoPP__ThreadUserTimerGetCurrentTimerValue1_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::ThreadUserTimer::*)())&CryptoPP::ThreadUserTimer::GetCurrentTimerValue) },
        {   (LPVOID)0x140660ed0L,
            (LPVOID *)&CryptoPP__ThreadUserTimerTicksPerSecond2_user,
            (LPVOID *)&CryptoPP__ThreadUserTimerTicksPerSecond2_next,
            (LPVOID)cast_pointer_function(CryptoPP__ThreadUserTimerTicksPerSecond2_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::ThreadUserTimer::*)())&CryptoPP::ThreadUserTimer::TicksPerSecond) },
        
        {   (LPVOID)0x140661dc0L,
            (LPVOID *)&CryptoPP__SosemanukPolicyCipherResynchronize1_user,
            (LPVOID *)&CryptoPP__SosemanukPolicyCipherResynchronize1_next,
            (LPVOID)cast_pointer_function(CryptoPP__SosemanukPolicyCipherResynchronize1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SosemanukPolicy::*)(uint8_t*, uint8_t*))&CryptoPP::SosemanukPolicy::CipherResynchronize) },
        {   (LPVOID)0x140661d70L,
            (LPVOID *)&CryptoPP__SosemanukPolicyCipherSetKey2_user,
            (LPVOID *)&CryptoPP__SosemanukPolicyCipherSetKey2_next,
            (LPVOID)cast_pointer_function(CryptoPP__SosemanukPolicyCipherSetKey2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SosemanukPolicy::*)(struct CryptoPP::NameValuePairs*, uint8_t*, uint64_t))&CryptoPP::SosemanukPolicy::CipherSetKey) },
        {   (LPVOID)0x1406631f0L,
            (LPVOID *)&CryptoPP__SosemanukPolicyGetAlignment3_user,
            (LPVOID *)&CryptoPP__SosemanukPolicyGetAlignment3_next,
            (LPVOID)cast_pointer_function(CryptoPP__SosemanukPolicyGetAlignment3_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::SosemanukPolicy::*)())&CryptoPP::SosemanukPolicy::GetAlignment) },
        {   (LPVOID)0x140663210L,
            (LPVOID *)&CryptoPP__SosemanukPolicyGetOptimalBlockSize4_user,
            (LPVOID *)&CryptoPP__SosemanukPolicyGetOptimalBlockSize4_next,
            (LPVOID)cast_pointer_function(CryptoPP__SosemanukPolicyGetOptimalBlockSize4_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CryptoPP::SosemanukPolicy::*)())&CryptoPP::SosemanukPolicy::GetOptimalBlockSize) },
        {   (LPVOID)0x140663230L,
            (LPVOID *)&CryptoPP__SosemanukPolicyOperateKeystream5_user,
            (LPVOID *)&CryptoPP__SosemanukPolicyOperateKeystream5_next,
            (LPVOID)cast_pointer_function(CryptoPP__SosemanukPolicyOperateKeystream5_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::SosemanukPolicy::*)(struct CryptoPP::KeystreamOperation, uint8_t*, uint8_t*, uint64_t))&CryptoPP::SosemanukPolicy::OperateKeystream) },
        
        {   (LPVOID)0x1405f6a50L,
            (LPVOID *)&CryptoPP__PK_DefaultEncryptionFilterctor_PK_DefaultEncryptionFilter1_user,
            (LPVOID *)&CryptoPP__PK_DefaultEncryptionFilterctor_PK_DefaultEncryptionFilter1_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_DefaultEncryptionFilterctor_PK_DefaultEncryptionFilter1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PK_DefaultEncryptionFilter::*)(struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::PK_Encryptor*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::NameValuePairs*))&CryptoPP::PK_DefaultEncryptionFilter::ctor_PK_DefaultEncryptionFilter) },
        {   (LPVOID)0x1405f6b70L,
            (LPVOID *)&CryptoPP__PK_DefaultEncryptionFilterPut22_user,
            (LPVOID *)&CryptoPP__PK_DefaultEncryptionFilterPut22_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_DefaultEncryptionFilterPut22_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::PK_DefaultEncryptionFilter::*)(uint8_t*, uint64_t, int, bool))&CryptoPP::PK_DefaultEncryptionFilter::Put2) },
        {   (LPVOID)0x1405f6f50L,
            (LPVOID *)&CryptoPP__PK_DefaultEncryptionFilterdtor_PK_DefaultEncryptionFilter3_user,
            (LPVOID *)&CryptoPP__PK_DefaultEncryptionFilterdtor_PK_DefaultEncryptionFilter3_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_DefaultEncryptionFilterdtor_PK_DefaultEncryptionFilter3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PK_DefaultEncryptionFilter::*)())&CryptoPP::PK_DefaultEncryptionFilter::dtor_PK_DefaultEncryptionFilter) },
        
        {   (LPVOID)0x1405f6fe0L,
            (LPVOID *)&CryptoPP__PK_DefaultDecryptionFilterctor_PK_DefaultDecryptionFilter1_user,
            (LPVOID *)&CryptoPP__PK_DefaultDecryptionFilterctor_PK_DefaultDecryptionFilter1_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_DefaultDecryptionFilterctor_PK_DefaultDecryptionFilter1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PK_DefaultDecryptionFilter::*)(struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::PK_Decryptor*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::NameValuePairs*))&CryptoPP::PK_DefaultDecryptionFilter::ctor_PK_DefaultDecryptionFilter) },
        {   (LPVOID)0x1405f7110L,
            (LPVOID *)&CryptoPP__PK_DefaultDecryptionFilterPut22_user,
            (LPVOID *)&CryptoPP__PK_DefaultDecryptionFilterPut22_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_DefaultDecryptionFilterPut22_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CryptoPP::PK_DefaultDecryptionFilter::*)(uint8_t*, uint64_t, int, bool))&CryptoPP::PK_DefaultDecryptionFilter::Put2) },
        {   (LPVOID)0x1405f7670L,
            (LPVOID *)&CryptoPP__PK_DefaultDecryptionFilterdtor_PK_DefaultDecryptionFilter3_user,
            (LPVOID *)&CryptoPP__PK_DefaultDecryptionFilterdtor_PK_DefaultDecryptionFilter3_next,
            (LPVOID)cast_pointer_function(CryptoPP__PK_DefaultDecryptionFilterdtor_PK_DefaultDecryptionFilter3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::PK_DefaultDecryptionFilter::*)())&CryptoPP::PK_DefaultDecryptionFilter::dtor_PK_DefaultDecryptionFilter) },
        
        {   (LPVOID)0x140654ef0L,
            (LPVOID *)&CryptoPP__EqualityComparisonFilterHandleMismatchDetected1_user,
            (LPVOID *)&CryptoPP__EqualityComparisonFilterHandleMismatchDetected1_next,
            (LPVOID)cast_pointer_function(CryptoPP__EqualityComparisonFilterHandleMismatchDetected1_wrapper),
            (LPVOID)cast_pointer_function((bool(CryptoPP::EqualityComparisonFilter::*)(bool))&CryptoPP::EqualityComparisonFilter::HandleMismatchDetected) },
        
        {   (LPVOID)0x140655510L,
            (LPVOID *)&CryptoPP__EqualityComparisonFilter__MismatchDetectedctor_MismatchDetected1_user,
            (LPVOID *)&CryptoPP__EqualityComparisonFilter__MismatchDetectedctor_MismatchDetected1_next,
            (LPVOID)cast_pointer_function(CryptoPP__EqualityComparisonFilter__MismatchDetectedctor_MismatchDetected1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::EqualityComparisonFilter::MismatchDetected::*)(struct CryptoPP::EqualityComparisonFilter::MismatchDetected*))&CryptoPP::EqualityComparisonFilter::MismatchDetected::ctor_MismatchDetected) },
        {   (LPVOID)0x1406553f0L,
            (LPVOID *)&CryptoPP__EqualityComparisonFilter__MismatchDetectedctor_MismatchDetected2_user,
            (LPVOID *)&CryptoPP__EqualityComparisonFilter__MismatchDetectedctor_MismatchDetected2_next,
            (LPVOID)cast_pointer_function(CryptoPP__EqualityComparisonFilter__MismatchDetectedctor_MismatchDetected2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::EqualityComparisonFilter::MismatchDetected::*)())&CryptoPP::EqualityComparisonFilter::MismatchDetected::ctor_MismatchDetected) },
        {   (LPVOID)0x1406554f0L,
            (LPVOID *)&CryptoPP__EqualityComparisonFilter__MismatchDetecteddtor_MismatchDetected3_user,
            (LPVOID *)&CryptoPP__EqualityComparisonFilter__MismatchDetecteddtor_MismatchDetected3_next,
            (LPVOID)cast_pointer_function(CryptoPP__EqualityComparisonFilter__MismatchDetecteddtor_MismatchDetected3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::EqualityComparisonFilter::MismatchDetected::*)())&CryptoPP::EqualityComparisonFilter::MismatchDetected::dtor_MismatchDetected) },
        
        {   (LPVOID)0x14061c1f0L,
            (LPVOID *)&CryptoPP__RawDESctor_RawDES1_user,
            (LPVOID *)&CryptoPP__RawDESctor_RawDES1_next,
            (LPVOID)cast_pointer_function(CryptoPP__RawDESctor_RawDES1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::RawDES::*)(struct CryptoPP::RawDES*))&CryptoPP::RawDES::ctor_RawDES) },
        {   (LPVOID)0x14061cb30L,
            (LPVOID *)&CryptoPP__RawDESctor_RawDES2_user,
            (LPVOID *)&CryptoPP__RawDESctor_RawDES2_next,
            (LPVOID)cast_pointer_function(CryptoPP__RawDESctor_RawDES2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::RawDES::*)())&CryptoPP::RawDES::ctor_RawDES) },
        {   (LPVOID)0x14065f430L,
            (LPVOID *)&CryptoPP__RawDESRawProcessBlock3_user,
            (LPVOID *)&CryptoPP__RawDESRawProcessBlock3_next,
            (LPVOID)cast_pointer_function(CryptoPP__RawDESRawProcessBlock3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::RawDES::*)(unsigned int*, unsigned int*))&CryptoPP::RawDES::RawProcessBlock) },
        {   (LPVOID)0x14065f020L,
            (LPVOID *)&CryptoPP__RawDESRawSetKey4_user,
            (LPVOID *)&CryptoPP__RawDESRawSetKey4_next,
            (LPVOID)cast_pointer_function(CryptoPP__RawDESRawSetKey4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::RawDES::*)(struct CryptoPP::CipherDir, uint8_t*))&CryptoPP::RawDES::RawSetKey) },
        {   (LPVOID)0x14061a000L,
            (LPVOID *)&CryptoPP__RawDESdtor_RawDES5_user,
            (LPVOID *)&CryptoPP__RawDESdtor_RawDES5_next,
            (LPVOID)cast_pointer_function(CryptoPP__RawDESdtor_RawDES5_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::RawDES::*)())&CryptoPP::RawDES::dtor_RawDES) },
        
        {   (LPVOID)0x14065f7c0L,
            (LPVOID *)&CryptoPP__DES_EDE2__BaseProcessAndXorBlock1_user,
            (LPVOID *)&CryptoPP__DES_EDE2__BaseProcessAndXorBlock1_next,
            (LPVOID)cast_pointer_function(CryptoPP__DES_EDE2__BaseProcessAndXorBlock1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DES_EDE2::Base::*)(uint8_t*, uint8_t*, uint8_t*))&CryptoPP::DES_EDE2::Base::ProcessAndXorBlock) },
        {   (LPVOID)0x14065f720L,
            (LPVOID *)&CryptoPP__DES_EDE2__BaseUncheckedSetKey2_user,
            (LPVOID *)&CryptoPP__DES_EDE2__BaseUncheckedSetKey2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DES_EDE2__BaseUncheckedSetKey2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DES_EDE2::Base::*)(uint8_t*, unsigned int, struct CryptoPP::NameValuePairs*))&CryptoPP::DES_EDE2::Base::UncheckedSetKey) },
        
        {   (LPVOID)0x14065fda0L,
            (LPVOID *)&CryptoPP__DES_EDE3__BaseProcessAndXorBlock1_user,
            (LPVOID *)&CryptoPP__DES_EDE3__BaseProcessAndXorBlock1_next,
            (LPVOID)cast_pointer_function(CryptoPP__DES_EDE3__BaseProcessAndXorBlock1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DES_EDE3::Base::*)(uint8_t*, uint8_t*, uint8_t*))&CryptoPP::DES_EDE3::Base::ProcessAndXorBlock) },
        {   (LPVOID)0x14065fc30L,
            (LPVOID *)&CryptoPP__DES_EDE3__BaseUncheckedSetKey2_user,
            (LPVOID *)&CryptoPP__DES_EDE3__BaseUncheckedSetKey2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DES_EDE3__BaseUncheckedSetKey2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DES_EDE3::Base::*)(uint8_t*, unsigned int, struct CryptoPP::NameValuePairs*))&CryptoPP::DES_EDE3::Base::UncheckedSetKey) },
        
        {   (LPVOID)0x140660290L,
            (LPVOID *)&CryptoPP__DES_XEX3__BaseProcessAndXorBlock1_user,
            (LPVOID *)&CryptoPP__DES_XEX3__BaseProcessAndXorBlock1_next,
            (LPVOID)cast_pointer_function(CryptoPP__DES_XEX3__BaseProcessAndXorBlock1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DES_XEX3::Base::*)(uint8_t*, uint8_t*, uint8_t*))&CryptoPP::DES_XEX3::Base::ProcessAndXorBlock) },
        {   (LPVOID)0x140660080L,
            (LPVOID *)&CryptoPP__DES_XEX3__BaseUncheckedSetKey2_user,
            (LPVOID *)&CryptoPP__DES_XEX3__BaseUncheckedSetKey2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DES_XEX3__BaseUncheckedSetKey2_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DES_XEX3::Base::*)(uint8_t*, unsigned int, struct CryptoPP::NameValuePairs*))&CryptoPP::DES_XEX3::Base::UncheckedSetKey) },
        
        {   (LPVOID)0x14066ae70L,
            (LPVOID *)&CryptoPP__Serpent__EncProcessAndXorBlock1_user,
            (LPVOID *)&CryptoPP__Serpent__EncProcessAndXorBlock1_next,
            (LPVOID)cast_pointer_function(CryptoPP__Serpent__EncProcessAndXorBlock1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Serpent::Enc::*)(uint8_t*, uint8_t*, uint8_t*))&CryptoPP::Serpent::Enc::ProcessAndXorBlock) },
        
        {   (LPVOID)0x14066c0a0L,
            (LPVOID *)&CryptoPP__Serpent__DecProcessAndXorBlock1_user,
            (LPVOID *)&CryptoPP__Serpent__DecProcessAndXorBlock1_next,
            (LPVOID)cast_pointer_function(CryptoPP__Serpent__DecProcessAndXorBlock1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Serpent::Dec::*)(uint8_t*, uint8_t*, uint8_t*))&CryptoPP::Serpent::Dec::ProcessAndXorBlock) },
        
        {   (LPVOID)0x140612370L,
            (LPVOID *)&CryptoPP__ZIteratorctor_ZIterator1_user,
            (LPVOID *)&CryptoPP__ZIteratorctor_ZIterator1_next,
            (LPVOID)cast_pointer_function(CryptoPP__ZIteratorctor_ZIterator1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ZIterator::*)(struct CryptoPP::ZIterator*))&CryptoPP::ZIterator::ctor_ZIterator) },
        {   (LPVOID)0x1406161d0L,
            (LPVOID *)&CryptoPP__ZIteratorctor_ZIterator2_user,
            (LPVOID *)&CryptoPP__ZIteratorctor_ZIterator2_next,
            (LPVOID)cast_pointer_function(CryptoPP__ZIteratorctor_ZIterator2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ZIterator::*)())&CryptoPP::ZIterator::ctor_ZIterator) },
        {   (LPVOID)0x140612350L,
            (LPVOID *)&CryptoPP__ZIteratordtor_ZIterator3_user,
            (LPVOID *)&CryptoPP__ZIteratordtor_ZIterator3_next,
            (LPVOID)cast_pointer_function(CryptoPP__ZIteratordtor_ZIterator3_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::ZIterator::*)())&CryptoPP::ZIterator::dtor_ZIterator) },
        
        {   (LPVOID)0x14061c130L,
            (LPVOID *)&CryptoPP__DES__Basector_Base1_user,
            (LPVOID *)&CryptoPP__DES__Basector_Base1_next,
            (LPVOID)cast_pointer_function(CryptoPP__DES__Basector_Base1_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DES::Base::*)(struct CryptoPP::DES::Base*))&CryptoPP::DES::Base::ctor_Base) },
        {   (LPVOID)0x14061cab0L,
            (LPVOID *)&CryptoPP__DES__Basector_Base2_user,
            (LPVOID *)&CryptoPP__DES__Basector_Base2_next,
            (LPVOID)cast_pointer_function(CryptoPP__DES__Basector_Base2_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DES::Base::*)())&CryptoPP::DES::Base::ctor_Base) },
        {   (LPVOID)0x14065ffc0L,
            (LPVOID *)&CryptoPP__DES__BaseProcessAndXorBlock3_user,
            (LPVOID *)&CryptoPP__DES__BaseProcessAndXorBlock3_next,
            (LPVOID)cast_pointer_function(CryptoPP__DES__BaseProcessAndXorBlock3_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DES::Base::*)(uint8_t*, uint8_t*, uint8_t*))&CryptoPP::DES::Base::ProcessAndXorBlock) },
        {   (LPVOID)0x14065efc0L,
            (LPVOID *)&CryptoPP__DES__BaseUncheckedSetKey4_user,
            (LPVOID *)&CryptoPP__DES__BaseUncheckedSetKey4_next,
            (LPVOID)cast_pointer_function(CryptoPP__DES__BaseUncheckedSetKey4_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::DES::Base::*)(uint8_t*, unsigned int, struct CryptoPP::NameValuePairs*))&CryptoPP::DES::Base::UncheckedSetKey) },
        {   (LPVOID)0x140619f10L,
            (LPVOID *)&CryptoPP__DES__Basedtor_Base5_user,
            (LPVOID *)&CryptoPP__DES__Basedtor_Base5_next,
            (LPVOID)cast_pointer_function(CryptoPP__DES__Basedtor_Base5_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CryptoPP::DES::Base::*)())&CryptoPP::DES::Base::dtor_Base) },
        
        {   (LPVOID)0x14063dff0L,
            (LPVOID *)&CryptoPP__HexEncoderIsolatedInitialize1_user,
            (LPVOID *)&CryptoPP__HexEncoderIsolatedInitialize1_next,
            (LPVOID)cast_pointer_function(CryptoPP__HexEncoderIsolatedInitialize1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::HexEncoder::*)(struct CryptoPP::NameValuePairs*))&CryptoPP::HexEncoder::IsolatedInitialize) },
        
        {   (LPVOID)0x14066ae00L,
            (LPVOID *)&CryptoPP__Serpent__BaseUncheckedSetKey1_user,
            (LPVOID *)&CryptoPP__Serpent__BaseUncheckedSetKey1_next,
            (LPVOID)cast_pointer_function(CryptoPP__Serpent__BaseUncheckedSetKey1_wrapper),
            (LPVOID)cast_pointer_function((void(CryptoPP::Serpent::Base::*)(uint8_t*, unsigned int, struct CryptoPP::NameValuePairs*))&CryptoPP::Serpent::Base::UncheckedSetKey) },
        
        {   (LPVOID)0x140633ed0L,
            (LPVOID *)&CryptoPP__ASN1ansi_x9_571_user,
            (LPVOID *)&CryptoPP__ASN1ansi_x9_571_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1ansi_x9_571_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::ansi_x9_57) },
        {   (LPVOID)0x14057ccd0L,
            (LPVOID *)&CryptoPP__ASN1ansi_x9_622_user,
            (LPVOID *)&CryptoPP__ASN1ansi_x9_622_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1ansi_x9_622_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::ansi_x9_62) },
        {   (LPVOID)0x14057cc10L,
            (LPVOID *)&CryptoPP__ASN1ansi_x9_62_curves3_user,
            (LPVOID *)&CryptoPP__ASN1ansi_x9_62_curves3_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1ansi_x9_62_curves3_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::ansi_x9_62_curves) },
        {   (LPVOID)0x14057cb50L,
            (LPVOID *)&CryptoPP__ASN1ansi_x9_62_curves_prime4_user,
            (LPVOID *)&CryptoPP__ASN1ansi_x9_62_curves_prime4_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1ansi_x9_62_curves_prime4_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::ansi_x9_62_curves_prime) },
        {   (LPVOID)0x14057d1c0L,
            (LPVOID *)&CryptoPP__ASN1certicom5_user,
            (LPVOID *)&CryptoPP__ASN1certicom5_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1certicom5_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::certicom) },
        {   (LPVOID)0x14057d100L,
            (LPVOID *)&CryptoPP__ASN1certicom_ellipticCurve6_user,
            (LPVOID *)&CryptoPP__ASN1certicom_ellipticCurve6_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1certicom_ellipticCurve6_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::certicom_ellipticCurve) },
        {   (LPVOID)0x14062c5e0L,
            (LPVOID *)&CryptoPP__ASN1characteristic_two_field7_user,
            (LPVOID *)&CryptoPP__ASN1characteristic_two_field7_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1characteristic_two_field7_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::characteristic_two_field) },
        {   (LPVOID)0x14062c760L,
            (LPVOID *)&CryptoPP__ASN1id_characteristic_two_basis8_user,
            (LPVOID *)&CryptoPP__ASN1id_characteristic_two_basis8_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1id_characteristic_two_basis8_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::id_characteristic_two_basis) },
        {   (LPVOID)0x140633da0L,
            (LPVOID *)&CryptoPP__ASN1id_dsa9_user,
            (LPVOID *)&CryptoPP__ASN1id_dsa9_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1id_dsa9_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::id_dsa) },
        {   (LPVOID)0x140580090L,
            (LPVOID *)&CryptoPP__ASN1id_ecPublicKey10_user,
            (LPVOID *)&CryptoPP__ASN1id_ecPublicKey10_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1id_ecPublicKey10_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::id_ecPublicKey) },
        {   (LPVOID)0x1405efed0L,
            (LPVOID *)&CryptoPP__ASN1id_fieldType11_user,
            (LPVOID *)&CryptoPP__ASN1id_fieldType11_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1id_fieldType11_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::id_fieldType) },
        {   (LPVOID)0x140580150L,
            (LPVOID *)&CryptoPP__ASN1id_publicKeyType12_user,
            (LPVOID *)&CryptoPP__ASN1id_publicKeyType12_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1id_publicKeyType12_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::id_publicKeyType) },
        {   (LPVOID)0x14057d280L,
            (LPVOID *)&CryptoPP__ASN1identified_organization13_user,
            (LPVOID *)&CryptoPP__ASN1identified_organization13_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1identified_organization13_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::identified_organization) },
        {   (LPVOID)0x14057cf10L,
            (LPVOID *)&CryptoPP__ASN1iso14_user,
            (LPVOID *)&CryptoPP__ASN1iso14_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1iso14_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::iso) },
        {   (LPVOID)0x14057cd90L,
            (LPVOID *)&CryptoPP__ASN1iso_us15_user,
            (LPVOID *)&CryptoPP__ASN1iso_us15_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1iso_us15_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::iso_us) },
        {   (LPVOID)0x14057ce50L,
            (LPVOID *)&CryptoPP__ASN1member_body16_user,
            (LPVOID *)&CryptoPP__ASN1member_body16_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1member_body16_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::member_body) },
        {   (LPVOID)0x14062c820L,
            (LPVOID *)&CryptoPP__ASN1ppBasis17_user,
            (LPVOID *)&CryptoPP__ASN1ppBasis17_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1ppBasis17_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::ppBasis) },
        {   (LPVOID)0x1405efe10L,
            (LPVOID *)&CryptoPP__ASN1prime_field18_user,
            (LPVOID *)&CryptoPP__ASN1prime_field18_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1prime_field18_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::prime_field) },
        {   (LPVOID)0x14057d040L,
            (LPVOID *)&CryptoPP__ASN1secp112r119_user,
            (LPVOID *)&CryptoPP__ASN1secp112r119_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1secp112r119_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::secp112r1) },
        {   (LPVOID)0x14057d340L,
            (LPVOID *)&CryptoPP__ASN1secp112r220_user,
            (LPVOID *)&CryptoPP__ASN1secp112r220_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1secp112r220_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::secp112r2) },
        {   (LPVOID)0x14057d640L,
            (LPVOID *)&CryptoPP__ASN1secp128r121_user,
            (LPVOID *)&CryptoPP__ASN1secp128r121_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1secp128r121_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::secp128r1) },
        {   (LPVOID)0x14057d700L,
            (LPVOID *)&CryptoPP__ASN1secp128r222_user,
            (LPVOID *)&CryptoPP__ASN1secp128r222_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1secp128r222_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::secp128r2) },
        {   (LPVOID)0x14057d4c0L,
            (LPVOID *)&CryptoPP__ASN1secp160k123_user,
            (LPVOID *)&CryptoPP__ASN1secp160k123_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1secp160k123_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::secp160k1) },
        {   (LPVOID)0x14057d400L,
            (LPVOID *)&CryptoPP__ASN1secp160r124_user,
            (LPVOID *)&CryptoPP__ASN1secp160r124_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1secp160r124_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::secp160r1) },
        {   (LPVOID)0x14057d7c0L,
            (LPVOID *)&CryptoPP__ASN1secp160r225_user,
            (LPVOID *)&CryptoPP__ASN1secp160r225_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1secp160r225_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::secp160r2) },
        {   (LPVOID)0x14057d880L,
            (LPVOID *)&CryptoPP__ASN1secp192k126_user,
            (LPVOID *)&CryptoPP__ASN1secp192k126_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1secp192k126_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::secp192k1) },
        {   (LPVOID)0x14057c950L,
            (LPVOID *)&CryptoPP__ASN1secp192r127_user,
            (LPVOID *)&CryptoPP__ASN1secp192r127_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1secp192r127_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::secp192r1) },
        {   (LPVOID)0x14057d940L,
            (LPVOID *)&CryptoPP__ASN1secp224k128_user,
            (LPVOID *)&CryptoPP__ASN1secp224k128_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1secp224k128_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::secp224k1) },
        {   (LPVOID)0x14057da00L,
            (LPVOID *)&CryptoPP__ASN1secp224r129_user,
            (LPVOID *)&CryptoPP__ASN1secp224r129_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1secp224r129_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::secp224r1) },
        {   (LPVOID)0x14057d580L,
            (LPVOID *)&CryptoPP__ASN1secp256k130_user,
            (LPVOID *)&CryptoPP__ASN1secp256k130_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1secp256k130_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::secp256k1) },
        {   (LPVOID)0x14057cf80L,
            (LPVOID *)&CryptoPP__ASN1secp256r131_user,
            (LPVOID *)&CryptoPP__ASN1secp256r131_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1secp256r131_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::secp256r1) },
        {   (LPVOID)0x14057dac0L,
            (LPVOID *)&CryptoPP__ASN1secp384r132_user,
            (LPVOID *)&CryptoPP__ASN1secp384r132_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1secp384r132_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::secp384r1) },
        {   (LPVOID)0x14057db80L,
            (LPVOID *)&CryptoPP__ASN1secp521r133_user,
            (LPVOID *)&CryptoPP__ASN1secp521r133_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1secp521r133_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::secp521r1) },
        {   (LPVOID)0x140581f40L,
            (LPVOID *)&CryptoPP__ASN1sect113r134_user,
            (LPVOID *)&CryptoPP__ASN1sect113r134_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1sect113r134_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::sect113r1) },
        {   (LPVOID)0x140582000L,
            (LPVOID *)&CryptoPP__ASN1sect113r235_user,
            (LPVOID *)&CryptoPP__ASN1sect113r235_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1sect113r235_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::sect113r2) },
        {   (LPVOID)0x140582300L,
            (LPVOID *)&CryptoPP__ASN1sect131r136_user,
            (LPVOID *)&CryptoPP__ASN1sect131r136_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1sect131r136_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::sect131r1) },
        {   (LPVOID)0x1405823c0L,
            (LPVOID *)&CryptoPP__ASN1sect131r237_user,
            (LPVOID *)&CryptoPP__ASN1sect131r237_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1sect131r237_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::sect131r2) },
        {   (LPVOID)0x140581d00L,
            (LPVOID *)&CryptoPP__ASN1sect163k138_user,
            (LPVOID *)&CryptoPP__ASN1sect163k138_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1sect163k138_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::sect163k1) },
        {   (LPVOID)0x140581dc0L,
            (LPVOID *)&CryptoPP__ASN1sect163r139_user,
            (LPVOID *)&CryptoPP__ASN1sect163r139_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1sect163r139_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::sect163r1) },
        {   (LPVOID)0x1405820c0L,
            (LPVOID *)&CryptoPP__ASN1sect163r240_user,
            (LPVOID *)&CryptoPP__ASN1sect163r240_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1sect163r240_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::sect163r2) },
        {   (LPVOID)0x140582480L,
            (LPVOID *)&CryptoPP__ASN1sect193r141_user,
            (LPVOID *)&CryptoPP__ASN1sect193r141_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1sect193r141_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::sect193r1) },
        {   (LPVOID)0x140582540L,
            (LPVOID *)&CryptoPP__ASN1sect193r242_user,
            (LPVOID *)&CryptoPP__ASN1sect193r242_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1sect193r242_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::sect193r2) },
        {   (LPVOID)0x140582600L,
            (LPVOID *)&CryptoPP__ASN1sect233k143_user,
            (LPVOID *)&CryptoPP__ASN1sect233k143_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1sect233k143_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::sect233k1) },
        {   (LPVOID)0x1405826c0L,
            (LPVOID *)&CryptoPP__ASN1sect233r144_user,
            (LPVOID *)&CryptoPP__ASN1sect233r144_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1sect233r144_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::sect233r1) },
        {   (LPVOID)0x140581e80L,
            (LPVOID *)&CryptoPP__ASN1sect239k145_user,
            (LPVOID *)&CryptoPP__ASN1sect239k145_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1sect239k145_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::sect239k1) },
        {   (LPVOID)0x140582180L,
            (LPVOID *)&CryptoPP__ASN1sect283k146_user,
            (LPVOID *)&CryptoPP__ASN1sect283k146_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1sect283k146_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::sect283k1) },
        {   (LPVOID)0x140582240L,
            (LPVOID *)&CryptoPP__ASN1sect283r147_user,
            (LPVOID *)&CryptoPP__ASN1sect283r147_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1sect283r147_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::sect283r1) },
        {   (LPVOID)0x140582780L,
            (LPVOID *)&CryptoPP__ASN1sect409k148_user,
            (LPVOID *)&CryptoPP__ASN1sect409k148_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1sect409k148_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::sect409k1) },
        {   (LPVOID)0x140582840L,
            (LPVOID *)&CryptoPP__ASN1sect409r149_user,
            (LPVOID *)&CryptoPP__ASN1sect409r149_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1sect409r149_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::sect409r1) },
        {   (LPVOID)0x140582900L,
            (LPVOID *)&CryptoPP__ASN1sect571k150_user,
            (LPVOID *)&CryptoPP__ASN1sect571k150_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1sect571k150_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::sect571k1) },
        {   (LPVOID)0x1405829c0L,
            (LPVOID *)&CryptoPP__ASN1sect571r151_user,
            (LPVOID *)&CryptoPP__ASN1sect571r151_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1sect571r151_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::sect571r1) },
        {   (LPVOID)0x14062c6a0L,
            (LPVOID *)&CryptoPP__ASN1tpBasis52_user,
            (LPVOID *)&CryptoPP__ASN1tpBasis52_next,
            (LPVOID)cast_pointer_function(CryptoPP__ASN1tpBasis52_wrapper),
            (LPVOID)cast_pointer_function((struct CryptoPP::OID*(CryptoPP::ASN1::*)(short))&CryptoPP::ASN1::tpBasis) },
        
        };
        
    }; // static end namespace detail
END_ATF_NAMESPACE
*/