// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "GUILD_BATTLE__CGuildBattleSchedule.hpp"
#include "_worlddb_guild_battle_schedule_list.hpp"


START_ATF_NAMESPACE
    namespace GUILD_BATTLE
    {
        struct CGuildBattleReservedSchedule
        {
            unsigned int m_uiScheduleListID;
            bool m_bDone;
            unsigned int m_uiCurScheduleInx;
            bool m_bUseField[23];
            CGuildBattleSchedule *m_pkSchedule[23];
        public:
            char Add(unsigned int dwStartTimeInx, unsigned int dwElapseTimeCnt, struct CGuildBattleSchedule** ppkSchedule)
            {
                using org_ptr = char (WINAPIV*)(struct CGuildBattleReservedSchedule*, unsigned int, unsigned int, struct CGuildBattleSchedule**);
                return (org_ptr(0x1403dac40L))(this, dwStartTimeInx, dwElapseTimeCnt, ppkSchedule);
            };
            CGuildBattleReservedSchedule(unsigned int uiScheduleListID)
            {
                using org_ptr = void (WINAPIV*)(struct CGuildBattleReservedSchedule*, unsigned int);
                (org_ptr(0x1403dab60L))(this, uiScheduleListID);
            };
            void ctor_CGuildBattleReservedSchedule(unsigned int uiScheduleListID)
            {
                using org_ptr = void (WINAPIV*)(struct CGuildBattleReservedSchedule*, unsigned int);
                (org_ptr(0x1403dab60L))(this, uiScheduleListID);
            };
            bool CheckNextEvent(int iRet)
            {
                using org_ptr = bool (WINAPIV*)(struct CGuildBattleReservedSchedule*, int);
                return (org_ptr(0x1403db750L))(this, iRet);
            };
            bool CleanUpDanglingReservedSchedule()
            {
                using org_ptr = bool (WINAPIV*)(struct CGuildBattleReservedSchedule*);
                return (org_ptr(0x1403db570L))(this);
            };
            bool Clear(unsigned int dwID)
            {
                using org_ptr = bool (WINAPIV*)(struct CGuildBattleReservedSchedule*, unsigned int);
                return (org_ptr(0x1403db420L))(this, dwID);
            };
            void Clear()
            {
                using org_ptr = void (WINAPIV*)(struct CGuildBattleReservedSchedule*);
                (org_ptr(0x1403dae20L))(this);
            };
            void ClearElapsedSchedule()
            {
                using org_ptr = void (WINAPIV*)(struct CGuildBattleReservedSchedule*);
                (org_ptr(0x1403db950L))(this);
            };
            bool CopyUseTimeField(bool* pbField)
            {
                using org_ptr = bool (WINAPIV*)(struct CGuildBattleReservedSchedule*, bool*);
                return (org_ptr(0x1403dad20L))(this, pbField);
            };
            void Flip()
            {
                using org_ptr = void (WINAPIV*)(struct CGuildBattleReservedSchedule*);
                (org_ptr(0x1403db4b0L))(this);
            };
            unsigned int GetCurScheduleID()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct CGuildBattleReservedSchedule*);
                return (org_ptr(0x1403db640L))(this);
            };
            unsigned int GetID()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct CGuildBattleReservedSchedule*);
                return (org_ptr(0x1403dec40L))(this);
            };
            bool IsDone()
            {
                using org_ptr = bool (WINAPIV*)(struct CGuildBattleReservedSchedule*);
                return (org_ptr(0x1403dec60L))(this);
            };
            char IsEmptyTime(unsigned int dwStartTimeInx, unsigned int dwElapseTimeCnt)
            {
                using org_ptr = char (WINAPIV*)(struct CGuildBattleReservedSchedule*, unsigned int, unsigned int);
                return (org_ptr(0x1403dabc0L))(this, dwStartTimeInx, dwElapseTimeCnt);
            };
            bool Load(bool bToday, struct _worlddb_guild_battle_schedule_list* pkInfo)
            {
                using org_ptr = bool (WINAPIV*)(struct CGuildBattleReservedSchedule*, bool, struct _worlddb_guild_battle_schedule_list*);
                return (org_ptr(0x1403daea0L))(this, bToday, pkInfo);
            };
            bool Loop()
            {
                using org_ptr = bool (WINAPIV*)(struct CGuildBattleReservedSchedule*);
                return (org_ptr(0x1403dad80L))(this);
            };
            bool Next()
            {
                using org_ptr = bool (WINAPIV*)(struct CGuildBattleReservedSchedule*);
                return (org_ptr(0x1403db7f0L))(this);
            };
            void UpdateUseField(unsigned int dwStartTimeInx, unsigned int dwElapseTimeCnt)
            {
                using org_ptr = void (WINAPIV*)(struct CGuildBattleReservedSchedule*, unsigned int, unsigned int);
                (org_ptr(0x1403db8d0L))(this, dwStartTimeInx, dwElapseTimeCnt);
            };
            struct CGuildBattleSchedule* UpdateUseFlag(unsigned int dwID)
            {
                using org_ptr = struct CGuildBattleSchedule* (WINAPIV*)(struct CGuildBattleReservedSchedule*, unsigned int);
                return (org_ptr(0x1403db4f0L))(this, dwID);
            };
            ~CGuildBattleReservedSchedule()
            {
                using org_ptr = void (WINAPIV*)(struct CGuildBattleReservedSchedule*);
                (org_ptr(0x1403dabb0L))(this);
            };
            void dtor_CGuildBattleReservedSchedule()
            {
                using org_ptr = void (WINAPIV*)(struct CGuildBattleReservedSchedule*);
                (org_ptr(0x1403dabb0L))(this);
            };
        };
    }; // end namespace GUILD_BATTLE
END_ATF_NAMESPACE
