// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CGuild.hpp"
#include "CLogFile.hpp"
#include "ControllerTaxRate.hpp"
#include "_suggested_matter_change_taxrate.hpp"


START_ATF_NAMESPACE
    #pragma pack(push, 4)
    struct TRC_AutoTrade
    {
        bool m_bInit;
        char m_byCurDay;
        unsigned __int16 m_wCurMonth;
        unsigned __int16 m_wCurYear;
        bool m_bChangeTaxRate;
        float m_fCommonTaxRate;
        CGuild *m_pOwnerGuild;
        ControllerTaxRate m_Controller;
        CLogFile m_sysLog;
        CLogFile m_serviceLog;
        unsigned int m_dwTrade;
        long double m_dIncomeMoney;
        char m_byRace;
        _suggested_matter_change_taxrate m_suggested;
    public:
        void AddGDalant(char* pdata)
        {
            using org_ptr = void (WINAPIV*)(struct TRC_AutoTrade*, char*);
            (org_ptr(0x1402d85c0L))(this, pdata);
        };
        unsigned int CalcPrice(unsigned int nGuildSerial, unsigned int nPrice)
        {
            using org_ptr = unsigned int (WINAPIV*)(struct TRC_AutoTrade*, unsigned int, unsigned int);
            return (org_ptr(0x1402d8030L))(this, nGuildSerial, nPrice);
        };
        int ChangeOwner(struct CGuild* pGuild)
        {
            using org_ptr = int (WINAPIV*)(struct TRC_AutoTrade*, struct CGuild*);
            return (org_ptr(0x1402d8c70L))(this, pGuild);
        };
        int ChangeTaxRate(float fNewTaxRate)
        {
            using org_ptr = int (WINAPIV*)(struct TRC_AutoTrade*, float);
            return (org_ptr(0x1402d8ab0L))(this, fNewTaxRate);
        };
        void ChangeTaxRate()
        {
            using org_ptr = void (WINAPIV*)(struct TRC_AutoTrade*);
            (org_ptr(0x1402d88d0L))(this);
        };
        bool Initialzie()
        {
            using org_ptr = bool (WINAPIV*)(struct TRC_AutoTrade*);
            return (org_ptr(0x1402d7e00L))(this);
        };
        bool IsMaster(unsigned int dwSerial)
        {
            using org_ptr = bool (WINAPIV*)(struct TRC_AutoTrade*, unsigned int);
            return (org_ptr(0x1402d7ff0L))(this, dwSerial);
        };
        bool IsOwnerGuild(unsigned int nGuildSerial)
        {
            using org_ptr = bool (WINAPIV*)(struct TRC_AutoTrade*, unsigned int);
            return (org_ptr(0x1402d7f80L))(this, nGuildSerial);
        };
        void PushDQSData()
        {
            using org_ptr = void (WINAPIV*)(struct TRC_AutoTrade*);
            (org_ptr(0x1402d8d30L))(this);
        };
        void PushDQSData_GuildInMoney(unsigned int dwRetPrice, unsigned int dwSeller)
        {
            using org_ptr = void (WINAPIV*)(struct TRC_AutoTrade*, unsigned int, unsigned int);
            (org_ptr(0x1402d8740L))(this, dwRetPrice, dwSeller);
        };
        void SendMsg_PatriarchTaxRate(int n)
        {
            using org_ptr = void (WINAPIV*)(struct TRC_AutoTrade*, int);
            (org_ptr(0x1402d8480L))(this, n);
        };
        void SendMsg_UserLogInNotifyTaxRate(int n)
        {
            using org_ptr = void (WINAPIV*)(struct TRC_AutoTrade*, int);
            (org_ptr(0x1402d8540L))(this, n);
        };
        void SetGuildMaintainMoney(unsigned int dwTax, unsigned int dwSeller)
        {
            using org_ptr = void (WINAPIV*)(struct TRC_AutoTrade*, unsigned int, unsigned int);
            (org_ptr(0x1402d8080L))(this, dwTax, dwSeller);
        };
        void SetPatriarchTaxMoney(unsigned int dwTax)
        {
            using org_ptr = void (WINAPIV*)(struct TRC_AutoTrade*, unsigned int);
            (org_ptr(0x1402d8120L))(this, dwTax);
        };
        TRC_AutoTrade(char byRace)
        {
            using org_ptr = void (WINAPIV*)(struct TRC_AutoTrade*, char);
            (org_ptr(0x1402d7b70L))(this, byRace);
        };
        void ctor_TRC_AutoTrade(char byRace)
        {
            using org_ptr = void (WINAPIV*)(struct TRC_AutoTrade*, char);
            (org_ptr(0x1402d7b70L))(this, byRace);
        };
        TRC_AutoTrade()
        {
            using org_ptr = void (WINAPIV*)(struct TRC_AutoTrade*);
            (org_ptr(0x1402d79c0L))(this);
        };
        void ctor_TRC_AutoTrade()
        {
            using org_ptr = void (WINAPIV*)(struct TRC_AutoTrade*);
            (org_ptr(0x1402d79c0L))(this);
        };
        bool _db_load(char byRace)
        {
            using org_ptr = bool (WINAPIV*)(struct TRC_AutoTrade*, char);
            return (org_ptr(0x1402d8ea0L))(this, byRace);
        };
        static char _insert_info(char* pdata)
        {
            using org_ptr = char (WINAPIV*)(char*);
            return (org_ptr(0x1402d9050L))(pdata);
        };
        int check(unsigned int dwAvatorSerial, unsigned int dwGuildSerial)
        {
            using org_ptr = int (WINAPIV*)(struct TRC_AutoTrade*, unsigned int, unsigned int);
            return (org_ptr(0x1402d8850L))(this, dwAvatorSerial, dwGuildSerial);
        };
        struct CGuild* getOwnerGuild()
        {
            using org_ptr = struct CGuild* (WINAPIV*)(struct TRC_AutoTrade*);
            return (org_ptr(0x1402d99f0L))(this);
        };
        unsigned int getSuggestedTime()
        {
            using org_ptr = unsigned int (WINAPIV*)(struct TRC_AutoTrade*);
            return (org_ptr(0x14038efa0L))(this);
        };
        char* get_guidlname()
        {
            using org_ptr = char* (WINAPIV*)(struct TRC_AutoTrade*);
            return (org_ptr(0x1402d9a10L))(this);
        };
        float get_next_tax()
        {
            using org_ptr = float (WINAPIV*)(struct TRC_AutoTrade*);
            return (org_ptr(0x1402d9ae0L))(this);
        };
        char get_race()
        {
            using org_ptr = char (WINAPIV*)(struct TRC_AutoTrade*);
            return (org_ptr(0x1402d9b30L))(this);
        };
        float get_taxrate()
        {
            using org_ptr = float (WINAPIV*)(struct TRC_AutoTrade*);
            return (org_ptr(0x1402d99a0L))(this);
        };
        void his_income_money()
        {
            using org_ptr = void (WINAPIV*)(struct TRC_AutoTrade*);
            (org_ptr(0x1402d8250L))(this);
        };
        void history_used_cheet_changetaxrate(unsigned int dwProb, char* pName)
        {
            using org_ptr = void (WINAPIV*)(struct TRC_AutoTrade*, unsigned int, char*);
            (org_ptr(0x14038efc0L))(this, dwProb, pName);
        };
        void sendmsg_taxrate(int n, char byRet)
        {
            using org_ptr = void (WINAPIV*)(struct TRC_AutoTrade*, int, char);
            (org_ptr(0x1402d8320L))(this, n, byRet);
        };
        void set_owner(struct CGuild* pGuild)
        {
            using org_ptr = void (WINAPIV*)(struct TRC_AutoTrade*, struct CGuild*);
            (org_ptr(0x14038ee40L))(this, pGuild);
        };
        void set_suggested(char byMatterType, unsigned int dwMatterDst, char* wszMatterDst, unsigned int dwNext)
        {
            using org_ptr = void (WINAPIV*)(struct TRC_AutoTrade*, char, unsigned int, char*, unsigned int);
            (org_ptr(0x14038ee70L))(this, byMatterType, dwMatterDst, wszMatterDst, dwNext);
        };
        ~TRC_AutoTrade()
        {
            using org_ptr = void (WINAPIV*)(struct TRC_AutoTrade*);
            (org_ptr(0x1402d7d30L))(this);
        };
        void dtor_TRC_AutoTrade()
        {
            using org_ptr = void (WINAPIV*)(struct TRC_AutoTrade*);
            (org_ptr(0x1402d7d30L))(this);
        };
    };
    #pragma pack(pop)
END_ATF_NAMESPACE
