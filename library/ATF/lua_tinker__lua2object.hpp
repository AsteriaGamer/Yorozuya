// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CMonster.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  lua2object<CMonster *>
        {
        public:
            static struct CMonster* invoke(struct lua2object<CMonster *>* _this, lua_State* L, int index)
            {
                using org_ptr = struct CMonster* (WINAPIV*)(struct lua2object<CMonster *>*, lua_State*, int);
                return (org_ptr(0x14040b1c0L))(_this, L, index);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "CLuaEventNode.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  lua2object<CLuaEventNode *>
        {
        public:
            static struct CLuaEventNode* invoke(struct lua2object<CLuaEventNode *>* _this, lua_State* L, int index)
            {
                using org_ptr = struct CLuaEventNode* (WINAPIV*)(struct lua2object<CLuaEventNode *>*, lua_State*, int);
                return (org_ptr(0x14040a890L))(_this, L, index);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "CLuaSignalReActor.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  lua2object<CLuaSignalReActor *>
        {
        public:
            static struct CLuaSignalReActor* invoke(struct lua2object<CLuaSignalReActor *>* _this, lua_State* L, int index)
            {
                using org_ptr = struct CLuaSignalReActor* (WINAPIV*)(struct lua2object<CLuaSignalReActor *>*, lua_State*, int);
                return (org_ptr(0x14040b130L))(_this, L, index);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "CLuaScript.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  lua2object<CLuaScript *>
        {
        public:
            static struct CLuaScript* invoke(struct lua2object<CLuaScript *>* _this, lua_State* L, int index)
            {
                using org_ptr = struct CLuaScript* (WINAPIV*)(struct lua2object<CLuaScript *>*, lua_State*, int);
                return (org_ptr(0x14040a920L))(_this, L, index);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "LuaParam3.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  lua2object<LuaParam3 *>
        {
        public:
            static struct LuaParam3* invoke(struct lua2object<LuaParam3 *>* _this, lua_State* L, int index)
            {
                using org_ptr = struct LuaParam3* (WINAPIV*)(struct lua2object<LuaParam3 *>*, lua_State*, int);
                return (org_ptr(0x1404098b0L))(_this, L, index);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "CLuaEventMgr.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  lua2object<CLuaEventMgr *>
        {
        public:
            static struct CLuaEventMgr* invoke(struct lua2object<CLuaEventMgr *>* _this, lua_State* L, int index)
            {
                using org_ptr = struct CLuaEventMgr* (WINAPIV*)(struct lua2object<CLuaEventMgr *>*, lua_State*, int);
                return (org_ptr(0x14040a9b0L))(_this, L, index);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "LuaParam3.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  lua2object<LuaParam3>
        {
        public:
            static struct LuaParam3* invoke(struct LuaParam3* result, lua_State* L, int index)
            {
                using org_ptr = struct LuaParam3* (WINAPIV*)(struct LuaParam3*, lua_State*, int);
                return (org_ptr(0x14040aa40L))(result, L, index);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
