// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CNetIndexList.hpp"
#include "Task.hpp"


START_ATF_NAMESPACE
    struct TaskPool
    {
        enum RCODE
        {
            succeed = 0x0,
            list_is_empty = 0xFFFFFFFF,
            failed_popnode = 0xFFFFFFFE,
            failed_pushnode = 0xFFFFFFFD,
            failed_create_taskarry = 0xFFFFFFFC,
            failed_set_emptylist = 0xFFFFFFFB,
            failed_set_waitlist = 0xFFFFFFFA,
            failed_set_completelist = 0xFFFFFFF9,
            failed_init_indexlist = 0xFFFFFFFA,
        };
        bool _bInit;
        CNetIndexList _listEmptyIdx;
        CNetIndexList _listRegedIdx;
        CNetIndexList _listCompleteIdx;
        int _nMaxTskNum;
        Task *_pTsks;
    public:
        RCODE Initialize(int nTskMaxNum, int nMaxTskSize)
        {
            using org_ptr = RCODE (WINAPIV*)(struct TaskPool*, int, int);
            return (org_ptr(0x140317d60L))(this, nTskMaxNum, nMaxTskSize);
        };
        bool IsEmpty()
        {
            using org_ptr = bool (WINAPIV*)(struct TaskPool*);
            return (org_ptr(0x1403188c0L))(this);
        };
        struct Task* PopCompleteTsk(unsigned int* nIdx)
        {
            using org_ptr = struct Task* (WINAPIV*)(struct TaskPool*, unsigned int*);
            return (org_ptr(0x1402f2530L))(this, nIdx);
        };
        struct Task* PopWaitTsk(unsigned int* nIdx)
        {
            using org_ptr = struct Task* (WINAPIV*)(struct TaskPool*, unsigned int*);
            return (org_ptr(0x1402f2df0L))(this, nIdx);
        };
        RCODE PushCompleteTsk(unsigned int nIdx)
        {
            using org_ptr = RCODE (WINAPIV*)(struct TaskPool*, unsigned int);
            return (org_ptr(0x1402f2ea0L))(this, nIdx);
        };
        RCODE PushEmptyTsk(unsigned int nIdx)
        {
            using org_ptr = RCODE (WINAPIV*)(struct TaskPool*, unsigned int);
            return (org_ptr(0x1402f25e0L))(this, nIdx);
        };
        RCODE PushWaitTsk(int nTaskCode, char* p, uint64_t size)
        {
            using org_ptr = RCODE (WINAPIV*)(struct TaskPool*, int, char*, uint64_t);
            return (org_ptr(0x1402f22c0L))(this, nTaskCode, p, size);
        };
        void Release()
        {
            using org_ptr = void (WINAPIV*)(struct TaskPool*);
            (org_ptr(0x140317df0L))(this);
        };
        TaskPool()
        {
            using org_ptr = void (WINAPIV*)(struct TaskPool*);
            (org_ptr(0x1403187b0L))(this);
        };
        void ctor_TaskPool()
        {
            using org_ptr = void (WINAPIV*)(struct TaskPool*);
            (org_ptr(0x1403187b0L))(this);
        };
        bool _create_task(int nMaxTskSize)
        {
            using org_ptr = bool (WINAPIV*)(struct TaskPool*, int);
            return (org_ptr(0x140317a50L))(this, nMaxTskSize);
        };
        bool _init_index_lists()
        {
            using org_ptr = bool (WINAPIV*)(struct TaskPool*);
            return (org_ptr(0x140317c60L))(this);
        };
    };
END_ATF_NAMESPACE
