// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CryptoPP.hpp"

/*
START_ATF_NAMESPACE
    namespace info
    {
        using CryptoPPAdd1_ptr = int64_t (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
        using CryptoPPAdd1_clbk = int64_t (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t, CryptoPPAdd1_ptr);
        using CryptoPPAlmostInverse2_ptr = unsigned int (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t, uint64_t*, uint64_t);
        using CryptoPPAlmostInverse2_clbk = unsigned int (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t, uint64_t*, uint64_t, CryptoPPAlmostInverse2_ptr);
        using CryptoPPAndWords3_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
        using CryptoPPAndWords3_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t, CryptoPPAndWords3_ptr);
        using CryptoPPAssignFromHelper5_ptr = struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >* (WINAPIV*)(struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >*, struct CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >*, struct CryptoPP::NameValuePairs*, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>*);
        using CryptoPPAssignFromHelper5_clbk = struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >* (WINAPIV*)(struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >*, struct CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >*, struct CryptoPP::NameValuePairs*, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>*, CryptoPPAssignFromHelper5_ptr);
        using CryptoPPAssignFromHelper7_ptr = struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >* (WINAPIV*)(struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >*, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>*, struct CryptoPP::NameValuePairs*);
        using CryptoPPAssignFromHelper7_clbk = struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >* (WINAPIV*)(struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >*, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>*, struct CryptoPP::NameValuePairs*, CryptoPPAssignFromHelper7_ptr);
        using CryptoPPAssignFromHelper9_ptr = struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >* (WINAPIV*)(struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >*, struct CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >*, struct CryptoPP::NameValuePairs*, struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*);
        using CryptoPPAssignFromHelper9_clbk = struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >* (WINAPIV*)(struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >*, struct CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >*, struct CryptoPP::NameValuePairs*, struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*, CryptoPPAssignFromHelper9_ptr);
        using CryptoPPAssignFromHelper11_ptr = struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >* (WINAPIV*)(struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >*, struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*, struct CryptoPP::NameValuePairs*);
        using CryptoPPAssignFromHelper11_clbk = struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >* (WINAPIV*)(struct CryptoPP::AssignFromHelperClass<CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >*, struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*, struct CryptoPP::NameValuePairs*, CryptoPPAssignFromHelper11_ptr);
        using CryptoPPAssignIntToInteger12_ptr = bool (WINAPIV*)(struct CryptoPP*, struct type_info*, void*, void*);
        using CryptoPPAssignIntToInteger12_clbk = bool (WINAPIV*)(struct CryptoPP*, struct type_info*, void*, void*, CryptoPPAssignIntToInteger12_ptr);
        using CryptoPPAsymmetricMultiply13_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t, uint64_t*, uint64_t);
        using CryptoPPAsymmetricMultiply13_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t, uint64_t*, uint64_t, CryptoPPAsymmetricMultiply13_ptr);
        using CryptoPPBERDecodeError14_ptr = void (WINAPIV*)(struct CryptoPP*);
        using CryptoPPBERDecodeError14_clbk = void (WINAPIV*)(struct CryptoPP*, CryptoPPBERDecodeError14_ptr);
        using CryptoPPBERDecodeGF2NP15_ptr = struct CryptoPP::GF2NP* (WINAPIV*)(struct CryptoPP*, struct CryptoPP::BufferedTransformation*);
        using CryptoPPBERDecodeGF2NP15_clbk = struct CryptoPP::GF2NP* (WINAPIV*)(struct CryptoPP*, struct CryptoPP::BufferedTransformation*, CryptoPPBERDecodeGF2NP15_ptr);
        using CryptoPPBERDecodeNull16_ptr = void (WINAPIV*)(struct CryptoPP*, struct CryptoPP::BufferedTransformation*);
        using CryptoPPBERDecodeNull16_clbk = void (WINAPIV*)(struct CryptoPP*, struct CryptoPP::BufferedTransformation*, CryptoPPBERDecodeNull16_ptr);
        using CryptoPPBERDecodeOctetString17_ptr = uint64_t (WINAPIV*)(struct CryptoPP*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::BufferedTransformation*);
        using CryptoPPBERDecodeOctetString17_clbk = uint64_t (WINAPIV*)(struct CryptoPP*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::BufferedTransformation*, CryptoPPBERDecodeOctetString17_ptr);
        using CryptoPPBERDecodeUnsigned18_ptr = int64_t (WINAPIV*)(struct CryptoPP*);
        using CryptoPPBERDecodeUnsigned18_clbk = int64_t (WINAPIV*)(struct CryptoPP*, CryptoPPBERDecodeUnsigned18_ptr);
        using CryptoPPBERLengthDecode19_ptr = bool (WINAPIV*)(struct CryptoPP*, struct CryptoPP::BufferedTransformation*, uint64_t*);
        using CryptoPPBERLengthDecode19_clbk = bool (WINAPIV*)(struct CryptoPP*, struct CryptoPP::BufferedTransformation*, uint64_t*, CryptoPPBERLengthDecode19_ptr);
        using CryptoPPBERLengthDecode20_ptr = bool (WINAPIV*)(struct CryptoPP*, struct CryptoPP::BufferedTransformation*, uint64_t*, bool*);
        using CryptoPPBERLengthDecode20_clbk = bool (WINAPIV*)(struct CryptoPP*, struct CryptoPP::BufferedTransformation*, uint64_t*, bool*, CryptoPPBERLengthDecode20_ptr);
        using CryptoPPBaseline_Multiply1621_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*);
        using CryptoPPBaseline_Multiply1621_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, CryptoPPBaseline_Multiply1621_ptr);
        using CryptoPPBaseline_Multiply222_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*);
        using CryptoPPBaseline_Multiply222_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, CryptoPPBaseline_Multiply222_ptr);
        using CryptoPPBaseline_Multiply423_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*);
        using CryptoPPBaseline_Multiply423_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, CryptoPPBaseline_Multiply423_ptr);
        using CryptoPPBaseline_Multiply824_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*);
        using CryptoPPBaseline_Multiply824_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, CryptoPPBaseline_Multiply824_ptr);
        using CryptoPPBaseline_MultiplyBottom1625_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*);
        using CryptoPPBaseline_MultiplyBottom1625_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, CryptoPPBaseline_MultiplyBottom1625_ptr);
        using CryptoPPBaseline_MultiplyBottom226_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*);
        using CryptoPPBaseline_MultiplyBottom226_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, CryptoPPBaseline_MultiplyBottom226_ptr);
        using CryptoPPBaseline_MultiplyBottom427_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*);
        using CryptoPPBaseline_MultiplyBottom427_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, CryptoPPBaseline_MultiplyBottom427_ptr);
        using CryptoPPBaseline_MultiplyBottom828_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*);
        using CryptoPPBaseline_MultiplyBottom828_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, CryptoPPBaseline_MultiplyBottom828_ptr);
        using CryptoPPBaseline_MultiplyTop1629_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
        using CryptoPPBaseline_MultiplyTop1629_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t, CryptoPPBaseline_MultiplyTop1629_ptr);
        using CryptoPPBaseline_MultiplyTop230_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
        using CryptoPPBaseline_MultiplyTop230_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t, CryptoPPBaseline_MultiplyTop230_ptr);
        using CryptoPPBaseline_MultiplyTop431_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
        using CryptoPPBaseline_MultiplyTop431_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t, CryptoPPBaseline_MultiplyTop431_ptr);
        using CryptoPPBaseline_MultiplyTop832_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
        using CryptoPPBaseline_MultiplyTop832_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t, CryptoPPBaseline_MultiplyTop832_ptr);
        using CryptoPPBaseline_Square1633_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*);
        using CryptoPPBaseline_Square1633_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, CryptoPPBaseline_Square1633_ptr);
        using CryptoPPBaseline_Square234_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*);
        using CryptoPPBaseline_Square234_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, CryptoPPBaseline_Square234_ptr);
        using CryptoPPBaseline_Square435_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*);
        using CryptoPPBaseline_Square435_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, CryptoPPBaseline_Square435_ptr);
        using CryptoPPBaseline_Square836_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*);
        using CryptoPPBaseline_Square836_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, CryptoPPBaseline_Square836_ptr);
        using CryptoPPBitsToBytes37_ptr = uint64_t (WINAPIV*)(struct CryptoPP*, uint64_t);
        using CryptoPPBitsToBytes37_clbk = uint64_t (WINAPIV*)(struct CryptoPP*, uint64_t, CryptoPPBitsToBytes37_ptr);
        using CryptoPPBitsToWords38_ptr = uint64_t (WINAPIV*)(struct CryptoPP*, uint64_t);
        using CryptoPPBitsToWords38_clbk = uint64_t (WINAPIV*)(struct CryptoPP*, uint64_t, CryptoPPBitsToWords38_ptr);
        using CryptoPPByteReverse40_ptr = unsigned int (WINAPIV*)(unsigned int);
        using CryptoPPByteReverse40_clbk = unsigned int (WINAPIV*)(unsigned int, CryptoPPByteReverse40_ptr);
        using CryptoPPByteReverse41_ptr = uint64_t (WINAPIV*)(struct CryptoPP*, uint64_t);
        using CryptoPPByteReverse41_clbk = uint64_t (WINAPIV*)(struct CryptoPP*, uint64_t, CryptoPPByteReverse41_ptr);
        using CryptoPPByteReverse42_ptr = uint16_t (WINAPIV*)(struct CryptoPP*, uint16_t);
        using CryptoPPByteReverse42_clbk = uint16_t (WINAPIV*)(struct CryptoPP*, uint16_t, CryptoPPByteReverse42_ptr);
        using CryptoPPBytesToWords43_ptr = uint64_t (WINAPIV*)(struct CryptoPP*, uint64_t);
        using CryptoPPBytesToWords43_clbk = uint64_t (WINAPIV*)(struct CryptoPP*, uint64_t, CryptoPPBytesToWords43_ptr);
        using CryptoPPCRT44_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPPCRT44_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPPCRT44_ptr);
        using CryptoPPCRT45_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPPCRT45_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPPCRT45_ptr);
        using CryptoPPCallNewHandler46_ptr = void (WINAPIV*)(struct CryptoPP*);
        using CryptoPPCallNewHandler46_clbk = void (WINAPIV*)(struct CryptoPP*, CryptoPPCallNewHandler46_ptr);
        using CryptoPPConditionalByteReverse48_ptr = unsigned int (WINAPIV*)(struct CryptoPP::ByteOrder, unsigned int);
        using CryptoPPConditionalByteReverse48_clbk = unsigned int (WINAPIV*)(struct CryptoPP::ByteOrder, unsigned int, CryptoPPConditionalByteReverse48_ptr);
        using CryptoPPCopyOrZero49_ptr = void (WINAPIV*)(struct CryptoPP*, void*, void*, uint64_t);
        using CryptoPPCopyOrZero49_clbk = void (WINAPIV*)(struct CryptoPP*, void*, void*, uint64_t, CryptoPPCopyOrZero49_ptr);
        using CryptoPPCopyWords50_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t);
        using CryptoPPCopyWords50_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t, CryptoPPCopyWords50_ptr);
        using CryptoPPCountWords51_ptr = uint64_t (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t);
        using CryptoPPCountWords51_clbk = uint64_t (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t, CryptoPPCountWords51_ptr);
        using CryptoPPCpuId52_ptr = bool (WINAPIV*)(struct CryptoPP*, unsigned int, unsigned int*);
        using CryptoPPCpuId52_clbk = bool (WINAPIV*)(struct CryptoPP*, unsigned int, unsigned int*, CryptoPPCpuId52_ptr);
        using CryptoPPDEREncodeBitString53_ptr = uint64_t (WINAPIV*)(struct CryptoPP*, struct CryptoPP::BufferedTransformation*, uint8_t*, uint64_t, unsigned int);
        using CryptoPPDEREncodeBitString53_clbk = uint64_t (WINAPIV*)(struct CryptoPP*, struct CryptoPP::BufferedTransformation*, uint8_t*, uint64_t, unsigned int, CryptoPPDEREncodeBitString53_ptr);
        using CryptoPPDEREncodeNull54_ptr = void (WINAPIV*)(struct CryptoPP*, struct CryptoPP::BufferedTransformation*);
        using CryptoPPDEREncodeNull54_clbk = void (WINAPIV*)(struct CryptoPP*, struct CryptoPP::BufferedTransformation*, CryptoPPDEREncodeNull54_ptr);
        using CryptoPPDEREncodeOctetString55_ptr = uint64_t (WINAPIV*)(struct CryptoPP*, struct CryptoPP::BufferedTransformation*, uint8_t*, uint64_t);
        using CryptoPPDEREncodeOctetString55_clbk = uint64_t (WINAPIV*)(struct CryptoPP*, struct CryptoPP::BufferedTransformation*, uint8_t*, uint64_t, CryptoPPDEREncodeOctetString55_ptr);
        using CryptoPPDERLengthEncode56_ptr = uint64_t (WINAPIV*)(struct CryptoPP*, struct CryptoPP::BufferedTransformation*, uint64_t);
        using CryptoPPDERLengthEncode56_clbk = uint64_t (WINAPIV*)(struct CryptoPP*, struct CryptoPP::BufferedTransformation*, uint64_t, CryptoPPDERLengthEncode56_ptr);
        using CryptoPPDERReencode57_ptr = void (WINAPIV*)(struct CryptoPP*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::BufferedTransformation*);
        using CryptoPPDERReencode57_clbk = void (WINAPIV*)(struct CryptoPP*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::BufferedTransformation*, CryptoPPDERReencode57_ptr);
        using CryptoPPDES_VC60Workaround58_ptr = void (WINAPIV*)(struct CryptoPP*);
        using CryptoPPDES_VC60Workaround58_clbk = void (WINAPIV*)(struct CryptoPP*, CryptoPPDES_VC60Workaround58_ptr);
        using CryptoPPDetectX86Features59_ptr = void (WINAPIV*)(struct CryptoPP*);
        using CryptoPPDetectX86Features59_clbk = void (WINAPIV*)(struct CryptoPP*, CryptoPPDetectX86Features59_ptr);
        using CryptoPPDiscreteLogWorkFactor60_ptr = unsigned int (WINAPIV*)(struct CryptoPP*, unsigned int);
        using CryptoPPDiscreteLogWorkFactor60_clbk = unsigned int (WINAPIV*)(struct CryptoPP*, unsigned int, CryptoPPDiscreteLogWorkFactor60_ptr);
        using CryptoPPDivide61_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t, uint64_t*, uint64_t);
        using CryptoPPDivide61_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t, uint64_t*, uint64_t, CryptoPPDivide61_ptr);
        using CryptoPPDivideByPower2Mod62_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t, uint64_t*, uint64_t);
        using CryptoPPDivideByPower2Mod62_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t, uint64_t*, uint64_t, CryptoPPDivideByPower2Mod62_ptr);
        using CryptoPPDivideFourWordsByTwo63_ptr = int64_t (WINAPIV*)(struct CryptoPP::Word*);
        using CryptoPPDivideFourWordsByTwo63_clbk = int64_t (WINAPIV*)(struct CryptoPP::Word*, CryptoPPDivideFourWordsByTwo63_ptr);
        using CryptoPPDivideFourWordsByTwo64_ptr = int64_t (WINAPIV*)(struct CryptoPP::DWord*);
        using CryptoPPDivideFourWordsByTwo64_clbk = int64_t (WINAPIV*)(struct CryptoPP::DWord*, CryptoPPDivideFourWordsByTwo64_ptr);
        using CryptoPPEncryptionPairwiseConsistencyTest_FIPS_140_Only65_ptr = void (WINAPIV*)(struct CryptoPP*, struct CryptoPP::PK_Encryptor*, struct CryptoPP::PK_Decryptor*);
        using CryptoPPEncryptionPairwiseConsistencyTest_FIPS_140_Only65_clbk = void (WINAPIV*)(struct CryptoPP*, struct CryptoPP::PK_Encryptor*, struct CryptoPP::PK_Decryptor*, CryptoPPEncryptionPairwiseConsistencyTest_FIPS_140_Only65_ptr);
        using CryptoPPEuclideanMultiplicativeInverse66_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP*, short, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPPEuclideanMultiplicativeInverse66_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP*, short, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPPEuclideanMultiplicativeInverse66_ptr);
        using CryptoPPFIPS_140_2_ComplianceEnabled67_ptr = bool (WINAPIV*)(struct CryptoPP*);
        using CryptoPPFIPS_140_2_ComplianceEnabled67_clbk = bool (WINAPIV*)(struct CryptoPP*, CryptoPPFIPS_140_2_ComplianceEnabled67_ptr);
        using CryptoPPFactoringWorkFactor68_ptr = unsigned int (WINAPIV*)(struct CryptoPP*, unsigned int);
        using CryptoPPFactoringWorkFactor68_clbk = unsigned int (WINAPIV*)(struct CryptoPP*, unsigned int, CryptoPPFactoringWorkFactor68_ptr);
        using CryptoPPFiles_TestInstantiations69_ptr = void (WINAPIV*)(struct CryptoPP*);
        using CryptoPPFiles_TestInstantiations69_clbk = void (WINAPIV*)(struct CryptoPP*, CryptoPPFiles_TestInstantiations69_ptr);
        using CryptoPPFirstPrime70_ptr = bool (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP::PrimeSelector*);
        using CryptoPPFirstPrime70_clbk = bool (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP::PrimeSelector*, CryptoPPFirstPrime70_ptr);
        using CryptoPPGCD71_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP*, short, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPPGCD71_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP*, short, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPPGCD71_ptr);
        using CryptoPPGetAlignmentOf73_ptr = unsigned int (WINAPIV*)(unsigned int*);
        using CryptoPPGetAlignmentOf73_clbk = unsigned int (WINAPIV*)(unsigned int*, CryptoPPGetAlignmentOf73_ptr);
        using CryptoPPGetCacheLineSize74_ptr = int64_t (WINAPIV*)(struct CryptoPP*);
        using CryptoPPGetCacheLineSize74_clbk = int64_t (WINAPIV*)(struct CryptoPP*, CryptoPPGetCacheLineSize74_ptr);
        using CryptoPPGetNativeByteOrder76_ptr = struct CryptoPP::ByteOrder (WINAPIV*)();
        using CryptoPPGetNativeByteOrder76_clbk = struct CryptoPP::ByteOrder (WINAPIV*)(CryptoPPGetNativeByteOrder76_ptr);
        using CryptoPPGetPrimeTable77_ptr = uint16_t* (WINAPIV*)(struct CryptoPP*, unsigned int*);
        using CryptoPPGetPrimeTable77_clbk = uint16_t* (WINAPIV*)(struct CryptoPP*, unsigned int*, CryptoPPGetPrimeTable77_ptr);
        using CryptoPPGetValueHelper79_ptr = struct CryptoPP::GetValueHelperClass<CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>,CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint> >* (WINAPIV*)(struct CryptoPP::GetValueHelperClass<CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>,CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint> >*, struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*, char*, struct type_info*, void*, struct CryptoPP::NameValuePairs*);
        using CryptoPPGetValueHelper79_clbk = struct CryptoPP::GetValueHelperClass<CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>,CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint> >* (WINAPIV*)(struct CryptoPP::GetValueHelperClass<CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>,CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint> >*, struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*, char*, struct type_info*, void*, struct CryptoPP::NameValuePairs*, CryptoPPGetValueHelper79_ptr);
        using CryptoPPGetValueHelper81_ptr = struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >* (WINAPIV*)(struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >*, struct CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >*, char*, struct type_info*, void*, struct CryptoPP::NameValuePairs*, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>*);
        using CryptoPPGetValueHelper81_clbk = struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >* (WINAPIV*)(struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >*, struct CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >*, char*, struct type_info*, void*, struct CryptoPP::NameValuePairs*, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>*, CryptoPPGetValueHelper81_ptr);
        using CryptoPPGetValueHelper83_ptr = struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >* (WINAPIV*)(struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >*, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>*, char*, struct type_info*, void*, struct CryptoPP::NameValuePairs*);
        using CryptoPPGetValueHelper83_clbk = struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >* (WINAPIV*)(struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>,CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint> >*, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>*, char*, struct type_info*, void*, struct CryptoPP::NameValuePairs*, CryptoPPGetValueHelper83_ptr);
        using CryptoPPGetValueHelper85_ptr = struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >* (WINAPIV*)(struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >*, struct CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >*, char*, struct type_info*, void*, struct CryptoPP::NameValuePairs*, struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*);
        using CryptoPPGetValueHelper85_clbk = struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >* (WINAPIV*)(struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >*, struct CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >*, char*, struct type_info*, void*, struct CryptoPP::NameValuePairs*, struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*, CryptoPPGetValueHelper85_ptr);
        using CryptoPPGetValueHelper87_ptr = struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >* (WINAPIV*)(struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >*, struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*, char*, struct type_info*, void*, struct CryptoPP::NameValuePairs*);
        using CryptoPPGetValueHelper87_clbk = struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >* (WINAPIV*)(struct CryptoPP::GetValueHelperClass<CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>,CryptoPP::DL_PublicKey<CryptoPP::ECPPoint> >*, struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*, char*, struct type_info*, void*, struct CryptoPP::NameValuePairs*, CryptoPPGetValueHelper87_ptr);
        using CryptoPPHack_DefaultValueFromConstReferenceType89_ptr = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*);
        using CryptoPPHack_DefaultValueFromConstReferenceType89_clbk = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*, CryptoPPHack_DefaultValueFromConstReferenceType89_ptr);
        using CryptoPPHack_DefaultValueFromConstReferenceType91_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPPHack_DefaultValueFromConstReferenceType91_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPPHack_DefaultValueFromConstReferenceType91_ptr);
        using CryptoPPHack_GetValueIntoConstReference93_ptr = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, struct CryptoPP::ECPPoint*);
        using CryptoPPHack_GetValueIntoConstReference93_clbk = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, struct CryptoPP::ECPPoint*, CryptoPPHack_GetValueIntoConstReference93_ptr);
        using CryptoPPHack_GetValueIntoConstReference95_ptr = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, struct CryptoPP::Integer*);
        using CryptoPPHack_GetValueIntoConstReference95_clbk = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, struct CryptoPP::Integer*, CryptoPPHack_GetValueIntoConstReference95_ptr);
        using CryptoPPHalfMontgomeryReduce96_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
        using CryptoPPHalfMontgomeryReduce96_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t, CryptoPPHalfMontgomeryReduce96_ptr);
        using CryptoPPIncrementCounterByOne97_ptr = void (WINAPIV*)(struct CryptoPP*, uint8_t*, uint8_t*, unsigned int);
        using CryptoPPIncrementCounterByOne97_clbk = void (WINAPIV*)(struct CryptoPP*, uint8_t*, uint8_t*, unsigned int, CryptoPPIncrementCounterByOne97_ptr);
        using CryptoPPIncrementCounterByOne98_ptr = void (WINAPIV*)(struct CryptoPP*, uint8_t*, unsigned int);
        using CryptoPPIncrementCounterByOne98_clbk = void (WINAPIV*)(struct CryptoPP*, uint8_t*, unsigned int, CryptoPPIncrementCounterByOne98_ptr);
        using CryptoPPInverseLucas99_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPPInverseLucas99_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPPInverseLucas99_ptr);
        using CryptoPPInverseLucas100_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPPInverseLucas100_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPPInverseLucas100_ptr);
        using CryptoPPIsAlignedOn102_ptr = bool (WINAPIV*)(void*, unsigned int);
        using CryptoPPIsAlignedOn102_clbk = bool (WINAPIV*)(void*, unsigned int, CryptoPPIsAlignedOn102_ptr);
        using CryptoPPIsFermatProbablePrime103_ptr = bool (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPPIsFermatProbablePrime103_clbk = bool (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPPIsFermatProbablePrime103_ptr);
        using CryptoPPIsLucasProbablePrime104_ptr = bool (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*);
        using CryptoPPIsLucasProbablePrime104_clbk = bool (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*, CryptoPPIsLucasProbablePrime104_ptr);
        using CryptoPPIsPowerOf2106_ptr = bool (WINAPIV*)(unsigned int*);
        using CryptoPPIsPowerOf2106_clbk = bool (WINAPIV*)(unsigned int*, CryptoPPIsPowerOf2106_ptr);
        using CryptoPPIsPrime107_ptr = bool (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*);
        using CryptoPPIsPrime107_clbk = bool (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*, CryptoPPIsPrime107_ptr);
        using CryptoPPIsSmallPrime108_ptr = bool (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*);
        using CryptoPPIsSmallPrime108_clbk = bool (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*, CryptoPPIsSmallPrime108_ptr);
        using CryptoPPIsStrongLucasProbablePrime109_ptr = bool (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*);
        using CryptoPPIsStrongLucasProbablePrime109_clbk = bool (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*, CryptoPPIsStrongLucasProbablePrime109_ptr);
        using CryptoPPIsStrongProbablePrime110_ptr = bool (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPPIsStrongProbablePrime110_clbk = bool (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPPIsStrongProbablePrime110_ptr);
        using CryptoPPJacobi111_ptr = int64_t (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPPJacobi111_clbk = int64_t (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPPJacobi111_ptr);
        using CryptoPPLucas112_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP*, short, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPPLucas112_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP*, short, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPPLucas112_ptr);
        using CryptoPPMakeParameters114_ptr = struct CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>* (WINAPIV*)(struct CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>*, char*, char**, bool);
        using CryptoPPMakeParameters114_clbk = struct CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>* (WINAPIV*)(struct CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>*, char*, char**, bool, CryptoPPMakeParameters114_ptr);
        using CryptoPPMaurerProvablePrime115_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP*, short, struct CryptoPP::Integer*, struct CryptoPP::RandomNumberGenerator*);
        using CryptoPPMaurerProvablePrime115_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP*, short, struct CryptoPP::Integer*, struct CryptoPP::RandomNumberGenerator*, CryptoPPMaurerProvablePrime115_ptr);
        using CryptoPPMihailescuProvablePrime116_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP*, short, struct CryptoPP::Integer*, struct CryptoPP::RandomNumberGenerator*);
        using CryptoPPMihailescuProvablePrime116_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP*, short, struct CryptoPP::Integer*, struct CryptoPP::RandomNumberGenerator*, CryptoPPMihailescuProvablePrime116_ptr);
        using CryptoPPModPowerOf2118_ptr = unsigned int (WINAPIV*)(uint64_t*, unsigned int*);
        using CryptoPPModPowerOf2118_clbk = unsigned int (WINAPIV*)(uint64_t*, unsigned int*, CryptoPPModPowerOf2118_ptr);
        using CryptoPPModes_TestInstantiations119_ptr = void (WINAPIV*)(struct CryptoPP*);
        using CryptoPPModes_TestInstantiations119_clbk = void (WINAPIV*)(struct CryptoPP*, CryptoPPModes_TestInstantiations119_ptr);
        using CryptoPPModularExponentiation120_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP*, short, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPPModularExponentiation120_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP*, short, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPPModularExponentiation120_ptr);
        using CryptoPPModularRoot121_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPPModularRoot121_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPPModularRoot121_ptr);
        using CryptoPPModularRoot122_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPPModularRoot122_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPPModularRoot122_ptr);
        using CryptoPPModularSquareRoot123_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP*, short, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPPModularSquareRoot123_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP*, short, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPPModularSquareRoot123_ptr);
        using CryptoPPMontgomeryReduce124_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
        using CryptoPPMontgomeryReduce124_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t, CryptoPPMontgomeryReduce124_ptr);
        using CryptoPPMultiply125_ptr = void (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPPMultiply125_clbk = void (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPPMultiply125_ptr);
        using CryptoPPMultiply126_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
        using CryptoPPMultiply126_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t, CryptoPPMultiply126_ptr);
        using CryptoPPMultiplyBottom127_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
        using CryptoPPMultiplyBottom127_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t, CryptoPPMultiplyBottom127_ptr);
        using CryptoPPMultiplyByPower2Mod128_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t, uint64_t*, uint64_t);
        using CryptoPPMultiplyByPower2Mod128_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t, uint64_t*, uint64_t, CryptoPPMultiplyByPower2Mod128_ptr);
        using CryptoPPMultiplyTop129_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
        using CryptoPPMultiplyTop129_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t, CryptoPPMultiplyTop129_ptr);
        using CryptoPPNativeByteOrderIs131_ptr = bool (WINAPIV*)(struct CryptoPP::ByteOrder);
        using CryptoPPNativeByteOrderIs131_clbk = bool (WINAPIV*)(struct CryptoPP::ByteOrder, CryptoPPNativeByteOrderIs131_ptr);
        using CryptoPPNullRNG132_ptr = struct CryptoPP::RandomNumberGenerator* (WINAPIV*)(struct CryptoPP*);
        using CryptoPPNullRNG132_clbk = struct CryptoPP::RandomNumberGenerator* (WINAPIV*)(struct CryptoPP*, CryptoPPNullRNG132_ptr);
        using CryptoPPOS_GenerateRandomBlock133_ptr = void (WINAPIV*)(struct CryptoPP*, bool, uint8_t*, uint64_t);
        using CryptoPPOS_GenerateRandomBlock133_clbk = void (WINAPIV*)(struct CryptoPP*, bool, uint8_t*, uint64_t, CryptoPPOS_GenerateRandomBlock133_ptr);
        using CryptoPPP1363_MGF1KDF2_Common134_ptr = void (WINAPIV*)(struct CryptoPP*, struct CryptoPP::HashTransformation*, uint8_t*, char, uint8_t*, uint64_t, uint8_t*, uint64_t, bool, unsigned int);
        using CryptoPPP1363_MGF1KDF2_Common134_clbk = void (WINAPIV*)(struct CryptoPP*, struct CryptoPP::HashTransformation*, uint8_t*, char, uint8_t*, uint64_t, uint8_t*, uint64_t, bool, unsigned int, CryptoPPP1363_MGF1KDF2_Common134_ptr);
        using CryptoPPPositiveAdd135_ptr = void (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPPPositiveAdd135_clbk = void (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPPPositiveAdd135_ptr);
        using CryptoPPPositiveDivide136_ptr = void (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPPPositiveDivide136_clbk = void (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPPPositiveDivide136_ptr);
        using CryptoPPPositiveMultiply137_ptr = void (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPPPositiveMultiply137_clbk = void (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPPPositiveMultiply137_ptr);
        using CryptoPPPositiveSubtract138_ptr = void (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPPPositiveSubtract138_clbk = void (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPPPositiveSubtract138_ptr);
        using CryptoPPPowerUpSelfTestInProgressOnThisThread139_ptr = bool (WINAPIV*)(struct CryptoPP*);
        using CryptoPPPowerUpSelfTestInProgressOnThisThread139_clbk = bool (WINAPIV*)(struct CryptoPP*, CryptoPPPowerUpSelfTestInProgressOnThisThread139_ptr);
        using CryptoPPPrimeSearchInterval140_ptr = unsigned int (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*);
        using CryptoPPPrimeSearchInterval140_clbk = unsigned int (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*, CryptoPPPrimeSearchInterval140_ptr);
        using CryptoPPPutWord142_ptr = void (WINAPIV*)(bool, struct CryptoPP::ByteOrder, char*, unsigned int, char*);
        using CryptoPPPutWord142_clbk = void (WINAPIV*)(bool, struct CryptoPP::ByteOrder, char*, unsigned int, char*, CryptoPPPutWord142_ptr);
        using CryptoPPRabinMillerTest143_ptr = bool (WINAPIV*)(struct CryptoPP*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::Integer*, unsigned int);
        using CryptoPPRabinMillerTest143_clbk = bool (WINAPIV*)(struct CryptoPP*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::Integer*, unsigned int, CryptoPPRabinMillerTest143_ptr);
        using CryptoPPRecursiveInverseModPower2144_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
        using CryptoPPRecursiveInverseModPower2144_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t, CryptoPPRecursiveInverseModPower2144_ptr);
        using CryptoPPRecursiveMultiply145_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
        using CryptoPPRecursiveMultiply145_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t, CryptoPPRecursiveMultiply145_ptr);
        using CryptoPPRecursiveMultiplyBottom146_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
        using CryptoPPRecursiveMultiplyBottom146_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t, CryptoPPRecursiveMultiplyBottom146_ptr);
        using CryptoPPRecursiveSquare147_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
        using CryptoPPRecursiveSquare147_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t, CryptoPPRecursiveSquare147_ptr);
        using CryptoPPReverseCipherDir148_ptr = struct CryptoPP::CipherDir (WINAPIV*)(struct CryptoPP*, struct CryptoPP::CipherDir);
        using CryptoPPReverseCipherDir148_clbk = struct CryptoPP::CipherDir (WINAPIV*)(struct CryptoPP*, struct CryptoPP::CipherDir, CryptoPPReverseCipherDir148_ptr);
        using CryptoPPSTDMIN150_ptr = uint64_t* (WINAPIV*)(uint64_t*, uint64_t*);
        using CryptoPPSTDMIN150_clbk = uint64_t* (WINAPIV*)(uint64_t*, uint64_t*, CryptoPPSTDMIN150_ptr);
        using CryptoPPSaturatingSubtract152_ptr = uint64_t (WINAPIV*)(uint64_t*, unsigned int*);
        using CryptoPPSaturatingSubtract152_clbk = uint64_t (WINAPIV*)(uint64_t*, unsigned int*, CryptoPPSaturatingSubtract152_ptr);
        using CryptoPPSerpent_KeySchedule153_ptr = void (WINAPIV*)(struct CryptoPP*, unsigned int*, unsigned int, uint8_t*, uint64_t);
        using CryptoPPSerpent_KeySchedule153_clbk = void (WINAPIV*)(struct CryptoPP*, unsigned int*, unsigned int, uint8_t*, uint64_t, CryptoPPSerpent_KeySchedule153_ptr);
        using CryptoPPSetPowerUpSelfTestInProgressOnThisThread154_ptr = void (WINAPIV*)(struct CryptoPP*, bool);
        using CryptoPPSetPowerUpSelfTestInProgressOnThisThread154_clbk = void (WINAPIV*)(struct CryptoPP*, bool, CryptoPPSetPowerUpSelfTestInProgressOnThisThread154_ptr);
        using CryptoPPSetWords155_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t, uint64_t);
        using CryptoPPSetWords155_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t, uint64_t, CryptoPPSetWords155_ptr);
        using CryptoPPShiftWordsLeftByBits156_ptr = uint64_t (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t, unsigned int);
        using CryptoPPShiftWordsLeftByBits156_clbk = uint64_t (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t, unsigned int, CryptoPPShiftWordsLeftByBits156_ptr);
        using CryptoPPShiftWordsLeftByWords157_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t, uint64_t);
        using CryptoPPShiftWordsLeftByWords157_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t, uint64_t, CryptoPPShiftWordsLeftByWords157_ptr);
        using CryptoPPShiftWordsRightByBits158_ptr = uint64_t (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t, unsigned int);
        using CryptoPPShiftWordsRightByBits158_clbk = uint64_t (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t, unsigned int, CryptoPPShiftWordsRightByBits158_ptr);
        using CryptoPPShiftWordsRightByWords159_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t, uint64_t);
        using CryptoPPShiftWordsRightByWords159_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t, uint64_t, CryptoPPShiftWordsRightByWords159_ptr);
        using CryptoPPSignaturePairwiseConsistencyTest_FIPS_140_Only160_ptr = void (WINAPIV*)(struct CryptoPP*, struct CryptoPP::PK_Signer*, struct CryptoPP::PK_Verifier*);
        using CryptoPPSignaturePairwiseConsistencyTest_FIPS_140_Only160_clbk = void (WINAPIV*)(struct CryptoPP*, struct CryptoPP::PK_Signer*, struct CryptoPP::PK_Verifier*, CryptoPPSignaturePairwiseConsistencyTest_FIPS_140_Only160_ptr);
        using CryptoPPSimulatePowerUpSelfTestFailure161_ptr = void (WINAPIV*)(struct CryptoPP*);
        using CryptoPPSimulatePowerUpSelfTestFailure161_clbk = void (WINAPIV*)(struct CryptoPP*, CryptoPPSimulatePowerUpSelfTestFailure161_ptr);
        using CryptoPPSmallDivisorsTest162_ptr = bool (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*);
        using CryptoPPSmallDivisorsTest162_clbk = bool (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*, CryptoPPSmallDivisorsTest162_ptr);
        using CryptoPPSolveModularQuadraticEquation163_ptr = bool (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPPSolveModularQuadraticEquation163_clbk = bool (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPPSolveModularQuadraticEquation163_ptr);
        using CryptoPPSquare164_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
        using CryptoPPSquare164_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t, CryptoPPSquare164_ptr);
        using CryptoPPStandardReallocate166_ptr = char* (WINAPIV*)(struct CryptoPP::AllocatorWithCleanup<unsigned char,0>*, char*, uint64_t, uint64_t, bool);
        using CryptoPPStandardReallocate166_clbk = char* (WINAPIV*)(struct CryptoPP::AllocatorWithCleanup<unsigned char,0>*, char*, uint64_t, uint64_t, bool, CryptoPPStandardReallocate166_ptr);
        using CryptoPPSubtract167_ptr = int64_t (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
        using CryptoPPSubtract167_clbk = int64_t (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t, CryptoPPSubtract167_ptr);
        using CryptoPPTestInstantiations_gfpcrypt168_ptr = void (WINAPIV*)(struct CryptoPP*);
        using CryptoPPTestInstantiations_gfpcrypt168_clbk = void (WINAPIV*)(struct CryptoPP*, CryptoPPTestInstantiations_gfpcrypt168_ptr);
        using CryptoPPTheBitBucket169_ptr = struct CryptoPP::BufferedTransformation* (WINAPIV*)(struct CryptoPP*);
        using CryptoPPTheBitBucket169_clbk = struct CryptoPP::BufferedTransformation* (WINAPIV*)(struct CryptoPP*, CryptoPPTheBitBucket169_ptr);
        using CryptoPPTrialDivision170_ptr = bool (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*, unsigned int);
        using CryptoPPTrialDivision170_clbk = bool (WINAPIV*)(struct CryptoPP*, struct CryptoPP::Integer*, unsigned int, CryptoPPTrialDivision170_ptr);
        using CryptoPPVerifyPrime171_ptr = bool (WINAPIV*)(struct CryptoPP*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::Integer*, unsigned int);
        using CryptoPPVerifyPrime171_clbk = bool (WINAPIV*)(struct CryptoPP*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::Integer*, unsigned int, CryptoPPVerifyPrime171_ptr);
        using CryptoPPXorWords172_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
        using CryptoPPXorWords172_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t, CryptoPPXorWords172_ptr);
        using CryptoPPXorWords173_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t);
        using CryptoPPXorWords173_clbk = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t, CryptoPPXorWords173_ptr);
        using CryptoPPa_exp_b_mod_c174_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP*, short, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPPa_exp_b_mod_c174_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP*, short, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPPa_exp_b_mod_c174_ptr);
        using CryptoPPa_times_b_mod_c175_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP*, short, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPPa_times_b_mod_c175_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP*, short, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPPa_times_b_mod_c175_ptr);
        using CryptoPPxorbuf188_ptr = void (WINAPIV*)(struct CryptoPP*, uint8_t*, uint8_t*, uint8_t*, uint64_t);
        using CryptoPPxorbuf188_clbk = void (WINAPIV*)(struct CryptoPP*, uint8_t*, uint8_t*, uint8_t*, uint64_t, CryptoPPxorbuf188_ptr);
        using CryptoPPxorbuf189_ptr = void (WINAPIV*)(struct CryptoPP*, uint8_t*, uint8_t*, uint64_t);
        using CryptoPPxorbuf189_clbk = void (WINAPIV*)(struct CryptoPP*, uint8_t*, uint8_t*, uint64_t, CryptoPPxorbuf189_ptr);
        
        using CryptoPP__Clonablector_Clonable2_ptr = void (WINAPIV*)(struct CryptoPP::Clonable*, struct CryptoPP::Clonable*);
        using CryptoPP__Clonablector_Clonable2_clbk = void (WINAPIV*)(struct CryptoPP::Clonable*, struct CryptoPP::Clonable*, CryptoPP__Clonablector_Clonable2_ptr);
        using CryptoPP__Clonablector_Clonable3_ptr = int64_t (WINAPIV*)(struct CryptoPP::Clonable*);
        using CryptoPP__Clonablector_Clonable3_clbk = int64_t (WINAPIV*)(struct CryptoPP::Clonable*, CryptoPP__Clonablector_Clonable3_ptr);
        using CryptoPP__ClonableClone5_ptr = struct CryptoPP::Clonable* (WINAPIV*)(struct CryptoPP::Clonable*);
        using CryptoPP__ClonableClone5_clbk = struct CryptoPP::Clonable* (WINAPIV*)(struct CryptoPP::Clonable*, CryptoPP__ClonableClone5_ptr);
        using CryptoPP__Clonabledtor_Clonable7_ptr = void (WINAPIV*)(struct CryptoPP::Clonable*);
        using CryptoPP__Clonabledtor_Clonable7_clbk = void (WINAPIV*)(struct CryptoPP::Clonable*, CryptoPP__Clonabledtor_Clonable7_ptr);
        
        using CryptoPP__Algorithmctor_Algorithm2_ptr = void (WINAPIV*)(struct CryptoPP::Algorithm*, struct CryptoPP::Algorithm*);
        using CryptoPP__Algorithmctor_Algorithm2_clbk = void (WINAPIV*)(struct CryptoPP::Algorithm*, struct CryptoPP::Algorithm*, CryptoPP__Algorithmctor_Algorithm2_ptr);
        using CryptoPP__Algorithmctor_Algorithm3_ptr = int64_t (WINAPIV*)(struct CryptoPP::Algorithm*, bool);
        using CryptoPP__Algorithmctor_Algorithm3_clbk = int64_t (WINAPIV*)(struct CryptoPP::Algorithm*, bool, CryptoPP__Algorithmctor_Algorithm3_ptr);
        using CryptoPP__AlgorithmAlgorithmName5_ptr = struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (WINAPIV*)(struct CryptoPP::Algorithm*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*);
        using CryptoPP__AlgorithmAlgorithmName5_clbk = struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (WINAPIV*)(struct CryptoPP::Algorithm*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, CryptoPP__AlgorithmAlgorithmName5_ptr);
        using CryptoPP__Algorithmdtor_Algorithm7_ptr = void (WINAPIV*)(struct CryptoPP::Algorithm*);
        using CryptoPP__Algorithmdtor_Algorithm7_clbk = void (WINAPIV*)(struct CryptoPP::Algorithm*, CryptoPP__Algorithmdtor_Algorithm7_ptr);
        
        using CryptoPP__RandomNumberGeneratorCanIncorporateEntropy1_ptr = bool (WINAPIV*)(struct CryptoPP::RandomNumberGenerator*);
        using CryptoPP__RandomNumberGeneratorCanIncorporateEntropy1_clbk = bool (WINAPIV*)(struct CryptoPP::RandomNumberGenerator*, CryptoPP__RandomNumberGeneratorCanIncorporateEntropy1_ptr);
        using CryptoPP__RandomNumberGeneratorDiscardBytes2_ptr = void (WINAPIV*)(struct CryptoPP::RandomNumberGenerator*, uint64_t);
        using CryptoPP__RandomNumberGeneratorDiscardBytes2_clbk = void (WINAPIV*)(struct CryptoPP::RandomNumberGenerator*, uint64_t, CryptoPP__RandomNumberGeneratorDiscardBytes2_ptr);
        using CryptoPP__RandomNumberGeneratorGenerateBit3_ptr = unsigned int (WINAPIV*)(struct CryptoPP::RandomNumberGenerator*);
        using CryptoPP__RandomNumberGeneratorGenerateBit3_clbk = unsigned int (WINAPIV*)(struct CryptoPP::RandomNumberGenerator*, CryptoPP__RandomNumberGeneratorGenerateBit3_ptr);
        using CryptoPP__RandomNumberGeneratorGenerateBlock4_ptr = void (WINAPIV*)(struct CryptoPP::RandomNumberGenerator*, uint8_t*, uint64_t);
        using CryptoPP__RandomNumberGeneratorGenerateBlock4_clbk = void (WINAPIV*)(struct CryptoPP::RandomNumberGenerator*, uint8_t*, uint64_t, CryptoPP__RandomNumberGeneratorGenerateBlock4_ptr);
        using CryptoPP__RandomNumberGeneratorGenerateByte5_ptr = uint8_t (WINAPIV*)(struct CryptoPP::RandomNumberGenerator*);
        using CryptoPP__RandomNumberGeneratorGenerateByte5_clbk = uint8_t (WINAPIV*)(struct CryptoPP::RandomNumberGenerator*, CryptoPP__RandomNumberGeneratorGenerateByte5_ptr);
        using CryptoPP__RandomNumberGeneratorGenerateWord326_ptr = unsigned int (WINAPIV*)(struct CryptoPP::RandomNumberGenerator*, unsigned int, unsigned int);
        using CryptoPP__RandomNumberGeneratorGenerateWord326_clbk = unsigned int (WINAPIV*)(struct CryptoPP::RandomNumberGenerator*, unsigned int, unsigned int, CryptoPP__RandomNumberGeneratorGenerateWord326_ptr);
        using CryptoPP__RandomNumberGeneratorIncorporateEntropy7_ptr = void (WINAPIV*)(struct CryptoPP::RandomNumberGenerator*, uint8_t*, uint64_t);
        using CryptoPP__RandomNumberGeneratorIncorporateEntropy7_clbk = void (WINAPIV*)(struct CryptoPP::RandomNumberGenerator*, uint8_t*, uint64_t, CryptoPP__RandomNumberGeneratorIncorporateEntropy7_ptr);
        using CryptoPP__RandomNumberGeneratorctor_RandomNumberGenerator8_ptr = int64_t (WINAPIV*)(struct CryptoPP::RandomNumberGenerator*);
        using CryptoPP__RandomNumberGeneratorctor_RandomNumberGenerator8_clbk = int64_t (WINAPIV*)(struct CryptoPP::RandomNumberGenerator*, CryptoPP__RandomNumberGeneratorctor_RandomNumberGenerator8_ptr);
        using CryptoPP__RandomNumberGeneratordtor_RandomNumberGenerator10_ptr = void (WINAPIV*)(struct CryptoPP::RandomNumberGenerator*);
        using CryptoPP__RandomNumberGeneratordtor_RandomNumberGenerator10_clbk = void (WINAPIV*)(struct CryptoPP::RandomNumberGenerator*, CryptoPP__RandomNumberGeneratordtor_RandomNumberGenerator10_ptr);
        
        using CryptoPP__NotCopyablector_NotCopyable2_ptr = void (WINAPIV*)(struct CryptoPP::NotCopyable*);
        using CryptoPP__NotCopyablector_NotCopyable2_clbk = void (WINAPIV*)(struct CryptoPP::NotCopyable*, CryptoPP__NotCopyablector_NotCopyable2_ptr);
        
        using CryptoPP__BlockTransformationBlockAlignment1_ptr = unsigned int (WINAPIV*)(struct CryptoPP::BlockTransformation*);
        using CryptoPP__BlockTransformationBlockAlignment1_clbk = unsigned int (WINAPIV*)(struct CryptoPP::BlockTransformation*, CryptoPP__BlockTransformationBlockAlignment1_ptr);
        using CryptoPP__BlockTransformationctor_BlockTransformation3_ptr = void (WINAPIV*)(struct CryptoPP::BlockTransformation*, struct CryptoPP::BlockTransformation*);
        using CryptoPP__BlockTransformationctor_BlockTransformation3_clbk = void (WINAPIV*)(struct CryptoPP::BlockTransformation*, struct CryptoPP::BlockTransformation*, CryptoPP__BlockTransformationctor_BlockTransformation3_ptr);
        using CryptoPP__BlockTransformationctor_BlockTransformation5_ptr = void (WINAPIV*)(struct CryptoPP::BlockTransformation*);
        using CryptoPP__BlockTransformationctor_BlockTransformation5_clbk = void (WINAPIV*)(struct CryptoPP::BlockTransformation*, CryptoPP__BlockTransformationctor_BlockTransformation5_ptr);
        using CryptoPP__BlockTransformationGetCipherDirection6_ptr = struct CryptoPP::CipherDir (WINAPIV*)(struct CryptoPP::BlockTransformation*);
        using CryptoPP__BlockTransformationGetCipherDirection6_clbk = struct CryptoPP::CipherDir (WINAPIV*)(struct CryptoPP::BlockTransformation*, CryptoPP__BlockTransformationGetCipherDirection6_ptr);
        using CryptoPP__BlockTransformationIsPermutation8_ptr = bool (WINAPIV*)(struct CryptoPP::BlockTransformation*);
        using CryptoPP__BlockTransformationIsPermutation8_clbk = bool (WINAPIV*)(struct CryptoPP::BlockTransformation*, CryptoPP__BlockTransformationIsPermutation8_ptr);
        using CryptoPP__BlockTransformationOptimalNumberOfParallelBlocks10_ptr = unsigned int (WINAPIV*)(struct CryptoPP::BlockTransformation*);
        using CryptoPP__BlockTransformationOptimalNumberOfParallelBlocks10_clbk = unsigned int (WINAPIV*)(struct CryptoPP::BlockTransformation*, CryptoPP__BlockTransformationOptimalNumberOfParallelBlocks10_ptr);
        using CryptoPP__BlockTransformationProcessAndXorMultipleBlocks11_ptr = void (WINAPIV*)(struct CryptoPP::BlockTransformation*, uint8_t*, uint8_t*, uint8_t*, uint64_t);
        using CryptoPP__BlockTransformationProcessAndXorMultipleBlocks11_clbk = void (WINAPIV*)(struct CryptoPP::BlockTransformation*, uint8_t*, uint8_t*, uint8_t*, uint64_t, CryptoPP__BlockTransformationProcessAndXorMultipleBlocks11_ptr);
        using CryptoPP__BlockTransformationProcessBlock12_ptr = void (WINAPIV*)(struct CryptoPP::BlockTransformation*, uint8_t*);
        using CryptoPP__BlockTransformationProcessBlock12_clbk = void (WINAPIV*)(struct CryptoPP::BlockTransformation*, uint8_t*, CryptoPP__BlockTransformationProcessBlock12_ptr);
        using CryptoPP__BlockTransformationProcessBlock13_ptr = void (WINAPIV*)(struct CryptoPP::BlockTransformation*, uint8_t*, uint8_t*);
        using CryptoPP__BlockTransformationProcessBlock13_clbk = void (WINAPIV*)(struct CryptoPP::BlockTransformation*, uint8_t*, uint8_t*, CryptoPP__BlockTransformationProcessBlock13_ptr);
        using CryptoPP__BlockTransformationdtor_BlockTransformation15_ptr = void (WINAPIV*)(struct CryptoPP::BlockTransformation*);
        using CryptoPP__BlockTransformationdtor_BlockTransformation15_clbk = void (WINAPIV*)(struct CryptoPP::BlockTransformation*, CryptoPP__BlockTransformationdtor_BlockTransformation15_ptr);
        
        using CryptoPP__SimpleKeyingInterfaceAssertValidKeyLength1_ptr = void (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*, uint64_t);
        using CryptoPP__SimpleKeyingInterfaceAssertValidKeyLength1_clbk = void (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*, uint64_t, CryptoPP__SimpleKeyingInterfaceAssertValidKeyLength1_ptr);
        using CryptoPP__SimpleKeyingInterfaceGetIVAndThrowIfInvalid2_ptr = uint8_t* (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__SimpleKeyingInterfaceGetIVAndThrowIfInvalid2_clbk = uint8_t* (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*, struct CryptoPP::NameValuePairs*, CryptoPP__SimpleKeyingInterfaceGetIVAndThrowIfInvalid2_ptr);
        using CryptoPP__SimpleKeyingInterfaceGetNextIV3_ptr = void (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*, struct CryptoPP::RandomNumberGenerator*, uint8_t*);
        using CryptoPP__SimpleKeyingInterfaceGetNextIV3_clbk = void (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*, struct CryptoPP::RandomNumberGenerator*, uint8_t*, CryptoPP__SimpleKeyingInterfaceGetNextIV3_ptr);
        using CryptoPP__SimpleKeyingInterfaceIsResynchronizable4_ptr = bool (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*);
        using CryptoPP__SimpleKeyingInterfaceIsResynchronizable4_clbk = bool (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*, CryptoPP__SimpleKeyingInterfaceIsResynchronizable4_ptr);
        using CryptoPP__SimpleKeyingInterfaceIsValidKeyLength6_ptr = bool (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*, uint64_t);
        using CryptoPP__SimpleKeyingInterfaceIsValidKeyLength6_clbk = bool (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*, uint64_t, CryptoPP__SimpleKeyingInterfaceIsValidKeyLength6_ptr);
        using CryptoPP__SimpleKeyingInterfaceResynchronize8_ptr = void (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*, char*);
        using CryptoPP__SimpleKeyingInterfaceResynchronize8_clbk = void (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*, char*, CryptoPP__SimpleKeyingInterfaceResynchronize8_ptr);
        using CryptoPP__SimpleKeyingInterfaceSetKey9_ptr = void (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*, uint8_t*, uint64_t, struct CryptoPP::NameValuePairs*);
        using CryptoPP__SimpleKeyingInterfaceSetKey9_clbk = void (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*, uint8_t*, uint64_t, struct CryptoPP::NameValuePairs*, CryptoPP__SimpleKeyingInterfaceSetKey9_ptr);
        using CryptoPP__SimpleKeyingInterfaceSetKeyWithIV10_ptr = void (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*, uint8_t*, uint64_t, uint8_t*);
        using CryptoPP__SimpleKeyingInterfaceSetKeyWithIV10_clbk = void (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*, uint8_t*, uint64_t, uint8_t*, CryptoPP__SimpleKeyingInterfaceSetKeyWithIV10_ptr);
        using CryptoPP__SimpleKeyingInterfaceSetKeyWithRounds11_ptr = void (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*, uint8_t*, uint64_t, int);
        using CryptoPP__SimpleKeyingInterfaceSetKeyWithRounds11_clbk = void (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*, uint8_t*, uint64_t, int, CryptoPP__SimpleKeyingInterfaceSetKeyWithRounds11_ptr);
        using CryptoPP__SimpleKeyingInterfacector_SimpleKeyingInterface13_ptr = void (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*, struct CryptoPP::SimpleKeyingInterface*);
        using CryptoPP__SimpleKeyingInterfacector_SimpleKeyingInterface13_clbk = void (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*, struct CryptoPP::SimpleKeyingInterface*, CryptoPP__SimpleKeyingInterfacector_SimpleKeyingInterface13_ptr);
        using CryptoPP__SimpleKeyingInterfacector_SimpleKeyingInterface15_ptr = void (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*);
        using CryptoPP__SimpleKeyingInterfacector_SimpleKeyingInterface15_clbk = void (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*, CryptoPP__SimpleKeyingInterfacector_SimpleKeyingInterface15_ptr);
        using CryptoPP__SimpleKeyingInterfaceThrowIfInvalidIV16_ptr = void (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*, uint8_t*);
        using CryptoPP__SimpleKeyingInterfaceThrowIfInvalidIV16_clbk = void (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*, uint8_t*, CryptoPP__SimpleKeyingInterfaceThrowIfInvalidIV16_ptr);
        using CryptoPP__SimpleKeyingInterfaceThrowIfInvalidKeyLength17_ptr = void (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*, uint64_t);
        using CryptoPP__SimpleKeyingInterfaceThrowIfInvalidKeyLength17_clbk = void (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*, uint64_t, CryptoPP__SimpleKeyingInterfaceThrowIfInvalidKeyLength17_ptr);
        using CryptoPP__SimpleKeyingInterfaceThrowIfResynchronizable18_ptr = void (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*);
        using CryptoPP__SimpleKeyingInterfaceThrowIfResynchronizable18_clbk = void (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*, CryptoPP__SimpleKeyingInterfaceThrowIfResynchronizable18_ptr);
        using CryptoPP__SimpleKeyingInterfacedtor_SimpleKeyingInterface20_ptr = void (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*);
        using CryptoPP__SimpleKeyingInterfacedtor_SimpleKeyingInterface20_clbk = void (WINAPIV*)(struct CryptoPP::SimpleKeyingInterface*, CryptoPP__SimpleKeyingInterfacedtor_SimpleKeyingInterface20_ptr);
        
        using CryptoPP__NameValuePairsGetIntValue1_ptr = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, int*);
        using CryptoPP__NameValuePairsGetIntValue1_clbk = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, int*, CryptoPP__NameValuePairsGetIntValue1_ptr);
        using CryptoPP__NameValuePairsGetIntValueWithDefault2_ptr = int64_t (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, int);
        using CryptoPP__NameValuePairsGetIntValueWithDefault2_clbk = int64_t (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, int, CryptoPP__NameValuePairsGetIntValueWithDefault2_ptr);
        using CryptoPP__NameValuePairsGetRequiredIntParameter3_ptr = void (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, char*, int*);
        using CryptoPP__NameValuePairsGetRequiredIntParameter3_clbk = void (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, char*, int*, CryptoPP__NameValuePairsGetRequiredIntParameter3_ptr);
        using CryptoPP__NameValuePairsGetThisObject5_ptr = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*);
        using CryptoPP__NameValuePairsGetThisObject5_clbk = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*, CryptoPP__NameValuePairsGetThisObject5_ptr);
        using CryptoPP__NameValuePairsGetThisObject7_ptr = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>*);
        using CryptoPP__NameValuePairsGetThisObject7_clbk = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>*, CryptoPP__NameValuePairsGetThisObject7_ptr);
        using CryptoPP__NameValuePairsGetThisObject9_ptr = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, struct CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >*);
        using CryptoPP__NameValuePairsGetThisObject9_clbk = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, struct CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >*, CryptoPP__NameValuePairsGetThisObject9_ptr);
        using CryptoPP__NameValuePairsGetThisObject11_ptr = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*);
        using CryptoPP__NameValuePairsGetThisObject11_clbk = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*, CryptoPP__NameValuePairsGetThisObject11_ptr);
        using CryptoPP__NameValuePairsGetThisObject13_ptr = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, struct CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >*);
        using CryptoPP__NameValuePairsGetThisObject13_clbk = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, struct CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >*, CryptoPP__NameValuePairsGetThisObject13_ptr);
        using CryptoPP__NameValuePairsGetThisPointer15_ptr = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>**);
        using CryptoPP__NameValuePairsGetThisPointer15_clbk = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>**, CryptoPP__NameValuePairsGetThisPointer15_ptr);
        using CryptoPP__NameValuePairsGetValue17_ptr = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, struct CryptoPP::ConstByteArrayParameter*);
        using CryptoPP__NameValuePairsGetValue17_clbk = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, struct CryptoPP::ConstByteArrayParameter*, CryptoPP__NameValuePairsGetValue17_ptr);
        using CryptoPP__NameValuePairsGetValue19_ptr = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*);
        using CryptoPP__NameValuePairsGetValue19_clbk = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*, CryptoPP__NameValuePairsGetValue19_ptr);
        using CryptoPP__NameValuePairsGetValue21_ptr = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>**);
        using CryptoPP__NameValuePairsGetValue21_clbk = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>**, CryptoPP__NameValuePairsGetValue21_ptr);
        using CryptoPP__NameValuePairsGetValue23_ptr = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>*);
        using CryptoPP__NameValuePairsGetValue23_clbk = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>*, CryptoPP__NameValuePairsGetValue23_ptr);
        using CryptoPP__NameValuePairsGetValue25_ptr = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, struct CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >*);
        using CryptoPP__NameValuePairsGetValue25_clbk = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, struct CryptoPP::DL_PrivateKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >*, CryptoPP__NameValuePairsGetValue25_ptr);
        using CryptoPP__NameValuePairsGetValue27_ptr = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*);
        using CryptoPP__NameValuePairsGetValue27_clbk = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*, CryptoPP__NameValuePairsGetValue27_ptr);
        using CryptoPP__NameValuePairsGetValue29_ptr = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, struct CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >*);
        using CryptoPP__NameValuePairsGetValue29_clbk = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, struct CryptoPP::DL_PublicKeyImpl<CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP> >*, CryptoPP__NameValuePairsGetValue29_ptr);
        using CryptoPP__NameValuePairsGetValue31_ptr = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, struct CryptoPP::ECPPoint*);
        using CryptoPP__NameValuePairsGetValue31_clbk = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, struct CryptoPP::ECPPoint*, CryptoPP__NameValuePairsGetValue31_ptr);
        using CryptoPP__NameValuePairsGetValue33_ptr = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, struct CryptoPP::Integer*);
        using CryptoPP__NameValuePairsGetValue33_clbk = bool (WINAPIV*)(struct CryptoPP::NameValuePairs*, char*, struct CryptoPP::Integer*, CryptoPP__NameValuePairsGetValue33_ptr);
        using CryptoPP__NameValuePairsctor_NameValuePairs35_ptr = void (WINAPIV*)(struct CryptoPP::NameValuePairs*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__NameValuePairsctor_NameValuePairs35_clbk = void (WINAPIV*)(struct CryptoPP::NameValuePairs*, struct CryptoPP::NameValuePairs*, CryptoPP__NameValuePairsctor_NameValuePairs35_ptr);
        using CryptoPP__NameValuePairsctor_NameValuePairs37_ptr = void (WINAPIV*)(struct CryptoPP::NameValuePairs*);
        using CryptoPP__NameValuePairsctor_NameValuePairs37_clbk = void (WINAPIV*)(struct CryptoPP::NameValuePairs*, CryptoPP__NameValuePairsctor_NameValuePairs37_ptr);
        using CryptoPP__NameValuePairsThrowIfTypeMismatch39_ptr = void (WINAPIV*)(char*, struct type_info*, struct type_info*);
        using CryptoPP__NameValuePairsThrowIfTypeMismatch39_clbk = void (WINAPIV*)(char*, struct type_info*, struct type_info*, CryptoPP__NameValuePairsThrowIfTypeMismatch39_ptr);
        using CryptoPP__NameValuePairsdtor_NameValuePairs43_ptr = void (WINAPIV*)(struct CryptoPP::NameValuePairs*);
        using CryptoPP__NameValuePairsdtor_NameValuePairs43_clbk = void (WINAPIV*)(struct CryptoPP::NameValuePairs*, CryptoPP__NameValuePairsdtor_NameValuePairs43_ptr);
        
        using CryptoPP__NameValuePairs__ValueTypeMismatchctor_ValueTypeMismatch2_ptr = void (WINAPIV*)(struct CryptoPP::NameValuePairs::ValueTypeMismatch*, struct CryptoPP::NameValuePairs::ValueTypeMismatch*);
        using CryptoPP__NameValuePairs__ValueTypeMismatchctor_ValueTypeMismatch2_clbk = void (WINAPIV*)(struct CryptoPP::NameValuePairs::ValueTypeMismatch*, struct CryptoPP::NameValuePairs::ValueTypeMismatch*, CryptoPP__NameValuePairs__ValueTypeMismatchctor_ValueTypeMismatch2_ptr);
        using CryptoPP__NameValuePairs__ValueTypeMismatchctor_ValueTypeMismatch4_ptr = void (WINAPIV*)(struct CryptoPP::NameValuePairs::ValueTypeMismatch*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, struct type_info*, struct type_info*);
        using CryptoPP__NameValuePairs__ValueTypeMismatchctor_ValueTypeMismatch4_clbk = void (WINAPIV*)(struct CryptoPP::NameValuePairs::ValueTypeMismatch*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, struct type_info*, struct type_info*, CryptoPP__NameValuePairs__ValueTypeMismatchctor_ValueTypeMismatch4_ptr);
        using CryptoPP__NameValuePairs__ValueTypeMismatchdtor_ValueTypeMismatch9_ptr = void (WINAPIV*)(struct CryptoPP::NameValuePairs::ValueTypeMismatch*);
        using CryptoPP__NameValuePairs__ValueTypeMismatchdtor_ValueTypeMismatch9_clbk = void (WINAPIV*)(struct CryptoPP::NameValuePairs::ValueTypeMismatch*, CryptoPP__NameValuePairs__ValueTypeMismatchdtor_ValueTypeMismatch9_ptr);
        
        using CryptoPP__SimpleKeyedTransformationGetAlgorithm2_ptr = struct CryptoPP::Algorithm* (WINAPIV*)(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>*);
        using CryptoPP__SimpleKeyedTransformationGetAlgorithm2_clbk = struct CryptoPP::Algorithm* (WINAPIV*)(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>*, CryptoPP__SimpleKeyedTransformationGetAlgorithm2_ptr);
        using CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_ptr = void (WINAPIV*)(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>*, struct CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>*);
        using CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_clbk = void (WINAPIV*)(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>*, struct CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>*, CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_ptr);
        using CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation6_ptr = void (WINAPIV*)(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>*);
        using CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation6_clbk = void (WINAPIV*)(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>*, CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation6_ptr);
        using CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation8_ptr = void (WINAPIV*)(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>*);
        using CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation8_clbk = void (WINAPIV*)(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>*, CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation8_ptr);
        
        using CryptoPP__RandomPoolCanIncorporateEntropy2_ptr = bool (WINAPIV*)(struct CryptoPP::RandomPool*);
        using CryptoPP__RandomPoolCanIncorporateEntropy2_clbk = bool (WINAPIV*)(struct CryptoPP::RandomPool*, CryptoPP__RandomPoolCanIncorporateEntropy2_ptr);
        using CryptoPP__RandomPoolIncorporateEntropy3_ptr = void (WINAPIV*)(struct CryptoPP::RandomPool*, uint8_t*, uint64_t);
        using CryptoPP__RandomPoolIncorporateEntropy3_clbk = void (WINAPIV*)(struct CryptoPP::RandomPool*, uint8_t*, uint64_t, CryptoPP__RandomPoolIncorporateEntropy3_ptr);
        using CryptoPP__RandomPoolctor_RandomPool4_ptr = int64_t (WINAPIV*)(struct CryptoPP::RandomPool*);
        using CryptoPP__RandomPoolctor_RandomPool4_clbk = int64_t (WINAPIV*)(struct CryptoPP::RandomPool*, CryptoPP__RandomPoolctor_RandomPool4_ptr);
        using CryptoPP__RandomPooldtor_RandomPool6_ptr = void (WINAPIV*)(struct CryptoPP::RandomPool*);
        using CryptoPP__RandomPooldtor_RandomPool6_clbk = void (WINAPIV*)(struct CryptoPP::RandomPool*, CryptoPP__RandomPooldtor_RandomPool6_ptr);
        
        using CryptoPP__AutoSeededRandomPoolctor_AutoSeededRandomPool2_ptr = void (WINAPIV*)(struct CryptoPP::AutoSeededRandomPool*, bool, unsigned int);
        using CryptoPP__AutoSeededRandomPoolctor_AutoSeededRandomPool2_clbk = void (WINAPIV*)(struct CryptoPP::AutoSeededRandomPool*, bool, unsigned int, CryptoPP__AutoSeededRandomPoolctor_AutoSeededRandomPool2_ptr);
        using CryptoPP__AutoSeededRandomPoolReseed3_ptr = void (WINAPIV*)(struct CryptoPP::AutoSeededRandomPool*, bool, unsigned int);
        using CryptoPP__AutoSeededRandomPoolReseed3_clbk = void (WINAPIV*)(struct CryptoPP::AutoSeededRandomPool*, bool, unsigned int, CryptoPP__AutoSeededRandomPoolReseed3_ptr);
        using CryptoPP__AutoSeededRandomPooldtor_AutoSeededRandomPool8_ptr = void (WINAPIV*)(struct CryptoPP::AutoSeededRandomPool*);
        using CryptoPP__AutoSeededRandomPooldtor_AutoSeededRandomPool8_clbk = void (WINAPIV*)(struct CryptoPP::AutoSeededRandomPool*, CryptoPP__AutoSeededRandomPooldtor_AutoSeededRandomPool8_ptr);
        
        using CryptoPP__GeneratableCryptoMaterialctor_GeneratableCryptoMaterial1_ptr = int64_t (WINAPIV*)(struct CryptoPP::GeneratableCryptoMaterial*, struct CryptoPP::GeneratableCryptoMaterial*);
        using CryptoPP__GeneratableCryptoMaterialctor_GeneratableCryptoMaterial1_clbk = int64_t (WINAPIV*)(struct CryptoPP::GeneratableCryptoMaterial*, struct CryptoPP::GeneratableCryptoMaterial*, CryptoPP__GeneratableCryptoMaterialctor_GeneratableCryptoMaterial1_ptr);
        using CryptoPP__GeneratableCryptoMaterialctor_GeneratableCryptoMaterial3_ptr = void (WINAPIV*)(struct CryptoPP::GeneratableCryptoMaterial*);
        using CryptoPP__GeneratableCryptoMaterialctor_GeneratableCryptoMaterial3_clbk = void (WINAPIV*)(struct CryptoPP::GeneratableCryptoMaterial*, CryptoPP__GeneratableCryptoMaterialctor_GeneratableCryptoMaterial3_ptr);
        using CryptoPP__GeneratableCryptoMaterialGenerateRandom5_ptr = void (WINAPIV*)(struct CryptoPP::GeneratableCryptoMaterial*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__GeneratableCryptoMaterialGenerateRandom5_clbk = void (WINAPIV*)(struct CryptoPP::GeneratableCryptoMaterial*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::NameValuePairs*, CryptoPP__GeneratableCryptoMaterialGenerateRandom5_ptr);
        using CryptoPP__GeneratableCryptoMaterialGenerateRandomWithKeySize6_ptr = void (WINAPIV*)(struct CryptoPP::GeneratableCryptoMaterial*, struct CryptoPP::RandomNumberGenerator*, unsigned int);
        using CryptoPP__GeneratableCryptoMaterialGenerateRandomWithKeySize6_clbk = void (WINAPIV*)(struct CryptoPP::GeneratableCryptoMaterial*, struct CryptoPP::RandomNumberGenerator*, unsigned int, CryptoPP__GeneratableCryptoMaterialGenerateRandomWithKeySize6_ptr);
        using CryptoPP__GeneratableCryptoMaterialdtor_GeneratableCryptoMaterial10_ptr = void (WINAPIV*)(struct CryptoPP::GeneratableCryptoMaterial*);
        using CryptoPP__GeneratableCryptoMaterialdtor_GeneratableCryptoMaterial10_clbk = void (WINAPIV*)(struct CryptoPP::GeneratableCryptoMaterial*, CryptoPP__GeneratableCryptoMaterialdtor_GeneratableCryptoMaterial10_ptr);
        
        using CryptoPP__CryptoParametersctor_CryptoParameters1_ptr = int64_t (WINAPIV*)(struct CryptoPP::CryptoParameters*, struct CryptoPP::CryptoParameters*);
        using CryptoPP__CryptoParametersctor_CryptoParameters1_clbk = int64_t (WINAPIV*)(struct CryptoPP::CryptoParameters*, struct CryptoPP::CryptoParameters*, CryptoPP__CryptoParametersctor_CryptoParameters1_ptr);
        using CryptoPP__CryptoParametersctor_CryptoParameters3_ptr = void (WINAPIV*)(struct CryptoPP::CryptoParameters*);
        using CryptoPP__CryptoParametersctor_CryptoParameters3_clbk = void (WINAPIV*)(struct CryptoPP::CryptoParameters*, CryptoPP__CryptoParametersctor_CryptoParameters3_ptr);
        using CryptoPP__CryptoParametersdtor_CryptoParameters7_ptr = void (WINAPIV*)(struct CryptoPP::CryptoParameters*);
        using CryptoPP__CryptoParametersdtor_CryptoParameters7_clbk = void (WINAPIV*)(struct CryptoPP::CryptoParameters*, CryptoPP__CryptoParametersdtor_CryptoParameters7_ptr);
        
        using CryptoPP__DL_GroupParametersctor_DL_GroupParameters2_ptr = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*);
        using CryptoPP__DL_GroupParametersctor_DL_GroupParameters2_clbk = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*, CryptoPP__DL_GroupParametersctor_DL_GroupParameters2_ptr);
        using CryptoPP__DL_GroupParametersExponentiateBase4_ptr = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*, struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*);
        using CryptoPP__DL_GroupParametersExponentiateBase4_clbk = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*, struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*, CryptoPP__DL_GroupParametersExponentiateBase4_ptr);
        using CryptoPP__DL_GroupParametersExponentiateElement6_ptr = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*, struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*);
        using CryptoPP__DL_GroupParametersExponentiateElement6_clbk = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*, struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*, CryptoPP__DL_GroupParametersExponentiateElement6_ptr);
        using CryptoPP__DL_GroupParametersGetCofactor8_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*, struct CryptoPP::Integer*);
        using CryptoPP__DL_GroupParametersGetCofactor8_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*, struct CryptoPP::Integer*, CryptoPP__DL_GroupParametersGetCofactor8_ptr);
        using CryptoPP__DL_GroupParametersGetGroupOrder10_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*, struct CryptoPP::Integer*);
        using CryptoPP__DL_GroupParametersGetGroupOrder10_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*, struct CryptoPP::Integer*, CryptoPP__DL_GroupParametersGetGroupOrder10_ptr);
        using CryptoPP__DL_GroupParametersGetSubgroupGenerator12_ptr = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*);
        using CryptoPP__DL_GroupParametersGetSubgroupGenerator12_clbk = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*, CryptoPP__DL_GroupParametersGetSubgroupGenerator12_ptr);
        using CryptoPP__DL_GroupParametersGetVoidValue14_ptr = bool (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*, char*, struct type_info*, void*);
        using CryptoPP__DL_GroupParametersGetVoidValue14_clbk = bool (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*, char*, struct type_info*, void*, CryptoPP__DL_GroupParametersGetVoidValue14_ptr);
        using CryptoPP__DL_GroupParametersLoadPrecomputation16_ptr = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__DL_GroupParametersLoadPrecomputation16_clbk = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*, struct CryptoPP::BufferedTransformation*, CryptoPP__DL_GroupParametersLoadPrecomputation16_ptr);
        using CryptoPP__DL_GroupParametersPrecompute18_ptr = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*, unsigned int);
        using CryptoPP__DL_GroupParametersPrecompute18_clbk = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*, unsigned int, CryptoPP__DL_GroupParametersPrecompute18_ptr);
        using CryptoPP__DL_GroupParametersSavePrecomputation20_ptr = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__DL_GroupParametersSavePrecomputation20_clbk = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*, struct CryptoPP::BufferedTransformation*, CryptoPP__DL_GroupParametersSavePrecomputation20_ptr);
        using CryptoPP__DL_GroupParametersSetSubgroupGenerator22_ptr = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*, struct CryptoPP::ECPPoint*);
        using CryptoPP__DL_GroupParametersSetSubgroupGenerator22_clbk = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*, struct CryptoPP::ECPPoint*, CryptoPP__DL_GroupParametersSetSubgroupGenerator22_ptr);
        using CryptoPP__DL_GroupParametersSupportsPrecomputation24_ptr = bool (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*);
        using CryptoPP__DL_GroupParametersSupportsPrecomputation24_clbk = bool (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*, CryptoPP__DL_GroupParametersSupportsPrecomputation24_ptr);
        using CryptoPP__DL_GroupParametersValidate26_ptr = bool (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*, struct CryptoPP::RandomNumberGenerator*, unsigned int);
        using CryptoPP__DL_GroupParametersValidate26_clbk = bool (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*, struct CryptoPP::RandomNumberGenerator*, unsigned int, CryptoPP__DL_GroupParametersValidate26_ptr);
        using CryptoPP__DL_GroupParametersdtor_DL_GroupParameters30_ptr = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*);
        using CryptoPP__DL_GroupParametersdtor_DL_GroupParameters30_clbk = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters<CryptoPP::ECPPoint>*, CryptoPP__DL_GroupParametersdtor_DL_GroupParameters30_ptr);
        
        using CryptoPP__DL_Keyctor_DL_Key2_ptr = void (WINAPIV*)(struct CryptoPP::DL_Key<CryptoPP::ECPPoint>*);
        using CryptoPP__DL_Keyctor_DL_Key2_clbk = void (WINAPIV*)(struct CryptoPP::DL_Key<CryptoPP::ECPPoint>*, CryptoPP__DL_Keyctor_DL_Key2_ptr);
        
        using CryptoPP__DL_PrivateKeyAssignFrom2_ptr = void (WINAPIV*)(struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__DL_PrivateKeyAssignFrom2_clbk = void (WINAPIV*)(struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>*, struct CryptoPP::NameValuePairs*, CryptoPP__DL_PrivateKeyAssignFrom2_ptr);
        using CryptoPP__DL_PrivateKeyctor_DL_PrivateKey4_ptr = void (WINAPIV*)(struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>*);
        using CryptoPP__DL_PrivateKeyctor_DL_PrivateKey4_clbk = void (WINAPIV*)(struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>*, CryptoPP__DL_PrivateKeyctor_DL_PrivateKey4_ptr);
        using CryptoPP__DL_PrivateKeyGetVoidValue6_ptr = bool (WINAPIV*)(struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>*, char*, struct type_info*, void*);
        using CryptoPP__DL_PrivateKeyGetVoidValue6_clbk = bool (WINAPIV*)(struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>*, char*, struct type_info*, void*, CryptoPP__DL_PrivateKeyGetVoidValue6_ptr);
        using CryptoPP__DL_PrivateKeyMakePublicKey8_ptr = void (WINAPIV*)(struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>*, struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*);
        using CryptoPP__DL_PrivateKeyMakePublicKey8_clbk = void (WINAPIV*)(struct CryptoPP::DL_PrivateKey<CryptoPP::ECPPoint>*, struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*, CryptoPP__DL_PrivateKeyMakePublicKey8_ptr);
        
        using CryptoPP__ASN1Objectctor_ASN1Object1_ptr = int64_t (WINAPIV*)(struct CryptoPP::ASN1Object*, struct CryptoPP::ASN1Object*);
        using CryptoPP__ASN1Objectctor_ASN1Object1_clbk = int64_t (WINAPIV*)(struct CryptoPP::ASN1Object*, struct CryptoPP::ASN1Object*, CryptoPP__ASN1Objectctor_ASN1Object1_ptr);
        using CryptoPP__ASN1Objectctor_ASN1Object3_ptr = void (WINAPIV*)(struct CryptoPP::ASN1Object*);
        using CryptoPP__ASN1Objectctor_ASN1Object3_clbk = void (WINAPIV*)(struct CryptoPP::ASN1Object*, CryptoPP__ASN1Objectctor_ASN1Object3_ptr);
        using CryptoPP__ASN1ObjectBEREncode5_ptr = void (WINAPIV*)(struct CryptoPP::ASN1Object*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__ASN1ObjectBEREncode5_clbk = void (WINAPIV*)(struct CryptoPP::ASN1Object*, struct CryptoPP::BufferedTransformation*, CryptoPP__ASN1ObjectBEREncode5_ptr);
        using CryptoPP__ASN1Objectdtor_ASN1Object9_ptr = void (WINAPIV*)(struct CryptoPP::ASN1Object*);
        using CryptoPP__ASN1Objectdtor_ASN1Object9_clbk = void (WINAPIV*)(struct CryptoPP::ASN1Object*, CryptoPP__ASN1Objectdtor_ASN1Object9_ptr);
        
        using CryptoPP__Waitablector_Waitable1_ptr = int64_t (WINAPIV*)(struct CryptoPP::Waitable*, struct CryptoPP::Waitable*);
        using CryptoPP__Waitablector_Waitable1_clbk = int64_t (WINAPIV*)(struct CryptoPP::Waitable*, struct CryptoPP::Waitable*, CryptoPP__Waitablector_Waitable1_ptr);
        using CryptoPP__Waitablector_Waitable3_ptr = void (WINAPIV*)(struct CryptoPP::Waitable*);
        using CryptoPP__Waitablector_Waitable3_clbk = void (WINAPIV*)(struct CryptoPP::Waitable*, CryptoPP__Waitablector_Waitable3_ptr);
        using CryptoPP__Waitabledtor_Waitable5_ptr = void (WINAPIV*)(struct CryptoPP::Waitable*);
        using CryptoPP__Waitabledtor_Waitable5_clbk = void (WINAPIV*)(struct CryptoPP::Waitable*, CryptoPP__Waitabledtor_Waitable5_ptr);
        
        using CryptoPP__BufferedTransformationAnyMessages1_ptr = bool (WINAPIV*)(struct CryptoPP::BufferedTransformation*);
        using CryptoPP__BufferedTransformationAnyMessages1_clbk = bool (WINAPIV*)(struct CryptoPP::BufferedTransformation*, CryptoPP__BufferedTransformationAnyMessages1_ptr);
        using CryptoPP__BufferedTransformationAnyRetrievable2_ptr = bool (WINAPIV*)(struct CryptoPP::BufferedTransformation*);
        using CryptoPP__BufferedTransformationAnyRetrievable2_clbk = bool (WINAPIV*)(struct CryptoPP::BufferedTransformation*, CryptoPP__BufferedTransformationAnyRetrievable2_ptr);
        using CryptoPP__BufferedTransformationAttach3_ptr = void (WINAPIV*)(struct CryptoPP::BufferedTransformation*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__BufferedTransformationAttach3_clbk = void (WINAPIV*)(struct CryptoPP::BufferedTransformation*, struct CryptoPP::BufferedTransformation*, CryptoPP__BufferedTransformationAttach3_ptr);
        using CryptoPP__BufferedTransformationAttachable5_ptr = bool (WINAPIV*)(struct CryptoPP::BufferedTransformation*);
        using CryptoPP__BufferedTransformationAttachable5_clbk = bool (WINAPIV*)(struct CryptoPP::BufferedTransformation*, CryptoPP__BufferedTransformationAttachable5_ptr);
        using CryptoPP__BufferedTransformationAttachedTransformation8_ptr = struct CryptoPP::BufferedTransformation* (WINAPIV*)(struct CryptoPP::BufferedTransformation*);
        using CryptoPP__BufferedTransformationAttachedTransformation8_clbk = struct CryptoPP::BufferedTransformation* (WINAPIV*)(struct CryptoPP::BufferedTransformation*, CryptoPP__BufferedTransformationAttachedTransformation8_ptr);
        using CryptoPP__BufferedTransformationAttachedTransformation9_ptr = struct CryptoPP::BufferedTransformation* (WINAPIV*)(struct CryptoPP::BufferedTransformation*);
        using CryptoPP__BufferedTransformationAttachedTransformation9_clbk = struct CryptoPP::BufferedTransformation* (WINAPIV*)(struct CryptoPP::BufferedTransformation*, CryptoPP__BufferedTransformationAttachedTransformation9_ptr);
        using CryptoPP__BufferedTransformationctor_BufferedTransformation10_ptr = int64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__BufferedTransformationctor_BufferedTransformation10_clbk = int64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, struct CryptoPP::BufferedTransformation*, CryptoPP__BufferedTransformationctor_BufferedTransformation10_ptr);
        using CryptoPP__BufferedTransformationctor_BufferedTransformation12_ptr = void (WINAPIV*)(struct CryptoPP::BufferedTransformation*);
        using CryptoPP__BufferedTransformationctor_BufferedTransformation12_clbk = void (WINAPIV*)(struct CryptoPP::BufferedTransformation*, CryptoPP__BufferedTransformationctor_BufferedTransformation12_ptr);
        using CryptoPP__BufferedTransformationCanModifyInput14_ptr = bool (WINAPIV*)(struct CryptoPP::BufferedTransformation*);
        using CryptoPP__BufferedTransformationCanModifyInput14_clbk = bool (WINAPIV*)(struct CryptoPP::BufferedTransformation*, CryptoPP__BufferedTransformationCanModifyInput14_ptr);
        using CryptoPP__BufferedTransformationCreatePutSpace16_ptr = char* (WINAPIV*)(struct CryptoPP::BufferedTransformation*, uint64_t*);
        using CryptoPP__BufferedTransformationCreatePutSpace16_clbk = char* (WINAPIV*)(struct CryptoPP::BufferedTransformation*, uint64_t*, CryptoPP__BufferedTransformationCreatePutSpace16_ptr);
        using CryptoPP__BufferedTransformationDetach18_ptr = void (WINAPIV*)(struct CryptoPP::BufferedTransformation*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__BufferedTransformationDetach18_clbk = void (WINAPIV*)(struct CryptoPP::BufferedTransformation*, struct CryptoPP::BufferedTransformation*, CryptoPP__BufferedTransformationDetach18_ptr);
        using CryptoPP__BufferedTransformationFlush19_ptr = bool (WINAPIV*)(struct CryptoPP::BufferedTransformation*, bool, int, bool);
        using CryptoPP__BufferedTransformationFlush19_clbk = bool (WINAPIV*)(struct CryptoPP::BufferedTransformation*, bool, int, bool, CryptoPP__BufferedTransformationFlush19_ptr);
        using CryptoPP__BufferedTransformationGet20_ptr = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, uint8_t*);
        using CryptoPP__BufferedTransformationGet20_clbk = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, uint8_t*, CryptoPP__BufferedTransformationGet20_ptr);
        using CryptoPP__BufferedTransformationGet21_ptr = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, uint8_t*, uint64_t);
        using CryptoPP__BufferedTransformationGet21_clbk = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, uint8_t*, uint64_t, CryptoPP__BufferedTransformationGet21_ptr);
        using CryptoPP__BufferedTransformationGetAutoSignalPropagation22_ptr = int64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*);
        using CryptoPP__BufferedTransformationGetAutoSignalPropagation22_clbk = int64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, CryptoPP__BufferedTransformationGetAutoSignalPropagation22_ptr);
        using CryptoPP__BufferedTransformationGetMaxWaitObjectCount23_ptr = unsigned int (WINAPIV*)(struct CryptoPP::BufferedTransformation*);
        using CryptoPP__BufferedTransformationGetMaxWaitObjectCount23_clbk = unsigned int (WINAPIV*)(struct CryptoPP::BufferedTransformation*, CryptoPP__BufferedTransformationGetMaxWaitObjectCount23_ptr);
        using CryptoPP__BufferedTransformationGetNextMessage24_ptr = bool (WINAPIV*)(struct CryptoPP::BufferedTransformation*);
        using CryptoPP__BufferedTransformationGetNextMessage24_clbk = bool (WINAPIV*)(struct CryptoPP::BufferedTransformation*, CryptoPP__BufferedTransformationGetNextMessage24_ptr);
        using CryptoPP__BufferedTransformationGetNextMessageSeries26_ptr = bool (WINAPIV*)(struct CryptoPP::BufferedTransformation*);
        using CryptoPP__BufferedTransformationGetNextMessageSeries26_clbk = bool (WINAPIV*)(struct CryptoPP::BufferedTransformation*, CryptoPP__BufferedTransformationGetNextMessageSeries26_ptr);
        using CryptoPP__BufferedTransformationGetWaitObjects27_ptr = void (WINAPIV*)(struct CryptoPP::BufferedTransformation*, CryptoPP::WaitObjectContainer*, CryptoPP::CallStack*);
        using CryptoPP__BufferedTransformationGetWaitObjects27_clbk = void (WINAPIV*)(struct CryptoPP::BufferedTransformation*, CryptoPP::WaitObjectContainer*, CryptoPP::CallStack*, CryptoPP__BufferedTransformationGetWaitObjects27_ptr);
        using CryptoPP__BufferedTransformationGetWord1628_ptr = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, uint16_t*, struct CryptoPP::ByteOrder);
        using CryptoPP__BufferedTransformationGetWord1628_clbk = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, uint16_t*, struct CryptoPP::ByteOrder, CryptoPP__BufferedTransformationGetWord1628_ptr);
        using CryptoPP__BufferedTransformationGetWord3229_ptr = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, unsigned int*, struct CryptoPP::ByteOrder);
        using CryptoPP__BufferedTransformationGetWord3229_clbk = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, unsigned int*, struct CryptoPP::ByteOrder, CryptoPP__BufferedTransformationGetWord3229_ptr);
        using CryptoPP__BufferedTransformationInitialize30_ptr = void (WINAPIV*)(struct CryptoPP::BufferedTransformation*, struct CryptoPP::NameValuePairs*, int);
        using CryptoPP__BufferedTransformationInitialize30_clbk = void (WINAPIV*)(struct CryptoPP::BufferedTransformation*, struct CryptoPP::NameValuePairs*, int, CryptoPP__BufferedTransformationInitialize30_ptr);
        using CryptoPP__BufferedTransformationIsolatedInitialize31_ptr = void (WINAPIV*)(struct CryptoPP::BufferedTransformation*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__BufferedTransformationIsolatedInitialize31_clbk = void (WINAPIV*)(struct CryptoPP::BufferedTransformation*, struct CryptoPP::NameValuePairs*, CryptoPP__BufferedTransformationIsolatedInitialize31_ptr);
        using CryptoPP__BufferedTransformationIsolatedMessageSeriesEnd32_ptr = bool (WINAPIV*)(struct CryptoPP::BufferedTransformation*, bool);
        using CryptoPP__BufferedTransformationIsolatedMessageSeriesEnd32_clbk = bool (WINAPIV*)(struct CryptoPP::BufferedTransformation*, bool, CryptoPP__BufferedTransformationIsolatedMessageSeriesEnd32_ptr);
        using CryptoPP__BufferedTransformationMaxRetrievable33_ptr = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*);
        using CryptoPP__BufferedTransformationMaxRetrievable33_clbk = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, CryptoPP__BufferedTransformationMaxRetrievable33_ptr);
        using CryptoPP__BufferedTransformationMessageEnd34_ptr = bool (WINAPIV*)(struct CryptoPP::BufferedTransformation*, int, bool);
        using CryptoPP__BufferedTransformationMessageEnd34_clbk = bool (WINAPIV*)(struct CryptoPP::BufferedTransformation*, int, bool, CryptoPP__BufferedTransformationMessageEnd34_ptr);
        using CryptoPP__BufferedTransformationMessageSeriesEnd35_ptr = bool (WINAPIV*)(struct CryptoPP::BufferedTransformation*, int, bool);
        using CryptoPP__BufferedTransformationMessageSeriesEnd35_clbk = bool (WINAPIV*)(struct CryptoPP::BufferedTransformation*, int, bool, CryptoPP__BufferedTransformationMessageSeriesEnd35_ptr);
        using CryptoPP__BufferedTransformationNumberOfMessageSeries37_ptr = unsigned int (WINAPIV*)(struct CryptoPP::BufferedTransformation*);
        using CryptoPP__BufferedTransformationNumberOfMessageSeries37_clbk = unsigned int (WINAPIV*)(struct CryptoPP::BufferedTransformation*, CryptoPP__BufferedTransformationNumberOfMessageSeries37_ptr);
        using CryptoPP__BufferedTransformationNumberOfMessages38_ptr = unsigned int (WINAPIV*)(struct CryptoPP::BufferedTransformation*);
        using CryptoPP__BufferedTransformationNumberOfMessages38_clbk = unsigned int (WINAPIV*)(struct CryptoPP::BufferedTransformation*, CryptoPP__BufferedTransformationNumberOfMessages38_ptr);
        using CryptoPP__BufferedTransformationNumberOfMessagesInThisSeries40_ptr = unsigned int (WINAPIV*)(struct CryptoPP::BufferedTransformation*);
        using CryptoPP__BufferedTransformationNumberOfMessagesInThisSeries40_clbk = unsigned int (WINAPIV*)(struct CryptoPP::BufferedTransformation*, CryptoPP__BufferedTransformationNumberOfMessagesInThisSeries40_ptr);
        using CryptoPP__BufferedTransformationPeek41_ptr = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, uint8_t*);
        using CryptoPP__BufferedTransformationPeek41_clbk = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, uint8_t*, CryptoPP__BufferedTransformationPeek41_ptr);
        using CryptoPP__BufferedTransformationPeek42_ptr = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, uint8_t*, uint64_t);
        using CryptoPP__BufferedTransformationPeek42_clbk = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, uint8_t*, uint64_t, CryptoPP__BufferedTransformationPeek42_ptr);
        using CryptoPP__BufferedTransformationPeekWord1643_ptr = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, uint16_t*, struct CryptoPP::ByteOrder);
        using CryptoPP__BufferedTransformationPeekWord1643_clbk = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, uint16_t*, struct CryptoPP::ByteOrder, CryptoPP__BufferedTransformationPeekWord1643_ptr);
        using CryptoPP__BufferedTransformationPeekWord3244_ptr = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, unsigned int*, struct CryptoPP::ByteOrder);
        using CryptoPP__BufferedTransformationPeekWord3244_clbk = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, unsigned int*, struct CryptoPP::ByteOrder, CryptoPP__BufferedTransformationPeekWord3244_ptr);
        using CryptoPP__BufferedTransformationPut45_ptr = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, uint8_t*, uint64_t, bool);
        using CryptoPP__BufferedTransformationPut45_clbk = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, uint8_t*, uint64_t, bool, CryptoPP__BufferedTransformationPut45_ptr);
        using CryptoPP__BufferedTransformationPut46_ptr = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, uint8_t, bool);
        using CryptoPP__BufferedTransformationPut46_clbk = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, uint8_t, bool, CryptoPP__BufferedTransformationPut46_ptr);
        using CryptoPP__BufferedTransformationPutModifiable47_ptr = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, uint8_t*, uint64_t, bool);
        using CryptoPP__BufferedTransformationPutModifiable47_clbk = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, uint8_t*, uint64_t, bool, CryptoPP__BufferedTransformationPutModifiable47_ptr);
        using CryptoPP__BufferedTransformationPutModifiable249_ptr = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, char*, uint64_t, int, bool);
        using CryptoPP__BufferedTransformationPutModifiable249_clbk = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, char*, uint64_t, int, bool, CryptoPP__BufferedTransformationPutModifiable249_ptr);
        using CryptoPP__BufferedTransformationPutWord1650_ptr = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, uint16_t, struct CryptoPP::ByteOrder, bool);
        using CryptoPP__BufferedTransformationPutWord1650_clbk = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, uint16_t, struct CryptoPP::ByteOrder, bool, CryptoPP__BufferedTransformationPutWord1650_ptr);
        using CryptoPP__BufferedTransformationPutWord3251_ptr = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, unsigned int, struct CryptoPP::ByteOrder, bool);
        using CryptoPP__BufferedTransformationPutWord3251_clbk = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, unsigned int, struct CryptoPP::ByteOrder, bool, CryptoPP__BufferedTransformationPutWord3251_ptr);
        using CryptoPP__BufferedTransformationSetAutoSignalPropagation52_ptr = void (WINAPIV*)(struct CryptoPP::BufferedTransformation*, int);
        using CryptoPP__BufferedTransformationSetAutoSignalPropagation52_clbk = void (WINAPIV*)(struct CryptoPP::BufferedTransformation*, int, CryptoPP__BufferedTransformationSetAutoSignalPropagation52_ptr);
        using CryptoPP__BufferedTransformationSkip53_ptr = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, uint64_t);
        using CryptoPP__BufferedTransformationSkip53_clbk = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, uint64_t, CryptoPP__BufferedTransformationSkip53_ptr);
        using CryptoPP__BufferedTransformationSkipAll54_ptr = void (WINAPIV*)(struct CryptoPP::BufferedTransformation*);
        using CryptoPP__BufferedTransformationSkipAll54_clbk = void (WINAPIV*)(struct CryptoPP::BufferedTransformation*, CryptoPP__BufferedTransformationSkipAll54_ptr);
        using CryptoPP__BufferedTransformationSkipMessages55_ptr = unsigned int (WINAPIV*)(struct CryptoPP::BufferedTransformation*, unsigned int);
        using CryptoPP__BufferedTransformationSkipMessages55_clbk = unsigned int (WINAPIV*)(struct CryptoPP::BufferedTransformation*, unsigned int, CryptoPP__BufferedTransformationSkipMessages55_ptr);
        using CryptoPP__BufferedTransformationTotalBytesRetrievable56_ptr = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*);
        using CryptoPP__BufferedTransformationTotalBytesRetrievable56_clbk = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, CryptoPP__BufferedTransformationTotalBytesRetrievable56_ptr);
        using CryptoPP__BufferedTransformationdtor_BufferedTransformation58_ptr = void (WINAPIV*)(struct CryptoPP::BufferedTransformation*);
        using CryptoPP__BufferedTransformationdtor_BufferedTransformation58_clbk = void (WINAPIV*)(struct CryptoPP::BufferedTransformation*, CryptoPP__BufferedTransformationdtor_BufferedTransformation58_ptr);
        
        using CryptoPP__BufferedTransformation__BlockingInputOnlyctor_BlockingInputOnly1_ptr = int64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation::BlockingInputOnly*, struct CryptoPP::BufferedTransformation::BlockingInputOnly*);
        using CryptoPP__BufferedTransformation__BlockingInputOnlyctor_BlockingInputOnly1_clbk = int64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation::BlockingInputOnly*, struct CryptoPP::BufferedTransformation::BlockingInputOnly*, CryptoPP__BufferedTransformation__BlockingInputOnlyctor_BlockingInputOnly1_ptr);
        using CryptoPP__BufferedTransformation__BlockingInputOnlydtor_BlockingInputOnly2_ptr = int64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation::BlockingInputOnly*);
        using CryptoPP__BufferedTransformation__BlockingInputOnlydtor_BlockingInputOnly2_clbk = int64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation::BlockingInputOnly*, CryptoPP__BufferedTransformation__BlockingInputOnlydtor_BlockingInputOnly2_ptr);
        
        using CryptoPP__BufferedTransformation__NoChannelSupportctor_NoChannelSupport1_ptr = int64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation::NoChannelSupport*, struct CryptoPP::BufferedTransformation::NoChannelSupport*);
        using CryptoPP__BufferedTransformation__NoChannelSupportctor_NoChannelSupport1_clbk = int64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation::NoChannelSupport*, struct CryptoPP::BufferedTransformation::NoChannelSupport*, CryptoPP__BufferedTransformation__NoChannelSupportctor_NoChannelSupport1_ptr);
        using CryptoPP__BufferedTransformation__NoChannelSupportctor_NoChannelSupport2_ptr = int64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation::NoChannelSupport*);
        using CryptoPP__BufferedTransformation__NoChannelSupportctor_NoChannelSupport2_clbk = int64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation::NoChannelSupport*, CryptoPP__BufferedTransformation__NoChannelSupportctor_NoChannelSupport2_ptr);
        using CryptoPP__BufferedTransformation__NoChannelSupportdtor_NoChannelSupport3_ptr = int64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation::NoChannelSupport*);
        using CryptoPP__BufferedTransformation__NoChannelSupportdtor_NoChannelSupport3_clbk = int64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation::NoChannelSupport*, CryptoPP__BufferedTransformation__NoChannelSupportdtor_NoChannelSupport3_ptr);
        
        using CryptoPP__PrivateKeyctor_PrivateKey1_ptr = int64_t (WINAPIV*)(struct CryptoPP::PrivateKey*, struct CryptoPP::PrivateKey*);
        using CryptoPP__PrivateKeyctor_PrivateKey1_clbk = int64_t (WINAPIV*)(struct CryptoPP::PrivateKey*, struct CryptoPP::PrivateKey*, CryptoPP__PrivateKeyctor_PrivateKey1_ptr);
        using CryptoPP__PrivateKeyctor_PrivateKey3_ptr = void (WINAPIV*)(struct CryptoPP::PrivateKey*);
        using CryptoPP__PrivateKeyctor_PrivateKey3_clbk = void (WINAPIV*)(struct CryptoPP::PrivateKey*, CryptoPP__PrivateKeyctor_PrivateKey3_ptr);
        using CryptoPP__PrivateKeydtor_PrivateKey7_ptr = void (WINAPIV*)(struct CryptoPP::PrivateKey*);
        using CryptoPP__PrivateKeydtor_PrivateKey7_clbk = void (WINAPIV*)(struct CryptoPP::PrivateKey*, CryptoPP__PrivateKeydtor_PrivateKey7_ptr);
        
        using CryptoPP__ASN1CryptoMaterialctor_ASN1CryptoMaterial2_ptr = void (WINAPIV*)(struct CryptoPP::ASN1CryptoMaterial<CryptoPP::PrivateKey>*);
        using CryptoPP__ASN1CryptoMaterialctor_ASN1CryptoMaterial2_clbk = void (WINAPIV*)(struct CryptoPP::ASN1CryptoMaterial<CryptoPP::PrivateKey>*, CryptoPP__ASN1CryptoMaterialctor_ASN1CryptoMaterial2_ptr);
        using CryptoPP__ASN1CryptoMaterialLoad4_ptr = void (WINAPIV*)(struct CryptoPP::ASN1CryptoMaterial<CryptoPP::PrivateKey>*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__ASN1CryptoMaterialLoad4_clbk = void (WINAPIV*)(struct CryptoPP::ASN1CryptoMaterial<CryptoPP::PrivateKey>*, struct CryptoPP::BufferedTransformation*, CryptoPP__ASN1CryptoMaterialLoad4_ptr);
        using CryptoPP__ASN1CryptoMaterialSave6_ptr = void (WINAPIV*)(struct CryptoPP::ASN1CryptoMaterial<CryptoPP::PrivateKey>*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__ASN1CryptoMaterialSave6_clbk = void (WINAPIV*)(struct CryptoPP::ASN1CryptoMaterial<CryptoPP::PrivateKey>*, struct CryptoPP::BufferedTransformation*, CryptoPP__ASN1CryptoMaterialSave6_ptr);
        using CryptoPP__ASN1CryptoMaterialdtor_ASN1CryptoMaterial10_ptr = void (WINAPIV*)(struct CryptoPP::ASN1CryptoMaterial<CryptoPP::PrivateKey>*);
        using CryptoPP__ASN1CryptoMaterialdtor_ASN1CryptoMaterial10_clbk = void (WINAPIV*)(struct CryptoPP::ASN1CryptoMaterial<CryptoPP::PrivateKey>*, CryptoPP__ASN1CryptoMaterialdtor_ASN1CryptoMaterial10_ptr);
        
        using CryptoPP__ByteQueueAnyRetrievable1_ptr = bool (WINAPIV*)(struct CryptoPP::ByteQueue*);
        using CryptoPP__ByteQueueAnyRetrievable1_clbk = bool (WINAPIV*)(struct CryptoPP::ByteQueue*, CryptoPP__ByteQueueAnyRetrievable1_ptr);
        using CryptoPP__ByteQueuector_ByteQueue2_ptr = int64_t (WINAPIV*)(struct CryptoPP::ByteQueue*, struct CryptoPP::ByteQueue*);
        using CryptoPP__ByteQueuector_ByteQueue2_clbk = int64_t (WINAPIV*)(struct CryptoPP::ByteQueue*, struct CryptoPP::ByteQueue*, CryptoPP__ByteQueuector_ByteQueue2_ptr);
        using CryptoPP__ByteQueuector_ByteQueue3_ptr = int64_t (WINAPIV*)(struct CryptoPP::ByteQueue*, uint64_t);
        using CryptoPP__ByteQueuector_ByteQueue3_clbk = int64_t (WINAPIV*)(struct CryptoPP::ByteQueue*, uint64_t, CryptoPP__ByteQueuector_ByteQueue3_ptr);
        using CryptoPP__ByteQueueCleanupUsedNodes4_ptr = void (WINAPIV*)(struct CryptoPP::ByteQueue*);
        using CryptoPP__ByteQueueCleanupUsedNodes4_clbk = void (WINAPIV*)(struct CryptoPP::ByteQueue*, CryptoPP__ByteQueueCleanupUsedNodes4_ptr);
        using CryptoPP__ByteQueueClear5_ptr = void (WINAPIV*)(struct CryptoPP::ByteQueue*);
        using CryptoPP__ByteQueueClear5_clbk = void (WINAPIV*)(struct CryptoPP::ByteQueue*, CryptoPP__ByteQueueClear5_ptr);
        using CryptoPP__ByteQueueCopyFrom6_ptr = void (WINAPIV*)(struct CryptoPP::ByteQueue*, struct CryptoPP::ByteQueue*);
        using CryptoPP__ByteQueueCopyFrom6_clbk = void (WINAPIV*)(struct CryptoPP::ByteQueue*, struct CryptoPP::ByteQueue*, CryptoPP__ByteQueueCopyFrom6_ptr);
        using CryptoPP__ByteQueueCreatePutSpace7_ptr = uint8_t* (WINAPIV*)(struct CryptoPP::ByteQueue*, uint64_t*);
        using CryptoPP__ByteQueueCreatePutSpace7_clbk = uint8_t* (WINAPIV*)(struct CryptoPP::ByteQueue*, uint64_t*, CryptoPP__ByteQueueCreatePutSpace7_ptr);
        using CryptoPP__ByteQueueCurrentSize8_ptr = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueue*);
        using CryptoPP__ByteQueueCurrentSize8_clbk = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueue*, CryptoPP__ByteQueueCurrentSize8_ptr);
        using CryptoPP__ByteQueueDestroy9_ptr = void (WINAPIV*)(struct CryptoPP::ByteQueue*);
        using CryptoPP__ByteQueueDestroy9_clbk = void (WINAPIV*)(struct CryptoPP::ByteQueue*, CryptoPP__ByteQueueDestroy9_ptr);
        using CryptoPP__ByteQueueFinalizeLazyPut10_ptr = void (WINAPIV*)(struct CryptoPP::ByteQueue*);
        using CryptoPP__ByteQueueFinalizeLazyPut10_clbk = void (WINAPIV*)(struct CryptoPP::ByteQueue*, CryptoPP__ByteQueueFinalizeLazyPut10_ptr);
        using CryptoPP__ByteQueueGet11_ptr = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueue*, uint8_t*);
        using CryptoPP__ByteQueueGet11_clbk = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueue*, uint8_t*, CryptoPP__ByteQueueGet11_ptr);
        using CryptoPP__ByteQueueGet12_ptr = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueue*, uint8_t*, uint64_t);
        using CryptoPP__ByteQueueGet12_clbk = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueue*, uint8_t*, uint64_t, CryptoPP__ByteQueueGet12_ptr);
        using CryptoPP__ByteQueueIsEmpty13_ptr = bool (WINAPIV*)(struct CryptoPP::ByteQueue*);
        using CryptoPP__ByteQueueIsEmpty13_clbk = bool (WINAPIV*)(struct CryptoPP::ByteQueue*, CryptoPP__ByteQueueIsEmpty13_ptr);
        using CryptoPP__ByteQueueIsolatedInitialize14_ptr = void (WINAPIV*)(struct CryptoPP::ByteQueue*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__ByteQueueIsolatedInitialize14_clbk = void (WINAPIV*)(struct CryptoPP::ByteQueue*, struct CryptoPP::NameValuePairs*, CryptoPP__ByteQueueIsolatedInitialize14_ptr);
        using CryptoPP__ByteQueueLazyPut15_ptr = void (WINAPIV*)(struct CryptoPP::ByteQueue*, uint8_t*, uint64_t);
        using CryptoPP__ByteQueueLazyPut15_clbk = void (WINAPIV*)(struct CryptoPP::ByteQueue*, uint8_t*, uint64_t, CryptoPP__ByteQueueLazyPut15_ptr);
        using CryptoPP__ByteQueueLazyPutModifiable16_ptr = void (WINAPIV*)(struct CryptoPP::ByteQueue*, uint8_t*, uint64_t);
        using CryptoPP__ByteQueueLazyPutModifiable16_clbk = void (WINAPIV*)(struct CryptoPP::ByteQueue*, uint8_t*, uint64_t, CryptoPP__ByteQueueLazyPutModifiable16_ptr);
        using CryptoPP__ByteQueueMaxRetrievable17_ptr = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueue*);
        using CryptoPP__ByteQueueMaxRetrievable17_clbk = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueue*, CryptoPP__ByteQueueMaxRetrievable17_ptr);
        using CryptoPP__ByteQueuePeek18_ptr = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueue*, uint8_t*);
        using CryptoPP__ByteQueuePeek18_clbk = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueue*, uint8_t*, CryptoPP__ByteQueuePeek18_ptr);
        using CryptoPP__ByteQueuePeek19_ptr = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueue*, uint8_t*, uint64_t);
        using CryptoPP__ByteQueuePeek19_clbk = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueue*, uint8_t*, uint64_t, CryptoPP__ByteQueuePeek19_ptr);
        using CryptoPP__ByteQueuePut220_ptr = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueue*, uint8_t*, uint64_t, int, bool);
        using CryptoPP__ByteQueuePut220_clbk = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueue*, uint8_t*, uint64_t, int, bool, CryptoPP__ByteQueuePut220_ptr);
        using CryptoPP__ByteQueueSetNodeSize21_ptr = void (WINAPIV*)(struct CryptoPP::ByteQueue*, uint64_t);
        using CryptoPP__ByteQueueSetNodeSize21_clbk = void (WINAPIV*)(struct CryptoPP::ByteQueue*, uint64_t, CryptoPP__ByteQueueSetNodeSize21_ptr);
        using CryptoPP__ByteQueueSpy22_ptr = uint8_t* (WINAPIV*)(struct CryptoPP::ByteQueue*, uint64_t*);
        using CryptoPP__ByteQueueSpy22_clbk = uint8_t* (WINAPIV*)(struct CryptoPP::ByteQueue*, uint64_t*, CryptoPP__ByteQueueSpy22_ptr);
        using CryptoPP__ByteQueueUndoLazyPut23_ptr = void (WINAPIV*)(struct CryptoPP::ByteQueue*, uint64_t);
        using CryptoPP__ByteQueueUndoLazyPut23_clbk = void (WINAPIV*)(struct CryptoPP::ByteQueue*, uint64_t, CryptoPP__ByteQueueUndoLazyPut23_ptr);
        using CryptoPP__ByteQueueUnget24_ptr = void (WINAPIV*)(struct CryptoPP::ByteQueue*, uint8_t*, uint64_t);
        using CryptoPP__ByteQueueUnget24_clbk = void (WINAPIV*)(struct CryptoPP::ByteQueue*, uint8_t*, uint64_t, CryptoPP__ByteQueueUnget24_ptr);
        using CryptoPP__ByteQueueUnget25_ptr = void (WINAPIV*)(struct CryptoPP::ByteQueue*, uint8_t);
        using CryptoPP__ByteQueueUnget25_clbk = void (WINAPIV*)(struct CryptoPP::ByteQueue*, uint8_t, CryptoPP__ByteQueueUnget25_ptr);
        using CryptoPP__ByteQueueswap26_ptr = void (WINAPIV*)(struct CryptoPP::ByteQueue*, struct CryptoPP::ByteQueue*);
        using CryptoPP__ByteQueueswap26_clbk = void (WINAPIV*)(struct CryptoPP::ByteQueue*, struct CryptoPP::ByteQueue*, CryptoPP__ByteQueueswap26_ptr);
        using CryptoPP__ByteQueuedtor_ByteQueue27_ptr = int64_t (WINAPIV*)(struct CryptoPP::ByteQueue*);
        using CryptoPP__ByteQueuedtor_ByteQueue27_clbk = int64_t (WINAPIV*)(struct CryptoPP::ByteQueue*, CryptoPP__ByteQueuedtor_ByteQueue27_ptr);
        
        using CryptoPP__ByteQueue__WalkerGet1_ptr = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueue::Walker*, uint8_t*);
        using CryptoPP__ByteQueue__WalkerGet1_clbk = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueue::Walker*, uint8_t*, CryptoPP__ByteQueue__WalkerGet1_ptr);
        using CryptoPP__ByteQueue__WalkerGet2_ptr = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueue::Walker*, uint8_t*, uint64_t);
        using CryptoPP__ByteQueue__WalkerGet2_clbk = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueue::Walker*, uint8_t*, uint64_t, CryptoPP__ByteQueue__WalkerGet2_ptr);
        using CryptoPP__ByteQueue__WalkerGetCurrentPosition3_ptr = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueue::Walker*);
        using CryptoPP__ByteQueue__WalkerGetCurrentPosition3_clbk = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueue::Walker*, CryptoPP__ByteQueue__WalkerGetCurrentPosition3_ptr);
        using CryptoPP__ByteQueue__WalkerIsolatedInitialize4_ptr = void (WINAPIV*)(struct CryptoPP::ByteQueue::Walker*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__ByteQueue__WalkerIsolatedInitialize4_clbk = void (WINAPIV*)(struct CryptoPP::ByteQueue::Walker*, struct CryptoPP::NameValuePairs*, CryptoPP__ByteQueue__WalkerIsolatedInitialize4_ptr);
        using CryptoPP__ByteQueue__WalkerMaxRetrievable5_ptr = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueue::Walker*);
        using CryptoPP__ByteQueue__WalkerMaxRetrievable5_clbk = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueue::Walker*, CryptoPP__ByteQueue__WalkerMaxRetrievable5_ptr);
        using CryptoPP__ByteQueue__WalkerPeek6_ptr = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueue::Walker*, uint8_t*);
        using CryptoPP__ByteQueue__WalkerPeek6_clbk = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueue::Walker*, uint8_t*, CryptoPP__ByteQueue__WalkerPeek6_ptr);
        using CryptoPP__ByteQueue__WalkerPeek7_ptr = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueue::Walker*, uint8_t*, uint64_t);
        using CryptoPP__ByteQueue__WalkerPeek7_clbk = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueue::Walker*, uint8_t*, uint64_t, CryptoPP__ByteQueue__WalkerPeek7_ptr);
        using CryptoPP__ByteQueue__Walkerctor_Walker8_ptr = int64_t (WINAPIV*)(struct CryptoPP::ByteQueue::Walker*, struct CryptoPP::ByteQueue*);
        using CryptoPP__ByteQueue__Walkerctor_Walker8_clbk = int64_t (WINAPIV*)(struct CryptoPP::ByteQueue::Walker*, struct CryptoPP::ByteQueue*, CryptoPP__ByteQueue__Walkerctor_Walker8_ptr);
        using CryptoPP__ByteQueue__Walkerctor_Walker9_ptr = int64_t (WINAPIV*)(struct CryptoPP::ByteQueue::Walker*, struct CryptoPP::ByteQueue::Walker*);
        using CryptoPP__ByteQueue__Walkerctor_Walker9_clbk = int64_t (WINAPIV*)(struct CryptoPP::ByteQueue::Walker*, struct CryptoPP::ByteQueue::Walker*, CryptoPP__ByteQueue__Walkerctor_Walker9_ptr);
        using CryptoPP__ByteQueue__Walkerdtor_Walker10_ptr = int64_t (WINAPIV*)(struct CryptoPP::ByteQueue::Walker*);
        using CryptoPP__ByteQueue__Walkerdtor_Walker10_clbk = int64_t (WINAPIV*)(struct CryptoPP::ByteQueue::Walker*, CryptoPP__ByteQueue__Walkerdtor_Walker10_ptr);
        
        using CryptoPP__PKCS8PrivateKeyBERDecode1_ptr = void (WINAPIV*)(struct CryptoPP::PKCS8PrivateKey*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__PKCS8PrivateKeyBERDecode1_clbk = void (WINAPIV*)(struct CryptoPP::PKCS8PrivateKey*, struct CryptoPP::BufferedTransformation*, CryptoPP__PKCS8PrivateKeyBERDecode1_ptr);
        using CryptoPP__PKCS8PrivateKeyBERDecodeAlgorithmParameters3_ptr = bool (WINAPIV*)(struct CryptoPP::PKCS8PrivateKey*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__PKCS8PrivateKeyBERDecodeAlgorithmParameters3_clbk = bool (WINAPIV*)(struct CryptoPP::PKCS8PrivateKey*, struct CryptoPP::BufferedTransformation*, CryptoPP__PKCS8PrivateKeyBERDecodeAlgorithmParameters3_ptr);
        using CryptoPP__PKCS8PrivateKeyBERDecodeOptionalAttributes4_ptr = void (WINAPIV*)(struct CryptoPP::PKCS8PrivateKey*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__PKCS8PrivateKeyBERDecodeOptionalAttributes4_clbk = void (WINAPIV*)(struct CryptoPP::PKCS8PrivateKey*, struct CryptoPP::BufferedTransformation*, CryptoPP__PKCS8PrivateKeyBERDecodeOptionalAttributes4_ptr);
        using CryptoPP__PKCS8PrivateKeyDEREncode5_ptr = void (WINAPIV*)(struct CryptoPP::PKCS8PrivateKey*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__PKCS8PrivateKeyDEREncode5_clbk = void (WINAPIV*)(struct CryptoPP::PKCS8PrivateKey*, struct CryptoPP::BufferedTransformation*, CryptoPP__PKCS8PrivateKeyDEREncode5_ptr);
        using CryptoPP__PKCS8PrivateKeyDEREncodeAlgorithmParameters7_ptr = bool (WINAPIV*)(struct CryptoPP::PKCS8PrivateKey*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__PKCS8PrivateKeyDEREncodeAlgorithmParameters7_clbk = bool (WINAPIV*)(struct CryptoPP::PKCS8PrivateKey*, struct CryptoPP::BufferedTransformation*, CryptoPP__PKCS8PrivateKeyDEREncodeAlgorithmParameters7_ptr);
        using CryptoPP__PKCS8PrivateKeyDEREncodeOptionalAttributes8_ptr = void (WINAPIV*)(struct CryptoPP::PKCS8PrivateKey*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__PKCS8PrivateKeyDEREncodeOptionalAttributes8_clbk = void (WINAPIV*)(struct CryptoPP::PKCS8PrivateKey*, struct CryptoPP::BufferedTransformation*, CryptoPP__PKCS8PrivateKeyDEREncodeOptionalAttributes8_ptr);
        using CryptoPP__PKCS8PrivateKeyctor_PKCS8PrivateKey9_ptr = int64_t (WINAPIV*)(struct CryptoPP::PKCS8PrivateKey*, struct CryptoPP::PKCS8PrivateKey*);
        using CryptoPP__PKCS8PrivateKeyctor_PKCS8PrivateKey9_clbk = int64_t (WINAPIV*)(struct CryptoPP::PKCS8PrivateKey*, struct CryptoPP::PKCS8PrivateKey*, CryptoPP__PKCS8PrivateKeyctor_PKCS8PrivateKey9_ptr);
        using CryptoPP__PKCS8PrivateKeyctor_PKCS8PrivateKey11_ptr = void (WINAPIV*)(struct CryptoPP::PKCS8PrivateKey*);
        using CryptoPP__PKCS8PrivateKeyctor_PKCS8PrivateKey11_clbk = void (WINAPIV*)(struct CryptoPP::PKCS8PrivateKey*, CryptoPP__PKCS8PrivateKeyctor_PKCS8PrivateKey11_ptr);
        using CryptoPP__PKCS8PrivateKeydtor_PKCS8PrivateKey20_ptr = void (WINAPIV*)(struct CryptoPP::PKCS8PrivateKey*);
        using CryptoPP__PKCS8PrivateKeydtor_PKCS8PrivateKey20_clbk = void (WINAPIV*)(struct CryptoPP::PKCS8PrivateKey*, CryptoPP__PKCS8PrivateKeydtor_PKCS8PrivateKey20_ptr);
        
        using CryptoPP__DL_GroupPrecomputationConvertIn2_ptr = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::DL_GroupPrecomputation<CryptoPP::ECPPoint>*, struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*);
        using CryptoPP__DL_GroupPrecomputationConvertIn2_clbk = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::DL_GroupPrecomputation<CryptoPP::ECPPoint>*, struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*, CryptoPP__DL_GroupPrecomputationConvertIn2_ptr);
        using CryptoPP__DL_GroupPrecomputationConvertOut4_ptr = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::DL_GroupPrecomputation<CryptoPP::ECPPoint>*, struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*);
        using CryptoPP__DL_GroupPrecomputationConvertOut4_clbk = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::DL_GroupPrecomputation<CryptoPP::ECPPoint>*, struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*, CryptoPP__DL_GroupPrecomputationConvertOut4_ptr);
        using CryptoPP__DL_GroupPrecomputationctor_DL_GroupPrecomputation6_ptr = void (WINAPIV*)(struct CryptoPP::DL_GroupPrecomputation<CryptoPP::ECPPoint>*);
        using CryptoPP__DL_GroupPrecomputationctor_DL_GroupPrecomputation6_clbk = void (WINAPIV*)(struct CryptoPP::DL_GroupPrecomputation<CryptoPP::ECPPoint>*, CryptoPP__DL_GroupPrecomputationctor_DL_GroupPrecomputation6_ptr);
        using CryptoPP__DL_GroupPrecomputationNeedConversions8_ptr = bool (WINAPIV*)(struct CryptoPP::DL_GroupPrecomputation<CryptoPP::ECPPoint>*);
        using CryptoPP__DL_GroupPrecomputationNeedConversions8_clbk = bool (WINAPIV*)(struct CryptoPP::DL_GroupPrecomputation<CryptoPP::ECPPoint>*, CryptoPP__DL_GroupPrecomputationNeedConversions8_ptr);
        
        using CryptoPP__InitializeIntegerctor_InitializeInteger1_ptr = int64_t (WINAPIV*)(struct CryptoPP::InitializeInteger*);
        using CryptoPP__InitializeIntegerctor_InitializeInteger1_clbk = int64_t (WINAPIV*)(struct CryptoPP::InitializeInteger*, CryptoPP__InitializeIntegerctor_InitializeInteger1_ptr);
        
        using CryptoPP__AllocatorWithCleanupdeallocate2_ptr = void (WINAPIV*)(struct CryptoPP::AllocatorWithCleanup<unsigned __int64,0>*, void*, uint64_t);
        using CryptoPP__AllocatorWithCleanupdeallocate2_clbk = void (WINAPIV*)(struct CryptoPP::AllocatorWithCleanup<unsigned __int64,0>*, void*, uint64_t, CryptoPP__AllocatorWithCleanupdeallocate2_ptr);
        
        using CryptoPP__IntegerAbsoluteValue1_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short);
        using CryptoPP__IntegerAbsoluteValue1_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short, CryptoPP__IntegerAbsoluteValue1_ptr);
        using CryptoPP__IntegerBERDecode2_ptr = void (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__IntegerBERDecode2_clbk = void (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::BufferedTransformation*, CryptoPP__IntegerBERDecode2_ptr);
        using CryptoPP__IntegerBERDecode3_ptr = void (WINAPIV*)(struct CryptoPP::Integer*, uint8_t*, uint64_t);
        using CryptoPP__IntegerBERDecode3_clbk = void (WINAPIV*)(struct CryptoPP::Integer*, uint8_t*, uint64_t, CryptoPP__IntegerBERDecode3_ptr);
        using CryptoPP__IntegerBERDecodeAsOctetString4_ptr = void (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::BufferedTransformation*, uint64_t);
        using CryptoPP__IntegerBERDecodeAsOctetString4_clbk = void (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::BufferedTransformation*, uint64_t, CryptoPP__IntegerBERDecodeAsOctetString4_ptr);
        using CryptoPP__IntegerBitCount5_ptr = unsigned int (WINAPIV*)(struct CryptoPP::Integer*);
        using CryptoPP__IntegerBitCount5_clbk = unsigned int (WINAPIV*)(struct CryptoPP::Integer*, CryptoPP__IntegerBitCount5_ptr);
        using CryptoPP__IntegerByteCount6_ptr = unsigned int (WINAPIV*)(struct CryptoPP::Integer*);
        using CryptoPP__IntegerByteCount6_clbk = unsigned int (WINAPIV*)(struct CryptoPP::Integer*, CryptoPP__IntegerByteCount6_ptr);
        using CryptoPP__IntegerCompare7_ptr = int64_t (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__IntegerCompare7_clbk = int64_t (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__IntegerCompare7_ptr);
        using CryptoPP__IntegerConvertToLong8_ptr = int32_t (WINAPIV*)(struct CryptoPP::Integer*);
        using CryptoPP__IntegerConvertToLong8_clbk = int32_t (WINAPIV*)(struct CryptoPP::Integer*, CryptoPP__IntegerConvertToLong8_ptr);
        using CryptoPP__IntegerDEREncode9_ptr = void (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__IntegerDEREncode9_clbk = void (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::BufferedTransformation*, CryptoPP__IntegerDEREncode9_ptr);
        using CryptoPP__IntegerDEREncodeAsOctetString10_ptr = void (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::BufferedTransformation*, uint64_t);
        using CryptoPP__IntegerDEREncodeAsOctetString10_clbk = void (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::BufferedTransformation*, uint64_t, CryptoPP__IntegerDEREncodeAsOctetString10_ptr);
        using CryptoPP__IntegerDecode11_ptr = void (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::BufferedTransformation*, uint64_t, struct CryptoPP::Integer::Signedness);
        using CryptoPP__IntegerDecode11_clbk = void (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::BufferedTransformation*, uint64_t, struct CryptoPP::Integer::Signedness, CryptoPP__IntegerDecode11_ptr);
        using CryptoPP__IntegerDecode12_ptr = void (WINAPIV*)(struct CryptoPP::Integer*, uint8_t*, uint64_t, struct CryptoPP::Integer::Signedness);
        using CryptoPP__IntegerDecode12_clbk = void (WINAPIV*)(struct CryptoPP::Integer*, uint8_t*, uint64_t, struct CryptoPP::Integer::Signedness, CryptoPP__IntegerDecode12_ptr);
        using CryptoPP__IntegerDivide13_ptr = void (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__IntegerDivide13_clbk = void (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__IntegerDivide13_ptr);
        using CryptoPP__IntegerDivide14_ptr = void (WINAPIV*)(uint64_t*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, uint64_t);
        using CryptoPP__IntegerDivide14_clbk = void (WINAPIV*)(uint64_t*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, uint64_t, CryptoPP__IntegerDivide14_ptr);
        using CryptoPP__IntegerDivideByPowerOf215_ptr = void (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, unsigned int);
        using CryptoPP__IntegerDivideByPowerOf215_clbk = void (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, unsigned int, CryptoPP__IntegerDivideByPowerOf215_ptr);
        using CryptoPP__IntegerDividedBy16_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short, struct CryptoPP::Integer*);
        using CryptoPP__IntegerDividedBy16_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short, struct CryptoPP::Integer*, CryptoPP__IntegerDividedBy16_ptr);
        using CryptoPP__IntegerDividedBy17_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short, struct CryptoPP::Integer*);
        using CryptoPP__IntegerDividedBy17_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short, struct CryptoPP::Integer*, CryptoPP__IntegerDividedBy17_ptr);
        using CryptoPP__IntegerDoubled18_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short);
        using CryptoPP__IntegerDoubled18_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short, CryptoPP__IntegerDoubled18_ptr);
        using CryptoPP__IntegerEncode19_ptr = void (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::BufferedTransformation*, uint64_t, struct CryptoPP::Integer::Signedness);
        using CryptoPP__IntegerEncode19_clbk = void (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::BufferedTransformation*, uint64_t, struct CryptoPP::Integer::Signedness, CryptoPP__IntegerEncode19_ptr);
        using CryptoPP__IntegerEncode20_ptr = void (WINAPIV*)(struct CryptoPP::Integer*, uint8_t*, uint64_t, struct CryptoPP::Integer::Signedness);
        using CryptoPP__IntegerEncode20_clbk = void (WINAPIV*)(struct CryptoPP::Integer*, uint8_t*, uint64_t, struct CryptoPP::Integer::Signedness, CryptoPP__IntegerEncode20_ptr);
        using CryptoPP__IntegerGcd21_ptr = struct CryptoPP::Integer* (WINAPIV*)(short, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__IntegerGcd21_clbk = struct CryptoPP::Integer* (WINAPIV*)(short, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__IntegerGcd21_ptr);
        using CryptoPP__IntegerGenerateRandomNoThrow22_ptr = bool (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__IntegerGenerateRandomNoThrow22_clbk = bool (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::NameValuePairs*, CryptoPP__IntegerGenerateRandomNoThrow22_ptr);
        using CryptoPP__IntegerGetBit23_ptr = bool (WINAPIV*)(struct CryptoPP::Integer*, uint64_t);
        using CryptoPP__IntegerGetBit23_clbk = bool (WINAPIV*)(struct CryptoPP::Integer*, uint64_t, CryptoPP__IntegerGetBit23_ptr);
        using CryptoPP__IntegerGetBits24_ptr = uint64_t (WINAPIV*)(struct CryptoPP::Integer*, uint64_t, uint64_t);
        using CryptoPP__IntegerGetBits24_clbk = uint64_t (WINAPIV*)(struct CryptoPP::Integer*, uint64_t, uint64_t, CryptoPP__IntegerGetBits24_ptr);
        using CryptoPP__IntegerGetByte25_ptr = uint8_t (WINAPIV*)(struct CryptoPP::Integer*, uint64_t);
        using CryptoPP__IntegerGetByte25_clbk = uint8_t (WINAPIV*)(struct CryptoPP::Integer*, uint64_t, CryptoPP__IntegerGetByte25_ptr);
        using CryptoPP__Integerctor_Integer26_ptr = int64_t (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__Integerctor_Integer26_clbk = int64_t (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::BufferedTransformation*, CryptoPP__Integerctor_Integer26_ptr);
        using CryptoPP__Integerctor_Integer27_ptr = int64_t (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::BufferedTransformation*, uint64_t, struct CryptoPP::Integer::Signedness);
        using CryptoPP__Integerctor_Integer27_clbk = int64_t (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::BufferedTransformation*, uint64_t, struct CryptoPP::Integer::Signedness, CryptoPP__Integerctor_Integer27_ptr);
        using CryptoPP__Integerctor_Integer28_ptr = int64_t (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__Integerctor_Integer28_clbk = int64_t (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__Integerctor_Integer28_ptr);
        using CryptoPP__Integerctor_Integer29_ptr = int64_t (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer::Sign, uint64_t);
        using CryptoPP__Integerctor_Integer29_clbk = int64_t (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer::Sign, uint64_t, CryptoPP__Integerctor_Integer29_ptr);
        using CryptoPP__Integerctor_Integer30_ptr = int64_t (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer::Sign, uint64_t, uint64_t);
        using CryptoPP__Integerctor_Integer30_clbk = int64_t (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer::Sign, uint64_t, uint64_t, CryptoPP__Integerctor_Integer30_ptr);
        using CryptoPP__Integerctor_Integer31_ptr = int64_t (WINAPIV*)(struct CryptoPP::Integer::RandomNumberType, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer::RandomNumberType, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__Integerctor_Integer31_clbk = int64_t (WINAPIV*)(struct CryptoPP::Integer::RandomNumberType, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer::RandomNumberType, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__Integerctor_Integer31_ptr);
        using CryptoPP__Integerctor_Integer32_ptr = int64_t (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::RandomNumberGenerator*, uint64_t);
        using CryptoPP__Integerctor_Integer32_clbk = int64_t (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::RandomNumberGenerator*, uint64_t, CryptoPP__Integerctor_Integer32_ptr);
        using CryptoPP__Integerctor_Integer33_ptr = int64_t (WINAPIV*)(struct CryptoPP::Integer*, char*);
        using CryptoPP__Integerctor_Integer33_clbk = int64_t (WINAPIV*)(struct CryptoPP::Integer*, char*, CryptoPP__Integerctor_Integer33_ptr);
        using CryptoPP__Integerctor_Integer34_ptr = int64_t (WINAPIV*)(struct CryptoPP::Integer*, int32_t);
        using CryptoPP__Integerctor_Integer34_clbk = int64_t (WINAPIV*)(struct CryptoPP::Integer*, int32_t, CryptoPP__Integerctor_Integer34_ptr);
        using CryptoPP__Integerctor_Integer35_ptr = int64_t (WINAPIV*)(struct CryptoPP::Integer*, uint8_t*, uint64_t, struct CryptoPP::Integer::Signedness);
        using CryptoPP__Integerctor_Integer35_clbk = int64_t (WINAPIV*)(struct CryptoPP::Integer*, uint8_t*, uint64_t, struct CryptoPP::Integer::Signedness, CryptoPP__Integerctor_Integer35_ptr);
        using CryptoPP__Integerctor_Integer36_ptr = int64_t (WINAPIV*)(struct CryptoPP::Integer*, uint64_t, uint64_t);
        using CryptoPP__Integerctor_Integer36_clbk = int64_t (WINAPIV*)(struct CryptoPP::Integer*, uint64_t, uint64_t, CryptoPP__Integerctor_Integer36_ptr);
        using CryptoPP__Integerctor_Integer37_ptr = void (WINAPIV*)(void*);
        using CryptoPP__Integerctor_Integer37_clbk = void (WINAPIV*)(void*, CryptoPP__Integerctor_Integer37_ptr);
        using CryptoPP__Integerctor_Integer38_ptr = int64_t (WINAPIV*)(struct CryptoPP::Integer*, wchar_t*);
        using CryptoPP__Integerctor_Integer38_clbk = int64_t (WINAPIV*)(struct CryptoPP::Integer*, wchar_t*, CryptoPP__Integerctor_Integer38_ptr);
        using CryptoPP__IntegerInverseMod39_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short, struct CryptoPP::Integer*);
        using CryptoPP__IntegerInverseMod39_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short, struct CryptoPP::Integer*, CryptoPP__IntegerInverseMod39_ptr);
        using CryptoPP__IntegerInverseMod40_ptr = uint64_t (WINAPIV*)(struct CryptoPP::Integer*, uint64_t);
        using CryptoPP__IntegerInverseMod40_clbk = uint64_t (WINAPIV*)(struct CryptoPP::Integer*, uint64_t, CryptoPP__IntegerInverseMod40_ptr);
        using CryptoPP__IntegerIsConvertableToLong41_ptr = bool (WINAPIV*)(struct CryptoPP::Integer*);
        using CryptoPP__IntegerIsConvertableToLong41_clbk = bool (WINAPIV*)(struct CryptoPP::Integer*, CryptoPP__IntegerIsConvertableToLong41_ptr);
        using CryptoPP__IntegerIsEven42_ptr = bool (WINAPIV*)(struct CryptoPP::Integer*);
        using CryptoPP__IntegerIsEven42_clbk = bool (WINAPIV*)(struct CryptoPP::Integer*, CryptoPP__IntegerIsEven42_ptr);
        using CryptoPP__IntegerIsNegative44_ptr = bool (WINAPIV*)(struct CryptoPP::Integer*);
        using CryptoPP__IntegerIsNegative44_clbk = bool (WINAPIV*)(struct CryptoPP::Integer*, CryptoPP__IntegerIsNegative44_ptr);
        using CryptoPP__IntegerIsOdd45_ptr = bool (WINAPIV*)(struct CryptoPP::Integer*);
        using CryptoPP__IntegerIsOdd45_clbk = bool (WINAPIV*)(struct CryptoPP::Integer*, CryptoPP__IntegerIsOdd45_ptr);
        using CryptoPP__IntegerIsPositive47_ptr = bool (WINAPIV*)(struct CryptoPP::Integer*);
        using CryptoPP__IntegerIsPositive47_clbk = bool (WINAPIV*)(struct CryptoPP::Integer*, CryptoPP__IntegerIsPositive47_ptr);
        using CryptoPP__IntegerIsSquare48_ptr = bool (WINAPIV*)(struct CryptoPP::Integer*);
        using CryptoPP__IntegerIsSquare48_clbk = bool (WINAPIV*)(struct CryptoPP::Integer*, CryptoPP__IntegerIsSquare48_ptr);
        using CryptoPP__IntegerIsUnit49_ptr = bool (WINAPIV*)(struct CryptoPP::Integer*);
        using CryptoPP__IntegerIsUnit49_clbk = bool (WINAPIV*)(struct CryptoPP::Integer*, CryptoPP__IntegerIsUnit49_ptr);
        using CryptoPP__IntegerIsZero51_ptr = bool (WINAPIV*)(struct CryptoPP::Integer*);
        using CryptoPP__IntegerIsZero51_clbk = bool (WINAPIV*)(struct CryptoPP::Integer*, CryptoPP__IntegerIsZero51_ptr);
        using CryptoPP__IntegerMinEncodedSize52_ptr = uint64_t (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer::Signedness);
        using CryptoPP__IntegerMinEncodedSize52_clbk = uint64_t (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer::Signedness, CryptoPP__IntegerMinEncodedSize52_ptr);
        using CryptoPP__IntegerMinus53_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short, struct CryptoPP::Integer*);
        using CryptoPP__IntegerMinus53_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short, struct CryptoPP::Integer*, CryptoPP__IntegerMinus53_ptr);
        using CryptoPP__IntegerModulo54_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short, struct CryptoPP::Integer*);
        using CryptoPP__IntegerModulo54_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short, struct CryptoPP::Integer*, CryptoPP__IntegerModulo54_ptr);
        using CryptoPP__IntegerModulo55_ptr = uint64_t (WINAPIV*)(struct CryptoPP::Integer*, uint64_t);
        using CryptoPP__IntegerModulo55_clbk = uint64_t (WINAPIV*)(struct CryptoPP::Integer*, uint64_t, CryptoPP__IntegerModulo55_ptr);
        using CryptoPP__IntegerMultiplicativeInverse56_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short);
        using CryptoPP__IntegerMultiplicativeInverse56_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short, CryptoPP__IntegerMultiplicativeInverse56_ptr);
        using CryptoPP__IntegerNegate57_ptr = void (WINAPIV*)(struct CryptoPP::Integer*);
        using CryptoPP__IntegerNegate57_clbk = void (WINAPIV*)(struct CryptoPP::Integer*, CryptoPP__IntegerNegate57_ptr);
        using CryptoPP__IntegerNotNegative59_ptr = bool (WINAPIV*)(struct CryptoPP::Integer*);
        using CryptoPP__IntegerNotNegative59_clbk = bool (WINAPIV*)(struct CryptoPP::Integer*, CryptoPP__IntegerNotNegative59_ptr);
        using CryptoPP__IntegerNotZero61_ptr = bool (WINAPIV*)(struct CryptoPP::Integer*);
        using CryptoPP__IntegerNotZero61_clbk = bool (WINAPIV*)(struct CryptoPP::Integer*, CryptoPP__IntegerNotZero61_ptr);
        using CryptoPP__IntegerOne62_ptr = struct CryptoPP::Integer* (WINAPIV*)();
        using CryptoPP__IntegerOne62_clbk = struct CryptoPP::Integer* (WINAPIV*)(CryptoPP__IntegerOne62_ptr);
        using CryptoPP__IntegerOpenPGPDecode63_ptr = void (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__IntegerOpenPGPDecode63_clbk = void (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::BufferedTransformation*, CryptoPP__IntegerOpenPGPDecode63_ptr);
        using CryptoPP__IntegerOpenPGPDecode64_ptr = void (WINAPIV*)(struct CryptoPP::Integer*, uint8_t*, uint64_t);
        using CryptoPP__IntegerOpenPGPDecode64_clbk = void (WINAPIV*)(struct CryptoPP::Integer*, uint8_t*, uint64_t, CryptoPP__IntegerOpenPGPDecode64_ptr);
        using CryptoPP__IntegerOpenPGPEncode65_ptr = uint64_t (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__IntegerOpenPGPEncode65_clbk = uint64_t (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::BufferedTransformation*, CryptoPP__IntegerOpenPGPEncode65_ptr);
        using CryptoPP__IntegerOpenPGPEncode66_ptr = uint64_t (WINAPIV*)(struct CryptoPP::Integer*, uint8_t*, uint64_t);
        using CryptoPP__IntegerOpenPGPEncode66_clbk = uint64_t (WINAPIV*)(struct CryptoPP::Integer*, uint8_t*, uint64_t, CryptoPP__IntegerOpenPGPEncode66_ptr);
        using CryptoPP__IntegerPlus67_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short, struct CryptoPP::Integer*);
        using CryptoPP__IntegerPlus67_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short, struct CryptoPP::Integer*, CryptoPP__IntegerPlus67_ptr);
        using CryptoPP__IntegerPositiveCompare68_ptr = int64_t (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__IntegerPositiveCompare68_clbk = int64_t (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__IntegerPositiveCompare68_ptr);
        using CryptoPP__IntegerPower269_ptr = struct CryptoPP::Integer* (WINAPIV*)(short, struct CryptoPP::Integer*);
        using CryptoPP__IntegerPower269_clbk = struct CryptoPP::Integer* (WINAPIV*)(short, struct CryptoPP::Integer*, CryptoPP__IntegerPower269_ptr);
        using CryptoPP__IntegerRandomize70_ptr = void (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__IntegerRandomize70_clbk = void (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__IntegerRandomize70_ptr);
        using CryptoPP__IntegerRandomize71_ptr = bool (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer::RandomNumberType, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__IntegerRandomize71_clbk = bool (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer::RandomNumberType, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__IntegerRandomize71_ptr);
        using CryptoPP__IntegerRandomize72_ptr = void (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::RandomNumberGenerator*, uint64_t);
        using CryptoPP__IntegerRandomize72_clbk = void (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::RandomNumberGenerator*, uint64_t, CryptoPP__IntegerRandomize72_ptr);
        using CryptoPP__IntegerSetBit73_ptr = void (WINAPIV*)(struct CryptoPP::Integer*, uint64_t, bool);
        using CryptoPP__IntegerSetBit73_clbk = void (WINAPIV*)(struct CryptoPP::Integer*, uint64_t, bool, CryptoPP__IntegerSetBit73_ptr);
        using CryptoPP__IntegerSetByte74_ptr = void (WINAPIV*)(struct CryptoPP::Integer*, uint64_t, uint8_t);
        using CryptoPP__IntegerSetByte74_clbk = void (WINAPIV*)(struct CryptoPP::Integer*, uint64_t, uint8_t, CryptoPP__IntegerSetByte74_ptr);
        using CryptoPP__IntegerSquareRoot75_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short);
        using CryptoPP__IntegerSquareRoot75_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short, CryptoPP__IntegerSquareRoot75_ptr);
        using CryptoPP__IntegerSquared77_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__IntegerSquared77_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__IntegerSquared77_ptr);
        using CryptoPP__IntegerTimes78_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short, struct CryptoPP::Integer*);
        using CryptoPP__IntegerTimes78_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::Integer*, short, struct CryptoPP::Integer*, CryptoPP__IntegerTimes78_ptr);
        using CryptoPP__IntegerTwo79_ptr = struct CryptoPP::Integer* (WINAPIV*)();
        using CryptoPP__IntegerTwo79_clbk = struct CryptoPP::Integer* (WINAPIV*)(CryptoPP__IntegerTwo79_ptr);
        using CryptoPP__IntegerWordCount80_ptr = unsigned int (WINAPIV*)(struct CryptoPP::Integer*);
        using CryptoPP__IntegerWordCount80_clbk = unsigned int (WINAPIV*)(struct CryptoPP::Integer*, CryptoPP__IntegerWordCount80_ptr);
        using CryptoPP__IntegerZero81_ptr = struct CryptoPP::Integer* (WINAPIV*)();
        using CryptoPP__IntegerZero81_clbk = struct CryptoPP::Integer* (WINAPIV*)(CryptoPP__IntegerZero81_ptr);
        using CryptoPP__Integerswap82_ptr = void (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__Integerswap82_clbk = void (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__Integerswap82_ptr);
        using CryptoPP__Integerdtor_Integer84_ptr = void (WINAPIV*)(struct CryptoPP::Integer*);
        using CryptoPP__Integerdtor_Integer84_clbk = void (WINAPIV*)(struct CryptoPP::Integer*, CryptoPP__Integerdtor_Integer84_ptr);
        
        using CryptoPP__Integer__DivideByZeroctor_DivideByZero1_ptr = int64_t (WINAPIV*)(struct CryptoPP::Integer::DivideByZero*, struct CryptoPP::Integer::DivideByZero*);
        using CryptoPP__Integer__DivideByZeroctor_DivideByZero1_clbk = int64_t (WINAPIV*)(struct CryptoPP::Integer::DivideByZero*, struct CryptoPP::Integer::DivideByZero*, CryptoPP__Integer__DivideByZeroctor_DivideByZero1_ptr);
        using CryptoPP__Integer__DivideByZeroctor_DivideByZero2_ptr = int64_t (WINAPIV*)(struct CryptoPP::Integer::DivideByZero*);
        using CryptoPP__Integer__DivideByZeroctor_DivideByZero2_clbk = int64_t (WINAPIV*)(struct CryptoPP::Integer::DivideByZero*, CryptoPP__Integer__DivideByZeroctor_DivideByZero2_ptr);
        using CryptoPP__Integer__DivideByZerodtor_DivideByZero3_ptr = int64_t (WINAPIV*)(struct CryptoPP::Integer::DivideByZero*);
        using CryptoPP__Integer__DivideByZerodtor_DivideByZero3_clbk = int64_t (WINAPIV*)(struct CryptoPP::Integer::DivideByZero*, CryptoPP__Integer__DivideByZerodtor_DivideByZero3_ptr);
        
        using CryptoPP__Integer__RandomNumberNotFoundctor_RandomNumberNotFound1_ptr = int64_t (WINAPIV*)(struct CryptoPP::Integer::RandomNumberNotFound*, struct CryptoPP::Integer::RandomNumberNotFound*);
        using CryptoPP__Integer__RandomNumberNotFoundctor_RandomNumberNotFound1_clbk = int64_t (WINAPIV*)(struct CryptoPP::Integer::RandomNumberNotFound*, struct CryptoPP::Integer::RandomNumberNotFound*, CryptoPP__Integer__RandomNumberNotFoundctor_RandomNumberNotFound1_ptr);
        using CryptoPP__Integer__RandomNumberNotFoundctor_RandomNumberNotFound2_ptr = int64_t (WINAPIV*)(struct CryptoPP::Integer::RandomNumberNotFound*);
        using CryptoPP__Integer__RandomNumberNotFoundctor_RandomNumberNotFound2_clbk = int64_t (WINAPIV*)(struct CryptoPP::Integer::RandomNumberNotFound*, CryptoPP__Integer__RandomNumberNotFoundctor_RandomNumberNotFound2_ptr);
        using CryptoPP__Integer__RandomNumberNotFounddtor_RandomNumberNotFound3_ptr = int64_t (WINAPIV*)(struct CryptoPP::Integer::RandomNumberNotFound*);
        using CryptoPP__Integer__RandomNumberNotFounddtor_RandomNumberNotFound3_clbk = int64_t (WINAPIV*)(struct CryptoPP::Integer::RandomNumberNotFound*, CryptoPP__Integer__RandomNumberNotFounddtor_RandomNumberNotFound3_ptr);
        
        using CryptoPP__Integer__OpenPGPDecodeErrctor_OpenPGPDecodeErr1_ptr = int64_t (WINAPIV*)(struct CryptoPP::Integer::OpenPGPDecodeErr*, struct CryptoPP::Integer::OpenPGPDecodeErr*);
        using CryptoPP__Integer__OpenPGPDecodeErrctor_OpenPGPDecodeErr1_clbk = int64_t (WINAPIV*)(struct CryptoPP::Integer::OpenPGPDecodeErr*, struct CryptoPP::Integer::OpenPGPDecodeErr*, CryptoPP__Integer__OpenPGPDecodeErrctor_OpenPGPDecodeErr1_ptr);
        using CryptoPP__Integer__OpenPGPDecodeErrctor_OpenPGPDecodeErr2_ptr = int64_t (WINAPIV*)(struct CryptoPP::Integer::OpenPGPDecodeErr*);
        using CryptoPP__Integer__OpenPGPDecodeErrctor_OpenPGPDecodeErr2_clbk = int64_t (WINAPIV*)(struct CryptoPP::Integer::OpenPGPDecodeErr*, CryptoPP__Integer__OpenPGPDecodeErrctor_OpenPGPDecodeErr2_ptr);
        using CryptoPP__Integer__OpenPGPDecodeErrdtor_OpenPGPDecodeErr3_ptr = int64_t (WINAPIV*)(struct CryptoPP::Integer::OpenPGPDecodeErr*);
        using CryptoPP__Integer__OpenPGPDecodeErrdtor_OpenPGPDecodeErr3_clbk = int64_t (WINAPIV*)(struct CryptoPP::Integer::OpenPGPDecodeErr*, CryptoPP__Integer__OpenPGPDecodeErrdtor_OpenPGPDecodeErr3_ptr);
        
        using CryptoPP__ECPPointctor_ECPPoint2_ptr = void (WINAPIV*)(struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*);
        using CryptoPP__ECPPointctor_ECPPoint2_clbk = void (WINAPIV*)(struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*, CryptoPP__ECPPointctor_ECPPoint2_ptr);
        using CryptoPP__ECPPointctor_ECPPoint4_ptr = void (WINAPIV*)(struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__ECPPointctor_ECPPoint4_clbk = void (WINAPIV*)(struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__ECPPointctor_ECPPoint4_ptr);
        using CryptoPP__ECPPointctor_ECPPoint6_ptr = void (WINAPIV*)(struct CryptoPP::ECPPoint*);
        using CryptoPP__ECPPointctor_ECPPoint6_clbk = void (WINAPIV*)(struct CryptoPP::ECPPoint*, CryptoPP__ECPPointctor_ECPPoint6_ptr);
        using CryptoPP__ECPPointdtor_ECPPoint12_ptr = void (WINAPIV*)(struct CryptoPP::ECPPoint*);
        using CryptoPP__ECPPointdtor_ECPPoint12_clbk = void (WINAPIV*)(struct CryptoPP::ECPPoint*, CryptoPP__ECPPointdtor_ECPPoint12_ptr);
        
        using CryptoPP__AbstractGroupCascadeScalarMultiply1_ptr = int64_t (WINAPIV*)(struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*);
        using CryptoPP__AbstractGroupCascadeScalarMultiply1_clbk = int64_t (WINAPIV*)(struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*, CryptoPP__AbstractGroupCascadeScalarMultiply1_ptr);
        
        using CryptoPP__AbstractGroupctor_AbstractGroup2_ptr = void (WINAPIV*)(struct CryptoPP::AbstractGroup<CryptoPP::Integer>*);
        using CryptoPP__AbstractGroupctor_AbstractGroup2_clbk = void (WINAPIV*)(struct CryptoPP::AbstractGroup<CryptoPP::Integer>*, CryptoPP__AbstractGroupctor_AbstractGroup2_ptr);
        using CryptoPP__AbstractGroupCascadeScalarMultiply3_ptr = int64_t (WINAPIV*)(int64_t, struct CryptoPP::Integer*);
        using CryptoPP__AbstractGroupCascadeScalarMultiply3_clbk = int64_t (WINAPIV*)(int64_t, struct CryptoPP::Integer*, CryptoPP__AbstractGroupCascadeScalarMultiply3_ptr);
        using CryptoPP__AbstractGroupInversionIsFast5_ptr = bool (WINAPIV*)(struct CryptoPP::AbstractGroup<CryptoPP::Integer>*);
        using CryptoPP__AbstractGroupInversionIsFast5_clbk = bool (WINAPIV*)(struct CryptoPP::AbstractGroup<CryptoPP::Integer>*, CryptoPP__AbstractGroupInversionIsFast5_ptr);
        using CryptoPP__AbstractGroupdtor_AbstractGroup7_ptr = void (WINAPIV*)(struct CryptoPP::AbstractGroup<CryptoPP::Integer>*);
        using CryptoPP__AbstractGroupdtor_AbstractGroup7_clbk = void (WINAPIV*)(struct CryptoPP::AbstractGroup<CryptoPP::Integer>*, CryptoPP__AbstractGroupdtor_AbstractGroup7_ptr);
        
        using CryptoPP__AbstractRingctor_AbstractRing2_ptr = void (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>*);
        using CryptoPP__AbstractRingctor_AbstractRing2_clbk = void (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>*, CryptoPP__AbstractRingctor_AbstractRing2_ptr);
        using CryptoPP__AbstractRingMultiplicativeGroup4_ptr = struct CryptoPP::AbstractGroup<CryptoPP::Integer>* (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>*);
        using CryptoPP__AbstractRingMultiplicativeGroup4_clbk = struct CryptoPP::AbstractGroup<CryptoPP::Integer>* (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>*, CryptoPP__AbstractRingMultiplicativeGroup4_ptr);
        using CryptoPP__AbstractRingdtor_AbstractRing6_ptr = void (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>*);
        using CryptoPP__AbstractRingdtor_AbstractRing6_clbk = void (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>*, CryptoPP__AbstractRingdtor_AbstractRing6_ptr);
        
        using CryptoPP__AbstractRing__MultiplicativeGroupTAccumulate2_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__AbstractRing__MultiplicativeGroupTAccumulate2_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__AbstractRing__MultiplicativeGroupTAccumulate2_ptr);
        using CryptoPP__AbstractRing__MultiplicativeGroupTAdd4_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__AbstractRing__MultiplicativeGroupTAdd4_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__AbstractRing__MultiplicativeGroupTAdd4_ptr);
        using CryptoPP__AbstractRing__MultiplicativeGroupTCascadeScalarMultiply6_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__AbstractRing__MultiplicativeGroupTCascadeScalarMultiply6_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__AbstractRing__MultiplicativeGroupTCascadeScalarMultiply6_ptr);
        using CryptoPP__AbstractRing__MultiplicativeGroupTDouble8_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*, struct CryptoPP::Integer*);
        using CryptoPP__AbstractRing__MultiplicativeGroupTDouble8_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*, struct CryptoPP::Integer*, CryptoPP__AbstractRing__MultiplicativeGroupTDouble8_ptr);
        using CryptoPP__AbstractRing__MultiplicativeGroupTEqual10_ptr = bool (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__AbstractRing__MultiplicativeGroupTEqual10_clbk = bool (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__AbstractRing__MultiplicativeGroupTEqual10_ptr);
        using CryptoPP__AbstractRing__MultiplicativeGroupTGetRing12_ptr = struct CryptoPP::AbstractRing<CryptoPP::Integer>* (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*);
        using CryptoPP__AbstractRing__MultiplicativeGroupTGetRing12_clbk = struct CryptoPP::AbstractRing<CryptoPP::Integer>* (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*, CryptoPP__AbstractRing__MultiplicativeGroupTGetRing12_ptr);
        using CryptoPP__AbstractRing__MultiplicativeGroupTIdentity14_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*);
        using CryptoPP__AbstractRing__MultiplicativeGroupTIdentity14_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*, CryptoPP__AbstractRing__MultiplicativeGroupTIdentity14_ptr);
        using CryptoPP__AbstractRing__MultiplicativeGroupTInverse16_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*, struct CryptoPP::Integer*);
        using CryptoPP__AbstractRing__MultiplicativeGroupTInverse16_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*, struct CryptoPP::Integer*, CryptoPP__AbstractRing__MultiplicativeGroupTInverse16_ptr);
        using CryptoPP__AbstractRing__MultiplicativeGroupTctor_MultiplicativeGroupT18_ptr = void (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*);
        using CryptoPP__AbstractRing__MultiplicativeGroupTctor_MultiplicativeGroupT18_clbk = void (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*, CryptoPP__AbstractRing__MultiplicativeGroupTctor_MultiplicativeGroupT18_ptr);
        using CryptoPP__AbstractRing__MultiplicativeGroupTReduce20_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__AbstractRing__MultiplicativeGroupTReduce20_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__AbstractRing__MultiplicativeGroupTReduce20_ptr);
        using CryptoPP__AbstractRing__MultiplicativeGroupTScalarMultiply22_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__AbstractRing__MultiplicativeGroupTScalarMultiply22_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__AbstractRing__MultiplicativeGroupTScalarMultiply22_ptr);
        using CryptoPP__AbstractRing__MultiplicativeGroupTSimultaneousMultiply24_ptr = void (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, unsigned int);
        using CryptoPP__AbstractRing__MultiplicativeGroupTSimultaneousMultiply24_clbk = void (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, unsigned int, CryptoPP__AbstractRing__MultiplicativeGroupTSimultaneousMultiply24_ptr);
        using CryptoPP__AbstractRing__MultiplicativeGroupTSubtract26_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__AbstractRing__MultiplicativeGroupTSubtract26_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__AbstractRing__MultiplicativeGroupTSubtract26_ptr);
        using CryptoPP__AbstractRing__MultiplicativeGroupTdtor_MultiplicativeGroupT31_ptr = void (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*);
        using CryptoPP__AbstractRing__MultiplicativeGroupTdtor_MultiplicativeGroupT31_clbk = void (WINAPIV*)(struct CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT*, CryptoPP__AbstractRing__MultiplicativeGroupTdtor_MultiplicativeGroupT31_ptr);
        
        using CryptoPP__ModularArithmeticAccumulate1_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__ModularArithmeticAccumulate1_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__ModularArithmeticAccumulate1_ptr);
        using CryptoPP__ModularArithmeticAdd2_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__ModularArithmeticAdd2_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__ModularArithmeticAdd2_ptr);
        using CryptoPP__ModularArithmeticBERDecodeElement3_ptr = void (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::Integer*);
        using CryptoPP__ModularArithmeticBERDecodeElement3_clbk = void (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::Integer*, CryptoPP__ModularArithmeticBERDecodeElement3_ptr);
        using CryptoPP__ModularArithmeticCascadeExponentiate4_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__ModularArithmeticCascadeExponentiate4_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__ModularArithmeticCascadeExponentiate4_ptr);
        using CryptoPP__ModularArithmeticClone6_ptr = struct CryptoPP::ModularArithmetic* (WINAPIV*)(struct CryptoPP::ModularArithmetic*);
        using CryptoPP__ModularArithmeticClone6_clbk = struct CryptoPP::ModularArithmetic* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, CryptoPP__ModularArithmeticClone6_ptr);
        using CryptoPP__ModularArithmeticConvertIn8_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__ModularArithmeticConvertIn8_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__ModularArithmeticConvertIn8_ptr);
        using CryptoPP__ModularArithmeticConvertOut10_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__ModularArithmeticConvertOut10_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__ModularArithmeticConvertOut10_ptr);
        using CryptoPP__ModularArithmeticDEREncode11_ptr = void (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__ModularArithmeticDEREncode11_clbk = void (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::BufferedTransformation*, CryptoPP__ModularArithmeticDEREncode11_ptr);
        using CryptoPP__ModularArithmeticDEREncodeElement12_ptr = void (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::Integer*);
        using CryptoPP__ModularArithmeticDEREncodeElement12_clbk = void (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::Integer*, CryptoPP__ModularArithmeticDEREncodeElement12_ptr);
        using CryptoPP__ModularArithmeticDivide14_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__ModularArithmeticDivide14_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__ModularArithmeticDivide14_ptr);
        using CryptoPP__ModularArithmeticDouble16_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*);
        using CryptoPP__ModularArithmeticDouble16_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, CryptoPP__ModularArithmeticDouble16_ptr);
        using CryptoPP__ModularArithmeticEqual18_ptr = bool (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__ModularArithmeticEqual18_clbk = bool (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__ModularArithmeticEqual18_ptr);
        using CryptoPP__ModularArithmeticGetModulus19_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*);
        using CryptoPP__ModularArithmeticGetModulus19_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, CryptoPP__ModularArithmeticGetModulus19_ptr);
        using CryptoPP__ModularArithmeticHalf20_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*);
        using CryptoPP__ModularArithmeticHalf20_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, CryptoPP__ModularArithmeticHalf20_ptr);
        using CryptoPP__ModularArithmeticIdentity22_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*);
        using CryptoPP__ModularArithmeticIdentity22_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, CryptoPP__ModularArithmeticIdentity22_ptr);
        using CryptoPP__ModularArithmeticInverse23_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*);
        using CryptoPP__ModularArithmeticInverse23_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, CryptoPP__ModularArithmeticInverse23_ptr);
        using CryptoPP__ModularArithmeticIsMontgomeryRepresentation25_ptr = bool (WINAPIV*)(struct CryptoPP::ModularArithmetic*);
        using CryptoPP__ModularArithmeticIsMontgomeryRepresentation25_clbk = bool (WINAPIV*)(struct CryptoPP::ModularArithmetic*, CryptoPP__ModularArithmeticIsMontgomeryRepresentation25_ptr);
        using CryptoPP__ModularArithmeticIsUnit27_ptr = bool (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*);
        using CryptoPP__ModularArithmeticIsUnit27_clbk = bool (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, CryptoPP__ModularArithmeticIsUnit27_ptr);
        using CryptoPP__ModularArithmeticMaxElementByteLength29_ptr = unsigned int (WINAPIV*)(struct CryptoPP::ModularArithmetic*);
        using CryptoPP__ModularArithmeticMaxElementByteLength29_clbk = unsigned int (WINAPIV*)(struct CryptoPP::ModularArithmetic*, CryptoPP__ModularArithmeticMaxElementByteLength29_ptr);
        using CryptoPP__ModularArithmeticctor_ModularArithmetic30_ptr = int64_t (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__ModularArithmeticctor_ModularArithmetic30_clbk = int64_t (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::BufferedTransformation*, CryptoPP__ModularArithmeticctor_ModularArithmetic30_ptr);
        using CryptoPP__ModularArithmeticctor_ModularArithmetic32_ptr = void (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*);
        using CryptoPP__ModularArithmeticctor_ModularArithmetic32_clbk = void (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, CryptoPP__ModularArithmeticctor_ModularArithmetic32_ptr);
        using CryptoPP__ModularArithmeticctor_ModularArithmetic34_ptr = void (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::ModularArithmetic*);
        using CryptoPP__ModularArithmeticctor_ModularArithmetic34_clbk = void (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::ModularArithmetic*, CryptoPP__ModularArithmeticctor_ModularArithmetic34_ptr);
        using CryptoPP__ModularArithmeticMultiplicativeIdentity36_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*);
        using CryptoPP__ModularArithmeticMultiplicativeIdentity36_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, CryptoPP__ModularArithmeticMultiplicativeIdentity36_ptr);
        using CryptoPP__ModularArithmeticMultiplicativeInverse38_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*);
        using CryptoPP__ModularArithmeticMultiplicativeInverse38_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, CryptoPP__ModularArithmeticMultiplicativeInverse38_ptr);
        using CryptoPP__ModularArithmeticMultiply40_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__ModularArithmeticMultiply40_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__ModularArithmeticMultiply40_ptr);
        using CryptoPP__ModularArithmeticReduce41_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__ModularArithmeticReduce41_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__ModularArithmeticReduce41_ptr);
        using CryptoPP__ModularArithmeticSimultaneousExponentiate42_ptr = void (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, unsigned int);
        using CryptoPP__ModularArithmeticSimultaneousExponentiate42_clbk = void (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, unsigned int, CryptoPP__ModularArithmeticSimultaneousExponentiate42_ptr);
        using CryptoPP__ModularArithmeticSquare44_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*);
        using CryptoPP__ModularArithmeticSquare44_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, CryptoPP__ModularArithmeticSquare44_ptr);
        using CryptoPP__ModularArithmeticSubtract45_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__ModularArithmeticSubtract45_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__ModularArithmeticSubtract45_ptr);
        using CryptoPP__ModularArithmeticdtor_ModularArithmetic50_ptr = void (WINAPIV*)(struct CryptoPP::ModularArithmetic*);
        using CryptoPP__ModularArithmeticdtor_ModularArithmetic50_clbk = void (WINAPIV*)(struct CryptoPP::ModularArithmetic*, CryptoPP__ModularArithmeticdtor_ModularArithmetic50_ptr);
        
        using CryptoPP__ECPAdd1_ptr = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*);
        using CryptoPP__ECPAdd1_clbk = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*, CryptoPP__ECPAdd1_ptr);
        using CryptoPP__ECPBERDecodePoint2_ptr = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::ECP*, short, struct CryptoPP::ECPPoint*);
        using CryptoPP__ECPBERDecodePoint2_clbk = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::ECP*, short, struct CryptoPP::ECPPoint*, CryptoPP__ECPBERDecodePoint2_ptr);
        using CryptoPP__ECPCascadeMultiply3_ptr = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*, struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*, struct CryptoPP::ECPPoint*);
        using CryptoPP__ECPCascadeMultiply3_clbk = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*, struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*, struct CryptoPP::ECPPoint*, CryptoPP__ECPCascadeMultiply3_ptr);
        using CryptoPP__ECPCascadeScalarMultiply4_ptr = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*, struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*);
        using CryptoPP__ECPCascadeScalarMultiply4_clbk = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*, struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*, CryptoPP__ECPCascadeScalarMultiply4_ptr);
        using CryptoPP__ECPDEREncode5_ptr = void (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__ECPDEREncode5_clbk = void (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::BufferedTransformation*, CryptoPP__ECPDEREncode5_ptr);
        using CryptoPP__ECPDEREncodePoint6_ptr = void (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::ECPPoint*, bool);
        using CryptoPP__ECPDEREncodePoint6_clbk = void (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::ECPPoint*, bool, CryptoPP__ECPDEREncodePoint6_ptr);
        using CryptoPP__ECPDecodePoint7_ptr = bool (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::ECPPoint*, struct CryptoPP::BufferedTransformation*, uint64_t);
        using CryptoPP__ECPDecodePoint7_clbk = bool (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::ECPPoint*, struct CryptoPP::BufferedTransformation*, uint64_t, CryptoPP__ECPDecodePoint7_ptr);
        using CryptoPP__ECPDecodePoint8_ptr = bool (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::ECPPoint*, uint8_t*, uint64_t);
        using CryptoPP__ECPDecodePoint8_clbk = bool (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::ECPPoint*, uint8_t*, uint64_t, CryptoPP__ECPDecodePoint8_ptr);
        using CryptoPP__ECPDouble9_ptr = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::ECPPoint*);
        using CryptoPP__ECPDouble9_clbk = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::ECPPoint*, CryptoPP__ECPDouble9_ptr);
        using CryptoPP__ECPctor_ECP10_ptr = int64_t (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__ECPctor_ECP10_clbk = int64_t (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::BufferedTransformation*, CryptoPP__ECPctor_ECP10_ptr);
        using CryptoPP__ECPctor_ECP11_ptr = int64_t (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::ECP*, bool);
        using CryptoPP__ECPctor_ECP11_clbk = int64_t (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::ECP*, bool, CryptoPP__ECPctor_ECP11_ptr);
        using CryptoPP__ECPctor_ECP12_ptr = int64_t (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__ECPctor_ECP12_clbk = int64_t (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__ECPctor_ECP12_ptr);
        using CryptoPP__ECPctor_ECP13_ptr = int64_t (WINAPIV*)(struct CryptoPP::ECP*);
        using CryptoPP__ECPctor_ECP13_clbk = int64_t (WINAPIV*)(struct CryptoPP::ECP*, CryptoPP__ECPctor_ECP13_ptr);
        using CryptoPP__ECPEncodePoint14_ptr = void (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::ECPPoint*, bool);
        using CryptoPP__ECPEncodePoint14_clbk = void (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::ECPPoint*, bool, CryptoPP__ECPEncodePoint14_ptr);
        using CryptoPP__ECPEncodePoint15_ptr = void (WINAPIV*)(struct CryptoPP::ECP*, uint8_t*, struct CryptoPP::ECPPoint*, bool);
        using CryptoPP__ECPEncodePoint15_clbk = void (WINAPIV*)(struct CryptoPP::ECP*, uint8_t*, struct CryptoPP::ECPPoint*, bool, CryptoPP__ECPEncodePoint15_ptr);
        using CryptoPP__ECPEncodedPointSize17_ptr = unsigned int (WINAPIV*)(struct CryptoPP::ECP*, bool);
        using CryptoPP__ECPEncodedPointSize17_clbk = unsigned int (WINAPIV*)(struct CryptoPP::ECP*, bool, CryptoPP__ECPEncodedPointSize17_ptr);
        using CryptoPP__ECPEqual18_ptr = bool (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*);
        using CryptoPP__ECPEqual18_clbk = bool (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*, CryptoPP__ECPEqual18_ptr);
        using CryptoPP__ECPFieldSize19_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ECP*, short);
        using CryptoPP__ECPFieldSize19_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ECP*, short, CryptoPP__ECPFieldSize19_ptr);
        using CryptoPP__ECPGetField21_ptr = struct CryptoPP::ModularArithmetic* (WINAPIV*)(struct CryptoPP::ECP*);
        using CryptoPP__ECPGetField21_clbk = struct CryptoPP::ModularArithmetic* (WINAPIV*)(struct CryptoPP::ECP*, CryptoPP__ECPGetField21_ptr);
        using CryptoPP__ECPIdentity22_ptr = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::ECP*);
        using CryptoPP__ECPIdentity22_clbk = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::ECP*, CryptoPP__ECPIdentity22_ptr);
        using CryptoPP__ECPInverse23_ptr = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::ECPPoint*);
        using CryptoPP__ECPInverse23_clbk = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::ECPPoint*, CryptoPP__ECPInverse23_ptr);
        using CryptoPP__ECPInversionIsFast24_ptr = bool (WINAPIV*)(struct CryptoPP::ECP*);
        using CryptoPP__ECPInversionIsFast24_clbk = bool (WINAPIV*)(struct CryptoPP::ECP*, CryptoPP__ECPInversionIsFast24_ptr);
        using CryptoPP__ECPScalarMultiply25_ptr = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::ECP*, short, struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*);
        using CryptoPP__ECPScalarMultiply25_clbk = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::ECP*, short, struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*, CryptoPP__ECPScalarMultiply25_ptr);
        using CryptoPP__ECPSimultaneousMultiply26_ptr = void (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*, unsigned int);
        using CryptoPP__ECPSimultaneousMultiply26_clbk = void (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*, unsigned int, CryptoPP__ECPSimultaneousMultiply26_ptr);
        using CryptoPP__ECPValidateParameters27_ptr = bool (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::RandomNumberGenerator*, unsigned int);
        using CryptoPP__ECPValidateParameters27_clbk = bool (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::RandomNumberGenerator*, unsigned int, CryptoPP__ECPValidateParameters27_ptr);
        using CryptoPP__ECPVerifyPoint28_ptr = bool (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::ECPPoint*);
        using CryptoPP__ECPVerifyPoint28_clbk = bool (WINAPIV*)(struct CryptoPP::ECP*, struct CryptoPP::ECPPoint*, CryptoPP__ECPVerifyPoint28_ptr);
        using CryptoPP__ECPdtor_ECP29_ptr = int64_t (WINAPIV*)(struct CryptoPP::ECP*);
        using CryptoPP__ECPdtor_ECP29_clbk = int64_t (WINAPIV*)(struct CryptoPP::ECP*, CryptoPP__ECPdtor_ECP29_ptr);
        
        using CryptoPP__member_ptrctor_member_ptr2_ptr = void (WINAPIV*)(struct CryptoPP::member_ptr<CryptoPP::ECP>*, struct CryptoPP::ECP*);
        using CryptoPP__member_ptrctor_member_ptr2_clbk = void (WINAPIV*)(struct CryptoPP::member_ptr<CryptoPP::ECP>*, struct CryptoPP::ECP*, CryptoPP__member_ptrctor_member_ptr2_ptr);
        using CryptoPP__member_ptrdtor_member_ptr8_ptr = void (WINAPIV*)(struct CryptoPP::member_ptr<CryptoPP::ECP>*);
        using CryptoPP__member_ptrdtor_member_ptr8_clbk = void (WINAPIV*)(struct CryptoPP::member_ptr<CryptoPP::ECP>*, CryptoPP__member_ptrdtor_member_ptr8_ptr);
        
        using CryptoPP__value_ptrctor_value_ptr4_ptr = void (WINAPIV*)(struct CryptoPP::value_ptr<CryptoPP::ECP>*, struct CryptoPP::ECP*);
        using CryptoPP__value_ptrctor_value_ptr4_clbk = void (WINAPIV*)(struct CryptoPP::value_ptr<CryptoPP::ECP>*, struct CryptoPP::ECP*, CryptoPP__value_ptrctor_value_ptr4_ptr);
        using CryptoPP__value_ptrdtor_value_ptr6_ptr = void (WINAPIV*)(struct CryptoPP::value_ptr<CryptoPP::ECP>*);
        using CryptoPP__value_ptrdtor_value_ptr6_clbk = void (WINAPIV*)(struct CryptoPP::value_ptr<CryptoPP::ECP>*, CryptoPP__value_ptrdtor_value_ptr6_ptr);
        
        using CryptoPP__EcPrecomputationBERDecodeElement2_ptr = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::EcPrecomputation<CryptoPP::ECP>*, struct CryptoPP::ECPPoint*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__EcPrecomputationBERDecodeElement2_clbk = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::EcPrecomputation<CryptoPP::ECP>*, struct CryptoPP::ECPPoint*, struct CryptoPP::BufferedTransformation*, CryptoPP__EcPrecomputationBERDecodeElement2_ptr);
        using CryptoPP__EcPrecomputationConvertIn4_ptr = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::EcPrecomputation<CryptoPP::ECP>*, struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*);
        using CryptoPP__EcPrecomputationConvertIn4_clbk = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::EcPrecomputation<CryptoPP::ECP>*, struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*, CryptoPP__EcPrecomputationConvertIn4_ptr);
        using CryptoPP__EcPrecomputationConvertOut6_ptr = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::EcPrecomputation<CryptoPP::ECP>*, struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*);
        using CryptoPP__EcPrecomputationConvertOut6_clbk = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::EcPrecomputation<CryptoPP::ECP>*, struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*, CryptoPP__EcPrecomputationConvertOut6_ptr);
        using CryptoPP__EcPrecomputationDEREncodeElement8_ptr = void (WINAPIV*)(struct CryptoPP::EcPrecomputation<CryptoPP::ECP>*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::ECPPoint*);
        using CryptoPP__EcPrecomputationDEREncodeElement8_clbk = void (WINAPIV*)(struct CryptoPP::EcPrecomputation<CryptoPP::ECP>*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::ECPPoint*, CryptoPP__EcPrecomputationDEREncodeElement8_ptr);
        using CryptoPP__EcPrecomputationctor_EcPrecomputation10_ptr = void (WINAPIV*)(struct CryptoPP::EcPrecomputation<CryptoPP::ECP>*);
        using CryptoPP__EcPrecomputationctor_EcPrecomputation10_clbk = void (WINAPIV*)(struct CryptoPP::EcPrecomputation<CryptoPP::ECP>*, CryptoPP__EcPrecomputationctor_EcPrecomputation10_ptr);
        using CryptoPP__EcPrecomputationGetCurve12_ptr = struct CryptoPP::ECP* (WINAPIV*)(struct CryptoPP::EcPrecomputation<CryptoPP::ECP>*);
        using CryptoPP__EcPrecomputationGetCurve12_clbk = struct CryptoPP::ECP* (WINAPIV*)(struct CryptoPP::EcPrecomputation<CryptoPP::ECP>*, CryptoPP__EcPrecomputationGetCurve12_ptr);
        using CryptoPP__EcPrecomputationGetGroup14_ptr = struct CryptoPP::AbstractGroup<CryptoPP::ECPPoint>* (WINAPIV*)(struct CryptoPP::EcPrecomputation<CryptoPP::ECP>*);
        using CryptoPP__EcPrecomputationGetGroup14_clbk = struct CryptoPP::AbstractGroup<CryptoPP::ECPPoint>* (WINAPIV*)(struct CryptoPP::EcPrecomputation<CryptoPP::ECP>*, CryptoPP__EcPrecomputationGetGroup14_ptr);
        using CryptoPP__EcPrecomputationNeedConversions16_ptr = bool (WINAPIV*)(struct CryptoPP::EcPrecomputation<CryptoPP::ECP>*);
        using CryptoPP__EcPrecomputationNeedConversions16_clbk = bool (WINAPIV*)(struct CryptoPP::EcPrecomputation<CryptoPP::ECP>*, CryptoPP__EcPrecomputationNeedConversions16_ptr);
        using CryptoPP__EcPrecomputationdtor_EcPrecomputation20_ptr = void (WINAPIV*)(struct CryptoPP::EcPrecomputation<CryptoPP::ECP>*);
        using CryptoPP__EcPrecomputationdtor_EcPrecomputation20_clbk = void (WINAPIV*)(struct CryptoPP::EcPrecomputation<CryptoPP::ECP>*, CryptoPP__EcPrecomputationdtor_EcPrecomputation20_ptr);
        
        using CryptoPP__DL_FixedBasePrecomputationctor_DL_FixedBasePrecomputation2_ptr = void (WINAPIV*)(struct CryptoPP::DL_FixedBasePrecomputation<CryptoPP::ECPPoint>*);
        using CryptoPP__DL_FixedBasePrecomputationctor_DL_FixedBasePrecomputation2_clbk = void (WINAPIV*)(struct CryptoPP::DL_FixedBasePrecomputation<CryptoPP::ECPPoint>*, CryptoPP__DL_FixedBasePrecomputationctor_DL_FixedBasePrecomputation2_ptr);
        
        using CryptoPP__DL_FixedBasePrecomputationImplctor_DL_FixedBasePrecomputationImpl2_ptr = void (WINAPIV*)(struct CryptoPP::DL_FixedBasePrecomputationImpl<CryptoPP::ECPPoint>*);
        using CryptoPP__DL_FixedBasePrecomputationImplctor_DL_FixedBasePrecomputationImpl2_clbk = void (WINAPIV*)(struct CryptoPP::DL_FixedBasePrecomputationImpl<CryptoPP::ECPPoint>*, CryptoPP__DL_FixedBasePrecomputationImplctor_DL_FixedBasePrecomputationImpl2_ptr);
        using CryptoPP__DL_FixedBasePrecomputationImplGetBase4_ptr = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::DL_FixedBasePrecomputationImpl<CryptoPP::ECPPoint>*, struct CryptoPP::DL_GroupPrecomputation<CryptoPP::ECPPoint>*);
        using CryptoPP__DL_FixedBasePrecomputationImplGetBase4_clbk = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::DL_FixedBasePrecomputationImpl<CryptoPP::ECPPoint>*, struct CryptoPP::DL_GroupPrecomputation<CryptoPP::ECPPoint>*, CryptoPP__DL_FixedBasePrecomputationImplGetBase4_ptr);
        using CryptoPP__DL_FixedBasePrecomputationImplIsInitialized6_ptr = bool (WINAPIV*)(struct CryptoPP::DL_FixedBasePrecomputationImpl<CryptoPP::ECPPoint>*);
        using CryptoPP__DL_FixedBasePrecomputationImplIsInitialized6_clbk = bool (WINAPIV*)(struct CryptoPP::DL_FixedBasePrecomputationImpl<CryptoPP::ECPPoint>*, CryptoPP__DL_FixedBasePrecomputationImplIsInitialized6_ptr);
        using CryptoPP__DL_FixedBasePrecomputationImpldtor_DL_FixedBasePrecomputationImpl10_ptr = void (WINAPIV*)(struct CryptoPP::DL_FixedBasePrecomputationImpl<CryptoPP::ECPPoint>*);
        using CryptoPP__DL_FixedBasePrecomputationImpldtor_DL_FixedBasePrecomputationImpl10_clbk = void (WINAPIV*)(struct CryptoPP::DL_FixedBasePrecomputationImpl<CryptoPP::ECPPoint>*, CryptoPP__DL_FixedBasePrecomputationImpldtor_DL_FixedBasePrecomputationImpl10_ptr);
        
        using CryptoPP__OIDBERDecode1_ptr = void (WINAPIV*)(struct CryptoPP::OID*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__OIDBERDecode1_clbk = void (WINAPIV*)(struct CryptoPP::OID*, struct CryptoPP::BufferedTransformation*, CryptoPP__OIDBERDecode1_ptr);
        using CryptoPP__OIDBERDecodeAndCheck2_ptr = void (WINAPIV*)(struct CryptoPP::OID*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__OIDBERDecodeAndCheck2_clbk = void (WINAPIV*)(struct CryptoPP::OID*, struct CryptoPP::BufferedTransformation*, CryptoPP__OIDBERDecodeAndCheck2_ptr);
        using CryptoPP__OIDDEREncode3_ptr = void (WINAPIV*)(struct CryptoPP::OID*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__OIDDEREncode3_clbk = void (WINAPIV*)(struct CryptoPP::OID*, struct CryptoPP::BufferedTransformation*, CryptoPP__OIDDEREncode3_ptr);
        using CryptoPP__OIDDecodeValue4_ptr = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, unsigned int*);
        using CryptoPP__OIDDecodeValue4_clbk = uint64_t (WINAPIV*)(struct CryptoPP::BufferedTransformation*, unsigned int*, CryptoPP__OIDDecodeValue4_ptr);
        using CryptoPP__OIDEncodeValue5_ptr = void (WINAPIV*)(struct CryptoPP::BufferedTransformation*, unsigned int);
        using CryptoPP__OIDEncodeValue5_clbk = void (WINAPIV*)(struct CryptoPP::BufferedTransformation*, unsigned int, CryptoPP__OIDEncodeValue5_ptr);
        using CryptoPP__OIDctor_OID6_ptr = int64_t (WINAPIV*)(struct CryptoPP::OID*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__OIDctor_OID6_clbk = int64_t (WINAPIV*)(struct CryptoPP::OID*, struct CryptoPP::BufferedTransformation*, CryptoPP__OIDctor_OID6_ptr);
        using CryptoPP__OIDctor_OID7_ptr = int64_t (WINAPIV*)(struct CryptoPP::OID*, struct CryptoPP::OID*);
        using CryptoPP__OIDctor_OID7_clbk = int64_t (WINAPIV*)(struct CryptoPP::OID*, struct CryptoPP::OID*, CryptoPP__OIDctor_OID7_ptr);
        using CryptoPP__OIDctor_OID8_ptr = int64_t (WINAPIV*)(struct CryptoPP::OID*, unsigned int);
        using CryptoPP__OIDctor_OID8_clbk = int64_t (WINAPIV*)(struct CryptoPP::OID*, unsigned int, CryptoPP__OIDctor_OID8_ptr);
        using CryptoPP__OIDctor_OID10_ptr = void (WINAPIV*)(struct CryptoPP::OID*);
        using CryptoPP__OIDctor_OID10_clbk = void (WINAPIV*)(struct CryptoPP::OID*, CryptoPP__OIDctor_OID10_ptr);
        using CryptoPP__OIDdtor_OID14_ptr = void (WINAPIV*)(struct CryptoPP::OID*);
        using CryptoPP__OIDdtor_OID14_clbk = void (WINAPIV*)(struct CryptoPP::OID*, CryptoPP__OIDdtor_OID14_ptr);
        
        using CryptoPP__DL_GroupParameters_ECAccessBasePrecomputation2_ptr = struct CryptoPP::DL_FixedBasePrecomputation<CryptoPP::ECPPoint>* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*);
        using CryptoPP__DL_GroupParameters_ECAccessBasePrecomputation2_clbk = struct CryptoPP::DL_FixedBasePrecomputation<CryptoPP::ECPPoint>* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*, CryptoPP__DL_GroupParameters_ECAccessBasePrecomputation2_ptr);
        using CryptoPP__DL_GroupParameters_ECCascadeExponentiate3_ptr = int64_t (WINAPIV*)(struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*);
        using CryptoPP__DL_GroupParameters_ECCascadeExponentiate3_clbk = int64_t (WINAPIV*)(struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*, CryptoPP__DL_GroupParameters_ECCascadeExponentiate3_ptr);
        using CryptoPP__DL_GroupParameters_ECctor_DL_GroupParameters_EC5_ptr = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*);
        using CryptoPP__DL_GroupParameters_ECctor_DL_GroupParameters_EC5_clbk = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*, CryptoPP__DL_GroupParameters_ECctor_DL_GroupParameters_EC5_ptr);
        using CryptoPP__DL_GroupParameters_ECDecodeElement7_ptr = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*, struct CryptoPP::ECPPoint*, char*, bool);
        using CryptoPP__DL_GroupParameters_ECDecodeElement7_clbk = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*, struct CryptoPP::ECPPoint*, char*, bool, CryptoPP__DL_GroupParameters_ECDecodeElement7_ptr);
        using CryptoPP__DL_GroupParameters_ECEncodeElement9_ptr = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*, bool, struct CryptoPP::ECPPoint*, char*);
        using CryptoPP__DL_GroupParameters_ECEncodeElement9_clbk = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*, bool, struct CryptoPP::ECPPoint*, char*, CryptoPP__DL_GroupParameters_ECEncodeElement9_ptr);
        using CryptoPP__DL_GroupParameters_ECFastSubgroupCheckAvailable11_ptr = bool (WINAPIV*)(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*);
        using CryptoPP__DL_GroupParameters_ECFastSubgroupCheckAvailable11_clbk = bool (WINAPIV*)(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*, CryptoPP__DL_GroupParameters_ECFastSubgroupCheckAvailable11_ptr);
        using CryptoPP__DL_GroupParameters_ECGetBasePrecomputation13_ptr = struct CryptoPP::DL_FixedBasePrecomputation<CryptoPP::ECPPoint>* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*);
        using CryptoPP__DL_GroupParameters_ECGetBasePrecomputation13_clbk = struct CryptoPP::DL_FixedBasePrecomputation<CryptoPP::ECPPoint>* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*, CryptoPP__DL_GroupParameters_ECGetBasePrecomputation13_ptr);
        using CryptoPP__DL_GroupParameters_ECGetCurve15_ptr = struct CryptoPP::ECP* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*);
        using CryptoPP__DL_GroupParameters_ECGetCurve15_clbk = struct CryptoPP::ECP* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*, CryptoPP__DL_GroupParameters_ECGetCurve15_ptr);
        using CryptoPP__DL_GroupParameters_ECGetEncodedElementSize17_ptr = unsigned int (WINAPIV*)(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*, bool);
        using CryptoPP__DL_GroupParameters_ECGetEncodedElementSize17_clbk = unsigned int (WINAPIV*)(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*, bool, CryptoPP__DL_GroupParameters_ECGetEncodedElementSize17_ptr);
        using CryptoPP__DL_GroupParameters_ECGetMaxExponent19_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*, struct CryptoPP::Integer*);
        using CryptoPP__DL_GroupParameters_ECGetMaxExponent19_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*, struct CryptoPP::Integer*, CryptoPP__DL_GroupParameters_ECGetMaxExponent19_ptr);
        using CryptoPP__DL_GroupParameters_ECGetSubgroupOrder21_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*);
        using CryptoPP__DL_GroupParameters_ECGetSubgroupOrder21_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*, CryptoPP__DL_GroupParameters_ECGetSubgroupOrder21_ptr);
        using CryptoPP__DL_GroupParameters_ECIsIdentity23_ptr = bool (WINAPIV*)(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*, struct CryptoPP::ECPPoint*);
        using CryptoPP__DL_GroupParameters_ECIsIdentity23_clbk = bool (WINAPIV*)(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*, struct CryptoPP::ECPPoint*, CryptoPP__DL_GroupParameters_ECIsIdentity23_ptr);
        using CryptoPP__DL_GroupParameters_ECdtor_DL_GroupParameters_EC32_ptr = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*);
        using CryptoPP__DL_GroupParameters_ECdtor_DL_GroupParameters_EC32_clbk = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>*, CryptoPP__DL_GroupParameters_ECdtor_DL_GroupParameters_EC32_ptr);
        
        using CryptoPP__DL_KeyImplAccessGroupParameters2_ptr = struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>* (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*);
        using CryptoPP__DL_KeyImplAccessGroupParameters2_clbk = struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>* (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*, CryptoPP__DL_KeyImplAccessGroupParameters2_ptr);
        using CryptoPP__DL_KeyImplBERDecodeAlgorithmParameters4_ptr = bool (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__DL_KeyImplBERDecodeAlgorithmParameters4_clbk = bool (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*, struct CryptoPP::BufferedTransformation*, CryptoPP__DL_KeyImplBERDecodeAlgorithmParameters4_ptr);
        using CryptoPP__DL_KeyImplDEREncodeAlgorithmParameters6_ptr = bool (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__DL_KeyImplDEREncodeAlgorithmParameters6_clbk = bool (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*, struct CryptoPP::BufferedTransformation*, CryptoPP__DL_KeyImplDEREncodeAlgorithmParameters6_ptr);
        using CryptoPP__DL_KeyImplctor_DL_KeyImpl8_ptr = void (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*);
        using CryptoPP__DL_KeyImplctor_DL_KeyImpl8_clbk = void (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*, CryptoPP__DL_KeyImplctor_DL_KeyImpl8_ptr);
        using CryptoPP__DL_KeyImplGetAlgorithmID10_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*, struct CryptoPP::OID*);
        using CryptoPP__DL_KeyImplGetAlgorithmID10_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*, struct CryptoPP::OID*, CryptoPP__DL_KeyImplGetAlgorithmID10_ptr);
        using CryptoPP__DL_KeyImplGetGroupParameters12_ptr = struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>* (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*);
        using CryptoPP__DL_KeyImplGetGroupParameters12_clbk = struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>* (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*, CryptoPP__DL_KeyImplGetGroupParameters12_ptr);
        using CryptoPP__DL_KeyImpldtor_DL_KeyImpl21_ptr = void (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*);
        using CryptoPP__DL_KeyImpldtor_DL_KeyImpl21_clbk = void (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::PKCS8PrivateKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*, CryptoPP__DL_KeyImpldtor_DL_KeyImpl21_ptr);
        
        using CryptoPP__DL_PrivateKey_ECctor_DL_PrivateKey_EC2_ptr = void (WINAPIV*)(struct CryptoPP::DL_PrivateKey_EC<CryptoPP::ECP>*);
        using CryptoPP__DL_PrivateKey_ECctor_DL_PrivateKey_EC2_clbk = void (WINAPIV*)(struct CryptoPP::DL_PrivateKey_EC<CryptoPP::ECP>*, CryptoPP__DL_PrivateKey_ECctor_DL_PrivateKey_EC2_ptr);
        using CryptoPP__DL_PrivateKey_ECdtor_DL_PrivateKey_EC9_ptr = void (WINAPIV*)(struct CryptoPP::DL_PrivateKey_EC<CryptoPP::ECP>*);
        using CryptoPP__DL_PrivateKey_ECdtor_DL_PrivateKey_EC9_clbk = void (WINAPIV*)(struct CryptoPP::DL_PrivateKey_EC<CryptoPP::ECP>*, CryptoPP__DL_PrivateKey_ECdtor_DL_PrivateKey_EC9_ptr);
        
        using CryptoPP__DL_PublicKeyAssignFrom2_ptr = void (WINAPIV*)(struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__DL_PublicKeyAssignFrom2_clbk = void (WINAPIV*)(struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*, struct CryptoPP::NameValuePairs*, CryptoPP__DL_PublicKeyAssignFrom2_ptr);
        using CryptoPP__DL_PublicKeyCascadeExponentiateBaseAndPublicElement4_ptr = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*, struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__DL_PublicKeyCascadeExponentiateBaseAndPublicElement4_clbk = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*, struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__DL_PublicKeyCascadeExponentiateBaseAndPublicElement4_ptr);
        using CryptoPP__DL_PublicKeyctor_DL_PublicKey6_ptr = void (WINAPIV*)(struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*);
        using CryptoPP__DL_PublicKeyctor_DL_PublicKey6_clbk = void (WINAPIV*)(struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*, CryptoPP__DL_PublicKeyctor_DL_PublicKey6_ptr);
        using CryptoPP__DL_PublicKeyExponentiatePublicElement8_ptr = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*, struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*);
        using CryptoPP__DL_PublicKeyExponentiatePublicElement8_clbk = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*, struct CryptoPP::ECPPoint*, struct CryptoPP::Integer*, CryptoPP__DL_PublicKeyExponentiatePublicElement8_ptr);
        using CryptoPP__DL_PublicKeyGetPublicElement10_ptr = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*);
        using CryptoPP__DL_PublicKeyGetPublicElement10_clbk = struct CryptoPP::ECPPoint* (WINAPIV*)(struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*, CryptoPP__DL_PublicKeyGetPublicElement10_ptr);
        using CryptoPP__DL_PublicKeyGetVoidValue12_ptr = bool (WINAPIV*)(struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*, char*, struct type_info*, void*);
        using CryptoPP__DL_PublicKeyGetVoidValue12_clbk = bool (WINAPIV*)(struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*, char*, struct type_info*, void*, CryptoPP__DL_PublicKeyGetVoidValue12_ptr);
        using CryptoPP__DL_PublicKeySetPublicElement14_ptr = void (WINAPIV*)(struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*, struct CryptoPP::ECPPoint*);
        using CryptoPP__DL_PublicKeySetPublicElement14_clbk = void (WINAPIV*)(struct CryptoPP::DL_PublicKey<CryptoPP::ECPPoint>*, struct CryptoPP::ECPPoint*, CryptoPP__DL_PublicKeySetPublicElement14_ptr);
        
        using CryptoPP__PublicKeyctor_PublicKey2_ptr = void (WINAPIV*)(struct CryptoPP::PublicKey*);
        using CryptoPP__PublicKeyctor_PublicKey2_clbk = void (WINAPIV*)(struct CryptoPP::PublicKey*, CryptoPP__PublicKeyctor_PublicKey2_ptr);
        using CryptoPP__PublicKeydtor_PublicKey6_ptr = void (WINAPIV*)(struct CryptoPP::PublicKey*);
        using CryptoPP__PublicKeydtor_PublicKey6_clbk = void (WINAPIV*)(struct CryptoPP::PublicKey*, CryptoPP__PublicKeydtor_PublicKey6_ptr);
        
        using CryptoPP__ASN1CryptoMaterialctor_ASN1CryptoMaterial2_ptr = void (WINAPIV*)(struct CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>*);
        using CryptoPP__ASN1CryptoMaterialctor_ASN1CryptoMaterial2_clbk = void (WINAPIV*)(struct CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>*, CryptoPP__ASN1CryptoMaterialctor_ASN1CryptoMaterial2_ptr);
        using CryptoPP__ASN1CryptoMaterialLoad4_ptr = void (WINAPIV*)(struct CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__ASN1CryptoMaterialLoad4_clbk = void (WINAPIV*)(struct CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>*, struct CryptoPP::BufferedTransformation*, CryptoPP__ASN1CryptoMaterialLoad4_ptr);
        using CryptoPP__ASN1CryptoMaterialSave6_ptr = void (WINAPIV*)(struct CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__ASN1CryptoMaterialSave6_clbk = void (WINAPIV*)(struct CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>*, struct CryptoPP::BufferedTransformation*, CryptoPP__ASN1CryptoMaterialSave6_ptr);
        using CryptoPP__ASN1CryptoMaterialdtor_ASN1CryptoMaterial10_ptr = void (WINAPIV*)(struct CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>*);
        using CryptoPP__ASN1CryptoMaterialdtor_ASN1CryptoMaterial10_clbk = void (WINAPIV*)(struct CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>*, CryptoPP__ASN1CryptoMaterialdtor_ASN1CryptoMaterial10_ptr);
        
        using CryptoPP__X509PublicKeyBERDecode1_ptr = void (WINAPIV*)(struct CryptoPP::X509PublicKey*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__X509PublicKeyBERDecode1_clbk = void (WINAPIV*)(struct CryptoPP::X509PublicKey*, struct CryptoPP::BufferedTransformation*, CryptoPP__X509PublicKeyBERDecode1_ptr);
        using CryptoPP__X509PublicKeyBERDecodeAlgorithmParameters3_ptr = bool (WINAPIV*)(struct CryptoPP::X509PublicKey*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__X509PublicKeyBERDecodeAlgorithmParameters3_clbk = bool (WINAPIV*)(struct CryptoPP::X509PublicKey*, struct CryptoPP::BufferedTransformation*, CryptoPP__X509PublicKeyBERDecodeAlgorithmParameters3_ptr);
        using CryptoPP__X509PublicKeyDEREncode4_ptr = void (WINAPIV*)(struct CryptoPP::X509PublicKey*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__X509PublicKeyDEREncode4_clbk = void (WINAPIV*)(struct CryptoPP::X509PublicKey*, struct CryptoPP::BufferedTransformation*, CryptoPP__X509PublicKeyDEREncode4_ptr);
        using CryptoPP__X509PublicKeyDEREncodeAlgorithmParameters6_ptr = bool (WINAPIV*)(struct CryptoPP::X509PublicKey*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__X509PublicKeyDEREncodeAlgorithmParameters6_clbk = bool (WINAPIV*)(struct CryptoPP::X509PublicKey*, struct CryptoPP::BufferedTransformation*, CryptoPP__X509PublicKeyDEREncodeAlgorithmParameters6_ptr);
        using CryptoPP__X509PublicKeyctor_X509PublicKey8_ptr = void (WINAPIV*)(struct CryptoPP::X509PublicKey*);
        using CryptoPP__X509PublicKeyctor_X509PublicKey8_clbk = void (WINAPIV*)(struct CryptoPP::X509PublicKey*, CryptoPP__X509PublicKeyctor_X509PublicKey8_ptr);
        using CryptoPP__X509PublicKeydtor_X509PublicKey17_ptr = void (WINAPIV*)(struct CryptoPP::X509PublicKey*);
        using CryptoPP__X509PublicKeydtor_X509PublicKey17_clbk = void (WINAPIV*)(struct CryptoPP::X509PublicKey*, CryptoPP__X509PublicKeydtor_X509PublicKey17_ptr);
        
        using CryptoPP__DL_KeyImplAccessGroupParameters2_ptr = struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>* (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*);
        using CryptoPP__DL_KeyImplAccessGroupParameters2_clbk = struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>* (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*, CryptoPP__DL_KeyImplAccessGroupParameters2_ptr);
        using CryptoPP__DL_KeyImplBERDecodeAlgorithmParameters4_ptr = bool (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__DL_KeyImplBERDecodeAlgorithmParameters4_clbk = bool (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*, struct CryptoPP::BufferedTransformation*, CryptoPP__DL_KeyImplBERDecodeAlgorithmParameters4_ptr);
        using CryptoPP__DL_KeyImplDEREncodeAlgorithmParameters6_ptr = bool (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__DL_KeyImplDEREncodeAlgorithmParameters6_clbk = bool (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*, struct CryptoPP::BufferedTransformation*, CryptoPP__DL_KeyImplDEREncodeAlgorithmParameters6_ptr);
        using CryptoPP__DL_KeyImplctor_DL_KeyImpl8_ptr = void (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*);
        using CryptoPP__DL_KeyImplctor_DL_KeyImpl8_clbk = void (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*, CryptoPP__DL_KeyImplctor_DL_KeyImpl8_ptr);
        using CryptoPP__DL_KeyImplGetAlgorithmID10_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*, struct CryptoPP::OID*);
        using CryptoPP__DL_KeyImplGetAlgorithmID10_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*, struct CryptoPP::OID*, CryptoPP__DL_KeyImplGetAlgorithmID10_ptr);
        using CryptoPP__DL_KeyImplGetGroupParameters12_ptr = struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>* (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*);
        using CryptoPP__DL_KeyImplGetGroupParameters12_clbk = struct CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>* (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*, CryptoPP__DL_KeyImplGetGroupParameters12_ptr);
        using CryptoPP__DL_KeyImpldtor_DL_KeyImpl21_ptr = void (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*);
        using CryptoPP__DL_KeyImpldtor_DL_KeyImpl21_clbk = void (WINAPIV*)(struct CryptoPP::DL_KeyImpl<CryptoPP::X509PublicKey,CryptoPP::DL_GroupParameters_EC<CryptoPP::ECP>,CryptoPP::OID>*, CryptoPP__DL_KeyImpldtor_DL_KeyImpl21_ptr);
        
        using CryptoPP__DL_PublicKey_ECctor_DL_PublicKey_EC2_ptr = void (WINAPIV*)(struct CryptoPP::DL_PublicKey_EC<CryptoPP::ECP>*);
        using CryptoPP__DL_PublicKey_ECctor_DL_PublicKey_EC2_clbk = void (WINAPIV*)(struct CryptoPP::DL_PublicKey_EC<CryptoPP::ECP>*, CryptoPP__DL_PublicKey_ECctor_DL_PublicKey_EC2_ptr);
        using CryptoPP__DL_PublicKey_ECdtor_DL_PublicKey_EC9_ptr = void (WINAPIV*)(struct CryptoPP::DL_PublicKey_EC<CryptoPP::ECP>*);
        using CryptoPP__DL_PublicKey_ECdtor_DL_PublicKey_EC9_clbk = void (WINAPIV*)(struct CryptoPP::DL_PublicKey_EC<CryptoPP::ECP>*, CryptoPP__DL_PublicKey_ECdtor_DL_PublicKey_EC9_ptr);
        
        using CryptoPP__VariableKeyLengthStaticGetValidKeyLength2_ptr = uint64_t (WINAPIV*)(uint64_t);
        using CryptoPP__VariableKeyLengthStaticGetValidKeyLength2_clbk = uint64_t (WINAPIV*)(uint64_t, CryptoPP__VariableKeyLengthStaticGetValidKeyLength2_ptr);
        
        using CryptoPP__Rijndael_InfoStaticAlgorithmName2_ptr = char* (WINAPIV*)();
        using CryptoPP__Rijndael_InfoStaticAlgorithmName2_clbk = char* (WINAPIV*)(CryptoPP__Rijndael_InfoStaticAlgorithmName2_ptr);
        
        using CryptoPP__TwoBasesctor_TwoBases2_ptr = void (WINAPIV*)(struct CryptoPP::TwoBases<CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>,CryptoPP::Rijndael_Info>*, struct CryptoPP::TwoBases<CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>,CryptoPP::Rijndael_Info>*);
        using CryptoPP__TwoBasesctor_TwoBases2_clbk = void (WINAPIV*)(struct CryptoPP::TwoBases<CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>,CryptoPP::Rijndael_Info>*, struct CryptoPP::TwoBases<CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>,CryptoPP::Rijndael_Info>*, CryptoPP__TwoBasesctor_TwoBases2_ptr);
        using CryptoPP__TwoBasesctor_TwoBases4_ptr = void (WINAPIV*)(struct CryptoPP::TwoBases<CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>,CryptoPP::Rijndael_Info>*);
        using CryptoPP__TwoBasesctor_TwoBases4_clbk = void (WINAPIV*)(struct CryptoPP::TwoBases<CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>,CryptoPP::Rijndael_Info>*, CryptoPP__TwoBasesctor_TwoBases4_ptr);
        using CryptoPP__TwoBasesdtor_TwoBases6_ptr = void (WINAPIV*)(struct CryptoPP::TwoBases<CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>,CryptoPP::Rijndael_Info>*);
        using CryptoPP__TwoBasesdtor_TwoBases6_clbk = void (WINAPIV*)(struct CryptoPP::TwoBases<CryptoPP::SimpleKeyedTransformation<CryptoPP::BlockTransformation>,CryptoPP::Rijndael_Info>*, CryptoPP__TwoBasesdtor_TwoBases6_ptr);
        
        using CryptoPP__ClonableImplctor_ClonableImpl2_ptr = void (WINAPIV*)(struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::Rijndael::Dec>*, struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::Rijndael::Dec>*);
        using CryptoPP__ClonableImplctor_ClonableImpl2_clbk = void (WINAPIV*)(struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::Rijndael::Dec>*, struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::Rijndael::Dec>*, CryptoPP__ClonableImplctor_ClonableImpl2_ptr);
        using CryptoPP__ClonableImplctor_ClonableImpl4_ptr = void (WINAPIV*)(struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::Rijndael::Dec>*);
        using CryptoPP__ClonableImplctor_ClonableImpl4_clbk = void (WINAPIV*)(struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::Rijndael::Dec>*, CryptoPP__ClonableImplctor_ClonableImpl4_ptr);
        using CryptoPP__ClonableImplClone6_ptr = struct CryptoPP::Clonable* (WINAPIV*)(struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::Rijndael::Dec>*);
        using CryptoPP__ClonableImplClone6_clbk = struct CryptoPP::Clonable* (WINAPIV*)(struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::Rijndael::Dec>*, CryptoPP__ClonableImplClone6_ptr);
        using CryptoPP__ClonableImpldtor_ClonableImpl8_ptr = void (WINAPIV*)(struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::Rijndael::Dec>*);
        using CryptoPP__ClonableImpldtor_ClonableImpl8_clbk = void (WINAPIV*)(struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::Rijndael::Dec>*, CryptoPP__ClonableImpldtor_ClonableImpl8_ptr);
        
        using CryptoPP__BlockCipherFinalctor_BlockCipherFinal2_ptr = void (WINAPIV*)(struct CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>*, struct CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>*);
        using CryptoPP__BlockCipherFinalctor_BlockCipherFinal2_clbk = void (WINAPIV*)(struct CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>*, struct CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>*, CryptoPP__BlockCipherFinalctor_BlockCipherFinal2_ptr);
        using CryptoPP__BlockCipherFinalctor_BlockCipherFinal4_ptr = void (WINAPIV*)(struct CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>*);
        using CryptoPP__BlockCipherFinalctor_BlockCipherFinal4_clbk = void (WINAPIV*)(struct CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>*, CryptoPP__BlockCipherFinalctor_BlockCipherFinal4_ptr);
        using CryptoPP__BlockCipherFinalIsForwardTransformation6_ptr = bool (WINAPIV*)(struct CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>*);
        using CryptoPP__BlockCipherFinalIsForwardTransformation6_clbk = bool (WINAPIV*)(struct CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>*, CryptoPP__BlockCipherFinalIsForwardTransformation6_ptr);
        using CryptoPP__BlockCipherFinaldtor_BlockCipherFinal11_ptr = void (WINAPIV*)(struct CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>*);
        using CryptoPP__BlockCipherFinaldtor_BlockCipherFinal11_clbk = void (WINAPIV*)(struct CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>*, CryptoPP__BlockCipherFinaldtor_BlockCipherFinal11_ptr);
        
        using CryptoPP__StreamTransformationGetOptimalBlockSizeUsed2_ptr = unsigned int (WINAPIV*)(struct CryptoPP::StreamTransformation*);
        using CryptoPP__StreamTransformationGetOptimalBlockSizeUsed2_clbk = unsigned int (WINAPIV*)(struct CryptoPP::StreamTransformation*, CryptoPP__StreamTransformationGetOptimalBlockSizeUsed2_ptr);
        using CryptoPP__StreamTransformationMandatoryBlockSize3_ptr = unsigned int (WINAPIV*)(struct CryptoPP::StreamTransformation*);
        using CryptoPP__StreamTransformationMandatoryBlockSize3_clbk = unsigned int (WINAPIV*)(struct CryptoPP::StreamTransformation*, CryptoPP__StreamTransformationMandatoryBlockSize3_ptr);
        using CryptoPP__StreamTransformationMinLastBlockSize4_ptr = unsigned int (WINAPIV*)(struct CryptoPP::StreamTransformation*);
        using CryptoPP__StreamTransformationMinLastBlockSize4_clbk = unsigned int (WINAPIV*)(struct CryptoPP::StreamTransformation*, CryptoPP__StreamTransformationMinLastBlockSize4_ptr);
        using CryptoPP__StreamTransformationOptimalBlockSize6_ptr = unsigned int (WINAPIV*)(struct CryptoPP::StreamTransformation*);
        using CryptoPP__StreamTransformationOptimalBlockSize6_clbk = unsigned int (WINAPIV*)(struct CryptoPP::StreamTransformation*, CryptoPP__StreamTransformationOptimalBlockSize6_ptr);
        using CryptoPP__StreamTransformationProcessLastBlock7_ptr = void (WINAPIV*)(struct CryptoPP::StreamTransformation*, uint8_t*, uint8_t*, uint64_t);
        using CryptoPP__StreamTransformationProcessLastBlock7_clbk = void (WINAPIV*)(struct CryptoPP::StreamTransformation*, uint8_t*, uint8_t*, uint64_t, CryptoPP__StreamTransformationProcessLastBlock7_ptr);
        using CryptoPP__StreamTransformationProcessString8_ptr = void (WINAPIV*)(struct CryptoPP::StreamTransformation*, uint8_t*, uint8_t*, uint64_t);
        using CryptoPP__StreamTransformationProcessString8_clbk = void (WINAPIV*)(struct CryptoPP::StreamTransformation*, uint8_t*, uint8_t*, uint64_t, CryptoPP__StreamTransformationProcessString8_ptr);
        using CryptoPP__StreamTransformationProcessString9_ptr = void (WINAPIV*)(struct CryptoPP::StreamTransformation*, uint8_t*, uint64_t);
        using CryptoPP__StreamTransformationProcessString9_clbk = void (WINAPIV*)(struct CryptoPP::StreamTransformation*, uint8_t*, uint64_t, CryptoPP__StreamTransformationProcessString9_ptr);
        using CryptoPP__StreamTransformationSeek11_ptr = void (WINAPIV*)(struct CryptoPP::StreamTransformation*, uint64_t);
        using CryptoPP__StreamTransformationSeek11_clbk = void (WINAPIV*)(struct CryptoPP::StreamTransformation*, uint64_t, CryptoPP__StreamTransformationSeek11_ptr);
        using CryptoPP__StreamTransformationctor_StreamTransformation13_ptr = void (WINAPIV*)(struct CryptoPP::StreamTransformation*);
        using CryptoPP__StreamTransformationctor_StreamTransformation13_clbk = void (WINAPIV*)(struct CryptoPP::StreamTransformation*, CryptoPP__StreamTransformationctor_StreamTransformation13_ptr);
        using CryptoPP__StreamTransformationdtor_StreamTransformation15_ptr = void (WINAPIV*)(struct CryptoPP::StreamTransformation*);
        using CryptoPP__StreamTransformationdtor_StreamTransformation15_clbk = void (WINAPIV*)(struct CryptoPP::StreamTransformation*, CryptoPP__StreamTransformationdtor_StreamTransformation15_ptr);
        
        using CryptoPP__SimpleKeyedTransformationGetAlgorithm2_ptr = struct CryptoPP::Algorithm* (WINAPIV*)(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::StreamTransformation>*);
        using CryptoPP__SimpleKeyedTransformationGetAlgorithm2_clbk = struct CryptoPP::Algorithm* (WINAPIV*)(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::StreamTransformation>*, CryptoPP__SimpleKeyedTransformationGetAlgorithm2_ptr);
        using CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_ptr = void (WINAPIV*)(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::StreamTransformation>*);
        using CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_clbk = void (WINAPIV*)(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::StreamTransformation>*, CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_ptr);
        using CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation6_ptr = void (WINAPIV*)(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::StreamTransformation>*);
        using CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation6_clbk = void (WINAPIV*)(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::StreamTransformation>*, CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation6_ptr);
        
        using CryptoPP__CipherModeBaseBlockSize2_ptr = unsigned int (WINAPIV*)(struct CryptoPP::CipherModeBase*);
        using CryptoPP__CipherModeBaseBlockSize2_clbk = unsigned int (WINAPIV*)(struct CryptoPP::CipherModeBase*, CryptoPP__CipherModeBaseBlockSize2_ptr);
        using CryptoPP__CipherModeBasector_CipherModeBase4_ptr = void (WINAPIV*)(struct CryptoPP::CipherModeBase*);
        using CryptoPP__CipherModeBasector_CipherModeBase4_clbk = void (WINAPIV*)(struct CryptoPP::CipherModeBase*, CryptoPP__CipherModeBasector_CipherModeBase4_ptr);
        using CryptoPP__CipherModeBaseDefaultKeyLength6_ptr = uint64_t (WINAPIV*)(struct CryptoPP::CipherModeBase*);
        using CryptoPP__CipherModeBaseDefaultKeyLength6_clbk = uint64_t (WINAPIV*)(struct CryptoPP::CipherModeBase*, CryptoPP__CipherModeBaseDefaultKeyLength6_ptr);
        using CryptoPP__CipherModeBaseGetValidKeyLength8_ptr = uint64_t (WINAPIV*)(struct CryptoPP::CipherModeBase*, uint64_t);
        using CryptoPP__CipherModeBaseGetValidKeyLength8_clbk = uint64_t (WINAPIV*)(struct CryptoPP::CipherModeBase*, uint64_t, CryptoPP__CipherModeBaseGetValidKeyLength8_ptr);
        using CryptoPP__CipherModeBaseIVSize10_ptr = unsigned int (WINAPIV*)(struct CryptoPP::CipherModeBase*);
        using CryptoPP__CipherModeBaseIVSize10_clbk = unsigned int (WINAPIV*)(struct CryptoPP::CipherModeBase*, CryptoPP__CipherModeBaseIVSize10_ptr);
        using CryptoPP__CipherModeBaseIsValidKeyLength12_ptr = bool (WINAPIV*)(struct CryptoPP::CipherModeBase*, uint64_t);
        using CryptoPP__CipherModeBaseIsValidKeyLength12_clbk = bool (WINAPIV*)(struct CryptoPP::CipherModeBase*, uint64_t, CryptoPP__CipherModeBaseIsValidKeyLength12_ptr);
        using CryptoPP__CipherModeBaseMaxKeyLength14_ptr = uint64_t (WINAPIV*)(struct CryptoPP::CipherModeBase*);
        using CryptoPP__CipherModeBaseMaxKeyLength14_clbk = uint64_t (WINAPIV*)(struct CryptoPP::CipherModeBase*, CryptoPP__CipherModeBaseMaxKeyLength14_ptr);
        using CryptoPP__CipherModeBaseMinKeyLength16_ptr = uint64_t (WINAPIV*)(struct CryptoPP::CipherModeBase*);
        using CryptoPP__CipherModeBaseMinKeyLength16_clbk = uint64_t (WINAPIV*)(struct CryptoPP::CipherModeBase*, CryptoPP__CipherModeBaseMinKeyLength16_ptr);
        using CryptoPP__CipherModeBaseOptimalDataAlignment18_ptr = unsigned int (WINAPIV*)(struct CryptoPP::CipherModeBase*);
        using CryptoPP__CipherModeBaseOptimalDataAlignment18_clbk = unsigned int (WINAPIV*)(struct CryptoPP::CipherModeBase*, CryptoPP__CipherModeBaseOptimalDataAlignment18_ptr);
        using CryptoPP__CipherModeBaseResizeBuffers20_ptr = void (WINAPIV*)(struct CryptoPP::CipherModeBase*);
        using CryptoPP__CipherModeBaseResizeBuffers20_clbk = void (WINAPIV*)(struct CryptoPP::CipherModeBase*, CryptoPP__CipherModeBaseResizeBuffers20_ptr);
        using CryptoPP__CipherModeBaseSetFeedbackSize22_ptr = void (WINAPIV*)(struct CryptoPP::CipherModeBase*, unsigned int);
        using CryptoPP__CipherModeBaseSetFeedbackSize22_clbk = void (WINAPIV*)(struct CryptoPP::CipherModeBase*, unsigned int, CryptoPP__CipherModeBaseSetFeedbackSize22_ptr);
        using CryptoPP__CipherModeBasedtor_CipherModeBase24_ptr = void (WINAPIV*)(struct CryptoPP::CipherModeBase*);
        using CryptoPP__CipherModeBasedtor_CipherModeBase24_clbk = void (WINAPIV*)(struct CryptoPP::CipherModeBase*, CryptoPP__CipherModeBasedtor_CipherModeBase24_ptr);
        
        using CryptoPP__BlockOrientedCipherModeBasector_BlockOrientedCipherModeBase2_ptr = void (WINAPIV*)(struct CryptoPP::BlockOrientedCipherModeBase*);
        using CryptoPP__BlockOrientedCipherModeBasector_BlockOrientedCipherModeBase2_clbk = void (WINAPIV*)(struct CryptoPP::BlockOrientedCipherModeBase*, CryptoPP__BlockOrientedCipherModeBasector_BlockOrientedCipherModeBase2_ptr);
        using CryptoPP__BlockOrientedCipherModeBaseIsForwardTransformation4_ptr = bool (WINAPIV*)(struct CryptoPP::BlockOrientedCipherModeBase*);
        using CryptoPP__BlockOrientedCipherModeBaseIsForwardTransformation4_clbk = bool (WINAPIV*)(struct CryptoPP::BlockOrientedCipherModeBase*, CryptoPP__BlockOrientedCipherModeBaseIsForwardTransformation4_ptr);
        using CryptoPP__BlockOrientedCipherModeBaseIsRandomAccess6_ptr = bool (WINAPIV*)(struct CryptoPP::BlockOrientedCipherModeBase*);
        using CryptoPP__BlockOrientedCipherModeBaseIsRandomAccess6_clbk = bool (WINAPIV*)(struct CryptoPP::BlockOrientedCipherModeBase*, CryptoPP__BlockOrientedCipherModeBaseIsRandomAccess6_ptr);
        using CryptoPP__BlockOrientedCipherModeBaseIsSelfInverting8_ptr = bool (WINAPIV*)(struct CryptoPP::BlockOrientedCipherModeBase*);
        using CryptoPP__BlockOrientedCipherModeBaseIsSelfInverting8_clbk = bool (WINAPIV*)(struct CryptoPP::BlockOrientedCipherModeBase*, CryptoPP__BlockOrientedCipherModeBaseIsSelfInverting8_ptr);
        using CryptoPP__BlockOrientedCipherModeBaseMandatoryBlockSize10_ptr = unsigned int (WINAPIV*)(struct CryptoPP::BlockOrientedCipherModeBase*);
        using CryptoPP__BlockOrientedCipherModeBaseMandatoryBlockSize10_clbk = unsigned int (WINAPIV*)(struct CryptoPP::BlockOrientedCipherModeBase*, CryptoPP__BlockOrientedCipherModeBaseMandatoryBlockSize10_ptr);
        using CryptoPP__BlockOrientedCipherModeBaseProcessData11_ptr = void (WINAPIV*)(struct CryptoPP::BlockOrientedCipherModeBase*, uint8_t*, uint8_t*, uint64_t);
        using CryptoPP__BlockOrientedCipherModeBaseProcessData11_clbk = void (WINAPIV*)(struct CryptoPP::BlockOrientedCipherModeBase*, uint8_t*, uint8_t*, uint64_t, CryptoPP__BlockOrientedCipherModeBaseProcessData11_ptr);
        using CryptoPP__BlockOrientedCipherModeBaseRequireAlignedInput12_ptr = bool (WINAPIV*)(struct CryptoPP::BlockOrientedCipherModeBase*);
        using CryptoPP__BlockOrientedCipherModeBaseRequireAlignedInput12_clbk = bool (WINAPIV*)(struct CryptoPP::BlockOrientedCipherModeBase*, CryptoPP__BlockOrientedCipherModeBaseRequireAlignedInput12_ptr);
        using CryptoPP__BlockOrientedCipherModeBaseResizeBuffers14_ptr = void (WINAPIV*)(struct CryptoPP::BlockOrientedCipherModeBase*);
        using CryptoPP__BlockOrientedCipherModeBaseResizeBuffers14_clbk = void (WINAPIV*)(struct CryptoPP::BlockOrientedCipherModeBase*, CryptoPP__BlockOrientedCipherModeBaseResizeBuffers14_ptr);
        using CryptoPP__BlockOrientedCipherModeBaseResynchronize16_ptr = void (WINAPIV*)(struct CryptoPP::BlockOrientedCipherModeBase*, char*);
        using CryptoPP__BlockOrientedCipherModeBaseResynchronize16_clbk = void (WINAPIV*)(struct CryptoPP::BlockOrientedCipherModeBase*, char*, CryptoPP__BlockOrientedCipherModeBaseResynchronize16_ptr);
        using CryptoPP__BlockOrientedCipherModeBaseUncheckedSetKey17_ptr = void (WINAPIV*)(struct CryptoPP::BlockOrientedCipherModeBase*, uint8_t*, unsigned int, struct CryptoPP::NameValuePairs*);
        using CryptoPP__BlockOrientedCipherModeBaseUncheckedSetKey17_clbk = void (WINAPIV*)(struct CryptoPP::BlockOrientedCipherModeBase*, uint8_t*, unsigned int, struct CryptoPP::NameValuePairs*, CryptoPP__BlockOrientedCipherModeBaseUncheckedSetKey17_ptr);
        using CryptoPP__BlockOrientedCipherModeBasedtor_BlockOrientedCipherModeBase19_ptr = void (WINAPIV*)(struct CryptoPP::BlockOrientedCipherModeBase*);
        using CryptoPP__BlockOrientedCipherModeBasedtor_BlockOrientedCipherModeBase19_clbk = void (WINAPIV*)(struct CryptoPP::BlockOrientedCipherModeBase*, CryptoPP__BlockOrientedCipherModeBasedtor_BlockOrientedCipherModeBase19_ptr);
        
        using CryptoPP__CBC_ModeBasector_CBC_ModeBase2_ptr = void (WINAPIV*)(struct CryptoPP::CBC_ModeBase*);
        using CryptoPP__CBC_ModeBasector_CBC_ModeBase2_clbk = void (WINAPIV*)(struct CryptoPP::CBC_ModeBase*, CryptoPP__CBC_ModeBasector_CBC_ModeBase2_ptr);
        using CryptoPP__CBC_ModeBaseIVRequirement4_ptr = struct CryptoPP::SimpleKeyingInterface::IV_Requirement (WINAPIV*)(struct CryptoPP::CBC_ModeBase*);
        using CryptoPP__CBC_ModeBaseIVRequirement4_clbk = struct CryptoPP::SimpleKeyingInterface::IV_Requirement (WINAPIV*)(struct CryptoPP::CBC_ModeBase*, CryptoPP__CBC_ModeBaseIVRequirement4_ptr);
        using CryptoPP__CBC_ModeBaseMinLastBlockSize6_ptr = unsigned int (WINAPIV*)(struct CryptoPP::CBC_ModeBase*);
        using CryptoPP__CBC_ModeBaseMinLastBlockSize6_clbk = unsigned int (WINAPIV*)(struct CryptoPP::CBC_ModeBase*, CryptoPP__CBC_ModeBaseMinLastBlockSize6_ptr);
        using CryptoPP__CBC_ModeBaseStaticAlgorithmName8_ptr = char* (WINAPIV*)();
        using CryptoPP__CBC_ModeBaseStaticAlgorithmName8_clbk = char* (WINAPIV*)(CryptoPP__CBC_ModeBaseStaticAlgorithmName8_ptr);
        using CryptoPP__CBC_ModeBasedtor_CBC_ModeBase10_ptr = void (WINAPIV*)(struct CryptoPP::CBC_ModeBase*);
        using CryptoPP__CBC_ModeBasedtor_CBC_ModeBase10_clbk = void (WINAPIV*)(struct CryptoPP::CBC_ModeBase*, CryptoPP__CBC_ModeBasedtor_CBC_ModeBase10_ptr);
        
        using CryptoPP__CBC_Decryptionctor_CBC_Decryption2_ptr = void (WINAPIV*)(struct CryptoPP::CBC_Decryption*);
        using CryptoPP__CBC_Decryptionctor_CBC_Decryption2_clbk = void (WINAPIV*)(struct CryptoPP::CBC_Decryption*, CryptoPP__CBC_Decryptionctor_CBC_Decryption2_ptr);
        using CryptoPP__CBC_DecryptionProcessBlocks3_ptr = void (WINAPIV*)(struct CryptoPP::CBC_Decryption*, uint8_t*, uint8_t*, uint64_t);
        using CryptoPP__CBC_DecryptionProcessBlocks3_clbk = void (WINAPIV*)(struct CryptoPP::CBC_Decryption*, uint8_t*, uint8_t*, uint64_t, CryptoPP__CBC_DecryptionProcessBlocks3_ptr);
        using CryptoPP__CBC_DecryptionResizeBuffers5_ptr = void (WINAPIV*)(struct CryptoPP::CBC_Decryption*);
        using CryptoPP__CBC_DecryptionResizeBuffers5_clbk = void (WINAPIV*)(struct CryptoPP::CBC_Decryption*, CryptoPP__CBC_DecryptionResizeBuffers5_ptr);
        using CryptoPP__CBC_Decryptiondtor_CBC_Decryption7_ptr = void (WINAPIV*)(struct CryptoPP::CBC_Decryption*);
        using CryptoPP__CBC_Decryptiondtor_CBC_Decryption7_clbk = void (WINAPIV*)(struct CryptoPP::CBC_Decryption*, CryptoPP__CBC_Decryptiondtor_CBC_Decryption7_ptr);
        
        using CryptoPP__CipherModeFinalTemplate_CipherHolderctor_CipherModeFinalTemplate_CipherHolder2_ptr = void (WINAPIV*)(struct CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::CBC_Decryption>*);
        using CryptoPP__CipherModeFinalTemplate_CipherHolderctor_CipherModeFinalTemplate_CipherHolder2_clbk = void (WINAPIV*)(struct CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::CBC_Decryption>*, CryptoPP__CipherModeFinalTemplate_CipherHolderctor_CipherModeFinalTemplate_CipherHolder2_ptr);
        using CryptoPP__CipherModeFinalTemplate_CipherHolderStaticAlgorithmName4_ptr = struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (WINAPIV*)(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*);
        using CryptoPP__CipherModeFinalTemplate_CipherHolderStaticAlgorithmName4_clbk = struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (WINAPIV*)(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, CryptoPP__CipherModeFinalTemplate_CipherHolderStaticAlgorithmName4_ptr);
        using CryptoPP__CipherModeFinalTemplate_CipherHolderdtor_CipherModeFinalTemplate_CipherHolder9_ptr = void (WINAPIV*)(struct CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::CBC_Decryption>*);
        using CryptoPP__CipherModeFinalTemplate_CipherHolderdtor_CipherModeFinalTemplate_CipherHolder9_clbk = void (WINAPIV*)(struct CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::CBC_Decryption>*, CryptoPP__CipherModeFinalTemplate_CipherHolderdtor_CipherModeFinalTemplate_CipherHolder9_ptr);
        
        using CryptoPP__PK_CryptoSystemFixedCiphertextLength2_ptr = uint64_t (WINAPIV*)(struct CryptoPP::PK_CryptoSystem*);
        using CryptoPP__PK_CryptoSystemFixedCiphertextLength2_clbk = uint64_t (WINAPIV*)(struct CryptoPP::PK_CryptoSystem*, CryptoPP__PK_CryptoSystemFixedCiphertextLength2_ptr);
        using CryptoPP__PK_CryptoSystemFixedMaxPlaintextLength4_ptr = uint64_t (WINAPIV*)(struct CryptoPP::PK_CryptoSystem*);
        using CryptoPP__PK_CryptoSystemFixedMaxPlaintextLength4_clbk = uint64_t (WINAPIV*)(struct CryptoPP::PK_CryptoSystem*, CryptoPP__PK_CryptoSystemFixedMaxPlaintextLength4_ptr);
        using CryptoPP__PK_CryptoSystemctor_PK_CryptoSystem6_ptr = void (WINAPIV*)(struct CryptoPP::PK_CryptoSystem*);
        using CryptoPP__PK_CryptoSystemctor_PK_CryptoSystem6_clbk = void (WINAPIV*)(struct CryptoPP::PK_CryptoSystem*, CryptoPP__PK_CryptoSystemctor_PK_CryptoSystem6_ptr);
        using CryptoPP__PK_CryptoSystemdtor_PK_CryptoSystem8_ptr = void (WINAPIV*)(struct CryptoPP::PK_CryptoSystem*);
        using CryptoPP__PK_CryptoSystemdtor_PK_CryptoSystem8_clbk = void (WINAPIV*)(struct CryptoPP::PK_CryptoSystem*, CryptoPP__PK_CryptoSystemdtor_PK_CryptoSystem8_ptr);
        
        using CryptoPP__AsymmetricAlgorithmctor_AsymmetricAlgorithm1_ptr = int64_t (WINAPIV*)(struct CryptoPP::AsymmetricAlgorithm*, struct CryptoPP::AsymmetricAlgorithm*);
        using CryptoPP__AsymmetricAlgorithmctor_AsymmetricAlgorithm1_clbk = int64_t (WINAPIV*)(struct CryptoPP::AsymmetricAlgorithm*, struct CryptoPP::AsymmetricAlgorithm*, CryptoPP__AsymmetricAlgorithmctor_AsymmetricAlgorithm1_ptr);
        using CryptoPP__AsymmetricAlgorithmctor_AsymmetricAlgorithm3_ptr = void (WINAPIV*)(struct CryptoPP::AsymmetricAlgorithm*);
        using CryptoPP__AsymmetricAlgorithmctor_AsymmetricAlgorithm3_clbk = void (WINAPIV*)(struct CryptoPP::AsymmetricAlgorithm*, CryptoPP__AsymmetricAlgorithmctor_AsymmetricAlgorithm3_ptr);
        using CryptoPP__AsymmetricAlgorithmdtor_AsymmetricAlgorithm5_ptr = void (WINAPIV*)(struct CryptoPP::AsymmetricAlgorithm*);
        using CryptoPP__AsymmetricAlgorithmdtor_AsymmetricAlgorithm5_clbk = void (WINAPIV*)(struct CryptoPP::AsymmetricAlgorithm*, CryptoPP__AsymmetricAlgorithmdtor_AsymmetricAlgorithm5_ptr);
        
        using CryptoPP__PublicKeyAlgorithmAccessMaterial2_ptr = struct CryptoPP::CryptoMaterial* (WINAPIV*)(struct CryptoPP::PublicKeyAlgorithm*);
        using CryptoPP__PublicKeyAlgorithmAccessMaterial2_clbk = struct CryptoPP::CryptoMaterial* (WINAPIV*)(struct CryptoPP::PublicKeyAlgorithm*, CryptoPP__PublicKeyAlgorithmAccessMaterial2_ptr);
        using CryptoPP__PublicKeyAlgorithmGetMaterial4_ptr = struct CryptoPP::CryptoMaterial* (WINAPIV*)(struct CryptoPP::PublicKeyAlgorithm*);
        using CryptoPP__PublicKeyAlgorithmGetMaterial4_clbk = struct CryptoPP::CryptoMaterial* (WINAPIV*)(struct CryptoPP::PublicKeyAlgorithm*, CryptoPP__PublicKeyAlgorithmGetMaterial4_ptr);
        using CryptoPP__PublicKeyAlgorithmGetPublicKey6_ptr = struct CryptoPP::PublicKey* (WINAPIV*)(struct CryptoPP::PublicKeyAlgorithm*);
        using CryptoPP__PublicKeyAlgorithmGetPublicKey6_clbk = struct CryptoPP::PublicKey* (WINAPIV*)(struct CryptoPP::PublicKeyAlgorithm*, CryptoPP__PublicKeyAlgorithmGetPublicKey6_ptr);
        using CryptoPP__PublicKeyAlgorithmctor_PublicKeyAlgorithm8_ptr = void (WINAPIV*)(struct CryptoPP::PublicKeyAlgorithm*);
        using CryptoPP__PublicKeyAlgorithmctor_PublicKeyAlgorithm8_clbk = void (WINAPIV*)(struct CryptoPP::PublicKeyAlgorithm*, CryptoPP__PublicKeyAlgorithmctor_PublicKeyAlgorithm8_ptr);
        using CryptoPP__PublicKeyAlgorithmdtor_PublicKeyAlgorithm10_ptr = void (WINAPIV*)(struct CryptoPP::PublicKeyAlgorithm*);
        using CryptoPP__PublicKeyAlgorithmdtor_PublicKeyAlgorithm10_clbk = void (WINAPIV*)(struct CryptoPP::PublicKeyAlgorithm*, CryptoPP__PublicKeyAlgorithmdtor_PublicKeyAlgorithm10_ptr);
        
        using CryptoPP__PK_EncryptorCreateEncryptionFilter1_ptr = struct CryptoPP::BufferedTransformation* (WINAPIV*)(struct CryptoPP::PK_Encryptor*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__PK_EncryptorCreateEncryptionFilter1_clbk = struct CryptoPP::BufferedTransformation* (WINAPIV*)(struct CryptoPP::PK_Encryptor*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::NameValuePairs*, CryptoPP__PK_EncryptorCreateEncryptionFilter1_ptr);
        using CryptoPP__PK_Encryptorctor_PK_Encryptor3_ptr = void (WINAPIV*)(struct CryptoPP::PK_Encryptor*);
        using CryptoPP__PK_Encryptorctor_PK_Encryptor3_clbk = void (WINAPIV*)(struct CryptoPP::PK_Encryptor*, CryptoPP__PK_Encryptorctor_PK_Encryptor3_ptr);
        using CryptoPP__PK_Encryptordtor_PK_Encryptor5_ptr = void (WINAPIV*)(struct CryptoPP::PK_Encryptor*);
        using CryptoPP__PK_Encryptordtor_PK_Encryptor5_clbk = void (WINAPIV*)(struct CryptoPP::PK_Encryptor*, CryptoPP__PK_Encryptordtor_PK_Encryptor5_ptr);
        
        using CryptoPP__DL_EncryptorBasector_DL_EncryptorBase2_ptr = void (WINAPIV*)(struct CryptoPP::DL_EncryptorBase<CryptoPP::ECPPoint>*);
        using CryptoPP__DL_EncryptorBasector_DL_EncryptorBase2_clbk = void (WINAPIV*)(struct CryptoPP::DL_EncryptorBase<CryptoPP::ECPPoint>*, CryptoPP__DL_EncryptorBasector_DL_EncryptorBase2_ptr);
        using CryptoPP__DL_EncryptorBaseEncrypt4_ptr = void (WINAPIV*)(struct CryptoPP::DL_EncryptorBase<CryptoPP::ECPPoint>*, struct CryptoPP::RandomNumberGenerator*, char*, uint64_t, char*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__DL_EncryptorBaseEncrypt4_clbk = void (WINAPIV*)(struct CryptoPP::DL_EncryptorBase<CryptoPP::ECPPoint>*, struct CryptoPP::RandomNumberGenerator*, char*, uint64_t, char*, struct CryptoPP::NameValuePairs*, CryptoPP__DL_EncryptorBaseEncrypt4_ptr);
        using CryptoPP__DL_EncryptorBasedtor_DL_EncryptorBase6_ptr = void (WINAPIV*)(struct CryptoPP::DL_EncryptorBase<CryptoPP::ECPPoint>*);
        using CryptoPP__DL_EncryptorBasedtor_DL_EncryptorBase6_clbk = void (WINAPIV*)(struct CryptoPP::DL_EncryptorBase<CryptoPP::ECPPoint>*, CryptoPP__DL_EncryptorBasedtor_DL_EncryptorBase6_ptr);
        
        using CryptoPP__PrivateKeyAlgorithmAccessMaterial2_ptr = struct CryptoPP::CryptoMaterial* (WINAPIV*)(struct CryptoPP::PrivateKeyAlgorithm*);
        using CryptoPP__PrivateKeyAlgorithmAccessMaterial2_clbk = struct CryptoPP::CryptoMaterial* (WINAPIV*)(struct CryptoPP::PrivateKeyAlgorithm*, CryptoPP__PrivateKeyAlgorithmAccessMaterial2_ptr);
        using CryptoPP__PrivateKeyAlgorithmGetMaterial4_ptr = struct CryptoPP::CryptoMaterial* (WINAPIV*)(struct CryptoPP::PrivateKeyAlgorithm*);
        using CryptoPP__PrivateKeyAlgorithmGetMaterial4_clbk = struct CryptoPP::CryptoMaterial* (WINAPIV*)(struct CryptoPP::PrivateKeyAlgorithm*, CryptoPP__PrivateKeyAlgorithmGetMaterial4_ptr);
        using CryptoPP__PrivateKeyAlgorithmGetPrivateKey6_ptr = struct CryptoPP::PrivateKey* (WINAPIV*)(struct CryptoPP::PrivateKeyAlgorithm*);
        using CryptoPP__PrivateKeyAlgorithmGetPrivateKey6_clbk = struct CryptoPP::PrivateKey* (WINAPIV*)(struct CryptoPP::PrivateKeyAlgorithm*, CryptoPP__PrivateKeyAlgorithmGetPrivateKey6_ptr);
        using CryptoPP__PrivateKeyAlgorithmctor_PrivateKeyAlgorithm7_ptr = int64_t (WINAPIV*)(struct CryptoPP::PrivateKeyAlgorithm*, struct CryptoPP::PrivateKeyAlgorithm*);
        using CryptoPP__PrivateKeyAlgorithmctor_PrivateKeyAlgorithm7_clbk = int64_t (WINAPIV*)(struct CryptoPP::PrivateKeyAlgorithm*, struct CryptoPP::PrivateKeyAlgorithm*, CryptoPP__PrivateKeyAlgorithmctor_PrivateKeyAlgorithm7_ptr);
        using CryptoPP__PrivateKeyAlgorithmctor_PrivateKeyAlgorithm9_ptr = void (WINAPIV*)(struct CryptoPP::PrivateKeyAlgorithm*);
        using CryptoPP__PrivateKeyAlgorithmctor_PrivateKeyAlgorithm9_clbk = void (WINAPIV*)(struct CryptoPP::PrivateKeyAlgorithm*, CryptoPP__PrivateKeyAlgorithmctor_PrivateKeyAlgorithm9_ptr);
        using CryptoPP__PrivateKeyAlgorithmdtor_PrivateKeyAlgorithm11_ptr = void (WINAPIV*)(struct CryptoPP::PrivateKeyAlgorithm*);
        using CryptoPP__PrivateKeyAlgorithmdtor_PrivateKeyAlgorithm11_clbk = void (WINAPIV*)(struct CryptoPP::PrivateKeyAlgorithm*, CryptoPP__PrivateKeyAlgorithmdtor_PrivateKeyAlgorithm11_ptr);
        
        using CryptoPP__PK_DecryptorCreateDecryptionFilter1_ptr = struct CryptoPP::BufferedTransformation* (WINAPIV*)(struct CryptoPP::PK_Decryptor*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__PK_DecryptorCreateDecryptionFilter1_clbk = struct CryptoPP::BufferedTransformation* (WINAPIV*)(struct CryptoPP::PK_Decryptor*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::NameValuePairs*, CryptoPP__PK_DecryptorCreateDecryptionFilter1_ptr);
        using CryptoPP__PK_Decryptorctor_PK_Decryptor3_ptr = void (WINAPIV*)(struct CryptoPP::PK_Decryptor*);
        using CryptoPP__PK_Decryptorctor_PK_Decryptor3_clbk = void (WINAPIV*)(struct CryptoPP::PK_Decryptor*, CryptoPP__PK_Decryptorctor_PK_Decryptor3_ptr);
        using CryptoPP__PK_Decryptordtor_PK_Decryptor5_ptr = void (WINAPIV*)(struct CryptoPP::PK_Decryptor*);
        using CryptoPP__PK_Decryptordtor_PK_Decryptor5_clbk = void (WINAPIV*)(struct CryptoPP::PK_Decryptor*, CryptoPP__PK_Decryptordtor_PK_Decryptor5_ptr);
        
        using CryptoPP__DL_DecryptorBasector_DL_DecryptorBase2_ptr = void (WINAPIV*)(struct CryptoPP::DL_DecryptorBase<CryptoPP::ECPPoint>*);
        using CryptoPP__DL_DecryptorBasector_DL_DecryptorBase2_clbk = void (WINAPIV*)(struct CryptoPP::DL_DecryptorBase<CryptoPP::ECPPoint>*, CryptoPP__DL_DecryptorBasector_DL_DecryptorBase2_ptr);
        using CryptoPP__DL_DecryptorBaseDecrypt4_ptr = struct CryptoPP::DecodingResult* (WINAPIV*)(struct CryptoPP::DL_DecryptorBase<CryptoPP::ECPPoint>*, struct CryptoPP::DecodingResult*, struct CryptoPP::RandomNumberGenerator*, char*, uint64_t, char*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__DL_DecryptorBaseDecrypt4_clbk = struct CryptoPP::DecodingResult* (WINAPIV*)(struct CryptoPP::DL_DecryptorBase<CryptoPP::ECPPoint>*, struct CryptoPP::DecodingResult*, struct CryptoPP::RandomNumberGenerator*, char*, uint64_t, char*, struct CryptoPP::NameValuePairs*, CryptoPP__DL_DecryptorBaseDecrypt4_ptr);
        using CryptoPP__DL_DecryptorBasedtor_DL_DecryptorBase6_ptr = void (WINAPIV*)(struct CryptoPP::DL_DecryptorBase<CryptoPP::ECPPoint>*);
        using CryptoPP__DL_DecryptorBasedtor_DL_DecryptorBase6_clbk = void (WINAPIV*)(struct CryptoPP::DL_DecryptorBase<CryptoPP::ECPPoint>*, CryptoPP__DL_DecryptorBasedtor_DL_DecryptorBase6_ptr);
        
        using CryptoPP__HashTransformationBlockSize2_ptr = unsigned int (WINAPIV*)(struct CryptoPP::HashTransformation*);
        using CryptoPP__HashTransformationBlockSize2_clbk = unsigned int (WINAPIV*)(struct CryptoPP::HashTransformation*, CryptoPP__HashTransformationBlockSize2_ptr);
        using CryptoPP__HashTransformationCalculateDigest4_ptr = void (WINAPIV*)(struct CryptoPP::HashTransformation*, char*, char*, uint64_t);
        using CryptoPP__HashTransformationCalculateDigest4_clbk = void (WINAPIV*)(struct CryptoPP::HashTransformation*, char*, char*, uint64_t, CryptoPP__HashTransformationCalculateDigest4_ptr);
        using CryptoPP__HashTransformationCalculateTruncatedDigest6_ptr = void (WINAPIV*)(struct CryptoPP::HashTransformation*, char*, uint64_t, char*, uint64_t);
        using CryptoPP__HashTransformationCalculateTruncatedDigest6_clbk = void (WINAPIV*)(struct CryptoPP::HashTransformation*, char*, uint64_t, char*, uint64_t, CryptoPP__HashTransformationCalculateTruncatedDigest6_ptr);
        using CryptoPP__HashTransformationCreateUpdateSpace8_ptr = char* (WINAPIV*)(struct CryptoPP::HashTransformation*, uint64_t*);
        using CryptoPP__HashTransformationCreateUpdateSpace8_clbk = char* (WINAPIV*)(struct CryptoPP::HashTransformation*, uint64_t*, CryptoPP__HashTransformationCreateUpdateSpace8_ptr);
        using CryptoPP__HashTransformationFinal10_ptr = void (WINAPIV*)(struct CryptoPP::HashTransformation*, char*);
        using CryptoPP__HashTransformationFinal10_clbk = void (WINAPIV*)(struct CryptoPP::HashTransformation*, char*, CryptoPP__HashTransformationFinal10_ptr);
        using CryptoPP__HashTransformationctor_HashTransformation12_ptr = void (WINAPIV*)(struct CryptoPP::HashTransformation*, struct CryptoPP::HashTransformation*);
        using CryptoPP__HashTransformationctor_HashTransformation12_clbk = void (WINAPIV*)(struct CryptoPP::HashTransformation*, struct CryptoPP::HashTransformation*, CryptoPP__HashTransformationctor_HashTransformation12_ptr);
        using CryptoPP__HashTransformationctor_HashTransformation14_ptr = void (WINAPIV*)(struct CryptoPP::HashTransformation*);
        using CryptoPP__HashTransformationctor_HashTransformation14_clbk = void (WINAPIV*)(struct CryptoPP::HashTransformation*, CryptoPP__HashTransformationctor_HashTransformation14_ptr);
        using CryptoPP__HashTransformationOptimalBlockSize15_ptr = unsigned int (WINAPIV*)(struct CryptoPP::HashTransformation*);
        using CryptoPP__HashTransformationOptimalBlockSize15_clbk = unsigned int (WINAPIV*)(struct CryptoPP::HashTransformation*, CryptoPP__HashTransformationOptimalBlockSize15_ptr);
        using CryptoPP__HashTransformationOptimalDataAlignment17_ptr = unsigned int (WINAPIV*)(struct CryptoPP::HashTransformation*);
        using CryptoPP__HashTransformationOptimalDataAlignment17_clbk = unsigned int (WINAPIV*)(struct CryptoPP::HashTransformation*, CryptoPP__HashTransformationOptimalDataAlignment17_ptr);
        using CryptoPP__HashTransformationRestart18_ptr = void (WINAPIV*)(struct CryptoPP::HashTransformation*);
        using CryptoPP__HashTransformationRestart18_clbk = void (WINAPIV*)(struct CryptoPP::HashTransformation*, CryptoPP__HashTransformationRestart18_ptr);
        using CryptoPP__HashTransformationThrowIfInvalidTruncatedSize19_ptr = void (WINAPIV*)(struct CryptoPP::HashTransformation*, uint64_t);
        using CryptoPP__HashTransformationThrowIfInvalidTruncatedSize19_clbk = void (WINAPIV*)(struct CryptoPP::HashTransformation*, uint64_t, CryptoPP__HashTransformationThrowIfInvalidTruncatedSize19_ptr);
        using CryptoPP__HashTransformationTruncatedVerify20_ptr = bool (WINAPIV*)(struct CryptoPP::HashTransformation*, uint8_t*, uint64_t);
        using CryptoPP__HashTransformationTruncatedVerify20_clbk = bool (WINAPIV*)(struct CryptoPP::HashTransformation*, uint8_t*, uint64_t, CryptoPP__HashTransformationTruncatedVerify20_ptr);
        using CryptoPP__HashTransformationVerify22_ptr = bool (WINAPIV*)(struct CryptoPP::HashTransformation*, char*);
        using CryptoPP__HashTransformationVerify22_clbk = bool (WINAPIV*)(struct CryptoPP::HashTransformation*, char*, CryptoPP__HashTransformationVerify22_ptr);
        using CryptoPP__HashTransformationVerifyDigest24_ptr = bool (WINAPIV*)(struct CryptoPP::HashTransformation*, char*, char*, uint64_t);
        using CryptoPP__HashTransformationVerifyDigest24_clbk = bool (WINAPIV*)(struct CryptoPP::HashTransformation*, char*, char*, uint64_t, CryptoPP__HashTransformationVerifyDigest24_ptr);
        using CryptoPP__HashTransformationVerifyTruncatedDigest26_ptr = bool (WINAPIV*)(struct CryptoPP::HashTransformation*, char*, uint64_t, char*, uint64_t);
        using CryptoPP__HashTransformationVerifyTruncatedDigest26_clbk = bool (WINAPIV*)(struct CryptoPP::HashTransformation*, char*, uint64_t, char*, uint64_t, CryptoPP__HashTransformationVerifyTruncatedDigest26_ptr);
        using CryptoPP__HashTransformationdtor_HashTransformation28_ptr = void (WINAPIV*)(struct CryptoPP::HashTransformation*);
        using CryptoPP__HashTransformationdtor_HashTransformation28_clbk = void (WINAPIV*)(struct CryptoPP::HashTransformation*, CryptoPP__HashTransformationdtor_HashTransformation28_ptr);
        
        using CryptoPP__SHA256InitState1_ptr = void (WINAPIV*)(unsigned int*);
        using CryptoPP__SHA256InitState1_clbk = void (WINAPIV*)(unsigned int*, CryptoPP__SHA256InitState1_ptr);
        using CryptoPP__SHA256ctor_SHA2563_ptr = void (WINAPIV*)(struct CryptoPP::SHA256*, struct CryptoPP::SHA256*);
        using CryptoPP__SHA256ctor_SHA2563_clbk = void (WINAPIV*)(struct CryptoPP::SHA256*, struct CryptoPP::SHA256*, CryptoPP__SHA256ctor_SHA2563_ptr);
        using CryptoPP__SHA256ctor_SHA2565_ptr = void (WINAPIV*)(struct CryptoPP::SHA256*);
        using CryptoPP__SHA256ctor_SHA2565_clbk = void (WINAPIV*)(struct CryptoPP::SHA256*, CryptoPP__SHA256ctor_SHA2565_ptr);
        using CryptoPP__SHA256StaticAlgorithmName7_ptr = char* (WINAPIV*)();
        using CryptoPP__SHA256StaticAlgorithmName7_clbk = char* (WINAPIV*)(CryptoPP__SHA256StaticAlgorithmName7_ptr);
        using CryptoPP__SHA256Transform8_ptr = void (WINAPIV*)(unsigned int*, unsigned int*);
        using CryptoPP__SHA256Transform8_clbk = void (WINAPIV*)(unsigned int*, unsigned int*, CryptoPP__SHA256Transform8_ptr);
        using CryptoPP__SHA256dtor_SHA25613_ptr = void (WINAPIV*)(struct CryptoPP::SHA256*);
        using CryptoPP__SHA256dtor_SHA25613_clbk = void (WINAPIV*)(struct CryptoPP::SHA256*, CryptoPP__SHA256dtor_SHA25613_ptr);
        
        using CryptoPP__Exceptionctor_Exception2_ptr = void (WINAPIV*)(struct CryptoPP::Exception*, struct CryptoPP::Exception*);
        using CryptoPP__Exceptionctor_Exception2_clbk = void (WINAPIV*)(struct CryptoPP::Exception*, struct CryptoPP::Exception*, CryptoPP__Exceptionctor_Exception2_ptr);
        using CryptoPP__Exceptionctor_Exception4_ptr = void (WINAPIV*)(struct CryptoPP::Exception*, struct CryptoPP::Exception::ErrorType, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*);
        using CryptoPP__Exceptionctor_Exception4_clbk = void (WINAPIV*)(struct CryptoPP::Exception*, struct CryptoPP::Exception::ErrorType, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, CryptoPP__Exceptionctor_Exception4_ptr);
        using CryptoPP__Exceptionwhat9_ptr = char* (WINAPIV*)(struct CryptoPP::Exception*);
        using CryptoPP__Exceptionwhat9_clbk = char* (WINAPIV*)(struct CryptoPP::Exception*, CryptoPP__Exceptionwhat9_ptr);
        using CryptoPP__Exceptiondtor_Exception11_ptr = void (WINAPIV*)(struct CryptoPP::Exception*);
        using CryptoPP__Exceptiondtor_Exception11_clbk = void (WINAPIV*)(struct CryptoPP::Exception*, CryptoPP__Exceptiondtor_Exception11_ptr);
        
        using CryptoPP__PolynomialMod2AllOnes1_ptr = struct CryptoPP::PolynomialMod2* (WINAPIV*)(short, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__PolynomialMod2AllOnes1_clbk = struct CryptoPP::PolynomialMod2* (WINAPIV*)(short, struct CryptoPP::PolynomialMod2*, CryptoPP__PolynomialMod2AllOnes1_ptr);
        using CryptoPP__PolynomialMod2And2_ptr = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::PolynomialMod2*, short, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__PolynomialMod2And2_clbk = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::PolynomialMod2*, short, struct CryptoPP::PolynomialMod2*, CryptoPP__PolynomialMod2And2_ptr);
        using CryptoPP__PolynomialMod2BERDecodeAsOctetString3_ptr = void (WINAPIV*)(struct CryptoPP::PolynomialMod2*, struct CryptoPP::BufferedTransformation*, uint64_t);
        using CryptoPP__PolynomialMod2BERDecodeAsOctetString3_clbk = void (WINAPIV*)(struct CryptoPP::PolynomialMod2*, struct CryptoPP::BufferedTransformation*, uint64_t, CryptoPP__PolynomialMod2BERDecodeAsOctetString3_ptr);
        using CryptoPP__PolynomialMod2BitCount4_ptr = unsigned int (WINAPIV*)(struct CryptoPP::PolynomialMod2*);
        using CryptoPP__PolynomialMod2BitCount4_clbk = unsigned int (WINAPIV*)(struct CryptoPP::PolynomialMod2*, CryptoPP__PolynomialMod2BitCount4_ptr);
        using CryptoPP__PolynomialMod2ByteCount5_ptr = unsigned int (WINAPIV*)(struct CryptoPP::PolynomialMod2*);
        using CryptoPP__PolynomialMod2ByteCount5_clbk = unsigned int (WINAPIV*)(struct CryptoPP::PolynomialMod2*, CryptoPP__PolynomialMod2ByteCount5_ptr);
        using CryptoPP__PolynomialMod2CoefficientCount6_ptr = unsigned int (WINAPIV*)(struct CryptoPP::PolynomialMod2*);
        using CryptoPP__PolynomialMod2CoefficientCount6_clbk = unsigned int (WINAPIV*)(struct CryptoPP::PolynomialMod2*, CryptoPP__PolynomialMod2CoefficientCount6_ptr);
        using CryptoPP__PolynomialMod2DEREncodeAsOctetString7_ptr = void (WINAPIV*)(struct CryptoPP::PolynomialMod2*, struct CryptoPP::BufferedTransformation*, uint64_t);
        using CryptoPP__PolynomialMod2DEREncodeAsOctetString7_clbk = void (WINAPIV*)(struct CryptoPP::PolynomialMod2*, struct CryptoPP::BufferedTransformation*, uint64_t, CryptoPP__PolynomialMod2DEREncodeAsOctetString7_ptr);
        using CryptoPP__PolynomialMod2Decode8_ptr = void (WINAPIV*)(struct CryptoPP::PolynomialMod2*, struct CryptoPP::BufferedTransformation*, uint64_t);
        using CryptoPP__PolynomialMod2Decode8_clbk = void (WINAPIV*)(struct CryptoPP::PolynomialMod2*, struct CryptoPP::BufferedTransformation*, uint64_t, CryptoPP__PolynomialMod2Decode8_ptr);
        using CryptoPP__PolynomialMod2Decode9_ptr = void (WINAPIV*)(struct CryptoPP::PolynomialMod2*, uint8_t*, uint64_t);
        using CryptoPP__PolynomialMod2Decode9_clbk = void (WINAPIV*)(struct CryptoPP::PolynomialMod2*, uint8_t*, uint64_t, CryptoPP__PolynomialMod2Decode9_ptr);
        using CryptoPP__PolynomialMod2Degree10_ptr = int64_t (WINAPIV*)(struct CryptoPP::PolynomialMod2*);
        using CryptoPP__PolynomialMod2Degree10_clbk = int64_t (WINAPIV*)(struct CryptoPP::PolynomialMod2*, CryptoPP__PolynomialMod2Degree10_ptr);
        using CryptoPP__PolynomialMod2Divide11_ptr = void (WINAPIV*)(struct CryptoPP::PolynomialMod2*, struct CryptoPP::PolynomialMod2*, struct CryptoPP::PolynomialMod2*, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__PolynomialMod2Divide11_clbk = void (WINAPIV*)(struct CryptoPP::PolynomialMod2*, struct CryptoPP::PolynomialMod2*, struct CryptoPP::PolynomialMod2*, struct CryptoPP::PolynomialMod2*, CryptoPP__PolynomialMod2Divide11_ptr);
        using CryptoPP__PolynomialMod2DividedBy12_ptr = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::PolynomialMod2*, short, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__PolynomialMod2DividedBy12_clbk = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::PolynomialMod2*, short, struct CryptoPP::PolynomialMod2*, CryptoPP__PolynomialMod2DividedBy12_ptr);
        using CryptoPP__PolynomialMod2Doubled13_ptr = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::PolynomialMod2*, short);
        using CryptoPP__PolynomialMod2Doubled13_clbk = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::PolynomialMod2*, short, CryptoPP__PolynomialMod2Doubled13_ptr);
        using CryptoPP__PolynomialMod2Encode14_ptr = void (WINAPIV*)(struct CryptoPP::PolynomialMod2*, struct CryptoPP::BufferedTransformation*, uint64_t);
        using CryptoPP__PolynomialMod2Encode14_clbk = void (WINAPIV*)(struct CryptoPP::PolynomialMod2*, struct CryptoPP::BufferedTransformation*, uint64_t, CryptoPP__PolynomialMod2Encode14_ptr);
        using CryptoPP__PolynomialMod2Encode15_ptr = void (WINAPIV*)(struct CryptoPP::PolynomialMod2*, uint8_t*, uint64_t);
        using CryptoPP__PolynomialMod2Encode15_clbk = void (WINAPIV*)(struct CryptoPP::PolynomialMod2*, uint8_t*, uint64_t, CryptoPP__PolynomialMod2Encode15_ptr);
        using CryptoPP__PolynomialMod2Equals16_ptr = bool (WINAPIV*)(struct CryptoPP::PolynomialMod2*, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__PolynomialMod2Equals16_clbk = bool (WINAPIV*)(struct CryptoPP::PolynomialMod2*, struct CryptoPP::PolynomialMod2*, CryptoPP__PolynomialMod2Equals16_ptr);
        using CryptoPP__PolynomialMod2Gcd17_ptr = struct CryptoPP::PolynomialMod2* (WINAPIV*)(short, struct CryptoPP::PolynomialMod2*, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__PolynomialMod2Gcd17_clbk = struct CryptoPP::PolynomialMod2* (WINAPIV*)(short, struct CryptoPP::PolynomialMod2*, struct CryptoPP::PolynomialMod2*, CryptoPP__PolynomialMod2Gcd17_ptr);
        using CryptoPP__PolynomialMod2GetBit18_ptr = bool (WINAPIV*)(struct CryptoPP::PolynomialMod2*, uint64_t);
        using CryptoPP__PolynomialMod2GetBit18_clbk = bool (WINAPIV*)(struct CryptoPP::PolynomialMod2*, uint64_t, CryptoPP__PolynomialMod2GetBit18_ptr);
        using CryptoPP__PolynomialMod2GetByte19_ptr = uint8_t (WINAPIV*)(struct CryptoPP::PolynomialMod2*, uint64_t);
        using CryptoPP__PolynomialMod2GetByte19_clbk = uint8_t (WINAPIV*)(struct CryptoPP::PolynomialMod2*, uint64_t, CryptoPP__PolynomialMod2GetByte19_ptr);
        using CryptoPP__PolynomialMod2GetCoefficient20_ptr = int64_t (WINAPIV*)(struct CryptoPP::PolynomialMod2*, uint64_t);
        using CryptoPP__PolynomialMod2GetCoefficient20_clbk = int64_t (WINAPIV*)(struct CryptoPP::PolynomialMod2*, uint64_t, CryptoPP__PolynomialMod2GetCoefficient20_ptr);
        using CryptoPP__PolynomialMod2InverseMod21_ptr = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::PolynomialMod2*, short, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__PolynomialMod2InverseMod21_clbk = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::PolynomialMod2*, short, struct CryptoPP::PolynomialMod2*, CryptoPP__PolynomialMod2InverseMod21_ptr);
        using CryptoPP__PolynomialMod2IsIrreducible22_ptr = bool (WINAPIV*)(struct CryptoPP::PolynomialMod2*);
        using CryptoPP__PolynomialMod2IsIrreducible22_clbk = bool (WINAPIV*)(struct CryptoPP::PolynomialMod2*, CryptoPP__PolynomialMod2IsIrreducible22_ptr);
        using CryptoPP__PolynomialMod2IsUnit23_ptr = bool (WINAPIV*)(struct CryptoPP::PolynomialMod2*);
        using CryptoPP__PolynomialMod2IsUnit23_clbk = bool (WINAPIV*)(struct CryptoPP::PolynomialMod2*, CryptoPP__PolynomialMod2IsUnit23_ptr);
        using CryptoPP__PolynomialMod2IsZero24_ptr = bool (WINAPIV*)(struct CryptoPP::PolynomialMod2*);
        using CryptoPP__PolynomialMod2IsZero24_clbk = bool (WINAPIV*)(struct CryptoPP::PolynomialMod2*, CryptoPP__PolynomialMod2IsZero24_ptr);
        using CryptoPP__PolynomialMod2Minus25_ptr = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::PolynomialMod2*, short, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__PolynomialMod2Minus25_clbk = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::PolynomialMod2*, short, struct CryptoPP::PolynomialMod2*, CryptoPP__PolynomialMod2Minus25_ptr);
        using CryptoPP__PolynomialMod2Modulo26_ptr = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::PolynomialMod2*, short, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__PolynomialMod2Modulo26_clbk = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::PolynomialMod2*, short, struct CryptoPP::PolynomialMod2*, CryptoPP__PolynomialMod2Modulo26_ptr);
        using CryptoPP__PolynomialMod2Monomial27_ptr = struct CryptoPP::PolynomialMod2* (WINAPIV*)(short, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__PolynomialMod2Monomial27_clbk = struct CryptoPP::PolynomialMod2* (WINAPIV*)(short, struct CryptoPP::PolynomialMod2*, CryptoPP__PolynomialMod2Monomial27_ptr);
        using CryptoPP__PolynomialMod2MultiplicativeInverse28_ptr = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::PolynomialMod2*, short);
        using CryptoPP__PolynomialMod2MultiplicativeInverse28_clbk = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::PolynomialMod2*, short, CryptoPP__PolynomialMod2MultiplicativeInverse28_ptr);
        using CryptoPP__PolynomialMod2One29_ptr = struct CryptoPP::PolynomialMod2* (WINAPIV*)();
        using CryptoPP__PolynomialMod2One29_clbk = struct CryptoPP::PolynomialMod2* (WINAPIV*)(CryptoPP__PolynomialMod2One29_ptr);
        using CryptoPP__PolynomialMod2Parity30_ptr = unsigned int (WINAPIV*)(struct CryptoPP::PolynomialMod2*);
        using CryptoPP__PolynomialMod2Parity30_clbk = unsigned int (WINAPIV*)(struct CryptoPP::PolynomialMod2*, CryptoPP__PolynomialMod2Parity30_ptr);
        using CryptoPP__PolynomialMod2Pentanomial31_ptr = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::PolynomialMod2*, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
        using CryptoPP__PolynomialMod2Pentanomial31_clbk = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::PolynomialMod2*, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CryptoPP__PolynomialMod2Pentanomial31_ptr);
        using CryptoPP__PolynomialMod2Plus32_ptr = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::PolynomialMod2*, short, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__PolynomialMod2Plus32_clbk = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::PolynomialMod2*, short, struct CryptoPP::PolynomialMod2*, CryptoPP__PolynomialMod2Plus32_ptr);
        using CryptoPP__PolynomialMod2ctor_PolynomialMod233_ptr = int64_t (WINAPIV*)(struct CryptoPP::PolynomialMod2*, struct CryptoPP::BufferedTransformation*, uint64_t);
        using CryptoPP__PolynomialMod2ctor_PolynomialMod233_clbk = int64_t (WINAPIV*)(struct CryptoPP::PolynomialMod2*, struct CryptoPP::BufferedTransformation*, uint64_t, CryptoPP__PolynomialMod2ctor_PolynomialMod233_ptr);
        using CryptoPP__PolynomialMod2ctor_PolynomialMod234_ptr = int64_t (WINAPIV*)(struct CryptoPP::PolynomialMod2*, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__PolynomialMod2ctor_PolynomialMod234_clbk = int64_t (WINAPIV*)(struct CryptoPP::PolynomialMod2*, struct CryptoPP::PolynomialMod2*, CryptoPP__PolynomialMod2ctor_PolynomialMod234_ptr);
        using CryptoPP__PolynomialMod2ctor_PolynomialMod235_ptr = int64_t (WINAPIV*)(struct CryptoPP::PolynomialMod2*, struct CryptoPP::RandomNumberGenerator*, uint64_t);
        using CryptoPP__PolynomialMod2ctor_PolynomialMod235_clbk = int64_t (WINAPIV*)(struct CryptoPP::PolynomialMod2*, struct CryptoPP::RandomNumberGenerator*, uint64_t, CryptoPP__PolynomialMod2ctor_PolynomialMod235_ptr);
        using CryptoPP__PolynomialMod2ctor_PolynomialMod236_ptr = int64_t (WINAPIV*)(struct CryptoPP::PolynomialMod2*, uint64_t, uint64_t);
        using CryptoPP__PolynomialMod2ctor_PolynomialMod236_clbk = int64_t (WINAPIV*)(struct CryptoPP::PolynomialMod2*, uint64_t, uint64_t, CryptoPP__PolynomialMod2ctor_PolynomialMod236_ptr);
        using CryptoPP__PolynomialMod2ctor_PolynomialMod237_ptr = void (WINAPIV*)(void*);
        using CryptoPP__PolynomialMod2ctor_PolynomialMod237_clbk = void (WINAPIV*)(void*, CryptoPP__PolynomialMod2ctor_PolynomialMod237_ptr);
        using CryptoPP__PolynomialMod2Randomize38_ptr = void (WINAPIV*)(struct CryptoPP::PolynomialMod2*, struct CryptoPP::RandomNumberGenerator*, uint64_t);
        using CryptoPP__PolynomialMod2Randomize38_clbk = void (WINAPIV*)(struct CryptoPP::PolynomialMod2*, struct CryptoPP::RandomNumberGenerator*, uint64_t, CryptoPP__PolynomialMod2Randomize38_ptr);
        using CryptoPP__PolynomialMod2SetBit39_ptr = void (WINAPIV*)(struct CryptoPP::PolynomialMod2*, uint64_t, int);
        using CryptoPP__PolynomialMod2SetBit39_clbk = void (WINAPIV*)(struct CryptoPP::PolynomialMod2*, uint64_t, int, CryptoPP__PolynomialMod2SetBit39_ptr);
        using CryptoPP__PolynomialMod2SetByte40_ptr = void (WINAPIV*)(struct CryptoPP::PolynomialMod2*, uint64_t, uint8_t);
        using CryptoPP__PolynomialMod2SetByte40_clbk = void (WINAPIV*)(struct CryptoPP::PolynomialMod2*, uint64_t, uint8_t, CryptoPP__PolynomialMod2SetByte40_ptr);
        using CryptoPP__PolynomialMod2SetCoefficient41_ptr = void (WINAPIV*)(struct CryptoPP::PolynomialMod2*, uint64_t, int);
        using CryptoPP__PolynomialMod2SetCoefficient41_clbk = void (WINAPIV*)(struct CryptoPP::PolynomialMod2*, uint64_t, int, CryptoPP__PolynomialMod2SetCoefficient41_ptr);
        using CryptoPP__PolynomialMod2Squared42_ptr = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::PolynomialMod2*, short);
        using CryptoPP__PolynomialMod2Squared42_clbk = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::PolynomialMod2*, short, CryptoPP__PolynomialMod2Squared42_ptr);
        using CryptoPP__PolynomialMod2Times43_ptr = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::PolynomialMod2*, short, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__PolynomialMod2Times43_clbk = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::PolynomialMod2*, short, struct CryptoPP::PolynomialMod2*, CryptoPP__PolynomialMod2Times43_ptr);
        using CryptoPP__PolynomialMod2Trinomial44_ptr = struct CryptoPP::PolynomialMod2* (WINAPIV*)(short, struct CryptoPP::PolynomialMod2*, uint64_t, uint64_t);
        using CryptoPP__PolynomialMod2Trinomial44_clbk = struct CryptoPP::PolynomialMod2* (WINAPIV*)(short, struct CryptoPP::PolynomialMod2*, uint64_t, uint64_t, CryptoPP__PolynomialMod2Trinomial44_ptr);
        using CryptoPP__PolynomialMod2WordCount45_ptr = unsigned int (WINAPIV*)(struct CryptoPP::PolynomialMod2*);
        using CryptoPP__PolynomialMod2WordCount45_clbk = unsigned int (WINAPIV*)(struct CryptoPP::PolynomialMod2*, CryptoPP__PolynomialMod2WordCount45_ptr);
        using CryptoPP__PolynomialMod2Xor46_ptr = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::PolynomialMod2*, short, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__PolynomialMod2Xor46_clbk = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::PolynomialMod2*, short, struct CryptoPP::PolynomialMod2*, CryptoPP__PolynomialMod2Xor46_ptr);
        using CryptoPP__PolynomialMod2Zero47_ptr = struct CryptoPP::PolynomialMod2* (WINAPIV*)();
        using CryptoPP__PolynomialMod2Zero47_clbk = struct CryptoPP::PolynomialMod2* (WINAPIV*)(CryptoPP__PolynomialMod2Zero47_ptr);
        using CryptoPP__PolynomialMod2swap48_ptr = void (WINAPIV*)(struct CryptoPP::PolynomialMod2*, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__PolynomialMod2swap48_clbk = void (WINAPIV*)(struct CryptoPP::PolynomialMod2*, struct CryptoPP::PolynomialMod2*, CryptoPP__PolynomialMod2swap48_ptr);
        using CryptoPP__PolynomialMod2dtor_PolynomialMod249_ptr = void (WINAPIV*)(void*);
        using CryptoPP__PolynomialMod2dtor_PolynomialMod249_clbk = void (WINAPIV*)(void*, CryptoPP__PolynomialMod2dtor_PolynomialMod249_ptr);
        
        using CryptoPP__PolynomialMod2__DivideByZeroctor_DivideByZero1_ptr = int64_t (WINAPIV*)(struct CryptoPP::PolynomialMod2::DivideByZero*, struct CryptoPP::PolynomialMod2::DivideByZero*);
        using CryptoPP__PolynomialMod2__DivideByZeroctor_DivideByZero1_clbk = int64_t (WINAPIV*)(struct CryptoPP::PolynomialMod2::DivideByZero*, struct CryptoPP::PolynomialMod2::DivideByZero*, CryptoPP__PolynomialMod2__DivideByZeroctor_DivideByZero1_ptr);
        using CryptoPP__PolynomialMod2__DivideByZeroctor_DivideByZero2_ptr = int64_t (WINAPIV*)(struct CryptoPP::PolynomialMod2::DivideByZero*);
        using CryptoPP__PolynomialMod2__DivideByZeroctor_DivideByZero2_clbk = int64_t (WINAPIV*)(struct CryptoPP::PolynomialMod2::DivideByZero*, CryptoPP__PolynomialMod2__DivideByZeroctor_DivideByZero2_ptr);
        using CryptoPP__PolynomialMod2__DivideByZerodtor_DivideByZero3_ptr = int64_t (WINAPIV*)(struct CryptoPP::PolynomialMod2::DivideByZero*);
        using CryptoPP__PolynomialMod2__DivideByZerodtor_DivideByZero3_clbk = int64_t (WINAPIV*)(struct CryptoPP::PolynomialMod2::DivideByZero*, CryptoPP__PolynomialMod2__DivideByZerodtor_DivideByZero3_ptr);
        
        using CryptoPP__EC2NPointctor_EC2NPoint1_ptr = int64_t (WINAPIV*)(struct CryptoPP::EC2NPoint*, struct CryptoPP::EC2NPoint*);
        using CryptoPP__EC2NPointctor_EC2NPoint1_clbk = int64_t (WINAPIV*)(struct CryptoPP::EC2NPoint*, struct CryptoPP::EC2NPoint*, CryptoPP__EC2NPointctor_EC2NPoint1_ptr);
        using CryptoPP__EC2NPointctor_EC2NPoint2_ptr = int64_t (WINAPIV*)(struct CryptoPP::EC2NPoint*);
        using CryptoPP__EC2NPointctor_EC2NPoint2_clbk = int64_t (WINAPIV*)(struct CryptoPP::EC2NPoint*, CryptoPP__EC2NPointctor_EC2NPoint2_ptr);
        using CryptoPP__EC2NPointdtor_EC2NPoint3_ptr = int64_t (WINAPIV*)(struct CryptoPP::EC2NPoint*);
        using CryptoPP__EC2NPointdtor_EC2NPoint3_clbk = int64_t (WINAPIV*)(struct CryptoPP::EC2NPoint*, CryptoPP__EC2NPointdtor_EC2NPoint3_ptr);
        
        using CryptoPP__PK_MessageAccumulatorDigestSize1_ptr = unsigned int (WINAPIV*)(struct CryptoPP::PK_MessageAccumulator*);
        using CryptoPP__PK_MessageAccumulatorDigestSize1_clbk = unsigned int (WINAPIV*)(struct CryptoPP::PK_MessageAccumulator*, CryptoPP__PK_MessageAccumulatorDigestSize1_ptr);
        using CryptoPP__PK_MessageAccumulatorctor_PK_MessageAccumulator2_ptr = int64_t (WINAPIV*)(struct CryptoPP::PK_MessageAccumulator*);
        using CryptoPP__PK_MessageAccumulatorctor_PK_MessageAccumulator2_clbk = int64_t (WINAPIV*)(struct CryptoPP::PK_MessageAccumulator*, CryptoPP__PK_MessageAccumulatorctor_PK_MessageAccumulator2_ptr);
        using CryptoPP__PK_MessageAccumulatorTruncatedFinal3_ptr = void (WINAPIV*)(struct CryptoPP::PK_MessageAccumulator*, uint8_t*, uint64_t);
        using CryptoPP__PK_MessageAccumulatorTruncatedFinal3_clbk = void (WINAPIV*)(struct CryptoPP::PK_MessageAccumulator*, uint8_t*, uint64_t, CryptoPP__PK_MessageAccumulatorTruncatedFinal3_ptr);
        using CryptoPP__PK_MessageAccumulatordtor_PK_MessageAccumulator4_ptr = int64_t (WINAPIV*)(struct CryptoPP::PK_MessageAccumulator*);
        using CryptoPP__PK_MessageAccumulatordtor_PK_MessageAccumulator4_clbk = int64_t (WINAPIV*)(struct CryptoPP::PK_MessageAccumulator*, CryptoPP__PK_MessageAccumulatordtor_PK_MessageAccumulator4_ptr);
        
        using CryptoPP__PK_MessageAccumulatorBasector_PK_MessageAccumulatorBase1_ptr = int64_t (WINAPIV*)(struct CryptoPP::PK_MessageAccumulatorBase*);
        using CryptoPP__PK_MessageAccumulatorBasector_PK_MessageAccumulatorBase1_clbk = int64_t (WINAPIV*)(struct CryptoPP::PK_MessageAccumulatorBase*, CryptoPP__PK_MessageAccumulatorBasector_PK_MessageAccumulatorBase1_ptr);
        using CryptoPP__PK_MessageAccumulatorBaseUpdate2_ptr = void (WINAPIV*)(struct CryptoPP::PK_MessageAccumulatorBase*, uint8_t*, uint64_t);
        using CryptoPP__PK_MessageAccumulatorBaseUpdate2_clbk = void (WINAPIV*)(struct CryptoPP::PK_MessageAccumulatorBase*, uint8_t*, uint64_t, CryptoPP__PK_MessageAccumulatorBaseUpdate2_ptr);
        using CryptoPP__PK_MessageAccumulatorBasedtor_PK_MessageAccumulatorBase3_ptr = int64_t (WINAPIV*)(struct CryptoPP::PK_MessageAccumulatorBase*);
        using CryptoPP__PK_MessageAccumulatorBasedtor_PK_MessageAccumulatorBase3_clbk = int64_t (WINAPIV*)(struct CryptoPP::PK_MessageAccumulatorBase*, CryptoPP__PK_MessageAccumulatorBasedtor_PK_MessageAccumulatorBase3_ptr);
        
        using CryptoPP__ClonableImplctor_ClonableImpl2_ptr = void (WINAPIV*)(struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::Rijndael::Enc>*, struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::Rijndael::Enc>*);
        using CryptoPP__ClonableImplctor_ClonableImpl2_clbk = void (WINAPIV*)(struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::Rijndael::Enc>*, struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::Rijndael::Enc>*, CryptoPP__ClonableImplctor_ClonableImpl2_ptr);
        using CryptoPP__ClonableImplctor_ClonableImpl4_ptr = void (WINAPIV*)(struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::Rijndael::Enc>*);
        using CryptoPP__ClonableImplctor_ClonableImpl4_clbk = void (WINAPIV*)(struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::Rijndael::Enc>*, CryptoPP__ClonableImplctor_ClonableImpl4_ptr);
        using CryptoPP__ClonableImplClone6_ptr = struct CryptoPP::Clonable* (WINAPIV*)(struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::Rijndael::Enc>*);
        using CryptoPP__ClonableImplClone6_clbk = struct CryptoPP::Clonable* (WINAPIV*)(struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::Rijndael::Enc>*, CryptoPP__ClonableImplClone6_ptr);
        using CryptoPP__ClonableImpldtor_ClonableImpl8_ptr = void (WINAPIV*)(struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::Rijndael::Enc>*);
        using CryptoPP__ClonableImpldtor_ClonableImpl8_clbk = void (WINAPIV*)(struct CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::Rijndael::Enc>*, CryptoPP__ClonableImpldtor_ClonableImpl8_ptr);
        
        using CryptoPP__BlockCipherFinalctor_BlockCipherFinal2_ptr = void (WINAPIV*)(struct CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>*, struct CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>*);
        using CryptoPP__BlockCipherFinalctor_BlockCipherFinal2_clbk = void (WINAPIV*)(struct CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>*, struct CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>*, CryptoPP__BlockCipherFinalctor_BlockCipherFinal2_ptr);
        using CryptoPP__BlockCipherFinalctor_BlockCipherFinal4_ptr = void (WINAPIV*)(struct CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>*);
        using CryptoPP__BlockCipherFinalctor_BlockCipherFinal4_clbk = void (WINAPIV*)(struct CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>*, CryptoPP__BlockCipherFinalctor_BlockCipherFinal4_ptr);
        using CryptoPP__BlockCipherFinalIsForwardTransformation6_ptr = bool (WINAPIV*)(struct CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>*);
        using CryptoPP__BlockCipherFinalIsForwardTransformation6_clbk = bool (WINAPIV*)(struct CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>*, CryptoPP__BlockCipherFinalIsForwardTransformation6_ptr);
        using CryptoPP__BlockCipherFinaldtor_BlockCipherFinal11_ptr = void (WINAPIV*)(struct CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>*);
        using CryptoPP__BlockCipherFinaldtor_BlockCipherFinal11_clbk = void (WINAPIV*)(struct CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>*, CryptoPP__BlockCipherFinaldtor_BlockCipherFinal11_ptr);
        
        using CryptoPP__CBC_Encryptionctor_CBC_Encryption2_ptr = void (WINAPIV*)(struct CryptoPP::CBC_Encryption*);
        using CryptoPP__CBC_Encryptionctor_CBC_Encryption2_clbk = void (WINAPIV*)(struct CryptoPP::CBC_Encryption*, CryptoPP__CBC_Encryptionctor_CBC_Encryption2_ptr);
        using CryptoPP__CBC_EncryptionProcessBlocks3_ptr = void (WINAPIV*)(struct CryptoPP::CBC_Encryption*, uint8_t*, uint8_t*, uint64_t);
        using CryptoPP__CBC_EncryptionProcessBlocks3_clbk = void (WINAPIV*)(struct CryptoPP::CBC_Encryption*, uint8_t*, uint8_t*, uint64_t, CryptoPP__CBC_EncryptionProcessBlocks3_ptr);
        using CryptoPP__CBC_Encryptiondtor_CBC_Encryption5_ptr = void (WINAPIV*)(struct CryptoPP::CBC_Encryption*);
        using CryptoPP__CBC_Encryptiondtor_CBC_Encryption5_clbk = void (WINAPIV*)(struct CryptoPP::CBC_Encryption*, CryptoPP__CBC_Encryptiondtor_CBC_Encryption5_ptr);
        
        using CryptoPP__CipherModeFinalTemplate_CipherHolderctor_CipherModeFinalTemplate_CipherHolder2_ptr = void (WINAPIV*)(struct CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::CBC_Encryption>*);
        using CryptoPP__CipherModeFinalTemplate_CipherHolderctor_CipherModeFinalTemplate_CipherHolder2_clbk = void (WINAPIV*)(struct CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::CBC_Encryption>*, CryptoPP__CipherModeFinalTemplate_CipherHolderctor_CipherModeFinalTemplate_CipherHolder2_ptr);
        using CryptoPP__CipherModeFinalTemplate_CipherHolderStaticAlgorithmName4_ptr = struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (WINAPIV*)(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*);
        using CryptoPP__CipherModeFinalTemplate_CipherHolderStaticAlgorithmName4_clbk = struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (WINAPIV*)(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, CryptoPP__CipherModeFinalTemplate_CipherHolderStaticAlgorithmName4_ptr);
        using CryptoPP__CipherModeFinalTemplate_CipherHolderdtor_CipherModeFinalTemplate_CipherHolder9_ptr = void (WINAPIV*)(struct CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::CBC_Encryption>*);
        using CryptoPP__CipherModeFinalTemplate_CipherHolderdtor_CipherModeFinalTemplate_CipherHolder9_clbk = void (WINAPIV*)(struct CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Rijndael::Enc>,CryptoPP::CBC_Encryption>*, CryptoPP__CipherModeFinalTemplate_CipherHolderdtor_CipherModeFinalTemplate_CipherHolder9_ptr);
        
        using CryptoPP__DSAGeneratePrimes1_ptr = bool (WINAPIV*)(uint8_t*, unsigned int, struct CryptoPP::Integer*, struct CryptoPP::Integer*, unsigned int, struct CryptoPP::Integer*, bool);
        using CryptoPP__DSAGeneratePrimes1_clbk = bool (WINAPIV*)(uint8_t*, unsigned int, struct CryptoPP::Integer*, struct CryptoPP::Integer*, unsigned int, struct CryptoPP::Integer*, bool, CryptoPP__DSAGeneratePrimes1_ptr);
        using CryptoPP__DSAIsValidPrimeLength2_ptr = bool (WINAPIV*)(unsigned int);
        using CryptoPP__DSAIsValidPrimeLength2_clbk = bool (WINAPIV*)(unsigned int, CryptoPP__DSAIsValidPrimeLength2_ptr);
        using CryptoPP__DSAStaticAlgorithmName3_ptr = char* (WINAPIV*)();
        using CryptoPP__DSAStaticAlgorithmName3_clbk = char* (WINAPIV*)(CryptoPP__DSAStaticAlgorithmName3_ptr);
        
        using CryptoPP__DL_GroupParameters_IntegerBasedAssignFrom1_ptr = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__DL_GroupParameters_IntegerBasedAssignFrom1_clbk = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, struct CryptoPP::NameValuePairs*, CryptoPP__DL_GroupParameters_IntegerBasedAssignFrom1_ptr);
        using CryptoPP__DL_GroupParameters_IntegerBasedBERDecode2_ptr = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__DL_GroupParameters_IntegerBasedBERDecode2_clbk = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, struct CryptoPP::BufferedTransformation*, CryptoPP__DL_GroupParameters_IntegerBasedBERDecode2_ptr);
        using CryptoPP__DL_GroupParameters_IntegerBasedComputeGroupOrder3_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, short, struct CryptoPP::Integer*);
        using CryptoPP__DL_GroupParameters_IntegerBasedComputeGroupOrder3_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, short, struct CryptoPP::Integer*, CryptoPP__DL_GroupParameters_IntegerBasedComputeGroupOrder3_ptr);
        using CryptoPP__DL_GroupParameters_IntegerBasedConvertElementToInteger4_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, short, struct CryptoPP::Integer*);
        using CryptoPP__DL_GroupParameters_IntegerBasedConvertElementToInteger4_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, short, struct CryptoPP::Integer*, CryptoPP__DL_GroupParameters_IntegerBasedConvertElementToInteger4_ptr);
        using CryptoPP__DL_GroupParameters_IntegerBasedDEREncode5_ptr = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__DL_GroupParameters_IntegerBasedDEREncode5_clbk = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, struct CryptoPP::BufferedTransformation*, CryptoPP__DL_GroupParameters_IntegerBasedDEREncode5_ptr);
        using CryptoPP__DL_GroupParameters_IntegerBasedctor_DL_GroupParameters_IntegerBased6_ptr = int64_t (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, struct CryptoPP::DL_GroupParameters_IntegerBased*);
        using CryptoPP__DL_GroupParameters_IntegerBasedctor_DL_GroupParameters_IntegerBased6_clbk = int64_t (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, struct CryptoPP::DL_GroupParameters_IntegerBased*, CryptoPP__DL_GroupParameters_IntegerBasedctor_DL_GroupParameters_IntegerBased6_ptr);
        using CryptoPP__DL_GroupParameters_IntegerBasedctor_DL_GroupParameters_IntegerBased7_ptr = int64_t (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*);
        using CryptoPP__DL_GroupParameters_IntegerBasedctor_DL_GroupParameters_IntegerBased7_clbk = int64_t (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, CryptoPP__DL_GroupParameters_IntegerBasedctor_DL_GroupParameters_IntegerBased7_ptr);
        using CryptoPP__DL_GroupParameters_IntegerBasedDecodeElement8_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, short, struct CryptoPP::Integer*, uint8_t*);
        using CryptoPP__DL_GroupParameters_IntegerBasedDecodeElement8_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, short, struct CryptoPP::Integer*, uint8_t*, CryptoPP__DL_GroupParameters_IntegerBasedDecodeElement8_ptr);
        using CryptoPP__DL_GroupParameters_IntegerBasedEncodeElement9_ptr = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, bool, struct CryptoPP::Integer*, uint8_t*);
        using CryptoPP__DL_GroupParameters_IntegerBasedEncodeElement9_clbk = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, bool, struct CryptoPP::Integer*, uint8_t*, CryptoPP__DL_GroupParameters_IntegerBasedEncodeElement9_ptr);
        using CryptoPP__DL_GroupParameters_IntegerBasedFastSubgroupCheckAvailable10_ptr = bool (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*);
        using CryptoPP__DL_GroupParameters_IntegerBasedFastSubgroupCheckAvailable10_clbk = bool (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, CryptoPP__DL_GroupParameters_IntegerBasedFastSubgroupCheckAvailable10_ptr);
        using CryptoPP__DL_GroupParameters_IntegerBasedGenerateRandom11_ptr = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__DL_GroupParameters_IntegerBasedGenerateRandom11_clbk = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::NameValuePairs*, CryptoPP__DL_GroupParameters_IntegerBasedGenerateRandom11_ptr);
        using CryptoPP__DL_GroupParameters_IntegerBasedGetAlgorithmID12_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, short);
        using CryptoPP__DL_GroupParameters_IntegerBasedGetAlgorithmID12_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, short, CryptoPP__DL_GroupParameters_IntegerBasedGetAlgorithmID12_ptr);
        using CryptoPP__DL_GroupParameters_IntegerBasedGetDefaultSubgroupOrderSize13_ptr = unsigned int (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, unsigned int);
        using CryptoPP__DL_GroupParameters_IntegerBasedGetDefaultSubgroupOrderSize13_clbk = unsigned int (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, unsigned int, CryptoPP__DL_GroupParameters_IntegerBasedGetDefaultSubgroupOrderSize13_ptr);
        using CryptoPP__DL_GroupParameters_IntegerBasedGetEncodedElementSize14_ptr = unsigned int (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, bool);
        using CryptoPP__DL_GroupParameters_IntegerBasedGetEncodedElementSize14_clbk = unsigned int (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, bool, CryptoPP__DL_GroupParameters_IntegerBasedGetEncodedElementSize14_ptr);
        using CryptoPP__DL_GroupParameters_IntegerBasedGetGroupOrder15_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, short);
        using CryptoPP__DL_GroupParameters_IntegerBasedGetGroupOrder15_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, short, CryptoPP__DL_GroupParameters_IntegerBasedGetGroupOrder15_ptr);
        using CryptoPP__DL_GroupParameters_IntegerBasedGetMaxExponent16_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, short);
        using CryptoPP__DL_GroupParameters_IntegerBasedGetMaxExponent16_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, short, CryptoPP__DL_GroupParameters_IntegerBasedGetMaxExponent16_ptr);
        using CryptoPP__DL_GroupParameters_IntegerBasedGetSubgroupOrder17_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*);
        using CryptoPP__DL_GroupParameters_IntegerBasedGetSubgroupOrder17_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, CryptoPP__DL_GroupParameters_IntegerBasedGetSubgroupOrder17_ptr);
        using CryptoPP__DL_GroupParameters_IntegerBasedGetVoidValue18_ptr = bool (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, char*, struct type_info*, void*);
        using CryptoPP__DL_GroupParameters_IntegerBasedGetVoidValue18_clbk = bool (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, char*, struct type_info*, void*, CryptoPP__DL_GroupParameters_IntegerBasedGetVoidValue18_ptr);
        using CryptoPP__DL_GroupParameters_IntegerBasedInitialize19_ptr = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, struct CryptoPP::DL_GroupParameters_IntegerBased*);
        using CryptoPP__DL_GroupParameters_IntegerBasedInitialize19_clbk = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, struct CryptoPP::DL_GroupParameters_IntegerBased*, CryptoPP__DL_GroupParameters_IntegerBasedInitialize19_ptr);
        using CryptoPP__DL_GroupParameters_IntegerBasedInitialize20_ptr = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__DL_GroupParameters_IntegerBasedInitialize20_clbk = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__DL_GroupParameters_IntegerBasedInitialize20_ptr);
        using CryptoPP__DL_GroupParameters_IntegerBasedInitialize21_ptr = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__DL_GroupParameters_IntegerBasedInitialize21_clbk = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__DL_GroupParameters_IntegerBasedInitialize21_ptr);
        using CryptoPP__DL_GroupParameters_IntegerBasedSetSubgroupOrder22_ptr = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, struct CryptoPP::Integer*);
        using CryptoPP__DL_GroupParameters_IntegerBasedSetSubgroupOrder22_clbk = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, struct CryptoPP::Integer*, CryptoPP__DL_GroupParameters_IntegerBasedSetSubgroupOrder22_ptr);
        using CryptoPP__DL_GroupParameters_IntegerBasedValidateGroup23_ptr = bool (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, struct CryptoPP::RandomNumberGenerator*, unsigned int);
        using CryptoPP__DL_GroupParameters_IntegerBasedValidateGroup23_clbk = bool (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, struct CryptoPP::RandomNumberGenerator*, unsigned int, CryptoPP__DL_GroupParameters_IntegerBasedValidateGroup23_ptr);
        using CryptoPP__DL_GroupParameters_IntegerBaseddtor_DL_GroupParameters_IntegerBased24_ptr = int64_t (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*);
        using CryptoPP__DL_GroupParameters_IntegerBaseddtor_DL_GroupParameters_IntegerBased24_clbk = int64_t (WINAPIV*)(struct CryptoPP::DL_GroupParameters_IntegerBased*, CryptoPP__DL_GroupParameters_IntegerBaseddtor_DL_GroupParameters_IntegerBased24_ptr);
        
        using CryptoPP__MontgomeryRepresentationCascadeExponentiate1_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::MontgomeryRepresentation*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__MontgomeryRepresentationCascadeExponentiate1_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::MontgomeryRepresentation*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__MontgomeryRepresentationCascadeExponentiate1_ptr);
        using CryptoPP__MontgomeryRepresentationClone2_ptr = struct CryptoPP::ModularArithmetic* (WINAPIV*)(struct CryptoPP::MontgomeryRepresentation*);
        using CryptoPP__MontgomeryRepresentationClone2_clbk = struct CryptoPP::ModularArithmetic* (WINAPIV*)(struct CryptoPP::MontgomeryRepresentation*, CryptoPP__MontgomeryRepresentationClone2_ptr);
        using CryptoPP__MontgomeryRepresentationConvertIn3_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::MontgomeryRepresentation*, short, struct CryptoPP::Integer*);
        using CryptoPP__MontgomeryRepresentationConvertIn3_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::MontgomeryRepresentation*, short, struct CryptoPP::Integer*, CryptoPP__MontgomeryRepresentationConvertIn3_ptr);
        using CryptoPP__MontgomeryRepresentationConvertOut4_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::MontgomeryRepresentation*, short, struct CryptoPP::Integer*);
        using CryptoPP__MontgomeryRepresentationConvertOut4_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::MontgomeryRepresentation*, short, struct CryptoPP::Integer*, CryptoPP__MontgomeryRepresentationConvertOut4_ptr);
        using CryptoPP__MontgomeryRepresentationIsMontgomeryRepresentation5_ptr = bool (WINAPIV*)(struct CryptoPP::MontgomeryRepresentation*);
        using CryptoPP__MontgomeryRepresentationIsMontgomeryRepresentation5_clbk = bool (WINAPIV*)(struct CryptoPP::MontgomeryRepresentation*, CryptoPP__MontgomeryRepresentationIsMontgomeryRepresentation5_ptr);
        using CryptoPP__MontgomeryRepresentationctor_MontgomeryRepresentation6_ptr = int64_t (WINAPIV*)(struct CryptoPP::MontgomeryRepresentation*, struct CryptoPP::Integer*);
        using CryptoPP__MontgomeryRepresentationctor_MontgomeryRepresentation6_clbk = int64_t (WINAPIV*)(struct CryptoPP::MontgomeryRepresentation*, struct CryptoPP::Integer*, CryptoPP__MontgomeryRepresentationctor_MontgomeryRepresentation6_ptr);
        using CryptoPP__MontgomeryRepresentationctor_MontgomeryRepresentation7_ptr = int64_t (WINAPIV*)(struct CryptoPP::MontgomeryRepresentation*, struct CryptoPP::MontgomeryRepresentation*);
        using CryptoPP__MontgomeryRepresentationctor_MontgomeryRepresentation7_clbk = int64_t (WINAPIV*)(struct CryptoPP::MontgomeryRepresentation*, struct CryptoPP::MontgomeryRepresentation*, CryptoPP__MontgomeryRepresentationctor_MontgomeryRepresentation7_ptr);
        using CryptoPP__MontgomeryRepresentationMultiplicativeIdentity8_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::MontgomeryRepresentation*);
        using CryptoPP__MontgomeryRepresentationMultiplicativeIdentity8_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::MontgomeryRepresentation*, CryptoPP__MontgomeryRepresentationMultiplicativeIdentity8_ptr);
        using CryptoPP__MontgomeryRepresentationMultiplicativeInverse9_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::MontgomeryRepresentation*, struct CryptoPP::Integer*);
        using CryptoPP__MontgomeryRepresentationMultiplicativeInverse9_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::MontgomeryRepresentation*, struct CryptoPP::Integer*, CryptoPP__MontgomeryRepresentationMultiplicativeInverse9_ptr);
        using CryptoPP__MontgomeryRepresentationMultiply10_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::MontgomeryRepresentation*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__MontgomeryRepresentationMultiply10_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::MontgomeryRepresentation*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__MontgomeryRepresentationMultiply10_ptr);
        using CryptoPP__MontgomeryRepresentationSimultaneousExponentiate11_ptr = void (WINAPIV*)(struct CryptoPP::MontgomeryRepresentation*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, unsigned int);
        using CryptoPP__MontgomeryRepresentationSimultaneousExponentiate11_clbk = void (WINAPIV*)(struct CryptoPP::MontgomeryRepresentation*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, unsigned int, CryptoPP__MontgomeryRepresentationSimultaneousExponentiate11_ptr);
        using CryptoPP__MontgomeryRepresentationSquare12_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::MontgomeryRepresentation*, struct CryptoPP::Integer*);
        using CryptoPP__MontgomeryRepresentationSquare12_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::MontgomeryRepresentation*, struct CryptoPP::Integer*, CryptoPP__MontgomeryRepresentationSquare12_ptr);
        using CryptoPP__MontgomeryRepresentationdtor_MontgomeryRepresentation13_ptr = int64_t (WINAPIV*)(struct CryptoPP::MontgomeryRepresentation*);
        using CryptoPP__MontgomeryRepresentationdtor_MontgomeryRepresentation13_clbk = int64_t (WINAPIV*)(struct CryptoPP::MontgomeryRepresentation*, CryptoPP__MontgomeryRepresentationdtor_MontgomeryRepresentation13_ptr);
        
        using CryptoPP__ModExpPrecomputationBERDecodeElement1_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModExpPrecomputation*, short, struct CryptoPP::Integer*);
        using CryptoPP__ModExpPrecomputationBERDecodeElement1_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModExpPrecomputation*, short, struct CryptoPP::Integer*, CryptoPP__ModExpPrecomputationBERDecodeElement1_ptr);
        using CryptoPP__ModExpPrecomputationConvertIn2_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModExpPrecomputation*, short, struct CryptoPP::Integer*);
        using CryptoPP__ModExpPrecomputationConvertIn2_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModExpPrecomputation*, short, struct CryptoPP::Integer*, CryptoPP__ModExpPrecomputationConvertIn2_ptr);
        using CryptoPP__ModExpPrecomputationConvertOut3_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModExpPrecomputation*, short, struct CryptoPP::Integer*);
        using CryptoPP__ModExpPrecomputationConvertOut3_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModExpPrecomputation*, short, struct CryptoPP::Integer*, CryptoPP__ModExpPrecomputationConvertOut3_ptr);
        using CryptoPP__ModExpPrecomputationDEREncodeElement4_ptr = void (WINAPIV*)(struct CryptoPP::ModExpPrecomputation*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::Integer*);
        using CryptoPP__ModExpPrecomputationDEREncodeElement4_clbk = void (WINAPIV*)(struct CryptoPP::ModExpPrecomputation*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::Integer*, CryptoPP__ModExpPrecomputationDEREncodeElement4_ptr);
        using CryptoPP__ModExpPrecomputationGetModulus5_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModExpPrecomputation*);
        using CryptoPP__ModExpPrecomputationGetModulus5_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::ModExpPrecomputation*, CryptoPP__ModExpPrecomputationGetModulus5_ptr);
        using CryptoPP__ModExpPrecomputationctor_ModExpPrecomputation6_ptr = int64_t (WINAPIV*)(struct CryptoPP::ModExpPrecomputation*, struct CryptoPP::ModExpPrecomputation*);
        using CryptoPP__ModExpPrecomputationctor_ModExpPrecomputation6_clbk = int64_t (WINAPIV*)(struct CryptoPP::ModExpPrecomputation*, struct CryptoPP::ModExpPrecomputation*, CryptoPP__ModExpPrecomputationctor_ModExpPrecomputation6_ptr);
        using CryptoPP__ModExpPrecomputationctor_ModExpPrecomputation7_ptr = int64_t (WINAPIV*)(struct CryptoPP::ModExpPrecomputation*);
        using CryptoPP__ModExpPrecomputationctor_ModExpPrecomputation7_clbk = int64_t (WINAPIV*)(struct CryptoPP::ModExpPrecomputation*, CryptoPP__ModExpPrecomputationctor_ModExpPrecomputation7_ptr);
        using CryptoPP__ModExpPrecomputationNeedConversions8_ptr = bool (WINAPIV*)(struct CryptoPP::ModExpPrecomputation*);
        using CryptoPP__ModExpPrecomputationNeedConversions8_clbk = bool (WINAPIV*)(struct CryptoPP::ModExpPrecomputation*, CryptoPP__ModExpPrecomputationNeedConversions8_ptr);
        using CryptoPP__ModExpPrecomputationSetModulus9_ptr = void (WINAPIV*)(struct CryptoPP::ModExpPrecomputation*, struct CryptoPP::Integer*);
        using CryptoPP__ModExpPrecomputationSetModulus9_clbk = void (WINAPIV*)(struct CryptoPP::ModExpPrecomputation*, struct CryptoPP::Integer*, CryptoPP__ModExpPrecomputationSetModulus9_ptr);
        using CryptoPP__ModExpPrecomputationdtor_ModExpPrecomputation10_ptr = int64_t (WINAPIV*)(struct CryptoPP::ModExpPrecomputation*);
        using CryptoPP__ModExpPrecomputationdtor_ModExpPrecomputation10_clbk = int64_t (WINAPIV*)(struct CryptoPP::ModExpPrecomputation*, CryptoPP__ModExpPrecomputationdtor_ModExpPrecomputation10_ptr);
        
        using CryptoPP__DL_GroupParameters_GFPCascadeExponentiate1_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_GFP*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__DL_GroupParameters_GFPCascadeExponentiate1_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_GFP*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__DL_GroupParameters_GFPCascadeExponentiate1_ptr);
        using CryptoPP__DL_GroupParameters_GFPctor_DL_GroupParameters_GFP2_ptr = int64_t (WINAPIV*)(struct CryptoPP::DL_GroupParameters_GFP*, struct CryptoPP::DL_GroupParameters_GFP*);
        using CryptoPP__DL_GroupParameters_GFPctor_DL_GroupParameters_GFP2_clbk = int64_t (WINAPIV*)(struct CryptoPP::DL_GroupParameters_GFP*, struct CryptoPP::DL_GroupParameters_GFP*, CryptoPP__DL_GroupParameters_GFPctor_DL_GroupParameters_GFP2_ptr);
        using CryptoPP__DL_GroupParameters_GFPctor_DL_GroupParameters_GFP3_ptr = int64_t (WINAPIV*)(struct CryptoPP::DL_GroupParameters_GFP*);
        using CryptoPP__DL_GroupParameters_GFPctor_DL_GroupParameters_GFP3_clbk = int64_t (WINAPIV*)(struct CryptoPP::DL_GroupParameters_GFP*, CryptoPP__DL_GroupParameters_GFPctor_DL_GroupParameters_GFP3_ptr);
        using CryptoPP__DL_GroupParameters_GFPGetFieldType4_ptr = int64_t (WINAPIV*)(struct CryptoPP::DL_GroupParameters_GFP*);
        using CryptoPP__DL_GroupParameters_GFPGetFieldType4_clbk = int64_t (WINAPIV*)(struct CryptoPP::DL_GroupParameters_GFP*, CryptoPP__DL_GroupParameters_GFPGetFieldType4_ptr);
        using CryptoPP__DL_GroupParameters_GFPGetVoidValue5_ptr = bool (WINAPIV*)(struct CryptoPP::DL_GroupParameters_GFP*, char*, struct type_info*, void*);
        using CryptoPP__DL_GroupParameters_GFPGetVoidValue5_clbk = bool (WINAPIV*)(struct CryptoPP::DL_GroupParameters_GFP*, char*, struct type_info*, void*, CryptoPP__DL_GroupParameters_GFPGetVoidValue5_ptr);
        using CryptoPP__DL_GroupParameters_GFPIsIdentity6_ptr = bool (WINAPIV*)(struct CryptoPP::DL_GroupParameters_GFP*, struct CryptoPP::Integer*);
        using CryptoPP__DL_GroupParameters_GFPIsIdentity6_clbk = bool (WINAPIV*)(struct CryptoPP::DL_GroupParameters_GFP*, struct CryptoPP::Integer*, CryptoPP__DL_GroupParameters_GFPIsIdentity6_ptr);
        using CryptoPP__DL_GroupParameters_GFPMultiplyElements7_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_GFP*, short, struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__DL_GroupParameters_GFPMultiplyElements7_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::DL_GroupParameters_GFP*, short, struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__DL_GroupParameters_GFPMultiplyElements7_ptr);
        using CryptoPP__DL_GroupParameters_GFPSimultaneousExponentiate8_ptr = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_GFP*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, unsigned int);
        using CryptoPP__DL_GroupParameters_GFPSimultaneousExponentiate8_clbk = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_GFP*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, unsigned int, CryptoPP__DL_GroupParameters_GFPSimultaneousExponentiate8_ptr);
        using CryptoPP__DL_GroupParameters_GFPdtor_DL_GroupParameters_GFP9_ptr = int64_t (WINAPIV*)(struct CryptoPP::DL_GroupParameters_GFP*);
        using CryptoPP__DL_GroupParameters_GFPdtor_DL_GroupParameters_GFP9_clbk = int64_t (WINAPIV*)(struct CryptoPP::DL_GroupParameters_GFP*, CryptoPP__DL_GroupParameters_GFPdtor_DL_GroupParameters_GFP9_ptr);
        
        using CryptoPP__DL_GroupParameters_DSActor_DL_GroupParameters_DSA1_ptr = int64_t (WINAPIV*)(struct CryptoPP::DL_GroupParameters_DSA*, struct CryptoPP::DL_GroupParameters_DSA*);
        using CryptoPP__DL_GroupParameters_DSActor_DL_GroupParameters_DSA1_clbk = int64_t (WINAPIV*)(struct CryptoPP::DL_GroupParameters_DSA*, struct CryptoPP::DL_GroupParameters_DSA*, CryptoPP__DL_GroupParameters_DSActor_DL_GroupParameters_DSA1_ptr);
        using CryptoPP__DL_GroupParameters_DSActor_DL_GroupParameters_DSA2_ptr = int64_t (WINAPIV*)(struct CryptoPP::DL_GroupParameters_DSA*);
        using CryptoPP__DL_GroupParameters_DSActor_DL_GroupParameters_DSA2_clbk = int64_t (WINAPIV*)(struct CryptoPP::DL_GroupParameters_DSA*, CryptoPP__DL_GroupParameters_DSActor_DL_GroupParameters_DSA2_ptr);
        using CryptoPP__DL_GroupParameters_DSAGenerateRandom3_ptr = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_DSA*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__DL_GroupParameters_DSAGenerateRandom3_clbk = void (WINAPIV*)(struct CryptoPP::DL_GroupParameters_DSA*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::NameValuePairs*, CryptoPP__DL_GroupParameters_DSAGenerateRandom3_ptr);
        using CryptoPP__DL_GroupParameters_DSAValidateGroup4_ptr = bool (WINAPIV*)(struct CryptoPP::DL_GroupParameters_DSA*, struct CryptoPP::RandomNumberGenerator*, unsigned int);
        using CryptoPP__DL_GroupParameters_DSAValidateGroup4_clbk = bool (WINAPIV*)(struct CryptoPP::DL_GroupParameters_DSA*, struct CryptoPP::RandomNumberGenerator*, unsigned int, CryptoPP__DL_GroupParameters_DSAValidateGroup4_ptr);
        using CryptoPP__DL_GroupParameters_DSAdtor_DL_GroupParameters_DSA5_ptr = int64_t (WINAPIV*)(struct CryptoPP::DL_GroupParameters_DSA*);
        using CryptoPP__DL_GroupParameters_DSAdtor_DL_GroupParameters_DSA5_clbk = int64_t (WINAPIV*)(struct CryptoPP::DL_GroupParameters_DSA*, CryptoPP__DL_GroupParameters_DSAdtor_DL_GroupParameters_DSA5_ptr);
        
        using CryptoPP__AbstractGroupCascadeScalarMultiply1_ptr = int64_t (WINAPIV*)(int64_t, struct CryptoPP::Integer*);
        using CryptoPP__AbstractGroupCascadeScalarMultiply1_clbk = int64_t (WINAPIV*)(int64_t, struct CryptoPP::Integer*, CryptoPP__AbstractGroupCascadeScalarMultiply1_ptr);
        
        using CryptoPP__AbstractGroupCascadeScalarMultiply1_ptr = int64_t (WINAPIV*)(int64_t, struct CryptoPP::Integer*);
        using CryptoPP__AbstractGroupCascadeScalarMultiply1_clbk = int64_t (WINAPIV*)(int64_t, struct CryptoPP::Integer*, CryptoPP__AbstractGroupCascadeScalarMultiply1_ptr);
        
        using CryptoPP__EuclideanDomainOfDivisionAlgorithm1_ptr = int64_t (WINAPIV*)(struct CryptoPP::PolynomialMod2*);
        using CryptoPP__EuclideanDomainOfDivisionAlgorithm1_clbk = int64_t (WINAPIV*)(struct CryptoPP::PolynomialMod2*, CryptoPP__EuclideanDomainOfDivisionAlgorithm1_ptr);
        
        using CryptoPP__GF2NPBERDecodeElement1_ptr = void (WINAPIV*)(struct CryptoPP::GF2NP*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__GF2NPBERDecodeElement1_clbk = void (WINAPIV*)(struct CryptoPP::GF2NP*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::PolynomialMod2*, CryptoPP__GF2NPBERDecodeElement1_ptr);
        using CryptoPP__GF2NPClone2_ptr = struct CryptoPP::GF2NP* (WINAPIV*)(struct CryptoPP::GF2NP*);
        using CryptoPP__GF2NPClone2_clbk = struct CryptoPP::GF2NP* (WINAPIV*)(struct CryptoPP::GF2NP*, CryptoPP__GF2NPClone2_ptr);
        using CryptoPP__GF2NPDEREncode3_ptr = void (WINAPIV*)(struct CryptoPP::GF2NP*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__GF2NPDEREncode3_clbk = void (WINAPIV*)(struct CryptoPP::GF2NP*, struct CryptoPP::BufferedTransformation*, CryptoPP__GF2NPDEREncode3_ptr);
        using CryptoPP__GF2NPDEREncodeElement4_ptr = void (WINAPIV*)(struct CryptoPP::GF2NP*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__GF2NPDEREncodeElement4_clbk = void (WINAPIV*)(struct CryptoPP::GF2NP*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::PolynomialMod2*, CryptoPP__GF2NPDEREncodeElement4_ptr);
        using CryptoPP__GF2NPEqual5_ptr = bool (WINAPIV*)(struct CryptoPP::GF2NP*, struct CryptoPP::PolynomialMod2*, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__GF2NPEqual5_clbk = bool (WINAPIV*)(struct CryptoPP::GF2NP*, struct CryptoPP::PolynomialMod2*, struct CryptoPP::PolynomialMod2*, CryptoPP__GF2NPEqual5_ptr);
        using CryptoPP__GF2NPctor_GF2NP6_ptr = int64_t (WINAPIV*)(struct CryptoPP::GF2NP*, struct CryptoPP::GF2NP*);
        using CryptoPP__GF2NPctor_GF2NP6_clbk = int64_t (WINAPIV*)(struct CryptoPP::GF2NP*, struct CryptoPP::GF2NP*, CryptoPP__GF2NPctor_GF2NP6_ptr);
        using CryptoPP__GF2NPctor_GF2NP7_ptr = int64_t (WINAPIV*)(struct CryptoPP::GF2NP*, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__GF2NPctor_GF2NP7_clbk = int64_t (WINAPIV*)(struct CryptoPP::GF2NP*, struct CryptoPP::PolynomialMod2*, CryptoPP__GF2NPctor_GF2NP7_ptr);
        using CryptoPP__GF2NPHalfTrace8_ptr = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::GF2NP*, short, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__GF2NPHalfTrace8_clbk = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::GF2NP*, short, struct CryptoPP::PolynomialMod2*, CryptoPP__GF2NPHalfTrace8_ptr);
        using CryptoPP__GF2NPIsUnit9_ptr = bool (WINAPIV*)(struct CryptoPP::GF2NP*, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__GF2NPIsUnit9_clbk = bool (WINAPIV*)(struct CryptoPP::GF2NP*, struct CryptoPP::PolynomialMod2*, CryptoPP__GF2NPIsUnit9_ptr);
        using CryptoPP__GF2NPMaxElementBitLength10_ptr = unsigned int (WINAPIV*)(struct CryptoPP::GF2NP*);
        using CryptoPP__GF2NPMaxElementBitLength10_clbk = unsigned int (WINAPIV*)(struct CryptoPP::GF2NP*, CryptoPP__GF2NPMaxElementBitLength10_ptr);
        using CryptoPP__GF2NPMaxElementByteLength11_ptr = unsigned int (WINAPIV*)(struct CryptoPP::GF2NP*);
        using CryptoPP__GF2NPMaxElementByteLength11_clbk = unsigned int (WINAPIV*)(struct CryptoPP::GF2NP*, CryptoPP__GF2NPMaxElementByteLength11_ptr);
        using CryptoPP__GF2NPSolveQuadraticEquation12_ptr = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::GF2NP*, short, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__GF2NPSolveQuadraticEquation12_clbk = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::GF2NP*, short, struct CryptoPP::PolynomialMod2*, CryptoPP__GF2NPSolveQuadraticEquation12_ptr);
        using CryptoPP__GF2NPSquareRoot13_ptr = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::GF2NP*, short, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__GF2NPSquareRoot13_clbk = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::GF2NP*, short, struct CryptoPP::PolynomialMod2*, CryptoPP__GF2NPSquareRoot13_ptr);
        using CryptoPP__GF2NPdtor_GF2NP14_ptr = int64_t (WINAPIV*)(struct CryptoPP::GF2NP*);
        using CryptoPP__GF2NPdtor_GF2NP14_clbk = int64_t (WINAPIV*)(struct CryptoPP::GF2NP*, CryptoPP__GF2NPdtor_GF2NP14_ptr);
        
        using CryptoPP__EC2NAdd1_ptr = struct CryptoPP::EC2NPoint* (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::EC2NPoint*, struct CryptoPP::EC2NPoint*);
        using CryptoPP__EC2NAdd1_clbk = struct CryptoPP::EC2NPoint* (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::EC2NPoint*, struct CryptoPP::EC2NPoint*, CryptoPP__EC2NAdd1_ptr);
        using CryptoPP__EC2NBERDecodePoint2_ptr = struct CryptoPP::EC2NPoint* (WINAPIV*)(struct CryptoPP::EC2N*, short, struct CryptoPP::EC2NPoint*);
        using CryptoPP__EC2NBERDecodePoint2_clbk = struct CryptoPP::EC2NPoint* (WINAPIV*)(struct CryptoPP::EC2N*, short, struct CryptoPP::EC2NPoint*, CryptoPP__EC2NBERDecodePoint2_ptr);
        using CryptoPP__EC2NCascadeMultiply3_ptr = struct CryptoPP::EC2NPoint* (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::EC2NPoint*, struct CryptoPP::Integer*, struct CryptoPP::EC2NPoint*, struct CryptoPP::Integer*, struct CryptoPP::EC2NPoint*);
        using CryptoPP__EC2NCascadeMultiply3_clbk = struct CryptoPP::EC2NPoint* (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::EC2NPoint*, struct CryptoPP::Integer*, struct CryptoPP::EC2NPoint*, struct CryptoPP::Integer*, struct CryptoPP::EC2NPoint*, CryptoPP__EC2NCascadeMultiply3_ptr);
        using CryptoPP__EC2NDEREncode4_ptr = void (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__EC2NDEREncode4_clbk = void (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::BufferedTransformation*, CryptoPP__EC2NDEREncode4_ptr);
        using CryptoPP__EC2NDEREncodePoint5_ptr = void (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::EC2NPoint*, bool);
        using CryptoPP__EC2NDEREncodePoint5_clbk = void (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::EC2NPoint*, bool, CryptoPP__EC2NDEREncodePoint5_ptr);
        using CryptoPP__EC2NDecodePoint6_ptr = bool (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::EC2NPoint*, struct CryptoPP::BufferedTransformation*, uint64_t);
        using CryptoPP__EC2NDecodePoint6_clbk = bool (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::EC2NPoint*, struct CryptoPP::BufferedTransformation*, uint64_t, CryptoPP__EC2NDecodePoint6_ptr);
        using CryptoPP__EC2NDecodePoint7_ptr = bool (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::EC2NPoint*, uint8_t*, uint64_t);
        using CryptoPP__EC2NDecodePoint7_clbk = bool (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::EC2NPoint*, uint8_t*, uint64_t, CryptoPP__EC2NDecodePoint7_ptr);
        using CryptoPP__EC2NDouble8_ptr = struct CryptoPP::EC2NPoint* (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::EC2NPoint*);
        using CryptoPP__EC2NDouble8_clbk = struct CryptoPP::EC2NPoint* (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::EC2NPoint*, CryptoPP__EC2NDouble8_ptr);
        using CryptoPP__EC2Nctor_EC2N9_ptr = int64_t (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__EC2Nctor_EC2N9_clbk = int64_t (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::BufferedTransformation*, CryptoPP__EC2Nctor_EC2N9_ptr);
        using CryptoPP__EC2Nctor_EC2N10_ptr = int64_t (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::GF2NP*, struct CryptoPP::PolynomialMod2*, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__EC2Nctor_EC2N10_clbk = int64_t (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::GF2NP*, struct CryptoPP::PolynomialMod2*, struct CryptoPP::PolynomialMod2*, CryptoPP__EC2Nctor_EC2N10_ptr);
        using CryptoPP__EC2Nctor_EC2N11_ptr = int64_t (WINAPIV*)(struct CryptoPP::EC2N*);
        using CryptoPP__EC2Nctor_EC2N11_clbk = int64_t (WINAPIV*)(struct CryptoPP::EC2N*, CryptoPP__EC2Nctor_EC2N11_ptr);
        using CryptoPP__EC2NEncodePoint12_ptr = void (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::EC2NPoint*, bool);
        using CryptoPP__EC2NEncodePoint12_clbk = void (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::EC2NPoint*, bool, CryptoPP__EC2NEncodePoint12_ptr);
        using CryptoPP__EC2NEncodePoint13_ptr = void (WINAPIV*)(struct CryptoPP::EC2N*, uint8_t*, struct CryptoPP::EC2NPoint*, bool);
        using CryptoPP__EC2NEncodePoint13_clbk = void (WINAPIV*)(struct CryptoPP::EC2N*, uint8_t*, struct CryptoPP::EC2NPoint*, bool, CryptoPP__EC2NEncodePoint13_ptr);
        using CryptoPP__EC2NEncodedPointSize14_ptr = unsigned int (WINAPIV*)(struct CryptoPP::EC2N*, bool);
        using CryptoPP__EC2NEncodedPointSize14_clbk = unsigned int (WINAPIV*)(struct CryptoPP::EC2N*, bool, CryptoPP__EC2NEncodedPointSize14_ptr);
        using CryptoPP__EC2NEqual15_ptr = bool (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::EC2NPoint*, struct CryptoPP::EC2NPoint*);
        using CryptoPP__EC2NEqual15_clbk = bool (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::EC2NPoint*, struct CryptoPP::EC2NPoint*, CryptoPP__EC2NEqual15_ptr);
        using CryptoPP__EC2NFieldSize16_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::EC2N*, short);
        using CryptoPP__EC2NFieldSize16_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::EC2N*, short, CryptoPP__EC2NFieldSize16_ptr);
        using CryptoPP__EC2NGetField17_ptr = struct CryptoPP::GF2NP* (WINAPIV*)(struct CryptoPP::EC2N*);
        using CryptoPP__EC2NGetField17_clbk = struct CryptoPP::GF2NP* (WINAPIV*)(struct CryptoPP::EC2N*, CryptoPP__EC2NGetField17_ptr);
        using CryptoPP__EC2NIdentity18_ptr = struct CryptoPP::EC2NPoint* (WINAPIV*)(struct CryptoPP::EC2N*);
        using CryptoPP__EC2NIdentity18_clbk = struct CryptoPP::EC2NPoint* (WINAPIV*)(struct CryptoPP::EC2N*, CryptoPP__EC2NIdentity18_ptr);
        using CryptoPP__EC2NInverse19_ptr = struct CryptoPP::EC2NPoint* (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::EC2NPoint*);
        using CryptoPP__EC2NInverse19_clbk = struct CryptoPP::EC2NPoint* (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::EC2NPoint*, CryptoPP__EC2NInverse19_ptr);
        using CryptoPP__EC2NInversionIsFast20_ptr = bool (WINAPIV*)(struct CryptoPP::EC2N*);
        using CryptoPP__EC2NInversionIsFast20_clbk = bool (WINAPIV*)(struct CryptoPP::EC2N*, CryptoPP__EC2NInversionIsFast20_ptr);
        using CryptoPP__EC2NValidateParameters21_ptr = bool (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::RandomNumberGenerator*, unsigned int);
        using CryptoPP__EC2NValidateParameters21_clbk = bool (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::RandomNumberGenerator*, unsigned int, CryptoPP__EC2NValidateParameters21_ptr);
        using CryptoPP__EC2NVerifyPoint22_ptr = bool (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::EC2NPoint*);
        using CryptoPP__EC2NVerifyPoint22_clbk = bool (WINAPIV*)(struct CryptoPP::EC2N*, struct CryptoPP::EC2NPoint*, CryptoPP__EC2NVerifyPoint22_ptr);
        using CryptoPP__EC2Ndtor_EC2N23_ptr = int64_t (WINAPIV*)(struct CryptoPP::EC2N*);
        using CryptoPP__EC2Ndtor_EC2N23_clbk = int64_t (WINAPIV*)(struct CryptoPP::EC2N*, CryptoPP__EC2Ndtor_EC2N23_ptr);
        
        using CryptoPP__DL_GroupParameters_ECCascadeExponentiate1_ptr = int64_t (WINAPIV*)(struct CryptoPP::EC2NPoint*, struct CryptoPP::Integer*);
        using CryptoPP__DL_GroupParameters_ECCascadeExponentiate1_clbk = int64_t (WINAPIV*)(struct CryptoPP::EC2NPoint*, struct CryptoPP::Integer*, CryptoPP__DL_GroupParameters_ECCascadeExponentiate1_ptr);
        
        using CryptoPP__DL_Algorithm_GDSASign1_ptr = int64_t (WINAPIV*)(int64_t, struct CryptoPP::Integer*, int64_t);
        using CryptoPP__DL_Algorithm_GDSASign1_clbk = int64_t (WINAPIV*)(int64_t, struct CryptoPP::Integer*, int64_t, CryptoPP__DL_Algorithm_GDSASign1_ptr);
        using CryptoPP__DL_Algorithm_GDSAVerify2_ptr = int64_t (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__DL_Algorithm_GDSAVerify2_clbk = int64_t (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__DL_Algorithm_GDSAVerify2_ptr);
        
        using CryptoPP__member_ptrdtor_member_ptr2_ptr = void (WINAPIV*)(struct CryptoPP::member_ptr<CryptoPP::BufferedTransformation>*);
        using CryptoPP__member_ptrdtor_member_ptr2_clbk = void (WINAPIV*)(struct CryptoPP::member_ptr<CryptoPP::BufferedTransformation>*, CryptoPP__member_ptrdtor_member_ptr2_ptr);
        
        using CryptoPP__FilterAttachable2_ptr = bool (WINAPIV*)(struct CryptoPP::Filter*);
        using CryptoPP__FilterAttachable2_clbk = bool (WINAPIV*)(struct CryptoPP::Filter*, CryptoPP__FilterAttachable2_ptr);
        using CryptoPP__FilterShouldPropagateMessageEnd4_ptr = bool (WINAPIV*)(struct CryptoPP::Filter*);
        using CryptoPP__FilterShouldPropagateMessageEnd4_clbk = bool (WINAPIV*)(struct CryptoPP::Filter*, CryptoPP__FilterShouldPropagateMessageEnd4_ptr);
        using CryptoPP__FilterShouldPropagateMessageSeriesEnd6_ptr = bool (WINAPIV*)(struct CryptoPP::Filter*);
        using CryptoPP__FilterShouldPropagateMessageSeriesEnd6_clbk = bool (WINAPIV*)(struct CryptoPP::Filter*, CryptoPP__FilterShouldPropagateMessageSeriesEnd6_ptr);
        using CryptoPP__Filterdtor_Filter8_ptr = void (WINAPIV*)(struct CryptoPP::Filter*);
        using CryptoPP__Filterdtor_Filter8_clbk = void (WINAPIV*)(struct CryptoPP::Filter*, CryptoPP__Filterdtor_Filter8_ptr);
        
        using CryptoPP__PK_SignatureSchemeMaxSignatureLength1_ptr = uint64_t (WINAPIV*)(struct CryptoPP::PK_SignatureScheme*, uint64_t);
        using CryptoPP__PK_SignatureSchemeMaxSignatureLength1_clbk = uint64_t (WINAPIV*)(struct CryptoPP::PK_SignatureScheme*, uint64_t, CryptoPP__PK_SignatureSchemeMaxSignatureLength1_ptr);
        using CryptoPP__PK_SignatureSchemector_PK_SignatureScheme2_ptr = int64_t (WINAPIV*)(struct CryptoPP::PK_SignatureScheme*, struct CryptoPP::PK_SignatureScheme*);
        using CryptoPP__PK_SignatureSchemector_PK_SignatureScheme2_clbk = int64_t (WINAPIV*)(struct CryptoPP::PK_SignatureScheme*, struct CryptoPP::PK_SignatureScheme*, CryptoPP__PK_SignatureSchemector_PK_SignatureScheme2_ptr);
        using CryptoPP__PK_SignatureSchemector_PK_SignatureScheme3_ptr = int64_t (WINAPIV*)(struct CryptoPP::PK_SignatureScheme*);
        using CryptoPP__PK_SignatureSchemector_PK_SignatureScheme3_clbk = int64_t (WINAPIV*)(struct CryptoPP::PK_SignatureScheme*, CryptoPP__PK_SignatureSchemector_PK_SignatureScheme3_ptr);
        using CryptoPP__PK_SignatureSchemeSignatureUpfront4_ptr = bool (WINAPIV*)(struct CryptoPP::PK_SignatureScheme*);
        using CryptoPP__PK_SignatureSchemeSignatureUpfront4_clbk = bool (WINAPIV*)(struct CryptoPP::PK_SignatureScheme*, CryptoPP__PK_SignatureSchemeSignatureUpfront4_ptr);
        using CryptoPP__PK_SignatureSchemedtor_PK_SignatureScheme5_ptr = int64_t (WINAPIV*)(struct CryptoPP::PK_SignatureScheme*);
        using CryptoPP__PK_SignatureSchemedtor_PK_SignatureScheme5_clbk = int64_t (WINAPIV*)(struct CryptoPP::PK_SignatureScheme*, CryptoPP__PK_SignatureSchemedtor_PK_SignatureScheme5_ptr);
        
        using CryptoPP__PK_SignatureScheme__InvalidKeyLengthctor_InvalidKeyLength1_ptr = int64_t (WINAPIV*)(struct CryptoPP::PK_SignatureScheme::InvalidKeyLength*, struct CryptoPP::PK_SignatureScheme::InvalidKeyLength*);
        using CryptoPP__PK_SignatureScheme__InvalidKeyLengthctor_InvalidKeyLength1_clbk = int64_t (WINAPIV*)(struct CryptoPP::PK_SignatureScheme::InvalidKeyLength*, struct CryptoPP::PK_SignatureScheme::InvalidKeyLength*, CryptoPP__PK_SignatureScheme__InvalidKeyLengthctor_InvalidKeyLength1_ptr);
        using CryptoPP__PK_SignatureScheme__InvalidKeyLengthdtor_InvalidKeyLength2_ptr = int64_t (WINAPIV*)(struct CryptoPP::PK_SignatureScheme::InvalidKeyLength*);
        using CryptoPP__PK_SignatureScheme__InvalidKeyLengthdtor_InvalidKeyLength2_clbk = int64_t (WINAPIV*)(struct CryptoPP::PK_SignatureScheme::InvalidKeyLength*, CryptoPP__PK_SignatureScheme__InvalidKeyLengthdtor_InvalidKeyLength2_ptr);
        
        using CryptoPP__PK_SignatureScheme__KeyTooShortctor_KeyTooShort1_ptr = int64_t (WINAPIV*)(struct CryptoPP::PK_SignatureScheme::KeyTooShort*, struct CryptoPP::PK_SignatureScheme::KeyTooShort*);
        using CryptoPP__PK_SignatureScheme__KeyTooShortctor_KeyTooShort1_clbk = int64_t (WINAPIV*)(struct CryptoPP::PK_SignatureScheme::KeyTooShort*, struct CryptoPP::PK_SignatureScheme::KeyTooShort*, CryptoPP__PK_SignatureScheme__KeyTooShortctor_KeyTooShort1_ptr);
        using CryptoPP__PK_SignatureScheme__KeyTooShortctor_KeyTooShort2_ptr = int64_t (WINAPIV*)(struct CryptoPP::PK_SignatureScheme::KeyTooShort*);
        using CryptoPP__PK_SignatureScheme__KeyTooShortctor_KeyTooShort2_clbk = int64_t (WINAPIV*)(struct CryptoPP::PK_SignatureScheme::KeyTooShort*, CryptoPP__PK_SignatureScheme__KeyTooShortctor_KeyTooShort2_ptr);
        using CryptoPP__PK_SignatureScheme__KeyTooShortdtor_KeyTooShort3_ptr = int64_t (WINAPIV*)(struct CryptoPP::PK_SignatureScheme::KeyTooShort*);
        using CryptoPP__PK_SignatureScheme__KeyTooShortdtor_KeyTooShort3_clbk = int64_t (WINAPIV*)(struct CryptoPP::PK_SignatureScheme::KeyTooShort*, CryptoPP__PK_SignatureScheme__KeyTooShortdtor_KeyTooShort3_ptr);
        
        using CryptoPP__PK_Signerctor_PK_Signer1_ptr = int64_t (WINAPIV*)(struct CryptoPP::PK_Signer*, struct CryptoPP::PK_Signer*);
        using CryptoPP__PK_Signerctor_PK_Signer1_clbk = int64_t (WINAPIV*)(struct CryptoPP::PK_Signer*, struct CryptoPP::PK_Signer*, CryptoPP__PK_Signerctor_PK_Signer1_ptr);
        using CryptoPP__PK_Signerctor_PK_Signer2_ptr = int64_t (WINAPIV*)(struct CryptoPP::PK_Signer*);
        using CryptoPP__PK_Signerctor_PK_Signer2_clbk = int64_t (WINAPIV*)(struct CryptoPP::PK_Signer*, CryptoPP__PK_Signerctor_PK_Signer2_ptr);
        using CryptoPP__PK_SignerSign3_ptr = uint64_t (WINAPIV*)(struct CryptoPP::PK_Signer*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::PK_MessageAccumulator*, uint8_t*);
        using CryptoPP__PK_SignerSign3_clbk = uint64_t (WINAPIV*)(struct CryptoPP::PK_Signer*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::PK_MessageAccumulator*, uint8_t*, CryptoPP__PK_SignerSign3_ptr);
        using CryptoPP__PK_SignerSignMessage4_ptr = uint64_t (WINAPIV*)(struct CryptoPP::PK_Signer*, struct CryptoPP::RandomNumberGenerator*, uint8_t*, uint64_t, uint8_t*);
        using CryptoPP__PK_SignerSignMessage4_clbk = uint64_t (WINAPIV*)(struct CryptoPP::PK_Signer*, struct CryptoPP::RandomNumberGenerator*, uint8_t*, uint64_t, uint8_t*, CryptoPP__PK_SignerSignMessage4_ptr);
        using CryptoPP__PK_SignerSignMessageWithRecovery5_ptr = uint64_t (WINAPIV*)(struct CryptoPP::PK_Signer*, struct CryptoPP::RandomNumberGenerator*, uint8_t*, uint64_t, uint8_t*, uint64_t, uint8_t*);
        using CryptoPP__PK_SignerSignMessageWithRecovery5_clbk = uint64_t (WINAPIV*)(struct CryptoPP::PK_Signer*, struct CryptoPP::RandomNumberGenerator*, uint8_t*, uint64_t, uint8_t*, uint64_t, uint8_t*, CryptoPP__PK_SignerSignMessageWithRecovery5_ptr);
        using CryptoPP__PK_Signerdtor_PK_Signer6_ptr = int64_t (WINAPIV*)(struct CryptoPP::PK_Signer*);
        using CryptoPP__PK_Signerdtor_PK_Signer6_clbk = int64_t (WINAPIV*)(struct CryptoPP::PK_Signer*, CryptoPP__PK_Signerdtor_PK_Signer6_ptr);
        
        using CryptoPP__PK_Verifierctor_PK_Verifier1_ptr = int64_t (WINAPIV*)(struct CryptoPP::PK_Verifier*);
        using CryptoPP__PK_Verifierctor_PK_Verifier1_clbk = int64_t (WINAPIV*)(struct CryptoPP::PK_Verifier*, CryptoPP__PK_Verifierctor_PK_Verifier1_ptr);
        using CryptoPP__PK_VerifierRecover2_ptr = struct CryptoPP::DecodingResult* (WINAPIV*)(struct CryptoPP::PK_Verifier*, short, struct CryptoPP::DecodingResult*, uint8_t*);
        using CryptoPP__PK_VerifierRecover2_clbk = struct CryptoPP::DecodingResult* (WINAPIV*)(struct CryptoPP::PK_Verifier*, short, struct CryptoPP::DecodingResult*, uint8_t*, CryptoPP__PK_VerifierRecover2_ptr);
        using CryptoPP__PK_VerifierRecoverMessage3_ptr = struct CryptoPP::DecodingResult* (WINAPIV*)(struct CryptoPP::PK_Verifier*, struct CryptoPP::DecodingResult*, uint8_t*, uint8_t*, uint64_t, uint8_t*, uint64_t);
        using CryptoPP__PK_VerifierRecoverMessage3_clbk = struct CryptoPP::DecodingResult* (WINAPIV*)(struct CryptoPP::PK_Verifier*, struct CryptoPP::DecodingResult*, uint8_t*, uint8_t*, uint64_t, uint8_t*, uint64_t, CryptoPP__PK_VerifierRecoverMessage3_ptr);
        using CryptoPP__PK_VerifierVerify4_ptr = bool (WINAPIV*)(struct CryptoPP::PK_Verifier*, struct CryptoPP::PK_MessageAccumulator*);
        using CryptoPP__PK_VerifierVerify4_clbk = bool (WINAPIV*)(struct CryptoPP::PK_Verifier*, struct CryptoPP::PK_MessageAccumulator*, CryptoPP__PK_VerifierVerify4_ptr);
        using CryptoPP__PK_VerifierVerifyMessage5_ptr = bool (WINAPIV*)(struct CryptoPP::PK_Verifier*, uint8_t*, uint64_t, uint8_t*, uint64_t);
        using CryptoPP__PK_VerifierVerifyMessage5_clbk = bool (WINAPIV*)(struct CryptoPP::PK_Verifier*, uint8_t*, uint64_t, uint8_t*, uint64_t, CryptoPP__PK_VerifierVerifyMessage5_ptr);
        using CryptoPP__PK_Verifierdtor_PK_Verifier6_ptr = int64_t (WINAPIV*)(struct CryptoPP::PK_Verifier*);
        using CryptoPP__PK_Verifierdtor_PK_Verifier6_clbk = int64_t (WINAPIV*)(struct CryptoPP::PK_Verifier*, CryptoPP__PK_Verifierdtor_PK_Verifier6_ptr);
        
        using CryptoPP__VariableKeyLengthStaticGetValidKeyLength2_ptr = uint64_t (WINAPIV*)(uint64_t);
        using CryptoPP__VariableKeyLengthStaticGetValidKeyLength2_clbk = uint64_t (WINAPIV*)(uint64_t, CryptoPP__VariableKeyLengthStaticGetValidKeyLength2_ptr);
        
        using CryptoPP__SimpleKeyedTransformationGetAlgorithm2_ptr = struct CryptoPP::Algorithm* (WINAPIV*)(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::HashTransformation>*);
        using CryptoPP__SimpleKeyedTransformationGetAlgorithm2_clbk = struct CryptoPP::Algorithm* (WINAPIV*)(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::HashTransformation>*, CryptoPP__SimpleKeyedTransformationGetAlgorithm2_ptr);
        using CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_ptr = void (WINAPIV*)(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::HashTransformation>*);
        using CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_clbk = void (WINAPIV*)(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::HashTransformation>*, CryptoPP__SimpleKeyedTransformationctor_SimpleKeyedTransformation4_ptr);
        using CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation6_ptr = void (WINAPIV*)(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::HashTransformation>*);
        using CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation6_clbk = void (WINAPIV*)(struct CryptoPP::SimpleKeyedTransformation<CryptoPP::HashTransformation>*, CryptoPP__SimpleKeyedTransformationdtor_SimpleKeyedTransformation6_ptr);
        
        using CryptoPP__HMAC_BaseAccessInnerHash1_ptr = uint8_t* (WINAPIV*)(struct CryptoPP::HMAC_Base*);
        using CryptoPP__HMAC_BaseAccessInnerHash1_clbk = uint8_t* (WINAPIV*)(struct CryptoPP::HMAC_Base*, CryptoPP__HMAC_BaseAccessInnerHash1_ptr);
        using CryptoPP__HMAC_BaseAccessIpad2_ptr = uint8_t* (WINAPIV*)(struct CryptoPP::HMAC_Base*);
        using CryptoPP__HMAC_BaseAccessIpad2_clbk = uint8_t* (WINAPIV*)(struct CryptoPP::HMAC_Base*, CryptoPP__HMAC_BaseAccessIpad2_ptr);
        using CryptoPP__HMAC_BaseAccessOpad3_ptr = uint8_t* (WINAPIV*)(struct CryptoPP::HMAC_Base*);
        using CryptoPP__HMAC_BaseAccessOpad3_clbk = uint8_t* (WINAPIV*)(struct CryptoPP::HMAC_Base*, CryptoPP__HMAC_BaseAccessOpad3_ptr);
        using CryptoPP__HMAC_BaseDigestSize5_ptr = unsigned int (WINAPIV*)(struct CryptoPP::HMAC_Base*);
        using CryptoPP__HMAC_BaseDigestSize5_clbk = unsigned int (WINAPIV*)(struct CryptoPP::HMAC_Base*, CryptoPP__HMAC_BaseDigestSize5_ptr);
        using CryptoPP__HMAC_Basector_HMAC_Base7_ptr = void (WINAPIV*)(struct CryptoPP::HMAC_Base*);
        using CryptoPP__HMAC_Basector_HMAC_Base7_clbk = void (WINAPIV*)(struct CryptoPP::HMAC_Base*, CryptoPP__HMAC_Basector_HMAC_Base7_ptr);
        using CryptoPP__HMAC_BaseKeyInnerHash8_ptr = void (WINAPIV*)(struct CryptoPP::HMAC_Base*);
        using CryptoPP__HMAC_BaseKeyInnerHash8_clbk = void (WINAPIV*)(struct CryptoPP::HMAC_Base*, CryptoPP__HMAC_BaseKeyInnerHash8_ptr);
        using CryptoPP__HMAC_BaseOptimalBlockSize10_ptr = unsigned int (WINAPIV*)(struct CryptoPP::HMAC_Base*);
        using CryptoPP__HMAC_BaseOptimalBlockSize10_clbk = unsigned int (WINAPIV*)(struct CryptoPP::HMAC_Base*, CryptoPP__HMAC_BaseOptimalBlockSize10_ptr);
        using CryptoPP__HMAC_BaseRestart11_ptr = void (WINAPIV*)(struct CryptoPP::HMAC_Base*);
        using CryptoPP__HMAC_BaseRestart11_clbk = void (WINAPIV*)(struct CryptoPP::HMAC_Base*, CryptoPP__HMAC_BaseRestart11_ptr);
        using CryptoPP__HMAC_BaseTruncatedFinal12_ptr = void (WINAPIV*)(struct CryptoPP::HMAC_Base*, uint8_t*, uint64_t);
        using CryptoPP__HMAC_BaseTruncatedFinal12_clbk = void (WINAPIV*)(struct CryptoPP::HMAC_Base*, uint8_t*, uint64_t, CryptoPP__HMAC_BaseTruncatedFinal12_ptr);
        using CryptoPP__HMAC_BaseUncheckedSetKey13_ptr = void (WINAPIV*)(struct CryptoPP::HMAC_Base*, uint8_t*, unsigned int, struct CryptoPP::NameValuePairs*);
        using CryptoPP__HMAC_BaseUncheckedSetKey13_clbk = void (WINAPIV*)(struct CryptoPP::HMAC_Base*, uint8_t*, unsigned int, struct CryptoPP::NameValuePairs*, CryptoPP__HMAC_BaseUncheckedSetKey13_ptr);
        using CryptoPP__HMAC_BaseUpdate14_ptr = void (WINAPIV*)(struct CryptoPP::HMAC_Base*, uint8_t*, uint64_t);
        using CryptoPP__HMAC_BaseUpdate14_clbk = void (WINAPIV*)(struct CryptoPP::HMAC_Base*, uint8_t*, uint64_t, CryptoPP__HMAC_BaseUpdate14_ptr);
        using CryptoPP__HMAC_Basedtor_HMAC_Base16_ptr = void (WINAPIV*)(struct CryptoPP::HMAC_Base*);
        using CryptoPP__HMAC_Basedtor_HMAC_Base16_clbk = void (WINAPIV*)(struct CryptoPP::HMAC_Base*, CryptoPP__HMAC_Basedtor_HMAC_Base16_ptr);
        
        using CryptoPP__Sinkctor_Sink1_ptr = int64_t (WINAPIV*)(struct CryptoPP::Sink*);
        using CryptoPP__Sinkctor_Sink1_clbk = int64_t (WINAPIV*)(struct CryptoPP::Sink*, CryptoPP__Sinkctor_Sink1_ptr);
        using CryptoPP__Sinkdtor_Sink2_ptr = int64_t (WINAPIV*)(struct CryptoPP::Sink*);
        using CryptoPP__Sinkdtor_Sink2_clbk = int64_t (WINAPIV*)(struct CryptoPP::Sink*, CryptoPP__Sinkdtor_Sink2_ptr);
        
        using CryptoPP__InputRejectingChannelMessageSeriesEnd2_ptr = bool (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, int, bool);
        using CryptoPP__InputRejectingChannelMessageSeriesEnd2_clbk = bool (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, int, bool, CryptoPP__InputRejectingChannelMessageSeriesEnd2_ptr);
        using CryptoPP__InputRejectingChannelPut24_ptr = uint64_t (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, char*, uint64_t, int, bool);
        using CryptoPP__InputRejectingChannelPut24_clbk = uint64_t (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, char*, uint64_t, int, bool, CryptoPP__InputRejectingChannelPut24_ptr);
        using CryptoPP__InputRejectingctor_InputRejecting6_ptr = void (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>*);
        using CryptoPP__InputRejectingctor_InputRejecting6_clbk = void (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>*, CryptoPP__InputRejectingctor_InputRejecting6_ptr);
        using CryptoPP__InputRejectingIsolatedFlush8_ptr = bool (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>*, bool, bool);
        using CryptoPP__InputRejectingIsolatedFlush8_clbk = bool (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>*, bool, bool, CryptoPP__InputRejectingIsolatedFlush8_ptr);
        using CryptoPP__InputRejectingIsolatedMessageSeriesEnd10_ptr = bool (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>*, bool);
        using CryptoPP__InputRejectingIsolatedMessageSeriesEnd10_clbk = bool (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>*, bool, CryptoPP__InputRejectingIsolatedMessageSeriesEnd10_ptr);
        using CryptoPP__InputRejectingPut212_ptr = uint64_t (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>*, char*, uint64_t, int, bool);
        using CryptoPP__InputRejectingPut212_clbk = uint64_t (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>*, char*, uint64_t, int, bool, CryptoPP__InputRejectingPut212_ptr);
        using CryptoPP__InputRejectingdtor_InputRejecting14_ptr = void (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>*);
        using CryptoPP__InputRejectingdtor_InputRejecting14_clbk = void (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>*, CryptoPP__InputRejectingdtor_InputRejecting14_ptr);
        
        using CryptoPP__InputRejecting__InputRejectedctor_InputRejected2_ptr = void (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected*, struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected*);
        using CryptoPP__InputRejecting__InputRejectedctor_InputRejected2_clbk = void (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected*, struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected*, CryptoPP__InputRejecting__InputRejectedctor_InputRejected2_ptr);
        using CryptoPP__InputRejecting__InputRejectedctor_InputRejected4_ptr = void (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected*);
        using CryptoPP__InputRejecting__InputRejectedctor_InputRejected4_clbk = void (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected*, CryptoPP__InputRejecting__InputRejectedctor_InputRejected4_ptr);
        using CryptoPP__InputRejecting__InputRejecteddtor_InputRejected9_ptr = void (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected*);
        using CryptoPP__InputRejecting__InputRejecteddtor_InputRejected9_clbk = void (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected*, CryptoPP__InputRejecting__InputRejecteddtor_InputRejected9_ptr);
        
        using CryptoPP__StoreGetNextMessage1_ptr = bool (WINAPIV*)(struct CryptoPP::Store*);
        using CryptoPP__StoreGetNextMessage1_clbk = bool (WINAPIV*)(struct CryptoPP::Store*, CryptoPP__StoreGetNextMessage1_ptr);
        using CryptoPP__StoreIsolatedInitialize3_ptr = void (WINAPIV*)(struct CryptoPP::Store*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__StoreIsolatedInitialize3_clbk = void (WINAPIV*)(struct CryptoPP::Store*, struct CryptoPP::NameValuePairs*, CryptoPP__StoreIsolatedInitialize3_ptr);
        using CryptoPP__StoreNumberOfMessages5_ptr = unsigned int (WINAPIV*)(struct CryptoPP::Store*);
        using CryptoPP__StoreNumberOfMessages5_clbk = unsigned int (WINAPIV*)(struct CryptoPP::Store*, CryptoPP__StoreNumberOfMessages5_ptr);
        using CryptoPP__Storector_Store7_ptr = void (WINAPIV*)(struct CryptoPP::Store*);
        using CryptoPP__Storector_Store7_clbk = void (WINAPIV*)(struct CryptoPP::Store*, CryptoPP__Storector_Store7_ptr);
        using CryptoPP__Storedtor_Store9_ptr = void (WINAPIV*)(struct CryptoPP::Store*);
        using CryptoPP__Storedtor_Store9_clbk = void (WINAPIV*)(struct CryptoPP::Store*, CryptoPP__Storedtor_Store9_ptr);
        
        using CryptoPP__ArraySinkctor_ArraySink1_ptr = int64_t (WINAPIV*)(struct CryptoPP::ArraySink*, uint8_t*, uint64_t);
        using CryptoPP__ArraySinkctor_ArraySink1_clbk = int64_t (WINAPIV*)(struct CryptoPP::ArraySink*, uint8_t*, uint64_t, CryptoPP__ArraySinkctor_ArraySink1_ptr);
        using CryptoPP__ArraySinkAvailableSize2_ptr = uint64_t (WINAPIV*)(struct CryptoPP::ArraySink*);
        using CryptoPP__ArraySinkAvailableSize2_clbk = uint64_t (WINAPIV*)(struct CryptoPP::ArraySink*, CryptoPP__ArraySinkAvailableSize2_ptr);
        using CryptoPP__ArraySinkCreatePutSpace3_ptr = uint8_t* (WINAPIV*)(struct CryptoPP::ArraySink*, uint64_t*);
        using CryptoPP__ArraySinkCreatePutSpace3_clbk = uint8_t* (WINAPIV*)(struct CryptoPP::ArraySink*, uint64_t*, CryptoPP__ArraySinkCreatePutSpace3_ptr);
        using CryptoPP__ArraySinkIsolatedInitialize4_ptr = void (WINAPIV*)(struct CryptoPP::ArraySink*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__ArraySinkIsolatedInitialize4_clbk = void (WINAPIV*)(struct CryptoPP::ArraySink*, struct CryptoPP::NameValuePairs*, CryptoPP__ArraySinkIsolatedInitialize4_ptr);
        using CryptoPP__ArraySinkPut25_ptr = uint64_t (WINAPIV*)(struct CryptoPP::ArraySink*, uint8_t*, uint64_t, int, bool);
        using CryptoPP__ArraySinkPut25_clbk = uint64_t (WINAPIV*)(struct CryptoPP::ArraySink*, uint8_t*, uint64_t, int, bool, CryptoPP__ArraySinkPut25_ptr);
        using CryptoPP__ArraySinkTotalPutLength6_ptr = uint64_t (WINAPIV*)(struct CryptoPP::ArraySink*);
        using CryptoPP__ArraySinkTotalPutLength6_clbk = uint64_t (WINAPIV*)(struct CryptoPP::ArraySink*, CryptoPP__ArraySinkTotalPutLength6_ptr);
        using CryptoPP__ArraySinkdtor_ArraySink7_ptr = int64_t (WINAPIV*)(struct CryptoPP::ArraySink*);
        using CryptoPP__ArraySinkdtor_ArraySink7_clbk = int64_t (WINAPIV*)(struct CryptoPP::ArraySink*, CryptoPP__ArraySinkdtor_ArraySink7_ptr);
        
        using CryptoPP__StringStoreStoreInitialize1_ptr = void (WINAPIV*)(struct CryptoPP::StringStore*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__StringStoreStoreInitialize1_clbk = void (WINAPIV*)(struct CryptoPP::StringStore*, struct CryptoPP::NameValuePairs*, CryptoPP__StringStoreStoreInitialize1_ptr);
        using CryptoPP__StringStorector_StringStore2_ptr = int64_t (WINAPIV*)(struct CryptoPP::StringStore*, char*);
        using CryptoPP__StringStorector_StringStore2_clbk = int64_t (WINAPIV*)(struct CryptoPP::StringStore*, char*, CryptoPP__StringStorector_StringStore2_ptr);
        using CryptoPP__StringStorector_StringStore3_ptr = int64_t (WINAPIV*)(struct CryptoPP::StringStore*, uint8_t*, uint64_t);
        using CryptoPP__StringStorector_StringStore3_clbk = int64_t (WINAPIV*)(struct CryptoPP::StringStore*, uint8_t*, uint64_t, CryptoPP__StringStorector_StringStore3_ptr);
        using CryptoPP__StringStoredtor_StringStore4_ptr = int64_t (WINAPIV*)(struct CryptoPP::StringStore*);
        using CryptoPP__StringStoredtor_StringStore4_clbk = int64_t (WINAPIV*)(struct CryptoPP::StringStore*, CryptoPP__StringStoredtor_StringStore4_ptr);
        
        using CryptoPP__GF2NTClone1_ptr = struct CryptoPP::GF2NP* (WINAPIV*)(struct CryptoPP::GF2NT*);
        using CryptoPP__GF2NTClone1_clbk = struct CryptoPP::GF2NP* (WINAPIV*)(struct CryptoPP::GF2NT*, CryptoPP__GF2NTClone1_ptr);
        using CryptoPP__GF2NTDEREncode2_ptr = void (WINAPIV*)(struct CryptoPP::GF2NT*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__GF2NTDEREncode2_clbk = void (WINAPIV*)(struct CryptoPP::GF2NT*, struct CryptoPP::BufferedTransformation*, CryptoPP__GF2NTDEREncode2_ptr);
        using CryptoPP__GF2NTctor_GF2NT3_ptr = int64_t (WINAPIV*)(struct CryptoPP::GF2NT*, struct CryptoPP::GF2NT*);
        using CryptoPP__GF2NTctor_GF2NT3_clbk = int64_t (WINAPIV*)(struct CryptoPP::GF2NT*, struct CryptoPP::GF2NT*, CryptoPP__GF2NTctor_GF2NT3_ptr);
        using CryptoPP__GF2NTctor_GF2NT4_ptr = int64_t (WINAPIV*)(struct CryptoPP::GF2NT*, unsigned int, unsigned int, unsigned int);
        using CryptoPP__GF2NTctor_GF2NT4_clbk = int64_t (WINAPIV*)(struct CryptoPP::GF2NT*, unsigned int, unsigned int, unsigned int, CryptoPP__GF2NTctor_GF2NT4_ptr);
        using CryptoPP__GF2NTMultiplicativeInverse5_ptr = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::GF2NT*, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__GF2NTMultiplicativeInverse5_clbk = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::GF2NT*, struct CryptoPP::PolynomialMod2*, CryptoPP__GF2NTMultiplicativeInverse5_ptr);
        using CryptoPP__GF2NTMultiply6_ptr = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::GF2NT*, struct CryptoPP::PolynomialMod2*, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__GF2NTMultiply6_clbk = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::GF2NT*, struct CryptoPP::PolynomialMod2*, struct CryptoPP::PolynomialMod2*, CryptoPP__GF2NTMultiply6_ptr);
        using CryptoPP__GF2NTReduced7_ptr = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::GF2NT*, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__GF2NTReduced7_clbk = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::GF2NT*, struct CryptoPP::PolynomialMod2*, CryptoPP__GF2NTReduced7_ptr);
        using CryptoPP__GF2NTSquare8_ptr = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::GF2NT*, struct CryptoPP::PolynomialMod2*);
        using CryptoPP__GF2NTSquare8_clbk = struct CryptoPP::PolynomialMod2* (WINAPIV*)(struct CryptoPP::GF2NT*, struct CryptoPP::PolynomialMod2*, CryptoPP__GF2NTSquare8_ptr);
        using CryptoPP__GF2NTdtor_GF2NT9_ptr = int64_t (WINAPIV*)(struct CryptoPP::GF2NT*);
        using CryptoPP__GF2NTdtor_GF2NT9_clbk = int64_t (WINAPIV*)(struct CryptoPP::GF2NT*, CryptoPP__GF2NTdtor_GF2NT9_ptr);
        
        using CryptoPP__MaskGeneratingFunctionctor_MaskGeneratingFunction1_ptr = int64_t (WINAPIV*)(struct CryptoPP::MaskGeneratingFunction*);
        using CryptoPP__MaskGeneratingFunctionctor_MaskGeneratingFunction1_clbk = int64_t (WINAPIV*)(struct CryptoPP::MaskGeneratingFunction*, CryptoPP__MaskGeneratingFunctionctor_MaskGeneratingFunction1_ptr);
        using CryptoPP__MaskGeneratingFunctiondtor_MaskGeneratingFunction2_ptr = int64_t (WINAPIV*)(struct CryptoPP::MaskGeneratingFunction*);
        using CryptoPP__MaskGeneratingFunctiondtor_MaskGeneratingFunction2_clbk = int64_t (WINAPIV*)(struct CryptoPP::MaskGeneratingFunction*, CryptoPP__MaskGeneratingFunctiondtor_MaskGeneratingFunction2_ptr);
        
        using CryptoPP__P1363_MGF1GenerateAndMask1_ptr = void (WINAPIV*)(struct CryptoPP::P1363_MGF1*, struct CryptoPP::HashTransformation*, uint8_t*, char, uint8_t*, uint64_t, bool);
        using CryptoPP__P1363_MGF1GenerateAndMask1_clbk = void (WINAPIV*)(struct CryptoPP::P1363_MGF1*, struct CryptoPP::HashTransformation*, uint8_t*, char, uint8_t*, uint64_t, bool, CryptoPP__P1363_MGF1GenerateAndMask1_ptr);
        using CryptoPP__P1363_MGF1ctor_P1363_MGF12_ptr = int64_t (WINAPIV*)(struct CryptoPP::P1363_MGF1*);
        using CryptoPP__P1363_MGF1ctor_P1363_MGF12_clbk = int64_t (WINAPIV*)(struct CryptoPP::P1363_MGF1*, CryptoPP__P1363_MGF1ctor_P1363_MGF12_ptr);
        using CryptoPP__P1363_MGF1StaticAlgorithmName3_ptr = char* (WINAPIV*)();
        using CryptoPP__P1363_MGF1StaticAlgorithmName3_clbk = char* (WINAPIV*)(CryptoPP__P1363_MGF1StaticAlgorithmName3_ptr);
        using CryptoPP__P1363_MGF1dtor_P1363_MGF14_ptr = int64_t (WINAPIV*)(struct CryptoPP::P1363_MGF1*);
        using CryptoPP__P1363_MGF1dtor_P1363_MGF14_clbk = int64_t (WINAPIV*)(struct CryptoPP::P1363_MGF1*, CryptoPP__P1363_MGF1dtor_P1363_MGF14_ptr);
        
        using CryptoPP__CryptoMaterialctor_CryptoMaterial1_ptr = int64_t (WINAPIV*)(struct CryptoPP::CryptoMaterial*, struct CryptoPP::CryptoMaterial*);
        using CryptoPP__CryptoMaterialctor_CryptoMaterial1_clbk = int64_t (WINAPIV*)(struct CryptoPP::CryptoMaterial*, struct CryptoPP::CryptoMaterial*, CryptoPP__CryptoMaterialctor_CryptoMaterial1_ptr);
        using CryptoPP__CryptoMaterialctor_CryptoMaterial3_ptr = void (WINAPIV*)(struct CryptoPP::CryptoMaterial*);
        using CryptoPP__CryptoMaterialctor_CryptoMaterial3_clbk = void (WINAPIV*)(struct CryptoPP::CryptoMaterial*, CryptoPP__CryptoMaterialctor_CryptoMaterial3_ptr);
        using CryptoPP__CryptoMaterialDoQuickSanityCheck4_ptr = void (WINAPIV*)(struct CryptoPP::CryptoMaterial*);
        using CryptoPP__CryptoMaterialDoQuickSanityCheck4_clbk = void (WINAPIV*)(struct CryptoPP::CryptoMaterial*, CryptoPP__CryptoMaterialDoQuickSanityCheck4_ptr);
        using CryptoPP__CryptoMaterialLoad6_ptr = void (WINAPIV*)(struct CryptoPP::CryptoMaterial*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__CryptoMaterialLoad6_clbk = void (WINAPIV*)(struct CryptoPP::CryptoMaterial*, struct CryptoPP::BufferedTransformation*, CryptoPP__CryptoMaterialLoad6_ptr);
        using CryptoPP__CryptoMaterialLoadPrecomputation8_ptr = void (WINAPIV*)(struct CryptoPP::CryptoMaterial*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__CryptoMaterialLoadPrecomputation8_clbk = void (WINAPIV*)(struct CryptoPP::CryptoMaterial*, struct CryptoPP::BufferedTransformation*, CryptoPP__CryptoMaterialLoadPrecomputation8_ptr);
        using CryptoPP__CryptoMaterialPrecompute10_ptr = void (WINAPIV*)(struct CryptoPP::CryptoMaterial*, unsigned int);
        using CryptoPP__CryptoMaterialPrecompute10_clbk = void (WINAPIV*)(struct CryptoPP::CryptoMaterial*, unsigned int, CryptoPP__CryptoMaterialPrecompute10_ptr);
        using CryptoPP__CryptoMaterialSave12_ptr = void (WINAPIV*)(struct CryptoPP::CryptoMaterial*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__CryptoMaterialSave12_clbk = void (WINAPIV*)(struct CryptoPP::CryptoMaterial*, struct CryptoPP::BufferedTransformation*, CryptoPP__CryptoMaterialSave12_ptr);
        using CryptoPP__CryptoMaterialSavePrecomputation14_ptr = void (WINAPIV*)(struct CryptoPP::CryptoMaterial*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__CryptoMaterialSavePrecomputation14_clbk = void (WINAPIV*)(struct CryptoPP::CryptoMaterial*, struct CryptoPP::BufferedTransformation*, CryptoPP__CryptoMaterialSavePrecomputation14_ptr);
        using CryptoPP__CryptoMaterialSupportsPrecomputation16_ptr = bool (WINAPIV*)(struct CryptoPP::CryptoMaterial*);
        using CryptoPP__CryptoMaterialSupportsPrecomputation16_clbk = bool (WINAPIV*)(struct CryptoPP::CryptoMaterial*, CryptoPP__CryptoMaterialSupportsPrecomputation16_ptr);
        using CryptoPP__CryptoMaterialThrowIfInvalid18_ptr = void (WINAPIV*)(struct CryptoPP::CryptoMaterial*, struct CryptoPP::RandomNumberGenerator*, unsigned int);
        using CryptoPP__CryptoMaterialThrowIfInvalid18_clbk = void (WINAPIV*)(struct CryptoPP::CryptoMaterial*, struct CryptoPP::RandomNumberGenerator*, unsigned int, CryptoPP__CryptoMaterialThrowIfInvalid18_ptr);
        using CryptoPP__CryptoMaterialdtor_CryptoMaterial22_ptr = void (WINAPIV*)(struct CryptoPP::CryptoMaterial*);
        using CryptoPP__CryptoMaterialdtor_CryptoMaterial22_clbk = void (WINAPIV*)(struct CryptoPP::CryptoMaterial*, CryptoPP__CryptoMaterialdtor_CryptoMaterial22_ptr);
        
        using CryptoPP__CryptoMaterial__InvalidMaterialctor_InvalidMaterial2_ptr = void (WINAPIV*)(struct CryptoPP::CryptoMaterial::InvalidMaterial*, struct CryptoPP::CryptoMaterial::InvalidMaterial*);
        using CryptoPP__CryptoMaterial__InvalidMaterialctor_InvalidMaterial2_clbk = void (WINAPIV*)(struct CryptoPP::CryptoMaterial::InvalidMaterial*, struct CryptoPP::CryptoMaterial::InvalidMaterial*, CryptoPP__CryptoMaterial__InvalidMaterialctor_InvalidMaterial2_ptr);
        using CryptoPP__CryptoMaterial__InvalidMaterialctor_InvalidMaterial4_ptr = void (WINAPIV*)(struct CryptoPP::CryptoMaterial::InvalidMaterial*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*);
        using CryptoPP__CryptoMaterial__InvalidMaterialctor_InvalidMaterial4_clbk = void (WINAPIV*)(struct CryptoPP::CryptoMaterial::InvalidMaterial*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, CryptoPP__CryptoMaterial__InvalidMaterialctor_InvalidMaterial4_ptr);
        using CryptoPP__CryptoMaterial__InvalidMaterialdtor_InvalidMaterial9_ptr = void (WINAPIV*)(struct CryptoPP::CryptoMaterial::InvalidMaterial*);
        using CryptoPP__CryptoMaterial__InvalidMaterialdtor_InvalidMaterial9_clbk = void (WINAPIV*)(struct CryptoPP::CryptoMaterial::InvalidMaterial*, CryptoPP__CryptoMaterial__InvalidMaterialdtor_InvalidMaterial9_ptr);
        
        using CryptoPP__SHA384InitState1_ptr = void (WINAPIV*)(uint64_t*);
        using CryptoPP__SHA384InitState1_clbk = void (WINAPIV*)(uint64_t*, CryptoPP__SHA384InitState1_ptr);
        
        using CryptoPP__DL_KeyAgreementAlgorithmctor_DL_KeyAgreementAlgorithm2_ptr = void (WINAPIV*)(struct CryptoPP::DL_KeyAgreementAlgorithm<CryptoPP::ECPPoint>*);
        using CryptoPP__DL_KeyAgreementAlgorithmctor_DL_KeyAgreementAlgorithm2_clbk = void (WINAPIV*)(struct CryptoPP::DL_KeyAgreementAlgorithm<CryptoPP::ECPPoint>*, CryptoPP__DL_KeyAgreementAlgorithmctor_DL_KeyAgreementAlgorithm2_ptr);
        
        using CryptoPP__OutputProxyCreatePutSpace1_ptr = uint8_t* (WINAPIV*)(struct CryptoPP::OutputProxy*, uint64_t*);
        using CryptoPP__OutputProxyCreatePutSpace1_clbk = uint8_t* (WINAPIV*)(struct CryptoPP::OutputProxy*, uint64_t*, CryptoPP__OutputProxyCreatePutSpace1_ptr);
        using CryptoPP__OutputProxyFlush2_ptr = bool (WINAPIV*)(struct CryptoPP::OutputProxy*, bool, int, bool);
        using CryptoPP__OutputProxyFlush2_clbk = bool (WINAPIV*)(struct CryptoPP::OutputProxy*, bool, int, bool, CryptoPP__OutputProxyFlush2_ptr);
        using CryptoPP__OutputProxyInitialize3_ptr = void (WINAPIV*)(struct CryptoPP::OutputProxy*, struct CryptoPP::NameValuePairs*, int);
        using CryptoPP__OutputProxyInitialize3_clbk = void (WINAPIV*)(struct CryptoPP::OutputProxy*, struct CryptoPP::NameValuePairs*, int, CryptoPP__OutputProxyInitialize3_ptr);
        using CryptoPP__OutputProxyMessageSeriesEnd4_ptr = bool (WINAPIV*)(struct CryptoPP::OutputProxy*, int, bool);
        using CryptoPP__OutputProxyMessageSeriesEnd4_clbk = bool (WINAPIV*)(struct CryptoPP::OutputProxy*, int, bool, CryptoPP__OutputProxyMessageSeriesEnd4_ptr);
        using CryptoPP__OutputProxyctor_OutputProxy5_ptr = int64_t (WINAPIV*)(struct CryptoPP::OutputProxy*, struct CryptoPP::BufferedTransformation*, bool);
        using CryptoPP__OutputProxyctor_OutputProxy5_clbk = int64_t (WINAPIV*)(struct CryptoPP::OutputProxy*, struct CryptoPP::BufferedTransformation*, bool, CryptoPP__OutputProxyctor_OutputProxy5_ptr);
        using CryptoPP__OutputProxyPut26_ptr = uint64_t (WINAPIV*)(struct CryptoPP::OutputProxy*, uint8_t*, uint64_t, int, bool);
        using CryptoPP__OutputProxyPut26_clbk = uint64_t (WINAPIV*)(struct CryptoPP::OutputProxy*, uint8_t*, uint64_t, int, bool, CryptoPP__OutputProxyPut26_ptr);
        using CryptoPP__OutputProxyPutModifiable27_ptr = uint64_t (WINAPIV*)(struct CryptoPP::OutputProxy*, uint8_t*, uint64_t, int, bool);
        using CryptoPP__OutputProxyPutModifiable27_clbk = uint64_t (WINAPIV*)(struct CryptoPP::OutputProxy*, uint8_t*, uint64_t, int, bool, CryptoPP__OutputProxyPutModifiable27_ptr);
        using CryptoPP__OutputProxydtor_OutputProxy8_ptr = int64_t (WINAPIV*)(struct CryptoPP::OutputProxy*);
        using CryptoPP__OutputProxydtor_OutputProxy8_clbk = int64_t (WINAPIV*)(struct CryptoPP::OutputProxy*, CryptoPP__OutputProxydtor_OutputProxy8_ptr);
        
        using CryptoPP__InvalidDataFormatctor_InvalidDataFormat2_ptr = void (WINAPIV*)(struct CryptoPP::InvalidDataFormat*, struct CryptoPP::InvalidDataFormat*);
        using CryptoPP__InvalidDataFormatctor_InvalidDataFormat2_clbk = void (WINAPIV*)(struct CryptoPP::InvalidDataFormat*, struct CryptoPP::InvalidDataFormat*, CryptoPP__InvalidDataFormatctor_InvalidDataFormat2_ptr);
        using CryptoPP__InvalidDataFormatctor_InvalidDataFormat4_ptr = void (WINAPIV*)(struct CryptoPP::InvalidDataFormat*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*);
        using CryptoPP__InvalidDataFormatctor_InvalidDataFormat4_clbk = void (WINAPIV*)(struct CryptoPP::InvalidDataFormat*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, CryptoPP__InvalidDataFormatctor_InvalidDataFormat4_ptr);
        using CryptoPP__InvalidDataFormatdtor_InvalidDataFormat9_ptr = void (WINAPIV*)(struct CryptoPP::InvalidDataFormat*);
        using CryptoPP__InvalidDataFormatdtor_InvalidDataFormat9_clbk = void (WINAPIV*)(struct CryptoPP::InvalidDataFormat*, CryptoPP__InvalidDataFormatdtor_InvalidDataFormat9_ptr);
        
        using CryptoPP__DL_BadElementctor_DL_BadElement2_ptr = void (WINAPIV*)(struct CryptoPP::DL_BadElement*, struct CryptoPP::DL_BadElement*);
        using CryptoPP__DL_BadElementctor_DL_BadElement2_clbk = void (WINAPIV*)(struct CryptoPP::DL_BadElement*, struct CryptoPP::DL_BadElement*, CryptoPP__DL_BadElementctor_DL_BadElement2_ptr);
        using CryptoPP__DL_BadElementctor_DL_BadElement4_ptr = void (WINAPIV*)(struct CryptoPP::DL_BadElement*);
        using CryptoPP__DL_BadElementctor_DL_BadElement4_clbk = void (WINAPIV*)(struct CryptoPP::DL_BadElement*, CryptoPP__DL_BadElementctor_DL_BadElement4_ptr);
        using CryptoPP__DL_BadElementdtor_DL_BadElement9_ptr = void (WINAPIV*)(struct CryptoPP::DL_BadElement*);
        using CryptoPP__DL_BadElementdtor_DL_BadElement9_clbk = void (WINAPIV*)(struct CryptoPP::DL_BadElement*, CryptoPP__DL_BadElementdtor_DL_BadElement9_ptr);
        
        using CryptoPP__AdditiveCipherAbstractPolicyctor_AdditiveCipherAbstractPolicy1_ptr = int64_t (WINAPIV*)(struct CryptoPP::AdditiveCipherAbstractPolicy*);
        using CryptoPP__AdditiveCipherAbstractPolicyctor_AdditiveCipherAbstractPolicy1_clbk = int64_t (WINAPIV*)(struct CryptoPP::AdditiveCipherAbstractPolicy*, CryptoPP__AdditiveCipherAbstractPolicyctor_AdditiveCipherAbstractPolicy1_ptr);
        using CryptoPP__AdditiveCipherAbstractPolicyCanOperateKeystream2_ptr = bool (WINAPIV*)(struct CryptoPP::AdditiveCipherAbstractPolicy*);
        using CryptoPP__AdditiveCipherAbstractPolicyCanOperateKeystream2_clbk = bool (WINAPIV*)(struct CryptoPP::AdditiveCipherAbstractPolicy*, CryptoPP__AdditiveCipherAbstractPolicyCanOperateKeystream2_ptr);
        using CryptoPP__AdditiveCipherAbstractPolicyGetOptimalBlockSize3_ptr = unsigned int (WINAPIV*)(struct CryptoPP::AdditiveCipherAbstractPolicy*);
        using CryptoPP__AdditiveCipherAbstractPolicyGetOptimalBlockSize3_clbk = unsigned int (WINAPIV*)(struct CryptoPP::AdditiveCipherAbstractPolicy*, CryptoPP__AdditiveCipherAbstractPolicyGetOptimalBlockSize3_ptr);
        using CryptoPP__AdditiveCipherAbstractPolicyOperateKeystream4_ptr = void (WINAPIV*)(struct CryptoPP::AdditiveCipherAbstractPolicy*, struct CryptoPP::KeystreamOperation, uint8_t*, uint8_t*, uint64_t);
        using CryptoPP__AdditiveCipherAbstractPolicyOperateKeystream4_clbk = void (WINAPIV*)(struct CryptoPP::AdditiveCipherAbstractPolicy*, struct CryptoPP::KeystreamOperation, uint8_t*, uint8_t*, uint64_t, CryptoPP__AdditiveCipherAbstractPolicyOperateKeystream4_ptr);
        using CryptoPP__AdditiveCipherAbstractPolicySeekToIteration5_ptr = void (WINAPIV*)(struct CryptoPP::AdditiveCipherAbstractPolicy*, uint64_t);
        using CryptoPP__AdditiveCipherAbstractPolicySeekToIteration5_clbk = void (WINAPIV*)(struct CryptoPP::AdditiveCipherAbstractPolicy*, uint64_t, CryptoPP__AdditiveCipherAbstractPolicySeekToIteration5_ptr);
        using CryptoPP__AdditiveCipherAbstractPolicydtor_AdditiveCipherAbstractPolicy6_ptr = int64_t (WINAPIV*)(struct CryptoPP::AdditiveCipherAbstractPolicy*);
        using CryptoPP__AdditiveCipherAbstractPolicydtor_AdditiveCipherAbstractPolicy6_clbk = int64_t (WINAPIV*)(struct CryptoPP::AdditiveCipherAbstractPolicy*, CryptoPP__AdditiveCipherAbstractPolicydtor_AdditiveCipherAbstractPolicy6_ptr);
        
        using CryptoPP__MeterFilterAddRangeToSkip1_ptr = void (WINAPIV*)(struct CryptoPP::MeterFilter*, unsigned int, uint64_t, uint64_t, bool);
        using CryptoPP__MeterFilterAddRangeToSkip1_clbk = void (WINAPIV*)(struct CryptoPP::MeterFilter*, unsigned int, uint64_t, uint64_t, bool, CryptoPP__MeterFilterAddRangeToSkip1_ptr);
        using CryptoPP__MeterFilterIsolatedMessageSeriesEnd2_ptr = bool (WINAPIV*)(struct CryptoPP::MeterFilter*, bool);
        using CryptoPP__MeterFilterIsolatedMessageSeriesEnd2_clbk = bool (WINAPIV*)(struct CryptoPP::MeterFilter*, bool, CryptoPP__MeterFilterIsolatedMessageSeriesEnd2_ptr);
        using CryptoPP__MeterFilterPut23_ptr = uint64_t (WINAPIV*)(struct CryptoPP::MeterFilter*, uint8_t*, uint64_t, int, bool);
        using CryptoPP__MeterFilterPut23_clbk = uint64_t (WINAPIV*)(struct CryptoPP::MeterFilter*, uint8_t*, uint64_t, int, bool, CryptoPP__MeterFilterPut23_ptr);
        using CryptoPP__MeterFilterPutMaybeModifiable4_ptr = uint64_t (WINAPIV*)(struct CryptoPP::MeterFilter*, uint8_t*, char, int, bool, bool);
        using CryptoPP__MeterFilterPutMaybeModifiable4_clbk = uint64_t (WINAPIV*)(struct CryptoPP::MeterFilter*, uint8_t*, char, int, bool, bool, CryptoPP__MeterFilterPutMaybeModifiable4_ptr);
        using CryptoPP__MeterFilterPutModifiable25_ptr = uint64_t (WINAPIV*)(struct CryptoPP::MeterFilter*, uint8_t*, uint64_t, int, bool);
        using CryptoPP__MeterFilterPutModifiable25_clbk = uint64_t (WINAPIV*)(struct CryptoPP::MeterFilter*, uint8_t*, uint64_t, int, bool, CryptoPP__MeterFilterPutModifiable25_ptr);
        using CryptoPP__MeterFilterResetMeter6_ptr = void (WINAPIV*)(struct CryptoPP::MeterFilter*);
        using CryptoPP__MeterFilterResetMeter6_clbk = void (WINAPIV*)(struct CryptoPP::MeterFilter*, CryptoPP__MeterFilterResetMeter6_ptr);
        
        using CryptoPP__RandomNumberSinkIsolatedInitialize1_ptr = void (WINAPIV*)(struct CryptoPP::RandomNumberSink*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__RandomNumberSinkIsolatedInitialize1_clbk = void (WINAPIV*)(struct CryptoPP::RandomNumberSink*, struct CryptoPP::NameValuePairs*, CryptoPP__RandomNumberSinkIsolatedInitialize1_ptr);
        using CryptoPP__RandomNumberSinkPut22_ptr = uint64_t (WINAPIV*)(struct CryptoPP::RandomNumberSink*, uint8_t*, uint64_t, int, bool);
        using CryptoPP__RandomNumberSinkPut22_clbk = uint64_t (WINAPIV*)(struct CryptoPP::RandomNumberSink*, uint8_t*, uint64_t, int, bool, CryptoPP__RandomNumberSinkPut22_ptr);
        
        using CryptoPP__FilterWithBufferedInputctor_FilterWithBufferedInput1_ptr = int64_t (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__FilterWithBufferedInputctor_FilterWithBufferedInput1_clbk = int64_t (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, struct CryptoPP::BufferedTransformation*, CryptoPP__FilterWithBufferedInputctor_FilterWithBufferedInput1_ptr);
        using CryptoPP__FilterWithBufferedInputctor_FilterWithBufferedInput2_ptr = int64_t (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, uint64_t, uint64_t, uint64_t, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__FilterWithBufferedInputctor_FilterWithBufferedInput2_clbk = int64_t (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, uint64_t, uint64_t, uint64_t, struct CryptoPP::BufferedTransformation*, CryptoPP__FilterWithBufferedInputctor_FilterWithBufferedInput2_ptr);
        using CryptoPP__FilterWithBufferedInputFlushDerived3_ptr = void (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*);
        using CryptoPP__FilterWithBufferedInputFlushDerived3_clbk = void (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, CryptoPP__FilterWithBufferedInputFlushDerived3_ptr);
        using CryptoPP__FilterWithBufferedInputForceNextPut4_ptr = void (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*);
        using CryptoPP__FilterWithBufferedInputForceNextPut4_clbk = void (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, CryptoPP__FilterWithBufferedInputForceNextPut4_ptr);
        using CryptoPP__FilterWithBufferedInputInitializeDerived5_ptr = void (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__FilterWithBufferedInputInitializeDerived5_clbk = void (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, struct CryptoPP::NameValuePairs*, CryptoPP__FilterWithBufferedInputInitializeDerived5_ptr);
        using CryptoPP__FilterWithBufferedInputInitializeDerivedAndReturnNewSizes6_ptr = void (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, struct CryptoPP::NameValuePairs*, uint64_t*, uint64_t*, uint64_t*);
        using CryptoPP__FilterWithBufferedInputInitializeDerivedAndReturnNewSizes6_clbk = void (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, struct CryptoPP::NameValuePairs*, uint64_t*, uint64_t*, uint64_t*, CryptoPP__FilterWithBufferedInputInitializeDerivedAndReturnNewSizes6_ptr);
        using CryptoPP__FilterWithBufferedInputIsolatedFlush7_ptr = bool (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, bool, bool);
        using CryptoPP__FilterWithBufferedInputIsolatedFlush7_clbk = bool (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, bool, bool, CryptoPP__FilterWithBufferedInputIsolatedFlush7_ptr);
        using CryptoPP__FilterWithBufferedInputIsolatedInitialize8_ptr = void (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__FilterWithBufferedInputIsolatedInitialize8_clbk = void (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, struct CryptoPP::NameValuePairs*, CryptoPP__FilterWithBufferedInputIsolatedInitialize8_ptr);
        using CryptoPP__FilterWithBufferedInputNextPut9_ptr = int64_t (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, uint8_t*, uint64_t);
        using CryptoPP__FilterWithBufferedInputNextPut9_clbk = int64_t (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, uint8_t*, uint64_t, CryptoPP__FilterWithBufferedInputNextPut9_ptr);
        using CryptoPP__FilterWithBufferedInputNextPutMaybeModifiable10_ptr = void (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, uint8_t*, uint64_t, bool);
        using CryptoPP__FilterWithBufferedInputNextPutMaybeModifiable10_clbk = void (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, uint8_t*, uint64_t, bool, CryptoPP__FilterWithBufferedInputNextPutMaybeModifiable10_ptr);
        using CryptoPP__FilterWithBufferedInputNextPutModifiable11_ptr = void (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, uint8_t*, uint64_t);
        using CryptoPP__FilterWithBufferedInputNextPutModifiable11_clbk = void (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, uint8_t*, uint64_t, CryptoPP__FilterWithBufferedInputNextPutModifiable11_ptr);
        using CryptoPP__FilterWithBufferedInputNextPutMultiple12_ptr = void (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, uint8_t*, uint64_t);
        using CryptoPP__FilterWithBufferedInputNextPutMultiple12_clbk = void (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, uint8_t*, uint64_t, CryptoPP__FilterWithBufferedInputNextPutMultiple12_ptr);
        using CryptoPP__FilterWithBufferedInputNextPutSingle13_ptr = void (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, uint8_t*);
        using CryptoPP__FilterWithBufferedInputNextPutSingle13_clbk = void (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, uint8_t*, CryptoPP__FilterWithBufferedInputNextPutSingle13_ptr);
        using CryptoPP__FilterWithBufferedInputPut214_ptr = uint64_t (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, uint8_t*, uint64_t, int, bool);
        using CryptoPP__FilterWithBufferedInputPut214_clbk = uint64_t (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, uint8_t*, uint64_t, int, bool, CryptoPP__FilterWithBufferedInputPut214_ptr);
        using CryptoPP__FilterWithBufferedInputPutMaybeModifiable15_ptr = uint64_t (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, uint8_t*, char, int, bool, bool);
        using CryptoPP__FilterWithBufferedInputPutMaybeModifiable15_clbk = uint64_t (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, uint8_t*, char, int, bool, bool, CryptoPP__FilterWithBufferedInputPutMaybeModifiable15_ptr);
        using CryptoPP__FilterWithBufferedInputPutModifiable216_ptr = uint64_t (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, uint8_t*, uint64_t, int, bool);
        using CryptoPP__FilterWithBufferedInputPutModifiable216_clbk = uint64_t (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, uint8_t*, uint64_t, int, bool, CryptoPP__FilterWithBufferedInputPutModifiable216_ptr);
        using CryptoPP__FilterWithBufferedInputdtor_FilterWithBufferedInput17_ptr = int64_t (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*);
        using CryptoPP__FilterWithBufferedInputdtor_FilterWithBufferedInput17_clbk = int64_t (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput*, CryptoPP__FilterWithBufferedInputdtor_FilterWithBufferedInput17_ptr);
        
        using CryptoPP__FilterWithBufferedInput__BlockQueuector_BlockQueue1_ptr = int64_t (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput::BlockQueue*);
        using CryptoPP__FilterWithBufferedInput__BlockQueuector_BlockQueue1_clbk = int64_t (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput::BlockQueue*, CryptoPP__FilterWithBufferedInput__BlockQueuector_BlockQueue1_ptr);
        using CryptoPP__FilterWithBufferedInput__BlockQueueCurrentSize2_ptr = uint64_t (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput::BlockQueue*);
        using CryptoPP__FilterWithBufferedInput__BlockQueueCurrentSize2_clbk = uint64_t (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput::BlockQueue*, CryptoPP__FilterWithBufferedInput__BlockQueueCurrentSize2_ptr);
        using CryptoPP__FilterWithBufferedInput__BlockQueueGetAll3_ptr = uint64_t (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput::BlockQueue*, uint8_t*);
        using CryptoPP__FilterWithBufferedInput__BlockQueueGetAll3_clbk = uint64_t (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput::BlockQueue*, uint8_t*, CryptoPP__FilterWithBufferedInput__BlockQueueGetAll3_ptr);
        using CryptoPP__FilterWithBufferedInput__BlockQueueGetBlock4_ptr = uint8_t* (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput::BlockQueue*);
        using CryptoPP__FilterWithBufferedInput__BlockQueueGetBlock4_clbk = uint8_t* (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput::BlockQueue*, CryptoPP__FilterWithBufferedInput__BlockQueueGetBlock4_ptr);
        using CryptoPP__FilterWithBufferedInput__BlockQueueGetContigousBlocks5_ptr = uint8_t* (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput::BlockQueue*, uint64_t*);
        using CryptoPP__FilterWithBufferedInput__BlockQueueGetContigousBlocks5_clbk = uint8_t* (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput::BlockQueue*, uint64_t*, CryptoPP__FilterWithBufferedInput__BlockQueueGetContigousBlocks5_ptr);
        using CryptoPP__FilterWithBufferedInput__BlockQueuePut6_ptr = void (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput::BlockQueue*, uint8_t*, uint64_t);
        using CryptoPP__FilterWithBufferedInput__BlockQueuePut6_clbk = void (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput::BlockQueue*, uint8_t*, uint64_t, CryptoPP__FilterWithBufferedInput__BlockQueuePut6_ptr);
        using CryptoPP__FilterWithBufferedInput__BlockQueueResetQueue7_ptr = void (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput::BlockQueue*, uint64_t, uint64_t);
        using CryptoPP__FilterWithBufferedInput__BlockQueueResetQueue7_clbk = void (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput::BlockQueue*, uint64_t, uint64_t, CryptoPP__FilterWithBufferedInput__BlockQueueResetQueue7_ptr);
        using CryptoPP__FilterWithBufferedInput__BlockQueuedtor_BlockQueue8_ptr = int64_t (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput::BlockQueue*);
        using CryptoPP__FilterWithBufferedInput__BlockQueuedtor_BlockQueue8_clbk = int64_t (WINAPIV*)(struct CryptoPP::FilterWithBufferedInput::BlockQueue*, CryptoPP__FilterWithBufferedInput__BlockQueuedtor_BlockQueue8_ptr);
        
        using CryptoPP__ProxyFilterIsolatedFlush1_ptr = bool (WINAPIV*)(struct CryptoPP::ProxyFilter*, bool, bool);
        using CryptoPP__ProxyFilterIsolatedFlush1_clbk = bool (WINAPIV*)(struct CryptoPP::ProxyFilter*, bool, bool, CryptoPP__ProxyFilterIsolatedFlush1_ptr);
        using CryptoPP__ProxyFilterNextPutModifiable2_ptr = void (WINAPIV*)(struct CryptoPP::ProxyFilter*, uint8_t*, uint64_t);
        using CryptoPP__ProxyFilterNextPutModifiable2_clbk = void (WINAPIV*)(struct CryptoPP::ProxyFilter*, uint8_t*, uint64_t, CryptoPP__ProxyFilterNextPutModifiable2_ptr);
        using CryptoPP__ProxyFilterNextPutMultiple3_ptr = void (WINAPIV*)(struct CryptoPP::ProxyFilter*, uint8_t*, uint64_t);
        using CryptoPP__ProxyFilterNextPutMultiple3_clbk = void (WINAPIV*)(struct CryptoPP::ProxyFilter*, uint8_t*, uint64_t, CryptoPP__ProxyFilterNextPutMultiple3_ptr);
        using CryptoPP__ProxyFilterctor_ProxyFilter4_ptr = int64_t (WINAPIV*)(struct CryptoPP::ProxyFilter*, struct CryptoPP::BufferedTransformation*, uint64_t, uint64_t, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__ProxyFilterctor_ProxyFilter4_clbk = int64_t (WINAPIV*)(struct CryptoPP::ProxyFilter*, struct CryptoPP::BufferedTransformation*, uint64_t, uint64_t, struct CryptoPP::BufferedTransformation*, CryptoPP__ProxyFilterctor_ProxyFilter4_ptr);
        using CryptoPP__ProxyFilterSetFilter5_ptr = void (WINAPIV*)(struct CryptoPP::ProxyFilter*, Filter*);
        using CryptoPP__ProxyFilterSetFilter5_clbk = void (WINAPIV*)(struct CryptoPP::ProxyFilter*, Filter*, CryptoPP__ProxyFilterSetFilter5_ptr);
        using CryptoPP__ProxyFilterdtor_ProxyFilter6_ptr = int64_t (WINAPIV*)(struct CryptoPP::ProxyFilter*);
        using CryptoPP__ProxyFilterdtor_ProxyFilter6_clbk = int64_t (WINAPIV*)(struct CryptoPP::ProxyFilter*, CryptoPP__ProxyFilterdtor_ProxyFilter6_ptr);
        
        using CryptoPP__CFB_CipherAbstractPolicyctor_CFB_CipherAbstractPolicy1_ptr = int64_t (WINAPIV*)(struct CryptoPP::CFB_CipherAbstractPolicy*);
        using CryptoPP__CFB_CipherAbstractPolicyctor_CFB_CipherAbstractPolicy1_clbk = int64_t (WINAPIV*)(struct CryptoPP::CFB_CipherAbstractPolicy*, CryptoPP__CFB_CipherAbstractPolicyctor_CFB_CipherAbstractPolicy1_ptr);
        using CryptoPP__CFB_CipherAbstractPolicyCanIterate2_ptr = bool (WINAPIV*)(struct CryptoPP::CFB_CipherAbstractPolicy*);
        using CryptoPP__CFB_CipherAbstractPolicyCanIterate2_clbk = bool (WINAPIV*)(struct CryptoPP::CFB_CipherAbstractPolicy*, CryptoPP__CFB_CipherAbstractPolicyCanIterate2_ptr);
        using CryptoPP__CFB_CipherAbstractPolicyIterate3_ptr = void (WINAPIV*)(struct CryptoPP::CFB_CipherAbstractPolicy*, uint8_t*, uint8_t*, struct CryptoPP::CipherDir, uint64_t);
        using CryptoPP__CFB_CipherAbstractPolicyIterate3_clbk = void (WINAPIV*)(struct CryptoPP::CFB_CipherAbstractPolicy*, uint8_t*, uint8_t*, struct CryptoPP::CipherDir, uint64_t, CryptoPP__CFB_CipherAbstractPolicyIterate3_ptr);
        using CryptoPP__CFB_CipherAbstractPolicydtor_CFB_CipherAbstractPolicy4_ptr = int64_t (WINAPIV*)(struct CryptoPP::CFB_CipherAbstractPolicy*);
        using CryptoPP__CFB_CipherAbstractPolicydtor_CFB_CipherAbstractPolicy4_clbk = int64_t (WINAPIV*)(struct CryptoPP::CFB_CipherAbstractPolicy*, CryptoPP__CFB_CipherAbstractPolicydtor_CFB_CipherAbstractPolicy4_ptr);
        
        using CryptoPP__CFB_ModePolicyctor_CFB_ModePolicy1_ptr = int64_t (WINAPIV*)(struct CryptoPP::CFB_ModePolicy*);
        using CryptoPP__CFB_ModePolicyctor_CFB_ModePolicy1_clbk = int64_t (WINAPIV*)(struct CryptoPP::CFB_ModePolicy*, CryptoPP__CFB_ModePolicyctor_CFB_ModePolicy1_ptr);
        using CryptoPP__CFB_ModePolicyCipherResynchronize2_ptr = void (WINAPIV*)(struct CryptoPP::CFB_ModePolicy*, uint8_t*);
        using CryptoPP__CFB_ModePolicyCipherResynchronize2_clbk = void (WINAPIV*)(struct CryptoPP::CFB_ModePolicy*, uint8_t*, CryptoPP__CFB_ModePolicyCipherResynchronize2_ptr);
        using CryptoPP__CFB_ModePolicyGetBytesPerIteration3_ptr = unsigned int (WINAPIV*)(struct CryptoPP::CFB_ModePolicy*);
        using CryptoPP__CFB_ModePolicyGetBytesPerIteration3_clbk = unsigned int (WINAPIV*)(struct CryptoPP::CFB_ModePolicy*, CryptoPP__CFB_ModePolicyGetBytesPerIteration3_ptr);
        using CryptoPP__CFB_ModePolicyGetRegisterBegin4_ptr = uint8_t* (WINAPIV*)(struct CryptoPP::CFB_ModePolicy*);
        using CryptoPP__CFB_ModePolicyGetRegisterBegin4_clbk = uint8_t* (WINAPIV*)(struct CryptoPP::CFB_ModePolicy*, CryptoPP__CFB_ModePolicyGetRegisterBegin4_ptr);
        using CryptoPP__CFB_ModePolicyIVRequirement5_ptr = struct CryptoPP::SimpleKeyingInterface::IV_Requirement (WINAPIV*)(struct CryptoPP::CFB_ModePolicy*);
        using CryptoPP__CFB_ModePolicyIVRequirement5_clbk = struct CryptoPP::SimpleKeyingInterface::IV_Requirement (WINAPIV*)(struct CryptoPP::CFB_ModePolicy*, CryptoPP__CFB_ModePolicyIVRequirement5_ptr);
        using CryptoPP__CFB_ModePolicyResizeBuffers6_ptr = void (WINAPIV*)(struct CryptoPP::CFB_ModePolicy*);
        using CryptoPP__CFB_ModePolicyResizeBuffers6_clbk = void (WINAPIV*)(struct CryptoPP::CFB_ModePolicy*, CryptoPP__CFB_ModePolicyResizeBuffers6_ptr);
        using CryptoPP__CFB_ModePolicySetFeedbackSize7_ptr = void (WINAPIV*)(struct CryptoPP::CFB_ModePolicy*, unsigned int);
        using CryptoPP__CFB_ModePolicySetFeedbackSize7_clbk = void (WINAPIV*)(struct CryptoPP::CFB_ModePolicy*, unsigned int, CryptoPP__CFB_ModePolicySetFeedbackSize7_ptr);
        using CryptoPP__CFB_ModePolicyStaticAlgorithmName8_ptr = char* (WINAPIV*)();
        using CryptoPP__CFB_ModePolicyStaticAlgorithmName8_clbk = char* (WINAPIV*)(CryptoPP__CFB_ModePolicyStaticAlgorithmName8_ptr);
        using CryptoPP__CFB_ModePolicyTransformRegister9_ptr = void (WINAPIV*)(struct CryptoPP::CFB_ModePolicy*);
        using CryptoPP__CFB_ModePolicyTransformRegister9_clbk = void (WINAPIV*)(struct CryptoPP::CFB_ModePolicy*, CryptoPP__CFB_ModePolicyTransformRegister9_ptr);
        using CryptoPP__CFB_ModePolicydtor_CFB_ModePolicy10_ptr = int64_t (WINAPIV*)(struct CryptoPP::CFB_ModePolicy*);
        using CryptoPP__CFB_ModePolicydtor_CFB_ModePolicy10_clbk = int64_t (WINAPIV*)(struct CryptoPP::CFB_ModePolicy*, CryptoPP__CFB_ModePolicydtor_CFB_ModePolicy10_ptr);
        
        using CryptoPP__PK_SignatureMessageEncodingMethodAllowNonrecoverablePart1_ptr = bool (WINAPIV*)(struct CryptoPP::PK_SignatureMessageEncodingMethod*);
        using CryptoPP__PK_SignatureMessageEncodingMethodAllowNonrecoverablePart1_clbk = bool (WINAPIV*)(struct CryptoPP::PK_SignatureMessageEncodingMethod*, CryptoPP__PK_SignatureMessageEncodingMethodAllowNonrecoverablePart1_ptr);
        using CryptoPP__PK_SignatureMessageEncodingMethodMaxRecoverableLength2_ptr = uint64_t (WINAPIV*)(struct CryptoPP::PK_SignatureMessageEncodingMethod*, uint64_t, uint64_t, uint64_t);
        using CryptoPP__PK_SignatureMessageEncodingMethodMaxRecoverableLength2_clbk = uint64_t (WINAPIV*)(struct CryptoPP::PK_SignatureMessageEncodingMethod*, uint64_t, uint64_t, uint64_t, CryptoPP__PK_SignatureMessageEncodingMethodMaxRecoverableLength2_ptr);
        using CryptoPP__PK_SignatureMessageEncodingMethodMinRepresentativeBitLength3_ptr = uint64_t (WINAPIV*)(struct CryptoPP::PK_SignatureMessageEncodingMethod*, uint64_t, uint64_t);
        using CryptoPP__PK_SignatureMessageEncodingMethodMinRepresentativeBitLength3_clbk = uint64_t (WINAPIV*)(struct CryptoPP::PK_SignatureMessageEncodingMethod*, uint64_t, uint64_t, CryptoPP__PK_SignatureMessageEncodingMethodMinRepresentativeBitLength3_ptr);
        using CryptoPP__PK_SignatureMessageEncodingMethodctor_PK_SignatureMessageEncodingMethod4_ptr = int64_t (WINAPIV*)(struct CryptoPP::PK_SignatureMessageEncodingMethod*);
        using CryptoPP__PK_SignatureMessageEncodingMethodctor_PK_SignatureMessageEncodingMethod4_clbk = int64_t (WINAPIV*)(struct CryptoPP::PK_SignatureMessageEncodingMethod*, CryptoPP__PK_SignatureMessageEncodingMethodctor_PK_SignatureMessageEncodingMethod4_ptr);
        using CryptoPP__PK_SignatureMessageEncodingMethodProcessSemisignature5_ptr = void (WINAPIV*)(struct CryptoPP::PK_SignatureMessageEncodingMethod*, struct CryptoPP::HashTransformation*, uint8_t*, uint64_t);
        using CryptoPP__PK_SignatureMessageEncodingMethodProcessSemisignature5_clbk = void (WINAPIV*)(struct CryptoPP::PK_SignatureMessageEncodingMethod*, struct CryptoPP::HashTransformation*, uint8_t*, uint64_t, CryptoPP__PK_SignatureMessageEncodingMethodProcessSemisignature5_ptr);
        using CryptoPP__PK_SignatureMessageEncodingMethodRecoverablePartFirst6_ptr = bool (WINAPIV*)(struct CryptoPP::PK_SignatureMessageEncodingMethod*);
        using CryptoPP__PK_SignatureMessageEncodingMethodRecoverablePartFirst6_clbk = bool (WINAPIV*)(struct CryptoPP::PK_SignatureMessageEncodingMethod*, CryptoPP__PK_SignatureMessageEncodingMethodRecoverablePartFirst6_ptr);
        using CryptoPP__PK_SignatureMessageEncodingMethoddtor_PK_SignatureMessageEncodingMethod7_ptr = int64_t (WINAPIV*)(struct CryptoPP::PK_SignatureMessageEncodingMethod*);
        using CryptoPP__PK_SignatureMessageEncodingMethoddtor_PK_SignatureMessageEncodingMethod7_clbk = int64_t (WINAPIV*)(struct CryptoPP::PK_SignatureMessageEncodingMethod*, CryptoPP__PK_SignatureMessageEncodingMethoddtor_PK_SignatureMessageEncodingMethod7_ptr);
        
        using CryptoPP__DecodingResultctor_DecodingResult2_ptr = void (WINAPIV*)(struct CryptoPP::DecodingResult*, uint64_t);
        using CryptoPP__DecodingResultctor_DecodingResult2_clbk = void (WINAPIV*)(struct CryptoPP::DecodingResult*, uint64_t, CryptoPP__DecodingResultctor_DecodingResult2_ptr);
        using CryptoPP__DecodingResultctor_DecodingResult4_ptr = void (WINAPIV*)(struct CryptoPP::DecodingResult*);
        using CryptoPP__DecodingResultctor_DecodingResult4_clbk = void (WINAPIV*)(struct CryptoPP::DecodingResult*, CryptoPP__DecodingResultctor_DecodingResult4_ptr);
        
        using CryptoPP__LazyPutterctor_LazyPutter1_ptr = int64_t (WINAPIV*)(struct CryptoPP::LazyPutter*, struct CryptoPP::ByteQueue*, uint8_t*, uint64_t);
        using CryptoPP__LazyPutterctor_LazyPutter1_clbk = int64_t (WINAPIV*)(struct CryptoPP::LazyPutter*, struct CryptoPP::ByteQueue*, uint8_t*, uint64_t, CryptoPP__LazyPutterctor_LazyPutter1_ptr);
        using CryptoPP__LazyPutterdtor_LazyPutter2_ptr = int64_t (WINAPIV*)(struct CryptoPP::LazyPutter*);
        using CryptoPP__LazyPutterdtor_LazyPutter2_clbk = int64_t (WINAPIV*)(struct CryptoPP::LazyPutter*, CryptoPP__LazyPutterdtor_LazyPutter2_ptr);
        
        using CryptoPP__AlgorithmParametersBasector_AlgorithmParametersBase2_ptr = void (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase*, struct CryptoPP::AlgorithmParametersBase*);
        using CryptoPP__AlgorithmParametersBasector_AlgorithmParametersBase2_clbk = void (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase*, struct CryptoPP::AlgorithmParametersBase*, CryptoPP__AlgorithmParametersBasector_AlgorithmParametersBase2_ptr);
        using CryptoPP__AlgorithmParametersBasector_AlgorithmParametersBase4_ptr = void (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase*, char*, bool);
        using CryptoPP__AlgorithmParametersBasector_AlgorithmParametersBase4_clbk = void (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase*, char*, bool, CryptoPP__AlgorithmParametersBasector_AlgorithmParametersBase4_ptr);
        using CryptoPP__AlgorithmParametersBaseGetVoidValue5_ptr = bool (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase*, char*, struct type_info*, void*);
        using CryptoPP__AlgorithmParametersBaseGetVoidValue5_clbk = bool (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase*, char*, struct type_info*, void*, CryptoPP__AlgorithmParametersBaseGetVoidValue5_ptr);
        using CryptoPP__AlgorithmParametersBasedtor_AlgorithmParametersBase10_ptr = void (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase*);
        using CryptoPP__AlgorithmParametersBasedtor_AlgorithmParametersBase10_clbk = void (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase*, CryptoPP__AlgorithmParametersBasedtor_AlgorithmParametersBase10_ptr);
        
        using CryptoPP__AlgorithmParametersBase__ParameterNotUsedctor_ParameterNotUsed2_ptr = void (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase::ParameterNotUsed*, struct CryptoPP::AlgorithmParametersBase::ParameterNotUsed*);
        using CryptoPP__AlgorithmParametersBase__ParameterNotUsedctor_ParameterNotUsed2_clbk = void (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase::ParameterNotUsed*, struct CryptoPP::AlgorithmParametersBase::ParameterNotUsed*, CryptoPP__AlgorithmParametersBase__ParameterNotUsedctor_ParameterNotUsed2_ptr);
        using CryptoPP__AlgorithmParametersBase__ParameterNotUsedctor_ParameterNotUsed4_ptr = void (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase::ParameterNotUsed*, char*);
        using CryptoPP__AlgorithmParametersBase__ParameterNotUsedctor_ParameterNotUsed4_clbk = void (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase::ParameterNotUsed*, char*, CryptoPP__AlgorithmParametersBase__ParameterNotUsedctor_ParameterNotUsed4_ptr);
        using CryptoPP__AlgorithmParametersBase__ParameterNotUseddtor_ParameterNotUsed9_ptr = void (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase::ParameterNotUsed*);
        using CryptoPP__AlgorithmParametersBase__ParameterNotUseddtor_ParameterNotUsed9_clbk = void (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase::ParameterNotUsed*, CryptoPP__AlgorithmParametersBase__ParameterNotUseddtor_ParameterNotUsed9_ptr);
        
        using CryptoPP__NullNameValuePairsGetVoidValue2_ptr = bool (WINAPIV*)(struct CryptoPP::NullNameValuePairs*, char*, struct type_info*, void*);
        using CryptoPP__NullNameValuePairsGetVoidValue2_clbk = bool (WINAPIV*)(struct CryptoPP::NullNameValuePairs*, char*, struct type_info*, void*, CryptoPP__NullNameValuePairsGetVoidValue2_ptr);
        using CryptoPP__NullNameValuePairsctor_NullNameValuePairs4_ptr = void (WINAPIV*)(struct CryptoPP::NullNameValuePairs*, struct CryptoPP::NullNameValuePairs*);
        using CryptoPP__NullNameValuePairsctor_NullNameValuePairs4_clbk = void (WINAPIV*)(struct CryptoPP::NullNameValuePairs*, struct CryptoPP::NullNameValuePairs*, CryptoPP__NullNameValuePairsctor_NullNameValuePairs4_ptr);
        using CryptoPP__NullNameValuePairsctor_NullNameValuePairs5_ptr = int64_t (WINAPIV*)(struct CryptoPP::NullNameValuePairs*);
        using CryptoPP__NullNameValuePairsctor_NullNameValuePairs5_clbk = int64_t (WINAPIV*)(struct CryptoPP::NullNameValuePairs*, CryptoPP__NullNameValuePairsctor_NullNameValuePairs5_ptr);
        using CryptoPP__NullNameValuePairsdtor_NullNameValuePairs10_ptr = void (WINAPIV*)(struct CryptoPP::NullNameValuePairs*);
        using CryptoPP__NullNameValuePairsdtor_NullNameValuePairs10_clbk = void (WINAPIV*)(struct CryptoPP::NullNameValuePairs*, CryptoPP__NullNameValuePairsdtor_NullNameValuePairs10_ptr);
        
        using CryptoPP__CTR_ModePolicyctor_CTR_ModePolicy1_ptr = int64_t (WINAPIV*)(struct CryptoPP::CTR_ModePolicy*);
        using CryptoPP__CTR_ModePolicyctor_CTR_ModePolicy1_clbk = int64_t (WINAPIV*)(struct CryptoPP::CTR_ModePolicy*, CryptoPP__CTR_ModePolicyctor_CTR_ModePolicy1_ptr);
        using CryptoPP__CTR_ModePolicyCanOperateKeystream2_ptr = bool (WINAPIV*)(struct CryptoPP::CTR_ModePolicy*);
        using CryptoPP__CTR_ModePolicyCanOperateKeystream2_clbk = bool (WINAPIV*)(struct CryptoPP::CTR_ModePolicy*, CryptoPP__CTR_ModePolicyCanOperateKeystream2_ptr);
        using CryptoPP__CTR_ModePolicyCipherResynchronize3_ptr = void (WINAPIV*)(struct CryptoPP::CTR_ModePolicy*, uint8_t*, uint8_t*);
        using CryptoPP__CTR_ModePolicyCipherResynchronize3_clbk = void (WINAPIV*)(struct CryptoPP::CTR_ModePolicy*, uint8_t*, uint8_t*, CryptoPP__CTR_ModePolicyCipherResynchronize3_ptr);
        using CryptoPP__CTR_ModePolicyGetAlignment4_ptr = unsigned int (WINAPIV*)(struct CryptoPP::CTR_ModePolicy*);
        using CryptoPP__CTR_ModePolicyGetAlignment4_clbk = unsigned int (WINAPIV*)(struct CryptoPP::CTR_ModePolicy*, CryptoPP__CTR_ModePolicyGetAlignment4_ptr);
        using CryptoPP__CTR_ModePolicyGetBytesPerIteration5_ptr = unsigned int (WINAPIV*)(struct CryptoPP::CTR_ModePolicy*);
        using CryptoPP__CTR_ModePolicyGetBytesPerIteration5_clbk = unsigned int (WINAPIV*)(struct CryptoPP::CTR_ModePolicy*, CryptoPP__CTR_ModePolicyGetBytesPerIteration5_ptr);
        using CryptoPP__CTR_ModePolicyGetIterationsToBuffer6_ptr = unsigned int (WINAPIV*)(struct CryptoPP::CTR_ModePolicy*);
        using CryptoPP__CTR_ModePolicyGetIterationsToBuffer6_clbk = unsigned int (WINAPIV*)(struct CryptoPP::CTR_ModePolicy*, CryptoPP__CTR_ModePolicyGetIterationsToBuffer6_ptr);
        using CryptoPP__CTR_ModePolicyIVRequirement7_ptr = struct CryptoPP::SimpleKeyingInterface::IV_Requirement (WINAPIV*)(struct CryptoPP::CTR_ModePolicy*);
        using CryptoPP__CTR_ModePolicyIVRequirement7_clbk = struct CryptoPP::SimpleKeyingInterface::IV_Requirement (WINAPIV*)(struct CryptoPP::CTR_ModePolicy*, CryptoPP__CTR_ModePolicyIVRequirement7_ptr);
        using CryptoPP__CTR_ModePolicyOperateKeystream8_ptr = void (WINAPIV*)(struct CryptoPP::CTR_ModePolicy*, struct CryptoPP::KeystreamOperation, uint8_t*, uint8_t*, uint64_t);
        using CryptoPP__CTR_ModePolicyOperateKeystream8_clbk = void (WINAPIV*)(struct CryptoPP::CTR_ModePolicy*, struct CryptoPP::KeystreamOperation, uint8_t*, uint8_t*, uint64_t, CryptoPP__CTR_ModePolicyOperateKeystream8_ptr);
        using CryptoPP__CTR_ModePolicyProcessMultipleBlocks9_ptr = void (WINAPIV*)(struct CryptoPP::CTR_ModePolicy*, uint8_t*, uint8_t*, uint64_t);
        using CryptoPP__CTR_ModePolicyProcessMultipleBlocks9_clbk = void (WINAPIV*)(struct CryptoPP::CTR_ModePolicy*, uint8_t*, uint8_t*, uint64_t, CryptoPP__CTR_ModePolicyProcessMultipleBlocks9_ptr);
        using CryptoPP__CTR_ModePolicySeekToIteration10_ptr = void (WINAPIV*)(struct CryptoPP::CTR_ModePolicy*, uint64_t);
        using CryptoPP__CTR_ModePolicySeekToIteration10_clbk = void (WINAPIV*)(struct CryptoPP::CTR_ModePolicy*, uint64_t, CryptoPP__CTR_ModePolicySeekToIteration10_ptr);
        using CryptoPP__CTR_ModePolicyStaticAlgorithmName11_ptr = char* (WINAPIV*)();
        using CryptoPP__CTR_ModePolicyStaticAlgorithmName11_clbk = char* (WINAPIV*)(CryptoPP__CTR_ModePolicyStaticAlgorithmName11_ptr);
        using CryptoPP__CTR_ModePolicyWriteKeystream12_ptr = void (WINAPIV*)(struct CryptoPP::CTR_ModePolicy*, uint8_t*, uint64_t);
        using CryptoPP__CTR_ModePolicyWriteKeystream12_clbk = void (WINAPIV*)(struct CryptoPP::CTR_ModePolicy*, uint8_t*, uint64_t, CryptoPP__CTR_ModePolicyWriteKeystream12_ptr);
        using CryptoPP__CTR_ModePolicydtor_CTR_ModePolicy13_ptr = int64_t (WINAPIV*)(struct CryptoPP::CTR_ModePolicy*);
        using CryptoPP__CTR_ModePolicydtor_CTR_ModePolicy13_clbk = int64_t (WINAPIV*)(struct CryptoPP::CTR_ModePolicy*, CryptoPP__CTR_ModePolicydtor_CTR_ModePolicy13_ptr);
        
        using CryptoPP__OFB_ModePolicyCipherResynchronize1_ptr = void (WINAPIV*)(struct CryptoPP::OFB_ModePolicy*, uint8_t*, uint8_t*);
        using CryptoPP__OFB_ModePolicyCipherResynchronize1_clbk = void (WINAPIV*)(struct CryptoPP::OFB_ModePolicy*, uint8_t*, uint8_t*, CryptoPP__OFB_ModePolicyCipherResynchronize1_ptr);
        using CryptoPP__OFB_ModePolicyGetBytesPerIteration2_ptr = unsigned int (WINAPIV*)(struct CryptoPP::OFB_ModePolicy*);
        using CryptoPP__OFB_ModePolicyGetBytesPerIteration2_clbk = unsigned int (WINAPIV*)(struct CryptoPP::OFB_ModePolicy*, CryptoPP__OFB_ModePolicyGetBytesPerIteration2_ptr);
        using CryptoPP__OFB_ModePolicyGetIterationsToBuffer3_ptr = unsigned int (WINAPIV*)(struct CryptoPP::OFB_ModePolicy*);
        using CryptoPP__OFB_ModePolicyGetIterationsToBuffer3_clbk = unsigned int (WINAPIV*)(struct CryptoPP::OFB_ModePolicy*, CryptoPP__OFB_ModePolicyGetIterationsToBuffer3_ptr);
        using CryptoPP__OFB_ModePolicyIVRequirement4_ptr = struct CryptoPP::SimpleKeyingInterface::IV_Requirement (WINAPIV*)(struct CryptoPP::OFB_ModePolicy*);
        using CryptoPP__OFB_ModePolicyIVRequirement4_clbk = struct CryptoPP::SimpleKeyingInterface::IV_Requirement (WINAPIV*)(struct CryptoPP::OFB_ModePolicy*, CryptoPP__OFB_ModePolicyIVRequirement4_ptr);
        using CryptoPP__OFB_ModePolicyctor_OFB_ModePolicy5_ptr = int64_t (WINAPIV*)(struct CryptoPP::OFB_ModePolicy*);
        using CryptoPP__OFB_ModePolicyctor_OFB_ModePolicy5_clbk = int64_t (WINAPIV*)(struct CryptoPP::OFB_ModePolicy*, CryptoPP__OFB_ModePolicyctor_OFB_ModePolicy5_ptr);
        using CryptoPP__OFB_ModePolicyStaticAlgorithmName6_ptr = char* (WINAPIV*)();
        using CryptoPP__OFB_ModePolicyStaticAlgorithmName6_clbk = char* (WINAPIV*)(CryptoPP__OFB_ModePolicyStaticAlgorithmName6_ptr);
        using CryptoPP__OFB_ModePolicyWriteKeystream7_ptr = void (WINAPIV*)(struct CryptoPP::OFB_ModePolicy*, uint8_t*, uint64_t);
        using CryptoPP__OFB_ModePolicyWriteKeystream7_clbk = void (WINAPIV*)(struct CryptoPP::OFB_ModePolicy*, uint8_t*, uint64_t, CryptoPP__OFB_ModePolicyWriteKeystream7_ptr);
        using CryptoPP__OFB_ModePolicydtor_OFB_ModePolicy8_ptr = int64_t (WINAPIV*)(struct CryptoPP::OFB_ModePolicy*);
        using CryptoPP__OFB_ModePolicydtor_OFB_ModePolicy8_clbk = int64_t (WINAPIV*)(struct CryptoPP::OFB_ModePolicy*, CryptoPP__OFB_ModePolicydtor_OFB_ModePolicy8_ptr);
        
        using CryptoPP__DL_SymmetricEncryptionAlgorithmctor_DL_SymmetricEncryptionAlgorithm2_ptr = void (WINAPIV*)(struct CryptoPP::DL_SymmetricEncryptionAlgorithm*);
        using CryptoPP__DL_SymmetricEncryptionAlgorithmctor_DL_SymmetricEncryptionAlgorithm2_clbk = void (WINAPIV*)(struct CryptoPP::DL_SymmetricEncryptionAlgorithm*, CryptoPP__DL_SymmetricEncryptionAlgorithmctor_DL_SymmetricEncryptionAlgorithm2_ptr);
        
        using CryptoPP__DL_Algorithm_GDSASign1_ptr = int64_t (WINAPIV*)(int64_t, struct CryptoPP::Integer*, int64_t);
        using CryptoPP__DL_Algorithm_GDSASign1_clbk = int64_t (WINAPIV*)(int64_t, struct CryptoPP::Integer*, int64_t, CryptoPP__DL_Algorithm_GDSASign1_ptr);
        using CryptoPP__DL_Algorithm_GDSAVerify2_ptr = int64_t (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__DL_Algorithm_GDSAVerify2_clbk = int64_t (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__DL_Algorithm_GDSAVerify2_ptr);
        
        using CryptoPP__X917RNGctor_X917RNG1_ptr = int64_t (WINAPIV*)(struct CryptoPP::X917RNG*, struct CryptoPP::BlockTransformation*, uint8_t*, uint8_t*);
        using CryptoPP__X917RNGctor_X917RNG1_clbk = int64_t (WINAPIV*)(struct CryptoPP::X917RNG*, struct CryptoPP::BlockTransformation*, uint8_t*, uint8_t*, CryptoPP__X917RNGctor_X917RNG1_ptr);
        using CryptoPP__X917RNGdtor_X917RNG2_ptr = int64_t (WINAPIV*)(struct CryptoPP::X917RNG*);
        using CryptoPP__X917RNGdtor_X917RNG2_clbk = int64_t (WINAPIV*)(struct CryptoPP::X917RNG*, CryptoPP__X917RNGdtor_X917RNG2_ptr);
        
        using CryptoPP__DL_KeyDerivationAlgorithmctor_DL_KeyDerivationAlgorithm2_ptr = void (WINAPIV*)(struct CryptoPP::DL_KeyDerivationAlgorithm<CryptoPP::ECPPoint>*);
        using CryptoPP__DL_KeyDerivationAlgorithmctor_DL_KeyDerivationAlgorithm2_clbk = void (WINAPIV*)(struct CryptoPP::DL_KeyDerivationAlgorithm<CryptoPP::ECPPoint>*, CryptoPP__DL_KeyDerivationAlgorithmctor_DL_KeyDerivationAlgorithm2_ptr);
        
        using CryptoPP__InvalidArgumentctor_InvalidArgument2_ptr = void (WINAPIV*)(struct CryptoPP::InvalidArgument*, struct CryptoPP::InvalidArgument*);
        using CryptoPP__InvalidArgumentctor_InvalidArgument2_clbk = void (WINAPIV*)(struct CryptoPP::InvalidArgument*, struct CryptoPP::InvalidArgument*, CryptoPP__InvalidArgumentctor_InvalidArgument2_ptr);
        using CryptoPP__InvalidArgumentctor_InvalidArgument4_ptr = void (WINAPIV*)(struct CryptoPP::InvalidArgument*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*);
        using CryptoPP__InvalidArgumentctor_InvalidArgument4_clbk = void (WINAPIV*)(struct CryptoPP::InvalidArgument*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, CryptoPP__InvalidArgumentctor_InvalidArgument4_ptr);
        using CryptoPP__InvalidArgumentdtor_InvalidArgument9_ptr = void (WINAPIV*)(struct CryptoPP::InvalidArgument*);
        using CryptoPP__InvalidArgumentdtor_InvalidArgument9_clbk = void (WINAPIV*)(struct CryptoPP::InvalidArgument*, CryptoPP__InvalidArgumentdtor_InvalidArgument9_ptr);
        
        using CryptoPP__BERDecodeErrctor_BERDecodeErr1_ptr = int64_t (WINAPIV*)(struct CryptoPP::BERDecodeErr*, struct CryptoPP::BERDecodeErr*);
        using CryptoPP__BERDecodeErrctor_BERDecodeErr1_clbk = int64_t (WINAPIV*)(struct CryptoPP::BERDecodeErr*, struct CryptoPP::BERDecodeErr*, CryptoPP__BERDecodeErrctor_BERDecodeErr1_ptr);
        using CryptoPP__BERDecodeErrctor_BERDecodeErr2_ptr = int64_t (WINAPIV*)(struct CryptoPP::BERDecodeErr*);
        using CryptoPP__BERDecodeErrctor_BERDecodeErr2_clbk = int64_t (WINAPIV*)(struct CryptoPP::BERDecodeErr*, CryptoPP__BERDecodeErrctor_BERDecodeErr2_ptr);
        using CryptoPP__BERDecodeErrdtor_BERDecodeErr3_ptr = int64_t (WINAPIV*)(struct CryptoPP::BERDecodeErr*);
        using CryptoPP__BERDecodeErrdtor_BERDecodeErr3_clbk = int64_t (WINAPIV*)(struct CryptoPP::BERDecodeErr*, CryptoPP__BERDecodeErrdtor_BERDecodeErr3_ptr);
        
        using CryptoPP__MicrosoftCryptoProviderGetProviderHandle1_ptr = uint64_t (WINAPIV*)(struct CryptoPP::MicrosoftCryptoProvider*);
        using CryptoPP__MicrosoftCryptoProviderGetProviderHandle1_clbk = uint64_t (WINAPIV*)(struct CryptoPP::MicrosoftCryptoProvider*, CryptoPP__MicrosoftCryptoProviderGetProviderHandle1_ptr);
        using CryptoPP__MicrosoftCryptoProviderctor_MicrosoftCryptoProvider2_ptr = int64_t (WINAPIV*)(struct CryptoPP::MicrosoftCryptoProvider*);
        using CryptoPP__MicrosoftCryptoProviderctor_MicrosoftCryptoProvider2_clbk = int64_t (WINAPIV*)(struct CryptoPP::MicrosoftCryptoProvider*, CryptoPP__MicrosoftCryptoProviderctor_MicrosoftCryptoProvider2_ptr);
        using CryptoPP__MicrosoftCryptoProviderdtor_MicrosoftCryptoProvider3_ptr = int64_t (WINAPIV*)(struct CryptoPP::MicrosoftCryptoProvider*);
        using CryptoPP__MicrosoftCryptoProviderdtor_MicrosoftCryptoProvider3_clbk = int64_t (WINAPIV*)(struct CryptoPP::MicrosoftCryptoProvider*, CryptoPP__MicrosoftCryptoProviderdtor_MicrosoftCryptoProvider3_ptr);
        
        using CryptoPP__KeyAgreementAlgorithmAccessMaterial1_ptr = struct CryptoPP::CryptoMaterial* (WINAPIV*)(struct CryptoPP::KeyAgreementAlgorithm*);
        using CryptoPP__KeyAgreementAlgorithmAccessMaterial1_clbk = struct CryptoPP::CryptoMaterial* (WINAPIV*)(struct CryptoPP::KeyAgreementAlgorithm*, CryptoPP__KeyAgreementAlgorithmAccessMaterial1_ptr);
        using CryptoPP__KeyAgreementAlgorithmGetCryptoParameters2_ptr = struct CryptoPP::CryptoParameters* (WINAPIV*)(struct CryptoPP::KeyAgreementAlgorithm*);
        using CryptoPP__KeyAgreementAlgorithmGetCryptoParameters2_clbk = struct CryptoPP::CryptoParameters* (WINAPIV*)(struct CryptoPP::KeyAgreementAlgorithm*, CryptoPP__KeyAgreementAlgorithmGetCryptoParameters2_ptr);
        using CryptoPP__KeyAgreementAlgorithmGetMaterial3_ptr = struct CryptoPP::CryptoMaterial* (WINAPIV*)(struct CryptoPP::KeyAgreementAlgorithm*);
        using CryptoPP__KeyAgreementAlgorithmGetMaterial3_clbk = struct CryptoPP::CryptoMaterial* (WINAPIV*)(struct CryptoPP::KeyAgreementAlgorithm*, CryptoPP__KeyAgreementAlgorithmGetMaterial3_ptr);
        using CryptoPP__KeyAgreementAlgorithmctor_KeyAgreementAlgorithm4_ptr = int64_t (WINAPIV*)(struct CryptoPP::KeyAgreementAlgorithm*);
        using CryptoPP__KeyAgreementAlgorithmctor_KeyAgreementAlgorithm4_clbk = int64_t (WINAPIV*)(struct CryptoPP::KeyAgreementAlgorithm*, CryptoPP__KeyAgreementAlgorithmctor_KeyAgreementAlgorithm4_ptr);
        using CryptoPP__KeyAgreementAlgorithmdtor_KeyAgreementAlgorithm5_ptr = int64_t (WINAPIV*)(struct CryptoPP::KeyAgreementAlgorithm*);
        using CryptoPP__KeyAgreementAlgorithmdtor_KeyAgreementAlgorithm5_clbk = int64_t (WINAPIV*)(struct CryptoPP::KeyAgreementAlgorithm*, CryptoPP__KeyAgreementAlgorithmdtor_KeyAgreementAlgorithm5_ptr);
        
        using CryptoPP__SimpleKeyAgreementDomainGenerateKeyPair1_ptr = void (WINAPIV*)(struct CryptoPP::SimpleKeyAgreementDomain*, struct CryptoPP::RandomNumberGenerator*, uint8_t*, uint8_t*);
        using CryptoPP__SimpleKeyAgreementDomainGenerateKeyPair1_clbk = void (WINAPIV*)(struct CryptoPP::SimpleKeyAgreementDomain*, struct CryptoPP::RandomNumberGenerator*, uint8_t*, uint8_t*, CryptoPP__SimpleKeyAgreementDomainGenerateKeyPair1_ptr);
        using CryptoPP__SimpleKeyAgreementDomainctor_SimpleKeyAgreementDomain2_ptr = int64_t (WINAPIV*)(struct CryptoPP::SimpleKeyAgreementDomain*);
        using CryptoPP__SimpleKeyAgreementDomainctor_SimpleKeyAgreementDomain2_clbk = int64_t (WINAPIV*)(struct CryptoPP::SimpleKeyAgreementDomain*, CryptoPP__SimpleKeyAgreementDomainctor_SimpleKeyAgreementDomain2_ptr);
        using CryptoPP__SimpleKeyAgreementDomaindtor_SimpleKeyAgreementDomain3_ptr = int64_t (WINAPIV*)(struct CryptoPP::SimpleKeyAgreementDomain*);
        using CryptoPP__SimpleKeyAgreementDomaindtor_SimpleKeyAgreementDomain3_clbk = int64_t (WINAPIV*)(struct CryptoPP::SimpleKeyAgreementDomain*, CryptoPP__SimpleKeyAgreementDomaindtor_SimpleKeyAgreementDomain3_ptr);
        
        using CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimector_DL_GroupParameters_GFP_DefaultSafePrime1_ptr = int64_t (WINAPIV*)(struct CryptoPP::DL_GroupParameters_GFP_DefaultSafePrime*, struct CryptoPP::DL_GroupParameters_GFP_DefaultSafePrime*);
        using CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimector_DL_GroupParameters_GFP_DefaultSafePrime1_clbk = int64_t (WINAPIV*)(struct CryptoPP::DL_GroupParameters_GFP_DefaultSafePrime*, struct CryptoPP::DL_GroupParameters_GFP_DefaultSafePrime*, CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimector_DL_GroupParameters_GFP_DefaultSafePrime1_ptr);
        using CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimector_DL_GroupParameters_GFP_DefaultSafePrime2_ptr = int64_t (WINAPIV*)(struct CryptoPP::DL_GroupParameters_GFP_DefaultSafePrime*);
        using CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimector_DL_GroupParameters_GFP_DefaultSafePrime2_clbk = int64_t (WINAPIV*)(struct CryptoPP::DL_GroupParameters_GFP_DefaultSafePrime*, CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimector_DL_GroupParameters_GFP_DefaultSafePrime2_ptr);
        using CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimeGetDefaultSubgroupOrderSize3_ptr = unsigned int (WINAPIV*)(struct CryptoPP::DL_GroupParameters_GFP_DefaultSafePrime*, unsigned int);
        using CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimeGetDefaultSubgroupOrderSize3_clbk = unsigned int (WINAPIV*)(struct CryptoPP::DL_GroupParameters_GFP_DefaultSafePrime*, unsigned int, CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimeGetDefaultSubgroupOrderSize3_ptr);
        using CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimedtor_DL_GroupParameters_GFP_DefaultSafePrime4_ptr = int64_t (WINAPIV*)(struct CryptoPP::DL_GroupParameters_GFP_DefaultSafePrime*);
        using CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimedtor_DL_GroupParameters_GFP_DefaultSafePrime4_clbk = int64_t (WINAPIV*)(struct CryptoPP::DL_GroupParameters_GFP_DefaultSafePrime*, CryptoPP__DL_GroupParameters_GFP_DefaultSafePrimedtor_DL_GroupParameters_GFP_DefaultSafePrime4_ptr);
        
        using CryptoPP__NotImplementedctor_NotImplemented2_ptr = void (WINAPIV*)(struct CryptoPP::NotImplemented*, struct CryptoPP::NotImplemented*);
        using CryptoPP__NotImplementedctor_NotImplemented2_clbk = void (WINAPIV*)(struct CryptoPP::NotImplemented*, struct CryptoPP::NotImplemented*, CryptoPP__NotImplementedctor_NotImplemented2_ptr);
        using CryptoPP__NotImplementedctor_NotImplemented4_ptr = void (WINAPIV*)(struct CryptoPP::NotImplemented*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*);
        using CryptoPP__NotImplementedctor_NotImplemented4_clbk = void (WINAPIV*)(struct CryptoPP::NotImplemented*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, CryptoPP__NotImplementedctor_NotImplemented4_ptr);
        using CryptoPP__NotImplementeddtor_NotImplemented9_ptr = void (WINAPIV*)(struct CryptoPP::NotImplemented*);
        using CryptoPP__NotImplementeddtor_NotImplemented9_clbk = void (WINAPIV*)(struct CryptoPP::NotImplemented*, CryptoPP__NotImplementeddtor_NotImplemented9_ptr);
        
        using CryptoPP__CannotFlushctor_CannotFlush1_ptr = int64_t (WINAPIV*)(struct CryptoPP::CannotFlush*, struct CryptoPP::CannotFlush*);
        using CryptoPP__CannotFlushctor_CannotFlush1_clbk = int64_t (WINAPIV*)(struct CryptoPP::CannotFlush*, struct CryptoPP::CannotFlush*, CryptoPP__CannotFlushctor_CannotFlush1_ptr);
        using CryptoPP__CannotFlushdtor_CannotFlush2_ptr = int64_t (WINAPIV*)(struct CryptoPP::CannotFlush*);
        using CryptoPP__CannotFlushdtor_CannotFlush2_clbk = int64_t (WINAPIV*)(struct CryptoPP::CannotFlush*, CryptoPP__CannotFlushdtor_CannotFlush2_ptr);
        
        using CryptoPP__FilterPutSpaceHelperctor_FilterPutSpaceHelper2_ptr = void (WINAPIV*)(struct CryptoPP::FilterPutSpaceHelper*);
        using CryptoPP__FilterPutSpaceHelperctor_FilterPutSpaceHelper2_clbk = void (WINAPIV*)(struct CryptoPP::FilterPutSpaceHelper*, CryptoPP__FilterPutSpaceHelperctor_FilterPutSpaceHelper2_ptr);
        using CryptoPP__FilterPutSpaceHelperdtor_FilterPutSpaceHelper4_ptr = void (WINAPIV*)(struct CryptoPP::FilterPutSpaceHelper*);
        using CryptoPP__FilterPutSpaceHelperdtor_FilterPutSpaceHelper4_clbk = void (WINAPIV*)(struct CryptoPP::FilterPutSpaceHelper*, CryptoPP__FilterPutSpaceHelperdtor_FilterPutSpaceHelper4_ptr);
        
        using CryptoPP__HashFilterCreatePutSpace1_ptr = uint8_t* (WINAPIV*)(struct CryptoPP::HashFilter*, uint64_t*);
        using CryptoPP__HashFilterCreatePutSpace1_clbk = uint8_t* (WINAPIV*)(struct CryptoPP::HashFilter*, uint64_t*, CryptoPP__HashFilterCreatePutSpace1_ptr);
        using CryptoPP__HashFilterctor_HashFilter2_ptr = int64_t (WINAPIV*)(struct CryptoPP::HashFilter*, struct CryptoPP::HashTransformation*, struct CryptoPP::BufferedTransformation*, bool, int);
        using CryptoPP__HashFilterctor_HashFilter2_clbk = int64_t (WINAPIV*)(struct CryptoPP::HashFilter*, struct CryptoPP::HashTransformation*, struct CryptoPP::BufferedTransformation*, bool, int, CryptoPP__HashFilterctor_HashFilter2_ptr);
        using CryptoPP__HashFilterIsolatedInitialize3_ptr = void (WINAPIV*)(struct CryptoPP::HashFilter*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__HashFilterIsolatedInitialize3_clbk = void (WINAPIV*)(struct CryptoPP::HashFilter*, struct CryptoPP::NameValuePairs*, CryptoPP__HashFilterIsolatedInitialize3_ptr);
        using CryptoPP__HashFilterPut24_ptr = uint64_t (WINAPIV*)(struct CryptoPP::HashFilter*, uint8_t*, uint64_t, int, bool);
        using CryptoPP__HashFilterPut24_clbk = uint64_t (WINAPIV*)(struct CryptoPP::HashFilter*, uint8_t*, uint64_t, int, bool, CryptoPP__HashFilterPut24_ptr);
        using CryptoPP__HashFilterdtor_HashFilter5_ptr = int64_t (WINAPIV*)(struct CryptoPP::HashFilter*);
        using CryptoPP__HashFilterdtor_HashFilter5_clbk = int64_t (WINAPIV*)(struct CryptoPP::HashFilter*, CryptoPP__HashFilterdtor_HashFilter5_ptr);
        
        using CryptoPP__PK_DeterministicSignatureMessageEncodingMethodctor_PK_DeterministicSignatureMessageEncodingMethod1_ptr = int64_t (WINAPIV*)(struct CryptoPP::PK_DeterministicSignatureMessageEncodingMethod*);
        using CryptoPP__PK_DeterministicSignatureMessageEncodingMethodctor_PK_DeterministicSignatureMessageEncodingMethod1_clbk = int64_t (WINAPIV*)(struct CryptoPP::PK_DeterministicSignatureMessageEncodingMethod*, CryptoPP__PK_DeterministicSignatureMessageEncodingMethodctor_PK_DeterministicSignatureMessageEncodingMethod1_ptr);
        using CryptoPP__PK_DeterministicSignatureMessageEncodingMethodVerifyMessageRepresentative2_ptr = int64_t (WINAPIV*)(void*, struct CryptoPP*);
        using CryptoPP__PK_DeterministicSignatureMessageEncodingMethodVerifyMessageRepresentative2_clbk = int64_t (WINAPIV*)(void*, struct CryptoPP*, CryptoPP__PK_DeterministicSignatureMessageEncodingMethodVerifyMessageRepresentative2_ptr);
        using CryptoPP__PK_DeterministicSignatureMessageEncodingMethoddtor_PK_DeterministicSignatureMessageEncodingMethod3_ptr = int64_t (WINAPIV*)(struct CryptoPP::PK_DeterministicSignatureMessageEncodingMethod*);
        using CryptoPP__PK_DeterministicSignatureMessageEncodingMethoddtor_PK_DeterministicSignatureMessageEncodingMethod3_clbk = int64_t (WINAPIV*)(struct CryptoPP::PK_DeterministicSignatureMessageEncodingMethod*, CryptoPP__PK_DeterministicSignatureMessageEncodingMethoddtor_PK_DeterministicSignatureMessageEncodingMethod3_ptr);
        
        using CryptoPP__DL_SignatureMessageEncodingMethod_DSAComputeMessageRepresentative1_ptr = int64_t (WINAPIV*)(int64_t, int64_t, int, int, uint8_t*, struct CryptoPP*);
        using CryptoPP__DL_SignatureMessageEncodingMethod_DSAComputeMessageRepresentative1_clbk = int64_t (WINAPIV*)(int64_t, int64_t, int, int, uint8_t*, struct CryptoPP*, CryptoPP__DL_SignatureMessageEncodingMethod_DSAComputeMessageRepresentative1_ptr);
        using CryptoPP__DL_SignatureMessageEncodingMethod_DSActor_DL_SignatureMessageEncodingMethod_DSA2_ptr = int64_t (WINAPIV*)(struct CryptoPP::DL_SignatureMessageEncodingMethod_DSA*);
        using CryptoPP__DL_SignatureMessageEncodingMethod_DSActor_DL_SignatureMessageEncodingMethod_DSA2_clbk = int64_t (WINAPIV*)(struct CryptoPP::DL_SignatureMessageEncodingMethod_DSA*, CryptoPP__DL_SignatureMessageEncodingMethod_DSActor_DL_SignatureMessageEncodingMethod_DSA2_ptr);
        using CryptoPP__DL_SignatureMessageEncodingMethod_DSAdtor_DL_SignatureMessageEncodingMethod_DSA3_ptr = int64_t (WINAPIV*)(struct CryptoPP::DL_SignatureMessageEncodingMethod_DSA*);
        using CryptoPP__DL_SignatureMessageEncodingMethod_DSAdtor_DL_SignatureMessageEncodingMethod_DSA3_clbk = int64_t (WINAPIV*)(struct CryptoPP::DL_SignatureMessageEncodingMethod_DSA*, CryptoPP__DL_SignatureMessageEncodingMethod_DSAdtor_DL_SignatureMessageEncodingMethod_DSA3_ptr);
        
        using CryptoPP__ArrayXorSinkctor_ArrayXorSink1_ptr = int64_t (WINAPIV*)(struct CryptoPP::ArrayXorSink*, uint8_t*, uint64_t);
        using CryptoPP__ArrayXorSinkctor_ArrayXorSink1_clbk = int64_t (WINAPIV*)(struct CryptoPP::ArrayXorSink*, uint8_t*, uint64_t, CryptoPP__ArrayXorSinkctor_ArrayXorSink1_ptr);
        using CryptoPP__ArrayXorSinkCreatePutSpace2_ptr = uint8_t* (WINAPIV*)(struct CryptoPP::ArrayXorSink*, uint64_t*);
        using CryptoPP__ArrayXorSinkCreatePutSpace2_clbk = uint8_t* (WINAPIV*)(struct CryptoPP::ArrayXorSink*, uint64_t*, CryptoPP__ArrayXorSinkCreatePutSpace2_ptr);
        using CryptoPP__ArrayXorSinkPut23_ptr = uint64_t (WINAPIV*)(struct CryptoPP::ArrayXorSink*, uint8_t*, uint64_t, int, bool);
        using CryptoPP__ArrayXorSinkPut23_clbk = uint64_t (WINAPIV*)(struct CryptoPP::ArrayXorSink*, uint8_t*, uint64_t, int, bool, CryptoPP__ArrayXorSinkPut23_ptr);
        using CryptoPP__ArrayXorSinkdtor_ArrayXorSink4_ptr = int64_t (WINAPIV*)(struct CryptoPP::ArrayXorSink*);
        using CryptoPP__ArrayXorSinkdtor_ArrayXorSink4_clbk = int64_t (WINAPIV*)(struct CryptoPP::ArrayXorSink*, CryptoPP__ArrayXorSinkdtor_ArrayXorSink4_ptr);
        
        using CryptoPP__ByteArrayParameterctor_ByteArrayParameter1_ptr = int64_t (WINAPIV*)(struct CryptoPP::ByteArrayParameter*, uint8_t*, unsigned int);
        using CryptoPP__ByteArrayParameterctor_ByteArrayParameter1_clbk = int64_t (WINAPIV*)(struct CryptoPP::ByteArrayParameter*, uint8_t*, unsigned int, CryptoPP__ByteArrayParameterctor_ByteArrayParameter1_ptr);
        using CryptoPP__ByteArrayParameterbegin2_ptr = uint8_t* (WINAPIV*)(struct CryptoPP::ByteArrayParameter*);
        using CryptoPP__ByteArrayParameterbegin2_clbk = uint8_t* (WINAPIV*)(struct CryptoPP::ByteArrayParameter*, CryptoPP__ByteArrayParameterbegin2_ptr);
        using CryptoPP__ByteArrayParametersize3_ptr = uint64_t (WINAPIV*)(struct CryptoPP::ByteArrayParameter*);
        using CryptoPP__ByteArrayParametersize3_clbk = uint64_t (WINAPIV*)(struct CryptoPP::ByteArrayParameter*, CryptoPP__ByteArrayParametersize3_ptr);
        
        using CryptoPP__InputRejectingChannelMessageSeriesEnd2_ptr = bool (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::Filter>*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, int, bool);
        using CryptoPP__InputRejectingChannelMessageSeriesEnd2_clbk = bool (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::Filter>*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, int, bool, CryptoPP__InputRejectingChannelMessageSeriesEnd2_ptr);
        using CryptoPP__InputRejectingChannelPut24_ptr = uint64_t (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::Filter>*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, char*, uint64_t, int, bool);
        using CryptoPP__InputRejectingChannelPut24_clbk = uint64_t (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::Filter>*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, char*, uint64_t, int, bool, CryptoPP__InputRejectingChannelPut24_ptr);
        using CryptoPP__InputRejectingctor_InputRejecting6_ptr = void (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::Filter>*);
        using CryptoPP__InputRejectingctor_InputRejecting6_clbk = void (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::Filter>*, CryptoPP__InputRejectingctor_InputRejecting6_ptr);
        using CryptoPP__InputRejectingIsolatedFlush8_ptr = bool (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::Filter>*, bool, bool);
        using CryptoPP__InputRejectingIsolatedFlush8_clbk = bool (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::Filter>*, bool, bool, CryptoPP__InputRejectingIsolatedFlush8_ptr);
        using CryptoPP__InputRejectingIsolatedMessageSeriesEnd10_ptr = bool (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::Filter>*, bool);
        using CryptoPP__InputRejectingIsolatedMessageSeriesEnd10_clbk = bool (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::Filter>*, bool, CryptoPP__InputRejectingIsolatedMessageSeriesEnd10_ptr);
        using CryptoPP__InputRejectingPut212_ptr = uint64_t (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::Filter>*, char*, uint64_t, int, bool);
        using CryptoPP__InputRejectingPut212_clbk = uint64_t (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::Filter>*, char*, uint64_t, int, bool, CryptoPP__InputRejectingPut212_ptr);
        using CryptoPP__InputRejectingdtor_InputRejecting14_ptr = void (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::Filter>*);
        using CryptoPP__InputRejectingdtor_InputRejecting14_clbk = void (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::Filter>*, CryptoPP__InputRejectingdtor_InputRejecting14_ptr);
        
        using CryptoPP__InputRejecting__InputRejectedctor_InputRejected2_ptr = void (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected*, struct CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected*);
        using CryptoPP__InputRejecting__InputRejectedctor_InputRejected2_clbk = void (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected*, struct CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected*, CryptoPP__InputRejecting__InputRejectedctor_InputRejected2_ptr);
        using CryptoPP__InputRejecting__InputRejectedctor_InputRejected4_ptr = void (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected*);
        using CryptoPP__InputRejecting__InputRejectedctor_InputRejected4_clbk = void (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected*, CryptoPP__InputRejecting__InputRejectedctor_InputRejected4_ptr);
        using CryptoPP__InputRejecting__InputRejecteddtor_InputRejected9_ptr = void (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected*);
        using CryptoPP__InputRejecting__InputRejecteddtor_InputRejected9_clbk = void (WINAPIV*)(struct CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected*, CryptoPP__InputRejecting__InputRejecteddtor_InputRejected9_ptr);
        
        using CryptoPP__SourcePumpAll2_ptr = void (WINAPIV*)(struct CryptoPP::Source*);
        using CryptoPP__SourcePumpAll2_clbk = void (WINAPIV*)(struct CryptoPP::Source*, CryptoPP__SourcePumpAll2_ptr);
        using CryptoPP__SourcePumpAll23_ptr = uint64_t (WINAPIV*)(struct CryptoPP::Source*, bool);
        using CryptoPP__SourcePumpAll23_clbk = uint64_t (WINAPIV*)(struct CryptoPP::Source*, bool, CryptoPP__SourcePumpAll23_ptr);
        using CryptoPP__Sourcector_Source5_ptr = void (WINAPIV*)(struct CryptoPP::Source*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__Sourcector_Source5_clbk = void (WINAPIV*)(struct CryptoPP::Source*, struct CryptoPP::BufferedTransformation*, CryptoPP__Sourcector_Source5_ptr);
        using CryptoPP__SourceSourceInitialize7_ptr = void (WINAPIV*)(struct CryptoPP::Source*, bool, struct CryptoPP::NameValuePairs*);
        using CryptoPP__SourceSourceInitialize7_clbk = void (WINAPIV*)(struct CryptoPP::Source*, bool, struct CryptoPP::NameValuePairs*, CryptoPP__SourceSourceInitialize7_ptr);
        using CryptoPP__Sourcedtor_Source9_ptr = void (WINAPIV*)(struct CryptoPP::Source*);
        using CryptoPP__Sourcedtor_Source9_clbk = void (WINAPIV*)(struct CryptoPP::Source*, CryptoPP__Sourcedtor_Source9_ptr);
        
        using CryptoPP__StringSourcector_StringSource1_ptr = int64_t (WINAPIV*)(struct CryptoPP::StringSource*, char*, bool, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__StringSourcector_StringSource1_clbk = int64_t (WINAPIV*)(struct CryptoPP::StringSource*, char*, bool, struct CryptoPP::BufferedTransformation*, CryptoPP__StringSourcector_StringSource1_ptr);
        using CryptoPP__StringSourcedtor_StringSource2_ptr = int64_t (WINAPIV*)(struct CryptoPP::StringSource*);
        using CryptoPP__StringSourcedtor_StringSource2_clbk = int64_t (WINAPIV*)(struct CryptoPP::StringSource*, CryptoPP__StringSourcedtor_StringSource2_ptr);
        
        using CryptoPP__ECB_OneWayctor_ECB_OneWay1_ptr = int64_t (WINAPIV*)(struct CryptoPP::ECB_OneWay*);
        using CryptoPP__ECB_OneWayctor_ECB_OneWay1_clbk = int64_t (WINAPIV*)(struct CryptoPP::ECB_OneWay*, CryptoPP__ECB_OneWayctor_ECB_OneWay1_ptr);
        using CryptoPP__ECB_OneWayIVRequirement2_ptr = struct CryptoPP::SimpleKeyingInterface::IV_Requirement (WINAPIV*)(struct CryptoPP::ECB_OneWay*);
        using CryptoPP__ECB_OneWayIVRequirement2_clbk = struct CryptoPP::SimpleKeyingInterface::IV_Requirement (WINAPIV*)(struct CryptoPP::ECB_OneWay*, CryptoPP__ECB_OneWayIVRequirement2_ptr);
        using CryptoPP__ECB_OneWayOptimalBlockSize3_ptr = unsigned int (WINAPIV*)(struct CryptoPP::ECB_OneWay*);
        using CryptoPP__ECB_OneWayOptimalBlockSize3_clbk = unsigned int (WINAPIV*)(struct CryptoPP::ECB_OneWay*, CryptoPP__ECB_OneWayOptimalBlockSize3_ptr);
        using CryptoPP__ECB_OneWayProcessBlocks4_ptr = void (WINAPIV*)(struct CryptoPP::ECB_OneWay*, uint8_t*, uint8_t*, uint64_t);
        using CryptoPP__ECB_OneWayProcessBlocks4_clbk = void (WINAPIV*)(struct CryptoPP::ECB_OneWay*, uint8_t*, uint8_t*, uint64_t, CryptoPP__ECB_OneWayProcessBlocks4_ptr);
        using CryptoPP__ECB_OneWaySetKey5_ptr = void (WINAPIV*)(struct CryptoPP::ECB_OneWay*, uint8_t*, uint64_t, struct CryptoPP::NameValuePairs*);
        using CryptoPP__ECB_OneWaySetKey5_clbk = void (WINAPIV*)(struct CryptoPP::ECB_OneWay*, uint8_t*, uint64_t, struct CryptoPP::NameValuePairs*, CryptoPP__ECB_OneWaySetKey5_ptr);
        using CryptoPP__ECB_OneWayStaticAlgorithmName6_ptr = char* (WINAPIV*)();
        using CryptoPP__ECB_OneWayStaticAlgorithmName6_clbk = char* (WINAPIV*)(CryptoPP__ECB_OneWayStaticAlgorithmName6_ptr);
        using CryptoPP__ECB_OneWaydtor_ECB_OneWay7_ptr = int64_t (WINAPIV*)(struct CryptoPP::ECB_OneWay*);
        using CryptoPP__ECB_OneWaydtor_ECB_OneWay7_clbk = int64_t (WINAPIV*)(struct CryptoPP::ECB_OneWay*, CryptoPP__ECB_OneWaydtor_ECB_OneWay7_ptr);
        
        using CryptoPP__LC_RNGGenerateBlock1_ptr = void (WINAPIV*)(struct CryptoPP::LC_RNG*, uint8_t*, uint64_t);
        using CryptoPP__LC_RNGGenerateBlock1_clbk = void (WINAPIV*)(struct CryptoPP::LC_RNG*, uint8_t*, uint64_t, CryptoPP__LC_RNGGenerateBlock1_ptr);
        
        using CryptoPP__BERGeneralDecoderctor_BERGeneralDecoder1_ptr = int64_t (WINAPIV*)(struct CryptoPP::BERGeneralDecoder*, struct CryptoPP::BERGeneralDecoder*, uint8_t);
        using CryptoPP__BERGeneralDecoderctor_BERGeneralDecoder1_clbk = int64_t (WINAPIV*)(struct CryptoPP::BERGeneralDecoder*, struct CryptoPP::BERGeneralDecoder*, uint8_t, CryptoPP__BERGeneralDecoderctor_BERGeneralDecoder1_ptr);
        using CryptoPP__BERGeneralDecoderctor_BERGeneralDecoder2_ptr = int64_t (WINAPIV*)(struct CryptoPP::BERGeneralDecoder*, struct CryptoPP::BufferedTransformation*, uint8_t);
        using CryptoPP__BERGeneralDecoderctor_BERGeneralDecoder2_clbk = int64_t (WINAPIV*)(struct CryptoPP::BERGeneralDecoder*, struct CryptoPP::BufferedTransformation*, uint8_t, CryptoPP__BERGeneralDecoderctor_BERGeneralDecoder2_ptr);
        using CryptoPP__BERGeneralDecoderCheckByte3_ptr = void (WINAPIV*)(struct CryptoPP::BERGeneralDecoder*, uint8_t);
        using CryptoPP__BERGeneralDecoderCheckByte3_clbk = void (WINAPIV*)(struct CryptoPP::BERGeneralDecoder*, uint8_t, CryptoPP__BERGeneralDecoderCheckByte3_ptr);
        using CryptoPP__BERGeneralDecoderEndReached4_ptr = bool (WINAPIV*)(struct CryptoPP::BERGeneralDecoder*);
        using CryptoPP__BERGeneralDecoderEndReached4_clbk = bool (WINAPIV*)(struct CryptoPP::BERGeneralDecoder*, CryptoPP__BERGeneralDecoderEndReached4_ptr);
        using CryptoPP__BERGeneralDecoderInit5_ptr = void (WINAPIV*)(struct CryptoPP::BERGeneralDecoder*, uint8_t);
        using CryptoPP__BERGeneralDecoderInit5_clbk = void (WINAPIV*)(struct CryptoPP::BERGeneralDecoder*, uint8_t, CryptoPP__BERGeneralDecoderInit5_ptr);
        using CryptoPP__BERGeneralDecoderIsDefiniteLength6_ptr = bool (WINAPIV*)(struct CryptoPP::BERGeneralDecoder*);
        using CryptoPP__BERGeneralDecoderIsDefiniteLength6_clbk = bool (WINAPIV*)(struct CryptoPP::BERGeneralDecoder*, CryptoPP__BERGeneralDecoderIsDefiniteLength6_ptr);
        using CryptoPP__BERGeneralDecoderMessageEnd7_ptr = void (WINAPIV*)(struct CryptoPP::BERGeneralDecoder*);
        using CryptoPP__BERGeneralDecoderMessageEnd7_clbk = void (WINAPIV*)(struct CryptoPP::BERGeneralDecoder*, CryptoPP__BERGeneralDecoderMessageEnd7_ptr);
        using CryptoPP__BERGeneralDecoderPeekByte8_ptr = uint8_t (WINAPIV*)(struct CryptoPP::BERGeneralDecoder*);
        using CryptoPP__BERGeneralDecoderPeekByte8_clbk = uint8_t (WINAPIV*)(struct CryptoPP::BERGeneralDecoder*, CryptoPP__BERGeneralDecoderPeekByte8_ptr);
        using CryptoPP__BERGeneralDecoderReduceLength9_ptr = uint64_t (WINAPIV*)(struct CryptoPP::BERGeneralDecoder*, uint64_t);
        using CryptoPP__BERGeneralDecoderReduceLength9_clbk = uint64_t (WINAPIV*)(struct CryptoPP::BERGeneralDecoder*, uint64_t, CryptoPP__BERGeneralDecoderReduceLength9_ptr);
        using CryptoPP__BERGeneralDecoderRemainingLength10_ptr = uint64_t (WINAPIV*)(struct CryptoPP::BERGeneralDecoder*);
        using CryptoPP__BERGeneralDecoderRemainingLength10_clbk = uint64_t (WINAPIV*)(struct CryptoPP::BERGeneralDecoder*, CryptoPP__BERGeneralDecoderRemainingLength10_ptr);
        using CryptoPP__BERGeneralDecoderStoreInitialize11_ptr = void (WINAPIV*)(struct CryptoPP::BERGeneralDecoder*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__BERGeneralDecoderStoreInitialize11_clbk = void (WINAPIV*)(struct CryptoPP::BERGeneralDecoder*, struct CryptoPP::NameValuePairs*, CryptoPP__BERGeneralDecoderStoreInitialize11_ptr);
        using CryptoPP__BERGeneralDecoderdtor_BERGeneralDecoder12_ptr = int64_t (WINAPIV*)(struct CryptoPP::BERGeneralDecoder*);
        using CryptoPP__BERGeneralDecoderdtor_BERGeneralDecoder12_clbk = int64_t (WINAPIV*)(struct CryptoPP::BERGeneralDecoder*, CryptoPP__BERGeneralDecoderdtor_BERGeneralDecoder12_ptr);
        
        using CryptoPP__TF_VerifierBaseInputSignature1_ptr = void (WINAPIV*)(struct CryptoPP::TF_VerifierBase*, struct CryptoPP::PK_MessageAccumulator*, uint8_t*, uint64_t);
        using CryptoPP__TF_VerifierBaseInputSignature1_clbk = void (WINAPIV*)(struct CryptoPP::TF_VerifierBase*, struct CryptoPP::PK_MessageAccumulator*, uint8_t*, uint64_t, CryptoPP__TF_VerifierBaseInputSignature1_ptr);
        using CryptoPP__TF_VerifierBaseRecoverAndRestart2_ptr = struct CryptoPP::DecodingResult* (WINAPIV*)(struct CryptoPP::TF_VerifierBase*, short, struct CryptoPP::DecodingResult*, uint8_t*);
        using CryptoPP__TF_VerifierBaseRecoverAndRestart2_clbk = struct CryptoPP::DecodingResult* (WINAPIV*)(struct CryptoPP::TF_VerifierBase*, short, struct CryptoPP::DecodingResult*, uint8_t*, CryptoPP__TF_VerifierBaseRecoverAndRestart2_ptr);
        using CryptoPP__TF_VerifierBaseVerifyAndRestart3_ptr = bool (WINAPIV*)(struct CryptoPP::TF_VerifierBase*, struct CryptoPP::PK_MessageAccumulator*);
        using CryptoPP__TF_VerifierBaseVerifyAndRestart3_clbk = bool (WINAPIV*)(struct CryptoPP::TF_VerifierBase*, struct CryptoPP::PK_MessageAccumulator*, CryptoPP__TF_VerifierBaseVerifyAndRestart3_ptr);
        
        using CryptoPP__SHA1InitState1_ptr = void (WINAPIV*)(unsigned int*);
        using CryptoPP__SHA1InitState1_clbk = void (WINAPIV*)(unsigned int*, CryptoPP__SHA1InitState1_ptr);
        using CryptoPP__SHA1ctor_SHA13_ptr = void (WINAPIV*)(struct CryptoPP::SHA1*, struct CryptoPP::SHA1*);
        using CryptoPP__SHA1ctor_SHA13_clbk = void (WINAPIV*)(struct CryptoPP::SHA1*, struct CryptoPP::SHA1*, CryptoPP__SHA1ctor_SHA13_ptr);
        using CryptoPP__SHA1ctor_SHA15_ptr = void (WINAPIV*)(struct CryptoPP::SHA1*);
        using CryptoPP__SHA1ctor_SHA15_clbk = void (WINAPIV*)(struct CryptoPP::SHA1*, CryptoPP__SHA1ctor_SHA15_ptr);
        using CryptoPP__SHA1StaticAlgorithmName7_ptr = char* (WINAPIV*)();
        using CryptoPP__SHA1StaticAlgorithmName7_clbk = char* (WINAPIV*)(CryptoPP__SHA1StaticAlgorithmName7_ptr);
        using CryptoPP__SHA1Transform8_ptr = void (WINAPIV*)(unsigned int*, unsigned int*);
        using CryptoPP__SHA1Transform8_clbk = void (WINAPIV*)(unsigned int*, unsigned int*, CryptoPP__SHA1Transform8_ptr);
        using CryptoPP__SHA1dtor_SHA113_ptr = void (WINAPIV*)(struct CryptoPP::SHA1*);
        using CryptoPP__SHA1dtor_SHA113_clbk = void (WINAPIV*)(struct CryptoPP::SHA1*, CryptoPP__SHA1dtor_SHA113_ptr);
        
        using CryptoPP__DL_Algorithm_GDSASign1_ptr = int64_t (WINAPIV*)(int64_t, struct CryptoPP::Integer*, int64_t);
        using CryptoPP__DL_Algorithm_GDSASign1_clbk = int64_t (WINAPIV*)(int64_t, struct CryptoPP::Integer*, int64_t, CryptoPP__DL_Algorithm_GDSASign1_ptr);
        using CryptoPP__DL_Algorithm_GDSAVerify2_ptr = int64_t (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*);
        using CryptoPP__DL_Algorithm_GDSAVerify2_clbk = int64_t (WINAPIV*)(struct CryptoPP::Integer*, struct CryptoPP::Integer*, CryptoPP__DL_Algorithm_GDSAVerify2_ptr);
        
        using CryptoPP__SignatureVerificationFilterFirstPut1_ptr = void (WINAPIV*)(struct CryptoPP::SignatureVerificationFilter*, uint8_t*);
        using CryptoPP__SignatureVerificationFilterFirstPut1_clbk = void (WINAPIV*)(struct CryptoPP::SignatureVerificationFilter*, uint8_t*, CryptoPP__SignatureVerificationFilterFirstPut1_ptr);
        using CryptoPP__SignatureVerificationFilterInitializeDerivedAndReturnNewSizes2_ptr = void (WINAPIV*)(struct CryptoPP::SignatureVerificationFilter*, struct CryptoPP::NameValuePairs*, uint64_t*, uint64_t*, uint64_t*);
        using CryptoPP__SignatureVerificationFilterInitializeDerivedAndReturnNewSizes2_clbk = void (WINAPIV*)(struct CryptoPP::SignatureVerificationFilter*, struct CryptoPP::NameValuePairs*, uint64_t*, uint64_t*, uint64_t*, CryptoPP__SignatureVerificationFilterInitializeDerivedAndReturnNewSizes2_ptr);
        using CryptoPP__SignatureVerificationFilterLastPut3_ptr = void (WINAPIV*)(struct CryptoPP::SignatureVerificationFilter*, uint8_t*, uint64_t);
        using CryptoPP__SignatureVerificationFilterLastPut3_clbk = void (WINAPIV*)(struct CryptoPP::SignatureVerificationFilter*, uint8_t*, uint64_t, CryptoPP__SignatureVerificationFilterLastPut3_ptr);
        using CryptoPP__SignatureVerificationFilterNextPutMultiple4_ptr = void (WINAPIV*)(struct CryptoPP::SignatureVerificationFilter*, uint8_t*, uint64_t);
        using CryptoPP__SignatureVerificationFilterNextPutMultiple4_clbk = void (WINAPIV*)(struct CryptoPP::SignatureVerificationFilter*, uint8_t*, uint64_t, CryptoPP__SignatureVerificationFilterNextPutMultiple4_ptr);
        using CryptoPP__SignatureVerificationFilterctor_SignatureVerificationFilter5_ptr = int64_t (WINAPIV*)(struct CryptoPP::SignatureVerificationFilter*, struct CryptoPP::PK_Verifier*, struct CryptoPP::BufferedTransformation*, unsigned int);
        using CryptoPP__SignatureVerificationFilterctor_SignatureVerificationFilter5_clbk = int64_t (WINAPIV*)(struct CryptoPP::SignatureVerificationFilter*, struct CryptoPP::PK_Verifier*, struct CryptoPP::BufferedTransformation*, unsigned int, CryptoPP__SignatureVerificationFilterctor_SignatureVerificationFilter5_ptr);
        using CryptoPP__SignatureVerificationFilterdtor_SignatureVerificationFilter6_ptr = int64_t (WINAPIV*)(struct CryptoPP::SignatureVerificationFilter*);
        using CryptoPP__SignatureVerificationFilterdtor_SignatureVerificationFilter6_clbk = int64_t (WINAPIV*)(struct CryptoPP::SignatureVerificationFilter*, CryptoPP__SignatureVerificationFilterdtor_SignatureVerificationFilter6_ptr);
        
        using CryptoPP__SignatureVerificationFilter__SignatureVerificationFailedctor_SignatureVerificationFailed1_ptr = int64_t (WINAPIV*)(struct CryptoPP::SignatureVerificationFilter::SignatureVerificationFailed*, struct CryptoPP::SignatureVerificationFilter::SignatureVerificationFailed*);
        using CryptoPP__SignatureVerificationFilter__SignatureVerificationFailedctor_SignatureVerificationFailed1_clbk = int64_t (WINAPIV*)(struct CryptoPP::SignatureVerificationFilter::SignatureVerificationFailed*, struct CryptoPP::SignatureVerificationFilter::SignatureVerificationFailed*, CryptoPP__SignatureVerificationFilter__SignatureVerificationFailedctor_SignatureVerificationFailed1_ptr);
        using CryptoPP__SignatureVerificationFilter__SignatureVerificationFailedctor_SignatureVerificationFailed2_ptr = int64_t (WINAPIV*)(struct CryptoPP::SignatureVerificationFilter::SignatureVerificationFailed*);
        using CryptoPP__SignatureVerificationFilter__SignatureVerificationFailedctor_SignatureVerificationFailed2_clbk = int64_t (WINAPIV*)(struct CryptoPP::SignatureVerificationFilter::SignatureVerificationFailed*, CryptoPP__SignatureVerificationFilter__SignatureVerificationFailedctor_SignatureVerificationFailed2_ptr);
        using CryptoPP__SignatureVerificationFilter__SignatureVerificationFaileddtor_SignatureVerificationFailed3_ptr = int64_t (WINAPIV*)(struct CryptoPP::SignatureVerificationFilter::SignatureVerificationFailed*);
        using CryptoPP__SignatureVerificationFilter__SignatureVerificationFaileddtor_SignatureVerificationFailed3_clbk = int64_t (WINAPIV*)(struct CryptoPP::SignatureVerificationFilter::SignatureVerificationFailed*, CryptoPP__SignatureVerificationFilter__SignatureVerificationFaileddtor_SignatureVerificationFailed3_ptr);
        
        using CryptoPP__ConstByteArrayParameterAssign2_ptr = void (WINAPIV*)(struct CryptoPP::ConstByteArrayParameter*, char*, uint64_t, bool);
        using CryptoPP__ConstByteArrayParameterAssign2_clbk = void (WINAPIV*)(struct CryptoPP::ConstByteArrayParameter*, char*, uint64_t, bool, CryptoPP__ConstByteArrayParameterAssign2_ptr);
        using CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter3_ptr = int64_t (WINAPIV*)(struct CryptoPP::ConstByteArrayParameter*, struct CryptoPP::ConstByteArrayParameter*);
        using CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter3_clbk = int64_t (WINAPIV*)(struct CryptoPP::ConstByteArrayParameter*, struct CryptoPP::ConstByteArrayParameter*, CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter3_ptr);
        using CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter5_ptr = void (WINAPIV*)(struct CryptoPP::ConstByteArrayParameter*, char*, bool);
        using CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter5_clbk = void (WINAPIV*)(struct CryptoPP::ConstByteArrayParameter*, char*, bool, CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter5_ptr);
        using CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter6_ptr = int64_t (WINAPIV*)(struct CryptoPP::ConstByteArrayParameter*, uint8_t*, uint64_t, bool);
        using CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter6_clbk = int64_t (WINAPIV*)(struct CryptoPP::ConstByteArrayParameter*, uint8_t*, uint64_t, bool, CryptoPP__ConstByteArrayParameterctor_ConstByteArrayParameter6_ptr);
        using CryptoPP__ConstByteArrayParameterbegin8_ptr = char* (WINAPIV*)(struct CryptoPP::ConstByteArrayParameter*);
        using CryptoPP__ConstByteArrayParameterbegin8_clbk = char* (WINAPIV*)(struct CryptoPP::ConstByteArrayParameter*, CryptoPP__ConstByteArrayParameterbegin8_ptr);
        using CryptoPP__ConstByteArrayParametersize10_ptr = uint64_t (WINAPIV*)(struct CryptoPP::ConstByteArrayParameter*);
        using CryptoPP__ConstByteArrayParametersize10_clbk = uint64_t (WINAPIV*)(struct CryptoPP::ConstByteArrayParameter*, CryptoPP__ConstByteArrayParametersize10_ptr);
        using CryptoPP__ConstByteArrayParameterdtor_ConstByteArrayParameter12_ptr = void (WINAPIV*)(struct CryptoPP::ConstByteArrayParameter*);
        using CryptoPP__ConstByteArrayParameterdtor_ConstByteArrayParameter12_clbk = void (WINAPIV*)(struct CryptoPP::ConstByteArrayParameter*, CryptoPP__ConstByteArrayParameterdtor_ConstByteArrayParameter12_ptr);
        
        using CryptoPP__TF_DecryptorBaseDecrypt1_ptr = struct CryptoPP::DecodingResult* (WINAPIV*)(struct CryptoPP::TF_DecryptorBase*, struct CryptoPP::DecodingResult*, struct CryptoPP::RandomNumberGenerator*, uint8_t*, uint64_t, uint8_t*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__TF_DecryptorBaseDecrypt1_clbk = struct CryptoPP::DecodingResult* (WINAPIV*)(struct CryptoPP::TF_DecryptorBase*, struct CryptoPP::DecodingResult*, struct CryptoPP::RandomNumberGenerator*, uint8_t*, uint64_t, uint8_t*, struct CryptoPP::NameValuePairs*, CryptoPP__TF_DecryptorBaseDecrypt1_ptr);
        
        using CryptoPP__HashVerificationFilterFirstPut1_ptr = void (WINAPIV*)(struct CryptoPP::HashVerificationFilter*, uint8_t*);
        using CryptoPP__HashVerificationFilterFirstPut1_clbk = void (WINAPIV*)(struct CryptoPP::HashVerificationFilter*, uint8_t*, CryptoPP__HashVerificationFilterFirstPut1_ptr);
        using CryptoPP__HashVerificationFilterctor_HashVerificationFilter2_ptr = int64_t (WINAPIV*)(struct CryptoPP::HashVerificationFilter*, struct CryptoPP::HashTransformation*, struct CryptoPP::BufferedTransformation*, unsigned int);
        using CryptoPP__HashVerificationFilterctor_HashVerificationFilter2_clbk = int64_t (WINAPIV*)(struct CryptoPP::HashVerificationFilter*, struct CryptoPP::HashTransformation*, struct CryptoPP::BufferedTransformation*, unsigned int, CryptoPP__HashVerificationFilterctor_HashVerificationFilter2_ptr);
        using CryptoPP__HashVerificationFilterInitializeDerivedAndReturnNewSizes3_ptr = void (WINAPIV*)(struct CryptoPP::HashVerificationFilter*, struct CryptoPP::NameValuePairs*, uint64_t*, uint64_t*, uint64_t*);
        using CryptoPP__HashVerificationFilterInitializeDerivedAndReturnNewSizes3_clbk = void (WINAPIV*)(struct CryptoPP::HashVerificationFilter*, struct CryptoPP::NameValuePairs*, uint64_t*, uint64_t*, uint64_t*, CryptoPP__HashVerificationFilterInitializeDerivedAndReturnNewSizes3_ptr);
        using CryptoPP__HashVerificationFilterLastPut4_ptr = void (WINAPIV*)(struct CryptoPP::HashVerificationFilter*, uint8_t*, uint64_t);
        using CryptoPP__HashVerificationFilterLastPut4_clbk = void (WINAPIV*)(struct CryptoPP::HashVerificationFilter*, uint8_t*, uint64_t, CryptoPP__HashVerificationFilterLastPut4_ptr);
        using CryptoPP__HashVerificationFilterNextPutMultiple5_ptr = void (WINAPIV*)(struct CryptoPP::HashVerificationFilter*, uint8_t*, uint64_t);
        using CryptoPP__HashVerificationFilterNextPutMultiple5_clbk = void (WINAPIV*)(struct CryptoPP::HashVerificationFilter*, uint8_t*, uint64_t, CryptoPP__HashVerificationFilterNextPutMultiple5_ptr);
        using CryptoPP__HashVerificationFilterdtor_HashVerificationFilter6_ptr = int64_t (WINAPIV*)(struct CryptoPP::HashVerificationFilter*);
        using CryptoPP__HashVerificationFilterdtor_HashVerificationFilter6_clbk = int64_t (WINAPIV*)(struct CryptoPP::HashVerificationFilter*, CryptoPP__HashVerificationFilterdtor_HashVerificationFilter6_ptr);
        
        using CryptoPP__HashVerificationFilter__HashVerificationFailedctor_HashVerificationFailed1_ptr = int64_t (WINAPIV*)(struct CryptoPP::HashVerificationFilter::HashVerificationFailed*, struct CryptoPP::HashVerificationFilter::HashVerificationFailed*);
        using CryptoPP__HashVerificationFilter__HashVerificationFailedctor_HashVerificationFailed1_clbk = int64_t (WINAPIV*)(struct CryptoPP::HashVerificationFilter::HashVerificationFailed*, struct CryptoPP::HashVerificationFilter::HashVerificationFailed*, CryptoPP__HashVerificationFilter__HashVerificationFailedctor_HashVerificationFailed1_ptr);
        using CryptoPP__HashVerificationFilter__HashVerificationFailedctor_HashVerificationFailed2_ptr = int64_t (WINAPIV*)(struct CryptoPP::HashVerificationFilter::HashVerificationFailed*);
        using CryptoPP__HashVerificationFilter__HashVerificationFailedctor_HashVerificationFailed2_clbk = int64_t (WINAPIV*)(struct CryptoPP::HashVerificationFilter::HashVerificationFailed*, CryptoPP__HashVerificationFilter__HashVerificationFailedctor_HashVerificationFailed2_ptr);
        using CryptoPP__HashVerificationFilter__HashVerificationFaileddtor_HashVerificationFailed3_ptr = int64_t (WINAPIV*)(struct CryptoPP::HashVerificationFilter::HashVerificationFailed*);
        using CryptoPP__HashVerificationFilter__HashVerificationFaileddtor_HashVerificationFailed3_clbk = int64_t (WINAPIV*)(struct CryptoPP::HashVerificationFilter::HashVerificationFailed*, CryptoPP__HashVerificationFilter__HashVerificationFaileddtor_HashVerificationFailed3_ptr);
        
        using CryptoPP__AutoSeededX917RNGReseed1_ptr = int64_t (WINAPIV*)(uint8_t*);
        using CryptoPP__AutoSeededX917RNGReseed1_clbk = int64_t (WINAPIV*)(uint8_t*, CryptoPP__AutoSeededX917RNGReseed1_ptr);
        
        using CryptoPP__BERSequenceDecoderctor_BERSequenceDecoder1_ptr = int64_t (WINAPIV*)(struct CryptoPP::BERSequenceDecoder*, struct CryptoPP::BERSequenceDecoder*, uint8_t);
        using CryptoPP__BERSequenceDecoderctor_BERSequenceDecoder1_clbk = int64_t (WINAPIV*)(struct CryptoPP::BERSequenceDecoder*, struct CryptoPP::BERSequenceDecoder*, uint8_t, CryptoPP__BERSequenceDecoderctor_BERSequenceDecoder1_ptr);
        using CryptoPP__BERSequenceDecoderctor_BERSequenceDecoder2_ptr = int64_t (WINAPIV*)(struct CryptoPP::BERSequenceDecoder*, struct CryptoPP::BufferedTransformation*, uint8_t);
        using CryptoPP__BERSequenceDecoderctor_BERSequenceDecoder2_clbk = int64_t (WINAPIV*)(struct CryptoPP::BERSequenceDecoder*, struct CryptoPP::BufferedTransformation*, uint8_t, CryptoPP__BERSequenceDecoderctor_BERSequenceDecoder2_ptr);
        using CryptoPP__BERSequenceDecoderdtor_BERSequenceDecoder3_ptr = int64_t (WINAPIV*)(struct CryptoPP::BERSequenceDecoder*);
        using CryptoPP__BERSequenceDecoderdtor_BERSequenceDecoder3_clbk = int64_t (WINAPIV*)(struct CryptoPP::BERSequenceDecoder*, CryptoPP__BERSequenceDecoderdtor_BERSequenceDecoder3_ptr);
        
        using CryptoPP__CBC_CTS_Encryptionctor_CBC_CTS_Encryption1_ptr = int64_t (WINAPIV*)(struct CryptoPP::CBC_CTS_Encryption*);
        using CryptoPP__CBC_CTS_Encryptionctor_CBC_CTS_Encryption1_clbk = int64_t (WINAPIV*)(struct CryptoPP::CBC_CTS_Encryption*, CryptoPP__CBC_CTS_Encryptionctor_CBC_CTS_Encryption1_ptr);
        using CryptoPP__CBC_CTS_EncryptionMinLastBlockSize2_ptr = unsigned int (WINAPIV*)(struct CryptoPP::CBC_CTS_Encryption*);
        using CryptoPP__CBC_CTS_EncryptionMinLastBlockSize2_clbk = unsigned int (WINAPIV*)(struct CryptoPP::CBC_CTS_Encryption*, CryptoPP__CBC_CTS_EncryptionMinLastBlockSize2_ptr);
        using CryptoPP__CBC_CTS_EncryptionProcessLastBlock3_ptr = void (WINAPIV*)(struct CryptoPP::CBC_CTS_Encryption*, uint8_t*, uint8_t*, uint64_t);
        using CryptoPP__CBC_CTS_EncryptionProcessLastBlock3_clbk = void (WINAPIV*)(struct CryptoPP::CBC_CTS_Encryption*, uint8_t*, uint8_t*, uint64_t, CryptoPP__CBC_CTS_EncryptionProcessLastBlock3_ptr);
        using CryptoPP__CBC_CTS_EncryptionUncheckedSetKey4_ptr = void (WINAPIV*)(struct CryptoPP::CBC_CTS_Encryption*, uint8_t*, unsigned int, struct CryptoPP::NameValuePairs*);
        using CryptoPP__CBC_CTS_EncryptionUncheckedSetKey4_clbk = void (WINAPIV*)(struct CryptoPP::CBC_CTS_Encryption*, uint8_t*, unsigned int, struct CryptoPP::NameValuePairs*, CryptoPP__CBC_CTS_EncryptionUncheckedSetKey4_ptr);
        using CryptoPP__CBC_CTS_Encryptiondtor_CBC_CTS_Encryption5_ptr = int64_t (WINAPIV*)(struct CryptoPP::CBC_CTS_Encryption*);
        using CryptoPP__CBC_CTS_Encryptiondtor_CBC_CTS_Encryption5_clbk = int64_t (WINAPIV*)(struct CryptoPP::CBC_CTS_Encryption*, CryptoPP__CBC_CTS_Encryptiondtor_CBC_CTS_Encryption5_ptr);
        
        using CryptoPP__CBC_CTS_Decryptionctor_CBC_CTS_Decryption1_ptr = int64_t (WINAPIV*)(struct CryptoPP::CBC_CTS_Decryption*);
        using CryptoPP__CBC_CTS_Decryptionctor_CBC_CTS_Decryption1_clbk = int64_t (WINAPIV*)(struct CryptoPP::CBC_CTS_Decryption*, CryptoPP__CBC_CTS_Decryptionctor_CBC_CTS_Decryption1_ptr);
        using CryptoPP__CBC_CTS_DecryptionMinLastBlockSize2_ptr = unsigned int (WINAPIV*)(struct CryptoPP::CBC_CTS_Decryption*);
        using CryptoPP__CBC_CTS_DecryptionMinLastBlockSize2_clbk = unsigned int (WINAPIV*)(struct CryptoPP::CBC_CTS_Decryption*, CryptoPP__CBC_CTS_DecryptionMinLastBlockSize2_ptr);
        using CryptoPP__CBC_CTS_DecryptionProcessLastBlock3_ptr = void (WINAPIV*)(struct CryptoPP::CBC_CTS_Decryption*, uint8_t*, uint8_t*, uint64_t);
        using CryptoPP__CBC_CTS_DecryptionProcessLastBlock3_clbk = void (WINAPIV*)(struct CryptoPP::CBC_CTS_Decryption*, uint8_t*, uint8_t*, uint64_t, CryptoPP__CBC_CTS_DecryptionProcessLastBlock3_ptr);
        using CryptoPP__CBC_CTS_Decryptiondtor_CBC_CTS_Decryption4_ptr = int64_t (WINAPIV*)(struct CryptoPP::CBC_CTS_Decryption*);
        using CryptoPP__CBC_CTS_Decryptiondtor_CBC_CTS_Decryption4_clbk = int64_t (WINAPIV*)(struct CryptoPP::CBC_CTS_Decryption*, CryptoPP__CBC_CTS_Decryptiondtor_CBC_CTS_Decryption4_ptr);
        
        using CryptoPP__GF2NPPClone1_ptr = struct CryptoPP::GF2NP* (WINAPIV*)(struct CryptoPP::GF2NPP*);
        using CryptoPP__GF2NPPClone1_clbk = struct CryptoPP::GF2NP* (WINAPIV*)(struct CryptoPP::GF2NPP*, CryptoPP__GF2NPPClone1_ptr);
        using CryptoPP__GF2NPPDEREncode2_ptr = void (WINAPIV*)(struct CryptoPP::GF2NPP*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__GF2NPPDEREncode2_clbk = void (WINAPIV*)(struct CryptoPP::GF2NPP*, struct CryptoPP::BufferedTransformation*, CryptoPP__GF2NPPDEREncode2_ptr);
        using CryptoPP__GF2NPPctor_GF2NPP3_ptr = int64_t (WINAPIV*)(struct CryptoPP::GF2NPP*, struct CryptoPP::GF2NPP*);
        using CryptoPP__GF2NPPctor_GF2NPP3_clbk = int64_t (WINAPIV*)(struct CryptoPP::GF2NPP*, struct CryptoPP::GF2NPP*, CryptoPP__GF2NPPctor_GF2NPP3_ptr);
        using CryptoPP__GF2NPPctor_GF2NPP4_ptr = int64_t (WINAPIV*)(struct CryptoPP::GF2NPP*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int);
        using CryptoPP__GF2NPPctor_GF2NPP4_clbk = int64_t (WINAPIV*)(struct CryptoPP::GF2NPP*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, CryptoPP__GF2NPPctor_GF2NPP4_ptr);
        using CryptoPP__GF2NPPdtor_GF2NPP5_ptr = int64_t (WINAPIV*)(struct CryptoPP::GF2NPP*);
        using CryptoPP__GF2NPPdtor_GF2NPP5_clbk = int64_t (WINAPIV*)(struct CryptoPP::GF2NPP*, CryptoPP__GF2NPPdtor_GF2NPP5_ptr);
        
        using CryptoPP__SHA512InitState1_ptr = void (WINAPIV*)(uint64_t*);
        using CryptoPP__SHA512InitState1_clbk = void (WINAPIV*)(uint64_t*, CryptoPP__SHA512InitState1_ptr);
        using CryptoPP__SHA512Transform2_ptr = void (WINAPIV*)(uint64_t*, uint64_t*);
        using CryptoPP__SHA512Transform2_clbk = void (WINAPIV*)(uint64_t*, uint64_t*, CryptoPP__SHA512Transform2_ptr);
        
        using CryptoPP__HMACAccessHash2_ptr = struct CryptoPP::HashTransformation* (WINAPIV*)(struct CryptoPP::HMAC<CryptoPP::SHA1>*);
        using CryptoPP__HMACAccessHash2_clbk = struct CryptoPP::HashTransformation* (WINAPIV*)(struct CryptoPP::HMAC<CryptoPP::SHA1>*, CryptoPP__HMACAccessHash2_ptr);
        using CryptoPP__HMACAlgorithmName4_ptr = struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (WINAPIV*)(struct CryptoPP::HMAC<CryptoPP::SHA1>*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*);
        using CryptoPP__HMACAlgorithmName4_clbk = struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (WINAPIV*)(struct CryptoPP::HMAC<CryptoPP::SHA1>*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, CryptoPP__HMACAlgorithmName4_ptr);
        using CryptoPP__HMACctor_HMAC6_ptr = void (WINAPIV*)(struct CryptoPP::HMAC<CryptoPP::SHA1>*, char*, uint64_t);
        using CryptoPP__HMACctor_HMAC6_clbk = void (WINAPIV*)(struct CryptoPP::HMAC<CryptoPP::SHA1>*, char*, uint64_t, CryptoPP__HMACctor_HMAC6_ptr);
        using CryptoPP__HMACStaticAlgorithmName8_ptr = struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (WINAPIV*)(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*);
        using CryptoPP__HMACStaticAlgorithmName8_clbk = struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (WINAPIV*)(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, CryptoPP__HMACStaticAlgorithmName8_ptr);
        using CryptoPP__HMACdtor_HMAC13_ptr = void (WINAPIV*)(struct CryptoPP::HMAC<CryptoPP::SHA1>*);
        using CryptoPP__HMACdtor_HMAC13_clbk = void (WINAPIV*)(struct CryptoPP::HMAC<CryptoPP::SHA1>*, CryptoPP__HMACdtor_HMAC13_ptr);
        
        using CryptoPP__DL_EncryptionAlgorithm_Xorctor_DL_EncryptionAlgorithm_Xor2_ptr = void (WINAPIV*)(struct CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>*);
        using CryptoPP__DL_EncryptionAlgorithm_Xorctor_DL_EncryptionAlgorithm_Xor2_clbk = void (WINAPIV*)(struct CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>*, CryptoPP__DL_EncryptionAlgorithm_Xorctor_DL_EncryptionAlgorithm_Xor2_ptr);
        using CryptoPP__DL_EncryptionAlgorithm_XorGetMaxSymmetricPlaintextLength4_ptr = uint64_t (WINAPIV*)(struct CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>*, uint64_t);
        using CryptoPP__DL_EncryptionAlgorithm_XorGetMaxSymmetricPlaintextLength4_clbk = uint64_t (WINAPIV*)(struct CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>*, uint64_t, CryptoPP__DL_EncryptionAlgorithm_XorGetMaxSymmetricPlaintextLength4_ptr);
        using CryptoPP__DL_EncryptionAlgorithm_XorGetSymmetricCiphertextLength6_ptr = uint64_t (WINAPIV*)(struct CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>*, uint64_t);
        using CryptoPP__DL_EncryptionAlgorithm_XorGetSymmetricCiphertextLength6_clbk = uint64_t (WINAPIV*)(struct CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>*, uint64_t, CryptoPP__DL_EncryptionAlgorithm_XorGetSymmetricCiphertextLength6_ptr);
        using CryptoPP__DL_EncryptionAlgorithm_XorGetSymmetricKeyLength8_ptr = uint64_t (WINAPIV*)(struct CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>*, uint64_t);
        using CryptoPP__DL_EncryptionAlgorithm_XorGetSymmetricKeyLength8_clbk = uint64_t (WINAPIV*)(struct CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>*, uint64_t, CryptoPP__DL_EncryptionAlgorithm_XorGetSymmetricKeyLength8_ptr);
        using CryptoPP__DL_EncryptionAlgorithm_XorParameterSupported10_ptr = bool (WINAPIV*)(struct CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>*, char*);
        using CryptoPP__DL_EncryptionAlgorithm_XorParameterSupported10_clbk = bool (WINAPIV*)(struct CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>*, char*, CryptoPP__DL_EncryptionAlgorithm_XorParameterSupported10_ptr);
        using CryptoPP__DL_EncryptionAlgorithm_XorSymmetricDecrypt12_ptr = struct CryptoPP::DecodingResult* (WINAPIV*)(struct CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>*, struct CryptoPP::DecodingResult*, char*, char*, uint64_t, char*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__DL_EncryptionAlgorithm_XorSymmetricDecrypt12_clbk = struct CryptoPP::DecodingResult* (WINAPIV*)(struct CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>*, struct CryptoPP::DecodingResult*, char*, char*, uint64_t, char*, struct CryptoPP::NameValuePairs*, CryptoPP__DL_EncryptionAlgorithm_XorSymmetricDecrypt12_ptr);
        using CryptoPP__DL_EncryptionAlgorithm_XorSymmetricEncrypt14_ptr = void (WINAPIV*)(struct CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>*, struct CryptoPP::RandomNumberGenerator*, char*, char*, uint64_t, char*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__DL_EncryptionAlgorithm_XorSymmetricEncrypt14_clbk = void (WINAPIV*)(struct CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0>*, struct CryptoPP::RandomNumberGenerator*, char*, char*, uint64_t, char*, struct CryptoPP::NameValuePairs*, CryptoPP__DL_EncryptionAlgorithm_XorSymmetricEncrypt14_ptr);
        
        using CryptoPP__MaurerRandomnessTestBytesNeeded1_ptr = unsigned int (WINAPIV*)(struct CryptoPP::MaurerRandomnessTest*);
        using CryptoPP__MaurerRandomnessTestBytesNeeded1_clbk = unsigned int (WINAPIV*)(struct CryptoPP::MaurerRandomnessTest*, CryptoPP__MaurerRandomnessTestBytesNeeded1_ptr);
        using CryptoPP__MaurerRandomnessTestGetTestValue2_ptr = double (WINAPIV*)(struct CryptoPP::MaurerRandomnessTest*);
        using CryptoPP__MaurerRandomnessTestGetTestValue2_clbk = double (WINAPIV*)(struct CryptoPP::MaurerRandomnessTest*, CryptoPP__MaurerRandomnessTestGetTestValue2_ptr);
        using CryptoPP__MaurerRandomnessTestctor_MaurerRandomnessTest3_ptr = int64_t (WINAPIV*)(struct CryptoPP::MaurerRandomnessTest*);
        using CryptoPP__MaurerRandomnessTestctor_MaurerRandomnessTest3_clbk = int64_t (WINAPIV*)(struct CryptoPP::MaurerRandomnessTest*, CryptoPP__MaurerRandomnessTestctor_MaurerRandomnessTest3_ptr);
        using CryptoPP__MaurerRandomnessTestPut24_ptr = uint64_t (WINAPIV*)(struct CryptoPP::MaurerRandomnessTest*, uint8_t*, uint64_t, int, bool);
        using CryptoPP__MaurerRandomnessTestPut24_clbk = uint64_t (WINAPIV*)(struct CryptoPP::MaurerRandomnessTest*, uint8_t*, uint64_t, int, bool, CryptoPP__MaurerRandomnessTestPut24_ptr);
        using CryptoPP__MaurerRandomnessTestdtor_MaurerRandomnessTest5_ptr = int64_t (WINAPIV*)(struct CryptoPP::MaurerRandomnessTest*);
        using CryptoPP__MaurerRandomnessTestdtor_MaurerRandomnessTest5_clbk = int64_t (WINAPIV*)(struct CryptoPP::MaurerRandomnessTest*, CryptoPP__MaurerRandomnessTestdtor_MaurerRandomnessTest5_ptr);
        
        using CryptoPP__BitBucketctor_BitBucket1_ptr = int64_t (WINAPIV*)(struct CryptoPP::BitBucket*);
        using CryptoPP__BitBucketctor_BitBucket1_clbk = int64_t (WINAPIV*)(struct CryptoPP::BitBucket*, CryptoPP__BitBucketctor_BitBucket1_ptr);
        using CryptoPP__BitBucketIsolatedInitialize2_ptr = void (WINAPIV*)(struct CryptoPP::BitBucket*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__BitBucketIsolatedInitialize2_clbk = void (WINAPIV*)(struct CryptoPP::BitBucket*, struct CryptoPP::NameValuePairs*, CryptoPP__BitBucketIsolatedInitialize2_ptr);
        using CryptoPP__BitBucketPut23_ptr = uint64_t (WINAPIV*)(struct CryptoPP::BitBucket*, uint8_t*, uint64_t, int, bool);
        using CryptoPP__BitBucketPut23_clbk = uint64_t (WINAPIV*)(struct CryptoPP::BitBucket*, uint8_t*, uint64_t, int, bool, CryptoPP__BitBucketPut23_ptr);
        using CryptoPP__BitBucketdtor_BitBucket4_ptr = int64_t (WINAPIV*)(struct CryptoPP::BitBucket*);
        using CryptoPP__BitBucketdtor_BitBucket4_clbk = int64_t (WINAPIV*)(struct CryptoPP::BitBucket*, CryptoPP__BitBucketdtor_BitBucket4_ptr);
        
        using CryptoPP__TF_SignerBaseInputRecoverableMessage1_ptr = void (WINAPIV*)(struct CryptoPP::TF_SignerBase*, struct CryptoPP::PK_MessageAccumulator*, uint8_t*, uint64_t);
        using CryptoPP__TF_SignerBaseInputRecoverableMessage1_clbk = void (WINAPIV*)(struct CryptoPP::TF_SignerBase*, struct CryptoPP::PK_MessageAccumulator*, uint8_t*, uint64_t, CryptoPP__TF_SignerBaseInputRecoverableMessage1_ptr);
        using CryptoPP__TF_SignerBaseSignAndRestart2_ptr = uint64_t (WINAPIV*)(struct CryptoPP::TF_SignerBase*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::PK_MessageAccumulator*, uint8_t*, bool);
        using CryptoPP__TF_SignerBaseSignAndRestart2_clbk = uint64_t (WINAPIV*)(struct CryptoPP::TF_SignerBase*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::PK_MessageAccumulator*, uint8_t*, bool, CryptoPP__TF_SignerBaseSignAndRestart2_ptr);
        
        using CryptoPP__UnknownOIDctor_UnknownOID1_ptr = int64_t (WINAPIV*)(struct CryptoPP::UnknownOID*, struct CryptoPP::UnknownOID*);
        using CryptoPP__UnknownOIDctor_UnknownOID1_clbk = int64_t (WINAPIV*)(struct CryptoPP::UnknownOID*, struct CryptoPP::UnknownOID*, CryptoPP__UnknownOIDctor_UnknownOID1_ptr);
        using CryptoPP__UnknownOIDctor_UnknownOID2_ptr = int64_t (WINAPIV*)(struct CryptoPP::UnknownOID*);
        using CryptoPP__UnknownOIDctor_UnknownOID2_clbk = int64_t (WINAPIV*)(struct CryptoPP::UnknownOID*, CryptoPP__UnknownOIDctor_UnknownOID2_ptr);
        using CryptoPP__UnknownOIDdtor_UnknownOID3_ptr = int64_t (WINAPIV*)(struct CryptoPP::UnknownOID*);
        using CryptoPP__UnknownOIDdtor_UnknownOID3_clbk = int64_t (WINAPIV*)(struct CryptoPP::UnknownOID*, CryptoPP__UnknownOIDdtor_UnknownOID3_ptr);
        
        using CryptoPP__EncodedObjectFilterCurrentTarget1_ptr = struct CryptoPP::BufferedTransformation* (WINAPIV*)(struct CryptoPP::EncodedObjectFilter*);
        using CryptoPP__EncodedObjectFilterCurrentTarget1_clbk = struct CryptoPP::BufferedTransformation* (WINAPIV*)(struct CryptoPP::EncodedObjectFilter*, CryptoPP__EncodedObjectFilterCurrentTarget1_ptr);
        using CryptoPP__EncodedObjectFilterPut2_ptr = void (WINAPIV*)(struct CryptoPP::EncodedObjectFilter*, uint8_t*, uint64_t);
        using CryptoPP__EncodedObjectFilterPut2_clbk = void (WINAPIV*)(struct CryptoPP::EncodedObjectFilter*, uint8_t*, uint64_t, CryptoPP__EncodedObjectFilterPut2_ptr);
        
        using CryptoPP__SelfTestFailurector_SelfTestFailure1_ptr = int64_t (WINAPIV*)(struct CryptoPP::SelfTestFailure*, struct CryptoPP::SelfTestFailure*);
        using CryptoPP__SelfTestFailurector_SelfTestFailure1_clbk = int64_t (WINAPIV*)(struct CryptoPP::SelfTestFailure*, struct CryptoPP::SelfTestFailure*, CryptoPP__SelfTestFailurector_SelfTestFailure1_ptr);
        using CryptoPP__SelfTestFailuredtor_SelfTestFailure2_ptr = int64_t (WINAPIV*)(struct CryptoPP::SelfTestFailure*);
        using CryptoPP__SelfTestFailuredtor_SelfTestFailure2_clbk = int64_t (WINAPIV*)(struct CryptoPP::SelfTestFailure*, CryptoPP__SelfTestFailuredtor_SelfTestFailure2_ptr);
        
        using CryptoPP__RandomNumberStoreStoreInitialize1_ptr = void (WINAPIV*)(struct CryptoPP::RandomNumberStore*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__RandomNumberStoreStoreInitialize1_clbk = void (WINAPIV*)(struct CryptoPP::RandomNumberStore*, struct CryptoPP::NameValuePairs*, CryptoPP__RandomNumberStoreStoreInitialize1_ptr);
        
        using CryptoPP__HashInputTooLongctor_HashInputTooLong1_ptr = int64_t (WINAPIV*)(struct CryptoPP::HashInputTooLong*, struct CryptoPP::HashInputTooLong*);
        using CryptoPP__HashInputTooLongctor_HashInputTooLong1_clbk = int64_t (WINAPIV*)(struct CryptoPP::HashInputTooLong*, struct CryptoPP::HashInputTooLong*, CryptoPP__HashInputTooLongctor_HashInputTooLong1_ptr);
        using CryptoPP__HashInputTooLongdtor_HashInputTooLong2_ptr = int64_t (WINAPIV*)(struct CryptoPP::HashInputTooLong*);
        using CryptoPP__HashInputTooLongdtor_HashInputTooLong2_clbk = int64_t (WINAPIV*)(struct CryptoPP::HashInputTooLong*, CryptoPP__HashInputTooLongdtor_HashInputTooLong2_ptr);
        
        using CryptoPP__RedirectorGetPassSignals1_ptr = bool (WINAPIV*)(struct CryptoPP::Redirector*);
        using CryptoPP__RedirectorGetPassSignals1_clbk = bool (WINAPIV*)(struct CryptoPP::Redirector*, CryptoPP__RedirectorGetPassSignals1_ptr);
        using CryptoPP__RedirectorInitialize2_ptr = void (WINAPIV*)(struct CryptoPP::Redirector*, struct CryptoPP::NameValuePairs*, int);
        using CryptoPP__RedirectorInitialize2_clbk = void (WINAPIV*)(struct CryptoPP::Redirector*, struct CryptoPP::NameValuePairs*, int, CryptoPP__RedirectorInitialize2_ptr);
        
        using CryptoPP__TF_EncryptorBaseEncrypt1_ptr = void (WINAPIV*)(struct CryptoPP::TF_EncryptorBase*, struct CryptoPP::RandomNumberGenerator*, uint8_t*, uint64_t, uint8_t*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__TF_EncryptorBaseEncrypt1_clbk = void (WINAPIV*)(struct CryptoPP::TF_EncryptorBase*, struct CryptoPP::RandomNumberGenerator*, uint8_t*, uint64_t, uint8_t*, struct CryptoPP::NameValuePairs*, CryptoPP__TF_EncryptorBaseEncrypt1_ptr);
        
        using CryptoPP__SHA224InitState1_ptr = void (WINAPIV*)(unsigned int*);
        using CryptoPP__SHA224InitState1_clbk = void (WINAPIV*)(unsigned int*, CryptoPP__SHA224InitState1_ptr);
        
        using CryptoPP__InvalidKeyLengthctor_InvalidKeyLength1_ptr = int64_t (WINAPIV*)(struct CryptoPP::InvalidKeyLength*, struct CryptoPP::InvalidKeyLength*);
        using CryptoPP__InvalidKeyLengthctor_InvalidKeyLength1_clbk = int64_t (WINAPIV*)(struct CryptoPP::InvalidKeyLength*, struct CryptoPP::InvalidKeyLength*, CryptoPP__InvalidKeyLengthctor_InvalidKeyLength1_ptr);
        using CryptoPP__InvalidKeyLengthdtor_InvalidKeyLength2_ptr = int64_t (WINAPIV*)(struct CryptoPP::InvalidKeyLength*);
        using CryptoPP__InvalidKeyLengthdtor_InvalidKeyLength2_clbk = int64_t (WINAPIV*)(struct CryptoPP::InvalidKeyLength*, CryptoPP__InvalidKeyLengthdtor_InvalidKeyLength2_ptr);
        
        using CryptoPP__InvalidCiphertextctor_InvalidCiphertext1_ptr = int64_t (WINAPIV*)(struct CryptoPP::InvalidCiphertext*, struct CryptoPP::InvalidCiphertext*);
        using CryptoPP__InvalidCiphertextctor_InvalidCiphertext1_clbk = int64_t (WINAPIV*)(struct CryptoPP::InvalidCiphertext*, struct CryptoPP::InvalidCiphertext*, CryptoPP__InvalidCiphertextctor_InvalidCiphertext1_ptr);
        using CryptoPP__InvalidCiphertextdtor_InvalidCiphertext2_ptr = int64_t (WINAPIV*)(struct CryptoPP::InvalidCiphertext*);
        using CryptoPP__InvalidCiphertextdtor_InvalidCiphertext2_clbk = int64_t (WINAPIV*)(struct CryptoPP::InvalidCiphertext*, CryptoPP__InvalidCiphertextdtor_InvalidCiphertext2_ptr);
        
        using CryptoPP__AuthenticatedKeyAgreementDomainGenerateEphemeralKeyPair1_ptr = void (WINAPIV*)(struct CryptoPP::AuthenticatedKeyAgreementDomain*, struct CryptoPP::RandomNumberGenerator*, uint8_t*, uint8_t*);
        using CryptoPP__AuthenticatedKeyAgreementDomainGenerateEphemeralKeyPair1_clbk = void (WINAPIV*)(struct CryptoPP::AuthenticatedKeyAgreementDomain*, struct CryptoPP::RandomNumberGenerator*, uint8_t*, uint8_t*, CryptoPP__AuthenticatedKeyAgreementDomainGenerateEphemeralKeyPair1_ptr);
        using CryptoPP__AuthenticatedKeyAgreementDomainGenerateStaticKeyPair2_ptr = void (WINAPIV*)(struct CryptoPP::AuthenticatedKeyAgreementDomain*, struct CryptoPP::RandomNumberGenerator*, uint8_t*, uint8_t*);
        using CryptoPP__AuthenticatedKeyAgreementDomainGenerateStaticKeyPair2_clbk = void (WINAPIV*)(struct CryptoPP::AuthenticatedKeyAgreementDomain*, struct CryptoPP::RandomNumberGenerator*, uint8_t*, uint8_t*, CryptoPP__AuthenticatedKeyAgreementDomainGenerateStaticKeyPair2_ptr);
        
        using CryptoPP__NonblockingRngGenerateBlock1_ptr = void (WINAPIV*)(struct CryptoPP::NonblockingRng*, uint8_t*, uint64_t);
        using CryptoPP__NonblockingRngGenerateBlock1_clbk = void (WINAPIV*)(struct CryptoPP::NonblockingRng*, uint8_t*, uint64_t, CryptoPP__NonblockingRngGenerateBlock1_ptr);
        using CryptoPP__NonblockingRngctor_NonblockingRng2_ptr = int64_t (WINAPIV*)(struct CryptoPP::NonblockingRng*);
        using CryptoPP__NonblockingRngctor_NonblockingRng2_clbk = int64_t (WINAPIV*)(struct CryptoPP::NonblockingRng*, CryptoPP__NonblockingRngctor_NonblockingRng2_ptr);
        using CryptoPP__NonblockingRngdtor_NonblockingRng3_ptr = int64_t (WINAPIV*)(struct CryptoPP::NonblockingRng*);
        using CryptoPP__NonblockingRngdtor_NonblockingRng3_clbk = int64_t (WINAPIV*)(struct CryptoPP::NonblockingRng*, CryptoPP__NonblockingRngdtor_NonblockingRng3_ptr);
        
        using CryptoPP__StreamTransformationFilterFirstPut1_ptr = void (WINAPIV*)(struct CryptoPP::StreamTransformationFilter*, uint8_t*);
        using CryptoPP__StreamTransformationFilterFirstPut1_clbk = void (WINAPIV*)(struct CryptoPP::StreamTransformationFilter*, uint8_t*, CryptoPP__StreamTransformationFilterFirstPut1_ptr);
        using CryptoPP__StreamTransformationFilterLastBlockSize2_ptr = uint64_t (WINAPIV*)(struct CryptoPP::StreamTransformation*, struct CryptoPP::StreamTransformationFilter::BlockPaddingScheme);
        using CryptoPP__StreamTransformationFilterLastBlockSize2_clbk = uint64_t (WINAPIV*)(struct CryptoPP::StreamTransformation*, struct CryptoPP::StreamTransformationFilter::BlockPaddingScheme, CryptoPP__StreamTransformationFilterLastBlockSize2_ptr);
        using CryptoPP__StreamTransformationFilterLastPut3_ptr = void (WINAPIV*)(struct CryptoPP::StreamTransformationFilter*, uint8_t*, uint64_t);
        using CryptoPP__StreamTransformationFilterLastPut3_clbk = void (WINAPIV*)(struct CryptoPP::StreamTransformationFilter*, uint8_t*, uint64_t, CryptoPP__StreamTransformationFilterLastPut3_ptr);
        using CryptoPP__StreamTransformationFilterNextPutModifiable4_ptr = void (WINAPIV*)(struct CryptoPP::StreamTransformationFilter*, uint8_t*, uint64_t);
        using CryptoPP__StreamTransformationFilterNextPutModifiable4_clbk = void (WINAPIV*)(struct CryptoPP::StreamTransformationFilter*, uint8_t*, uint64_t, CryptoPP__StreamTransformationFilterNextPutModifiable4_ptr);
        using CryptoPP__StreamTransformationFilterNextPutMultiple5_ptr = void (WINAPIV*)(struct CryptoPP::StreamTransformationFilter*, uint8_t*, uint64_t);
        using CryptoPP__StreamTransformationFilterNextPutMultiple5_clbk = void (WINAPIV*)(struct CryptoPP::StreamTransformationFilter*, uint8_t*, uint64_t, CryptoPP__StreamTransformationFilterNextPutMultiple5_ptr);
        using CryptoPP__StreamTransformationFilterctor_StreamTransformationFilter6_ptr = int64_t (WINAPIV*)(struct CryptoPP::StreamTransformationFilter*, struct CryptoPP::StreamTransformation*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::StreamTransformationFilter::BlockPaddingScheme);
        using CryptoPP__StreamTransformationFilterctor_StreamTransformationFilter6_clbk = int64_t (WINAPIV*)(struct CryptoPP::StreamTransformationFilter*, struct CryptoPP::StreamTransformation*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::StreamTransformationFilter::BlockPaddingScheme, CryptoPP__StreamTransformationFilterctor_StreamTransformationFilter6_ptr);
        using CryptoPP__StreamTransformationFilterdtor_StreamTransformationFilter7_ptr = int64_t (WINAPIV*)(struct CryptoPP::StreamTransformationFilter*);
        using CryptoPP__StreamTransformationFilterdtor_StreamTransformationFilter7_clbk = int64_t (WINAPIV*)(struct CryptoPP::StreamTransformationFilter*, CryptoPP__StreamTransformationFilterdtor_StreamTransformationFilter7_ptr);
        
        using CryptoPP__SignerFilterIsolatedInitialize1_ptr = void (WINAPIV*)(struct CryptoPP::SignerFilter*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__SignerFilterIsolatedInitialize1_clbk = void (WINAPIV*)(struct CryptoPP::SignerFilter*, struct CryptoPP::NameValuePairs*, CryptoPP__SignerFilterIsolatedInitialize1_ptr);
        using CryptoPP__SignerFilterPut22_ptr = uint64_t (WINAPIV*)(struct CryptoPP::SignerFilter*, uint8_t*, uint64_t, int, bool);
        using CryptoPP__SignerFilterPut22_clbk = uint64_t (WINAPIV*)(struct CryptoPP::SignerFilter*, uint8_t*, uint64_t, int, bool, CryptoPP__SignerFilterPut22_ptr);
        
        using CryptoPP__DERGeneralEncoderctor_DERGeneralEncoder1_ptr = int64_t (WINAPIV*)(struct CryptoPP::DERGeneralEncoder*, struct CryptoPP::BufferedTransformation*, uint8_t);
        using CryptoPP__DERGeneralEncoderctor_DERGeneralEncoder1_clbk = int64_t (WINAPIV*)(struct CryptoPP::DERGeneralEncoder*, struct CryptoPP::BufferedTransformation*, uint8_t, CryptoPP__DERGeneralEncoderctor_DERGeneralEncoder1_ptr);
        using CryptoPP__DERGeneralEncoderctor_DERGeneralEncoder2_ptr = int64_t (WINAPIV*)(struct CryptoPP::DERGeneralEncoder*, struct CryptoPP::DERGeneralEncoder*, uint8_t);
        using CryptoPP__DERGeneralEncoderctor_DERGeneralEncoder2_clbk = int64_t (WINAPIV*)(struct CryptoPP::DERGeneralEncoder*, struct CryptoPP::DERGeneralEncoder*, uint8_t, CryptoPP__DERGeneralEncoderctor_DERGeneralEncoder2_ptr);
        using CryptoPP__DERGeneralEncoderMessageEnd3_ptr = void (WINAPIV*)(struct CryptoPP::DERGeneralEncoder*);
        using CryptoPP__DERGeneralEncoderMessageEnd3_clbk = void (WINAPIV*)(struct CryptoPP::DERGeneralEncoder*, CryptoPP__DERGeneralEncoderMessageEnd3_ptr);
        using CryptoPP__DERGeneralEncoderdtor_DERGeneralEncoder4_ptr = int64_t (WINAPIV*)(struct CryptoPP::DERGeneralEncoder*);
        using CryptoPP__DERGeneralEncoderdtor_DERGeneralEncoder4_clbk = int64_t (WINAPIV*)(struct CryptoPP::DERGeneralEncoder*, CryptoPP__DERGeneralEncoderdtor_DERGeneralEncoder4_ptr);
        
        
        using CryptoPP__Rijndael__Basector_Base2_ptr = void (WINAPIV*)(struct CryptoPP::Rijndael::Base*, struct CryptoPP::Rijndael::Base*);
        using CryptoPP__Rijndael__Basector_Base2_clbk = void (WINAPIV*)(struct CryptoPP::Rijndael::Base*, struct CryptoPP::Rijndael::Base*, CryptoPP__Rijndael__Basector_Base2_ptr);
        using CryptoPP__Rijndael__Basector_Base4_ptr = void (WINAPIV*)(struct CryptoPP::Rijndael::Base*);
        using CryptoPP__Rijndael__Basector_Base4_clbk = void (WINAPIV*)(struct CryptoPP::Rijndael::Base*, CryptoPP__Rijndael__Basector_Base4_ptr);
        using CryptoPP__Rijndael__BaseUncheckedSetKey5_ptr = void (WINAPIV*)(struct CryptoPP::Rijndael::Base*, uint8_t*, unsigned int, struct CryptoPP::NameValuePairs*);
        using CryptoPP__Rijndael__BaseUncheckedSetKey5_clbk = void (WINAPIV*)(struct CryptoPP::Rijndael::Base*, uint8_t*, unsigned int, struct CryptoPP::NameValuePairs*, CryptoPP__Rijndael__BaseUncheckedSetKey5_ptr);
        using CryptoPP__Rijndael__Basedtor_Base7_ptr = void (WINAPIV*)(struct CryptoPP::Rijndael::Base*);
        using CryptoPP__Rijndael__Basedtor_Base7_clbk = void (WINAPIV*)(struct CryptoPP::Rijndael::Base*, CryptoPP__Rijndael__Basedtor_Base7_ptr);
        
        using CryptoPP__Rijndael__Decctor_Dec2_ptr = void (WINAPIV*)(struct CryptoPP::Rijndael::Dec*, struct CryptoPP::Rijndael::Dec*);
        using CryptoPP__Rijndael__Decctor_Dec2_clbk = void (WINAPIV*)(struct CryptoPP::Rijndael::Dec*, struct CryptoPP::Rijndael::Dec*, CryptoPP__Rijndael__Decctor_Dec2_ptr);
        using CryptoPP__Rijndael__Decctor_Dec4_ptr = void (WINAPIV*)(struct CryptoPP::Rijndael::Dec*);
        using CryptoPP__Rijndael__Decctor_Dec4_clbk = void (WINAPIV*)(struct CryptoPP::Rijndael::Dec*, CryptoPP__Rijndael__Decctor_Dec4_ptr);
        using CryptoPP__Rijndael__DecProcessAndXorBlock5_ptr = void (WINAPIV*)(struct CryptoPP::Rijndael::Dec*, uint8_t*, uint8_t*, uint8_t*);
        using CryptoPP__Rijndael__DecProcessAndXorBlock5_clbk = void (WINAPIV*)(struct CryptoPP::Rijndael::Dec*, uint8_t*, uint8_t*, uint8_t*, CryptoPP__Rijndael__DecProcessAndXorBlock5_ptr);
        using CryptoPP__Rijndael__Decdtor_Dec7_ptr = void (WINAPIV*)(struct CryptoPP::Rijndael::Dec*);
        using CryptoPP__Rijndael__Decdtor_Dec7_clbk = void (WINAPIV*)(struct CryptoPP::Rijndael::Dec*, CryptoPP__Rijndael__Decdtor_Dec7_ptr);
        
        using CryptoPP__Rijndael__Encctor_Enc2_ptr = void (WINAPIV*)(struct CryptoPP::Rijndael::Enc*, struct CryptoPP::Rijndael::Enc*);
        using CryptoPP__Rijndael__Encctor_Enc2_clbk = void (WINAPIV*)(struct CryptoPP::Rijndael::Enc*, struct CryptoPP::Rijndael::Enc*, CryptoPP__Rijndael__Encctor_Enc2_ptr);
        using CryptoPP__Rijndael__Encctor_Enc4_ptr = void (WINAPIV*)(struct CryptoPP::Rijndael::Enc*);
        using CryptoPP__Rijndael__Encctor_Enc4_clbk = void (WINAPIV*)(struct CryptoPP::Rijndael::Enc*, CryptoPP__Rijndael__Encctor_Enc4_ptr);
        using CryptoPP__Rijndael__EncProcessAndXorBlock5_ptr = void (WINAPIV*)(struct CryptoPP::Rijndael::Enc*, uint8_t*, uint8_t*, uint8_t*);
        using CryptoPP__Rijndael__EncProcessAndXorBlock5_clbk = void (WINAPIV*)(struct CryptoPP::Rijndael::Enc*, uint8_t*, uint8_t*, uint8_t*, CryptoPP__Rijndael__EncProcessAndXorBlock5_ptr);
        using CryptoPP__Rijndael__Encdtor_Enc7_ptr = void (WINAPIV*)(struct CryptoPP::Rijndael::Enc*);
        using CryptoPP__Rijndael__Encdtor_Enc7_clbk = void (WINAPIV*)(struct CryptoPP::Rijndael::Enc*, CryptoPP__Rijndael__Encdtor_Enc7_ptr);
        
        using CryptoPP__NullStoreMaxRetrievable1_ptr = uint64_t (WINAPIV*)(struct CryptoPP::NullStore*);
        using CryptoPP__NullStoreMaxRetrievable1_clbk = uint64_t (WINAPIV*)(struct CryptoPP::NullStore*, CryptoPP__NullStoreMaxRetrievable1_ptr);
        using CryptoPP__NullStorector_NullStore2_ptr = int64_t (WINAPIV*)(struct CryptoPP::NullStore*, uint64_t);
        using CryptoPP__NullStorector_NullStore2_clbk = int64_t (WINAPIV*)(struct CryptoPP::NullStore*, uint64_t, CryptoPP__NullStorector_NullStore2_ptr);
        using CryptoPP__NullStoreStoreInitialize3_ptr = void (WINAPIV*)(struct CryptoPP::NullStore*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__NullStoreStoreInitialize3_clbk = void (WINAPIV*)(struct CryptoPP::NullStore*, struct CryptoPP::NameValuePairs*, CryptoPP__NullStoreStoreInitialize3_ptr);
        using CryptoPP__NullStoredtor_NullStore4_ptr = int64_t (WINAPIV*)(struct CryptoPP::NullStore*);
        using CryptoPP__NullStoredtor_NullStore4_clbk = int64_t (WINAPIV*)(struct CryptoPP::NullStore*, CryptoPP__NullStoredtor_NullStore4_ptr);
        
        using CryptoPP__DERSequenceEncoderctor_DERSequenceEncoder1_ptr = int64_t (WINAPIV*)(struct CryptoPP::DERSequenceEncoder*, struct CryptoPP::BufferedTransformation*, uint8_t);
        using CryptoPP__DERSequenceEncoderctor_DERSequenceEncoder1_clbk = int64_t (WINAPIV*)(struct CryptoPP::DERSequenceEncoder*, struct CryptoPP::BufferedTransformation*, uint8_t, CryptoPP__DERSequenceEncoderctor_DERSequenceEncoder1_ptr);
        using CryptoPP__DERSequenceEncoderctor_DERSequenceEncoder2_ptr = int64_t (WINAPIV*)(struct CryptoPP::DERSequenceEncoder*, struct CryptoPP::DERSequenceEncoder*, uint8_t);
        using CryptoPP__DERSequenceEncoderctor_DERSequenceEncoder2_clbk = int64_t (WINAPIV*)(struct CryptoPP::DERSequenceEncoder*, struct CryptoPP::DERSequenceEncoder*, uint8_t, CryptoPP__DERSequenceEncoderctor_DERSequenceEncoder2_ptr);
        using CryptoPP__DERSequenceEncoderdtor_DERSequenceEncoder3_ptr = int64_t (WINAPIV*)(struct CryptoPP::DERSequenceEncoder*);
        using CryptoPP__DERSequenceEncoderdtor_DERSequenceEncoder3_clbk = int64_t (WINAPIV*)(struct CryptoPP::DERSequenceEncoder*, CryptoPP__DERSequenceEncoderdtor_DERSequenceEncoder3_ptr);
        
        using CryptoPP__DL_SignatureMessageEncodingMethod_NRComputeMessageRepresentative1_ptr = int64_t (WINAPIV*)(int64_t, int64_t, int, int, uint8_t*, struct CryptoPP*);
        using CryptoPP__DL_SignatureMessageEncodingMethod_NRComputeMessageRepresentative1_clbk = int64_t (WINAPIV*)(int64_t, int64_t, int, int, uint8_t*, struct CryptoPP*, CryptoPP__DL_SignatureMessageEncodingMethod_NRComputeMessageRepresentative1_ptr);
        using CryptoPP__DL_SignatureMessageEncodingMethod_NRctor_DL_SignatureMessageEncodingMethod_NR2_ptr = int64_t (WINAPIV*)(struct CryptoPP::DL_SignatureMessageEncodingMethod_NR*);
        using CryptoPP__DL_SignatureMessageEncodingMethod_NRctor_DL_SignatureMessageEncodingMethod_NR2_clbk = int64_t (WINAPIV*)(struct CryptoPP::DL_SignatureMessageEncodingMethod_NR*, CryptoPP__DL_SignatureMessageEncodingMethod_NRctor_DL_SignatureMessageEncodingMethod_NR2_ptr);
        using CryptoPP__DL_SignatureMessageEncodingMethod_NRdtor_DL_SignatureMessageEncodingMethod_NR3_ptr = int64_t (WINAPIV*)(struct CryptoPP::DL_SignatureMessageEncodingMethod_NR*);
        using CryptoPP__DL_SignatureMessageEncodingMethod_NRdtor_DL_SignatureMessageEncodingMethod_NR3_clbk = int64_t (WINAPIV*)(struct CryptoPP::DL_SignatureMessageEncodingMethod_NR*, CryptoPP__DL_SignatureMessageEncodingMethod_NRdtor_DL_SignatureMessageEncodingMethod_NR3_ptr);
        
        using CryptoPP__P1363_KDF2DeriveKey2_ptr = void (WINAPIV*)(char*, uint64_t, char*, uint64_t, char*, uint64_t);
        using CryptoPP__P1363_KDF2DeriveKey2_clbk = void (WINAPIV*)(char*, uint64_t, char*, uint64_t, char*, uint64_t, CryptoPP__P1363_KDF2DeriveKey2_ptr);
        
        using CryptoPP__OS_RNG_Errctor_OS_RNG_Err1_ptr = int64_t (WINAPIV*)(struct CryptoPP::OS_RNG_Err*, struct CryptoPP::OS_RNG_Err*);
        using CryptoPP__OS_RNG_Errctor_OS_RNG_Err1_clbk = int64_t (WINAPIV*)(struct CryptoPP::OS_RNG_Err*, struct CryptoPP::OS_RNG_Err*, CryptoPP__OS_RNG_Errctor_OS_RNG_Err1_ptr);
        using CryptoPP__OS_RNG_Errdtor_OS_RNG_Err2_ptr = int64_t (WINAPIV*)(struct CryptoPP::OS_RNG_Err*);
        using CryptoPP__OS_RNG_Errdtor_OS_RNG_Err2_clbk = int64_t (WINAPIV*)(struct CryptoPP::OS_RNG_Err*, CryptoPP__OS_RNG_Errdtor_OS_RNG_Err2_ptr);
        
        using CryptoPP__CombinedNameValuePairsctor_CombinedNameValuePairs1_ptr = int64_t (WINAPIV*)(struct CryptoPP::CombinedNameValuePairs*, struct CryptoPP::NameValuePairs*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__CombinedNameValuePairsctor_CombinedNameValuePairs1_clbk = int64_t (WINAPIV*)(struct CryptoPP::CombinedNameValuePairs*, struct CryptoPP::NameValuePairs*, struct CryptoPP::NameValuePairs*, CryptoPP__CombinedNameValuePairsctor_CombinedNameValuePairs1_ptr);
        using CryptoPP__CombinedNameValuePairsGetVoidValue2_ptr = bool (WINAPIV*)(struct CryptoPP::CombinedNameValuePairs*, char*, struct type_info*, void*);
        using CryptoPP__CombinedNameValuePairsGetVoidValue2_clbk = bool (WINAPIV*)(struct CryptoPP::CombinedNameValuePairs*, char*, struct type_info*, void*, CryptoPP__CombinedNameValuePairsGetVoidValue2_ptr);
        using CryptoPP__CombinedNameValuePairsdtor_CombinedNameValuePairs3_ptr = int64_t (WINAPIV*)(struct CryptoPP::CombinedNameValuePairs*);
        using CryptoPP__CombinedNameValuePairsdtor_CombinedNameValuePairs3_clbk = int64_t (WINAPIV*)(struct CryptoPP::CombinedNameValuePairs*, CryptoPP__CombinedNameValuePairsdtor_CombinedNameValuePairs3_ptr);
        
        using CryptoPP__FileStorector_FileStore2_ptr = void (WINAPIV*)(struct CryptoPP::FileStore*);
        using CryptoPP__FileStorector_FileStore2_clbk = void (WINAPIV*)(struct CryptoPP::FileStore*, CryptoPP__FileStorector_FileStore2_ptr);
        using CryptoPP__FileStoreMaxRetrievable3_ptr = uint64_t (WINAPIV*)(struct CryptoPP::FileStore*);
        using CryptoPP__FileStoreMaxRetrievable3_clbk = uint64_t (WINAPIV*)(struct CryptoPP::FileStore*, CryptoPP__FileStoreMaxRetrievable3_ptr);
        using CryptoPP__FileStoreSkip4_ptr = uint64_t (WINAPIV*)(struct CryptoPP::FileStore*, uint64_t);
        using CryptoPP__FileStoreSkip4_clbk = uint64_t (WINAPIV*)(struct CryptoPP::FileStore*, uint64_t, CryptoPP__FileStoreSkip4_ptr);
        using CryptoPP__FileStoreStoreInitialize5_ptr = void (WINAPIV*)(struct CryptoPP::FileStore*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__FileStoreStoreInitialize5_clbk = void (WINAPIV*)(struct CryptoPP::FileStore*, struct CryptoPP::NameValuePairs*, CryptoPP__FileStoreStoreInitialize5_ptr);
        using CryptoPP__FileStoredtor_FileStore10_ptr = void (WINAPIV*)(struct CryptoPP::FileStore*);
        using CryptoPP__FileStoredtor_FileStore10_clbk = void (WINAPIV*)(struct CryptoPP::FileStore*, CryptoPP__FileStoredtor_FileStore10_ptr);
        
        using CryptoPP__FileStore__Errctor_Err1_ptr = int64_t (WINAPIV*)(struct CryptoPP::FileStore::Err*, struct CryptoPP::FileStore::Err*);
        using CryptoPP__FileStore__Errctor_Err1_clbk = int64_t (WINAPIV*)(struct CryptoPP::FileStore::Err*, struct CryptoPP::FileStore::Err*, CryptoPP__FileStore__Errctor_Err1_ptr);
        using CryptoPP__FileStore__Errdtor_Err2_ptr = int64_t (WINAPIV*)(struct CryptoPP::FileStore::Err*);
        using CryptoPP__FileStore__Errdtor_Err2_clbk = int64_t (WINAPIV*)(struct CryptoPP::FileStore::Err*, CryptoPP__FileStore__Errdtor_Err2_ptr);
        
        using CryptoPP__FileStore__OpenErrctor_OpenErr1_ptr = int64_t (WINAPIV*)(struct CryptoPP::FileStore::OpenErr*, struct CryptoPP::FileStore::OpenErr*);
        using CryptoPP__FileStore__OpenErrctor_OpenErr1_clbk = int64_t (WINAPIV*)(struct CryptoPP::FileStore::OpenErr*, struct CryptoPP::FileStore::OpenErr*, CryptoPP__FileStore__OpenErrctor_OpenErr1_ptr);
        using CryptoPP__FileStore__OpenErrdtor_OpenErr2_ptr = int64_t (WINAPIV*)(struct CryptoPP::FileStore::OpenErr*);
        using CryptoPP__FileStore__OpenErrdtor_OpenErr2_clbk = int64_t (WINAPIV*)(struct CryptoPP::FileStore::OpenErr*, CryptoPP__FileStore__OpenErrdtor_OpenErr2_ptr);
        
        using CryptoPP__FileStore__ReadErrctor_ReadErr1_ptr = int64_t (WINAPIV*)(struct CryptoPP::FileStore::ReadErr*, struct CryptoPP::FileStore::ReadErr*);
        using CryptoPP__FileStore__ReadErrctor_ReadErr1_clbk = int64_t (WINAPIV*)(struct CryptoPP::FileStore::ReadErr*, struct CryptoPP::FileStore::ReadErr*, CryptoPP__FileStore__ReadErrctor_ReadErr1_ptr);
        using CryptoPP__FileStore__ReadErrctor_ReadErr2_ptr = int64_t (WINAPIV*)(struct CryptoPP::FileStore::ReadErr*);
        using CryptoPP__FileStore__ReadErrctor_ReadErr2_clbk = int64_t (WINAPIV*)(struct CryptoPP::FileStore::ReadErr*, CryptoPP__FileStore__ReadErrctor_ReadErr2_ptr);
        using CryptoPP__FileStore__ReadErrdtor_ReadErr3_ptr = int64_t (WINAPIV*)(struct CryptoPP::FileStore::ReadErr*);
        using CryptoPP__FileStore__ReadErrdtor_ReadErr3_clbk = int64_t (WINAPIV*)(struct CryptoPP::FileStore::ReadErr*, CryptoPP__FileStore__ReadErrdtor_ReadErr3_ptr);
        
        using CryptoPP__SourceTemplateGetAutoSignalPropagation2_ptr = int (WINAPIV*)(struct CryptoPP::SourceTemplate<CryptoPP::FileStore>*);
        using CryptoPP__SourceTemplateGetAutoSignalPropagation2_clbk = int (WINAPIV*)(struct CryptoPP::SourceTemplate<CryptoPP::FileStore>*, CryptoPP__SourceTemplateGetAutoSignalPropagation2_ptr);
        using CryptoPP__SourceTemplateIsolatedInitialize4_ptr = void (WINAPIV*)(struct CryptoPP::SourceTemplate<CryptoPP::FileStore>*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__SourceTemplateIsolatedInitialize4_clbk = void (WINAPIV*)(struct CryptoPP::SourceTemplate<CryptoPP::FileStore>*, struct CryptoPP::NameValuePairs*, CryptoPP__SourceTemplateIsolatedInitialize4_ptr);
        using CryptoPP__SourceTemplatePump26_ptr = uint64_t (WINAPIV*)(struct CryptoPP::SourceTemplate<CryptoPP::FileStore>*, uint64_t*, bool);
        using CryptoPP__SourceTemplatePump26_clbk = uint64_t (WINAPIV*)(struct CryptoPP::SourceTemplate<CryptoPP::FileStore>*, uint64_t*, bool, CryptoPP__SourceTemplatePump26_ptr);
        using CryptoPP__SourceTemplatePumpAll28_ptr = uint64_t (WINAPIV*)(struct CryptoPP::SourceTemplate<CryptoPP::FileStore>*, bool);
        using CryptoPP__SourceTemplatePumpAll28_clbk = uint64_t (WINAPIV*)(struct CryptoPP::SourceTemplate<CryptoPP::FileStore>*, bool, CryptoPP__SourceTemplatePumpAll28_ptr);
        using CryptoPP__SourceTemplatePumpMessages210_ptr = uint64_t (WINAPIV*)(struct CryptoPP::SourceTemplate<CryptoPP::FileStore>*, unsigned int*, bool);
        using CryptoPP__SourceTemplatePumpMessages210_clbk = uint64_t (WINAPIV*)(struct CryptoPP::SourceTemplate<CryptoPP::FileStore>*, unsigned int*, bool, CryptoPP__SourceTemplatePumpMessages210_ptr);
        using CryptoPP__SourceTemplateSetAutoSignalPropagation12_ptr = void (WINAPIV*)(struct CryptoPP::SourceTemplate<CryptoPP::FileStore>*, int);
        using CryptoPP__SourceTemplateSetAutoSignalPropagation12_clbk = void (WINAPIV*)(struct CryptoPP::SourceTemplate<CryptoPP::FileStore>*, int, CryptoPP__SourceTemplateSetAutoSignalPropagation12_ptr);
        using CryptoPP__SourceTemplateSourceExhausted14_ptr = bool (WINAPIV*)(struct CryptoPP::SourceTemplate<CryptoPP::FileStore>*);
        using CryptoPP__SourceTemplateSourceExhausted14_clbk = bool (WINAPIV*)(struct CryptoPP::SourceTemplate<CryptoPP::FileStore>*, CryptoPP__SourceTemplateSourceExhausted14_ptr);
        using CryptoPP__SourceTemplatector_SourceTemplate16_ptr = void (WINAPIV*)(struct CryptoPP::SourceTemplate<CryptoPP::FileStore>*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__SourceTemplatector_SourceTemplate16_clbk = void (WINAPIV*)(struct CryptoPP::SourceTemplate<CryptoPP::FileStore>*, struct CryptoPP::BufferedTransformation*, CryptoPP__SourceTemplatector_SourceTemplate16_ptr);
        using CryptoPP__SourceTemplatedtor_SourceTemplate21_ptr = void (WINAPIV*)(struct CryptoPP::SourceTemplate<CryptoPP::FileStore>*);
        using CryptoPP__SourceTemplatedtor_SourceTemplate21_clbk = void (WINAPIV*)(struct CryptoPP::SourceTemplate<CryptoPP::FileStore>*, CryptoPP__SourceTemplatedtor_SourceTemplate21_ptr);
        
        using CryptoPP__FileSourcector_FileSource1_ptr = int64_t (WINAPIV*)(struct CryptoPP::FileSource*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__FileSourcector_FileSource1_clbk = int64_t (WINAPIV*)(struct CryptoPP::FileSource*, struct CryptoPP::BufferedTransformation*, CryptoPP__FileSourcector_FileSource1_ptr);
        using CryptoPP__FileSourcector_FileSource3_ptr = void (WINAPIV*)(struct CryptoPP::FileSource*, char*, bool, struct CryptoPP::BufferedTransformation*, bool);
        using CryptoPP__FileSourcector_FileSource3_clbk = void (WINAPIV*)(struct CryptoPP::FileSource*, char*, bool, struct CryptoPP::BufferedTransformation*, bool, CryptoPP__FileSourcector_FileSource3_ptr);
        using CryptoPP__FileSourcedtor_FileSource8_ptr = void (WINAPIV*)(struct CryptoPP::FileSource*);
        using CryptoPP__FileSourcedtor_FileSource8_clbk = void (WINAPIV*)(struct CryptoPP::FileSource*, CryptoPP__FileSourcedtor_FileSource8_ptr);
        
        using CryptoPP__FileSinkctor_FileSink1_ptr = int64_t (WINAPIV*)(struct CryptoPP::FileSink*);
        using CryptoPP__FileSinkctor_FileSink1_clbk = int64_t (WINAPIV*)(struct CryptoPP::FileSink*, CryptoPP__FileSinkctor_FileSink1_ptr);
        using CryptoPP__FileSinkIsolatedFlush2_ptr = bool (WINAPIV*)(struct CryptoPP::FileSink*, bool, bool);
        using CryptoPP__FileSinkIsolatedFlush2_clbk = bool (WINAPIV*)(struct CryptoPP::FileSink*, bool, bool, CryptoPP__FileSinkIsolatedFlush2_ptr);
        using CryptoPP__FileSinkIsolatedInitialize3_ptr = void (WINAPIV*)(struct CryptoPP::FileSink*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__FileSinkIsolatedInitialize3_clbk = void (WINAPIV*)(struct CryptoPP::FileSink*, struct CryptoPP::NameValuePairs*, CryptoPP__FileSinkIsolatedInitialize3_ptr);
        using CryptoPP__FileSinkPut24_ptr = uint64_t (WINAPIV*)(struct CryptoPP::FileSink*, uint8_t*, uint64_t, int, bool);
        using CryptoPP__FileSinkPut24_clbk = uint64_t (WINAPIV*)(struct CryptoPP::FileSink*, uint8_t*, uint64_t, int, bool, CryptoPP__FileSinkPut24_ptr);
        using CryptoPP__FileSinkdtor_FileSink5_ptr = int64_t (WINAPIV*)(struct CryptoPP::FileSink*);
        using CryptoPP__FileSinkdtor_FileSink5_clbk = int64_t (WINAPIV*)(struct CryptoPP::FileSink*, CryptoPP__FileSinkdtor_FileSink5_ptr);
        
        using CryptoPP__FileSink__Errctor_Err1_ptr = int64_t (WINAPIV*)(struct CryptoPP::FileSink::Err*, struct CryptoPP::FileSink::Err*);
        using CryptoPP__FileSink__Errctor_Err1_clbk = int64_t (WINAPIV*)(struct CryptoPP::FileSink::Err*, struct CryptoPP::FileSink::Err*, CryptoPP__FileSink__Errctor_Err1_ptr);
        using CryptoPP__FileSink__Errdtor_Err2_ptr = int64_t (WINAPIV*)(struct CryptoPP::FileSink::Err*);
        using CryptoPP__FileSink__Errdtor_Err2_clbk = int64_t (WINAPIV*)(struct CryptoPP::FileSink::Err*, CryptoPP__FileSink__Errdtor_Err2_ptr);
        
        using CryptoPP__FileSink__OpenErrctor_OpenErr1_ptr = int64_t (WINAPIV*)(struct CryptoPP::FileSink::OpenErr*, struct CryptoPP::FileSink::OpenErr*);
        using CryptoPP__FileSink__OpenErrctor_OpenErr1_clbk = int64_t (WINAPIV*)(struct CryptoPP::FileSink::OpenErr*, struct CryptoPP::FileSink::OpenErr*, CryptoPP__FileSink__OpenErrctor_OpenErr1_ptr);
        using CryptoPP__FileSink__OpenErrdtor_OpenErr2_ptr = int64_t (WINAPIV*)(struct CryptoPP::FileSink::OpenErr*);
        using CryptoPP__FileSink__OpenErrdtor_OpenErr2_clbk = int64_t (WINAPIV*)(struct CryptoPP::FileSink::OpenErr*, CryptoPP__FileSink__OpenErrdtor_OpenErr2_ptr);
        
        using CryptoPP__FileSink__WriteErrctor_WriteErr1_ptr = int64_t (WINAPIV*)(struct CryptoPP::FileSink::WriteErr*, struct CryptoPP::FileSink::WriteErr*);
        using CryptoPP__FileSink__WriteErrctor_WriteErr1_clbk = int64_t (WINAPIV*)(struct CryptoPP::FileSink::WriteErr*, struct CryptoPP::FileSink::WriteErr*, CryptoPP__FileSink__WriteErrctor_WriteErr1_ptr);
        using CryptoPP__FileSink__WriteErrctor_WriteErr2_ptr = int64_t (WINAPIV*)(struct CryptoPP::FileSink::WriteErr*);
        using CryptoPP__FileSink__WriteErrctor_WriteErr2_clbk = int64_t (WINAPIV*)(struct CryptoPP::FileSink::WriteErr*, CryptoPP__FileSink__WriteErrctor_WriteErr2_ptr);
        using CryptoPP__FileSink__WriteErrdtor_WriteErr3_ptr = int64_t (WINAPIV*)(struct CryptoPP::FileSink::WriteErr*);
        using CryptoPP__FileSink__WriteErrdtor_WriteErr3_clbk = int64_t (WINAPIV*)(struct CryptoPP::FileSink::WriteErr*, CryptoPP__FileSink__WriteErrdtor_WriteErr3_ptr);
        
        using CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase22_ptr = void (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase2<char const *>*, struct CryptoPP::AlgorithmParametersBase2<char const *>*);
        using CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase22_clbk = void (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase2<char const *>*, struct CryptoPP::AlgorithmParametersBase2<char const *>*, CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase22_ptr);
        using CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase24_ptr = void (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase2<char const *>*, char*, char**, bool);
        using CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase24_clbk = void (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase2<char const *>*, char*, char**, bool, CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase24_ptr);
        using CryptoPP__AlgorithmParametersBase2AssignValue6_ptr = void (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase2<char const *>*, char*, struct type_info*, void*);
        using CryptoPP__AlgorithmParametersBase2AssignValue6_clbk = void (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase2<char const *>*, char*, struct type_info*, void*, CryptoPP__AlgorithmParametersBase2AssignValue6_ptr);
        using CryptoPP__AlgorithmParametersBase2dtor_AlgorithmParametersBase211_ptr = void (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase2<char const *>*);
        using CryptoPP__AlgorithmParametersBase2dtor_AlgorithmParametersBase211_clbk = void (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase2<char const *>*, CryptoPP__AlgorithmParametersBase2dtor_AlgorithmParametersBase211_ptr);
        
        using CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase22_ptr = void (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase2<bool>*, char*, bool*, bool);
        using CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase22_clbk = void (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase2<bool>*, char*, bool*, bool, CryptoPP__AlgorithmParametersBase2ctor_AlgorithmParametersBase22_ptr);
        using CryptoPP__AlgorithmParametersBase2AssignValue4_ptr = void (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase2<bool>*, char*, struct type_info*, void*);
        using CryptoPP__AlgorithmParametersBase2AssignValue4_clbk = void (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase2<bool>*, char*, struct type_info*, void*, CryptoPP__AlgorithmParametersBase2AssignValue4_ptr);
        using CryptoPP__AlgorithmParametersBase2dtor_AlgorithmParametersBase29_ptr = void (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase2<bool>*);
        using CryptoPP__AlgorithmParametersBase2dtor_AlgorithmParametersBase29_clbk = void (WINAPIV*)(struct CryptoPP::AlgorithmParametersBase2<bool>*, CryptoPP__AlgorithmParametersBase2dtor_AlgorithmParametersBase29_ptr);
        
        using CryptoPP__AlgorithmParametersctor_AlgorithmParameters2_ptr = void (WINAPIV*)(struct CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>*, struct CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>*);
        using CryptoPP__AlgorithmParametersctor_AlgorithmParameters2_clbk = void (WINAPIV*)(struct CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>*, struct CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>*, CryptoPP__AlgorithmParametersctor_AlgorithmParameters2_ptr);
        using CryptoPP__AlgorithmParametersctor_AlgorithmParameters4_ptr = void (WINAPIV*)(struct CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>*, struct CryptoPP::NullNameValuePairs*, char*, char**, bool);
        using CryptoPP__AlgorithmParametersctor_AlgorithmParameters4_clbk = void (WINAPIV*)(struct CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>*, struct CryptoPP::NullNameValuePairs*, char*, char**, bool, CryptoPP__AlgorithmParametersctor_AlgorithmParameters4_ptr);
        using CryptoPP__AlgorithmParametersGetParent6_ptr = struct CryptoPP::NameValuePairs* (WINAPIV*)(struct CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>*);
        using CryptoPP__AlgorithmParametersGetParent6_clbk = struct CryptoPP::NameValuePairs* (WINAPIV*)(struct CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>*, CryptoPP__AlgorithmParametersGetParent6_ptr);
        using CryptoPP__AlgorithmParametersdtor_AlgorithmParameters13_ptr = void (WINAPIV*)(struct CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>*);
        using CryptoPP__AlgorithmParametersdtor_AlgorithmParameters13_clbk = void (WINAPIV*)(struct CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>*, CryptoPP__AlgorithmParametersdtor_AlgorithmParameters13_ptr);
        
        using CryptoPP__AlgorithmParametersctor_AlgorithmParameters2_ptr = void (WINAPIV*)(struct CryptoPP::AlgorithmParameters<CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>,bool>*, struct CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>*, char*, bool*, bool);
        using CryptoPP__AlgorithmParametersctor_AlgorithmParameters2_clbk = void (WINAPIV*)(struct CryptoPP::AlgorithmParameters<CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>,bool>*, struct CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>*, char*, bool*, bool, CryptoPP__AlgorithmParametersctor_AlgorithmParameters2_ptr);
        using CryptoPP__AlgorithmParametersGetParent4_ptr = struct CryptoPP::NameValuePairs* (WINAPIV*)(struct CryptoPP::AlgorithmParameters<CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>,bool>*);
        using CryptoPP__AlgorithmParametersGetParent4_clbk = struct CryptoPP::NameValuePairs* (WINAPIV*)(struct CryptoPP::AlgorithmParameters<CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>,bool>*, CryptoPP__AlgorithmParametersGetParent4_ptr);
        using CryptoPP__AlgorithmParametersdtor_AlgorithmParameters9_ptr = void (WINAPIV*)(struct CryptoPP::AlgorithmParameters<CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>,bool>*);
        using CryptoPP__AlgorithmParametersdtor_AlgorithmParameters9_clbk = void (WINAPIV*)(struct CryptoPP::AlgorithmParameters<CryptoPP::AlgorithmParameters<CryptoPP::NullNameValuePairs,char const *>,bool>*, CryptoPP__AlgorithmParametersdtor_AlgorithmParameters9_ptr);
        
        using CryptoPP__ByteQueueNodector_ByteQueueNode1_ptr = int64_t (WINAPIV*)(struct CryptoPP::ByteQueueNode*, struct CryptoPP::ByteQueueNode*);
        using CryptoPP__ByteQueueNodector_ByteQueueNode1_clbk = int64_t (WINAPIV*)(struct CryptoPP::ByteQueueNode*, struct CryptoPP::ByteQueueNode*, CryptoPP__ByteQueueNodector_ByteQueueNode1_ptr);
        using CryptoPP__ByteQueueNodector_ByteQueueNode2_ptr = int64_t (WINAPIV*)(struct CryptoPP::ByteQueueNode*, uint64_t);
        using CryptoPP__ByteQueueNodector_ByteQueueNode2_clbk = int64_t (WINAPIV*)(struct CryptoPP::ByteQueueNode*, uint64_t, CryptoPP__ByteQueueNodector_ByteQueueNode2_ptr);
        using CryptoPP__ByteQueueNodeClear3_ptr = void (WINAPIV*)(struct CryptoPP::ByteQueueNode*);
        using CryptoPP__ByteQueueNodeClear3_clbk = void (WINAPIV*)(struct CryptoPP::ByteQueueNode*, CryptoPP__ByteQueueNodeClear3_ptr);
        using CryptoPP__ByteQueueNodeCurrentSize4_ptr = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueueNode*);
        using CryptoPP__ByteQueueNodeCurrentSize4_clbk = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueueNode*, CryptoPP__ByteQueueNodeCurrentSize4_ptr);
        using CryptoPP__ByteQueueNodeGet5_ptr = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueueNode*, uint8_t*);
        using CryptoPP__ByteQueueNodeGet5_clbk = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueueNode*, uint8_t*, CryptoPP__ByteQueueNodeGet5_ptr);
        using CryptoPP__ByteQueueNodeMaxSize6_ptr = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueueNode*);
        using CryptoPP__ByteQueueNodeMaxSize6_clbk = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueueNode*, CryptoPP__ByteQueueNodeMaxSize6_ptr);
        using CryptoPP__ByteQueueNodePeek7_ptr = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueueNode*, uint8_t*);
        using CryptoPP__ByteQueueNodePeek7_clbk = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueueNode*, uint8_t*, CryptoPP__ByteQueueNodePeek7_ptr);
        using CryptoPP__ByteQueueNodePut8_ptr = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueueNode*, uint8_t*, uint64_t);
        using CryptoPP__ByteQueueNodePut8_clbk = uint64_t (WINAPIV*)(struct CryptoPP::ByteQueueNode*, uint8_t*, uint64_t, CryptoPP__ByteQueueNodePut8_ptr);
        using CryptoPP__ByteQueueNodeUsedUp9_ptr = bool (WINAPIV*)(struct CryptoPP::ByteQueueNode*);
        using CryptoPP__ByteQueueNodeUsedUp9_clbk = bool (WINAPIV*)(struct CryptoPP::ByteQueueNode*, CryptoPP__ByteQueueNodeUsedUp9_ptr);
        using CryptoPP__ByteQueueNodedtor_ByteQueueNode10_ptr = int64_t (WINAPIV*)(struct CryptoPP::ByteQueueNode*);
        using CryptoPP__ByteQueueNodedtor_ByteQueueNode10_clbk = int64_t (WINAPIV*)(struct CryptoPP::ByteQueueNode*, CryptoPP__ByteQueueNodedtor_ByteQueueNode10_ptr);
        
        using CryptoPP__NameCofactor1_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NameCofactor1_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NameCofactor1_ptr);
        using CryptoPP__NameCurve2_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NameCurve2_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NameCurve2_ptr);
        using CryptoPP__NameDecodingLookupArray3_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NameDecodingLookupArray3_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NameDecodingLookupArray3_ptr);
        using CryptoPP__NameEncodingLookupArray4_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NameEncodingLookupArray4_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NameEncodingLookupArray4_ptr);
        using CryptoPP__NameEncodingParameters6_ptr = char* (WINAPIV*)();
        using CryptoPP__NameEncodingParameters6_clbk = char* (WINAPIV*)(CryptoPP__NameEncodingParameters6_ptr);
        using CryptoPP__NameFeedbackSize7_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NameFeedbackSize7_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NameFeedbackSize7_ptr);
        using CryptoPP__NameGroupOID8_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NameGroupOID8_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NameGroupOID8_ptr);
        using CryptoPP__NameGroupSize9_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NameGroupSize9_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NameGroupSize9_ptr);
        using CryptoPP__NameHashVerificationFilterFlags10_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NameHashVerificationFilterFlags10_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NameHashVerificationFilterFlags10_ptr);
        using CryptoPP__NameIV11_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NameIV11_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NameIV11_ptr);
        using CryptoPP__NameInputBinaryMode13_ptr = char* (WINAPIV*)();
        using CryptoPP__NameInputBinaryMode13_clbk = char* (WINAPIV*)(CryptoPP__NameInputBinaryMode13_ptr);
        using CryptoPP__NameInputBuffer14_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NameInputBuffer14_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NameInputBuffer14_ptr);
        using CryptoPP__NameInputFileName16_ptr = char* (WINAPIV*)();
        using CryptoPP__NameInputFileName16_clbk = char* (WINAPIV*)(CryptoPP__NameInputFileName16_ptr);
        using CryptoPP__NameInputStreamPointer17_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NameInputStreamPointer17_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NameInputStreamPointer17_ptr);
        using CryptoPP__NameKeyDerivationParameters19_ptr = char* (WINAPIV*)();
        using CryptoPP__NameKeyDerivationParameters19_clbk = char* (WINAPIV*)(CryptoPP__NameKeyDerivationParameters19_ptr);
        using CryptoPP__NameLog2Base20_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NameLog2Base20_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NameLog2Base20_ptr);
        using CryptoPP__NameModulus21_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NameModulus21_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NameModulus21_ptr);
        using CryptoPP__NameOutputBinaryMode22_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NameOutputBinaryMode22_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NameOutputBinaryMode22_ptr);
        using CryptoPP__NameOutputBuffer23_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NameOutputBuffer23_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NameOutputBuffer23_ptr);
        using CryptoPP__NameOutputFileName24_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NameOutputFileName24_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NameOutputFileName24_ptr);
        using CryptoPP__NameOutputStreamPointer25_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NameOutputStreamPointer25_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NameOutputStreamPointer25_ptr);
        using CryptoPP__NamePad26_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NamePad26_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NamePad26_ptr);
        using CryptoPP__NamePaddingByte27_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NamePaddingByte27_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NamePaddingByte27_ptr);
        using CryptoPP__NamePointerToPrimeSelector28_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NamePointerToPrimeSelector28_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NamePointerToPrimeSelector28_ptr);
        using CryptoPP__NamePrivateExponent30_ptr = char* (WINAPIV*)();
        using CryptoPP__NamePrivateExponent30_clbk = char* (WINAPIV*)(CryptoPP__NamePrivateExponent30_ptr);
        using CryptoPP__NamePublicElement32_ptr = char* (WINAPIV*)();
        using CryptoPP__NamePublicElement32_clbk = char* (WINAPIV*)(CryptoPP__NamePublicElement32_ptr);
        using CryptoPP__NamePutMessage33_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NamePutMessage33_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NamePutMessage33_ptr);
        using CryptoPP__NameRounds34_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NameRounds34_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NameRounds34_ptr);
        using CryptoPP__NameSeparator35_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NameSeparator35_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NameSeparator35_ptr);
        using CryptoPP__NameSignatureVerificationFilterFlags36_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NameSignatureVerificationFilterFlags36_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NameSignatureVerificationFilterFlags36_ptr);
        using CryptoPP__NameStolenIV37_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NameStolenIV37_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NameStolenIV37_ptr);
        using CryptoPP__NameSubgroupGenerator39_ptr = char* (WINAPIV*)();
        using CryptoPP__NameSubgroupGenerator39_clbk = char* (WINAPIV*)(CryptoPP__NameSubgroupGenerator39_ptr);
        using CryptoPP__NameSubgroupOrder41_ptr = char* (WINAPIV*)();
        using CryptoPP__NameSubgroupOrder41_clbk = char* (WINAPIV*)(CryptoPP__NameSubgroupOrder41_ptr);
        using CryptoPP__NameTerminator42_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NameTerminator42_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NameTerminator42_ptr);
        using CryptoPP__NameTruncatedDigestSize43_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NameTruncatedDigestSize43_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NameTruncatedDigestSize43_ptr);
        using CryptoPP__NameUppercase44_ptr = char* (WINAPIV*)(struct CryptoPP::Name*);
        using CryptoPP__NameUppercase44_clbk = char* (WINAPIV*)(struct CryptoPP::Name*, CryptoPP__NameUppercase44_ptr);
        
        using CryptoPP__BaseN_Decoderctor_BaseN_Decoder1_ptr = int64_t (WINAPIV*)(struct CryptoPP::BaseN_Decoder*, int*, int, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__BaseN_Decoderctor_BaseN_Decoder1_clbk = int64_t (WINAPIV*)(struct CryptoPP::BaseN_Decoder*, int*, int, struct CryptoPP::BufferedTransformation*, CryptoPP__BaseN_Decoderctor_BaseN_Decoder1_ptr);
        using CryptoPP__BaseN_DecoderInitializeDecodingLookupArray2_ptr = void (WINAPIV*)(int*, uint8_t*, unsigned int, bool);
        using CryptoPP__BaseN_DecoderInitializeDecodingLookupArray2_clbk = void (WINAPIV*)(int*, uint8_t*, unsigned int, bool, CryptoPP__BaseN_DecoderInitializeDecodingLookupArray2_ptr);
        using CryptoPP__BaseN_DecoderIsolatedInitialize3_ptr = void (WINAPIV*)(struct CryptoPP::BaseN_Decoder*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__BaseN_DecoderIsolatedInitialize3_clbk = void (WINAPIV*)(struct CryptoPP::BaseN_Decoder*, struct CryptoPP::NameValuePairs*, CryptoPP__BaseN_DecoderIsolatedInitialize3_ptr);
        using CryptoPP__BaseN_DecoderPut24_ptr = uint64_t (WINAPIV*)(struct CryptoPP::BaseN_Decoder*, uint8_t*, uint64_t, int, bool);
        using CryptoPP__BaseN_DecoderPut24_clbk = uint64_t (WINAPIV*)(struct CryptoPP::BaseN_Decoder*, uint8_t*, uint64_t, int, bool, CryptoPP__BaseN_DecoderPut24_ptr);
        using CryptoPP__BaseN_Decoderdtor_BaseN_Decoder5_ptr = int64_t (WINAPIV*)(struct CryptoPP::BaseN_Decoder*);
        using CryptoPP__BaseN_Decoderdtor_BaseN_Decoder5_clbk = int64_t (WINAPIV*)(struct CryptoPP::BaseN_Decoder*, CryptoPP__BaseN_Decoderdtor_BaseN_Decoder5_ptr);
        
        using CryptoPP__HexDecoderGetDefaultDecodingLookupArray1_ptr = int* (WINAPIV*)();
        using CryptoPP__HexDecoderGetDefaultDecodingLookupArray1_clbk = int* (WINAPIV*)(CryptoPP__HexDecoderGetDefaultDecodingLookupArray1_ptr);
        using CryptoPP__HexDecoderctor_HexDecoder2_ptr = int64_t (WINAPIV*)(struct CryptoPP::HexDecoder*, struct CryptoPP::BufferedTransformation*);
        using CryptoPP__HexDecoderctor_HexDecoder2_clbk = int64_t (WINAPIV*)(struct CryptoPP::HexDecoder*, struct CryptoPP::BufferedTransformation*, CryptoPP__HexDecoderctor_HexDecoder2_ptr);
        using CryptoPP__HexDecoderIsolatedInitialize3_ptr = void (WINAPIV*)(struct CryptoPP::HexDecoder*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__HexDecoderIsolatedInitialize3_clbk = void (WINAPIV*)(struct CryptoPP::HexDecoder*, struct CryptoPP::NameValuePairs*, CryptoPP__HexDecoderIsolatedInitialize3_ptr);
        using CryptoPP__HexDecoderdtor_HexDecoder4_ptr = int64_t (WINAPIV*)(struct CryptoPP::HexDecoder*);
        using CryptoPP__HexDecoderdtor_HexDecoder4_clbk = int64_t (WINAPIV*)(struct CryptoPP::HexDecoder*, CryptoPP__HexDecoderdtor_HexDecoder4_ptr);
        
        using CryptoPP__WindowSliderFindNextWindow1_ptr = void (WINAPIV*)(struct CryptoPP::WindowSlider*);
        using CryptoPP__WindowSliderFindNextWindow1_clbk = void (WINAPIV*)(struct CryptoPP::WindowSlider*, CryptoPP__WindowSliderFindNextWindow1_ptr);
        using CryptoPP__WindowSliderctor_WindowSlider2_ptr = int64_t (WINAPIV*)(struct CryptoPP::WindowSlider*, struct CryptoPP::Integer*, bool, unsigned int);
        using CryptoPP__WindowSliderctor_WindowSlider2_clbk = int64_t (WINAPIV*)(struct CryptoPP::WindowSlider*, struct CryptoPP::Integer*, bool, unsigned int, CryptoPP__WindowSliderctor_WindowSlider2_ptr);
        using CryptoPP__WindowSliderctor_WindowSlider3_ptr = int64_t (WINAPIV*)(struct CryptoPP::WindowSlider*, struct CryptoPP::WindowSlider*);
        using CryptoPP__WindowSliderctor_WindowSlider3_clbk = int64_t (WINAPIV*)(struct CryptoPP::WindowSlider*, struct CryptoPP::WindowSlider*, CryptoPP__WindowSliderctor_WindowSlider3_ptr);
        using CryptoPP__WindowSliderdtor_WindowSlider4_ptr = int64_t (WINAPIV*)(struct CryptoPP::WindowSlider*);
        using CryptoPP__WindowSliderdtor_WindowSlider4_clbk = int64_t (WINAPIV*)(struct CryptoPP::WindowSlider*, CryptoPP__WindowSliderdtor_WindowSlider4_ptr);
        
        using CryptoPP__DWordctor_DWord1_ptr = int64_t (WINAPIV*)(struct CryptoPP::DWord*, uint64_t);
        using CryptoPP__DWordctor_DWord1_clbk = int64_t (WINAPIV*)(struct CryptoPP::DWord*, uint64_t, CryptoPP__DWordctor_DWord1_ptr);
        using CryptoPP__DWordctor_DWord2_ptr = int64_t (WINAPIV*)(struct CryptoPP::DWord*, uint64_t, uint64_t);
        using CryptoPP__DWordctor_DWord2_clbk = int64_t (WINAPIV*)(struct CryptoPP::DWord*, uint64_t, uint64_t, CryptoPP__DWordctor_DWord2_ptr);
        using CryptoPP__DWordctor_DWord3_ptr = int64_t (WINAPIV*)(struct CryptoPP::DWord*);
        using CryptoPP__DWordctor_DWord3_clbk = int64_t (WINAPIV*)(struct CryptoPP::DWord*, CryptoPP__DWordctor_DWord3_ptr);
        using CryptoPP__DWordGetHighHalf4_ptr = uint64_t (WINAPIV*)(struct CryptoPP::DWord*);
        using CryptoPP__DWordGetHighHalf4_clbk = uint64_t (WINAPIV*)(struct CryptoPP::DWord*, CryptoPP__DWordGetHighHalf4_ptr);
        using CryptoPP__DWordGetHighHalfAsBorrow5_ptr = uint64_t (WINAPIV*)(struct CryptoPP::DWord*);
        using CryptoPP__DWordGetHighHalfAsBorrow5_clbk = uint64_t (WINAPIV*)(struct CryptoPP::DWord*, CryptoPP__DWordGetHighHalfAsBorrow5_ptr);
        using CryptoPP__DWordGetLowHalf6_ptr = uint64_t (WINAPIV*)(struct CryptoPP::DWord*);
        using CryptoPP__DWordGetLowHalf6_clbk = uint64_t (WINAPIV*)(struct CryptoPP::DWord*, CryptoPP__DWordGetLowHalf6_ptr);
        
        using CryptoPP__KDF2_RNGGenerateBlock1_ptr = void (WINAPIV*)(struct CryptoPP::KDF2_RNG*, uint8_t*, uint64_t);
        using CryptoPP__KDF2_RNGGenerateBlock1_clbk = void (WINAPIV*)(struct CryptoPP::KDF2_RNG*, uint8_t*, uint64_t, CryptoPP__KDF2_RNGGenerateBlock1_ptr);
        using CryptoPP__KDF2_RNGctor_KDF2_RNG2_ptr = int64_t (WINAPIV*)(struct CryptoPP::KDF2_RNG*, uint8_t*, uint64_t);
        using CryptoPP__KDF2_RNGctor_KDF2_RNG2_clbk = int64_t (WINAPIV*)(struct CryptoPP::KDF2_RNG*, uint8_t*, uint64_t, CryptoPP__KDF2_RNGctor_KDF2_RNG2_ptr);
        using CryptoPP__KDF2_RNGdtor_KDF2_RNG3_ptr = int64_t (WINAPIV*)(struct CryptoPP::KDF2_RNG*);
        using CryptoPP__KDF2_RNGdtor_KDF2_RNG3_clbk = int64_t (WINAPIV*)(struct CryptoPP::KDF2_RNG*, CryptoPP__KDF2_RNGdtor_KDF2_RNG3_ptr);
        
        using CryptoPP__WordGetHighHalf1_ptr = unsigned int (WINAPIV*)(struct CryptoPP::Word*);
        using CryptoPP__WordGetHighHalf1_clbk = unsigned int (WINAPIV*)(struct CryptoPP::Word*, CryptoPP__WordGetHighHalf1_ptr);
        using CryptoPP__WordGetHighHalfAsBorrow2_ptr = unsigned int (WINAPIV*)(struct CryptoPP::Word*);
        using CryptoPP__WordGetHighHalfAsBorrow2_clbk = unsigned int (WINAPIV*)(struct CryptoPP::Word*, CryptoPP__WordGetHighHalfAsBorrow2_ptr);
        using CryptoPP__WordGetLowHalf3_ptr = unsigned int (WINAPIV*)(struct CryptoPP::Word*);
        using CryptoPP__WordGetLowHalf3_clbk = unsigned int (WINAPIV*)(struct CryptoPP::Word*, CryptoPP__WordGetLowHalf3_ptr);
        using CryptoPP__WordGetWhole4_ptr = uint64_t (WINAPIV*)(struct CryptoPP::Word*);
        using CryptoPP__WordGetWhole4_clbk = uint64_t (WINAPIV*)(struct CryptoPP::Word*, CryptoPP__WordGetWhole4_ptr);
        using CryptoPP__Wordctor_Word5_ptr = int64_t (WINAPIV*)(struct CryptoPP::Word*, unsigned int, unsigned int);
        using CryptoPP__Wordctor_Word5_clbk = int64_t (WINAPIV*)(struct CryptoPP::Word*, unsigned int, unsigned int, CryptoPP__Wordctor_Word5_ptr);
        using CryptoPP__Wordctor_Word6_ptr = int64_t (WINAPIV*)(struct CryptoPP::Word*, uint64_t);
        using CryptoPP__Wordctor_Word6_clbk = int64_t (WINAPIV*)(struct CryptoPP::Word*, uint64_t, CryptoPP__Wordctor_Word6_ptr);
        using CryptoPP__Wordctor_Word7_ptr = int64_t (WINAPIV*)(struct CryptoPP::Word*);
        using CryptoPP__Wordctor_Word7_clbk = int64_t (WINAPIV*)(struct CryptoPP::Word*, CryptoPP__Wordctor_Word7_ptr);
        
        using CryptoPP__ClassNullRNGctor_ClassNullRNG1_ptr = int64_t (WINAPIV*)(struct CryptoPP::ClassNullRNG*);
        using CryptoPP__ClassNullRNGctor_ClassNullRNG1_clbk = int64_t (WINAPIV*)(struct CryptoPP::ClassNullRNG*, CryptoPP__ClassNullRNGctor_ClassNullRNG1_ptr);
        using CryptoPP__ClassNullRNGGenerateBlock2_ptr = void (WINAPIV*)(struct CryptoPP::ClassNullRNG*, uint8_t*, uint64_t);
        using CryptoPP__ClassNullRNGGenerateBlock2_clbk = void (WINAPIV*)(struct CryptoPP::ClassNullRNG*, uint8_t*, uint64_t, CryptoPP__ClassNullRNGGenerateBlock2_ptr);
        using CryptoPP__ClassNullRNGdtor_ClassNullRNG3_ptr = int64_t (WINAPIV*)(struct CryptoPP::ClassNullRNG*);
        using CryptoPP__ClassNullRNGdtor_ClassNullRNG3_clbk = int64_t (WINAPIV*)(struct CryptoPP::ClassNullRNG*, CryptoPP__ClassNullRNGdtor_ClassNullRNG3_ptr);
        
        using CryptoPP__ProjectivePointctor_ProjectivePoint1_ptr = int64_t (WINAPIV*)(struct CryptoPP::ProjectivePoint*, struct CryptoPP::ProjectivePoint*);
        using CryptoPP__ProjectivePointctor_ProjectivePoint1_clbk = int64_t (WINAPIV*)(struct CryptoPP::ProjectivePoint*, struct CryptoPP::ProjectivePoint*, CryptoPP__ProjectivePointctor_ProjectivePoint1_ptr);
        using CryptoPP__ProjectivePointctor_ProjectivePoint2_ptr = int64_t (WINAPIV*)(struct CryptoPP::ProjectivePoint*);
        using CryptoPP__ProjectivePointctor_ProjectivePoint2_clbk = int64_t (WINAPIV*)(struct CryptoPP::ProjectivePoint*, CryptoPP__ProjectivePointctor_ProjectivePoint2_ptr);
        using CryptoPP__ProjectivePointdtor_ProjectivePoint3_ptr = int64_t (WINAPIV*)(struct CryptoPP::ProjectivePoint*);
        using CryptoPP__ProjectivePointdtor_ProjectivePoint3_clbk = int64_t (WINAPIV*)(struct CryptoPP::ProjectivePoint*, CryptoPP__ProjectivePointdtor_ProjectivePoint3_ptr);
        
        using CryptoPP__ProjectiveDoublingDouble1_ptr = void (WINAPIV*)(struct CryptoPP::ProjectiveDoubling*);
        using CryptoPP__ProjectiveDoublingDouble1_clbk = void (WINAPIV*)(struct CryptoPP::ProjectiveDoubling*, CryptoPP__ProjectiveDoublingDouble1_ptr);
        using CryptoPP__ProjectiveDoublingctor_ProjectiveDoubling2_ptr = int64_t (WINAPIV*)(struct CryptoPP::ProjectiveDoubling*, struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::ECPPoint*);
        using CryptoPP__ProjectiveDoublingctor_ProjectiveDoubling2_clbk = int64_t (WINAPIV*)(struct CryptoPP::ProjectiveDoubling*, struct CryptoPP::ModularArithmetic*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::ECPPoint*, CryptoPP__ProjectiveDoublingctor_ProjectiveDoubling2_ptr);
        using CryptoPP__ProjectiveDoublingdtor_ProjectiveDoubling3_ptr = int64_t (WINAPIV*)(struct CryptoPP::ProjectiveDoubling*);
        using CryptoPP__ProjectiveDoublingdtor_ProjectiveDoubling3_clbk = int64_t (WINAPIV*)(struct CryptoPP::ProjectiveDoubling*, CryptoPP__ProjectiveDoublingdtor_ProjectiveDoubling3_ptr);
        
        using CryptoPP__PrimeAndGeneratorGenerate1_ptr = void (WINAPIV*)(struct CryptoPP::PrimeAndGenerator*, int, struct CryptoPP::RandomNumberGenerator*, unsigned int, unsigned int);
        using CryptoPP__PrimeAndGeneratorGenerate1_clbk = void (WINAPIV*)(struct CryptoPP::PrimeAndGenerator*, int, struct CryptoPP::RandomNumberGenerator*, unsigned int, unsigned int, CryptoPP__PrimeAndGeneratorGenerate1_ptr);
        using CryptoPP__PrimeAndGeneratorctor_Generator2_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::PrimeAndGenerator*);
        using CryptoPP__PrimeAndGeneratorctor_Generator2_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::PrimeAndGenerator*, CryptoPP__PrimeAndGeneratorctor_Generator2_ptr);
        using CryptoPP__PrimeAndGeneratorPrime3_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::PrimeAndGenerator*);
        using CryptoPP__PrimeAndGeneratorPrime3_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::PrimeAndGenerator*, CryptoPP__PrimeAndGeneratorPrime3_ptr);
        using CryptoPP__PrimeAndGeneratorctor_PrimeAndGenerator4_ptr = int64_t (WINAPIV*)(struct CryptoPP::PrimeAndGenerator*);
        using CryptoPP__PrimeAndGeneratorctor_PrimeAndGenerator4_clbk = int64_t (WINAPIV*)(struct CryptoPP::PrimeAndGenerator*, CryptoPP__PrimeAndGeneratorctor_PrimeAndGenerator4_ptr);
        using CryptoPP__PrimeAndGeneratorSubPrime5_ptr = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::PrimeAndGenerator*);
        using CryptoPP__PrimeAndGeneratorSubPrime5_clbk = struct CryptoPP::Integer* (WINAPIV*)(struct CryptoPP::PrimeAndGenerator*, CryptoPP__PrimeAndGeneratorSubPrime5_ptr);
        using CryptoPP__PrimeAndGeneratordtor_PrimeAndGenerator6_ptr = int64_t (WINAPIV*)(struct CryptoPP::PrimeAndGenerator*);
        using CryptoPP__PrimeAndGeneratordtor_PrimeAndGenerator6_clbk = int64_t (WINAPIV*)(struct CryptoPP::PrimeAndGenerator*, CryptoPP__PrimeAndGeneratordtor_PrimeAndGenerator6_ptr);
        
        using CryptoPP__BaseN_EncoderIsolatedInitialize1_ptr = void (WINAPIV*)(struct CryptoPP::BaseN_Encoder*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__BaseN_EncoderIsolatedInitialize1_clbk = void (WINAPIV*)(struct CryptoPP::BaseN_Encoder*, struct CryptoPP::NameValuePairs*, CryptoPP__BaseN_EncoderIsolatedInitialize1_ptr);
        using CryptoPP__BaseN_EncoderPut22_ptr = uint64_t (WINAPIV*)(struct CryptoPP::BaseN_Encoder*, uint8_t*, uint64_t, int, bool);
        using CryptoPP__BaseN_EncoderPut22_clbk = uint64_t (WINAPIV*)(struct CryptoPP::BaseN_Encoder*, uint8_t*, uint64_t, int, bool, CryptoPP__BaseN_EncoderPut22_ptr);
        
        using CryptoPP__GrouperIsolatedInitialize1_ptr = void (WINAPIV*)(struct CryptoPP::Grouper*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__GrouperIsolatedInitialize1_clbk = void (WINAPIV*)(struct CryptoPP::Grouper*, struct CryptoPP::NameValuePairs*, CryptoPP__GrouperIsolatedInitialize1_ptr);
        using CryptoPP__GrouperPut22_ptr = uint64_t (WINAPIV*)(struct CryptoPP::Grouper*, uint8_t*, uint64_t, int, bool);
        using CryptoPP__GrouperPut22_clbk = uint64_t (WINAPIV*)(struct CryptoPP::Grouper*, uint8_t*, uint64_t, int, bool, CryptoPP__GrouperPut22_ptr);
        
        using CryptoPP__PrimeSieveDoSieve1_ptr = void (WINAPIV*)(struct CryptoPP::PrimeSieve*);
        using CryptoPP__PrimeSieveDoSieve1_clbk = void (WINAPIV*)(struct CryptoPP::PrimeSieve*, CryptoPP__PrimeSieveDoSieve1_ptr);
        using CryptoPP__PrimeSieveNextCandidate2_ptr = bool (WINAPIV*)(struct CryptoPP::PrimeSieve*, struct CryptoPP::Integer*);
        using CryptoPP__PrimeSieveNextCandidate2_clbk = bool (WINAPIV*)(struct CryptoPP::PrimeSieve*, struct CryptoPP::Integer*, CryptoPP__PrimeSieveNextCandidate2_ptr);
        using CryptoPP__PrimeSievector_PrimeSieve3_ptr = int64_t (WINAPIV*)(struct CryptoPP::PrimeSieve*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, int);
        using CryptoPP__PrimeSievector_PrimeSieve3_clbk = int64_t (WINAPIV*)(struct CryptoPP::PrimeSieve*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, struct CryptoPP::Integer*, int, CryptoPP__PrimeSievector_PrimeSieve3_ptr);
        using CryptoPP__PrimeSievedtor_PrimeSieve4_ptr = int64_t (WINAPIV*)(struct CryptoPP::PrimeSieve*);
        using CryptoPP__PrimeSievedtor_PrimeSieve4_clbk = int64_t (WINAPIV*)(struct CryptoPP::PrimeSieve*, CryptoPP__PrimeSievedtor_PrimeSieve4_ptr);
        
        using CryptoPP__MessageQueueAnyRetrievable1_ptr = bool (WINAPIV*)(struct CryptoPP::MessageQueue*);
        using CryptoPP__MessageQueueAnyRetrievable1_clbk = bool (WINAPIV*)(struct CryptoPP::MessageQueue*, CryptoPP__MessageQueueAnyRetrievable1_ptr);
        using CryptoPP__MessageQueueGetNextMessage2_ptr = bool (WINAPIV*)(struct CryptoPP::MessageQueue*);
        using CryptoPP__MessageQueueGetNextMessage2_clbk = bool (WINAPIV*)(struct CryptoPP::MessageQueue*, CryptoPP__MessageQueueGetNextMessage2_ptr);
        using CryptoPP__MessageQueueIsolatedFlush3_ptr = bool (WINAPIV*)(struct CryptoPP::MessageQueue*, bool, bool);
        using CryptoPP__MessageQueueIsolatedFlush3_clbk = bool (WINAPIV*)(struct CryptoPP::MessageQueue*, bool, bool, CryptoPP__MessageQueueIsolatedFlush3_ptr);
        using CryptoPP__MessageQueueIsolatedInitialize4_ptr = void (WINAPIV*)(struct CryptoPP::MessageQueue*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__MessageQueueIsolatedInitialize4_clbk = void (WINAPIV*)(struct CryptoPP::MessageQueue*, struct CryptoPP::NameValuePairs*, CryptoPP__MessageQueueIsolatedInitialize4_ptr);
        using CryptoPP__MessageQueueIsolatedMessageSeriesEnd5_ptr = bool (WINAPIV*)(struct CryptoPP::MessageQueue*, bool);
        using CryptoPP__MessageQueueIsolatedMessageSeriesEnd5_clbk = bool (WINAPIV*)(struct CryptoPP::MessageQueue*, bool, CryptoPP__MessageQueueIsolatedMessageSeriesEnd5_ptr);
        using CryptoPP__MessageQueueMaxRetrievable6_ptr = uint64_t (WINAPIV*)(struct CryptoPP::MessageQueue*);
        using CryptoPP__MessageQueueMaxRetrievable6_clbk = uint64_t (WINAPIV*)(struct CryptoPP::MessageQueue*, CryptoPP__MessageQueueMaxRetrievable6_ptr);
        using CryptoPP__MessageQueuector_MessageQueue7_ptr = int64_t (WINAPIV*)(struct CryptoPP::MessageQueue*, unsigned int);
        using CryptoPP__MessageQueuector_MessageQueue7_clbk = int64_t (WINAPIV*)(struct CryptoPP::MessageQueue*, unsigned int, CryptoPP__MessageQueuector_MessageQueue7_ptr);
        using CryptoPP__MessageQueueNumberOfMessageSeries8_ptr = unsigned int (WINAPIV*)(struct CryptoPP::MessageQueue*);
        using CryptoPP__MessageQueueNumberOfMessageSeries8_clbk = unsigned int (WINAPIV*)(struct CryptoPP::MessageQueue*, CryptoPP__MessageQueueNumberOfMessageSeries8_ptr);
        using CryptoPP__MessageQueueNumberOfMessages9_ptr = unsigned int (WINAPIV*)(struct CryptoPP::MessageQueue*);
        using CryptoPP__MessageQueueNumberOfMessages9_clbk = unsigned int (WINAPIV*)(struct CryptoPP::MessageQueue*, CryptoPP__MessageQueueNumberOfMessages9_ptr);
        using CryptoPP__MessageQueueNumberOfMessagesInThisSeries10_ptr = unsigned int (WINAPIV*)(struct CryptoPP::MessageQueue*);
        using CryptoPP__MessageQueueNumberOfMessagesInThisSeries10_clbk = unsigned int (WINAPIV*)(struct CryptoPP::MessageQueue*, CryptoPP__MessageQueueNumberOfMessagesInThisSeries10_ptr);
        using CryptoPP__MessageQueuePut211_ptr = uint64_t (WINAPIV*)(struct CryptoPP::MessageQueue*, uint8_t*, uint64_t, int, bool);
        using CryptoPP__MessageQueuePut211_clbk = uint64_t (WINAPIV*)(struct CryptoPP::MessageQueue*, uint8_t*, uint64_t, int, bool, CryptoPP__MessageQueuePut211_ptr);
        using CryptoPP__MessageQueueSpy12_ptr = uint8_t* (WINAPIV*)(struct CryptoPP::MessageQueue*, uint64_t*);
        using CryptoPP__MessageQueueSpy12_clbk = uint8_t* (WINAPIV*)(struct CryptoPP::MessageQueue*, uint64_t*, CryptoPP__MessageQueueSpy12_ptr);
        using CryptoPP__MessageQueueTotalBytesRetrievable13_ptr = uint64_t (WINAPIV*)(struct CryptoPP::MessageQueue*);
        using CryptoPP__MessageQueueTotalBytesRetrievable13_clbk = uint64_t (WINAPIV*)(struct CryptoPP::MessageQueue*, CryptoPP__MessageQueueTotalBytesRetrievable13_ptr);
        using CryptoPP__MessageQueueswap14_ptr = void (WINAPIV*)(struct CryptoPP::MessageQueue*, struct CryptoPP::MessageQueue*);
        using CryptoPP__MessageQueueswap14_clbk = void (WINAPIV*)(struct CryptoPP::MessageQueue*, struct CryptoPP::MessageQueue*, CryptoPP__MessageQueueswap14_ptr);
        using CryptoPP__MessageQueuedtor_MessageQueue15_ptr = int64_t (WINAPIV*)(struct CryptoPP::MessageQueue*);
        using CryptoPP__MessageQueuedtor_MessageQueue15_clbk = int64_t (WINAPIV*)(struct CryptoPP::MessageQueue*, CryptoPP__MessageQueuedtor_MessageQueue15_ptr);
        
        using CryptoPP__TimerBaseElapsedTime1_ptr = uint32_t (WINAPIV*)(struct CryptoPP::TimerBase*);
        using CryptoPP__TimerBaseElapsedTime1_clbk = uint32_t (WINAPIV*)(struct CryptoPP::TimerBase*, CryptoPP__TimerBaseElapsedTime1_ptr);
        using CryptoPP__TimerBaseElapsedTimeAsDouble2_ptr = double (WINAPIV*)(struct CryptoPP::TimerBase*);
        using CryptoPP__TimerBaseElapsedTimeAsDouble2_clbk = double (WINAPIV*)(struct CryptoPP::TimerBase*, CryptoPP__TimerBaseElapsedTimeAsDouble2_ptr);
        using CryptoPP__TimerBaseStartTimer3_ptr = void (WINAPIV*)(struct CryptoPP::TimerBase*);
        using CryptoPP__TimerBaseStartTimer3_clbk = void (WINAPIV*)(struct CryptoPP::TimerBase*, CryptoPP__TimerBaseStartTimer3_ptr);
        
        using CryptoPP__TimerGetCurrentTimerValue1_ptr = uint64_t (WINAPIV*)(struct CryptoPP::Timer*);
        using CryptoPP__TimerGetCurrentTimerValue1_clbk = uint64_t (WINAPIV*)(struct CryptoPP::Timer*, CryptoPP__TimerGetCurrentTimerValue1_ptr);
        using CryptoPP__TimerTicksPerSecond2_ptr = uint64_t (WINAPIV*)(struct CryptoPP::Timer*);
        using CryptoPP__TimerTicksPerSecond2_clbk = uint64_t (WINAPIV*)(struct CryptoPP::Timer*, CryptoPP__TimerTicksPerSecond2_ptr);
        
        using CryptoPP__ThreadUserTimerGetCurrentTimerValue1_ptr = uint64_t (WINAPIV*)(struct CryptoPP::ThreadUserTimer*);
        using CryptoPP__ThreadUserTimerGetCurrentTimerValue1_clbk = uint64_t (WINAPIV*)(struct CryptoPP::ThreadUserTimer*, CryptoPP__ThreadUserTimerGetCurrentTimerValue1_ptr);
        using CryptoPP__ThreadUserTimerTicksPerSecond2_ptr = uint64_t (WINAPIV*)(struct CryptoPP::ThreadUserTimer*);
        using CryptoPP__ThreadUserTimerTicksPerSecond2_clbk = uint64_t (WINAPIV*)(struct CryptoPP::ThreadUserTimer*, CryptoPP__ThreadUserTimerTicksPerSecond2_ptr);
        
        using CryptoPP__SosemanukPolicyCipherResynchronize1_ptr = void (WINAPIV*)(struct CryptoPP::SosemanukPolicy*, uint8_t*, uint8_t*);
        using CryptoPP__SosemanukPolicyCipherResynchronize1_clbk = void (WINAPIV*)(struct CryptoPP::SosemanukPolicy*, uint8_t*, uint8_t*, CryptoPP__SosemanukPolicyCipherResynchronize1_ptr);
        using CryptoPP__SosemanukPolicyCipherSetKey2_ptr = void (WINAPIV*)(struct CryptoPP::SosemanukPolicy*, struct CryptoPP::NameValuePairs*, uint8_t*, uint64_t);
        using CryptoPP__SosemanukPolicyCipherSetKey2_clbk = void (WINAPIV*)(struct CryptoPP::SosemanukPolicy*, struct CryptoPP::NameValuePairs*, uint8_t*, uint64_t, CryptoPP__SosemanukPolicyCipherSetKey2_ptr);
        using CryptoPP__SosemanukPolicyGetAlignment3_ptr = unsigned int (WINAPIV*)(struct CryptoPP::SosemanukPolicy*);
        using CryptoPP__SosemanukPolicyGetAlignment3_clbk = unsigned int (WINAPIV*)(struct CryptoPP::SosemanukPolicy*, CryptoPP__SosemanukPolicyGetAlignment3_ptr);
        using CryptoPP__SosemanukPolicyGetOptimalBlockSize4_ptr = unsigned int (WINAPIV*)(struct CryptoPP::SosemanukPolicy*);
        using CryptoPP__SosemanukPolicyGetOptimalBlockSize4_clbk = unsigned int (WINAPIV*)(struct CryptoPP::SosemanukPolicy*, CryptoPP__SosemanukPolicyGetOptimalBlockSize4_ptr);
        using CryptoPP__SosemanukPolicyOperateKeystream5_ptr = void (WINAPIV*)(struct CryptoPP::SosemanukPolicy*, struct CryptoPP::KeystreamOperation, uint8_t*, uint8_t*, uint64_t);
        using CryptoPP__SosemanukPolicyOperateKeystream5_clbk = void (WINAPIV*)(struct CryptoPP::SosemanukPolicy*, struct CryptoPP::KeystreamOperation, uint8_t*, uint8_t*, uint64_t, CryptoPP__SosemanukPolicyOperateKeystream5_ptr);
        
        using CryptoPP__PK_DefaultEncryptionFilterctor_PK_DefaultEncryptionFilter1_ptr = int64_t (WINAPIV*)(struct CryptoPP::PK_DefaultEncryptionFilter*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::PK_Encryptor*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__PK_DefaultEncryptionFilterctor_PK_DefaultEncryptionFilter1_clbk = int64_t (WINAPIV*)(struct CryptoPP::PK_DefaultEncryptionFilter*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::PK_Encryptor*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::NameValuePairs*, CryptoPP__PK_DefaultEncryptionFilterctor_PK_DefaultEncryptionFilter1_ptr);
        using CryptoPP__PK_DefaultEncryptionFilterPut22_ptr = uint64_t (WINAPIV*)(struct CryptoPP::PK_DefaultEncryptionFilter*, uint8_t*, uint64_t, int, bool);
        using CryptoPP__PK_DefaultEncryptionFilterPut22_clbk = uint64_t (WINAPIV*)(struct CryptoPP::PK_DefaultEncryptionFilter*, uint8_t*, uint64_t, int, bool, CryptoPP__PK_DefaultEncryptionFilterPut22_ptr);
        using CryptoPP__PK_DefaultEncryptionFilterdtor_PK_DefaultEncryptionFilter3_ptr = int64_t (WINAPIV*)(struct CryptoPP::PK_DefaultEncryptionFilter*);
        using CryptoPP__PK_DefaultEncryptionFilterdtor_PK_DefaultEncryptionFilter3_clbk = int64_t (WINAPIV*)(struct CryptoPP::PK_DefaultEncryptionFilter*, CryptoPP__PK_DefaultEncryptionFilterdtor_PK_DefaultEncryptionFilter3_ptr);
        
        using CryptoPP__PK_DefaultDecryptionFilterctor_PK_DefaultDecryptionFilter1_ptr = int64_t (WINAPIV*)(struct CryptoPP::PK_DefaultDecryptionFilter*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::PK_Decryptor*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__PK_DefaultDecryptionFilterctor_PK_DefaultDecryptionFilter1_clbk = int64_t (WINAPIV*)(struct CryptoPP::PK_DefaultDecryptionFilter*, struct CryptoPP::RandomNumberGenerator*, struct CryptoPP::PK_Decryptor*, struct CryptoPP::BufferedTransformation*, struct CryptoPP::NameValuePairs*, CryptoPP__PK_DefaultDecryptionFilterctor_PK_DefaultDecryptionFilter1_ptr);
        using CryptoPP__PK_DefaultDecryptionFilterPut22_ptr = uint64_t (WINAPIV*)(struct CryptoPP::PK_DefaultDecryptionFilter*, uint8_t*, uint64_t, int, bool);
        using CryptoPP__PK_DefaultDecryptionFilterPut22_clbk = uint64_t (WINAPIV*)(struct CryptoPP::PK_DefaultDecryptionFilter*, uint8_t*, uint64_t, int, bool, CryptoPP__PK_DefaultDecryptionFilterPut22_ptr);
        using CryptoPP__PK_DefaultDecryptionFilterdtor_PK_DefaultDecryptionFilter3_ptr = int64_t (WINAPIV*)(struct CryptoPP::PK_DefaultDecryptionFilter*);
        using CryptoPP__PK_DefaultDecryptionFilterdtor_PK_DefaultDecryptionFilter3_clbk = int64_t (WINAPIV*)(struct CryptoPP::PK_DefaultDecryptionFilter*, CryptoPP__PK_DefaultDecryptionFilterdtor_PK_DefaultDecryptionFilter3_ptr);
        
        using CryptoPP__EqualityComparisonFilterHandleMismatchDetected1_ptr = bool (WINAPIV*)(struct CryptoPP::EqualityComparisonFilter*, bool);
        using CryptoPP__EqualityComparisonFilterHandleMismatchDetected1_clbk = bool (WINAPIV*)(struct CryptoPP::EqualityComparisonFilter*, bool, CryptoPP__EqualityComparisonFilterHandleMismatchDetected1_ptr);
        
        using CryptoPP__EqualityComparisonFilter__MismatchDetectedctor_MismatchDetected1_ptr = int64_t (WINAPIV*)(struct CryptoPP::EqualityComparisonFilter::MismatchDetected*, struct CryptoPP::EqualityComparisonFilter::MismatchDetected*);
        using CryptoPP__EqualityComparisonFilter__MismatchDetectedctor_MismatchDetected1_clbk = int64_t (WINAPIV*)(struct CryptoPP::EqualityComparisonFilter::MismatchDetected*, struct CryptoPP::EqualityComparisonFilter::MismatchDetected*, CryptoPP__EqualityComparisonFilter__MismatchDetectedctor_MismatchDetected1_ptr);
        using CryptoPP__EqualityComparisonFilter__MismatchDetectedctor_MismatchDetected2_ptr = int64_t (WINAPIV*)(struct CryptoPP::EqualityComparisonFilter::MismatchDetected*);
        using CryptoPP__EqualityComparisonFilter__MismatchDetectedctor_MismatchDetected2_clbk = int64_t (WINAPIV*)(struct CryptoPP::EqualityComparisonFilter::MismatchDetected*, CryptoPP__EqualityComparisonFilter__MismatchDetectedctor_MismatchDetected2_ptr);
        using CryptoPP__EqualityComparisonFilter__MismatchDetecteddtor_MismatchDetected3_ptr = int64_t (WINAPIV*)(struct CryptoPP::EqualityComparisonFilter::MismatchDetected*);
        using CryptoPP__EqualityComparisonFilter__MismatchDetecteddtor_MismatchDetected3_clbk = int64_t (WINAPIV*)(struct CryptoPP::EqualityComparisonFilter::MismatchDetected*, CryptoPP__EqualityComparisonFilter__MismatchDetecteddtor_MismatchDetected3_ptr);
        
        using CryptoPP__RawDESctor_RawDES1_ptr = int64_t (WINAPIV*)(struct CryptoPP::RawDES*, struct CryptoPP::RawDES*);
        using CryptoPP__RawDESctor_RawDES1_clbk = int64_t (WINAPIV*)(struct CryptoPP::RawDES*, struct CryptoPP::RawDES*, CryptoPP__RawDESctor_RawDES1_ptr);
        using CryptoPP__RawDESctor_RawDES2_ptr = int64_t (WINAPIV*)(struct CryptoPP::RawDES*);
        using CryptoPP__RawDESctor_RawDES2_clbk = int64_t (WINAPIV*)(struct CryptoPP::RawDES*, CryptoPP__RawDESctor_RawDES2_ptr);
        using CryptoPP__RawDESRawProcessBlock3_ptr = void (WINAPIV*)(struct CryptoPP::RawDES*, unsigned int*, unsigned int*);
        using CryptoPP__RawDESRawProcessBlock3_clbk = void (WINAPIV*)(struct CryptoPP::RawDES*, unsigned int*, unsigned int*, CryptoPP__RawDESRawProcessBlock3_ptr);
        using CryptoPP__RawDESRawSetKey4_ptr = void (WINAPIV*)(struct CryptoPP::RawDES*, struct CryptoPP::CipherDir, uint8_t*);
        using CryptoPP__RawDESRawSetKey4_clbk = void (WINAPIV*)(struct CryptoPP::RawDES*, struct CryptoPP::CipherDir, uint8_t*, CryptoPP__RawDESRawSetKey4_ptr);
        using CryptoPP__RawDESdtor_RawDES5_ptr = int64_t (WINAPIV*)(struct CryptoPP::RawDES*);
        using CryptoPP__RawDESdtor_RawDES5_clbk = int64_t (WINAPIV*)(struct CryptoPP::RawDES*, CryptoPP__RawDESdtor_RawDES5_ptr);
        
        using CryptoPP__DES_EDE2__BaseProcessAndXorBlock1_ptr = void (WINAPIV*)(struct CryptoPP::DES_EDE2::Base*, uint8_t*, uint8_t*, uint8_t*);
        using CryptoPP__DES_EDE2__BaseProcessAndXorBlock1_clbk = void (WINAPIV*)(struct CryptoPP::DES_EDE2::Base*, uint8_t*, uint8_t*, uint8_t*, CryptoPP__DES_EDE2__BaseProcessAndXorBlock1_ptr);
        using CryptoPP__DES_EDE2__BaseUncheckedSetKey2_ptr = void (WINAPIV*)(struct CryptoPP::DES_EDE2::Base*, uint8_t*, unsigned int, struct CryptoPP::NameValuePairs*);
        using CryptoPP__DES_EDE2__BaseUncheckedSetKey2_clbk = void (WINAPIV*)(struct CryptoPP::DES_EDE2::Base*, uint8_t*, unsigned int, struct CryptoPP::NameValuePairs*, CryptoPP__DES_EDE2__BaseUncheckedSetKey2_ptr);
        
        using CryptoPP__DES_EDE3__BaseProcessAndXorBlock1_ptr = void (WINAPIV*)(struct CryptoPP::DES_EDE3::Base*, uint8_t*, uint8_t*, uint8_t*);
        using CryptoPP__DES_EDE3__BaseProcessAndXorBlock1_clbk = void (WINAPIV*)(struct CryptoPP::DES_EDE3::Base*, uint8_t*, uint8_t*, uint8_t*, CryptoPP__DES_EDE3__BaseProcessAndXorBlock1_ptr);
        using CryptoPP__DES_EDE3__BaseUncheckedSetKey2_ptr = void (WINAPIV*)(struct CryptoPP::DES_EDE3::Base*, uint8_t*, unsigned int, struct CryptoPP::NameValuePairs*);
        using CryptoPP__DES_EDE3__BaseUncheckedSetKey2_clbk = void (WINAPIV*)(struct CryptoPP::DES_EDE3::Base*, uint8_t*, unsigned int, struct CryptoPP::NameValuePairs*, CryptoPP__DES_EDE3__BaseUncheckedSetKey2_ptr);
        
        using CryptoPP__DES_XEX3__BaseProcessAndXorBlock1_ptr = void (WINAPIV*)(struct CryptoPP::DES_XEX3::Base*, uint8_t*, uint8_t*, uint8_t*);
        using CryptoPP__DES_XEX3__BaseProcessAndXorBlock1_clbk = void (WINAPIV*)(struct CryptoPP::DES_XEX3::Base*, uint8_t*, uint8_t*, uint8_t*, CryptoPP__DES_XEX3__BaseProcessAndXorBlock1_ptr);
        using CryptoPP__DES_XEX3__BaseUncheckedSetKey2_ptr = void (WINAPIV*)(struct CryptoPP::DES_XEX3::Base*, uint8_t*, unsigned int, struct CryptoPP::NameValuePairs*);
        using CryptoPP__DES_XEX3__BaseUncheckedSetKey2_clbk = void (WINAPIV*)(struct CryptoPP::DES_XEX3::Base*, uint8_t*, unsigned int, struct CryptoPP::NameValuePairs*, CryptoPP__DES_XEX3__BaseUncheckedSetKey2_ptr);
        
        using CryptoPP__Serpent__EncProcessAndXorBlock1_ptr = void (WINAPIV*)(struct CryptoPP::Serpent::Enc*, uint8_t*, uint8_t*, uint8_t*);
        using CryptoPP__Serpent__EncProcessAndXorBlock1_clbk = void (WINAPIV*)(struct CryptoPP::Serpent::Enc*, uint8_t*, uint8_t*, uint8_t*, CryptoPP__Serpent__EncProcessAndXorBlock1_ptr);
        
        using CryptoPP__Serpent__DecProcessAndXorBlock1_ptr = void (WINAPIV*)(struct CryptoPP::Serpent::Dec*, uint8_t*, uint8_t*, uint8_t*);
        using CryptoPP__Serpent__DecProcessAndXorBlock1_clbk = void (WINAPIV*)(struct CryptoPP::Serpent::Dec*, uint8_t*, uint8_t*, uint8_t*, CryptoPP__Serpent__DecProcessAndXorBlock1_ptr);
        
        using CryptoPP__ZIteratorctor_ZIterator1_ptr = int64_t (WINAPIV*)(struct CryptoPP::ZIterator*, struct CryptoPP::ZIterator*);
        using CryptoPP__ZIteratorctor_ZIterator1_clbk = int64_t (WINAPIV*)(struct CryptoPP::ZIterator*, struct CryptoPP::ZIterator*, CryptoPP__ZIteratorctor_ZIterator1_ptr);
        using CryptoPP__ZIteratorctor_ZIterator2_ptr = int64_t (WINAPIV*)(struct CryptoPP::ZIterator*);
        using CryptoPP__ZIteratorctor_ZIterator2_clbk = int64_t (WINAPIV*)(struct CryptoPP::ZIterator*, CryptoPP__ZIteratorctor_ZIterator2_ptr);
        using CryptoPP__ZIteratordtor_ZIterator3_ptr = int64_t (WINAPIV*)(struct CryptoPP::ZIterator*);
        using CryptoPP__ZIteratordtor_ZIterator3_clbk = int64_t (WINAPIV*)(struct CryptoPP::ZIterator*, CryptoPP__ZIteratordtor_ZIterator3_ptr);
        
        using CryptoPP__DES__Basector_Base1_ptr = int64_t (WINAPIV*)(struct CryptoPP::DES::Base*, struct CryptoPP::DES::Base*);
        using CryptoPP__DES__Basector_Base1_clbk = int64_t (WINAPIV*)(struct CryptoPP::DES::Base*, struct CryptoPP::DES::Base*, CryptoPP__DES__Basector_Base1_ptr);
        using CryptoPP__DES__Basector_Base2_ptr = int64_t (WINAPIV*)(struct CryptoPP::DES::Base*);
        using CryptoPP__DES__Basector_Base2_clbk = int64_t (WINAPIV*)(struct CryptoPP::DES::Base*, CryptoPP__DES__Basector_Base2_ptr);
        using CryptoPP__DES__BaseProcessAndXorBlock3_ptr = void (WINAPIV*)(struct CryptoPP::DES::Base*, uint8_t*, uint8_t*, uint8_t*);
        using CryptoPP__DES__BaseProcessAndXorBlock3_clbk = void (WINAPIV*)(struct CryptoPP::DES::Base*, uint8_t*, uint8_t*, uint8_t*, CryptoPP__DES__BaseProcessAndXorBlock3_ptr);
        using CryptoPP__DES__BaseUncheckedSetKey4_ptr = void (WINAPIV*)(struct CryptoPP::DES::Base*, uint8_t*, unsigned int, struct CryptoPP::NameValuePairs*);
        using CryptoPP__DES__BaseUncheckedSetKey4_clbk = void (WINAPIV*)(struct CryptoPP::DES::Base*, uint8_t*, unsigned int, struct CryptoPP::NameValuePairs*, CryptoPP__DES__BaseUncheckedSetKey4_ptr);
        using CryptoPP__DES__Basedtor_Base5_ptr = int64_t (WINAPIV*)(struct CryptoPP::DES::Base*);
        using CryptoPP__DES__Basedtor_Base5_clbk = int64_t (WINAPIV*)(struct CryptoPP::DES::Base*, CryptoPP__DES__Basedtor_Base5_ptr);
        
        using CryptoPP__HexEncoderIsolatedInitialize1_ptr = void (WINAPIV*)(struct CryptoPP::HexEncoder*, struct CryptoPP::NameValuePairs*);
        using CryptoPP__HexEncoderIsolatedInitialize1_clbk = void (WINAPIV*)(struct CryptoPP::HexEncoder*, struct CryptoPP::NameValuePairs*, CryptoPP__HexEncoderIsolatedInitialize1_ptr);
        
        using CryptoPP__Serpent__BaseUncheckedSetKey1_ptr = void (WINAPIV*)(struct CryptoPP::Serpent::Base*, uint8_t*, unsigned int, struct CryptoPP::NameValuePairs*);
        using CryptoPP__Serpent__BaseUncheckedSetKey1_clbk = void (WINAPIV*)(struct CryptoPP::Serpent::Base*, uint8_t*, unsigned int, struct CryptoPP::NameValuePairs*, CryptoPP__Serpent__BaseUncheckedSetKey1_ptr);
        
        using CryptoPP__ASN1ansi_x9_571_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1ansi_x9_571_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1ansi_x9_571_ptr);
        using CryptoPP__ASN1ansi_x9_622_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1ansi_x9_622_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1ansi_x9_622_ptr);
        using CryptoPP__ASN1ansi_x9_62_curves3_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1ansi_x9_62_curves3_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1ansi_x9_62_curves3_ptr);
        using CryptoPP__ASN1ansi_x9_62_curves_prime4_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1ansi_x9_62_curves_prime4_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1ansi_x9_62_curves_prime4_ptr);
        using CryptoPP__ASN1certicom5_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1certicom5_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1certicom5_ptr);
        using CryptoPP__ASN1certicom_ellipticCurve6_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1certicom_ellipticCurve6_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1certicom_ellipticCurve6_ptr);
        using CryptoPP__ASN1characteristic_two_field7_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1characteristic_two_field7_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1characteristic_two_field7_ptr);
        using CryptoPP__ASN1id_characteristic_two_basis8_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1id_characteristic_two_basis8_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1id_characteristic_two_basis8_ptr);
        using CryptoPP__ASN1id_dsa9_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1id_dsa9_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1id_dsa9_ptr);
        using CryptoPP__ASN1id_ecPublicKey10_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1id_ecPublicKey10_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1id_ecPublicKey10_ptr);
        using CryptoPP__ASN1id_fieldType11_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1id_fieldType11_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1id_fieldType11_ptr);
        using CryptoPP__ASN1id_publicKeyType12_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1id_publicKeyType12_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1id_publicKeyType12_ptr);
        using CryptoPP__ASN1identified_organization13_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1identified_organization13_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1identified_organization13_ptr);
        using CryptoPP__ASN1iso14_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1iso14_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1iso14_ptr);
        using CryptoPP__ASN1iso_us15_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1iso_us15_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1iso_us15_ptr);
        using CryptoPP__ASN1member_body16_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1member_body16_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1member_body16_ptr);
        using CryptoPP__ASN1ppBasis17_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1ppBasis17_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1ppBasis17_ptr);
        using CryptoPP__ASN1prime_field18_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1prime_field18_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1prime_field18_ptr);
        using CryptoPP__ASN1secp112r119_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1secp112r119_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1secp112r119_ptr);
        using CryptoPP__ASN1secp112r220_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1secp112r220_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1secp112r220_ptr);
        using CryptoPP__ASN1secp128r121_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1secp128r121_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1secp128r121_ptr);
        using CryptoPP__ASN1secp128r222_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1secp128r222_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1secp128r222_ptr);
        using CryptoPP__ASN1secp160k123_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1secp160k123_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1secp160k123_ptr);
        using CryptoPP__ASN1secp160r124_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1secp160r124_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1secp160r124_ptr);
        using CryptoPP__ASN1secp160r225_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1secp160r225_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1secp160r225_ptr);
        using CryptoPP__ASN1secp192k126_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1secp192k126_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1secp192k126_ptr);
        using CryptoPP__ASN1secp192r127_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1secp192r127_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1secp192r127_ptr);
        using CryptoPP__ASN1secp224k128_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1secp224k128_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1secp224k128_ptr);
        using CryptoPP__ASN1secp224r129_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1secp224r129_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1secp224r129_ptr);
        using CryptoPP__ASN1secp256k130_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1secp256k130_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1secp256k130_ptr);
        using CryptoPP__ASN1secp256r131_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1secp256r131_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1secp256r131_ptr);
        using CryptoPP__ASN1secp384r132_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1secp384r132_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1secp384r132_ptr);
        using CryptoPP__ASN1secp521r133_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1secp521r133_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1secp521r133_ptr);
        using CryptoPP__ASN1sect113r134_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1sect113r134_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1sect113r134_ptr);
        using CryptoPP__ASN1sect113r235_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1sect113r235_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1sect113r235_ptr);
        using CryptoPP__ASN1sect131r136_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1sect131r136_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1sect131r136_ptr);
        using CryptoPP__ASN1sect131r237_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1sect131r237_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1sect131r237_ptr);
        using CryptoPP__ASN1sect163k138_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1sect163k138_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1sect163k138_ptr);
        using CryptoPP__ASN1sect163r139_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1sect163r139_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1sect163r139_ptr);
        using CryptoPP__ASN1sect163r240_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1sect163r240_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1sect163r240_ptr);
        using CryptoPP__ASN1sect193r141_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1sect193r141_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1sect193r141_ptr);
        using CryptoPP__ASN1sect193r242_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1sect193r242_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1sect193r242_ptr);
        using CryptoPP__ASN1sect233k143_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1sect233k143_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1sect233k143_ptr);
        using CryptoPP__ASN1sect233r144_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1sect233r144_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1sect233r144_ptr);
        using CryptoPP__ASN1sect239k145_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1sect239k145_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1sect239k145_ptr);
        using CryptoPP__ASN1sect283k146_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1sect283k146_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1sect283k146_ptr);
        using CryptoPP__ASN1sect283r147_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1sect283r147_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1sect283r147_ptr);
        using CryptoPP__ASN1sect409k148_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1sect409k148_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1sect409k148_ptr);
        using CryptoPP__ASN1sect409r149_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1sect409r149_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1sect409r149_ptr);
        using CryptoPP__ASN1sect571k150_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1sect571k150_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1sect571k150_ptr);
        using CryptoPP__ASN1sect571r151_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1sect571r151_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1sect571r151_ptr);
        using CryptoPP__ASN1tpBasis52_ptr = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short);
        using CryptoPP__ASN1tpBasis52_clbk = struct CryptoPP::OID* (WINAPIV*)(struct CryptoPP::ASN1*, short, CryptoPP__ASN1tpBasis52_ptr);
        
    }; // end namespace info
END_ATF_NAMESPACE
*/