// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CPlayer.hpp"
#include "std__vector.hpp"
#include "CRaceBuffInfoByHolyQuestfGroup.hpp"

START_ATF_NAMESPACE
    struct CRaceBuffInfoByHolyQuestList
    {
        std::vector<CRaceBuffInfoByHolyQuestfGroup *> m_vecInfo;
    public:
        bool Apply(unsigned int uiContinueCnt, int iResultType, struct CPlayer* pkDest)
        {
            using org_ptr = bool (WINAPIV*)(struct CRaceBuffInfoByHolyQuestList*, unsigned int, int, struct CPlayer*);
            return (org_ptr(0x1403b52b0L))(this, uiContinueCnt, iResultType, pkDest);
        };
        CRaceBuffInfoByHolyQuestList()
        {
            using org_ptr = void (WINAPIV*)(struct CRaceBuffInfoByHolyQuestList*);
            (org_ptr(0x1403b7c00L))(this);
        };
        void ctor_CRaceBuffInfoByHolyQuestList()
        {
            using org_ptr = void (WINAPIV*)(struct CRaceBuffInfoByHolyQuestList*);
            (org_ptr(0x1403b7c00L))(this);
        };
        bool CreateComplete(unsigned int uiContinueCnt, int iResultType, struct CPlayer* pkDest)
        {
            using org_ptr = bool (WINAPIV*)(struct CRaceBuffInfoByHolyQuestList*, unsigned int, int, struct CPlayer*);
            return (org_ptr(0x1403b5230L))(this, uiContinueCnt, iResultType, pkDest);
        };
        unsigned int GetMaxThCnt()
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CRaceBuffInfoByHolyQuestList*);
            return (org_ptr(0x1403b7d10L))(this);
        };
        bool Init()
        {
            using org_ptr = bool (WINAPIV*)(struct CRaceBuffInfoByHolyQuestList*);
            return (org_ptr(0x1403b5040L))(this);
        };
        bool Release(unsigned int uiContinueCnt, int iResultType, struct CPlayer* pkDest)
        {
            using org_ptr = bool (WINAPIV*)(struct CRaceBuffInfoByHolyQuestList*, unsigned int, int, struct CPlayer*);
            return (org_ptr(0x1403b5330L))(this, uiContinueCnt, iResultType, pkDest);
        };
        ~CRaceBuffInfoByHolyQuestList()
        {
            using org_ptr = void (WINAPIV*)(struct CRaceBuffInfoByHolyQuestList*);
            (org_ptr(0x1403b4db0L))(this);
        };
        void dtor_CRaceBuffInfoByHolyQuestList()
        {
            using org_ptr = void (WINAPIV*)(struct CRaceBuffInfoByHolyQuestList*);
            (org_ptr(0x1403b4db0L))(this);
        };
    };
END_ATF_NAMESPACE
