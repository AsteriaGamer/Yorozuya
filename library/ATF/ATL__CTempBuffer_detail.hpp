// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "ATL__CTempBuffer_info.hpp"


START_ATF_NAMESPACE
    namespace ATL
    {
        namespace detail
        {
            static info::ATL__CTempBufferAllocate2_ptr ATL__CTempBufferAllocate2_next(nullptr);
            static info::ATL__CTempBufferAllocate2_clbk ATL__CTempBufferAllocate2_user(nullptr);
            static info::ATL__CTempBufferAllocateBytes4_ptr ATL__CTempBufferAllocateBytes4_next(nullptr);
            static info::ATL__CTempBufferAllocateBytes4_clbk ATL__CTempBufferAllocateBytes4_user(nullptr);
            static info::ATL__CTempBufferAllocateHeap6_ptr ATL__CTempBufferAllocateHeap6_next(nullptr);
            static info::ATL__CTempBufferAllocateHeap6_clbk ATL__CTempBufferAllocateHeap6_user(nullptr);
            static info::ATL__CTempBufferctor_CTempBuffer8_ptr ATL__CTempBufferctor_CTempBuffer8_next(nullptr);
            static info::ATL__CTempBufferctor_CTempBuffer8_clbk ATL__CTempBufferctor_CTempBuffer8_user(nullptr);
            static info::ATL__CTempBufferFreeHeap10_ptr ATL__CTempBufferFreeHeap10_next(nullptr);
            static info::ATL__CTempBufferFreeHeap10_clbk ATL__CTempBufferFreeHeap10_user(nullptr);
            static info::ATL__CTempBufferdtor_CTempBuffer14_ptr ATL__CTempBufferdtor_CTempBuffer14_next(nullptr);
            static info::ATL__CTempBufferdtor_CTempBuffer14_clbk ATL__CTempBufferdtor_CTempBuffer14_user(nullptr);
            
            static char* ATL__CTempBufferAllocate2_wrapper(struct ATL::CTempBuffer<char,128,ATL::CCRTAllocator>* _this, uint64_t nElements)
            {
               return ATL__CTempBufferAllocate2_user(_this, nElements);
            };
            static char* ATL__CTempBufferAllocateBytes4_wrapper(struct ATL::CTempBuffer<char,128,ATL::CCRTAllocator>* _this, uint64_t nBytes)
            {
               return ATL__CTempBufferAllocateBytes4_user(_this, nBytes);
            };
            static void ATL__CTempBufferAllocateHeap6_wrapper(struct ATL::CTempBuffer<char,128,ATL::CCRTAllocator>* _this, uint64_t nBytes)
            {
               ATL__CTempBufferAllocateHeap6_user(_this, nBytes);
            };
            static void ATL__CTempBufferctor_CTempBuffer8_wrapper(struct ATL::CTempBuffer<char,128,ATL::CCRTAllocator>* _this)
            {
               ATL__CTempBufferctor_CTempBuffer8_user(_this);
            };
            static void ATL__CTempBufferFreeHeap10_wrapper(struct ATL::CTempBuffer<char,128,ATL::CCRTAllocator>* _this)
            {
               ATL__CTempBufferFreeHeap10_user(_this);
            };
            static void ATL__CTempBufferdtor_CTempBuffer14_wrapper(struct ATL::CTempBuffer<char,128,ATL::CCRTAllocator>* _this)
            {
               ATL__CTempBufferdtor_CTempBuffer14_user(_this);
            };
            
            static hook_record ATL::CTempBuffer<char,128,ATL::CCRTAllocator>_functions[] = {
            {   (LPVOID)0x140026e90L,
                (LPVOID *)&ATL__CTempBufferAllocate2_user,
                (LPVOID *)&ATL__CTempBufferAllocate2_next,
                (LPVOID)cast_pointer_function(ATL__CTempBufferAllocate2_wrapper),
                (LPVOID)cast_pointer_function((char*(ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::*)(uint64_t))&ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::Allocate) },
            {   (LPVOID)0x140026ff0L,
                (LPVOID *)&ATL__CTempBufferAllocateBytes4_user,
                (LPVOID *)&ATL__CTempBufferAllocateBytes4_next,
                (LPVOID)cast_pointer_function(ATL__CTempBufferAllocateBytes4_wrapper),
                (LPVOID)cast_pointer_function((char*(ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::*)(uint64_t))&ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::AllocateBytes) },
            {   (LPVOID)0x1400273f0L,
                (LPVOID *)&ATL__CTempBufferAllocateHeap6_user,
                (LPVOID *)&ATL__CTempBufferAllocateHeap6_next,
                (LPVOID)cast_pointer_function(ATL__CTempBufferAllocateHeap6_wrapper),
                (LPVOID)cast_pointer_function((void(ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::*)(uint64_t))&ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::AllocateHeap) },
            {   (LPVOID)0x140026df0L,
                (LPVOID *)&ATL__CTempBufferctor_CTempBuffer8_user,
                (LPVOID *)&ATL__CTempBufferctor_CTempBuffer8_next,
                (LPVOID)cast_pointer_function(ATL__CTempBufferctor_CTempBuffer8_wrapper),
                (LPVOID)cast_pointer_function((void(ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::*)())&ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::ctor_CTempBuffer) },
            {   (LPVOID)0x1400270c0L,
                (LPVOID *)&ATL__CTempBufferFreeHeap10_user,
                (LPVOID *)&ATL__CTempBufferFreeHeap10_next,
                (LPVOID)cast_pointer_function(ATL__CTempBufferFreeHeap10_wrapper),
                (LPVOID)cast_pointer_function((void(ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::*)())&ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::FreeHeap) },
            {   (LPVOID)0x140026e10L,
                (LPVOID *)&ATL__CTempBufferdtor_CTempBuffer14_user,
                (LPVOID *)&ATL__CTempBufferdtor_CTempBuffer14_next,
                (LPVOID)cast_pointer_function(ATL__CTempBufferdtor_CTempBuffer14_wrapper),
                (LPVOID)cast_pointer_function((void(ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::*)())&ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::dtor_CTempBuffer) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace ATL
END_ATF_NAMESPACE
