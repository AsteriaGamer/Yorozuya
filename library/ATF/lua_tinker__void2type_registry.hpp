// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "./common/ATFCore.hpp"
#include "lua_tinker__void2type_detail.hpp"


START_ATF_NAMESPACE
    namespace registry
    {
        class lua_tinker::void2type<lua_tinker::var_base *>_registry : public IRegistry
        {
            public: virtual void registry() {
                auto& hook_core = CATFCore::get_instance();
                for (auto& r : lua_tinker::detaillua_tinker::void2type<lua_tinker::var_base *>_functions)
                    hook_core.reg_wrapper(r.pBind, r);
            }
        };
        
    }; // end namespace registry
END_ATF_NAMESPACE
#include "./common/ATFCore.hpp"
#include "lua_tinker__void2type_detail.hpp"


START_ATF_NAMESPACE
    namespace registry
    {
        class lua_tinker::void2type<CLuaSignalReActor *>_registry : public IRegistry
        {
            public: virtual void registry() {
                auto& hook_core = CATFCore::get_instance();
                for (auto& r : lua_tinker::detaillua_tinker::void2type<CLuaSignalReActor *>_functions)
                    hook_core.reg_wrapper(r.pBind, r);
            }
        };
        
    }; // end namespace registry
END_ATF_NAMESPACE
#include "./common/ATFCore.hpp"
#include "lua_tinker__void2type_detail.hpp"


START_ATF_NAMESPACE
    namespace registry
    {
        class lua_tinker::void2type<lua_tinker::user *>_registry : public IRegistry
        {
            public: virtual void registry() {
                auto& hook_core = CATFCore::get_instance();
                for (auto& r : lua_tinker::detaillua_tinker::void2type<lua_tinker::user *>_functions)
                    hook_core.reg_wrapper(r.pBind, r);
            }
        };
        
    }; // end namespace registry
END_ATF_NAMESPACE
#include "./common/ATFCore.hpp"
#include "lua_tinker__void2type_detail.hpp"


START_ATF_NAMESPACE
    namespace registry
    {
        class lua_tinker::void2type<CLuaScript *>_registry : public IRegistry
        {
            public: virtual void registry() {
                auto& hook_core = CATFCore::get_instance();
                for (auto& r : lua_tinker::detaillua_tinker::void2type<CLuaScript *>_functions)
                    hook_core.reg_wrapper(r.pBind, r);
            }
        };
        
    }; // end namespace registry
END_ATF_NAMESPACE
#include "./common/ATFCore.hpp"
#include "lua_tinker__void2type_detail.hpp"


START_ATF_NAMESPACE
    namespace registry
    {
        class lua_tinker::void2type<LuaParam3 *>_registry : public IRegistry
        {
            public: virtual void registry() {
                auto& hook_core = CATFCore::get_instance();
                for (auto& r : lua_tinker::detaillua_tinker::void2type<LuaParam3 *>_functions)
                    hook_core.reg_wrapper(r.pBind, r);
            }
        };
        
    }; // end namespace registry
END_ATF_NAMESPACE
#include "./common/ATFCore.hpp"
#include "lua_tinker__void2type_detail.hpp"


START_ATF_NAMESPACE
    namespace registry
    {
        class lua_tinker::void2type<CLuaEventMgr *>_registry : public IRegistry
        {
            public: virtual void registry() {
                auto& hook_core = CATFCore::get_instance();
                for (auto& r : lua_tinker::detaillua_tinker::void2type<CLuaEventMgr *>_functions)
                    hook_core.reg_wrapper(r.pBind, r);
            }
        };
        
    }; // end namespace registry
END_ATF_NAMESPACE
#include "./common/ATFCore.hpp"
#include "lua_tinker__void2type_detail.hpp"


START_ATF_NAMESPACE
    namespace registry
    {
        class lua_tinker::void2type<LuaParam3>_registry : public IRegistry
        {
            public: virtual void registry() {
                auto& hook_core = CATFCore::get_instance();
                for (auto& r : lua_tinker::detaillua_tinker::void2type<LuaParam3>_functions)
                    hook_core.reg_wrapper(r.pBind, r);
            }
        };
        
    }; // end namespace registry
END_ATF_NAMESPACE
#include "./common/ATFCore.hpp"
#include "lua_tinker__void2type_detail.hpp"


START_ATF_NAMESPACE
    namespace registry
    {
        class lua_tinker::void2type<CMonster *>_registry : public IRegistry
        {
            public: virtual void registry() {
                auto& hook_core = CATFCore::get_instance();
                for (auto& r : lua_tinker::detaillua_tinker::void2type<CMonster *>_functions)
                    hook_core.reg_wrapper(r.pBind, r);
            }
        };
        
    }; // end namespace registry
END_ATF_NAMESPACE
#include "./common/ATFCore.hpp"
#include "lua_tinker__void2type_detail.hpp"


START_ATF_NAMESPACE
    namespace registry
    {
        class lua_tinker::void2type<CLuaEventNode *>_registry : public IRegistry
        {
            public: virtual void registry() {
                auto& hook_core = CATFCore::get_instance();
                for (auto& r : lua_tinker::detaillua_tinker::void2type<CLuaEventNode *>_functions)
                    hook_core.reg_wrapper(r.pBind, r);
            }
        };
        
    }; // end namespace registry
END_ATF_NAMESPACE
