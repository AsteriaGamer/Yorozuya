// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CMapData.hpp"
#include "CPoint.hpp"
#include "CRect.hpp"
#include "CSize.hpp"
#include "CSurface.hpp"
#include "HPEN__.hpp"
#include "_map_rate.hpp"


START_ATF_NAMESPACE
    struct CMapExtend
    {
        CPoint m_ptStartMap;
        CPoint m_ptEndMap;
        CPoint m_ptCenter;
        bool m_bExtendMode;
        CRect m_rcExtend;
        CPoint m_ptStartScreen;
        CPoint m_ptEndScreen;
        CPoint m_ptMoveScreen;
        CSize m_sizeExtend;
        HPEN__ *m_hPen;
        CSurface **m_pSF;
        _map_rate m_Rate;
        int m_bSetArea;
        int m_bMove;
    public:
        CMapExtend(struct CSurface** pSF)
        {
            using org_ptr = void (WINAPIV*)(struct CMapExtend*, struct CSurface**);
            (org_ptr(0x1401a1500L))(this, pSF);
        };
        void ctor_CMapExtend(struct CSurface** pSF)
        {
            using org_ptr = void (WINAPIV*)(struct CMapExtend*, struct CSurface**);
            (org_ptr(0x1401a1500L))(this, pSF);
        };
        CMapExtend()
        {
            using org_ptr = void (WINAPIV*)(struct CMapExtend*);
            (org_ptr(0x1401a1410L))(this);
        };
        void ctor_CMapExtend()
        {
            using org_ptr = void (WINAPIV*)(struct CMapExtend*);
            (org_ptr(0x1401a1410L))(this);
        };
        void ConvertToMap(struct CSize* szMap)
        {
            using org_ptr = void (WINAPIV*)(struct CMapExtend*, struct CSize*);
            (org_ptr(0x1401a1da0L))(this, szMap);
        };
        void DrawRect()
        {
            using org_ptr = void (WINAPIV*)(struct CMapExtend*);
            (org_ptr(0x1401a1c40L))(this);
        };
        int EndScreenPoint(struct CSize* szMap)
        {
            using org_ptr = int (WINAPIV*)(struct CMapExtend*, struct CSize*);
            return (org_ptr(0x1401a1940L))(this, szMap);
        };
        struct CSize* GetExtendSize()
        {
            using org_ptr = struct CSize* (WINAPIV*)(struct CMapExtend*);
            return (org_ptr(0x14002d0b0L))(this);
        };
        void Init(struct CSurface** pSF)
        {
            using org_ptr = void (WINAPIV*)(struct CMapExtend*, struct CSurface**);
            (org_ptr(0x1401a1640L))(this, pSF);
        };
        void MoveScreenPoint(struct CPoint* pt)
        {
            using org_ptr = void (WINAPIV*)(struct CMapExtend*, struct CPoint*);
            (org_ptr(0x1401a1730L))(this, pt);
        };
        void ScrollMapDown(int nMapY, int nInterval)
        {
            using org_ptr = void (WINAPIV*)(struct CMapExtend*, int, int);
            (org_ptr(0x1401a2000L))(this, nMapY, nInterval);
        };
        void ScrollMapLeft(int nInterval)
        {
            using org_ptr = void (WINAPIV*)(struct CMapExtend*, int);
            (org_ptr(0x1401a2120L))(this, nInterval);
        };
        void ScrollMapRight(int nMapX, int nInterval)
        {
            using org_ptr = void (WINAPIV*)(struct CMapExtend*, int, int);
            (org_ptr(0x1401a2220L))(this, nMapX, nInterval);
        };
        void ScrollMapUp(int nInterval)
        {
            using org_ptr = void (WINAPIV*)(struct CMapExtend*, int);
            (org_ptr(0x1401a1ef0L))(this, nInterval);
        };
        void StartScreenPoint(struct CPoint* pt, struct CMapData* pMap, struct CRect* rcWnd)
        {
            using org_ptr = void (WINAPIV*)(struct CMapExtend*, struct CPoint*, struct CMapData*, struct CRect*);
            (org_ptr(0x1401a1670L))(this, pt, pMap, rcWnd);
        };
        ~CMapExtend()
        {
            using org_ptr = void (WINAPIV*)(struct CMapExtend*);
            (org_ptr(0x1401a1600L))(this);
        };
        void dtor_CMapExtend()
        {
            using org_ptr = void (WINAPIV*)(struct CMapExtend*);
            (org_ptr(0x1401a1600L))(this);
        };
    };
END_ATF_NAMESPACE
