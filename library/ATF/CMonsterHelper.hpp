// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CCharacter.hpp"
#include "CGameObject.hpp"
#include "CMonster.hpp"
#include "CPlayer.hpp"
#include "_NEAR_DATA.hpp"


START_ATF_NAMESPACE
    struct  CMonsterHelper
    {
    public:
        static int CheckPreAttackRangeTargetAbleCharacter(struct CMonster* pMon, struct CGameObject* pTarget)
        {
            using org_ptr = int (WINAPIV*)(struct CMonster*, struct CGameObject*);
            return (org_ptr(0x140158430L))(pMon, pTarget);
        };
        static float GetAngle(float* mon, float* plr)
        {
            using org_ptr = float (WINAPIV*)(float*, float*);
            return (org_ptr(0x1401597a0L))(mon, plr);
        };
        static void GetDirection(float** cur, float** tar, float** out, float deg)
        {
            using org_ptr = void (WINAPIV*)(float**, float**, float**, float);
            (org_ptr(0x1401598e0L))(cur, tar, out, deg);
        };
        static void HierarcyHelpCast(struct CMonster* pMon)
        {
            using org_ptr = void (WINAPIV*)(struct CMonster*);
            (org_ptr(0x14015a480L))(pMon);
        };
        static int IsInSector(float* chkpos, float* src, float* dest, float angle, float radius, float* pfDist)
        {
            using org_ptr = int (WINAPIV*)(float*, float*, float*, float, float, float*);
            return (org_ptr(0x140158160L))(chkpos, src, dest, angle, radius, pfDist);
        };
        static unsigned int SearchNearMonster(struct CMonster* pMon, struct _NEAR_DATA* NearChar, unsigned int dwArSize, int bTargetIgnore)
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CMonster*, struct _NEAR_DATA*, unsigned int, int);
            return (org_ptr(0x140158de0L))(pMon, NearChar, dwArSize, bTargetIgnore);
        };
        static struct CMonster* SearchNearMonsterByDistance(struct CMonster* pMon, unsigned int dwDist)
        {
            using org_ptr = struct CMonster* (WINAPIV*)(struct CMonster*, unsigned int);
            return (org_ptr(0x140159540L))(pMon, dwDist);
        };
        static struct CPlayer* SearchNearPlayer(struct CMonster* pMon, int nType)
        {
            using org_ptr = struct CPlayer* (WINAPIV*)(struct CMonster*, int);
            return (org_ptr(0x140158540L))(pMon, nType);
        };
        static int SearchPatrolMovePos(struct CMonster* mon, float** NewTar)
        {
            using org_ptr = int (WINAPIV*)(struct CMonster*, float**);
            return (org_ptr(0x140159f20L))(mon, NewTar);
        };
        static int SearchTargetMovePos_MovingTarget(struct CMonster* pMon, struct CCharacter* pTargetCharacter, float** tarPos)
        {
            using org_ptr = int (WINAPIV*)(struct CMonster*, struct CCharacter*, float**);
            return (org_ptr(0x140159e50L))(pMon, pTargetCharacter, tarPos);
        };
        static int SearchTargetMovePos_StopTarget(struct CMonster* pMon, struct CCharacter* pTargetCharacter, float** tarPos)
        {
            using org_ptr = int (WINAPIV*)(struct CMonster*, struct CCharacter*, float**);
            return (org_ptr(0x1401599b0L))(pMon, pTargetCharacter, tarPos);
        };
        static void TransPort(struct CMonster* mon, float* tarPos)
        {
            using org_ptr = void (WINAPIV*)(struct CMonster*, float*);
            (org_ptr(0x14015a310L))(mon, tarPos);
        };
    };
END_ATF_NAMESPACE
