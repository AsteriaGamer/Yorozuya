// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CFrameRate.hpp"
#include "CLogFile.hpp"
#include "CNetIndexList.hpp"
#include "CProcessThreadVtbl.hpp"
#include "_SYN_DATA.hpp"
#include "_SYN_HEADER.hpp"
#include "_THREAD_CONFIG.hpp"


START_ATF_NAMESPACE
    struct CProcessThread
    {
        CProcessThreadVtbl *vfptr;
        _SYN_DATA *m_pSynData;
        CNetIndexList m_listData;
        CNetIndexList m_listDataComplete;
        CNetIndexList m_listDataEmpty;
        unsigned int m_dwSynDataNum;
        unsigned int m_dwSynDataSize;
        unsigned int m_dwWorkCount;
        unsigned int m_dwLoopCount;
        bool m_bThread;
        CLogFile m_logSystem;
        CFrameRate m_FrameRate;
        _THREAD_CONFIG m_Config;
    public:
        CProcessThread()
        {
            using org_ptr = void (WINAPIV*)(struct CProcessThread*);
            (org_ptr(0x14043dbb0L))(this);
        };
        void ctor_CProcessThread()
        {
            using org_ptr = void (WINAPIV*)(struct CProcessThread*);
            (org_ptr(0x14043dbb0L))(this);
        };
        void CompleteOnLoop()
        {
            using org_ptr = void (WINAPIV*)(struct CProcessThread*);
            (org_ptr(0x14043e6e0L))(this);
        };
        void CompleteProcess(struct _SYN_DATA* pData)
        {
            using org_ptr = void (WINAPIV*)(struct CProcessThread*, struct _SYN_DATA*);
            (org_ptr(0x14043eb60L))(this, pData);
        };
        void CrashThread()
        {
            using org_ptr = void (WINAPIV*)(struct CProcessThread*);
            (org_ptr(0x14043eb30L))(this);
        };
        void ProcessOnThread()
        {
            using org_ptr = void (WINAPIV*)(struct CProcessThread*);
            (org_ptr(0x14043e5a0L))(this);
        };
        struct _SYN_DATA* PushData(struct _SYN_HEADER* pHeader, char* pQryData, int nQrySize)
        {
            using org_ptr = struct _SYN_DATA* (WINAPIV*)(struct CProcessThread*, struct _SYN_HEADER*, char*, int);
            return (org_ptr(0x14043e2e0L))(this, pHeader, pQryData, nQrySize);
        };
        bool RegisterSyncData(int nCaseCode, unsigned int dwDataSize)
        {
            using org_ptr = bool (WINAPIV*)(struct CProcessThread*, int, unsigned int);
            return (org_ptr(0x14043dfb0L))(this, nCaseCode, dwDataSize);
        };
        void RunOnLoop()
        {
            using org_ptr = void (WINAPIV*)(struct CProcessThread*);
            (org_ptr(0x14043e6a0L))(this);
        };
        void RunOnThread()
        {
            using org_ptr = void (WINAPIV*)(struct CProcessThread*);
            (org_ptr(0x14043e510L))(this);
        };
        bool StartThread(struct _THREAD_CONFIG* pConfig, unsigned int dwSynDataNum)
        {
            using org_ptr = bool (WINAPIV*)(struct CProcessThread*, struct _THREAD_CONFIG*, unsigned int);
            return (org_ptr(0x14043e020L))(this, pConfig, dwSynDataNum);
        };
        static void Thread(void* pv)
        {
            using org_ptr = void (WINAPIV*)(void*);
            (org_ptr(0x14043e480L))(pv);
        };

        char WorkProcess(struct _SYN_DATA* pData)
        {
            using org_ptr = char (WINAPIV*)(struct CProcessThread*, struct _SYN_DATA*);
            return (org_ptr(0x14043eb40L))(this, pData);
        };
        ~CProcessThread()
        {
            using org_ptr = void (WINAPIV*)(struct CProcessThread*);
            (org_ptr(0x14043ddb0L))(this);
        };
        void dtor_CProcessThread()
        {
            using org_ptr = void (WINAPIV*)(struct CProcessThread*);
            (org_ptr(0x14043ddb0L))(this);
        };
    };
END_ATF_NAMESPACE
