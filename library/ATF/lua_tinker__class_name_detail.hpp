// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "lua_tinker__class_name_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            static info::lua_tinker__class_namector_name2_ptr lua_tinker__class_namector_name2_next(nullptr);
            static info::lua_tinker__class_namector_name2_clbk lua_tinker__class_namector_name2_user(nullptr);
            
            static char* lua_tinker__class_namector_name2_wrapper(char* name)
            {
               return lua_tinker__class_namector_name2_user(name);
            };
            
            static hook_record class_name<CLuaEventNode>_functions[] = {
            {   (LPVOID)0x140404c40L,
                (LPVOID *)&lua_tinker__class_namector_name2_user,
                (LPVOID *)&lua_tinker__class_namector_name2_next,
                (LPVOID)cast_pointer_function(lua_tinker__class_namector_name2_wrapper),
                (LPVOID)cast_pointer_function((char*(lua_tinker::class_name<CLuaEventNode>::*)(char*))&lua_tinker::class_name<CLuaEventNode>::ctor_name) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__class_name_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            static info::lua_tinker__class_namector_name2_ptr lua_tinker__class_namector_name2_next(nullptr);
            static info::lua_tinker__class_namector_name2_clbk lua_tinker__class_namector_name2_user(nullptr);
            
            static char* lua_tinker__class_namector_name2_wrapper(char* name)
            {
               return lua_tinker__class_namector_name2_user(name);
            };
            
            static hook_record class_name<LuaParam3>_functions[] = {
            {   (LPVOID)0x140407ff0L,
                (LPVOID *)&lua_tinker__class_namector_name2_user,
                (LPVOID *)&lua_tinker__class_namector_name2_next,
                (LPVOID)cast_pointer_function(lua_tinker__class_namector_name2_wrapper),
                (LPVOID)cast_pointer_function((char*(lua_tinker::class_name<LuaParam3>::*)(char*))&lua_tinker::class_name<LuaParam3>::ctor_name) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__class_name_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            static info::lua_tinker__class_namector_name2_ptr lua_tinker__class_namector_name2_next(nullptr);
            static info::lua_tinker__class_namector_name2_clbk lua_tinker__class_namector_name2_user(nullptr);
            
            static char* lua_tinker__class_namector_name2_wrapper(char* name)
            {
               return lua_tinker__class_namector_name2_user(name);
            };
            
            static hook_record class_name<CLuaEventMgr>_functions[] = {
            {   (LPVOID)0x1404081c0L,
                (LPVOID *)&lua_tinker__class_namector_name2_user,
                (LPVOID *)&lua_tinker__class_namector_name2_next,
                (LPVOID)cast_pointer_function(lua_tinker__class_namector_name2_wrapper),
                (LPVOID)cast_pointer_function((char*(lua_tinker::class_name<CLuaEventMgr>::*)(char*))&lua_tinker::class_name<CLuaEventMgr>::ctor_name) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__class_name_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            static info::lua_tinker__class_namector_name2_ptr lua_tinker__class_namector_name2_next(nullptr);
            static info::lua_tinker__class_namector_name2_clbk lua_tinker__class_namector_name2_user(nullptr);
            
            static char* lua_tinker__class_namector_name2_wrapper(char* name)
            {
               return lua_tinker__class_namector_name2_user(name);
            };
            
            static hook_record class_name<CMonster>_functions[] = {
            {   (LPVOID)0x1404082a0L,
                (LPVOID *)&lua_tinker__class_namector_name2_user,
                (LPVOID *)&lua_tinker__class_namector_name2_next,
                (LPVOID)cast_pointer_function(lua_tinker__class_namector_name2_wrapper),
                (LPVOID)cast_pointer_function((char*(lua_tinker::class_name<CMonster>::*)(char*))&lua_tinker::class_name<CMonster>::ctor_name) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__class_name_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            static info::lua_tinker__class_namector_name2_ptr lua_tinker__class_namector_name2_next(nullptr);
            static info::lua_tinker__class_namector_name2_clbk lua_tinker__class_namector_name2_user(nullptr);
            
            static char* lua_tinker__class_namector_name2_wrapper(char* name)
            {
               return lua_tinker__class_namector_name2_user(name);
            };
            
            static hook_record class_name<CLuaScript>_functions[] = {
            {   (LPVOID)0x140403160L,
                (LPVOID *)&lua_tinker__class_namector_name2_user,
                (LPVOID *)&lua_tinker__class_namector_name2_next,
                (LPVOID)cast_pointer_function(lua_tinker__class_namector_name2_wrapper),
                (LPVOID)cast_pointer_function((char*(lua_tinker::class_name<CLuaScript>::*)(char*))&lua_tinker::class_name<CLuaScript>::ctor_name) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__class_name_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            static info::lua_tinker__class_namector_name2_ptr lua_tinker__class_namector_name2_next(nullptr);
            static info::lua_tinker__class_namector_name2_clbk lua_tinker__class_namector_name2_user(nullptr);
            
            static char* lua_tinker__class_namector_name2_wrapper(char* name)
            {
               return lua_tinker__class_namector_name2_user(name);
            };
            
            static hook_record class_name<CLuaSignalReActor>_functions[] = {
            {   (LPVOID)0x140408230L,
                (LPVOID *)&lua_tinker__class_namector_name2_user,
                (LPVOID *)&lua_tinker__class_namector_name2_next,
                (LPVOID)cast_pointer_function(lua_tinker__class_namector_name2_wrapper),
                (LPVOID)cast_pointer_function((char*(lua_tinker::class_name<CLuaSignalReActor>::*)(char*))&lua_tinker::class_name<CLuaSignalReActor>::ctor_name) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
