// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "ATL__CTimeSpan.hpp"
#include "_FILETIME.hpp"
#include "_SYSTEMTIME.hpp"
#include "tm.hpp"


START_ATF_NAMESPACE
    namespace ATL
    {
        struct CTime
        {
            __int64 m_time;
        public:
            CTime(struct _FILETIME* fileTime, int nDST)
            {
                using org_ptr = void (WINAPIV*)(struct CTime*, struct _FILETIME*, int);
                (org_ptr(0x140672cf0L))(this, fileTime, nDST);
            };
            void ctor_CTime(struct _FILETIME* fileTime, int nDST)
            {
                using org_ptr = void (WINAPIV*)(struct CTime*, struct _FILETIME*, int);
                (org_ptr(0x140672cf0L))(this, fileTime, nDST);
            };
            CTime(struct _SYSTEMTIME* sysTime, int nDST)
            {
                using org_ptr = void (WINAPIV*)(struct CTime*, struct _SYSTEMTIME*, int);
                (org_ptr(0x140672c10L))(this, sysTime, nDST);
            };
            void ctor_CTime(struct _SYSTEMTIME* sysTime, int nDST)
            {
                using org_ptr = void (WINAPIV*)(struct CTime*, struct _SYSTEMTIME*, int);
                (org_ptr(0x140672c10L))(this, sysTime, nDST);
            };
            CTime(int64_t time)
            {
                using org_ptr = void (WINAPIV*)(struct CTime*, int64_t);
                (org_ptr(0x1406726e0L))(this, time);
            };
            void ctor_CTime(int64_t time)
            {
                using org_ptr = void (WINAPIV*)(struct CTime*, int64_t);
                (org_ptr(0x1406726e0L))(this, time);
            };
            CTime(int nYear, int nMonth, int nDay, int nHour, int nMin, int nSec, int nDST)
            {
                using org_ptr = void (WINAPIV*)(struct CTime*, int, int, int, int, int, int, int);
                (org_ptr(0x140672710L))(this, nYear, nMonth, nDay, nHour, nMin, nSec, nDST);
            };
            void ctor_CTime(int nYear, int nMonth, int nDay, int nHour, int nMin, int nSec, int nDST)
            {
                using org_ptr = void (WINAPIV*)(struct CTime*, int, int, int, int, int, int, int);
                (org_ptr(0x140672710L))(this, nYear, nMonth, nDay, nHour, nMin, nSec, nDST);
            };
            CTime(uint16_t wDosDate, uint16_t wDosTime, int nDST)
            {
                using org_ptr = void (WINAPIV*)(struct CTime*, uint16_t, uint16_t, int);
                (org_ptr(0x140672b00L))(this, wDosDate, wDosTime, nDST);
            };
            void ctor_CTime(uint16_t wDosDate, uint16_t wDosTime, int nDST)
            {
                using org_ptr = void (WINAPIV*)(struct CTime*, uint16_t, uint16_t, int);
                (org_ptr(0x140672b00L))(this, wDosDate, wDosTime, nDST);
            };
            CTime()
            {
                using org_ptr = void (WINAPIV*)(struct CTime*);
                (org_ptr(0x1406726c0L))(this);
            };
            void ctor_CTime()
            {
                using org_ptr = void (WINAPIV*)(struct CTime*);
                (org_ptr(0x1406726c0L))(this);
            };
            bool GetAsSystemTime(struct _SYSTEMTIME* timeDest)
            {
                using org_ptr = bool (WINAPIV*)(struct CTime*, struct _SYSTEMTIME*);
                return (org_ptr(0x140673260L))(this, timeDest);
            };
            int GetDay()
            {
                using org_ptr = int (WINAPIV*)(struct CTime*);
                return (org_ptr(0x1406733f0L))(this);
            };
            int GetDayOfWeek()
            {
                using org_ptr = int (WINAPIV*)(struct CTime*);
                return (org_ptr(0x140673530L))(this);
            };
            struct tm* GetGmtTm(struct tm* ptm)
            {
                using org_ptr = struct tm* (WINAPIV*)(struct CTime*, struct tm*);
                return (org_ptr(0x1406730a0L))(this, ptm);
            };
            int GetHour()
            {
                using org_ptr = int (WINAPIV*)(struct CTime*);
                return (org_ptr(0x140673440L))(this);
            };
            struct tm* GetLocalTm(struct tm* ptm)
            {
                using org_ptr = struct tm* (WINAPIV*)(struct CTime*, struct tm*);
                return (org_ptr(0x140673180L))(this, ptm);
            };
            int GetMinute()
            {
                using org_ptr = int (WINAPIV*)(struct CTime*);
                return (org_ptr(0x140673490L))(this);
            };
            int GetMonth()
            {
                using org_ptr = int (WINAPIV*)(struct CTime*);
                return (org_ptr(0x1406733a0L))(this);
            };
            int GetSecond()
            {
                using org_ptr = int (WINAPIV*)(struct CTime*);
                return (org_ptr(0x1406734e0L))(this);
            };
            static struct CTime* GetTickCount(struct CTime* result)
            {
                using org_ptr = struct CTime* (WINAPIV*)(struct CTime*);
                return (org_ptr(0x140672640L))(result);
            };
            int64_t GetTime()
            {
                using org_ptr = int64_t (WINAPIV*)(struct CTime*);
                return (org_ptr(0x140673330L))(this);
            };
            int GetYear()
            {
                using org_ptr = int (WINAPIV*)(struct CTime*);
                return (org_ptr(0x140673350L))(this);
            };
            static int IsValidFILETIME(struct _FILETIME* fileTime)
            {
                using org_ptr = int (WINAPIV*)(struct _FILETIME*);
                return (org_ptr(0x140672670L))(fileTime);
            };
        };
    }; // end namespace ATL
END_ATF_NAMESPACE
