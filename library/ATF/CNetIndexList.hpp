// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CNetCriticalSection.hpp"


START_ATF_NAMESPACE
    #pragma pack(push, 8)
    struct CNetIndexList
    {
        struct _index_node
        {
            unsigned int m_dwIndex;
            _index_node *m_pPrev;
            _index_node *m_pNext;
        public:
            _index_node()
            {
                using org_ptr = void (WINAPIV*)(struct _index_node*);
                (org_ptr(0x140073280L))(this);
            };
            void ctor__index_node()
            {
                using org_ptr = void (WINAPIV*)(struct _index_node*);
                (org_ptr(0x140073280L))(this);
            };
        };
        _index_node m_Head;
        _index_node m_Tail;
        _index_node m_BufHead;
        _index_node m_BufTail;
        _index_node *m_pBufNode;
        CNetCriticalSection m_csList;
        unsigned int m_dwCount;
        unsigned int m_dwBufCount;
        unsigned int m_dwMaxBufNum;
    public:
        CNetIndexList()
        {
            using org_ptr = void (WINAPIV*)(struct CNetIndexList*);
            (org_ptr(0x1400730a0L))(this);
        };
        void ctor_CNetIndexList()
        {
            using org_ptr = void (WINAPIV*)(struct CNetIndexList*);
            (org_ptr(0x1400730a0L))(this);
        };
        bool CopyFront(unsigned int* pdwOutIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct CNetIndexList*, unsigned int*);
            return (org_ptr(0x14007dfb0L))(this, pdwOutIndex);
        };
        int CopyIndexList(unsigned int* pdwList, int nMax)
        {
            using org_ptr = int (WINAPIV*)(struct CNetIndexList*, unsigned int*, int);
            return (org_ptr(0x140120c80L))(this, pdwList, nMax);
        };
        struct _index_node* FindNode(unsigned int dwIndex)
        {
            using org_ptr = struct _index_node* (WINAPIV*)(struct CNetIndexList*, unsigned int);
            return (org_ptr(0x140090730L))(this, dwIndex);
        };
        bool IsInList(unsigned int dwIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct CNetIndexList*, unsigned int);
            return (org_ptr(0x140078b40L))(this, dwIndex);
        };
        bool PopNode_Back(unsigned int* pdwOutIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct CNetIndexList*, unsigned int*);
            return (org_ptr(0x1402a28a0L))(this, pdwOutIndex);
        };
        bool PopNode_Front(unsigned int* pdwOutIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct CNetIndexList*, unsigned int*);
            return (org_ptr(0x140073770L))(this, pdwOutIndex);
        };
        bool PushNode_Back(unsigned int dwIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct CNetIndexList*, unsigned int);
            return (org_ptr(0x14007a700L))(this, dwIndex);
        };
        bool PushNode_Front(unsigned int dwIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct CNetIndexList*, unsigned int);
            return (org_ptr(0x14024fe00L))(this, dwIndex);
        };
        void ResetList()
        {
            using org_ptr = void (WINAPIV*)(struct CNetIndexList*);
            (org_ptr(0x140073700L))(this);
        };
        bool SetList(unsigned int dwMaxBufNum)
        {
            using org_ptr = bool (WINAPIV*)(struct CNetIndexList*, unsigned int);
            return (org_ptr(0x140073390L))(this, dwMaxBufNum);
        };
        int size()
        {
            using org_ptr = int (WINAPIV*)(struct CNetIndexList*);
            return (org_ptr(0x140028f70L))(this);
        };
        ~CNetIndexList()
        {
            using org_ptr = void (WINAPIV*)(struct CNetIndexList*);
            (org_ptr(0x1400732b0L))(this);
        };
        void dtor_CNetIndexList()
        {
            using org_ptr = void (WINAPIV*)(struct CNetIndexList*);
            (org_ptr(0x1400732b0L))(this);
        };
    };
    #pragma pack(pop)
END_ATF_NAMESPACE
