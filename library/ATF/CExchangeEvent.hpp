// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CMyTimer.hpp"
#include "CPlayer.hpp"
#include "EventItemInfo.hpp"
#include "RFEventBase.hpp"
#include "_FILETIME.hpp"


START_ATF_NAMESPACE
    struct  CExchangeEvent : RFEventBase
    {
        bool m_bEnable;
        bool m_bDelete;
        char m_EventItemCode[4][64];
        EventItemInfo m_EventItemInfo[4];
        char m_byState;
        bool m_bGiveItem;
        bool m_bWait;
        bool m_bModifyEnable;
        bool m_bModifyDelete;
        char m_ModifyItemCode[4][64];
        unsigned int m_dwPlayerArrayNo;
        CMyTimer m_tmDataFileCheckTime;
        _FILETIME m_ftWrite;
    public:
        CExchangeEvent()
        {
            using org_ptr = void (WINAPIV*)(struct CExchangeEvent*);
            (org_ptr(0x140329780L))(this);
        };
        void ctor_CExchangeEvent()
        {
            using org_ptr = void (WINAPIV*)(struct CExchangeEvent*);
            (org_ptr(0x140329780L))(this);
        };
        void ChangeData()
        {
            using org_ptr = void (WINAPIV*)(struct CExchangeEvent*);
            (org_ptr(0x140329ef0L))(this);
        };
        bool CheckBuddhaEventData(bool* pbDelete)
        {
            using org_ptr = bool (WINAPIV*)(struct CExchangeEvent*, bool*);
            return (org_ptr(0x14032a340L))(this, pbDelete);
        };
        void DeleteExchangeEventItem(struct CPlayer* pOne)
        {
            using org_ptr = void (WINAPIV*)(struct CExchangeEvent*, struct CPlayer*);
            (org_ptr(0x140329cb0L))(this, pOne);
        };
        static void Destroy()
        {
            using org_ptr = void (WINAPIV*)();
            (org_ptr(0x140329a40L))();
        };
        struct EventItemInfo* GetEventItemInfo(int nInfoType)
        {
            using org_ptr = struct EventItemInfo* (WINAPIV*)(struct CExchangeEvent*, int);
            return (org_ptr(0x140329c70L))(this, nInfoType);
        };
        void GiveEventItem(struct CPlayer* pOne)
        {
            using org_ptr = void (WINAPIV*)(struct CExchangeEvent*, struct CPlayer*);
            (org_ptr(0x14032a630L))(this, pOne);
        };
        bool Initialzie()
        {
            using org_ptr = bool (WINAPIV*)(struct CExchangeEvent*);
            return (org_ptr(0x140329ac0L))(this);
        };
        static struct CExchangeEvent* Instance()
        {
            using org_ptr = struct CExchangeEvent* (WINAPIV*)();
            return (org_ptr(0x140329980L))();
        };
        bool IsDelete()
        {
            using org_ptr = bool (WINAPIV*)(struct CExchangeEvent*);
            return (org_ptr(0x140329eb0L))(this);
        };
        bool IsEnable()
        {
            using org_ptr = bool (WINAPIV*)(struct CExchangeEvent*);
            return (org_ptr(0x140329e90L))(this);
        };
        bool IsWait()
        {
            using org_ptr = bool (WINAPIV*)(struct CExchangeEvent*);
            return (org_ptr(0x140329ed0L))(this);
        };
        void Loop()
        {
            using org_ptr = void (WINAPIV*)(struct CExchangeEvent*);
            (org_ptr(0x14032a060L))(this);
        };
        void ReadBuddhaEventInfo()
        {
            using org_ptr = void (WINAPIV*)(struct CExchangeEvent*);
            (org_ptr(0x14032a7c0L))(this);
        };
        ~CExchangeEvent()
        {
            using org_ptr = void (WINAPIV*)(struct CExchangeEvent*);
            (org_ptr(0x1403298f0L))(this);
        };
        void dtor_CExchangeEvent()
        {
            using org_ptr = void (WINAPIV*)(struct CExchangeEvent*);
            (org_ptr(0x1403298f0L))(this);
        };
    };
END_ATF_NAMESPACE
