// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2ptr<void __cdecl(void)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__var_base.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2ptr<var_base>
        {
        public:
            static struct var_base* invoke(void* input)
            {
                using org_ptr = struct var_base* (WINAPIV*)(void*);
                return (org_ptr(0x1404472e0L))(input);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "CLuaSignalReActor.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2ptr<CLuaSignalReActor>
        {
        public:
            static struct CLuaSignalReActor* invoke(void* input)
            {
                using org_ptr = struct CLuaSignalReActor* (WINAPIV*)(void*);
                return (org_ptr(0x14040b780L))(input);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2ptr<void __cdecl(char *,char *,LuaParam3,LuaParam3)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "CLuaEventMgr.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2ptr<CLuaEventMgr>
        {
        public:
            static struct CLuaEventMgr* invoke(void* input)
            {
                using org_ptr = struct CLuaEventMgr* (WINAPIV*)(void*);
                return (org_ptr(0x14040af10L))(input);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "LuaParam3.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2ptr<LuaParam3>
        {
        public:
            static struct LuaParam3* invoke(void* input)
            {
                using org_ptr = struct LuaParam3* (WINAPIV*)(void*);
                return (org_ptr(0x140409d00L))(input);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2ptr<CLuaEventMgr * __cdecl(void)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__user.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2ptr<user>
        {
        public:
            static struct user* invoke(void* input)
            {
                using org_ptr = struct user* (WINAPIV*)(void*);
                return (org_ptr(0x140409de0L))(input);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "CMonster.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2ptr<CMonster>
        {
        public:
            static struct CMonster* invoke(void* input)
            {
                using org_ptr = struct CMonster* (WINAPIV*)(void*);
                return (org_ptr(0x14040b790L))(input);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "CLuaEventNode.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2ptr<CLuaEventNode>
        {
        public:
            static struct CLuaEventNode* invoke(void* input)
            {
                using org_ptr = struct CLuaEventNode* (WINAPIV*)(void*);
                return (org_ptr(0x14040aef0L))(input);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "CLuaScript.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2ptr<CLuaScript>
        {
        public:
            static struct CLuaScript* invoke(void* input)
            {
                using org_ptr = struct CLuaScript* (WINAPIV*)(void*);
                return (org_ptr(0x14040af00L))(input);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2ptr<CMonster * __cdecl(char *,char *,float,float,float)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
