// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "ATL__CTime.hpp"
#include "ATL__CTimeSpan.hpp"
#include "GUILD_BATTLE__CGuildBattleStateList.hpp"


START_ATF_NAMESPACE
    namespace GUILD_BATTLE
    {
        struct CGuildBattleSchedule
        {
            enum GS_STATE
            {
                GS_NONE = 0x0,
                GS_WAIT = 0x1,
                GS_PROC = 0x2,
                GS_DONE = 0x3,
                GS_MAX = 0x4,
            };
            unsigned int m_dwScheduleID;
            GS_STATE m_eState;
            ATL::CTime m_kNextStartTime;
            ATL::CTime m_kBattleStartTime;
            ATL::CTimeSpan m_kBattleTime;
            CGuildBattleStateList *m_pkStateList;
        public:
            CGuildBattleSchedule(unsigned int dwScheduleID)
            {
                using org_ptr = void (WINAPIV*)(struct CGuildBattleSchedule*, unsigned int);
                (org_ptr(0x1403d9b00L))(this, dwScheduleID);
            };
            void ctor_CGuildBattleSchedule(unsigned int dwScheduleID)
            {
                using org_ptr = void (WINAPIV*)(struct CGuildBattleSchedule*, unsigned int);
                (org_ptr(0x1403d9b00L))(this, dwScheduleID);
            };
            int Check()
            {
                using org_ptr = int (WINAPIV*)(struct CGuildBattleSchedule*);
                return (org_ptr(0x1403d9de0L))(this);
            };
            void Clear()
            {
                using org_ptr = void (WINAPIV*)(struct CGuildBattleSchedule*);
                (org_ptr(0x1403d9e90L))(this);
            };
            bool ClearDB()
            {
                using org_ptr = bool (WINAPIV*)(struct CGuildBattleSchedule*);
                return (org_ptr(0x1403d9f10L))(this);
            };
            struct ATL::CTimeSpan* GetBattleTime(struct ATL::CTimeSpan* result)
            {
                using org_ptr = struct ATL::CTimeSpan* (WINAPIV*)(struct CGuildBattleSchedule*, struct ATL::CTimeSpan*);
                return (org_ptr(0x1403d9120L))(this, result);
            };
            int GetBattleTurm()
            {
                using org_ptr = int (WINAPIV*)(struct CGuildBattleSchedule*);
                return (org_ptr(0x1403d9440L))(this);
            };
            bool GetLeftTime(char* byHour, char* byMin, char* bySec)
            {
                using org_ptr = bool (WINAPIV*)(struct CGuildBattleSchedule*, char*, char*, char*);
                return (org_ptr(0x1403da220L))(this, byHour, byMin, bySec);
            };
            int64_t GetRealStartTime()
            {
                using org_ptr = int64_t (WINAPIV*)(struct CGuildBattleSchedule*);
                return (org_ptr(0x1403d93f0L))(this);
            };
            unsigned int GetSID()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct CGuildBattleSchedule*);
                return (org_ptr(0x1403d9100L))(this);
            };
            int GetState()
            {
                using org_ptr = int (WINAPIV*)(struct CGuildBattleSchedule*);
                return (org_ptr(0x1403d93d0L))(this);
            };
            struct ATL::CTime* GetTime(struct ATL::CTime* result)
            {
                using org_ptr = struct ATL::CTime* (WINAPIV*)(struct CGuildBattleSchedule*, struct ATL::CTime*);
                return (org_ptr(0x1403deac0L))(this, result);
            };
            bool IsDone()
            {
                using org_ptr = bool (WINAPIV*)(struct CGuildBattleSchedule*);
                return (org_ptr(0x1403de9f0L))(this);
            };
            bool IsEmpty()
            {
                using org_ptr = bool (WINAPIV*)(struct CGuildBattleSchedule*);
                return (org_ptr(0x1403de990L))(this);
            };
            bool IsProc()
            {
                using org_ptr = bool (WINAPIV*)(struct CGuildBattleSchedule*);
                return (org_ptr(0x1403deaf0L))(this);
            };
            bool IsWait()
            {
                using org_ptr = bool (WINAPIV*)(struct CGuildBattleSchedule*);
                return (org_ptr(0x1403deb50L))(this);
            };
            bool Load(bool bToday, unsigned int dwScheduleID, char ucState, int64_t tTime, uint16_t wTumeMin)
            {
                using org_ptr = bool (WINAPIV*)(struct CGuildBattleSchedule*, bool, unsigned int, char, int64_t, uint16_t);
                return (org_ptr(0x1403d9f60L))(this, bToday, dwScheduleID, ucState, tTime, wTumeMin);
            };
            int Process()
            {
                using org_ptr = int (WINAPIV*)(struct CGuildBattleSchedule*);
                return (org_ptr(0x1403da3b0L))(this);
            };
            char Set(unsigned int dwStartTimeInx, unsigned int dwElapseTimeCnt)
            {
                using org_ptr = char (WINAPIV*)(struct CGuildBattleSchedule*, unsigned int, unsigned int);
                return (org_ptr(0x1403d9b90L))(this, dwStartTimeInx, dwElapseTimeCnt);
            };
            void SetProcState()
            {
                using org_ptr = void (WINAPIV*)(struct CGuildBattleSchedule*);
                (org_ptr(0x1403debb0L))(this);
            };
            void SetStateList(struct CGuildBattleStateList* pkStateList)
            {
                using org_ptr = void (WINAPIV*)(struct CGuildBattleSchedule*, struct CGuildBattleStateList*);
                (org_ptr(0x1403d9150L))(this, pkStateList);
            };
            ~CGuildBattleSchedule()
            {
                using org_ptr = void (WINAPIV*)(struct CGuildBattleSchedule*);
                (org_ptr(0x1403d9b80L))(this);
            };
            void dtor_CGuildBattleSchedule()
            {
                using org_ptr = void (WINAPIV*)(struct CGuildBattleSchedule*);
                (org_ptr(0x1403d9b80L))(this);
            };
        };
    }; // end namespace GUILD_BATTLE
END_ATF_NAMESPACE
