// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "BasicType.hpp"
#include "_CONTEXT.hpp"
#include "_EXCEPTION_POINTERS.hpp"
#include "_SYMBOL_INFO.hpp"
#include "_tagSTACKFRAME64.hpp"
#include "_TI_FINDCHILDREN_PARAMS.hpp"


START_ATF_NAMESPACE
    struct  WheatyExceptionReport
    {
        struct DumpTypeIndex
        {
			struct __l7
			{
				struct FINDCHILDREN : _TI_FINDCHILDREN_PARAMS
				{
					unsigned int MoreChildIds[1024];
				};
			};
        };
    public:
        static char* DumpTypeIndex(char* pszCurrBuffer, uint64_t modBase, unsigned int dwTypeIndex, unsigned int nestingLevel, uint64_t offset, bool* bHandled)
        {
            using org_ptr = char* (WINAPIV*)(char*, uint64_t, unsigned int, unsigned int, uint64_t, bool*);
            return (org_ptr(0x140440d40L))(pszCurrBuffer, modBase, dwTypeIndex, nestingLevel, offset, bHandled);
        };
        static int EnumerateSymbolsCallback(struct _SYMBOL_INFO* pSymInfo, unsigned int SymbolSize, void* UserContext)
        {
            using org_ptr = int (WINAPIV*)(struct _SYMBOL_INFO*, unsigned int, void*);
            return (org_ptr(0x140440a30L))(pSymInfo, SymbolSize, UserContext);
        };
        static char* FormatOutputValue(char* pszCurrBuffer, BasicType basicType, uint64_t length, void* pAddress)
        {
            using org_ptr = char* (WINAPIV*)(char*, BasicType, uint64_t, void*);
            return (org_ptr(0x140441160L))(pszCurrBuffer, basicType, length, pAddress);
        };
        static bool FormatSymbolValue(struct _SYMBOL_INFO* pSym, struct _tagSTACKFRAME64* sf, char* pszBuffer, unsigned int cbBuffer)
        {
            using org_ptr = bool (WINAPIV*)(struct _SYMBOL_INFO*, struct _tagSTACKFRAME64*, char*, unsigned int);
            return (org_ptr(0x140440b40L))(pSym, sf, pszBuffer, cbBuffer);
        };
        static void GenerateExceptionReport(struct _EXCEPTION_POINTERS* pExceptionInfo)
        {
            using org_ptr = void (WINAPIV*)(struct _EXCEPTION_POINTERS*);
            (org_ptr(0x14043f990L))(pExceptionInfo);
        };
        static BasicType GetBasicType(unsigned int typeIndex, uint64_t modBase)
        {
            using org_ptr = BasicType (WINAPIV*)(unsigned int, uint64_t);
            return (org_ptr(0x140441380L))(typeIndex, modBase);
        };
        static int GetDisplayInfo(int nDeviceIndex, char* lpszDeviceInfo, char* lpszMonitorInfo)
        {
            using org_ptr = int (WINAPIV*)(int, char*, char*);
            return (org_ptr(0x1404416b0L))(nDeviceIndex, lpszDeviceInfo, lpszMonitorInfo);
        };
        static char* GetExceptionString(unsigned int dwCode)
        {
            using org_ptr = char* (WINAPIV*)(unsigned int);
            return (org_ptr(0x140440170L))(dwCode);
        };
        static int GetLogicalAddress(void* addr, char* szModule, unsigned int len, unsigned int* section, unsigned int* offset)
        {
            using org_ptr = int (WINAPIV*)(void*, char*, unsigned int, unsigned int*, unsigned int*);
            return (org_ptr(0x1404404a0L))(addr, szModule, len, section, offset);
        };
        static char* GetOsName(unsigned int dwPlatformId, unsigned int dwMajorVersion, unsigned int dwMinorVersion)
        {
            using org_ptr = char* (WINAPIV*)(unsigned int, unsigned int, unsigned int);
            return (org_ptr(0x140441570L))(dwPlatformId, dwMajorVersion, dwMinorVersion);
        };
        static char* GetOsVersion()
        {
            using org_ptr = char* (WINAPIV*)();
            return (org_ptr(0x140441470L))();
        };
        void SetDescription(char* pszDescription)
        {
            using org_ptr = void (WINAPIV*)(struct WheatyExceptionReport*, char*);
            (org_ptr(0x14043f5f0L))(this, pszDescription);
        };
        void SetFtpConnection(char* pszFtpIp, unsigned int nFtpPort, char* pszFtpId, char* pszFtpPwd, char* pszFtpDirectory)
        {
            using org_ptr = void (WINAPIV*)(struct WheatyExceptionReport*, char*, unsigned int, char*, char*, char*);
            (org_ptr(0x14043f640L))(this, pszFtpIp, nFtpPort, pszFtpId, pszFtpPwd, pszFtpDirectory);
        };
        void SetLogName(char* pszLogName)
        {
            using org_ptr = void (WINAPIV*)(struct WheatyExceptionReport*, char*);
            (org_ptr(0x14043f5a0L))(this, pszLogName);
        };
        void SetRunDialog(int bRun)
        {
            using org_ptr = void (WINAPIV*)(struct WheatyExceptionReport*, int);
            (org_ptr(0x14043f6e0L))(this, bRun);
        };
        WheatyExceptionReport()
        {
            using org_ptr = void (WINAPIV*)(struct WheatyExceptionReport*);
            (org_ptr(0x14043f4d0L))(this);
        };
        void ctor_WheatyExceptionReport()
        {
            using org_ptr = void (WINAPIV*)(struct WheatyExceptionReport*);
            (org_ptr(0x14043f4d0L))(this);
        };
        static int WheatyUnhandledExceptionFilter(struct _EXCEPTION_POINTERS* pExceptionInfo)
        {
            using org_ptr = int (WINAPIV*)(struct _EXCEPTION_POINTERS*);
            return (org_ptr(0x14043f700L))(pExceptionInfo);
        };
        static void WriteStackDetails(struct _CONTEXT* pContext, bool bWriteVariables)
        {
            using org_ptr = void (WINAPIV*)(struct _CONTEXT*, bool);
            (org_ptr(0x1404406a0L))(pContext, bWriteVariables);
        };
        static int _tprintfh(void* hFile, char* format)
        {
            using org_ptr = int (WINAPIV*)(void*, char*);
            return (org_ptr(0x1404417d0L))(hFile, format);
        };
        static int printf(char* format)
        {
            using org_ptr = int (WINAPIV*)(char*);
            return (org_ptr(0x1404416d0L))(format);
        };
        ~WheatyExceptionReport()
        {
            using org_ptr = void (WINAPIV*)(struct WheatyExceptionReport*);
            (org_ptr(0x14043f560L))(this);
        };
        void dtor_WheatyExceptionReport()
        {
            using org_ptr = void (WINAPIV*)(struct WheatyExceptionReport*);
            (org_ptr(0x14043f560L))(this);
        };
    };
END_ATF_NAMESPACE
