// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "./common/ATFCore.hpp"
#include "US__CArray_detail.hpp"


START_ATF_NAMESPACE
    namespace registry
    {
        class US::CArray<CLuaScript>_registry : public IRegistry
        {
            public: virtual void registry() {
                auto& hook_core = CATFCore::get_instance();
                for (auto& r : US::detail::CArray<CLuaScript>_functions)
                    hook_core.reg_wrapper(r.pBind, r);
            }
        };
        
    }; // end namespace registry
END_ATF_NAMESPACE
#include "./common/ATFCore.hpp"
#include "US__CArray_detail.hpp"


START_ATF_NAMESPACE
    namespace registry
    {
        class US::CArray<CLuaScript::_State>_registry : public IRegistry
        {
            public: virtual void registry() {
                auto& hook_core = CATFCore::get_instance();
                for (auto& r : US::detail::CArray<CLuaScript::_State>_functions)
                    hook_core.reg_wrapper(r.pBind, r);
            }
        };
        
    }; // end namespace registry
END_ATF_NAMESPACE
#include "./common/ATFCore.hpp"
#include "US__CArray_detail.hpp"


START_ATF_NAMESPACE
    namespace registry
    {
        class US::CArray<CLuaCommandEx>_registry : public IRegistry
        {
            public: virtual void registry() {
                auto& hook_core = CATFCore::get_instance();
                for (auto& r : US::detail::CArray<CLuaCommandEx>_functions)
                    hook_core.reg_wrapper(r.pBind, r);
            }
        };
        
    }; // end namespace registry
END_ATF_NAMESPACE
#include "./common/ATFCore.hpp"
#include "US__CArray_detail.hpp"


START_ATF_NAMESPACE
    namespace registry
    {
        class US::CArray<CLuaCommandEx::_State>_registry : public IRegistry
        {
            public: virtual void registry() {
                auto& hook_core = CATFCore::get_instance();
                for (auto& r : US::detail::CArray<CLuaCommandEx::_State>_functions)
                    hook_core.reg_wrapper(r.pBind, r);
            }
        };
        
    }; // end namespace registry
END_ATF_NAMESPACE
#include "./common/ATFCore.hpp"
#include "US__CArray_detail.hpp"


START_ATF_NAMESPACE
    namespace registry
    {
        class US::CArray<CLuaLooting_Novus_Item>_registry : public IRegistry
        {
            public: virtual void registry() {
                auto& hook_core = CATFCore::get_instance();
                for (auto& r : US::detail::CArray<CLuaLooting_Novus_Item>_functions)
                    hook_core.reg_wrapper(r.pBind, r);
            }
        };
        
    }; // end namespace registry
END_ATF_NAMESPACE
#include "./common/ATFCore.hpp"
#include "US__CArray_detail.hpp"


START_ATF_NAMESPACE
    namespace registry
    {
        class US::CArray<CLuaLooting_Novus_Item::_State>_registry : public IRegistry
        {
            public: virtual void registry() {
                auto& hook_core = CATFCore::get_instance();
                for (auto& r : US::detail::CArray<CLuaLooting_Novus_Item::_State>_functions)
                    hook_core.reg_wrapper(r.pBind, r);
            }
        };
        
    }; // end namespace registry
END_ATF_NAMESPACE
#include "./common/ATFCore.hpp"
#include "US__CArray_detail.hpp"


START_ATF_NAMESPACE
    namespace registry
    {
        class US::CArray<CLuaEventNode>_registry : public IRegistry
        {
            public: virtual void registry() {
                auto& hook_core = CATFCore::get_instance();
                for (auto& r : US::detail::CArray<CLuaEventNode>_functions)
                    hook_core.reg_wrapper(r.pBind, r);
            }
        };
        
    }; // end namespace registry
END_ATF_NAMESPACE
#include "./common/ATFCore.hpp"
#include "US__CArray_detail.hpp"


START_ATF_NAMESPACE
    namespace registry
    {
        class US::CArray<CLuaEventNode::_State>_registry : public IRegistry
        {
            public: virtual void registry() {
                auto& hook_core = CATFCore::get_instance();
                for (auto& r : US::detail::CArray<CLuaEventNode::_State>_functions)
                    hook_core.reg_wrapper(r.pBind, r);
            }
        };
        
    }; // end namespace registry
END_ATF_NAMESPACE
