// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CAtlAllocator_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        static info::CAtlAllocatorAddCategory1_ptr CAtlAllocatorAddCategory1_next(nullptr);
        static info::CAtlAllocatorAddCategory1_clbk CAtlAllocatorAddCategory1_user(nullptr);
        static info::CAtlAllocatorAddModule2_ptr CAtlAllocatorAddModule2_next(nullptr);
        static info::CAtlAllocatorAddModule2_clbk CAtlAllocatorAddModule2_user(nullptr);
        static info::CAtlAllocatorctor_CAtlAllocator3_ptr CAtlAllocatorctor_CAtlAllocator3_next(nullptr);
        static info::CAtlAllocatorctor_CAtlAllocator3_clbk CAtlAllocatorctor_CAtlAllocator3_user(nullptr);
        static info::CAtlAllocatorCleanUp4_ptr CAtlAllocatorCleanUp4_next(nullptr);
        static info::CAtlAllocatorCleanUp4_clbk CAtlAllocatorCleanUp4_user(nullptr);
        static info::CAtlAllocatorClose5_ptr CAtlAllocatorClose5_next(nullptr);
        static info::CAtlAllocatorClose5_clbk CAtlAllocatorClose5_user(nullptr);
        static info::CAtlAllocatorFindModule6_ptr CAtlAllocatorFindModule6_next(nullptr);
        static info::CAtlAllocatorFindModule6_clbk CAtlAllocatorFindModule6_user(nullptr);
        static info::CAtlAllocatorGetCategory7_ptr CAtlAllocatorGetCategory7_next(nullptr);
        static info::CAtlAllocatorGetCategory7_clbk CAtlAllocatorGetCategory7_user(nullptr);
        static info::CAtlAllocatorGetCategoryCount8_ptr CAtlAllocatorGetCategoryCount8_next(nullptr);
        static info::CAtlAllocatorGetCategoryCount8_clbk CAtlAllocatorGetCategoryCount8_user(nullptr);
        static info::CAtlAllocatorGetCategoryCount9_ptr CAtlAllocatorGetCategoryCount9_next(nullptr);
        static info::CAtlAllocatorGetCategoryCount9_clbk CAtlAllocatorGetCategoryCount9_user(nullptr);
        static info::CAtlAllocatorGetModule10_ptr CAtlAllocatorGetModule10_next(nullptr);
        static info::CAtlAllocatorGetModule10_clbk CAtlAllocatorGetModule10_user(nullptr);
        static info::CAtlAllocatorGetModuleCount11_ptr CAtlAllocatorGetModuleCount11_next(nullptr);
        static info::CAtlAllocatorGetModuleCount11_clbk CAtlAllocatorGetModuleCount11_user(nullptr);
        static info::CAtlAllocatorGetProcess12_ptr CAtlAllocatorGetProcess12_next(nullptr);
        static info::CAtlAllocatorGetProcess12_clbk CAtlAllocatorGetProcess12_user(nullptr);
        static info::CAtlAllocatorInit13_ptr CAtlAllocatorInit13_next(nullptr);
        static info::CAtlAllocatorInit13_clbk CAtlAllocatorInit13_user(nullptr);
        static info::CAtlAllocatorOpen14_ptr CAtlAllocatorOpen14_next(nullptr);
        static info::CAtlAllocatorOpen14_clbk CAtlAllocatorOpen14_user(nullptr);
        static info::CAtlAllocatorReleaseSnapshot15_ptr CAtlAllocatorReleaseSnapshot15_next(nullptr);
        static info::CAtlAllocatorReleaseSnapshot15_clbk CAtlAllocatorReleaseSnapshot15_user(nullptr);
        static info::CAtlAllocatorRemoveModule16_ptr CAtlAllocatorRemoveModule16_next(nullptr);
        static info::CAtlAllocatorRemoveModule16_clbk CAtlAllocatorRemoveModule16_user(nullptr);
        static info::CAtlAllocatorTakeSnapshot17_ptr CAtlAllocatorTakeSnapshot17_next(nullptr);
        static info::CAtlAllocatorTakeSnapshot17_clbk CAtlAllocatorTakeSnapshot17_user(nullptr);
        static info::CAtlAllocatordtor_CAtlAllocator19_ptr CAtlAllocatordtor_CAtlAllocator19_next(nullptr);
        static info::CAtlAllocatordtor_CAtlAllocator19_clbk CAtlAllocatordtor_CAtlAllocator19_user(nullptr);
        
        static int CAtlAllocatorAddCategory1_wrapper(struct CAtlAllocator* _this, int iModule, wchar_t* szCategoryName)
        {
           return CAtlAllocatorAddCategory1_user(_this, iModule, szCategoryName, CAtlAllocatorAddCategory1_next);
        };
        static int CAtlAllocatorAddModule2_wrapper(struct CAtlAllocator* _this, struct HINSTANCE__* hInst)
        {
           return CAtlAllocatorAddModule2_user(_this, hInst, CAtlAllocatorAddModule2_next);
        };
        static void CAtlAllocatorctor_CAtlAllocator3_wrapper(struct CAtlAllocator* _this)
        {
           CAtlAllocatorctor_CAtlAllocator3_user(_this, CAtlAllocatorctor_CAtlAllocator3_next);
        };
        static void CAtlAllocatorCleanUp4_wrapper(struct CAtlAllocator* _this)
        {
           CAtlAllocatorCleanUp4_user(_this, CAtlAllocatorCleanUp4_next);
        };
        static void CAtlAllocatorClose5_wrapper(struct CAtlAllocator* _this, bool bForceUnmap)
        {
           CAtlAllocatorClose5_user(_this, bForceUnmap, CAtlAllocatorClose5_next);
        };
        static bool CAtlAllocatorFindModule6_wrapper(struct CAtlAllocator* _this, wchar_t* pszModulePath, unsigned int* pnModule)
        {
           return CAtlAllocatorFindModule6_user(_this, pszModulePath, pnModule, CAtlAllocatorFindModule6_next);
        };
        static struct CAtlTraceCategory* CAtlAllocatorGetCategory7_wrapper(struct CAtlAllocator* _this, int iCategory)
        {
           return CAtlAllocatorGetCategory7_user(_this, iCategory, CAtlAllocatorGetCategory7_next);
        };
        static int CAtlAllocatorGetCategoryCount8_wrapper(struct CAtlAllocator* _this, struct CAtlTraceModule* rModule)
        {
           return CAtlAllocatorGetCategoryCount8_user(_this, rModule, CAtlAllocatorGetCategoryCount8_next);
        };
        static int CAtlAllocatorGetCategoryCount9_wrapper(struct CAtlAllocator* _this, int iModule)
        {
           return CAtlAllocatorGetCategoryCount9_user(_this, iModule, CAtlAllocatorGetCategoryCount9_next);
        };
        static struct CAtlTraceModule* CAtlAllocatorGetModule10_wrapper(struct CAtlAllocator* _this, int iModule)
        {
           return CAtlAllocatorGetModule10_user(_this, iModule, CAtlAllocatorGetModule10_next);
        };
        static int CAtlAllocatorGetModuleCount11_wrapper(struct CAtlAllocator* _this)
        {
           return CAtlAllocatorGetModuleCount11_user(_this, CAtlAllocatorGetModuleCount11_next);
        };
        static struct CAtlTraceProcess* CAtlAllocatorGetProcess12_wrapper(struct CAtlAllocator* _this)
        {
           return CAtlAllocatorGetProcess12_user(_this, CAtlAllocatorGetProcess12_next);
        };
        static bool CAtlAllocatorInit13_wrapper(struct CAtlAllocator* _this, char* pszFileName, unsigned int dwMaxSize)
        {
           return CAtlAllocatorInit13_user(_this, pszFileName, dwMaxSize, CAtlAllocatorInit13_next);
        };
        static bool CAtlAllocatorOpen14_wrapper(struct CAtlAllocator* _this, char* pszFileName)
        {
           return CAtlAllocatorOpen14_user(_this, pszFileName, CAtlAllocatorOpen14_next);
        };
        static void CAtlAllocatorReleaseSnapshot15_wrapper(struct CAtlAllocator* _this)
        {
           CAtlAllocatorReleaseSnapshot15_user(_this, CAtlAllocatorReleaseSnapshot15_next);
        };
        static bool CAtlAllocatorRemoveModule16_wrapper(struct CAtlAllocator* _this, int iModule)
        {
           return CAtlAllocatorRemoveModule16_user(_this, iModule, CAtlAllocatorRemoveModule16_next);
        };
        static void CAtlAllocatorTakeSnapshot17_wrapper(struct CAtlAllocator* _this)
        {
           CAtlAllocatorTakeSnapshot17_user(_this, CAtlAllocatorTakeSnapshot17_next);
        };
        static void CAtlAllocatordtor_CAtlAllocator19_wrapper(struct CAtlAllocator* _this)
        {
           CAtlAllocatordtor_CAtlAllocator19_user(_this, CAtlAllocatordtor_CAtlAllocator19_next);
        };
        
        static hook_record CAtlAllocator_functions[] = {
        {   (LPVOID)0x140674c90L,
            (LPVOID *)&CAtlAllocatorAddCategory1_user,
            (LPVOID *)&CAtlAllocatorAddCategory1_next,
            (LPVOID)cast_pointer_function(CAtlAllocatorAddCategory1_wrapper),
            (LPVOID)cast_pointer_function((int(CAtlAllocator::*)(int, wchar_t*))&CAtlAllocator::AddCategory) },
        {   (LPVOID)0x140674a30L,
            (LPVOID *)&CAtlAllocatorAddModule2_user,
            (LPVOID *)&CAtlAllocatorAddModule2_next,
            (LPVOID)cast_pointer_function(CAtlAllocatorAddModule2_wrapper),
            (LPVOID)cast_pointer_function((int(CAtlAllocator::*)(struct HINSTANCE__*))&CAtlAllocator::AddModule) },
        {   (LPVOID)0x14066dae0L,
            (LPVOID *)&CAtlAllocatorctor_CAtlAllocator3_user,
            (LPVOID *)&CAtlAllocatorctor_CAtlAllocator3_next,
            (LPVOID)cast_pointer_function(CAtlAllocatorctor_CAtlAllocator3_wrapper),
            (LPVOID)cast_pointer_function((void(CAtlAllocator::*)())&CAtlAllocator::ctor_CAtlAllocator) },
        {   (LPVOID)0x140675040L,
            (LPVOID *)&CAtlAllocatorCleanUp4_user,
            (LPVOID *)&CAtlAllocatorCleanUp4_next,
            (LPVOID)cast_pointer_function(CAtlAllocatorCleanUp4_wrapper),
            (LPVOID)cast_pointer_function((void(CAtlAllocator::*)())&CAtlAllocator::CleanUp) },
        {   (LPVOID)0x140674620L,
            (LPVOID *)&CAtlAllocatorClose5_user,
            (LPVOID *)&CAtlAllocatorClose5_next,
            (LPVOID)cast_pointer_function(CAtlAllocatorClose5_wrapper),
            (LPVOID)cast_pointer_function((void(CAtlAllocator::*)(bool))&CAtlAllocator::Close) },
        {   (LPVOID)0x1406749a0L,
            (LPVOID *)&CAtlAllocatorFindModule6_user,
            (LPVOID *)&CAtlAllocatorFindModule6_next,
            (LPVOID)cast_pointer_function(CAtlAllocatorFindModule6_wrapper),
            (LPVOID)cast_pointer_function((bool(CAtlAllocator::*)(wchar_t*, unsigned int*))&CAtlAllocator::FindModule) },
        {   (LPVOID)0x140674770L,
            (LPVOID *)&CAtlAllocatorGetCategory7_user,
            (LPVOID *)&CAtlAllocatorGetCategory7_next,
            (LPVOID)cast_pointer_function(CAtlAllocatorGetCategory7_wrapper),
            (LPVOID)cast_pointer_function((struct CAtlTraceCategory*(CAtlAllocator::*)(int))&CAtlAllocator::GetCategory) },
        {   (LPVOID)0x1406748d0L,
            (LPVOID *)&CAtlAllocatorGetCategoryCount8_user,
            (LPVOID *)&CAtlAllocatorGetCategoryCount8_next,
            (LPVOID)cast_pointer_function(CAtlAllocatorGetCategoryCount8_wrapper),
            (LPVOID)cast_pointer_function((int(CAtlAllocator::*)(struct CAtlTraceModule*))&CAtlAllocator::GetCategoryCount) },
        {   (LPVOID)0x140674840L,
            (LPVOID *)&CAtlAllocatorGetCategoryCount9_user,
            (LPVOID *)&CAtlAllocatorGetCategoryCount9_next,
            (LPVOID)cast_pointer_function(CAtlAllocatorGetCategoryCount9_wrapper),
            (LPVOID)cast_pointer_function((int(CAtlAllocator::*)(int))&CAtlAllocator::GetCategoryCount) },
        {   (LPVOID)0x1406746b0L,
            (LPVOID *)&CAtlAllocatorGetModule10_user,
            (LPVOID *)&CAtlAllocatorGetModule10_next,
            (LPVOID)cast_pointer_function(CAtlAllocatorGetModule10_wrapper),
            (LPVOID)cast_pointer_function((struct CAtlTraceModule*(CAtlAllocator::*)(int))&CAtlAllocator::GetModule) },
        {   (LPVOID)0x140674940L,
            (LPVOID *)&CAtlAllocatorGetModuleCount11_user,
            (LPVOID *)&CAtlAllocatorGetModuleCount11_next,
            (LPVOID)cast_pointer_function(CAtlAllocatorGetModuleCount11_wrapper),
            (LPVOID)cast_pointer_function((int(CAtlAllocator::*)())&CAtlAllocator::GetModuleCount) },
        {   (LPVOID)0x14066ffa0L,
            (LPVOID *)&CAtlAllocatorGetProcess12_user,
            (LPVOID *)&CAtlAllocatorGetProcess12_next,
            (LPVOID)cast_pointer_function(CAtlAllocatorGetProcess12_wrapper),
            (LPVOID)cast_pointer_function((struct CAtlTraceProcess*(CAtlAllocator::*)())&CAtlAllocator::GetProcess) },
        {   (LPVOID)0x140673f10L,
            (LPVOID *)&CAtlAllocatorInit13_user,
            (LPVOID *)&CAtlAllocatorInit13_next,
            (LPVOID)cast_pointer_function(CAtlAllocatorInit13_wrapper),
            (LPVOID)cast_pointer_function((bool(CAtlAllocator::*)(char*, unsigned int))&CAtlAllocator::Init) },
        {   (LPVOID)0x140674460L,
            (LPVOID *)&CAtlAllocatorOpen14_user,
            (LPVOID *)&CAtlAllocatorOpen14_next,
            (LPVOID)cast_pointer_function(CAtlAllocatorOpen14_wrapper),
            (LPVOID)cast_pointer_function((bool(CAtlAllocator::*)(char*))&CAtlAllocator::Open) },
        {   (LPVOID)0x1406752d0L,
            (LPVOID *)&CAtlAllocatorReleaseSnapshot15_user,
            (LPVOID *)&CAtlAllocatorReleaseSnapshot15_next,
            (LPVOID)cast_pointer_function(CAtlAllocatorReleaseSnapshot15_wrapper),
            (LPVOID)cast_pointer_function((void(CAtlAllocator::*)())&CAtlAllocator::ReleaseSnapshot) },
        {   (LPVOID)0x140674f70L,
            (LPVOID *)&CAtlAllocatorRemoveModule16_user,
            (LPVOID *)&CAtlAllocatorRemoveModule16_next,
            (LPVOID)cast_pointer_function(CAtlAllocatorRemoveModule16_wrapper),
            (LPVOID)cast_pointer_function((bool(CAtlAllocator::*)(int))&CAtlAllocator::RemoveModule) },
        {   (LPVOID)0x140675060L,
            (LPVOID *)&CAtlAllocatorTakeSnapshot17_user,
            (LPVOID *)&CAtlAllocatorTakeSnapshot17_next,
            (LPVOID)cast_pointer_function(CAtlAllocatorTakeSnapshot17_wrapper),
            (LPVOID)cast_pointer_function((void(CAtlAllocator::*)())&CAtlAllocator::TakeSnapshot) },
        {   (LPVOID)0x14066de20L,
            (LPVOID *)&CAtlAllocatordtor_CAtlAllocator19_user,
            (LPVOID *)&CAtlAllocatordtor_CAtlAllocator19_next,
            (LPVOID)cast_pointer_function(CAtlAllocatordtor_CAtlAllocator19_wrapper),
            (LPVOID)cast_pointer_function((void(CAtlAllocator::*)())&CAtlAllocator::dtor_CAtlAllocator) },
        
        };
        
    }; // static end namespace detail
END_ATF_NAMESPACE
