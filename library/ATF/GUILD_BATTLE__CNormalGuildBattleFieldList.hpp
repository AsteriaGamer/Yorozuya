// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CCircleZone.hpp"
#include "CGravityStone.hpp"
#include "CGravityStoneRegener.hpp"
#include "GUILD_BATTLE__CNormalGuildBattleField.hpp"


START_ATF_NAMESPACE
    namespace GUILD_BATTLE
    {
        struct CNormalGuildBattleFieldList
        {
            unsigned int m_dwCnt;
            CNormalGuildBattleField *m_pkField;
            char m_byUseFieldCnt[3];
            CNormalGuildBattleField **m_ppkUseFieldByRace[3];
        public:
            CNormalGuildBattleFieldList()
            {
                using org_ptr = void (WINAPIV*)(struct CNormalGuildBattleFieldList*);
                (org_ptr(0x1403ee250L))(this);
            };
            void ctor_CNormalGuildBattleFieldList()
            {
                using org_ptr = void (WINAPIV*)(struct CNormalGuildBattleFieldList*);
                (org_ptr(0x1403ee250L))(this);
            };
            static void Destroy()
            {
                using org_ptr = void (WINAPIV*)();
                (org_ptr(0x1403ee420L))();
            };
            struct CCircleZone* GetCircleZone(int iInx)
            {
                using org_ptr = struct CCircleZone* (WINAPIV*)(struct CNormalGuildBattleFieldList*, int);
                return (org_ptr(0x1403eed90L))(this, iInx);
            };
            struct CNormalGuildBattleField* GetField(char byRace, unsigned int dwMapCode)
            {
                using org_ptr = struct CNormalGuildBattleField* (WINAPIV*)(struct CNormalGuildBattleFieldList*, char, unsigned int);
                return (org_ptr(0x1403ee870L))(this, byRace, dwMapCode);
            };
            struct CNormalGuildBattleField* GetField(unsigned int dwMapID)
            {
                using org_ptr = struct CNormalGuildBattleField* (WINAPIV*)(struct CNormalGuildBattleFieldList*, unsigned int);
                return (org_ptr(0x1403ee950L))(this, dwMapID);
            };
            struct CNormalGuildBattleField* GetFirstMapFieldByRace(char byRace)
            {
                using org_ptr = struct CNormalGuildBattleField* (WINAPIV*)(struct CNormalGuildBattleFieldList*, char);
                return (org_ptr(0x1403eeb10L))(this, byRace);
            };
            bool GetFirstMapInxByRace(char byRace, char* byInx)
            {
                using org_ptr = bool (WINAPIV*)(struct CNormalGuildBattleFieldList*, char, char*);
                return (org_ptr(0x1403eea80L))(this, byRace, byInx);
            };
            unsigned int GetMapCnt()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct CNormalGuildBattleFieldList*);
                return (org_ptr(0x1403d0b10L))(this);
            };
            bool GetMapInx(char byRace, unsigned int dwMapCode, unsigned int* dwMapInx)
            {
                using org_ptr = bool (WINAPIV*)(struct CNormalGuildBattleFieldList*, char, unsigned int, unsigned int*);
                return (org_ptr(0x1403ee990L))(this, byRace, dwMapCode, dwMapInx);
            };
            unsigned int GetMapInxList(char byRace, char* pbyInxList)
            {
                using org_ptr = unsigned int (WINAPIV*)(struct CNormalGuildBattleFieldList*, char, char*);
                return (org_ptr(0x1403eeb70L))(this, byRace, pbyInxList);
            };
            struct CGravityStoneRegener* GetRegener(int iInx)
            {
                using org_ptr = struct CGravityStoneRegener* (WINAPIV*)(struct CNormalGuildBattleFieldList*, int);
                return (org_ptr(0x1403eecf0L))(this, iInx);
            };
            struct CGravityStone* GetStone(int iInx)
            {
                using org_ptr = struct CGravityStone* (WINAPIV*)(struct CNormalGuildBattleFieldList*, int);
                return (org_ptr(0x1403eec50L))(this, iInx);
            };
            bool Init()
            {
                using org_ptr = bool (WINAPIV*)(struct CNormalGuildBattleFieldList*);
                return (org_ptr(0x1403ee4a0L))(this);
            };
            bool InitUseField(char byRace, char* szKeyName, char* szStrBuff, char** szParseBuff)
            {
                using org_ptr = bool (WINAPIV*)(struct CNormalGuildBattleFieldList*, char, char*, char*, char**);
                return (org_ptr(0x1403eee30L))(this, byRace, szKeyName, szStrBuff, szParseBuff);
            };
            static struct CNormalGuildBattleFieldList* Instance()
            {
                using org_ptr = struct CNormalGuildBattleFieldList* (WINAPIV*)();
                return (org_ptr(0x1403ee360L))();
            };
            int IsRegistedMapInx(char byRace, char** szParseBuff)
            {
                using org_ptr = int (WINAPIV*)(struct CNormalGuildBattleFieldList*, char, char**);
                return (org_ptr(0x1403ef0c0L))(this, byRace, szParseBuff);
            };
            ~CNormalGuildBattleFieldList()
            {
                using org_ptr = void (WINAPIV*)(struct CNormalGuildBattleFieldList*);
                (org_ptr(0x1403ee2c0L))(this);
            };
            void dtor_CNormalGuildBattleFieldList()
            {
                using org_ptr = void (WINAPIV*)(struct CNormalGuildBattleFieldList*);
                (org_ptr(0x1403ee2c0L))(this);
            };
        };
    }; // end namespace GUILD_BATTLE
END_ATF_NAMESPACE
