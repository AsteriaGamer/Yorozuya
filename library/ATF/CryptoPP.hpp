// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"

/*
START_ATF_NAMESPACE
    struct CryptoPP
    {
    
        enum CofactorMultiplicationOption
        {
            NO_COFACTOR_MULTIPLICTION = 0x0,
            COMPATIBLE_COFACTOR_MULTIPLICTION = 0x1,
            INCOMPATIBLE_COFACTOR_MULTIPLICTION = 0x2,
        };
        enum KeystreamOperation
        {
            WRITE_KEYSTREAM = 0x4,
            WRITE_KEYSTREAM_ALIGNED = 0x5,
            XOR_KEYSTREAM = 0x0,
            XOR_KEYSTREAM_INPUT_ALIGNED = 0x2,
            XOR_KEYSTREAM_OUTPUT_ALIGNED = 0x1,
            XOR_KEYSTREAM_BOTH_ALIGNED = 0x3,
        };
        enum CipherDir
        {
            ENCRYPTION = 0x0,
            DECRYPTION = 0x1,
        };
        enum ByteOrder
        {
            LITTLE_ENDIAN_ORDER = 0x0,
            BIG_ENDIAN_ORDER = 0x1,
        };
        enum ASNTag
        {
            BOOLEAN = 0x1,
            INTEGER = 0x2,
            BIT_STRING = 0x3,
            OCTET_STRING = 0x4,
            TAG_NULL = 0x5,
            OBJECT_IDENTIFIER = 0x6,
            OBJECT_DESCRIPTOR = 0x7,
            EXTERNAL = 0x8,
            REAL = 0x9,
            ENUMERATED = 0xA,
            UTF8_STRING = 0xC,
            SEQUENCE = 0x10,
            SET = 0x11,
            NUMERIC_STRING = 0x12,
            PRINTABLE_STRING = 0x13,
            T61_STRING = 0x14,
            VIDEOTEXT_STRING = 0x15,
            IA5_STRING = 0x16,
            UTC_TIME = 0x17,
            GENERALIZED_TIME = 0x18,
            GRAPHIC_STRING = 0x19,
            VISIBLE_STRING = 0x1A,
            GENERAL_STRING = 0x1B,
        };
        enum ASNIdFlag
        {
            UNIVERSAL = 0x0,
            CONSTRUCTED = 0x20,
            APPLICATION = 0x40,
            CONTEXT_SPECIFIC = 0x80,
            PRIVATE = 0xC0,
        };
        enum KeystreamOperationFlags
        {
            OUTPUT_ALIGNED = 0x1,
            INPUT_ALIGNED = 0x2,
            INPUT_NULL = 0x4,
        };
        struct Clonable
        {
            struct ClonableVtbl *vfptr;
        public:
            Clonable(struct Clonable* __that)
            {
                using org_ptr = void (WINAPIV*)(struct Clonable*, struct Clonable*);
                (org_ptr(0x140458620L))(this, __that);
            };
            void ctor_Clonable(struct Clonable* __that)
            {
                using org_ptr = void (WINAPIV*)(struct Clonable*, struct Clonable*);
                (org_ptr(0x140458620L))(this, __that);
            };
            Clonable()
            {
                using org_ptr = int64_t (WINAPIV*)(struct Clonable*);
                (org_ptr(0x1405f6700L))(this);
            };
            int64_t ctor_Clonable()
            {
                using org_ptr = int64_t (WINAPIV*)(struct Clonable*);
                return (org_ptr(0x1405f6700L))(this);
            };
            struct Clonable* Clone()
            {
                using org_ptr = struct Clonable* (WINAPIV*)(struct Clonable*);
                return (org_ptr(0x14044ccc0L))(this);
            };
            ~Clonable()
            {
                using org_ptr = void (WINAPIV*)(struct Clonable*);
                (org_ptr(0x14044a190L))(this);
            };
            void dtor_Clonable()
            {
                using org_ptr = void (WINAPIV*)(struct Clonable*);
                (org_ptr(0x14044a190L))(this);
            };
        };
        struct ClonableVtbl
        {
            void *(WINAPIV *__vecDelDtor)(Clonable *_this, unsigned int);
            Clonable *(WINAPIV *Clone)(Clonable *_this);
        };
        struct  Algorithm : Clonable
        {
        public:
            Algorithm(struct Algorithm* __that)
            {
                using org_ptr = void (WINAPIV*)(struct Algorithm*, struct Algorithm*);
                (org_ptr(0x140458510L))(this, __that);
            };
            void ctor_Algorithm(struct Algorithm* __that)
            {
                using org_ptr = void (WINAPIV*)(struct Algorithm*, struct Algorithm*);
                (org_ptr(0x140458510L))(this, __that);
            };
            Algorithm(bool arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Algorithm*, bool);
                (org_ptr(0x1405f3520L))(this, arg_0);
            };
            int64_t ctor_Algorithm(bool arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Algorithm*, bool);
                return (org_ptr(0x1405f3520L))(this, arg_0);
            };
            struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* AlgorithmName(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* result)
            {
                using org_ptr = struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (WINAPIV*)(struct Algorithm*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*);
                return (org_ptr(0x14044cdc0L))(this, result);
            };
            ~Algorithm()
            {
                using org_ptr = void (WINAPIV*)(struct Algorithm*);
                (org_ptr(0x14044a150L))(this);
            };
            void dtor_Algorithm()
            {
                using org_ptr = void (WINAPIV*)(struct Algorithm*);
                (org_ptr(0x14044a150L))(this);
            };
        };
        struct  RandomNumberGenerator : Algorithm
        {
        public:
            bool CanIncorporateEntropy()
            {
                using org_ptr = bool (WINAPIV*)(struct RandomNumberGenerator*);
                return (org_ptr(0x1405ef720L))(this);
            };
            void DiscardBytes(uint64_t arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct RandomNumberGenerator*, uint64_t);
                (org_ptr(0x1405f4110L))(this, arg_0);
            };
            unsigned int GenerateBit()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct RandomNumberGenerator*);
                return (org_ptr(0x1405f3f60L))(this);
            };
            void GenerateBlock(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct RandomNumberGenerator*, uint8_t*, uint64_t);
                (org_ptr(0x1405f4060L))(this, arg_0, arg_1);
            };
            uint8_t GenerateByte()
            {
                using org_ptr = uint8_t (WINAPIV*)(struct RandomNumberGenerator*);
                return (org_ptr(0x1405f3f90L))(this);
            };
            unsigned int GenerateWord32(unsigned int arg_0, unsigned int arg_1)
            {
                using org_ptr = unsigned int (WINAPIV*)(struct RandomNumberGenerator*, unsigned int, unsigned int);
                return (org_ptr(0x1405f3fd0L))(this, arg_0, arg_1);
            };
            void IncorporateEntropy(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct RandomNumberGenerator*, uint8_t*, uint64_t);
                (org_ptr(0x1405ef670L))(this, arg_0, arg_1);
            };
            RandomNumberGenerator()
            {
                using org_ptr = int64_t (WINAPIV*)(struct RandomNumberGenerator*);
                (org_ptr(0x14055bad0L))(this);
            };
            int64_t ctor_RandomNumberGenerator()
            {
                using org_ptr = int64_t (WINAPIV*)(struct RandomNumberGenerator*);
                return (org_ptr(0x14055bad0L))(this);
            };
            ~RandomNumberGenerator()
            {
                using org_ptr = void (WINAPIV*)(struct RandomNumberGenerator*);
                (org_ptr(0x14046bcb0L))(this);
            };
            void dtor_RandomNumberGenerator()
            {
                using org_ptr = void (WINAPIV*)(struct RandomNumberGenerator*);
                (org_ptr(0x14046bcb0L))(this);
            };
        };
        struct  NotCopyable
        {
        public:
            NotCopyable()
            {
                using org_ptr = void (WINAPIV*)(struct NotCopyable*);
                (org_ptr(0x140453a60L))(this);
            };
            void ctor_NotCopyable()
            {
                using org_ptr = void (WINAPIV*)(struct NotCopyable*);
                (org_ptr(0x140453a60L))(this);
            };
        };
        template<>
        struct  AllocatorBase<unsigned char>
        {
        };
        template<>
        struct  NullAllocator<unsigned char> : AllocatorBase<unsigned char>
        {
        };
        template<>
        struct  FixedSizeAllocatorWithCleanup<unsigned char,32,NullAllocator<unsigned char>,0> : AllocatorBase<unsigned char>
        {
            char m_array[32];
            NullAllocator<unsigned char> m_fallbackAllocator;
            bool m_allocated;
        };
        template<>
        struct SecBlock<unsigned char,FixedSizeAllocatorWithCleanup<unsigned char,32,NullAllocator<unsigned char>,0> >
        {
            FixedSizeAllocatorWithCleanup<unsigned char,32,NullAllocator<unsigned char>,0> m_alloc;
            unsigned __int64 m_size;
            char *m_ptr;
        };
        template<>
        struct  FixedSizeSecBlock<unsigned char,32,FixedSizeAllocatorWithCleanup<unsigned char,32,NullAllocator<unsigned char>,0> > : SecBlock<unsigned char,FixedSizeAllocatorWithCleanup<unsigned char,32,NullAllocator<unsigned char>,0> >
        {
        };
        template<>
        struct  FixedSizeAllocatorWithCleanup<unsigned char,16,NullAllocator<unsigned char>,0> : AllocatorBase<unsigned char>
        {
            char m_array[16];
            NullAllocator<unsigned char> m_fallbackAllocator;
            bool m_allocated;
        };
        template<>
        struct SecBlock<unsigned char,FixedSizeAllocatorWithCleanup<unsigned char,16,NullAllocator<unsigned char>,0> >
        {
            FixedSizeAllocatorWithCleanup<unsigned char,16,NullAllocator<unsigned char>,0> m_alloc;
            unsigned __int64 m_size;
            char *m_ptr;
        };
        template<>
        struct  FixedSizeSecBlock<unsigned char,16,FixedSizeAllocatorWithCleanup<unsigned char,16,NullAllocator<unsigned char>,0> > : SecBlock<unsigned char,FixedSizeAllocatorWithCleanup<unsigned char,16,NullAllocator<unsigned char>,0> >
        {
        };
        struct  BlockTransformation : Algorithm
        {
        public:
            unsigned int BlockAlignment()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct BlockTransformation*);
                return (org_ptr(0x1405f3df0L))(this);
            };
            BlockTransformation(struct BlockTransformation* __that)
            {
                using org_ptr = void (WINAPIV*)(struct BlockTransformation*, struct BlockTransformation*);
                (org_ptr(0x14045a1d0L))(this, __that);
            };
            void ctor_BlockTransformation(struct BlockTransformation* __that)
            {
                using org_ptr = void (WINAPIV*)(struct BlockTransformation*, struct BlockTransformation*);
                (org_ptr(0x14045a1d0L))(this, __that);
            };
            BlockTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct BlockTransformation*);
                (org_ptr(0x14045c970L))(this);
            };
            void ctor_BlockTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct BlockTransformation*);
                (org_ptr(0x14045c970L))(this);
            };
            struct CipherDir GetCipherDirection()
            {
                using org_ptr = struct CipherDir (WINAPIV*)(struct BlockTransformation*);
                return (org_ptr(0x140660620L))(this);
            };
            bool IsPermutation()
            {
                using org_ptr = bool (WINAPIV*)(struct BlockTransformation*);
                return (org_ptr(0x140459a60L))(this);
            };
            unsigned int OptimalNumberOfParallelBlocks()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct BlockTransformation*);
                return (org_ptr(0x140459a70L))(this);
            };
            void ProcessAndXorMultipleBlocks(uint8_t* arg_0, uint8_t* arg_1, uint8_t* arg_2, uint64_t arg_3)
            {
                using org_ptr = void (WINAPIV*)(struct BlockTransformation*, uint8_t*, uint8_t*, uint8_t*, uint64_t);
                (org_ptr(0x1405f3d30L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            void ProcessBlock(uint8_t* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct BlockTransformation*, uint8_t*);
                (org_ptr(0x14061d0a0L))(this, arg_0);
            };
            void ProcessBlock(uint8_t* arg_0, uint8_t* arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct BlockTransformation*, uint8_t*, uint8_t*);
                (org_ptr(0x14061d060L))(this, arg_0, arg_1);
            };
            ~BlockTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct BlockTransformation*);
                (org_ptr(0x14044a580L))(this);
            };
            void dtor_BlockTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct BlockTransformation*);
                (org_ptr(0x14044a580L))(this);
            };
        };
        struct SimpleKeyingInterface
        {
                enum IV_Requirement
                {
                    UNIQUE_IV = 0x0,
                    RANDOM_IV = 0x1,
                    UNPREDICTABLE_RANDOM_IV = 0x2,
                    INTERNALLY_GENERATED_IV = 0x3,
                    NOT_RESYNCHRONIZABLE = 0x4,
                };
            SimpleKeyingInterfaceVtbl *vfptr;
        public:
            void AssertValidKeyLength(uint64_t arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyingInterface*, uint64_t);
                (org_ptr(0x140622240L))(this, arg_0);
            };
            uint8_t* GetIVAndThrowIfInvalid(struct NameValuePairs* arg_0)
            {
                using org_ptr = uint8_t* (WINAPIV*)(struct SimpleKeyingInterface*, struct NameValuePairs*);
                return (org_ptr(0x1405f3c70L))(this, arg_0);
            };
            void GetNextIV(struct RandomNumberGenerator* arg_0, uint8_t* arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyingInterface*, struct RandomNumberGenerator*, uint8_t*);
                (org_ptr(0x1405f3cd0L))(this, arg_0, arg_1);
            };
            bool IsResynchronizable()
            {
                using org_ptr = bool (WINAPIV*)(struct SimpleKeyingInterface*);
                return (org_ptr(0x140586200L))(this);
            };
            bool IsValidKeyLength(uint64_t n)
            {
                using org_ptr = bool (WINAPIV*)(struct SimpleKeyingInterface*, uint64_t);
                return (org_ptr(0x1404598d0L))(this, n);
            };
            void Resynchronize(char* IV)
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyingInterface*, char*);
                (org_ptr(0x140459950L))(this, IV);
            };
            void SetKey(uint8_t* arg_0, uint64_t arg_1, struct NameValuePairs* arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyingInterface*, uint8_t*, uint64_t, struct NameValuePairs*);
                (org_ptr(0x1405f36e0L))(this, arg_0, arg_1, arg_2);
            };
            void SetKeyWithIV(uint8_t* arg_0, uint64_t arg_1, uint8_t* arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyingInterface*, uint8_t*, uint64_t, uint8_t*);
                (org_ptr(0x1405f37e0L))(this, arg_0, arg_1, arg_2);
            };
            void SetKeyWithRounds(uint8_t* arg_0, uint64_t arg_1, int arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyingInterface*, uint8_t*, uint64_t, int);
                (org_ptr(0x1405f3740L))(this, arg_0, arg_1, arg_2);
            };
            SimpleKeyingInterface(struct SimpleKeyingInterface* __that)
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyingInterface*, struct SimpleKeyingInterface*);
                (org_ptr(0x14045a230L))(this, __that);
            };
            void ctor_SimpleKeyingInterface(struct SimpleKeyingInterface* __that)
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyingInterface*, struct SimpleKeyingInterface*);
                (org_ptr(0x14045a230L))(this, __that);
            };
            SimpleKeyingInterface()
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyingInterface*);
                (org_ptr(0x140458210L))(this);
            };
            void ctor_SimpleKeyingInterface()
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyingInterface*);
                (org_ptr(0x140458210L))(this);
            };
            void ThrowIfInvalidIV(uint8_t* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyingInterface*, uint8_t*);
                (org_ptr(0x1405f3ad0L))(this, arg_0);
            };
            void ThrowIfInvalidKeyLength(uint64_t arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyingInterface*, uint64_t);
                (org_ptr(0x1405f3880L))(this, arg_0);
            };
            void ThrowIfResynchronizable()
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyingInterface*);
                (org_ptr(0x1405f3980L))(this);
            };
            ~SimpleKeyingInterface()
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyingInterface*);
                (org_ptr(0x140449ef0L))(this);
            };
            void dtor_SimpleKeyingInterface()
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyingInterface*);
                (org_ptr(0x140449ef0L))(this);
            };
        };
        const struct NameValuePairs
        {
                struct  ValueTypeMismatch : InvalidArgument
                {
                    type_info *m_stored;
                    type_info *m_retrieving;
                public:
                    ValueTypeMismatch(struct ValueTypeMismatch* __that)
                    {
                        using org_ptr = void (WINAPIV*)(struct ValueTypeMismatch*, struct ValueTypeMismatch*);
                        (org_ptr(0x14045b5c0L))(this, __that);
                    };
                    void ctor_ValueTypeMismatch(struct ValueTypeMismatch* __that)
                    {
                        using org_ptr = void (WINAPIV*)(struct ValueTypeMismatch*, struct ValueTypeMismatch*);
                        (org_ptr(0x14045b5c0L))(this, __that);
                    };
                    ValueTypeMismatch(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* name, struct type_info* stored, struct type_info* retrieving)
                    {
                        using org_ptr = void (WINAPIV*)(struct ValueTypeMismatch*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, struct type_info*, struct type_info*);
                        (org_ptr(0x14045b050L))(this, name, stored, retrieving);
                    };
                    void ctor_ValueTypeMismatch(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* name, struct type_info* stored, struct type_info* retrieving)
                    {
                        using org_ptr = void (WINAPIV*)(struct ValueTypeMismatch*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, struct type_info*, struct type_info*);
                        (org_ptr(0x14045b050L))(this, name, stored, retrieving);
                    };
                    ~ValueTypeMismatch()
                    {
                        using org_ptr = void (WINAPIV*)(struct ValueTypeMismatch*);
                        (org_ptr(0x14045b580L))(this);
                    };
                    void dtor_ValueTypeMismatch()
                    {
                        using org_ptr = void (WINAPIV*)(struct ValueTypeMismatch*);
                        (org_ptr(0x14045b580L))(this);
                    };
                };
            NameValuePairsVtbl *vfptr;
        public:
            bool GetIntValue(char* arg_0, int* arg_1)
            {
                using org_ptr = bool (WINAPIV*)(struct NameValuePairs*, char*, int*);
                return (org_ptr(0x1405ef560L))(this, arg_0, arg_1);
            };
            int64_t GetIntValueWithDefault(char* arg_0, int arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct NameValuePairs*, char*, int);
                return (org_ptr(0x14054b860L))(this, arg_0, arg_1);
            };
            void GetRequiredIntParameter(char* arg_0, char* arg_1, int* arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct NameValuePairs*, char*, char*, int*);
                (org_ptr(0x1405ffb70L))(this, arg_0, arg_1, arg_2);
            };
            bool GetThisObject(struct DL_GroupParameters_EC<ECP>* object)
            {
                using org_ptr = bool (WINAPIV*)(struct NameValuePairs*, struct DL_GroupParameters_EC<ECP>*);
                return (org_ptr(0x14045f540L))(this, object);
            };
            bool GetThisObject(struct DL_PrivateKey<ECPPoint>* object)
            {
                using org_ptr = bool (WINAPIV*)(struct NameValuePairs*, struct DL_PrivateKey<ECPPoint>*);
                return (org_ptr(0x140468f50L))(this, object);
            };
            bool GetThisObject(struct DL_PrivateKeyImpl<DL_GroupParameters_EC<ECP> >* object)
            {
                using org_ptr = bool (WINAPIV*)(struct NameValuePairs*, struct DL_PrivateKeyImpl<DL_GroupParameters_EC<ECP> >*);
                return (org_ptr(0x140467210L))(this, object);
            };
            bool GetThisObject(struct DL_PublicKey<ECPPoint>* object)
            {
                using org_ptr = bool (WINAPIV*)(struct NameValuePairs*, struct DL_PublicKey<ECPPoint>*);
                return (org_ptr(0x1404695e0L))(this, object);
            };
            bool GetThisObject(struct DL_PublicKeyImpl<DL_GroupParameters_EC<ECP> >* object)
            {
                using org_ptr = bool (WINAPIV*)(struct NameValuePairs*, struct DL_PublicKeyImpl<DL_GroupParameters_EC<ECP> >*);
                return (org_ptr(0x140467030L))(this, object);
            };
            bool GetThisPointer(struct DL_PrivateKey<ECPPoint>** p)
            {
                using org_ptr = bool (WINAPIV*)(struct NameValuePairs*, struct DL_PrivateKey<ECPPoint>**);
                return (org_ptr(0x140468720L))(this, p);
            };
            bool GetValue(char* name, struct ConstByteArrayParameter* value)
            {
                using org_ptr = bool (WINAPIV*)(struct NameValuePairs*, char*, struct ConstByteArrayParameter*);
                return (org_ptr(0x140464560L))(this, name, value);
            };
            bool GetValue(char* name, struct DL_GroupParameters_EC<ECP>* value)
            {
                using org_ptr = bool (WINAPIV*)(struct NameValuePairs*, char*, struct DL_GroupParameters_EC<ECP>*);
                return (org_ptr(0x1404667e0L))(this, name, value);
            };
            bool GetValue(char* name, struct DL_PrivateKey<ECPPoint>** value)
            {
                using org_ptr = bool (WINAPIV*)(struct NameValuePairs*, char*, struct DL_PrivateKey<ECPPoint>**);
                return (org_ptr(0x1404692d0L))(this, name, value);
            };
            bool GetValue(char* name, struct DL_PrivateKey<ECPPoint>* value)
            {
                using org_ptr = bool (WINAPIV*)(struct NameValuePairs*, char*, struct DL_PrivateKey<ECPPoint>*);
                return (org_ptr(0x140469480L))(this, name, value);
            };
            bool GetValue(char* name, struct DL_PrivateKeyImpl<DL_GroupParameters_EC<ECP> >* value)
            {
                using org_ptr = bool (WINAPIV*)(struct NameValuePairs*, char*, struct DL_PrivateKeyImpl<DL_GroupParameters_EC<ECP> >*);
                return (org_ptr(0x140468dc0L))(this, name, value);
            };
            bool GetValue(char* name, struct DL_PublicKey<ECPPoint>* value)
            {
                using org_ptr = bool (WINAPIV*)(struct NameValuePairs*, char*, struct DL_PublicKey<ECPPoint>*);
                return (org_ptr(0x140469830L))(this, name, value);
            };
            bool GetValue(char* name, struct DL_PublicKeyImpl<DL_GroupParameters_EC<ECP> >* value)
            {
                using org_ptr = bool (WINAPIV*)(struct NameValuePairs*, char*, struct DL_PublicKeyImpl<DL_GroupParameters_EC<ECP> >*);
                return (org_ptr(0x140468d50L))(this, name, value);
            };
            bool GetValue(char* name, struct ECPPoint* value)
            {
                using org_ptr = bool (WINAPIV*)(struct NameValuePairs*, char*, struct ECPPoint*);
                return (org_ptr(0x1404697c0L))(this, name, value);
            };
            bool GetValue(char* name, struct Integer* value)
            {
                using org_ptr = bool (WINAPIV*)(struct NameValuePairs*, char*, struct Integer*);
                return (org_ptr(0x140469410L))(this, name, value);
            };
            NameValuePairs(struct NameValuePairs* __that)
            {
                using org_ptr = void (WINAPIV*)(struct NameValuePairs*, struct NameValuePairs*);
                (org_ptr(0x140465f30L))(this, __that);
            };
            void ctor_NameValuePairs(struct NameValuePairs* __that)
            {
                using org_ptr = void (WINAPIV*)(struct NameValuePairs*, struct NameValuePairs*);
                (org_ptr(0x140465f30L))(this, __that);
            };
            NameValuePairs()
            {
                using org_ptr = void (WINAPIV*)(struct NameValuePairs*);
                (org_ptr(0x14044b080L))(this);
            };
            void ctor_NameValuePairs()
            {
                using org_ptr = void (WINAPIV*)(struct NameValuePairs*);
                (org_ptr(0x14044b080L))(this);
            };
            static void ThrowIfTypeMismatch(char* name, struct type_info* stored, struct type_info* retrieving)
            {
                using org_ptr = void (WINAPIV*)(char*, struct type_info*, struct type_info*);
                (org_ptr(0x14045af00L))(name, stored, retrieving);
            };
            ~NameValuePairs()
            {
                using org_ptr = void (WINAPIV*)(struct NameValuePairs*);
                (org_ptr(0x140448b80L))(this);
            };
            void dtor_NameValuePairs()
            {
                using org_ptr = void (WINAPIV*)(struct NameValuePairs*);
                (org_ptr(0x140448b80L))(this);
            };
        };
        struct NameValuePairsVtbl
        {
            void *(WINAPIV *__vecDelDtor)(NameValuePairs *_this, unsigned int);
            bool (WINAPIV *GetVoidValue)(NameValuePairs *_this, const char *, type_info *, void *);
        };
        struct SimpleKeyingInterfaceVtbl
        {
            void *(WINAPIV *__vecDelDtor)(SimpleKeyingInterface *_this, unsigned int);
            BYTE gap8[8];
            unsigned __int64 (WINAPIV *MaxKeyLength)(SimpleKeyingInterface *_this);
            unsigned __int64 (WINAPIV *DefaultKeyLength)(SimpleKeyingInterface *_this);
            unsigned __int64 (WINAPIV *GetValidKeyLength)(SimpleKeyingInterface *_this, unsigned __int64);
            bool (WINAPIV *IsValidKeyLength)(SimpleKeyingInterface *_this, unsigned __int64);
            void (WINAPIV *SetKey)(SimpleKeyingInterface *_this, const char *, unsigned __int64, NameValuePairs *);
            SimpleKeyingInterface::IV_Requirement (WINAPIV *IVRequirement)(SimpleKeyingInterface *_this);
            unsigned int (WINAPIV *IVSize)(SimpleKeyingInterface *_this);
            void (WINAPIV *Resynchronize)(SimpleKeyingInterface *_this, const char *);
            void (WINAPIV *GetNextIV)(SimpleKeyingInterface *_this, RandomNumberGenerator *, char *);
            Algorithm *(WINAPIV *GetAlgorithm)(SimpleKeyingInterface *_this);
            void (WINAPIV *UncheckedSetKey)(SimpleKeyingInterface *_this, const char *, unsigned int, NameValuePairs *);
        };
        template<>
        struct  SimpleKeyedTransformation<BlockTransformation> : BlockTransformation, SimpleKeyingInterface
        {
        public:
            struct Algorithm* GetAlgorithm()
            {
                using org_ptr = struct Algorithm* (WINAPIV*)(struct SimpleKeyedTransformation<BlockTransformation>*);
                return (org_ptr(0x140459a80L))(this);
            };
            SimpleKeyedTransformation(struct SimpleKeyedTransformation<BlockTransformation>* __that)
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyedTransformation<BlockTransformation>*, struct SimpleKeyedTransformation<BlockTransformation>*);
                (org_ptr(0x14045a130L))(this, __that);
            };
            void ctor_SimpleKeyedTransformation(struct SimpleKeyedTransformation<BlockTransformation>* __that)
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyedTransformation<BlockTransformation>*, struct SimpleKeyedTransformation<BlockTransformation>*);
                (org_ptr(0x14045a130L))(this, __that);
            };
            SimpleKeyedTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyedTransformation<BlockTransformation>*);
                (org_ptr(0x14045c910L))(this);
            };
            void ctor_SimpleKeyedTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyedTransformation<BlockTransformation>*);
                (org_ptr(0x14045c910L))(this);
            };
            ~SimpleKeyedTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyedTransformation<BlockTransformation>*);
                (org_ptr(0x14044a4c0L))(this);
            };
            void dtor_SimpleKeyedTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyedTransformation<BlockTransformation>*);
                (org_ptr(0x14044a4c0L))(this);
            };
        };
        template<>
        struct member_ptr<SimpleKeyedTransformation<BlockTransformation> >
        {
            SimpleKeyedTransformation<BlockTransformation> *m_p;
        };
        struct  RandomPool : RandomNumberGenerator, NotCopyable
        {
            FixedSizeSecBlock<unsigned char,32,FixedSizeAllocatorWithCleanup<unsigned char,32,NullAllocator<unsigned char>,0> > m_key;
            FixedSizeSecBlock<unsigned char,16,FixedSizeAllocatorWithCleanup<unsigned char,16,NullAllocator<unsigned char>,0> > m_seed;
            member_ptr<SimpleKeyedTransformation<BlockTransformation> > m_pCipher;
            bool m_keySet;
        public:
            bool CanIncorporateEntropy()
            {
                using org_ptr = bool (WINAPIV*)(struct RandomPool*);
                return (org_ptr(0x14046bae0L))(this);
            };
            void IncorporateEntropy(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct RandomPool*, uint8_t*, uint64_t);
                (org_ptr(0x140625bd0L))(this, arg_0, arg_1);
            };
            RandomPool()
            {
                using org_ptr = int64_t (WINAPIV*)(struct RandomPool*);
                (org_ptr(0x140625a80L))(this);
            };
            int64_t ctor_RandomPool()
            {
                using org_ptr = int64_t (WINAPIV*)(struct RandomPool*);
                return (org_ptr(0x140625a80L))(this);
            };
            ~RandomPool()
            {
                using org_ptr = void (WINAPIV*)(struct RandomPool*);
                (org_ptr(0x14046bb60L))(this);
            };
            void dtor_RandomPool()
            {
                using org_ptr = void (WINAPIV*)(struct RandomPool*);
                (org_ptr(0x14046bb60L))(this);
            };
        };
        struct  AutoSeededRandomPool : RandomPool
        {
        public:
            AutoSeededRandomPool(bool blocking, unsigned int seedSize)
            {
                using org_ptr = void (WINAPIV*)(struct AutoSeededRandomPool*, bool, unsigned int);
                (org_ptr(0x14046ba20L))(this, blocking, seedSize);
            };
            void ctor_AutoSeededRandomPool(bool blocking, unsigned int seedSize)
            {
                using org_ptr = void (WINAPIV*)(struct AutoSeededRandomPool*, bool, unsigned int);
                (org_ptr(0x14046ba20L))(this, blocking, seedSize);
            };
            void Reseed(bool arg_0, unsigned int arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct AutoSeededRandomPool*, bool, unsigned int);
                (org_ptr(0x1406253c0L))(this, arg_0, arg_1);
            };
            ~AutoSeededRandomPool()
            {
                using org_ptr = void (WINAPIV*)(struct AutoSeededRandomPool*);
                (org_ptr(0x14046bcf0L))(this);
            };
            void dtor_AutoSeededRandomPool()
            {
                using org_ptr = void (WINAPIV*)(struct AutoSeededRandomPool*);
                (org_ptr(0x14046bcf0L))(this);
            };
        };
        struct GeneratableCryptoMaterial
        {
            GeneratableCryptoMaterialVtbl *vfptr;
            BYTE gap8[16];
        public:
            GeneratableCryptoMaterial(struct GeneratableCryptoMaterial* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct GeneratableCryptoMaterial*, struct GeneratableCryptoMaterial*);
                (org_ptr(0x140560410L))(this, arg_0);
            };
            int64_t ctor_GeneratableCryptoMaterial(struct GeneratableCryptoMaterial* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct GeneratableCryptoMaterial*, struct GeneratableCryptoMaterial*);
                return (org_ptr(0x140560410L))(this, arg_0);
            };
            GeneratableCryptoMaterial()
            {
                using org_ptr = void (WINAPIV*)(struct GeneratableCryptoMaterial*);
                (org_ptr(0x14044c9f0L))(this);
            };
            void ctor_GeneratableCryptoMaterial()
            {
                using org_ptr = void (WINAPIV*)(struct GeneratableCryptoMaterial*);
                (org_ptr(0x14044c9f0L))(this);
            };
            void GenerateRandom(struct RandomNumberGenerator* rng, struct NameValuePairs* params)
            {
                using org_ptr = void (WINAPIV*)(struct GeneratableCryptoMaterial*, struct RandomNumberGenerator*, struct NameValuePairs*);
                (org_ptr(0x14044bb80L))(this, rng, params);
            };
            void GenerateRandomWithKeySize(struct RandomNumberGenerator* arg_0, unsigned int arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct GeneratableCryptoMaterial*, struct RandomNumberGenerator*, unsigned int);
                (org_ptr(0x1405f5d60L))(this, arg_0, arg_1);
            };
            ~GeneratableCryptoMaterial()
            {
                using org_ptr = void (WINAPIV*)(struct GeneratableCryptoMaterial*);
                (org_ptr(0x140449f80L))(this);
            };
            void dtor_GeneratableCryptoMaterial()
            {
                using org_ptr = void (WINAPIV*)(struct GeneratableCryptoMaterial*);
                (org_ptr(0x140449f80L))(this);
            };
        };
        struct GeneratableCryptoMaterialVtbl
        {
            void *(WINAPIV *__vecDelDtor)(GeneratableCryptoMaterial *_this, unsigned int);
        };
        struct  CryptoParameters : GeneratableCryptoMaterial
        {
        public:
            CryptoParameters(struct CryptoParameters* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct CryptoParameters*, struct CryptoParameters*);
                (org_ptr(0x1405601e0L))(this, arg_0);
            };
            int64_t ctor_CryptoParameters(struct CryptoParameters* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct CryptoParameters*, struct CryptoParameters*);
                return (org_ptr(0x1405601e0L))(this, arg_0);
            };
            CryptoParameters()
            {
                using org_ptr = void (WINAPIV*)(struct CryptoParameters*);
                (org_ptr(0x14045b850L))(this);
            };
            void ctor_CryptoParameters()
            {
                using org_ptr = void (WINAPIV*)(struct CryptoParameters*);
                (org_ptr(0x14045b850L))(this);
            };
            ~CryptoParameters()
            {
                using org_ptr = void (WINAPIV*)(struct CryptoParameters*);
                (org_ptr(0x14044a330L))(this);
            };
            void dtor_CryptoParameters()
            {
                using org_ptr = void (WINAPIV*)(struct CryptoParameters*);
                (org_ptr(0x14044a330L))(this);
            };
        };
        template<>
        const struct  DL_GroupParameters<ECPPoint> : CryptoParameters
        {
            BYTE gap18[16];
        public:
            DL_GroupParameters()
            {
                using org_ptr = void (WINAPIV*)(struct DL_GroupParameters<ECPPoint>*);
                (org_ptr(0x140459480L))(this);
            };
            void ctor_DL_GroupParameters()
            {
                using org_ptr = void (WINAPIV*)(struct DL_GroupParameters<ECPPoint>*);
                (org_ptr(0x140459480L))(this);
            };
            struct ECPPoint* ExponentiateBase(struct ECPPoint* result, struct Integer* exponent)
            {
                using org_ptr = struct ECPPoint* (WINAPIV*)(struct DL_GroupParameters<ECPPoint>*, struct ECPPoint*, struct Integer*);
                return (org_ptr(0x140450410L))(this, result, exponent);
            };
            struct ECPPoint* ExponentiateElement(struct ECPPoint* result, struct ECPPoint* base, struct Integer* exponent)
            {
                using org_ptr = struct ECPPoint* (WINAPIV*)(struct DL_GroupParameters<ECPPoint>*, struct ECPPoint*, struct ECPPoint*, struct Integer*);
                return (org_ptr(0x1404504d0L))(this, result, base, exponent);
            };
            struct Integer* GetCofactor(struct Integer* result)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct DL_GroupParameters<ECPPoint>*, struct Integer*);
                return (org_ptr(0x1404549c0L))(this, result);
            };
            struct Integer* GetGroupOrder(struct Integer* result)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct DL_GroupParameters<ECPPoint>*, struct Integer*);
                return (org_ptr(0x140450680L))(this, result);
            };
            struct ECPPoint* GetSubgroupGenerator()
            {
                using org_ptr = struct ECPPoint* (WINAPIV*)(struct DL_GroupParameters<ECPPoint>*);
                return (org_ptr(0x1404502e0L))(this);
            };
            bool GetVoidValue(char* name, struct type_info* valueType, void* pValue)
            {
                using org_ptr = bool (WINAPIV*)(struct DL_GroupParameters<ECPPoint>*, char*, struct type_info*, void*);
                return (org_ptr(0x140469b00L))(this, name, valueType, pValue);
            };
            void LoadPrecomputation(struct BufferedTransformation* storedPrecomputation)
            {
                using org_ptr = void (WINAPIV*)(struct DL_GroupParameters<ECPPoint>*, struct BufferedTransformation*);
                (org_ptr(0x14046a5e0L))(this, storedPrecomputation);
            };
            void Precompute(unsigned int precomputationStorage)
            {
                using org_ptr = void (WINAPIV*)(struct DL_GroupParameters<ECPPoint>*, unsigned int);
                (org_ptr(0x1404699c0L))(this, precomputationStorage);
            };
            void SavePrecomputation(struct BufferedTransformation* storedPrecomputation)
            {
                using org_ptr = void (WINAPIV*)(struct DL_GroupParameters<ECPPoint>*, struct BufferedTransformation*);
                (org_ptr(0x14046acc0L))(this, storedPrecomputation);
            };
            void SetSubgroupGenerator(struct ECPPoint* base)
            {
                using org_ptr = void (WINAPIV*)(struct DL_GroupParameters<ECPPoint>*, struct ECPPoint*);
                (org_ptr(0x140450370L))(this, base);
            };
            bool SupportsPrecomputation()
            {
                using org_ptr = bool (WINAPIV*)(struct DL_GroupParameters<ECPPoint>*);
                return (org_ptr(0x140469ad0L))(this);
            };
            bool Validate(struct RandomNumberGenerator* rng, unsigned int level)
            {
                using org_ptr = bool (WINAPIV*)(struct DL_GroupParameters<ECPPoint>*, struct RandomNumberGenerator*, unsigned int);
                return (org_ptr(0x14046a920L))(this, rng, level);
            };
            ~DL_GroupParameters()
            {
                using org_ptr = void (WINAPIV*)(struct DL_GroupParameters<ECPPoint>*);
                (org_ptr(0x140449f90L))(this);
            };
            void dtor_DL_GroupParameters()
            {
                using org_ptr = void (WINAPIV*)(struct DL_GroupParameters<ECPPoint>*);
                (org_ptr(0x140449f90L))(this);
            };
        };
        template<>
        struct DL_Key<ECPPoint>
        {
            DL_Key<ECPPoint>Vtbl *vfptr;
        public:
            DL_Key()
            {
                using org_ptr = void (WINAPIV*)(struct DL_Key<ECPPoint>*);
                (org_ptr(0x14044c040L))(this);
            };
            void ctor_DL_Key()
            {
                using org_ptr = void (WINAPIV*)(struct DL_Key<ECPPoint>*);
                (org_ptr(0x14044c040L))(this);
            };
        };
        template<>
        struct DL_Key<ECPPoint>Vtbl
        {
            DL_GroupParameters<ECPPoint> *(WINAPIV *GetAbstractGroupParameters)(DL_Key<ECPPoint> *_this);
            DL_GroupParameters<ECPPoint> *(WINAPIV *AccessAbstractGroupParameters)(DL_Key<ECPPoint> *_this);
        };
        template<>
        struct  DL_PrivateKey<ECPPoint> : DL_Key<ECPPoint>
        {
        public:
            void AssignFrom(struct NameValuePairs* source)
            {
                using org_ptr = void (WINAPIV*)(struct DL_PrivateKey<ECPPoint>*, struct NameValuePairs*);
                (org_ptr(0x1404661e0L))(this, source);
            };
            DL_PrivateKey()
            {
                using org_ptr = void (WINAPIV*)(struct DL_PrivateKey<ECPPoint>*);
                (org_ptr(0x14044b400L))(this);
            };
            void ctor_DL_PrivateKey()
            {
                using org_ptr = void (WINAPIV*)(struct DL_PrivateKey<ECPPoint>*);
                (org_ptr(0x14044b400L))(this);
            };
            bool GetVoidValue(char* name, struct type_info* valueType, void* pValue)
            {
                using org_ptr = bool (WINAPIV*)(struct DL_PrivateKey<ECPPoint>*, char*, struct type_info*, void*);
                return (org_ptr(0x1404660b0L))(this, name, valueType, pValue);
            };
            void MakePublicKey(struct DL_PublicKey<ECPPoint>* pub)
            {
                using org_ptr = void (WINAPIV*)(struct DL_PrivateKey<ECPPoint>*, struct DL_PublicKey<ECPPoint>*);
                (org_ptr(0x140467bb0L))(this, pub);
            };
        };
        struct ASN1Object
        {
            ASN1ObjectVtbl *vfptr;
        public:
            ASN1Object(struct ASN1Object* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ASN1Object*, struct ASN1Object*);
                (org_ptr(0x14055fdf0L))(this, arg_0);
            };
            int64_t ctor_ASN1Object(struct ASN1Object* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ASN1Object*, struct ASN1Object*);
                return (org_ptr(0x14055fdf0L))(this, arg_0);
            };
            ASN1Object()
            {
                using org_ptr = void (WINAPIV*)(struct ASN1Object*);
                (org_ptr(0x14044c870L))(this);
            };
            void ctor_ASN1Object()
            {
                using org_ptr = void (WINAPIV*)(struct ASN1Object*);
                (org_ptr(0x14044c870L))(this);
            };
            void BEREncode(struct BufferedTransformation* bt)
            {
                using org_ptr = void (WINAPIV*)(struct ASN1Object*, struct BufferedTransformation*);
                (org_ptr(0x14044ae80L))(this, bt);
            };
            ~ASN1Object()
            {
                using org_ptr = void (WINAPIV*)(struct ASN1Object*);
                (org_ptr(0x140448e50L))(this);
            };
            void dtor_ASN1Object()
            {
                using org_ptr = void (WINAPIV*)(struct ASN1Object*);
                (org_ptr(0x140448e50L))(this);
            };
        };
        struct Waitable
        {
            WaitableVtbl *vfptr;
        public:
            Waitable(struct Waitable* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Waitable*, struct Waitable*);
                (org_ptr(0x14054b570L))(this, arg_0);
            };
            int64_t ctor_Waitable(struct Waitable* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Waitable*, struct Waitable*);
                return (org_ptr(0x14054b570L))(this, arg_0);
            };
            Waitable()
            {
                using org_ptr = void (WINAPIV*)(struct Waitable*);
                (org_ptr(0x140453d70L))(this);
            };
            void ctor_Waitable()
            {
                using org_ptr = void (WINAPIV*)(struct Waitable*);
                (org_ptr(0x140453d70L))(this);
            };
            ~Waitable()
            {
                using org_ptr = void (WINAPIV*)(struct Waitable*);
                (org_ptr(0x14044d9a0L))(this);
            };
            void dtor_Waitable()
            {
                using org_ptr = void (WINAPIV*)(struct Waitable*);
                (org_ptr(0x14044d9a0L))(this);
            };
        };
        struct WaitableVtbl
        {
            void *(WINAPIV *__vecDelDtor)(Waitable *_this, unsigned int);
            unsigned int (WINAPIV *GetMaxWaitObjectCount)(Waitable *_this);
            void (WINAPIV *GetWaitObjects)(Waitable *_this, struct WaitObjectContainer *, const struct CallStack *);
        };
        struct  BufferedTransformation : Algorithm, Waitable
        {
                struct  BlockingInputOnly : NotImplemented
                {
                public:
                    BlockingInputOnly(struct BlockingInputOnly* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct BlockingInputOnly*, struct BlockingInputOnly*);
                        (org_ptr(0x1405feb60L))(this, arg_0);
                    };
                    int64_t ctor_BlockingInputOnly(struct BlockingInputOnly* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct BlockingInputOnly*, struct BlockingInputOnly*);
                        return (org_ptr(0x1405feb60L))(this, arg_0);
                    };
                    ~BlockingInputOnly()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct BlockingInputOnly*);
                        (org_ptr(0x140600460L))(this);
                    };
                    int64_t dtor_BlockingInputOnly()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct BlockingInputOnly*);
                        return (org_ptr(0x140600460L))(this);
                    };
                };
                struct  NoChannelSupport : NotImplemented
                {
                public:
                    NoChannelSupport(struct NoChannelSupport* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct NoChannelSupport*, struct NoChannelSupport*);
                        (org_ptr(0x1405f6a10L))(this, arg_0);
                    };
                    int64_t ctor_NoChannelSupport(struct NoChannelSupport* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct NoChannelSupport*, struct NoChannelSupport*);
                        return (org_ptr(0x1405f6a10L))(this, arg_0);
                    };
                    NoChannelSupport()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct NoChannelSupport*);
                        (org_ptr(0x1405f79e0L))(this);
                    };
                    int64_t ctor_NoChannelSupport()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct NoChannelSupport*);
                        return (org_ptr(0x1405f79e0L))(this);
                    };
                    ~NoChannelSupport()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct NoChannelSupport*);
                        (org_ptr(0x1405f7b70L))(this);
                    };
                    int64_t dtor_NoChannelSupport()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct NoChannelSupport*);
                        return (org_ptr(0x1405f7b70L))(this);
                    };
                };
            char m_buf[4];
        public:
            bool AnyMessages()
            {
                using org_ptr = bool (WINAPIV*)(struct BufferedTransformation*);
                return (org_ptr(0x1405f5210L))(this);
            };
            bool AnyRetrievable()
            {
                using org_ptr = bool (WINAPIV*)(struct BufferedTransformation*);
                return (org_ptr(0x1405f4ca0L))(this);
            };
            void Attach(struct BufferedTransformation* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct BufferedTransformation*, struct BufferedTransformation*);
                (org_ptr(0x1405f5cb0L))(this, arg_0);
            };
            bool Attachable()
            {
                using org_ptr = bool (WINAPIV*)(struct BufferedTransformation*);
                return (org_ptr(0x140453830L))(this);
            };
            struct BufferedTransformation* AttachedTransformation()
            {
                using org_ptr = struct BufferedTransformation* (WINAPIV*)(struct BufferedTransformation*);
                return (org_ptr(0x140453840L))(this);
            };
            struct BufferedTransformation* AttachedTransformation()
            {
                using org_ptr = struct BufferedTransformation* (WINAPIV*)(struct BufferedTransformation*);
                return (org_ptr(0x1404538c0L))(this);
            };
            BufferedTransformation(struct BufferedTransformation* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct BufferedTransformation*, struct BufferedTransformation*);
                (org_ptr(0x14054b500L))(this, arg_0);
            };
            int64_t ctor_BufferedTransformation(struct BufferedTransformation* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct BufferedTransformation*, struct BufferedTransformation*);
                return (org_ptr(0x14054b500L))(this, arg_0);
            };
            BufferedTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct BufferedTransformation*);
                (org_ptr(0x140453d10L))(this);
            };
            void ctor_BufferedTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct BufferedTransformation*);
                (org_ptr(0x140453d10L))(this);
            };
            bool CanModifyInput()
            {
                using org_ptr = bool (WINAPIV*)(struct BufferedTransformation*);
                return (org_ptr(0x14044ce80L))(this);
            };
            char* CreatePutSpace(uint64_t* size)
            {
                using org_ptr = char* (WINAPIV*)(struct BufferedTransformation*, uint64_t*);
                return (org_ptr(0x14044ce50L))(this, size);
            };
            void Detach(struct BufferedTransformation* newAttachment)
            {
                using org_ptr = void (WINAPIV*)(struct BufferedTransformation*, struct BufferedTransformation*);
                (org_ptr(0x140453910L))(this, newAttachment);
            };
            bool Flush(bool arg_0, int arg_1, bool arg_2)
            {
                using org_ptr = bool (WINAPIV*)(struct BufferedTransformation*, bool, int, bool);
                return (org_ptr(0x1405f4870L))(this, arg_0, arg_1, arg_2);
            };
            uint64_t Get(uint8_t* arg_0)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct BufferedTransformation*, uint8_t*);
                return (org_ptr(0x1405f4d30L))(this, arg_0);
            };
            uint64_t Get(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct BufferedTransformation*, uint8_t*, uint64_t);
                return (org_ptr(0x1405f4dc0L))(this, arg_0, arg_1);
            };
            int64_t GetAutoSignalPropagation()
            {
                using org_ptr = int64_t (WINAPIV*)(struct BufferedTransformation*);
                return (org_ptr(0x14054b930L))(this);
            };
            unsigned int GetMaxWaitObjectCount()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct BufferedTransformation*);
                return (org_ptr(0x1405f4700L))(this);
            };
            bool GetNextMessage()
            {
                using org_ptr = bool (WINAPIV*)(struct BufferedTransformation*);
                return (org_ptr(0x1405f52a0L))(this);
            };
            bool GetNextMessageSeries()
            {
                using org_ptr = bool (WINAPIV*)(struct BufferedTransformation*);
                return (org_ptr(0x14044cf10L))(this);
            };
            void GetWaitObjects(WaitObjectContainer* arg_0, CallStack* arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct BufferedTransformation*, WaitObjectContainer*, CallStack*);
                (org_ptr(0x1405f4780L))(this, arg_0, arg_1);
            };
            uint64_t GetWord16(uint16_t* arg_0, struct ByteOrder arg_1)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct BufferedTransformation*, uint16_t*, struct ByteOrder);
                return (org_ptr(0x1405f5bf0L))(this, arg_0, arg_1);
            };
            uint64_t GetWord32(unsigned int* arg_0, struct ByteOrder arg_1)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct BufferedTransformation*, unsigned int*, struct ByteOrder);
                return (org_ptr(0x1405f5c50L))(this, arg_0, arg_1);
            };
            void Initialize(struct NameValuePairs* arg_0, int arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct BufferedTransformation*, struct NameValuePairs*, int);
                (org_ptr(0x1405f4800L))(this, arg_0, arg_1);
            };
            void IsolatedInitialize(struct NameValuePairs* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct BufferedTransformation*, struct NameValuePairs*);
                (org_ptr(0x1405f77d0L))(this, arg_0);
            };
            bool IsolatedMessageSeriesEnd(bool arg_0)
            {
                using org_ptr = bool (WINAPIV*)(struct BufferedTransformation*, bool);
                return (org_ptr(0x14054b910L))(this, arg_0);
            };
            uint64_t MaxRetrievable()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct BufferedTransformation*);
                return (org_ptr(0x1405f4c20L))(this);
            };
            bool MessageEnd(int arg_0, bool arg_1)
            {
                using org_ptr = bool (WINAPIV*)(struct BufferedTransformation*, int, bool);
                return (org_ptr(0x14054f440L))(this, arg_0, arg_1);
            };
            bool MessageSeriesEnd(int arg_0, bool arg_1)
            {
                using org_ptr = bool (WINAPIV*)(struct BufferedTransformation*, int, bool);
                return (org_ptr(0x1405f48f0L))(this, arg_0, arg_1);
            };
            unsigned int NumberOfMessageSeries()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct BufferedTransformation*);
                return (org_ptr(0x14044cf70L))(this);
            };
            unsigned int NumberOfMessages()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct BufferedTransformation*);
                return (org_ptr(0x1405f5190L))(this);
            };
            unsigned int NumberOfMessagesInThisSeries()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct BufferedTransformation*);
                return (org_ptr(0x14044cf20L))(this);
            };
            uint64_t Peek(uint8_t* arg_0)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct BufferedTransformation*, uint8_t*);
                return (org_ptr(0x1405f4ee0L))(this, arg_0);
            };
            uint64_t Peek(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct BufferedTransformation*, uint8_t*, uint64_t);
                return (org_ptr(0x1405f4f70L))(this, arg_0, arg_1);
            };
            uint64_t PeekWord16(uint16_t* arg_0, struct ByteOrder arg_1)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct BufferedTransformation*, uint16_t*, struct ByteOrder);
                return (org_ptr(0x1405f5aa0L))(this, arg_0, arg_1);
            };
            uint64_t PeekWord32(unsigned int* arg_0, struct ByteOrder arg_1)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct BufferedTransformation*, unsigned int*, struct ByteOrder);
                return (org_ptr(0x1405f5b30L))(this, arg_0, arg_1);
            };
            uint64_t Put(uint8_t* arg_0, uint64_t arg_1, bool arg_2)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct BufferedTransformation*, uint8_t*, uint64_t, bool);
                return (org_ptr(0x14054b8c0L))(this, arg_0, arg_1, arg_2);
            };
            uint64_t Put(uint8_t arg_0, bool arg_1)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct BufferedTransformation*, uint8_t, bool);
                return (org_ptr(0x14054f400L))(this, arg_0, arg_1);
            };
            uint64_t PutModifiable(uint8_t* arg_0, uint64_t arg_1, bool arg_2)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct BufferedTransformation*, uint8_t*, uint64_t, bool);
                return (org_ptr(0x140600310L))(this, arg_0, arg_1, arg_2);
            };
            uint64_t PutModifiable2(char* inString, uint64_t length, int messageEnd, bool blocking)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct BufferedTransformation*, char*, uint64_t, int, bool);
                return (org_ptr(0x14044ce90L))(this, inString, length, messageEnd, blocking);
            };
            uint64_t PutWord16(uint16_t arg_0, struct ByteOrder arg_1, bool arg_2)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct BufferedTransformation*, uint16_t, struct ByteOrder, bool);
                return (org_ptr(0x1405f5a00L))(this, arg_0, arg_1, arg_2);
            };
            uint64_t PutWord32(unsigned int arg_0, struct ByteOrder arg_1, bool arg_2)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct BufferedTransformation*, unsigned int, struct ByteOrder, bool);
                return (org_ptr(0x1405f5a50L))(this, arg_0, arg_1, arg_2);
            };
            void SetAutoSignalPropagation(int arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct BufferedTransformation*, int);
                (org_ptr(0x14054b920L))(this, arg_0);
            };
            uint64_t Skip(uint64_t arg_0)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct BufferedTransformation*, uint64_t);
                return (org_ptr(0x1405f5090L))(this, arg_0);
            };
            void SkipAll()
            {
                using org_ptr = void (WINAPIV*)(struct BufferedTransformation*);
                (org_ptr(0x1405f5600L))(this);
            };
            unsigned int SkipMessages(unsigned int arg_0)
            {
                using org_ptr = unsigned int (WINAPIV*)(struct BufferedTransformation*, unsigned int);
                return (org_ptr(0x1405f5340L))(this, arg_0);
            };
            uint64_t TotalBytesRetrievable()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct BufferedTransformation*);
                return (org_ptr(0x1405f5120L))(this);
            };
            ~BufferedTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct BufferedTransformation*);
                (org_ptr(0x14044d8e0L))(this);
            };
            void dtor_BufferedTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct BufferedTransformation*);
                (org_ptr(0x14044d8e0L))(this);
            };
        };
        struct ASN1ObjectVtbl
        {
            void *(WINAPIV *__vecDelDtor)(ASN1Object *_this, unsigned int);
            void (WINAPIV *BERDecode)(ASN1Object *_this, BufferedTransformation *);
            void (WINAPIV *DEREncode)(ASN1Object *_this, BufferedTransformation *);
            void (WINAPIV *BEREncode)(ASN1Object *_this, BufferedTransformation *);
        };
        struct  PrivateKey : GeneratableCryptoMaterial
        {
        public:
            PrivateKey(struct PrivateKey* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct PrivateKey*, struct PrivateKey*);
                (org_ptr(0x140633b10L))(this, arg_0);
            };
            int64_t ctor_PrivateKey(struct PrivateKey* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct PrivateKey*, struct PrivateKey*);
                return (org_ptr(0x140633b10L))(this, arg_0);
            };
            PrivateKey()
            {
                using org_ptr = void (WINAPIV*)(struct PrivateKey*);
                (org_ptr(0x14044c880L))(this);
            };
            void ctor_PrivateKey()
            {
                using org_ptr = void (WINAPIV*)(struct PrivateKey*);
                (org_ptr(0x14044c880L))(this);
            };
            ~PrivateKey()
            {
                using org_ptr = void (WINAPIV*)(struct PrivateKey*);
                (org_ptr(0x140449c80L))(this);
            };
            void dtor_PrivateKey()
            {
                using org_ptr = void (WINAPIV*)(struct PrivateKey*);
                (org_ptr(0x140449c80L))(this);
            };
        };
        template<>
        struct  ASN1CryptoMaterial<PrivateKey> : ASN1Object, PrivateKey
        {
        public:
            ASN1CryptoMaterial()
            {
                using org_ptr = void (WINAPIV*)(struct ASN1CryptoMaterial<PrivateKey>*);
                (org_ptr(0x14044c5e0L))(this);
            };
            void ctor_ASN1CryptoMaterial()
            {
                using org_ptr = void (WINAPIV*)(struct ASN1CryptoMaterial<PrivateKey>*);
                (org_ptr(0x14044c5e0L))(this);
            };
            void Load(struct BufferedTransformation* bt)
            {
                using org_ptr = void (WINAPIV*)(struct ASN1CryptoMaterial<PrivateKey>*, struct BufferedTransformation*);
                (org_ptr(0x14046a3e0L))(this, bt);
            };
            void Save(struct BufferedTransformation* bt)
            {
                using org_ptr = void (WINAPIV*)(struct ASN1CryptoMaterial<PrivateKey>*, struct BufferedTransformation*);
                (org_ptr(0x14046a7d0L))(this, bt);
            };
            ~ASN1CryptoMaterial()
            {
                using org_ptr = void (WINAPIV*)(struct ASN1CryptoMaterial<PrivateKey>*);
                (org_ptr(0x1404497a0L))(this);
            };
            void dtor_ASN1CryptoMaterial()
            {
                using org_ptr = void (WINAPIV*)(struct ASN1CryptoMaterial<PrivateKey>*);
                (org_ptr(0x1404497a0L))(this);
            };
        };
        template<>
        struct  Bufferless<BufferedTransformation> : BufferedTransformation
        {
        };
        template<>
        struct  ByteQueue : Bufferless<BufferedTransformation>
        {
                template<>
                struct  Walker : InputRejecting<BufferedTransformation>
                {
                    ByteQueue *m_queue;
                    const struct ByteQueueNode *m_node;
                    unsigned __int64 m_position;
                    unsigned __int64 m_offset;
                    const char *m_lazyString;
                    unsigned __int64 m_lazyLength;
                public:
                    uint64_t Get(uint8_t* arg_0)
                    {
                        using org_ptr = uint64_t (WINAPIV*)(struct Walker*, uint8_t*);
                        return (org_ptr(0x14054a630L))(this, arg_0);
                    };
                    uint64_t Get(uint8_t* arg_0, uint64_t arg_1)
                    {
                        using org_ptr = uint64_t (WINAPIV*)(struct Walker*, uint8_t*, uint64_t);
                        return (org_ptr(0x14054a6e0L))(this, arg_0, arg_1);
                    };
                    uint64_t GetCurrentPosition()
                    {
                        using org_ptr = uint64_t (WINAPIV*)(struct Walker*);
                        return (org_ptr(0x14054e370L))(this);
                    };
                    void IsolatedInitialize(struct NameValuePairs* arg_0)
                    {
                        using org_ptr = void (WINAPIV*)(struct Walker*, struct NameValuePairs*);
                        (org_ptr(0x14054a5c0L))(this, arg_0);
                    };
                    uint64_t MaxRetrievable()
                    {
                        using org_ptr = uint64_t (WINAPIV*)(struct Walker*);
                        return (org_ptr(0x14054b2a0L))(this);
                    };
                    uint64_t Peek(uint8_t* arg_0)
                    {
                        using org_ptr = uint64_t (WINAPIV*)(struct Walker*, uint8_t*);
                        return (org_ptr(0x14054a790L))(this, arg_0);
                    };
                    uint64_t Peek(uint8_t* arg_0, uint64_t arg_1)
                    {
                        using org_ptr = uint64_t (WINAPIV*)(struct Walker*, uint8_t*, uint64_t);
                        return (org_ptr(0x14054a840L))(this, arg_0, arg_1);
                    };
                    Walker(struct ByteQueue* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct Walker*, struct ByteQueue*);
                        (org_ptr(0x14054b200L))(this, arg_0);
                    };
                    int64_t ctor_Walker(struct ByteQueue* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct Walker*, struct ByteQueue*);
                        return (org_ptr(0x14054b200L))(this, arg_0);
                    };
                    Walker(struct Walker* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct Walker*, struct Walker*);
                        (org_ptr(0x14054b410L))(this, arg_0);
                    };
                    int64_t ctor_Walker(struct Walker* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct Walker*, struct Walker*);
                        return (org_ptr(0x14054b410L))(this, arg_0);
                    };
                    ~Walker()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct Walker*);
                        (org_ptr(0x14054b310L))(this);
                    };
                    int64_t dtor_Walker()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct Walker*);
                        return (org_ptr(0x14054b310L))(this);
                    };
                };
            bool m_autoNodeSize;
            unsigned __int64 m_nodeSize;
            struct ByteQueueNode *m_head;
            struct ByteQueueNode *m_tail;
            char *m_lazyString;
            unsigned __int64 m_lazyLength;
            bool m_lazyStringModifiable;
        public:
            bool AnyRetrievable()
            {
                using org_ptr = bool (WINAPIV*)(struct ByteQueue*);
                return (org_ptr(0x14054acb0L))(this);
            };
            ByteQueue(struct ByteQueue* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ByteQueue*, struct ByteQueue*);
                (org_ptr(0x140548ea0L))(this, arg_0);
            };
            int64_t ctor_ByteQueue(struct ByteQueue* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ByteQueue*, struct ByteQueue*);
                return (org_ptr(0x140548ea0L))(this, arg_0);
            };
            ByteQueue(uint64_t arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ByteQueue*, uint64_t);
                (org_ptr(0x140548d20L))(this, arg_0);
            };
            int64_t ctor_ByteQueue(uint64_t arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ByteQueue*, uint64_t);
                return (org_ptr(0x140548d20L))(this, arg_0);
            };
            void CleanupUsedNodes()
            {
                using org_ptr = void (WINAPIV*)(struct ByteQueue*);
                (org_ptr(0x140549540L))(this);
            };
            void Clear()
            {
                using org_ptr = void (WINAPIV*)(struct ByteQueue*);
                (org_ptr(0x1405492f0L))(this);
            };
            void CopyFrom(struct ByteQueue* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct ByteQueue*, struct ByteQueue*);
                (org_ptr(0x140548f20L))(this, arg_0);
            };
            uint8_t* CreatePutSpace(uint64_t* arg_0)
            {
                using org_ptr = uint8_t* (WINAPIV*)(struct ByteQueue*, uint64_t*);
                return (org_ptr(0x14054a130L))(this, arg_0);
            };
            uint64_t CurrentSize()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct ByteQueue*);
                return (org_ptr(0x140549210L))(this);
            };
            void Destroy()
            {
                using org_ptr = void (WINAPIV*)(struct ByteQueue*);
                (org_ptr(0x140549140L))(this);
            };
            void FinalizeLazyPut()
            {
                using org_ptr = void (WINAPIV*)(struct ByteQueue*);
                (org_ptr(0x1405497f0L))(this);
            };
            uint64_t Get(uint8_t* arg_0)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct ByteQueue*, uint8_t*);
                return (org_ptr(0x140549850L))(this, arg_0);
            };
            uint64_t Get(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct ByteQueue*, uint8_t*, uint64_t);
                return (org_ptr(0x140549910L))(this, arg_0, arg_1);
            };
            bool IsEmpty()
            {
                using org_ptr = bool (WINAPIV*)(struct ByteQueue*);
                return (org_ptr(0x140549290L))(this);
            };
            void IsolatedInitialize(struct NameValuePairs* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct ByteQueue*, struct NameValuePairs*);
                (org_ptr(0x1405491c0L))(this, arg_0);
            };
            void LazyPut(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct ByteQueue*, uint8_t*, uint64_t);
                (org_ptr(0x140549610L))(this, arg_0, arg_1);
            };
            void LazyPutModifiable(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct ByteQueue*, uint8_t*, uint64_t);
                (org_ptr(0x1405496b0L))(this, arg_0, arg_1);
            };
            uint64_t MaxRetrievable()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct ByteQueue*);
                return (org_ptr(0x14054ac90L))(this);
            };
            uint64_t Peek(uint8_t* arg_0)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct ByteQueue*, uint8_t*);
                return (org_ptr(0x1405499c0L))(this, arg_0);
            };
            uint64_t Peek(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct ByteQueue*, uint8_t*, uint64_t);
                return (org_ptr(0x140549a30L))(this, arg_0, arg_1);
            };
            uint64_t Put2(uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct ByteQueue*, uint8_t*, uint64_t, int, bool);
                return (org_ptr(0x1405493b0L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            void SetNodeSize(uint64_t arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct ByteQueue*, uint64_t);
                (org_ptr(0x140548e30L))(this, arg_0);
            };
            uint8_t* Spy(uint64_t* arg_0)
            {
                using org_ptr = uint8_t* (WINAPIV*)(struct ByteQueue*, uint64_t*);
                return (org_ptr(0x14054a090L))(this, arg_0);
            };
            void UndoLazyPut(uint64_t arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct ByteQueue*, uint64_t);
                (org_ptr(0x140549710L))(this, arg_0);
            };
            void Unget(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct ByteQueue*, uint8_t*, uint64_t);
                (org_ptr(0x140549ee0L))(this, arg_0, arg_1);
            };
            void Unget(uint8_t arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct ByteQueue*, uint8_t);
                (org_ptr(0x140549eb0L))(this, arg_0);
            };
            void swap(struct ByteQueue* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct ByteQueue*, struct ByteQueue*);
                (org_ptr(0x14054a4f0L))(this, arg_0);
            };
            ~ByteQueue()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ByteQueue*);
                (org_ptr(0x1405490d0L))(this);
            };
            int64_t dtor_ByteQueue()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ByteQueue*);
                return (org_ptr(0x1405490d0L))(this);
            };
        };
        template<>
        struct  PKCS8PrivateKey : ASN1CryptoMaterial<PrivateKey>
        {
            BYTE m_optionalAttributes[72];
        public:
            void BERDecode(struct BufferedTransformation* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct PKCS8PrivateKey*, struct BufferedTransformation*);
                (org_ptr(0x14054dce0L))(this, arg_0);
            };
            bool BERDecodeAlgorithmParameters(struct BufferedTransformation* bt)
            {
                using org_ptr = bool (WINAPIV*)(struct PKCS8PrivateKey*, struct BufferedTransformation*);
                return (org_ptr(0x14044c260L))(this, bt);
            };
            void BERDecodeOptionalAttributes(struct BufferedTransformation* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct PKCS8PrivateKey*, struct BufferedTransformation*);
                (org_ptr(0x14054e1b0L))(this, arg_0);
            };
            void DEREncode(struct BufferedTransformation* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct PKCS8PrivateKey*, struct BufferedTransformation*);
                (org_ptr(0x14054df80L))(this, arg_0);
            };
            bool DEREncodeAlgorithmParameters(struct BufferedTransformation* bt)
            {
                using org_ptr = bool (WINAPIV*)(struct PKCS8PrivateKey*, struct BufferedTransformation*);
                return (org_ptr(0x14044c2b0L))(this, bt);
            };
            void DEREncodeOptionalAttributes(struct BufferedTransformation* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct PKCS8PrivateKey*, struct BufferedTransformation*);
                (org_ptr(0x14054e1e0L))(this, arg_0);
            };
            PKCS8PrivateKey(struct PKCS8PrivateKey* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct PKCS8PrivateKey*, struct PKCS8PrivateKey*);
                (org_ptr(0x140633770L))(this, arg_0);
            };
            int64_t ctor_PKCS8PrivateKey(struct PKCS8PrivateKey* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct PKCS8PrivateKey*, struct PKCS8PrivateKey*);
                return (org_ptr(0x140633770L))(this, arg_0);
            };
            PKCS8PrivateKey()
            {
                using org_ptr = void (WINAPIV*)(struct PKCS8PrivateKey*);
                (org_ptr(0x14044c0c0L))(this);
            };
            void ctor_PKCS8PrivateKey()
            {
                using org_ptr = void (WINAPIV*)(struct PKCS8PrivateKey*);
                (org_ptr(0x14044c0c0L))(this);
            };
            ~PKCS8PrivateKey()
            {
                using org_ptr = void (WINAPIV*)(struct PKCS8PrivateKey*);
                (org_ptr(0x140449510L))(this);
            };
            void dtor_PKCS8PrivateKey()
            {
                using org_ptr = void (WINAPIV*)(struct PKCS8PrivateKey*);
                (org_ptr(0x140449510L))(this);
            };
        };
        template<>
        struct DL_GroupPrecomputation<ECPPoint>
        {
            DL_GroupPrecomputation<ECPPoint>Vtbl *vfptr;
        public:
            struct ECPPoint* ConvertIn(struct ECPPoint* result, struct ECPPoint* v)
            {
                using org_ptr = struct ECPPoint* (WINAPIV*)(struct DL_GroupPrecomputation<ECPPoint>*, struct ECPPoint*, struct ECPPoint*);
                return (org_ptr(0x140457ae0L))(this, result, v);
            };
            struct ECPPoint* ConvertOut(struct ECPPoint* result, struct ECPPoint* v)
            {
                using org_ptr = struct ECPPoint* (WINAPIV*)(struct DL_GroupPrecomputation<ECPPoint>*, struct ECPPoint*, struct ECPPoint*);
                return (org_ptr(0x140457b50L))(this, result, v);
            };
            DL_GroupPrecomputation()
            {
                using org_ptr = void (WINAPIV*)(struct DL_GroupPrecomputation<ECPPoint>*);
                (org_ptr(0x140457aa0L))(this);
            };
            void ctor_DL_GroupPrecomputation()
            {
                using org_ptr = void (WINAPIV*)(struct DL_GroupPrecomputation<ECPPoint>*);
                (org_ptr(0x140457aa0L))(this);
            };
            bool NeedConversions()
            {
                using org_ptr = bool (WINAPIV*)(struct DL_GroupPrecomputation<ECPPoint>*);
                return (org_ptr(0x140457ad0L))(this);
            };
        };
        struct  InitializeInteger
        {
        public:
            InitializeInteger()
            {
                using org_ptr = int64_t (WINAPIV*)(struct InitializeInteger*);
                (org_ptr(0x1405e4030L))(this);
            };
            int64_t ctor_InitializeInteger()
            {
                using org_ptr = int64_t (WINAPIV*)(struct InitializeInteger*);
                return (org_ptr(0x1405e4030L))(this);
            };
        };
        template<>
        struct  AllocatorBase<unsigned __int64>
        {
        };
        template<>
        struct  AllocatorWithCleanup<unsigned __int64,0> : AllocatorBase<unsigned __int64>
        {
        public:
            void deallocate(void* p, uint64_t n)
            {
                using org_ptr = void (WINAPIV*)(struct AllocatorWithCleanup<unsigned __int64,0>*, void*, uint64_t);
                (org_ptr(0x140458a30L))(this, p, n);
            };
        };
        template<>
        struct SecBlock<unsigned __int64,AllocatorWithCleanup<unsigned __int64,0> >
        {
            AllocatorWithCleanup<unsigned __int64,0> m_alloc;
            unsigned __int64 m_size;
            unsigned __int64 *m_ptr;
        };
        struct  Integer : ASN1Object, InitializeInteger
        {
                enum Sign
                {
                    POSITIVE = 0x0,
                    NEGATIVE = 0x1,
                };
                enum Signedness
                {
                    UNSIGNED = 0x0,
                    SIGNED = 0x1,
                };
                enum RandomNumberType
                {
                    ANY = 0x0,
                    PRIME = 0x1,
                };
                struct  DivideByZero : Exception
                {
                public:
                    DivideByZero(struct DivideByZero* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct DivideByZero*, struct DivideByZero*);
                        (org_ptr(0x1405ef9a0L))(this, arg_0);
                    };
                    int64_t ctor_DivideByZero(struct DivideByZero* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct DivideByZero*, struct DivideByZero*);
                        return (org_ptr(0x1405ef9a0L))(this, arg_0);
                    };
                    DivideByZero()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct DivideByZero*);
                        (org_ptr(0x1405ef880L))(this);
                    };
                    int64_t ctor_DivideByZero()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct DivideByZero*);
                        return (org_ptr(0x1405ef880L))(this);
                    };
                    ~DivideByZero()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct DivideByZero*);
                        (org_ptr(0x1405ef980L))(this);
                    };
                    int64_t dtor_DivideByZero()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct DivideByZero*);
                        return (org_ptr(0x1405ef980L))(this);
                    };
                };
                struct  RandomNumberNotFound : Exception
                {
                public:
                    RandomNumberNotFound(struct RandomNumberNotFound* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct RandomNumberNotFound*, struct RandomNumberNotFound*);
                        (org_ptr(0x1405eef90L))(this, arg_0);
                    };
                    int64_t ctor_RandomNumberNotFound(struct RandomNumberNotFound* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct RandomNumberNotFound*, struct RandomNumberNotFound*);
                        return (org_ptr(0x1405eef90L))(this, arg_0);
                    };
                    RandomNumberNotFound()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct RandomNumberNotFound*);
                        (org_ptr(0x1405eee70L))(this);
                    };
                    int64_t ctor_RandomNumberNotFound()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct RandomNumberNotFound*);
                        return (org_ptr(0x1405eee70L))(this);
                    };
                    ~RandomNumberNotFound()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct RandomNumberNotFound*);
                        (org_ptr(0x1405eef70L))(this);
                    };
                    int64_t dtor_RandomNumberNotFound()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct RandomNumberNotFound*);
                        return (org_ptr(0x1405eef70L))(this);
                    };
                };
                struct  OpenPGPDecodeErr : Exception
                {
                public:
                    OpenPGPDecodeErr(struct OpenPGPDecodeErr* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct OpenPGPDecodeErr*, struct OpenPGPDecodeErr*);
                        (org_ptr(0x1405ef350L))(this, arg_0);
                    };
                    int64_t ctor_OpenPGPDecodeErr(struct OpenPGPDecodeErr* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct OpenPGPDecodeErr*, struct OpenPGPDecodeErr*);
                        return (org_ptr(0x1405ef350L))(this, arg_0);
                    };
                    OpenPGPDecodeErr()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct OpenPGPDecodeErr*);
                        (org_ptr(0x1405ef230L))(this);
                    };
                    int64_t ctor_OpenPGPDecodeErr()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct OpenPGPDecodeErr*);
                        return (org_ptr(0x1405ef230L))(this);
                    };
                    ~OpenPGPDecodeErr()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct OpenPGPDecodeErr*);
                        (org_ptr(0x1405ef330L))(this);
                    };
                    int64_t dtor_OpenPGPDecodeErr()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct OpenPGPDecodeErr*);
                        return (org_ptr(0x1405ef330L))(this);
                    };
                };
            SecBlock<unsigned __int64,AllocatorWithCleanup<unsigned __int64,0> > reg;
            Sign sign;
        public:
            struct Integer* AbsoluteValue(short retstr)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct Integer*, short);
                return (org_ptr(0x1405e55f0L))(this, retstr);
            };
            void BERDecode(struct BufferedTransformation* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct Integer*, struct BufferedTransformation*);
                (org_ptr(0x1405e65b0L))(this, arg_0);
            };
            void BERDecode(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct Integer*, uint8_t*, uint64_t);
                (org_ptr(0x1405e6500L))(this, arg_0, arg_1);
            };
            void BERDecodeAsOctetString(struct BufferedTransformation* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct Integer*, struct BufferedTransformation*, uint64_t);
                (org_ptr(0x1405e6760L))(this, arg_0, arg_1);
            };
            unsigned int BitCount()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct Integer*);
                return (org_ptr(0x1405e5b00L))(this);
            };
            unsigned int ByteCount()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct Integer*);
                return (org_ptr(0x1405e5aa0L))(this);
            };
            int64_t Compare(struct Integer* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Integer*, struct Integer*);
                return (org_ptr(0x1405ead20L))(this, arg_0);
            };
            int32_t ConvertToLong()
            {
                using org_ptr = int32_t (WINAPIV*)(struct Integer*);
                return (org_ptr(0x1405e4820L))(this);
            };
            void DEREncode(struct BufferedTransformation* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct Integer*, struct BufferedTransformation*);
                (org_ptr(0x1405e6440L))(this, arg_0);
            };
            void DEREncodeAsOctetString(struct BufferedTransformation* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct Integer*, struct BufferedTransformation*, uint64_t);
                (org_ptr(0x1405e66a0L))(this, arg_0, arg_1);
            };
            void Decode(struct BufferedTransformation* arg_0, uint64_t arg_1, struct Signedness arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct Integer*, struct BufferedTransformation*, uint64_t, struct Signedness);
                (org_ptr(0x1405e5c20L))(this, arg_0, arg_1, arg_2);
            };
            void Decode(uint8_t* arg_0, uint64_t arg_1, struct Signedness arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct Integer*, uint8_t*, uint64_t, struct Signedness);
                (org_ptr(0x1405e5b70L))(this, arg_0, arg_1, arg_2);
            };
            static void Divide(struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2, struct Integer* arg_3)
            {
                using org_ptr = void (WINAPIV*)(struct Integer*, struct Integer*, struct Integer*, struct Integer*);
                (org_ptr(0x1405e9f80L))(arg_0, arg_1, arg_2, arg_3);
            };
            static void Divide(uint64_t* arg_0, struct Integer* arg_1, struct Integer* arg_2, uint64_t arg_3)
            {
                using org_ptr = void (WINAPIV*)(uint64_t*, struct Integer*, struct Integer*, uint64_t);
                (org_ptr(0x1405ea6a0L))(arg_0, arg_1, arg_2, arg_3);
            };
            static void DivideByPowerOf2(struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2, unsigned int arg_3)
            {
                using org_ptr = void (WINAPIV*)(struct Integer*, struct Integer*, struct Integer*, unsigned int);
                (org_ptr(0x1405ea100L))(arg_0, arg_1, arg_2, arg_3);
            };
            struct Integer* DividedBy(short retstr, struct Integer* arg_0)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct Integer*, short, struct Integer*);
                return (org_ptr(0x1405ea480L))(this, retstr, arg_0);
            };
            struct Integer* DividedBy(short retstr, struct Integer* arg_0)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct Integer*, short, struct Integer*);
                return (org_ptr(0x1405ea980L))(this, retstr, arg_0);
            };
            struct Integer* Doubled(short retstr)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct Integer*, short);
                return (org_ptr(0x1405f06f0L))(this, retstr);
            };
            void Encode(struct BufferedTransformation* arg_0, uint64_t arg_1, struct Signedness arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct Integer*, struct BufferedTransformation*, uint64_t, struct Signedness);
                (org_ptr(0x1405e62b0L))(this, arg_0, arg_1, arg_2);
            };
            void Encode(uint8_t* arg_0, uint64_t arg_1, struct Signedness arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct Integer*, uint8_t*, uint64_t, struct Signedness);
                (org_ptr(0x1405e6200L))(this, arg_0, arg_1, arg_2);
            };
            static struct Integer* Gcd(short retstr, struct Integer* arg_0, struct Integer* arg_1)
            {
                using org_ptr = struct Integer* (WINAPIV*)(short, struct Integer*, struct Integer*);
                return (org_ptr(0x1405eb4c0L))(retstr, arg_0, arg_1);
            };
            bool GenerateRandomNoThrow(struct RandomNumberGenerator* arg_0, struct NameValuePairs* arg_1)
            {
                using org_ptr = bool (WINAPIV*)(struct Integer*, struct RandomNumberGenerator*, struct NameValuePairs*);
                return (org_ptr(0x1405e6fc0L))(this, arg_0, arg_1);
            };
            bool GetBit(uint64_t arg_0)
            {
                using org_ptr = bool (WINAPIV*)(struct Integer*, uint64_t);
                return (org_ptr(0x1405e5090L))(this, arg_0);
            };
            uint64_t GetBits(uint64_t arg_0, uint64_t arg_1)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct Integer*, uint64_t, uint64_t);
                return (org_ptr(0x1405e5480L))(this, arg_0, arg_1);
            };
            uint8_t GetByte(uint64_t arg_0)
            {
                using org_ptr = uint8_t (WINAPIV*)(struct Integer*, uint64_t);
                return (org_ptr(0x1405e52a0L))(this, arg_0);
            };
            Integer(struct BufferedTransformation* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Integer*, struct BufferedTransformation*);
                (org_ptr(0x1405e4a80L))(this, arg_0);
            };
            int64_t ctor_Integer(struct BufferedTransformation* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Integer*, struct BufferedTransformation*);
                return (org_ptr(0x1405e4a80L))(this, arg_0);
            };
            Integer(struct BufferedTransformation* arg_0, uint64_t arg_1, struct Signedness arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Integer*, struct BufferedTransformation*, uint64_t, struct Signedness);
                (org_ptr(0x1405e48c0L))(this, arg_0, arg_1, arg_2);
            };
            int64_t ctor_Integer(struct BufferedTransformation* arg_0, uint64_t arg_1, struct Signedness arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Integer*, struct BufferedTransformation*, uint64_t, struct Signedness);
                return (org_ptr(0x1405e48c0L))(this, arg_0, arg_1, arg_2);
            };
            Integer(struct Integer* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Integer*, struct Integer*);
                (org_ptr(0x1405e4250L))(this, arg_0);
            };
            int64_t ctor_Integer(struct Integer* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Integer*, struct Integer*);
                return (org_ptr(0x1405e4250L))(this, arg_0);
            };
            Integer(struct Sign arg_0, uint64_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Integer*, struct Sign, uint64_t);
                (org_ptr(0x1405e4420L))(this, arg_0, arg_1);
            };
            int64_t ctor_Integer(struct Sign arg_0, uint64_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Integer*, struct Sign, uint64_t);
                return (org_ptr(0x1405e4420L))(this, arg_0, arg_1);
            };
            Integer(struct Sign arg_0, uint64_t arg_1, uint64_t arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Integer*, struct Sign, uint64_t, uint64_t);
                (org_ptr(0x1405e4660L))(this, arg_0, arg_1, arg_2);
            };
            int64_t ctor_Integer(struct Sign arg_0, uint64_t arg_1, uint64_t arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Integer*, struct Sign, uint64_t, uint64_t);
                return (org_ptr(0x1405e4660L))(this, arg_0, arg_1, arg_2);
            };
            Integer(struct RandomNumberGenerator* arg_0, struct Integer* arg_1, struct Integer* arg_2, struct RandomNumberType arg_3, struct Integer* arg_4, struct Integer* arg_5)
            {
                using org_ptr = int64_t (WINAPIV*)(struct RandomNumberType, struct RandomNumberGenerator*, struct Integer*, struct Integer*, struct RandomNumberType, struct Integer*, struct Integer*);
                (org_ptr(0x1405e4c10L))(this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5);
            };
            int64_t ctor_Integer(struct RandomNumberGenerator* arg_0, struct Integer* arg_1, struct Integer* arg_2, struct RandomNumberType arg_3, struct Integer* arg_4, struct Integer* arg_5)
            {
                using org_ptr = int64_t (WINAPIV*)(struct RandomNumberType, struct RandomNumberGenerator*, struct Integer*, struct Integer*, struct RandomNumberType, struct Integer*, struct Integer*);
                return (org_ptr(0x1405e4c10L))(this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5);
            };
            Integer(struct RandomNumberGenerator* arg_0, uint64_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Integer*, struct RandomNumberGenerator*, uint64_t);
                (org_ptr(0x1405e4b40L))(this, arg_0, arg_1);
            };
            int64_t ctor_Integer(struct RandomNumberGenerator* arg_0, uint64_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Integer*, struct RandomNumberGenerator*, uint64_t);
                return (org_ptr(0x1405e4b40L))(this, arg_0, arg_1);
            };
            Integer(char* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Integer*, char*);
                (org_ptr(0x1405e5830L))(this, arg_0);
            };
            int64_t ctor_Integer(char* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Integer*, char*);
                return (org_ptr(0x1405e5830L))(this, arg_0);
            };
            Integer(int32_t arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Integer*, int32_t);
                (org_ptr(0x1405e4530L))(this, arg_0);
            };
            int64_t ctor_Integer(int32_t arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Integer*, int32_t);
                return (org_ptr(0x1405e4530L))(this, arg_0);
            };
            Integer(uint8_t* arg_0, uint64_t arg_1, struct Signedness arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Integer*, uint8_t*, uint64_t, struct Signedness);
                (org_ptr(0x1405e49a0L))(this, arg_0, arg_1, arg_2);
            };
            int64_t ctor_Integer(uint8_t* arg_0, uint64_t arg_1, struct Signedness arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Integer*, uint8_t*, uint64_t, struct Signedness);
                return (org_ptr(0x1405e49a0L))(this, arg_0, arg_1, arg_2);
            };
            Integer(uint64_t arg_0, uint64_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Integer*, uint64_t, uint64_t);
                (org_ptr(0x1405e5700L))(this, arg_0, arg_1);
            };
            int64_t ctor_Integer(uint64_t arg_0, uint64_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Integer*, uint64_t, uint64_t);
                return (org_ptr(0x1405e5700L))(this, arg_0, arg_1);
            };
            Integer()
            {
                using org_ptr = void (WINAPIV*)(void*);
                (org_ptr(0x1405e4160L))(arg_0);
            };
            void ctor_Integer()
            {
                using org_ptr = void (WINAPIV*)(void*);
                (org_ptr(0x1405e4160L))(arg_0);
            };
            Integer(wchar_t* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Integer*, wchar_t*);
                (org_ptr(0x1405e5940L))(this, arg_0);
            };
            int64_t ctor_Integer(wchar_t* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Integer*, wchar_t*);
                return (org_ptr(0x1405e5940L))(this, arg_0);
            };
            struct Integer* InverseMod(short retstr, struct Integer* arg_0)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct Integer*, short, struct Integer*);
                return (org_ptr(0x1405eb5f0L))(this, retstr, arg_0);
            };
            uint64_t InverseMod(uint64_t arg_0)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct Integer*, uint64_t);
                return (org_ptr(0x1405ebde0L))(this, arg_0);
            };
            bool IsConvertableToLong()
            {
                using org_ptr = bool (WINAPIV*)(struct Integer*);
                return (org_ptr(0x1405e4760L))(this);
            };
            bool IsEven()
            {
                using org_ptr = bool (WINAPIV*)(struct Integer*);
                return (org_ptr(0x14057fad0L))(this);
            };
            bool IsNegative()
            {
                using org_ptr = bool (WINAPIV*)(struct Integer*);
                return (org_ptr(0x140451ad0L))(this);
            };
            bool IsOdd()
            {
                using org_ptr = bool (WINAPIV*)(struct Integer*);
                return (org_ptr(0x1405eff90L))(this);
            };
            bool IsPositive()
            {
                using org_ptr = bool (WINAPIV*)(struct Integer*);
                return (org_ptr(0x140451930L))(this);
            };
            bool IsSquare()
            {
                using org_ptr = bool (WINAPIV*)(struct Integer*);
                return (org_ptr(0x1405eb140L))(this);
            };
            bool IsUnit()
            {
                using org_ptr = bool (WINAPIV*)(struct Integer*);
                return (org_ptr(0x1405eb210L))(this);
            };
            bool IsZero()
            {
                using org_ptr = bool (WINAPIV*)(struct Integer*);
                return (org_ptr(0x140451a20L))(this);
            };
            uint64_t MinEncodedSize(struct Signedness arg_0)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct Integer*, struct Signedness);
                return (org_ptr(0x1405e5fa0L))(this, arg_0);
            };
            struct Integer* Minus(short retstr, struct Integer* arg_0)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct Integer*, short, struct Integer*);
                return (org_ptr(0x1405e9590L))(this, retstr, arg_0);
            };
            struct Integer* Modulo(short retstr, struct Integer* arg_0)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct Integer*, short, struct Integer*);
                return (org_ptr(0x1405ea590L))(this, retstr, arg_0);
            };
            uint64_t Modulo(uint64_t arg_0)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct Integer*, uint64_t);
                return (org_ptr(0x1405eaa50L))(this, arg_0);
            };
            struct Integer* MultiplicativeInverse(short retstr)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct Integer*, short);
                return (org_ptr(0x1405eb260L))(this, retstr);
            };
            void Negate()
            {
                using org_ptr = void (WINAPIV*)(struct Integer*);
                (org_ptr(0x1405eac30L))(this);
            };
            bool NotNegative()
            {
                using org_ptr = bool (WINAPIV*)(struct Integer*);
                return (org_ptr(0x140451a60L))(this);
            };
            bool NotZero()
            {
                using org_ptr = bool (WINAPIV*)(struct Integer*);
                return (org_ptr(0x1404519b0L))(this);
            };
            static struct Integer* One()
            {
                using org_ptr = struct Integer* (WINAPIV*)();
                return (org_ptr(0x1405e4e70L))();
            };
            void OpenPGPDecode(struct BufferedTransformation* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct Integer*, struct BufferedTransformation*);
                (org_ptr(0x1405e6a00L))(this, arg_0);
            };
            void OpenPGPDecode(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct Integer*, uint8_t*, uint64_t);
                (org_ptr(0x1405e6960L))(this, arg_0, arg_1);
            };
            uint64_t OpenPGPEncode(struct BufferedTransformation* arg_0)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct Integer*, struct BufferedTransformation*);
                return (org_ptr(0x1405e68e0L))(this, arg_0);
            };
            uint64_t OpenPGPEncode(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct Integer*, uint8_t*, uint64_t);
                return (org_ptr(0x1405e6840L))(this, arg_0, arg_1);
            };
            struct Integer* Plus(short retstr, struct Integer* arg_0)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct Integer*, short, struct Integer*);
                return (org_ptr(0x1405e9300L))(this, retstr, arg_0);
            };
            int64_t PositiveCompare(struct Integer* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Integer*, struct Integer*);
                return (org_ptr(0x1405eac70L))(this, arg_0);
            };
            static struct Integer* Power2(short retstr, struct Integer* arg_0)
            {
                using org_ptr = struct Integer* (WINAPIV*)(short, struct Integer*);
                return (org_ptr(0x1405e4d50L))(retstr, arg_0);
            };
            void Randomize(struct RandomNumberGenerator* arg_0, struct Integer* arg_1, struct Integer* arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct Integer*, struct RandomNumberGenerator*, struct Integer*, struct Integer*);
                (org_ptr(0x1405e6bd0L))(this, arg_0, arg_1, arg_2);
            };
            bool Randomize(struct RandomNumberGenerator* arg_0, struct Integer* arg_1, struct Integer* arg_2, struct RandomNumberType arg_3, struct Integer* arg_4, struct Integer* arg_5)
            {
                using org_ptr = bool (WINAPIV*)(struct Integer*, struct RandomNumberGenerator*, struct Integer*, struct Integer*, struct RandomNumberType, struct Integer*, struct Integer*);
                return (org_ptr(0x1405e6d50L))(this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5);
            };
            void Randomize(struct RandomNumberGenerator* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct Integer*, struct RandomNumberGenerator*, uint64_t);
                (org_ptr(0x1405e6ab0L))(this, arg_0, arg_1);
            };
            void SetBit(uint64_t arg_0, bool arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct Integer*, uint64_t, bool);
                (org_ptr(0x1405e5130L))(this, arg_0, arg_1);
            };
            void SetByte(uint64_t arg_0, uint8_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct Integer*, uint64_t, uint8_t);
                (org_ptr(0x1405e5340L))(this, arg_0, arg_1);
            };
            struct Integer* SquareRoot(short retstr)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct Integer*, short);
                return (org_ptr(0x1405eadb0L))(this, retstr);
            };
            struct Integer* Squared(struct Integer* result)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct Integer*, struct Integer*);
                return (org_ptr(0x140462670L))(this, result);
            };
            struct Integer* Times(short retstr, struct Integer* arg_0)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct Integer*, short, struct Integer*);
                return (org_ptr(0x1405e9c10L))(this, retstr, arg_0);
            };
            static struct Integer* Two()
            {
                using org_ptr = struct Integer* (WINAPIV*)();
                return (org_ptr(0x1405e4eb0L))();
            };
            unsigned int WordCount()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct Integer*);
                return (org_ptr(0x1405e5a50L))(this);
            };
            static struct Integer* Zero()
            {
                using org_ptr = struct Integer* (WINAPIV*)();
                return (org_ptr(0x1405e4e30L))();
            };
            void swap(struct Integer* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct Integer*, struct Integer*);
                (org_ptr(0x1405e56b0L))(this, arg_0);
            };
            ~Integer()
            {
                using org_ptr = void (WINAPIV*)(struct Integer*);
                (org_ptr(0x140448dc0L))(this);
            };
            void dtor_Integer()
            {
                using org_ptr = void (WINAPIV*)(struct Integer*);
                (org_ptr(0x140448dc0L))(this);
            };
        };
        struct ECPPoint
        {
            bool identity;
            Integer x;
            Integer y;
        public:
            ECPPoint(struct ECPPoint* __that)
            {
                using org_ptr = void (WINAPIV*)(struct ECPPoint*, struct ECPPoint*);
                (org_ptr(0x140450080L))(this, __that);
            };
            void ctor_ECPPoint(struct ECPPoint* __that)
            {
                using org_ptr = void (WINAPIV*)(struct ECPPoint*, struct ECPPoint*);
                (org_ptr(0x140450080L))(this, __that);
            };
            ECPPoint(struct Integer* x, struct Integer* y)
            {
                using org_ptr = void (WINAPIV*)(struct ECPPoint*, struct Integer*, struct Integer*);
                (org_ptr(0x140456fe0L))(this, x, y);
            };
            void ctor_ECPPoint(struct Integer* x, struct Integer* y)
            {
                using org_ptr = void (WINAPIV*)(struct ECPPoint*, struct Integer*, struct Integer*);
                (org_ptr(0x140456fe0L))(this, x, y);
            };
            ECPPoint()
            {
                using org_ptr = void (WINAPIV*)(struct ECPPoint*);
                (org_ptr(0x14044bf80L))(this);
            };
            void ctor_ECPPoint()
            {
                using org_ptr = void (WINAPIV*)(struct ECPPoint*);
                (org_ptr(0x14044bf80L))(this);
            };
            ~ECPPoint()
            {
                using org_ptr = void (WINAPIV*)(struct ECPPoint*);
                (org_ptr(0x1404492c0L))(this);
            };
            void dtor_ECPPoint()
            {
                using org_ptr = void (WINAPIV*)(struct ECPPoint*);
                (org_ptr(0x1404492c0L))(this);
            };
        };
        template<>
        const struct AbstractGroup<ECPPoint>
        {
            AbstractGroup<ECPPoint>Vtbl *vfptr;
        public:
            int64_t CascadeScalarMultiply(struct Integer* arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ECPPoint*, struct Integer*);
                return (org_ptr(0x140576df0L))(arg_0, arg_1);
            };
        };
        template<>
        struct AbstractGroup<ECPPoint>Vtbl
        {
            void *(WINAPIV *__vecDelDtor)(AbstractGroup<ECPPoint> *_this, unsigned int);
            BYTE gap8[8];
            ECPPoint *(WINAPIV *Identity)(AbstractGroup<ECPPoint> *_this);
            ECPPoint *(WINAPIV *Add)(AbstractGroup<ECPPoint> *_this, ECPPoint *, ECPPoint *);
            ECPPoint *(WINAPIV *Inverse)(AbstractGroup<ECPPoint> *_this, ECPPoint *);
            bool (WINAPIV *InversionIsFast)(AbstractGroup<ECPPoint> *_this);
            ECPPoint *(WINAPIV *Double)(AbstractGroup<ECPPoint> *_this, ECPPoint *);
            ECPPoint *(WINAPIV *Subtract)(AbstractGroup<ECPPoint> *_this, ECPPoint *, ECPPoint *);
            ECPPoint *(WINAPIV *Accumulate)(AbstractGroup<ECPPoint> *_this, ECPPoint *, ECPPoint *);
            ECPPoint *(WINAPIV *Reduce)(AbstractGroup<ECPPoint> *_this, ECPPoint *, ECPPoint *);
            ECPPoint *(WINAPIV *ScalarMultiply)(AbstractGroup<ECPPoint> *_this, ECPPoint *result, ECPPoint *, Integer *);
            ECPPoint *(WINAPIV *CascadeScalarMultiply)(AbstractGroup<ECPPoint> *_this, ECPPoint *result, ECPPoint *, Integer *, ECPPoint *, Integer *);
            void (WINAPIV *SimultaneousMultiply)(AbstractGroup<ECPPoint> *_this, ECPPoint *, ECPPoint *, Integer *, unsigned int);
        };
        template<>
        struct DL_GroupPrecomputation<ECPPoint>Vtbl
        {
            bool (WINAPIV *NeedConversions)(DL_GroupPrecomputation<ECPPoint> *_this);
            ECPPoint *(WINAPIV *ConvertIn)(DL_GroupPrecomputation<ECPPoint> *_this, ECPPoint *result, ECPPoint *);
            ECPPoint *(WINAPIV *ConvertOut)(DL_GroupPrecomputation<ECPPoint> *_this, ECPPoint *result, ECPPoint *);
            AbstractGroup<ECPPoint> *(WINAPIV *GetGroup)(DL_GroupPrecomputation<ECPPoint> *_this);
            ECPPoint *(WINAPIV *BERDecodeElement)(DL_GroupPrecomputation<ECPPoint> *_this, ECPPoint *result, BufferedTransformation *);
            void (WINAPIV *DEREncodeElement)(DL_GroupPrecomputation<ECPPoint> *_this, BufferedTransformation *, ECPPoint *);
        };
        template<>
        struct AbstractGroup<Integer>
        {
            AbstractGroup<Integer>Vtbl *vfptr;
        public:
            AbstractGroup()
            {
                using org_ptr = void (WINAPIV*)(struct AbstractGroup<Integer>*);
                (org_ptr(0x140462cb0L))(this);
            };
            void ctor_AbstractGroup()
            {
                using org_ptr = void (WINAPIV*)(struct AbstractGroup<Integer>*);
                (org_ptr(0x140462cb0L))(this);
            };
            int64_t CascadeScalarMultiply(struct Integer* arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(int64_t, struct Integer*);
                return (org_ptr(0x14056d330L))(arg_0, arg_1);
            };
            bool InversionIsFast()
            {
                using org_ptr = bool (WINAPIV*)(struct AbstractGroup<Integer>*);
                return (org_ptr(0x140462c10L))(this);
            };
            ~AbstractGroup()
            {
                using org_ptr = void (WINAPIV*)(struct AbstractGroup<Integer>*);
                (org_ptr(0x140462c00L))(this);
            };
            void dtor_AbstractGroup()
            {
                using org_ptr = void (WINAPIV*)(struct AbstractGroup<Integer>*);
                (org_ptr(0x140462c00L))(this);
            };
        };
        template<>
        struct AbstractGroup<Integer>Vtbl
        {
            void *(WINAPIV *__vecDelDtor)(AbstractGroup<Integer> *_this, unsigned int);
            BYTE gap8[8];
            Integer *(WINAPIV *Identity)(AbstractGroup<Integer> *_this);
            Integer *(WINAPIV *Add)(AbstractGroup<Integer> *_this, Integer *, Integer *);
            Integer *(WINAPIV *Inverse)(AbstractGroup<Integer> *_this, Integer *);
            bool (WINAPIV *InversionIsFast)(AbstractGroup<Integer> *_this);
            Integer *(WINAPIV *Double)(AbstractGroup<Integer> *_this, Integer *);
            Integer *(WINAPIV *Subtract)(AbstractGroup<Integer> *_this, Integer *, Integer *);
            Integer *(WINAPIV *Accumulate)(AbstractGroup<Integer> *_this, Integer *, Integer *);
            Integer *(WINAPIV *Reduce)(AbstractGroup<Integer> *_this, Integer *, Integer *);
            Integer *(WINAPIV *ScalarMultiply)(AbstractGroup<Integer> *_this, Integer *result, Integer *, Integer *);
            Integer *(WINAPIV *CascadeScalarMultiply)(AbstractGroup<Integer> *_this, Integer *result, Integer *, Integer *, Integer *, Integer *);
            void (WINAPIV *SimultaneousMultiply)(AbstractGroup<Integer> *_this, Integer *, Integer *, Integer *, unsigned int);
        };
        template<>
        struct  AbstractRing<Integer> : AbstractGroup<Integer>
        {
                template<>
                struct  MultiplicativeGroupT : AbstractGroup<Integer>
                {
                    AbstractRing<Integer> *m_pRing;
                public:
                    struct Integer* Accumulate(struct Integer* a, struct Integer* b)
                    {
                        using org_ptr = struct Integer* (WINAPIV*)(struct MultiplicativeGroupT*, struct Integer*, struct Integer*);
                        return (org_ptr(0x140462e80L))(this, a, b);
                    };
                    struct Integer* Add(struct Integer* a, struct Integer* b)
                    {
                        using org_ptr = struct Integer* (WINAPIV*)(struct MultiplicativeGroupT*, struct Integer*, struct Integer*);
                        return (org_ptr(0x140462e00L))(this, a, b);
                    };
                    struct Integer* CascadeScalarMultiply(struct Integer* result, struct Integer* x, struct Integer* e1, struct Integer* y, struct Integer* e2)
                    {
                        using org_ptr = struct Integer* (WINAPIV*)(struct MultiplicativeGroupT*, struct Integer*, struct Integer*, struct Integer*, struct Integer*, struct Integer*);
                        return (org_ptr(0x1404631b0L))(this, result, x, e1, y, e2);
                    };
                    struct Integer* Double(struct Integer* a)
                    {
                        using org_ptr = struct Integer* (WINAPIV*)(struct MultiplicativeGroupT*, struct Integer*);
                        return (org_ptr(0x140463090L))(this, a);
                    };
                    bool Equal(struct Integer* a, struct Integer* b)
                    {
                        using org_ptr = bool (WINAPIV*)(struct MultiplicativeGroupT*, struct Integer*, struct Integer*);
                        return (org_ptr(0x140462d20L))(this, a, b);
                    };
                    struct AbstractRing<Integer>* GetRing()
                    {
                        using org_ptr = struct AbstractRing<Integer>* (WINAPIV*)(struct MultiplicativeGroupT*);
                        return (org_ptr(0x140463370L))(this);
                    };
                    struct Integer* Identity()
                    {
                        using org_ptr = struct Integer* (WINAPIV*)(struct MultiplicativeGroupT*);
                        return (org_ptr(0x140462da0L))(this);
                    };
                    struct Integer* Inverse(struct Integer* a)
                    {
                        using org_ptr = struct Integer* (WINAPIV*)(struct MultiplicativeGroupT*, struct Integer*);
                        return (org_ptr(0x140462f10L))(this, a);
                    };
                    MultiplicativeGroupT()
                    {
                        using org_ptr = void (WINAPIV*)(struct MultiplicativeGroupT*);
                        (org_ptr(0x140462cc0L))(this);
                    };
                    void ctor_MultiplicativeGroupT()
                    {
                        using org_ptr = void (WINAPIV*)(struct MultiplicativeGroupT*);
                        (org_ptr(0x140462cc0L))(this);
                    };
                    struct Integer* Reduce(struct Integer* a, struct Integer* b)
                    {
                        using org_ptr = struct Integer* (WINAPIV*)(struct MultiplicativeGroupT*, struct Integer*, struct Integer*);
                        return (org_ptr(0x140463000L))(this, a, b);
                    };
                    struct Integer* ScalarMultiply(struct Integer* result, struct Integer* a, struct Integer* e)
                    {
                        using org_ptr = struct Integer* (WINAPIV*)(struct MultiplicativeGroupT*, struct Integer*, struct Integer*, struct Integer*);
                        return (org_ptr(0x140463100L))(this, result, a, e);
                    };
                    void SimultaneousMultiply(struct Integer* results, struct Integer* base, struct Integer* exponents, unsigned int exponentsCount)
                    {
                        using org_ptr = void (WINAPIV*)(struct MultiplicativeGroupT*, struct Integer*, struct Integer*, struct Integer*, unsigned int);
                        (org_ptr(0x140463270L))(this, results, base, exponents, exponentsCount);
                    };
                    struct Integer* Subtract(struct Integer* a, struct Integer* b)
                    {
                        using org_ptr = struct Integer* (WINAPIV*)(struct MultiplicativeGroupT*, struct Integer*, struct Integer*);
                        return (org_ptr(0x140462f80L))(this, a, b);
                    };
                    ~MultiplicativeGroupT()
                    {
                        using org_ptr = void (WINAPIV*)(struct MultiplicativeGroupT*);
                        (org_ptr(0x140462ba0L))(this);
                    };
                    void dtor_MultiplicativeGroupT()
                    {
                        using org_ptr = void (WINAPIV*)(struct MultiplicativeGroupT*);
                        (org_ptr(0x140462ba0L))(this);
                    };
                };
            MultiplicativeGroupT m_mg;
        public:
            AbstractRing()
            {
                using org_ptr = void (WINAPIV*)(struct AbstractRing<Integer>*);
                (org_ptr(0x140462c20L))(this);
            };
            void ctor_AbstractRing()
            {
                using org_ptr = void (WINAPIV*)(struct AbstractRing<Integer>*);
                (org_ptr(0x140462c20L))(this);
            };
            struct AbstractGroup<Integer>* MultiplicativeGroup()
            {
                using org_ptr = struct AbstractGroup<Integer>* (WINAPIV*)(struct AbstractRing<Integer>*);
                return (org_ptr(0x140462c90L))(this);
            };
            ~AbstractRing()
            {
                using org_ptr = void (WINAPIV*)(struct AbstractRing<Integer>*);
                (org_ptr(0x1404629c0L))(this);
            };
            void dtor_AbstractRing()
            {
                using org_ptr = void (WINAPIV*)(struct AbstractRing<Integer>*);
                (org_ptr(0x1404629c0L))(this);
            };
        };
        template<>
        struct  ModularArithmetic : AbstractRing<Integer>
        {
            Integer m_modulus;
            Integer m_result;
            Integer m_result1;
        public:
            struct Integer* Accumulate(struct Integer* arg_0, struct Integer* arg_1)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct ModularArithmetic*, struct Integer*, struct Integer*);
                return (org_ptr(0x1405ec9b0L))(this, arg_0, arg_1);
            };
            struct Integer* Add(struct Integer* arg_0, struct Integer* arg_1)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct ModularArithmetic*, struct Integer*, struct Integer*);
                return (org_ptr(0x1405ec6c0L))(this, arg_0, arg_1);
            };
            void BERDecodeElement(struct BufferedTransformation* arg_0, struct Integer* arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct ModularArithmetic*, struct BufferedTransformation*, struct Integer*);
                (org_ptr(0x1405ec320L))(this, arg_0, arg_1);
            };
            struct Integer* CascadeExponentiate(struct Integer* retstr, struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2, struct Integer* arg_3)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct ModularArithmetic*, struct Integer*, struct Integer*, struct Integer*, struct Integer*, struct Integer*);
                return (org_ptr(0x1405ed170L))(this, retstr, arg_0, arg_1, arg_2, arg_3);
            };
            struct ModularArithmetic* Clone()
            {
                using org_ptr = struct ModularArithmetic* (WINAPIV*)(struct ModularArithmetic*);
                return (org_ptr(0x140461e00L))(this);
            };
            struct Integer* ConvertIn(struct Integer* result, struct Integer* a)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct ModularArithmetic*, struct Integer*, struct Integer*);
                return (org_ptr(0x140462070L))(this, result, a);
            };
            struct Integer* ConvertOut(struct Integer* result, struct Integer* a)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct ModularArithmetic*, struct Integer*, struct Integer*);
                return (org_ptr(0x140462170L))(this, result, a);
            };
            void DEREncode(struct BufferedTransformation* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct ModularArithmetic*, struct BufferedTransformation*);
                (org_ptr(0x1405ec1a0L))(this, arg_0);
            };
            void DEREncodeElement(struct BufferedTransformation* arg_0, struct Integer* arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct ModularArithmetic*, struct BufferedTransformation*, struct Integer*);
                (org_ptr(0x1405ec2e0L))(this, arg_0, arg_1);
            };
            struct Integer* Divide(struct Integer* a, struct Integer* b)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct ModularArithmetic*, struct Integer*, struct Integer*);
                return (org_ptr(0x1404628c0L))(this, a, b);
            };
            struct Integer* Double(struct Integer* a)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct ModularArithmetic*, struct Integer*);
                return (org_ptr(0x140462280L))(this, a);
            };
            bool Equal(struct Integer* a, struct Integer* b)
            {
                using org_ptr = bool (WINAPIV*)(struct ModularArithmetic*, struct Integer*, struct Integer*);
                return (org_ptr(0x1404621e0L))(this, a, b);
            };
            struct Integer* GetModulus()
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct ModularArithmetic*);
                return (org_ptr(0x1405524b0L))(this);
            };
            struct Integer* Half(struct Integer* arg_0)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct ModularArithmetic*, struct Integer*);
                return (org_ptr(0x1405ec360L))(this, arg_0);
            };
            struct Integer* Identity()
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct ModularArithmetic*);
                return (org_ptr(0x140462240L))(this);
            };
            struct Integer* Inverse(struct Integer* arg_0)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct ModularArithmetic*, struct Integer*);
                return (org_ptr(0x1405ed000L))(this, arg_0);
            };
            bool IsMontgomeryRepresentation()
            {
                using org_ptr = bool (WINAPIV*)(struct ModularArithmetic*);
                return (org_ptr(0x140462060L))(this);
            };
            bool IsUnit(struct Integer* a)
            {
                using org_ptr = bool (WINAPIV*)(struct ModularArithmetic*, struct Integer*);
                return (org_ptr(0x1404626e0L))(this, a);
            };
            unsigned int MaxElementByteLength()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct ModularArithmetic*);
                return (org_ptr(0x14044f980L))(this);
            };
            ModularArithmetic(struct BufferedTransformation* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ModularArithmetic*, struct BufferedTransformation*);
                (org_ptr(0x1405ebf00L))(this, arg_0);
            };
            int64_t ctor_ModularArithmetic(struct BufferedTransformation* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ModularArithmetic*, struct BufferedTransformation*);
                return (org_ptr(0x1405ebf00L))(this, arg_0);
            };
            ModularArithmetic(struct Integer* modulus)
            {
                using org_ptr = void (WINAPIV*)(struct ModularArithmetic*, struct Integer*);
                (org_ptr(0x140461c70L))(this, modulus);
            };
            void ctor_ModularArithmetic(struct Integer* modulus)
            {
                using org_ptr = void (WINAPIV*)(struct ModularArithmetic*, struct Integer*);
                (org_ptr(0x140461c70L))(this, modulus);
            };
            ModularArithmetic(struct ModularArithmetic* ma)
            {
                using org_ptr = void (WINAPIV*)(struct ModularArithmetic*, struct ModularArithmetic*);
                (org_ptr(0x140461ed0L))(this, ma);
            };
            void ctor_ModularArithmetic(struct ModularArithmetic* ma)
            {
                using org_ptr = void (WINAPIV*)(struct ModularArithmetic*, struct ModularArithmetic*);
                (org_ptr(0x140461ed0L))(this, ma);
            };
            struct Integer* MultiplicativeIdentity()
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct ModularArithmetic*);
                return (org_ptr(0x1404622e0L))(this);
            };
            struct Integer* MultiplicativeInverse(struct Integer* a)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct ModularArithmetic*, struct Integer*);
                return (org_ptr(0x1404627c0L))(this, a);
            };
            struct Integer* Multiply(struct Integer* a, struct Integer* b)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct ModularArithmetic*, struct Integer*, struct Integer*);
                return (org_ptr(0x140462320L))(this, a, b);
            };
            struct Integer* Reduce(struct Integer* arg_0, struct Integer* arg_1)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct ModularArithmetic*, struct Integer*, struct Integer*);
                return (org_ptr(0x1405ece60L))(this, arg_0, arg_1);
            };
            void SimultaneousExponentiate(struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2, unsigned int arg_3)
            {
                using org_ptr = void (WINAPIV*)(struct ModularArithmetic*, struct Integer*, struct Integer*, struct Integer*, unsigned int);
                (org_ptr(0x1405ed3f0L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            struct Integer* Square(struct Integer* a)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct ModularArithmetic*, struct Integer*);
                return (org_ptr(0x1404624d0L))(this, a);
            };
            struct Integer* Subtract(struct Integer* arg_0, struct Integer* arg_1)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct ModularArithmetic*, struct Integer*, struct Integer*);
                return (org_ptr(0x1405ecbf0L))(this, arg_0, arg_1);
            };
            ~ModularArithmetic()
            {
                using org_ptr = void (WINAPIV*)(struct ModularArithmetic*);
                (org_ptr(0x140462a50L))(this);
            };
            void dtor_ModularArithmetic()
            {
                using org_ptr = void (WINAPIV*)(struct ModularArithmetic*);
                (org_ptr(0x140462a50L))(this);
            };
        };
        template<>
        struct member_ptr<ModularArithmetic>
        {
            ModularArithmetic *m_p;
        };
        template<>
        struct  clonable_ptr<ModularArithmetic> : member_ptr<ModularArithmetic>
        {
        };
        template<>
        struct  ECP : AbstractGroup<ECPPoint>
        {
            clonable_ptr<ModularArithmetic> m_fieldPtr;
            Integer m_a;
            Integer m_b;
            ECPPoint m_R;
        public:
            struct ECPPoint* Add(struct ECPPoint* arg_0, struct ECPPoint* arg_1)
            {
                using org_ptr = struct ECPPoint* (WINAPIV*)(struct ECP*, struct ECPPoint*, struct ECPPoint*);
                return (org_ptr(0x14060f1e0L))(this, arg_0, arg_1);
            };
            struct ECPPoint* BERDecodePoint(short retstr, struct ECPPoint* arg_0)
            {
                using org_ptr = struct ECPPoint* (WINAPIV*)(struct ECP*, short, struct ECPPoint*);
                return (org_ptr(0x14060e070L))(this, retstr, arg_0);
            };
            struct ECPPoint* CascadeMultiply(struct ECPPoint* retstr, struct Integer* arg_0, struct ECPPoint* arg_1, struct Integer* arg_2, struct ECPPoint* arg_3)
            {
                using org_ptr = struct ECPPoint* (WINAPIV*)(struct ECP*, struct ECPPoint*, struct Integer*, struct ECPPoint*, struct Integer*, struct ECPPoint*);
                return (org_ptr(0x1405802f0L))(this, retstr, arg_0, arg_1, arg_2, arg_3);
            };
            struct ECPPoint* CascadeScalarMultiply(struct ECPPoint* retstr, struct ECPPoint* arg_0, struct Integer* arg_1, struct ECPPoint* arg_2, struct Integer* arg_3)
            {
                using org_ptr = struct ECPPoint* (WINAPIV*)(struct ECP*, struct ECPPoint*, struct ECPPoint*, struct Integer*, struct ECPPoint*, struct Integer*);
                return (org_ptr(0x1406114e0L))(this, retstr, arg_0, arg_1, arg_2, arg_3);
            };
            void DEREncode(struct BufferedTransformation* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct ECP*, struct BufferedTransformation*);
                (org_ptr(0x14060d5f0L))(this, arg_0);
            };
            void DEREncodePoint(struct BufferedTransformation* arg_0, struct ECPPoint* arg_1, bool arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct ECP*, struct BufferedTransformation*, struct ECPPoint*, bool);
                (org_ptr(0x14060e1f0L))(this, arg_0, arg_1, arg_2);
            };
            bool DecodePoint(struct ECPPoint* arg_0, struct BufferedTransformation* arg_1, uint64_t arg_2)
            {
                using org_ptr = bool (WINAPIV*)(struct ECP*, struct ECPPoint*, struct BufferedTransformation*, uint64_t);
                return (org_ptr(0x14060d7e0L))(this, arg_0, arg_1, arg_2);
            };
            bool DecodePoint(struct ECPPoint* arg_0, uint8_t* arg_1, uint64_t arg_2)
            {
                using org_ptr = bool (WINAPIV*)(struct ECP*, struct ECPPoint*, uint8_t*, uint64_t);
                return (org_ptr(0x14060d720L))(this, arg_0, arg_1, arg_2);
            };
            struct ECPPoint* Double(struct ECPPoint* arg_0)
            {
                using org_ptr = struct ECPPoint* (WINAPIV*)(struct ECP*, struct ECPPoint*);
                return (org_ptr(0x14060f720L))(this, arg_0);
            };
            ECP(struct BufferedTransformation* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ECP*, struct BufferedTransformation*);
                (org_ptr(0x14060d2f0L))(this, arg_0);
            };
            int64_t ctor_ECP(struct BufferedTransformation* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ECP*, struct BufferedTransformation*);
                return (org_ptr(0x14060d2f0L))(this, arg_0);
            };
            ECP(struct ECP* arg_0, bool arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ECP*, struct ECP*, bool);
                (org_ptr(0x14060cf50L))(this, arg_0, arg_1);
            };
            int64_t ctor_ECP(struct ECP* arg_0, bool arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ECP*, struct ECP*, bool);
                return (org_ptr(0x14060cf50L))(this, arg_0, arg_1);
            };
            ECP(struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ECP*, struct Integer*, struct Integer*, struct Integer*);
                (org_ptr(0x14057a4d0L))(this, arg_0, arg_1, arg_2);
            };
            int64_t ctor_ECP(struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ECP*, struct Integer*, struct Integer*, struct Integer*);
                return (org_ptr(0x14057a4d0L))(this, arg_0, arg_1, arg_2);
            };
            ECP()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ECP*);
                (org_ptr(0x14057ed40L))(this);
            };
            int64_t ctor_ECP()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ECP*);
                return (org_ptr(0x14057ed40L))(this);
            };
            void EncodePoint(struct BufferedTransformation* arg_0, struct ECPPoint* arg_1, bool arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct ECP*, struct BufferedTransformation*, struct ECPPoint*, bool);
                (org_ptr(0x14060ddb0L))(this, arg_0, arg_1, arg_2);
            };
            void EncodePoint(uint8_t* arg_0, struct ECPPoint* arg_1, bool arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct ECP*, uint8_t*, struct ECPPoint*, bool);
                (org_ptr(0x14060df60L))(this, arg_0, arg_1, arg_2);
            };
            unsigned int EncodedPointSize(bool compressed)
            {
                using org_ptr = unsigned int (WINAPIV*)(struct ECP*, bool);
                return (org_ptr(0x14044fb50L))(this, compressed);
            };
            bool Equal(struct ECPPoint* arg_0, struct ECPPoint* arg_1)
            {
                using org_ptr = bool (WINAPIV*)(struct ECP*, struct ECPPoint*, struct ECPPoint*);
                return (org_ptr(0x14060efc0L))(this, arg_0, arg_1);
            };
            struct Integer* FieldSize(short retstr)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct ECP*, short);
                return (org_ptr(0x14057f2b0L))(this, retstr);
            };
            struct ModularArithmetic* GetField()
            {
                using org_ptr = struct ModularArithmetic* (WINAPIV*)(struct ECP*);
                return (org_ptr(0x14044fbd0L))(this);
            };
            struct ECPPoint* Identity()
            {
                using org_ptr = struct ECPPoint* (WINAPIV*)(struct ECP*);
                return (org_ptr(0x14060f0f0L))(this);
            };
            struct ECPPoint* Inverse(struct ECPPoint* arg_0)
            {
                using org_ptr = struct ECPPoint* (WINAPIV*)(struct ECP*, struct ECPPoint*);
                return (org_ptr(0x14060f130L))(this, arg_0);
            };
            bool InversionIsFast()
            {
                using org_ptr = bool (WINAPIV*)(struct ECP*);
                return (org_ptr(0x14057a740L))(this);
            };
            struct ECPPoint* ScalarMultiply(short retstr, struct ECPPoint* arg_0, struct ECPPoint* arg_1)
            {
                using org_ptr = struct ECPPoint* (WINAPIV*)(struct ECP*, short, struct ECPPoint*, struct ECPPoint*);
                return (org_ptr(0x14060fc40L))(this, retstr, arg_0, arg_1);
            };
            void SimultaneousMultiply(struct ECPPoint* arg_0, struct ECPPoint* arg_1, struct Integer* arg_2, unsigned int arg_3)
            {
                using org_ptr = void (WINAPIV*)(struct ECP*, struct ECPPoint*, struct ECPPoint*, struct Integer*, unsigned int);
                (org_ptr(0x14060fd90L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            bool ValidateParameters(struct RandomNumberGenerator* arg_0, unsigned int arg_1)
            {
                using org_ptr = bool (WINAPIV*)(struct ECP*, struct RandomNumberGenerator*, unsigned int);
                return (org_ptr(0x14060e2a0L))(this, arg_0, arg_1);
            };
            bool VerifyPoint(struct ECPPoint* arg_0)
            {
                using org_ptr = bool (WINAPIV*)(struct ECP*, struct ECPPoint*);
                return (org_ptr(0x14060ea20L))(this, arg_0);
            };
            ~ECP()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ECP*);
                (org_ptr(0x14057a7b0L))(this);
            };
            int64_t dtor_ECP()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ECP*);
                return (org_ptr(0x14057a7b0L))(this);
            };
        };
        template<>
        struct member_ptr<ECP>
        {
            ECP *m_p;
        public:
            member_ptr(struct ECP* p)
            {
                using org_ptr = void (WINAPIV*)(struct member_ptr<ECP>*, struct ECP*);
                (org_ptr(0x140458e20L))(this, p);
            };
            void ctor_member_ptr(struct ECP* p)
            {
                using org_ptr = void (WINAPIV*)(struct member_ptr<ECP>*, struct ECP*);
                (org_ptr(0x140458e20L))(this, p);
            };
            ~member_ptr()
            {
                using org_ptr = void (WINAPIV*)(struct member_ptr<ECP>*);
                (org_ptr(0x14045eea0L))(this);
            };
            void dtor_member_ptr()
            {
                using org_ptr = void (WINAPIV*)(struct member_ptr<ECP>*);
                (org_ptr(0x14045eea0L))(this);
            };
        };
        template<>
        struct  value_ptr<ECP> : member_ptr<ECP>
        {
        public:
            value_ptr(struct ECP* p)
            {
                using org_ptr = void (WINAPIV*)(struct value_ptr<ECP>*, struct ECP*);
                (org_ptr(0x140458dc0L))(this, p);
            };
            void ctor_value_ptr(struct ECP* p)
            {
                using org_ptr = void (WINAPIV*)(struct value_ptr<ECP>*, struct ECP*);
                (org_ptr(0x140458dc0L))(this, p);
            };
            ~value_ptr()
            {
                using org_ptr = void (WINAPIV*)(struct value_ptr<ECP>*);
                (org_ptr(0x14044a090L))(this);
            };
            void dtor_value_ptr()
            {
                using org_ptr = void (WINAPIV*)(struct value_ptr<ECP>*);
                (org_ptr(0x14044a090L))(this);
            };
        };
        template<>
        struct  EcPrecomputation<ECP> : DL_GroupPrecomputation<ECPPoint>
        {
            value_ptr<ECP> m_ec;
            value_ptr<ECP> m_ecOriginal;
        public:
            struct ECPPoint* BERDecodeElement(struct ECPPoint* result, struct BufferedTransformation* bt)
            {
                using org_ptr = struct ECPPoint* (WINAPIV*)(struct EcPrecomputation<ECP>*, struct ECPPoint*, struct BufferedTransformation*);
                return (org_ptr(0x140457570L))(this, result, bt);
            };
            struct ECPPoint* ConvertIn(struct ECPPoint* result, struct ECPPoint* P)
            {
                using org_ptr = struct ECPPoint* (WINAPIV*)(struct EcPrecomputation<ECP>*, struct ECPPoint*, struct ECPPoint*);
                return (org_ptr(0x140456b70L))(this, result, P);
            };
            struct ECPPoint* ConvertOut(struct ECPPoint* result, struct ECPPoint* P)
            {
                using org_ptr = struct ECPPoint* (WINAPIV*)(struct EcPrecomputation<ECP>*, struct ECPPoint*, struct ECPPoint*);
                return (org_ptr(0x1404570b0L))(this, result, P);
            };
            void DEREncodeElement(struct BufferedTransformation* bt, struct ECPPoint* v)
            {
                using org_ptr = void (WINAPIV*)(struct EcPrecomputation<ECP>*, struct BufferedTransformation*, struct ECPPoint*);
                (org_ptr(0x140457600L))(this, bt, v);
            };
            EcPrecomputation()
            {
                using org_ptr = void (WINAPIV*)(struct EcPrecomputation<ECP>*);
                (org_ptr(0x140456a90L))(this);
            };
            void ctor_EcPrecomputation()
            {
                using org_ptr = void (WINAPIV*)(struct EcPrecomputation<ECP>*);
                (org_ptr(0x140456a90L))(this);
            };
            struct ECP* GetCurve()
            {
                using org_ptr = struct ECP* (WINAPIV*)(struct EcPrecomputation<ECP>*);
                return (org_ptr(0x140459430L))(this);
            };
            struct AbstractGroup<ECPPoint>* GetGroup()
            {
                using org_ptr = struct AbstractGroup<ECPPoint>* (WINAPIV*)(struct EcPrecomputation<ECP>*);
                return (org_ptr(0x140457520L))(this);
            };
            bool NeedConversions()
            {
                using org_ptr = bool (WINAPIV*)(struct EcPrecomputation<ECP>*);
                return (org_ptr(0x140456b60L))(this);
            };
            ~EcPrecomputation()
            {
                using org_ptr = void (WINAPIV*)(struct EcPrecomputation<ECP>*);
                (org_ptr(0x140449fe0L))(this);
            };
            void dtor_EcPrecomputation()
            {
                using org_ptr = void (WINAPIV*)(struct EcPrecomputation<ECP>*);
                (org_ptr(0x140449fe0L))(this);
            };
        };
        template<>
        struct DL_FixedBasePrecomputation<ECPPoint>
        {
            DL_FixedBasePrecomputation<ECPPoint>Vtbl *vfptr;
        public:
            DL_FixedBasePrecomputation()
            {
                using org_ptr = void (WINAPIV*)(struct DL_FixedBasePrecomputation<ECPPoint>*);
                (org_ptr(0x14044c4e0L))(this);
            };
            void ctor_DL_FixedBasePrecomputation()
            {
                using org_ptr = void (WINAPIV*)(struct DL_FixedBasePrecomputation<ECPPoint>*);
                (org_ptr(0x14044c4e0L))(this);
            };
        };
        template<>
        struct DL_FixedBasePrecomputation<ECPPoint>Vtbl
        {
            bool (WINAPIV *IsInitialized)(DL_FixedBasePrecomputation<ECPPoint> *_this);
            void (WINAPIV *SetBase)(DL_FixedBasePrecomputation<ECPPoint> *_this, DL_GroupPrecomputation<ECPPoint> *, ECPPoint *);
            ECPPoint *(WINAPIV *GetBase)(DL_FixedBasePrecomputation<ECPPoint> *_this, DL_GroupPrecomputation<ECPPoint> *);
            void (WINAPIV *Precompute)(DL_FixedBasePrecomputation<ECPPoint> *_this, DL_GroupPrecomputation<ECPPoint> *, unsigned int, unsigned int);
            void (WINAPIV *Load)(DL_FixedBasePrecomputation<ECPPoint> *_this, DL_GroupPrecomputation<ECPPoint> *, BufferedTransformation *);
            void (WINAPIV *Save)(DL_FixedBasePrecomputation<ECPPoint> *_this, DL_GroupPrecomputation<ECPPoint> *, BufferedTransformation *);
            ECPPoint *(WINAPIV *Exponentiate)(DL_FixedBasePrecomputation<ECPPoint> *_this, ECPPoint *result, DL_GroupPrecomputation<ECPPoint> *, Integer *);
            ECPPoint *(WINAPIV *CascadeExponentiate)(DL_FixedBasePrecomputation<ECPPoint> *_this, ECPPoint *result, DL_GroupPrecomputation<ECPPoint> *, Integer *, DL_FixedBasePrecomputation<ECPPoint> *, Integer *);
        };
        template<>
        struct  DL_FixedBasePrecomputationImpl<ECPPoint> : DL_FixedBasePrecomputation<ECPPoint>
        {
            ECPPoint m_base;
            unsigned int m_windowSize;
            Integer m_exponentBase;
            std::vector<ECPPoint,std::allocator<ECPPoint> > m_bases;
        public:
            DL_FixedBasePrecomputationImpl()
            {
                using org_ptr = void (WINAPIV*)(struct DL_FixedBasePrecomputationImpl<ECPPoint>*);
                (org_ptr(0x14044be60L))(this);
            };
            void ctor_DL_FixedBasePrecomputationImpl()
            {
                using org_ptr = void (WINAPIV*)(struct DL_FixedBasePrecomputationImpl<ECPPoint>*);
                (org_ptr(0x14044be60L))(this);
            };
            struct ECPPoint* GetBase(struct DL_GroupPrecomputation<ECPPoint>* group)
            {
                using org_ptr = struct ECPPoint* (WINAPIV*)(struct DL_FixedBasePrecomputationImpl<ECPPoint>*, struct DL_GroupPrecomputation<ECPPoint>*);
                return (org_ptr(0x14044eac0L))(this, group);
            };
            bool IsInitialized()
            {
                using org_ptr = bool (WINAPIV*)(struct DL_FixedBasePrecomputationImpl<ECPPoint>*);
                return (org_ptr(0x14044ea50L))(this);
            };
            ~DL_FixedBasePrecomputationImpl()
            {
                using org_ptr = void (WINAPIV*)(struct DL_FixedBasePrecomputationImpl<ECPPoint>*);
                (org_ptr(0x1404491c0L))(this);
            };
            void dtor_DL_FixedBasePrecomputationImpl()
            {
                using org_ptr = void (WINAPIV*)(struct DL_FixedBasePrecomputationImpl<ECPPoint>*);
                (org_ptr(0x1404491c0L))(this);
            };
        };
        template<>
        struct  DL_GroupParametersImpl<EcPrecomputation<ECP>,DL_FixedBasePrecomputationImpl<ECPPoint>,DL_GroupParameters<ECPPoint> > : DL_GroupParameters<ECPPoint>
        {
            BYTE m_groupPrecomputation[8];
            DL_FixedBasePrecomputationImpl<ECPPoint> m_gpc;
            BYTE gapE8[16];
        };
        struct OID
        {
            std::vector<unsigned int,std::allocator<unsigned int> > m_values;
        public:
            void BERDecode(struct BufferedTransformation* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct OID*, struct BufferedTransformation*);
                (org_ptr(0x14054c890L))(this, arg_0);
            };
            void BERDecodeAndCheck(struct BufferedTransformation* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct OID*, struct BufferedTransformation*);
                (org_ptr(0x14054c9e0L))(this, arg_0);
            };
            void DEREncode(struct BufferedTransformation* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct OID*, struct BufferedTransformation*);
                (org_ptr(0x14054c6f0L))(this, arg_0);
            };
            static uint64_t DecodeValue(struct BufferedTransformation* arg_0, unsigned int* arg_1)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct BufferedTransformation*, unsigned int*);
                return (org_ptr(0x14054c640L))(arg_0, arg_1);
            };
            static void EncodeValue(struct BufferedTransformation* arg_0, unsigned int arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct BufferedTransformation*, unsigned int);
                (org_ptr(0x14054c590L))(arg_0, arg_1);
            };
            OID(struct BufferedTransformation* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct OID*, struct BufferedTransformation*);
                (org_ptr(0x14054e2e0L))(this, arg_0);
            };
            int64_t ctor_OID(struct BufferedTransformation* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct OID*, struct BufferedTransformation*);
                return (org_ptr(0x14054e2e0L))(this, arg_0);
            };
            OID(struct OID* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct OID*, struct OID*);
                (org_ptr(0x14057cb20L))(this, arg_0);
            };
            int64_t ctor_OID(struct OID* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct OID*, struct OID*);
                return (org_ptr(0x14057cb20L))(this, arg_0);
            };
            OID(unsigned int arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct OID*, unsigned int);
                (org_ptr(0x14057cf50L))(this, arg_0);
            };
            int64_t ctor_OID(unsigned int arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct OID*, unsigned int);
                return (org_ptr(0x14057cf50L))(this, arg_0);
            };
            OID()
            {
                using org_ptr = void (WINAPIV*)(struct OID*);
                (org_ptr(0x14044f6f0L))(this);
            };
            void ctor_OID()
            {
                using org_ptr = void (WINAPIV*)(struct OID*);
                (org_ptr(0x14044f6f0L))(this);
            };
            ~OID()
            {
                using org_ptr = void (WINAPIV*)(struct OID*);
                (org_ptr(0x1404499e0L))(this);
            };
            void dtor_OID()
            {
                using org_ptr = void (WINAPIV*)(struct OID*);
                (org_ptr(0x1404499e0L))(this);
            };
        };
        template<>
        struct  DL_GroupParameters_EC<ECP> : DL_GroupParametersImpl<EcPrecomputation<ECP>,DL_FixedBasePrecomputationImpl<ECPPoint>,DL_GroupParameters<ECPPoint> >
        {
            BYTE m_oid[24];
            Integer m_n;
            bool m_compress;
            bool m_encodeAsOID;
            Integer m_k;
            BYTE gap168[16];
        public:
            struct DL_FixedBasePrecomputation<ECPPoint>* AccessBasePrecomputation()
            {
                using org_ptr = struct DL_FixedBasePrecomputation<ECPPoint>* (WINAPIV*)(struct DL_GroupParameters_EC<ECP>*);
                return (org_ptr(0x14044f7e0L))(this);
            };
            int64_t CascadeExponentiate(struct Integer* arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ECPPoint*, struct Integer*);
                return (org_ptr(0x140580280L))(arg_0, arg_1);
            };
            DL_GroupParameters_EC()
            {
                using org_ptr = void (WINAPIV*)(struct DL_GroupParameters_EC<ECP>*);
                (org_ptr(0x14044f250L))(this);
            };
            void ctor_DL_GroupParameters_EC()
            {
                using org_ptr = void (WINAPIV*)(struct DL_GroupParameters_EC<ECP>*);
                (org_ptr(0x14044f250L))(this);
            };
            struct ECPPoint* DecodeElement(struct ECPPoint* result, char* encoded, bool checkForGroupMembership)
            {
                using org_ptr = struct ECPPoint* (WINAPIV*)(struct DL_GroupParameters_EC<ECP>*, struct ECPPoint*, char*, bool);
                return (org_ptr(0x14044fc40L))(this, result, encoded, checkForGroupMembership);
            };
            void EncodeElement(bool reversible, struct ECPPoint* element, char* encoded)
            {
                using org_ptr = void (WINAPIV*)(struct DL_GroupParameters_EC<ECP>*, bool, struct ECPPoint*, char*);
                (org_ptr(0x14044f830L))(this, reversible, element, encoded);
            };
            bool FastSubgroupCheckAvailable()
            {
                using org_ptr = bool (WINAPIV*)(struct DL_GroupParameters_EC<ECP>*);
                return (org_ptr(0x14044f820L))(this);
            };
            struct DL_FixedBasePrecomputation<ECPPoint>* GetBasePrecomputation()
            {
                using org_ptr = struct DL_FixedBasePrecomputation<ECPPoint>* (WINAPIV*)(struct DL_GroupParameters_EC<ECP>*);
                return (org_ptr(0x14044f7c0L))(this);
            };
            struct ECP* GetCurve()
            {
                using org_ptr = struct ECP* (WINAPIV*)(struct DL_GroupParameters_EC<ECP>*);
                return (org_ptr(0x1404593e0L))(this);
            };
            unsigned int GetEncodedElementSize(bool reversible)
            {
                using org_ptr = unsigned int (WINAPIV*)(struct DL_GroupParameters_EC<ECP>*, bool);
                return (org_ptr(0x14044f8f0L))(this, reversible);
            };
            struct Integer* GetMaxExponent(struct Integer* result)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct DL_GroupParameters_EC<ECP>*, struct Integer*);
                return (org_ptr(0x140450170L))(this, result);
            };
            struct Integer* GetSubgroupOrder()
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct DL_GroupParameters_EC<ECP>*);
                return (org_ptr(0x14044f800L))(this);
            };
            bool IsIdentity(struct ECPPoint* element)
            {
                using org_ptr = bool (WINAPIV*)(struct DL_GroupParameters_EC<ECP>*, struct ECPPoint*);
                return (org_ptr(0x1404502a0L))(this, element);
            };
            ~DL_GroupParameters_EC()
            {
                using org_ptr = void (WINAPIV*)(struct DL_GroupParameters_EC<ECP>*);
                (org_ptr(0x140449860L))(this);
            };
            void dtor_DL_GroupParameters_EC()
            {
                using org_ptr = void (WINAPIV*)(struct DL_GroupParameters_EC<ECP>*);
                (org_ptr(0x140449860L))(this);
            };
        };
        template<>
        struct   DL_KeyImpl<PKCS8PrivateKey,DL_GroupParameters_EC<ECP>,OID> : PKCS8PrivateKey
        {
            BYTE m_groupParameters[368];
            BYTE gap1E0[8];
        public:
            struct DL_GroupParameters_EC<ECP>* AccessGroupParameters()
            {
                using org_ptr = struct DL_GroupParameters_EC<ECP>* (WINAPIV*)(struct DL_KeyImpl<PKCS8PrivateKey,DL_GroupParameters_EC<ECP>,OID>*);
                return (org_ptr(0x140459590L))(this);
            };
            bool BERDecodeAlgorithmParameters(struct BufferedTransformation* bt)
            {
                using org_ptr = bool (WINAPIV*)(struct DL_KeyImpl<PKCS8PrivateKey,DL_GroupParameters_EC<ECP>,OID>*, struct BufferedTransformation*);
                return (org_ptr(0x140452500L))(this, bt);
            };
            bool DEREncodeAlgorithmParameters(struct BufferedTransformation* bt)
            {
                using org_ptr = bool (WINAPIV*)(struct DL_KeyImpl<PKCS8PrivateKey,DL_GroupParameters_EC<ECP>,OID>*, struct BufferedTransformation*);
                return (org_ptr(0x140452560L))(this, bt);
            };
            DL_KeyImpl()
            {
                using org_ptr = void (WINAPIV*)(struct DL_KeyImpl<PKCS8PrivateKey,DL_GroupParameters_EC<ECP>,OID>*);
                (org_ptr(0x14044b450L))(this);
            };
            void ctor_DL_KeyImpl()
            {
                using org_ptr = void (WINAPIV*)(struct DL_KeyImpl<PKCS8PrivateKey,DL_GroupParameters_EC<ECP>,OID>*);
                (org_ptr(0x14044b450L))(this);
            };
            struct OID* GetAlgorithmID(struct OID* result)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct DL_KeyImpl<PKCS8PrivateKey,DL_GroupParameters_EC<ECP>,OID>*, struct OID*);
                return (org_ptr(0x140452480L))(this, result);
            };
            struct DL_GroupParameters_EC<ECP>* GetGroupParameters()
            {
                using org_ptr = struct DL_GroupParameters_EC<ECP>* (WINAPIV*)(struct DL_KeyImpl<PKCS8PrivateKey,DL_GroupParameters_EC<ECP>,OID>*);
                return (org_ptr(0x140459570L))(this);
            };
            ~DL_KeyImpl()
            {
                using org_ptr = void (WINAPIV*)(struct DL_KeyImpl<PKCS8PrivateKey,DL_GroupParameters_EC<ECP>,OID>*);
                (org_ptr(0x1404490a0L))(this);
            };
            void dtor_DL_KeyImpl()
            {
                using org_ptr = void (WINAPIV*)(struct DL_KeyImpl<PKCS8PrivateKey,DL_GroupParameters_EC<ECP>,OID>*);
                (org_ptr(0x1404490a0L))(this);
            };
        };
        template<>
        struct  DL_PrivateKeyImpl<DL_GroupParameters_EC<ECP> > : DL_PrivateKey<ECPPoint>, DL_KeyImpl<PKCS8PrivateKey,DL_GroupParameters_EC<ECP>,OID>
        {
            BYTE m_x[32];
            BYTE gap210[8];
        };
        template<>
        struct  DL_PrivateKey_EC<ECP> : DL_PrivateKeyImpl<DL_GroupParameters_EC<ECP> >
        {
        public:
            DL_PrivateKey_EC()
            {
                using org_ptr = void (WINAPIV*)(struct DL_PrivateKey_EC<ECP>*);
                (org_ptr(0x14044a5c0L))(this);
            };
            void ctor_DL_PrivateKey_EC()
            {
                using org_ptr = void (WINAPIV*)(struct DL_PrivateKey_EC<ECP>*);
                (org_ptr(0x14044a5c0L))(this);
            };
            ~DL_PrivateKey_EC()
            {
                using org_ptr = void (WINAPIV*)(struct DL_PrivateKey_EC<ECP>*);
                (org_ptr(0x140448b00L))(this);
            };
            void dtor_DL_PrivateKey_EC()
            {
                using org_ptr = void (WINAPIV*)(struct DL_PrivateKey_EC<ECP>*);
                (org_ptr(0x140448b00L))(this);
            };
        };
        template<>
        struct  DL_PublicKey<ECPPoint> : DL_Key<ECPPoint>
        {
        public:
            void AssignFrom(struct NameValuePairs* source)
            {
                using org_ptr = void (WINAPIV*)(struct DL_PublicKey<ECPPoint>*, struct NameValuePairs*);
                (org_ptr(0x140466f00L))(this, source);
            };
            struct ECPPoint* CascadeExponentiateBaseAndPublicElement(struct ECPPoint* result, struct Integer* baseExp, struct Integer* publicExp)
            {
                using org_ptr = struct ECPPoint* (WINAPIV*)(struct DL_PublicKey<ECPPoint>*, struct ECPPoint*, struct Integer*, struct Integer*);
                return (org_ptr(0x140451380L))(this, result, baseExp, publicExp);
            };
            DL_PublicKey()
            {
                using org_ptr = void (WINAPIV*)(struct DL_PublicKey<ECPPoint>*);
                (org_ptr(0x14044bc90L))(this);
            };
            void ctor_DL_PublicKey()
            {
                using org_ptr = void (WINAPIV*)(struct DL_PublicKey<ECPPoint>*);
                (org_ptr(0x14044bc90L))(this);
            };
            struct ECPPoint* ExponentiatePublicElement(struct ECPPoint* result, struct Integer* exponent)
            {
                using org_ptr = struct ECPPoint* (WINAPIV*)(struct DL_PublicKey<ECPPoint>*, struct ECPPoint*, struct Integer*);
                return (org_ptr(0x1404512a0L))(this, result, exponent);
            };
            struct ECPPoint* GetPublicElement()
            {
                using org_ptr = struct ECPPoint* (WINAPIV*)(struct DL_PublicKey<ECPPoint>*);
                return (org_ptr(0x140451150L))(this);
            };
            bool GetVoidValue(char* name, struct type_info* valueType, void* pValue)
            {
                using org_ptr = bool (WINAPIV*)(struct DL_PublicKey<ECPPoint>*, char*, struct type_info*, void*);
                return (org_ptr(0x140465f80L))(this, name, valueType, pValue);
            };
            void SetPublicElement(struct ECPPoint* y)
            {
                using org_ptr = void (WINAPIV*)(struct DL_PublicKey<ECPPoint>*, struct ECPPoint*);
                (org_ptr(0x1404511f0L))(this, y);
            };
        };
        struct  PublicKey
        {
            BYTE gap0[16];
        public:
            PublicKey()
            {
                using org_ptr = void (WINAPIV*)(struct PublicKey*);
                (org_ptr(0x14044c970L))(this);
            };
            void ctor_PublicKey()
            {
                using org_ptr = void (WINAPIV*)(struct PublicKey*);
                (org_ptr(0x14044c970L))(this);
            };
            ~PublicKey()
            {
                using org_ptr = void (WINAPIV*)(struct PublicKey*);
                (org_ptr(0x140449de0L))(this);
            };
            void dtor_PublicKey()
            {
                using org_ptr = void (WINAPIV*)(struct PublicKey*);
                (org_ptr(0x140449de0L))(this);
            };
        };
        template<>
        struct  ASN1CryptoMaterial<PublicKey> : ASN1Object, PublicKey
        {
        public:
            ASN1CryptoMaterial()
            {
                using org_ptr = void (WINAPIV*)(struct ASN1CryptoMaterial<PublicKey>*);
                (org_ptr(0x14044c760L))(this);
            };
            void ctor_ASN1CryptoMaterial()
            {
                using org_ptr = void (WINAPIV*)(struct ASN1CryptoMaterial<PublicKey>*);
                (org_ptr(0x14044c760L))(this);
            };
            void Load(struct BufferedTransformation* bt)
            {
                using org_ptr = void (WINAPIV*)(struct ASN1CryptoMaterial<PublicKey>*, struct BufferedTransformation*);
                (org_ptr(0x14044f1e0L))(this, bt);
            };
            void Save(struct BufferedTransformation* bt)
            {
                using org_ptr = void (WINAPIV*)(struct ASN1CryptoMaterial<PublicKey>*, struct BufferedTransformation*);
                (org_ptr(0x14044f170L))(this, bt);
            };
            ~ASN1CryptoMaterial()
            {
                using org_ptr = void (WINAPIV*)(struct ASN1CryptoMaterial<PublicKey>*);
                (org_ptr(0x140449a20L))(this);
            };
            void dtor_ASN1CryptoMaterial()
            {
                using org_ptr = void (WINAPIV*)(struct ASN1CryptoMaterial<PublicKey>*);
                (org_ptr(0x140449a20L))(this);
            };
        };
        template<>
        struct  X509PublicKey : ASN1CryptoMaterial<PublicKey>
        {
        public:
            void BERDecode(struct BufferedTransformation* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct X509PublicKey*, struct BufferedTransformation*);
                (org_ptr(0x14054d870L))(this, arg_0);
            };
            bool BERDecodeAlgorithmParameters(struct BufferedTransformation* bt)
            {
                using org_ptr = bool (WINAPIV*)(struct X509PublicKey*, struct BufferedTransformation*);
                return (org_ptr(0x14044c440L))(this, bt);
            };
            void DEREncode(struct BufferedTransformation* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct X509PublicKey*, struct BufferedTransformation*);
                (org_ptr(0x14054dad0L))(this, arg_0);
            };
            bool DEREncodeAlgorithmParameters(struct BufferedTransformation* bt)
            {
                using org_ptr = bool (WINAPIV*)(struct X509PublicKey*, struct BufferedTransformation*);
                return (org_ptr(0x14044c490L))(this, bt);
            };
            X509PublicKey()
            {
                using org_ptr = void (WINAPIV*)(struct X509PublicKey*);
                (org_ptr(0x14044c370L))(this);
            };
            void ctor_X509PublicKey()
            {
                using org_ptr = void (WINAPIV*)(struct X509PublicKey*);
                (org_ptr(0x14044c370L))(this);
            };
            ~X509PublicKey()
            {
                using org_ptr = void (WINAPIV*)(struct X509PublicKey*);
                (org_ptr(0x140449610L))(this);
            };
            void dtor_X509PublicKey()
            {
                using org_ptr = void (WINAPIV*)(struct X509PublicKey*);
                (org_ptr(0x140449610L))(this);
            };
        };
        template<>
        struct  DL_KeyImpl<X509PublicKey,DL_GroupParameters_EC<ECP>,OID> : X509PublicKey
        {
            BYTE m_groupParameters[368];
        public:
            struct DL_GroupParameters_EC<ECP>* AccessGroupParameters()
            {
                using org_ptr = struct DL_GroupParameters_EC<ECP>* (WINAPIV*)(struct DL_KeyImpl<X509PublicKey,DL_GroupParameters_EC<ECP>,OID>*);
                return (org_ptr(0x140459550L))(this);
            };
            bool BERDecodeAlgorithmParameters(struct BufferedTransformation* bt)
            {
                using org_ptr = bool (WINAPIV*)(struct DL_KeyImpl<X509PublicKey,DL_GroupParameters_EC<ECP>,OID>*, struct BufferedTransformation*);
                return (org_ptr(0x140451530L))(this, bt);
            };
            bool DEREncodeAlgorithmParameters(struct BufferedTransformation* bt)
            {
                using org_ptr = bool (WINAPIV*)(struct DL_KeyImpl<X509PublicKey,DL_GroupParameters_EC<ECP>,OID>*, struct BufferedTransformation*);
                return (org_ptr(0x140451590L))(this, bt);
            };
            DL_KeyImpl()
            {
                using org_ptr = void (WINAPIV*)(struct DL_KeyImpl<X509PublicKey,DL_GroupParameters_EC<ECP>,OID>*);
                (org_ptr(0x14044bce0L))(this);
            };
            void ctor_DL_KeyImpl()
            {
                using org_ptr = void (WINAPIV*)(struct DL_KeyImpl<X509PublicKey,DL_GroupParameters_EC<ECP>,OID>*);
                (org_ptr(0x14044bce0L))(this);
            };
            struct OID* GetAlgorithmID(struct OID* result)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct DL_KeyImpl<X509PublicKey,DL_GroupParameters_EC<ECP>,OID>*, struct OID*);
                return (org_ptr(0x1404514b0L))(this, result);
            };
            struct DL_GroupParameters_EC<ECP>* GetGroupParameters()
            {
                using org_ptr = struct DL_GroupParameters_EC<ECP>* (WINAPIV*)(struct DL_KeyImpl<X509PublicKey,DL_GroupParameters_EC<ECP>,OID>*);
                return (org_ptr(0x140459530L))(this);
            };
            ~DL_KeyImpl()
            {
                using org_ptr = void (WINAPIV*)(struct DL_KeyImpl<X509PublicKey,DL_GroupParameters_EC<ECP>,OID>*);
                (org_ptr(0x140449130L))(this);
            };
            void dtor_DL_KeyImpl()
            {
                using org_ptr = void (WINAPIV*)(struct DL_KeyImpl<X509PublicKey,DL_GroupParameters_EC<ECP>,OID>*);
                (org_ptr(0x140449130L))(this);
            };
        };
        template<>
        struct  DL_PublicKeyImpl<DL_GroupParameters_EC<ECP> > : DL_PublicKey<ECPPoint>, DL_KeyImpl<X509PublicKey,DL_GroupParameters_EC<ECP>,OID>
        {
            BYTE m_ypc[176];
        };
        template<>
        struct  DL_PublicKey_EC<ECP> : DL_PublicKeyImpl<DL_GroupParameters_EC<ECP> >
        {
        public:
            DL_PublicKey_EC()
            {
                using org_ptr = void (WINAPIV*)(struct DL_PublicKey_EC<ECP>*);
                (org_ptr(0x14044aee0L))(this);
            };
            void ctor_DL_PublicKey_EC()
            {
                using org_ptr = void (WINAPIV*)(struct DL_PublicKey_EC<ECP>*);
                (org_ptr(0x14044aee0L))(this);
            };
            ~DL_PublicKey_EC()
            {
                using org_ptr = void (WINAPIV*)(struct DL_PublicKey_EC<ECP>*);
                (org_ptr(0x140448b90L))(this);
            };
            void dtor_DL_PublicKey_EC()
            {
                using org_ptr = void (WINAPIV*)(struct DL_PublicKey_EC<ECP>*);
                (org_ptr(0x140448b90L))(this);
            };
        };
        template<>
        struct  FixedBlockSize<16>
        {
        };
        template<>
        struct  VariableKeyLength<16,16,32,8,4,0>
        {
        public:
            static uint64_t StaticGetValidKeyLength(uint64_t n)
            {
                using org_ptr = uint64_t (WINAPIV*)(uint64_t);
                return (org_ptr(0x14045a250L))(n);
            };
        };
        template<>
        struct  Rijndael_Info : FixedBlockSize<16>, VariableKeyLength<16,16,32,8,4,0>
        {
            BYTE gap0[1];
        public:
            static char* StaticAlgorithmName()
            {
                using org_ptr = char* (WINAPIV*)();
                return (org_ptr(0x140459b40L))();
            };
        };
        template<>
        struct  TwoBases<SimpleKeyedTransformation<BlockTransformation>,Rijndael_Info> : SimpleKeyedTransformation<BlockTransformation>, Rijndael_Info
        {
        public:
            TwoBases(struct TwoBases<SimpleKeyedTransformation<BlockTransformation>,Rijndael_Info>* __that)
            {
                using org_ptr = void (WINAPIV*)(struct TwoBases<SimpleKeyedTransformation<BlockTransformation>,Rijndael_Info>*, struct TwoBases<SimpleKeyedTransformation<BlockTransformation>,Rijndael_Info>*);
                (org_ptr(0x14045a0a0L))(this, __that);
            };
            void ctor_TwoBases(struct TwoBases<SimpleKeyedTransformation<BlockTransformation>,Rijndael_Info>* __that)
            {
                using org_ptr = void (WINAPIV*)(struct TwoBases<SimpleKeyedTransformation<BlockTransformation>,Rijndael_Info>*, struct TwoBases<SimpleKeyedTransformation<BlockTransformation>,Rijndael_Info>*);
                (org_ptr(0x14045a0a0L))(this, __that);
            };
            TwoBases()
            {
                using org_ptr = void (WINAPIV*)(struct TwoBases<SimpleKeyedTransformation<BlockTransformation>,Rijndael_Info>*);
                (org_ptr(0x14045c8c0L))(this);
            };
            void ctor_TwoBases()
            {
                using org_ptr = void (WINAPIV*)(struct TwoBases<SimpleKeyedTransformation<BlockTransformation>,Rijndael_Info>*);
                (org_ptr(0x14045c8c0L))(this);
            };
            ~TwoBases()
            {
                using org_ptr = void (WINAPIV*)(struct TwoBases<SimpleKeyedTransformation<BlockTransformation>,Rijndael_Info>*);
                (org_ptr(0x14044a440L))(this);
            };
            void dtor_TwoBases()
            {
                using org_ptr = void (WINAPIV*)(struct TwoBases<SimpleKeyedTransformation<BlockTransformation>,Rijndael_Info>*);
                (org_ptr(0x14044a440L))(this);
            };
        };
        template<>
        struct  SimpleKeyingInterfaceImpl<TwoBases<SimpleKeyedTransformation<BlockTransformation>,Rijndael_Info>,TwoBases<SimpleKeyedTransformation<BlockTransformation>,Rijndael_Info> > : TwoBases<SimpleKeyedTransformation<BlockTransformation>,Rijndael_Info>
        {
        };
        template<>
        struct  AlgorithmImpl<SimpleKeyingInterfaceImpl<TwoBases<SimpleKeyedTransformation<BlockTransformation>,Rijndael_Info>,TwoBases<SimpleKeyedTransformation<BlockTransformation>,Rijndael_Info> >,SimpleKeyingInterfaceImpl<TwoBases<SimpleKeyedTransformation<BlockTransformation>,Rijndael_Info>,TwoBases<SimpleKeyedTransformation<BlockTransformation>,Rijndael_Info> > > : SimpleKeyingInterfaceImpl<TwoBases<SimpleKeyedTransformation<BlockTransformation>,Rijndael_Info>,TwoBases<SimpleKeyedTransformation<BlockTransformation>,Rijndael_Info> >
        {
        };
        template<>
        struct  BlockCipherImpl<Rijndael_Info,SimpleKeyedTransformation<BlockTransformation> > : AlgorithmImpl<SimpleKeyingInterfaceImpl<TwoBases<SimpleKeyedTransformation<BlockTransformation>,Rijndael_Info>,TwoBases<SimpleKeyedTransformation<BlockTransformation>,Rijndael_Info> >,SimpleKeyingInterfaceImpl<TwoBases<SimpleKeyedTransformation<BlockTransformation>,Rijndael_Info>,TwoBases<SimpleKeyedTransformation<BlockTransformation>,Rijndael_Info> > >
        {
        };
        template<>
        struct  AllocatorBase<unsigned int>
        {
        };
        template<>
        struct  AllocatorWithCleanup<unsigned int,0> : AllocatorBase<unsigned int>
        {
        };
        template<>
        struct SecBlock<unsigned int,AllocatorWithCleanup<unsigned int,0> >
        {
            AllocatorWithCleanup<unsigned int,0> m_alloc;
            unsigned __int64 m_size;
            unsigned int *m_ptr;
        };
        template<>
        struct  ClonableImpl<BlockCipherFinal<1,Rijndael::Dec>,Rijndael::Dec> : Rijndael::Dec
        {
        public:
            ClonableImpl(struct ClonableImpl<BlockCipherFinal<1,Rijndael::Dec>,Rijndael::Dec>* __that)
            {
                using org_ptr = void (WINAPIV*)(struct ClonableImpl<BlockCipherFinal<1,Rijndael::Dec>,Rijndael::Dec>*, struct ClonableImpl<BlockCipherFinal<1,Rijndael::Dec>,Rijndael::Dec>*);
                (org_ptr(0x140459df0L))(this, __that);
            };
            void ctor_ClonableImpl(struct ClonableImpl<BlockCipherFinal<1,Rijndael::Dec>,Rijndael::Dec>* __that)
            {
                using org_ptr = void (WINAPIV*)(struct ClonableImpl<BlockCipherFinal<1,Rijndael::Dec>,Rijndael::Dec>*, struct ClonableImpl<BlockCipherFinal<1,Rijndael::Dec>,Rijndael::Dec>*);
                (org_ptr(0x140459df0L))(this, __that);
            };
            ClonableImpl()
            {
                using org_ptr = void (WINAPIV*)(struct ClonableImpl<BlockCipherFinal<1,Rijndael::Dec>,Rijndael::Dec>*);
                (org_ptr(0x14045b8e0L))(this);
            };
            void ctor_ClonableImpl()
            {
                using org_ptr = void (WINAPIV*)(struct ClonableImpl<BlockCipherFinal<1,Rijndael::Dec>,Rijndael::Dec>*);
                (org_ptr(0x14045b8e0L))(this);
            };
            struct Clonable* Clone()
            {
                using org_ptr = struct Clonable* (WINAPIV*)(struct ClonableImpl<BlockCipherFinal<1,Rijndael::Dec>,Rijndael::Dec>*);
                return (org_ptr(0x140459c30L))(this);
            };
            ~ClonableImpl()
            {
                using org_ptr = void (WINAPIV*)(struct ClonableImpl<BlockCipherFinal<1,Rijndael::Dec>,Rijndael::Dec>*);
                (org_ptr(0x140449370L))(this);
            };
            void dtor_ClonableImpl()
            {
                using org_ptr = void (WINAPIV*)(struct ClonableImpl<BlockCipherFinal<1,Rijndael::Dec>,Rijndael::Dec>*);
                (org_ptr(0x140449370L))(this);
            };
        };
        template<>
        struct  BlockCipherFinal<1,Rijndael::Dec> : ClonableImpl<BlockCipherFinal<1,Rijndael::Dec>,Rijndael::Dec>
        {
        public:
            BlockCipherFinal(struct BlockCipherFinal<1,Rijndael::Dec>* __that)
            {
                using org_ptr = void (WINAPIV*)(struct BlockCipherFinal<1,Rijndael::Dec>*, struct BlockCipherFinal<1,Rijndael::Dec>*);
                (org_ptr(0x140459d00L))(this, __that);
            };
            void ctor_BlockCipherFinal(struct BlockCipherFinal<1,Rijndael::Dec>* __that)
            {
                using org_ptr = void (WINAPIV*)(struct BlockCipherFinal<1,Rijndael::Dec>*, struct BlockCipherFinal<1,Rijndael::Dec>*);
                (org_ptr(0x140459d00L))(this, __that);
            };
            BlockCipherFinal()
            {
                using org_ptr = void (WINAPIV*)(struct BlockCipherFinal<1,Rijndael::Dec>*);
                (org_ptr(0x140459860L))(this);
            };
            void ctor_BlockCipherFinal()
            {
                using org_ptr = void (WINAPIV*)(struct BlockCipherFinal<1,Rijndael::Dec>*);
                (org_ptr(0x140459860L))(this);
            };
            bool IsForwardTransformation()
            {
                using org_ptr = bool (WINAPIV*)(struct BlockCipherFinal<1,Rijndael::Dec>*);
                return (org_ptr(0x140459c20L))(this);
            };
            ~BlockCipherFinal()
            {
                using org_ptr = void (WINAPIV*)(struct BlockCipherFinal<1,Rijndael::Dec>*);
                (org_ptr(0x140448f50L))(this);
            };
            void dtor_BlockCipherFinal()
            {
                using org_ptr = void (WINAPIV*)(struct BlockCipherFinal<1,Rijndael::Dec>*);
                (org_ptr(0x140448f50L))(this);
            };
        };
        template<>
        struct ObjectHolder<BlockCipherFinal<1,Rijndael::Dec> >
        {
            BlockCipherFinal<1,Rijndael::Dec> m_object;
        };
        struct  StreamTransformation : Algorithm
        {
        public:
            unsigned int GetOptimalBlockSizeUsed()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct StreamTransformation*);
                return (org_ptr(0x140452730L))(this);
            };
            unsigned int MandatoryBlockSize()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct StreamTransformation*);
                return (org_ptr(0x14061d0d0L))(this);
            };
            unsigned int MinLastBlockSize()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct StreamTransformation*);
                return (org_ptr(0x14055b1f0L))(this);
            };
            unsigned int OptimalBlockSize()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct StreamTransformation*);
                return (org_ptr(0x1404526e0L))(this);
            };
            void ProcessLastBlock(uint8_t* arg_0, uint8_t* arg_1, uint64_t arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct StreamTransformation*, uint8_t*, uint8_t*, uint64_t);
                (org_ptr(0x1405f3e10L))(this, arg_0, arg_1, arg_2);
            };
            void ProcessString(uint8_t* arg_0, uint8_t* arg_1, uint64_t arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct StreamTransformation*, uint8_t*, uint8_t*, uint64_t);
                (org_ptr(0x1406001e0L))(this, arg_0, arg_1, arg_2);
            };
            void ProcessString(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct StreamTransformation*, uint8_t*, uint64_t);
                (org_ptr(0x140600180L))(this, arg_0, arg_1);
            };
            void Seek(uint64_t n)
            {
                using org_ptr = void (WINAPIV*)(struct StreamTransformation*, uint64_t);
                (org_ptr(0x140452740L))(this, n);
            };
            StreamTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct StreamTransformation*);
                (org_ptr(0x140458340L))(this);
            };
            void ctor_StreamTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct StreamTransformation*);
                (org_ptr(0x140458340L))(this);
            };
            ~StreamTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct StreamTransformation*);
                (org_ptr(0x14044a110L))(this);
            };
            void dtor_StreamTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct StreamTransformation*);
                (org_ptr(0x14044a110L))(this);
            };
        };
        template<>
        struct  SimpleKeyedTransformation<StreamTransformation> : StreamTransformation, SimpleKeyingInterface
        {
        public:
            struct Algorithm* GetAlgorithm()
            {
                using org_ptr = struct Algorithm* (WINAPIV*)(struct SimpleKeyedTransformation<StreamTransformation>*);
                return (org_ptr(0x140453140L))(this);
            };
            SimpleKeyedTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyedTransformation<StreamTransformation>*);
                (org_ptr(0x1404581b0L))(this);
            };
            void ctor_SimpleKeyedTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyedTransformation<StreamTransformation>*);
                (org_ptr(0x1404581b0L))(this);
            };
            ~SimpleKeyedTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyedTransformation<StreamTransformation>*);
                (org_ptr(0x140449e30L))(this);
            };
            void dtor_SimpleKeyedTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyedTransformation<StreamTransformation>*);
                (org_ptr(0x140449e30L))(this);
            };
        };
        template<>
        struct  AllocatorWithCleanup<unsigned char,0> : AllocatorBase<unsigned char>
        {
        };
        template<>
        struct SecBlock<unsigned char,AllocatorWithCleanup<unsigned char,0> >
        {
            AllocatorWithCleanup<unsigned char,0> m_alloc;
            unsigned __int64 m_size;
            char *m_ptr;
        };
        template<>
        struct  CipherModeBase : SimpleKeyedTransformation<StreamTransformation>
        {
            SimpleKeyedTransformation<BlockTransformation> *m_cipher;
            SecBlock<unsigned char,AllocatorWithCleanup<unsigned char,0> > m_register;
        public:
            unsigned int BlockSize()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct CipherModeBase*);
                return (org_ptr(0x140452b20L))(this);
            };
            CipherModeBase()
            {
                using org_ptr = void (WINAPIV*)(struct CipherModeBase*);
                (org_ptr(0x140457fe0L))(this);
            };
            void ctor_CipherModeBase()
            {
                using org_ptr = void (WINAPIV*)(struct CipherModeBase*);
                (org_ptr(0x140457fe0L))(this);
            };
            uint64_t DefaultKeyLength()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct CipherModeBase*);
                return (org_ptr(0x140452950L))(this);
            };
            uint64_t GetValidKeyLength(uint64_t n)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct CipherModeBase*, uint64_t);
                return (org_ptr(0x1404529b0L))(this, n);
            };
            unsigned int IVSize()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct CipherModeBase*);
                return (org_ptr(0x140452ad0L))(this);
            };
            bool IsValidKeyLength(uint64_t n)
            {
                using org_ptr = bool (WINAPIV*)(struct CipherModeBase*, uint64_t);
                return (org_ptr(0x140452a20L))(this, n);
            };
            uint64_t MaxKeyLength()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct CipherModeBase*);
                return (org_ptr(0x1404528f0L))(this);
            };
            uint64_t MinKeyLength()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct CipherModeBase*);
                return (org_ptr(0x140452890L))(this);
            };
            unsigned int OptimalDataAlignment()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct CipherModeBase*);
                return (org_ptr(0x140452a90L))(this);
            };
            void ResizeBuffers()
            {
                using org_ptr = void (WINAPIV*)(struct CipherModeBase*);
                (org_ptr(0x1404530d0L))(this);
            };
            void SetFeedbackSize(unsigned int feedbackSize)
            {
                using org_ptr = void (WINAPIV*)(struct CipherModeBase*, unsigned int);
                (org_ptr(0x140452bb0L))(this, feedbackSize);
            };
            ~CipherModeBase()
            {
                using org_ptr = void (WINAPIV*)(struct CipherModeBase*);
                (org_ptr(0x140449b70L))(this);
            };
            void dtor_CipherModeBase()
            {
                using org_ptr = void (WINAPIV*)(struct CipherModeBase*);
                (org_ptr(0x140449b70L))(this);
            };
        };
        struct  BlockOrientedCipherModeBase : CipherModeBase
        {
            SecBlock<unsigned char,AllocatorWithCleanup<unsigned char,0> > m_buffer;
        public:
            BlockOrientedCipherModeBase()
            {
                using org_ptr = void (WINAPIV*)(struct BlockOrientedCipherModeBase*);
                (org_ptr(0x140457dd0L))(this);
            };
            void ctor_BlockOrientedCipherModeBase()
            {
                using org_ptr = void (WINAPIV*)(struct BlockOrientedCipherModeBase*);
                (org_ptr(0x140457dd0L))(this);
            };
            bool IsForwardTransformation()
            {
                using org_ptr = bool (WINAPIV*)(struct BlockOrientedCipherModeBase*);
                return (org_ptr(0x140452ec0L))(this);
            };
            bool IsRandomAccess()
            {
                using org_ptr = bool (WINAPIV*)(struct BlockOrientedCipherModeBase*);
                return (org_ptr(0x140452ea0L))(this);
            };
            bool IsSelfInverting()
            {
                using org_ptr = bool (WINAPIV*)(struct BlockOrientedCipherModeBase*);
                return (org_ptr(0x140452eb0L))(this);
            };
            unsigned int MandatoryBlockSize()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct BlockOrientedCipherModeBase*);
                return (org_ptr(0x140452e60L))(this);
            };
            void ProcessData(uint8_t* arg_0, uint8_t* arg_1, uint64_t arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct BlockOrientedCipherModeBase*, uint8_t*, uint8_t*, uint64_t);
                (org_ptr(0x140618f70L))(this, arg_0, arg_1, arg_2);
            };
            bool RequireAlignedInput()
            {
                using org_ptr = bool (WINAPIV*)(struct BlockOrientedCipherModeBase*);
                return (org_ptr(0x14061a460L))(this);
            };
            void ResizeBuffers()
            {
                using org_ptr = void (WINAPIV*)(struct BlockOrientedCipherModeBase*);
                (org_ptr(0x140453060L))(this);
            };
            void Resynchronize(char* iv)
            {
                using org_ptr = void (WINAPIV*)(struct BlockOrientedCipherModeBase*, char*);
                (org_ptr(0x140452f20L))(this, iv);
            };
            void UncheckedSetKey(uint8_t* arg_0, unsigned int arg_1, struct NameValuePairs* arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct BlockOrientedCipherModeBase*, uint8_t*, unsigned int, struct NameValuePairs*);
                (org_ptr(0x140618ea0L))(this, arg_0, arg_1, arg_2);
            };
            ~BlockOrientedCipherModeBase()
            {
                using org_ptr = void (WINAPIV*)(struct BlockOrientedCipherModeBase*);
                (org_ptr(0x140449690L))(this);
            };
            void dtor_BlockOrientedCipherModeBase()
            {
                using org_ptr = void (WINAPIV*)(struct BlockOrientedCipherModeBase*);
                (org_ptr(0x140449690L))(this);
            };
        };
        struct  CBC_ModeBase : BlockOrientedCipherModeBase
        {
        public:
            CBC_ModeBase()
            {
                using org_ptr = void (WINAPIV*)(struct CBC_ModeBase*);
                (org_ptr(0x140457bc0L))(this);
            };
            void ctor_CBC_ModeBase()
            {
                using org_ptr = void (WINAPIV*)(struct CBC_ModeBase*);
                (org_ptr(0x140457bc0L))(this);
            };
            struct SimpleKeyingInterface::IV_Requirement IVRequirement()
            {
                using org_ptr = struct SimpleKeyingInterface::IV_Requirement (WINAPIV*)(struct CBC_ModeBase*);
                return (org_ptr(0x140452fd0L))(this);
            };
            unsigned int MinLastBlockSize()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct CBC_ModeBase*);
                return (org_ptr(0x140452fe0L))(this);
            };
            static char* StaticAlgorithmName()
            {
                using org_ptr = char* (WINAPIV*)();
                return (org_ptr(0x140459850L))();
            };
            ~CBC_ModeBase()
            {
                using org_ptr = void (WINAPIV*)(struct CBC_ModeBase*);
                (org_ptr(0x1404493b0L))(this);
            };
            void dtor_CBC_ModeBase()
            {
                using org_ptr = void (WINAPIV*)(struct CBC_ModeBase*);
                (org_ptr(0x1404493b0L))(this);
            };
        };
        struct  CBC_Decryption : CBC_ModeBase
        {
            SecBlock<unsigned char,AllocatorWithCleanup<unsigned char,0> > m_temp;
        public:
            CBC_Decryption()
            {
                using org_ptr = void (WINAPIV*)(struct CBC_Decryption*);
                (org_ptr(0x1404576b0L))(this);
            };
            void ctor_CBC_Decryption()
            {
                using org_ptr = void (WINAPIV*)(struct CBC_Decryption*);
                (org_ptr(0x1404576b0L))(this);
            };
            void ProcessBlocks(uint8_t* arg_0, uint8_t* arg_1, uint64_t arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct CBC_Decryption*, uint8_t*, uint8_t*, uint64_t);
                (org_ptr(0x140619550L))(this, arg_0, arg_1, arg_2);
            };
            void ResizeBuffers()
            {
                using org_ptr = void (WINAPIV*)(struct CBC_Decryption*);
                (org_ptr(0x140452ff0L))(this);
            };
            ~CBC_Decryption()
            {
                using org_ptr = void (WINAPIV*)(struct CBC_Decryption*);
                (org_ptr(0x140448f90L))(this);
            };
            void dtor_CBC_Decryption()
            {
                using org_ptr = void (WINAPIV*)(struct CBC_Decryption*);
                (org_ptr(0x140448f90L))(this);
            };
        };
        template<>
        struct  AlgorithmImpl<CBC_Decryption,CipherModeFinalTemplate_CipherHolder<BlockCipherFinal<1,Rijndael::Dec>,CBC_Decryption> > : CBC_Decryption
        {
        };
        template<>
        struct  CipherModeFinalTemplate_CipherHolder<BlockCipherFinal<1,Rijndael::Dec>,CBC_Decryption> : AlgorithmImpl<CBC_Decryption,CipherModeFinalTemplate_CipherHolder<BlockCipherFinal<1,Rijndael::Dec>,CBC_Decryption> >, ObjectHolder<BlockCipherFinal<1,Rijndael::Dec> >
        {
        public:
            CipherModeFinalTemplate_CipherHolder()
            {
                using org_ptr = void (WINAPIV*)(struct CipherModeFinalTemplate_CipherHolder<BlockCipherFinal<1,Rijndael::Dec>,CBC_Decryption>*);
                (org_ptr(0x1404525c0L))(this);
            };
            void ctor_CipherModeFinalTemplate_CipherHolder()
            {
                using org_ptr = void (WINAPIV*)(struct CipherModeFinalTemplate_CipherHolder<BlockCipherFinal<1,Rijndael::Dec>,CBC_Decryption>*);
                (org_ptr(0x1404525c0L))(this);
            };
            static struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* StaticAlgorithmName(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* result)
            {
                using org_ptr = struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (WINAPIV*)(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*);
                return (org_ptr(0x140459640L))(result);
            };
            ~CipherModeFinalTemplate_CipherHolder()
            {
                using org_ptr = void (WINAPIV*)(struct CipherModeFinalTemplate_CipherHolder<BlockCipherFinal<1,Rijndael::Dec>,CBC_Decryption>*);
                (org_ptr(0x1404489a0L))(this);
            };
            void dtor_CipherModeFinalTemplate_CipherHolder()
            {
                using org_ptr = void (WINAPIV*)(struct CipherModeFinalTemplate_CipherHolder<BlockCipherFinal<1,Rijndael::Dec>,CBC_Decryption>*);
                (org_ptr(0x1404489a0L))(this);
            };
        };
        struct PK_CryptoSystem
        {
            PK_CryptoSystemVtbl *vfptr;
        public:
            uint64_t FixedCiphertextLength()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct PK_CryptoSystem*);
                return (org_ptr(0x140454f40L))(this);
            };
            uint64_t FixedMaxPlaintextLength()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct PK_CryptoSystem*);
                return (org_ptr(0x140454f50L))(this);
            };
            PK_CryptoSystem()
            {
                using org_ptr = void (WINAPIV*)(struct PK_CryptoSystem*);
                (org_ptr(0x140458570L))(this);
            };
            void ctor_PK_CryptoSystem()
            {
                using org_ptr = void (WINAPIV*)(struct PK_CryptoSystem*);
                (org_ptr(0x140458570L))(this);
            };
            ~PK_CryptoSystem()
            {
                using org_ptr = void (WINAPIV*)(struct PK_CryptoSystem*);
                (org_ptr(0x14044a260L))(this);
            };
            void dtor_PK_CryptoSystem()
            {
                using org_ptr = void (WINAPIV*)(struct PK_CryptoSystem*);
                (org_ptr(0x14044a260L))(this);
            };
        };
        struct PK_CryptoSystemVtbl
        {
            void *(WINAPIV *__vecDelDtor)(PK_CryptoSystem *_this, unsigned int);
            unsigned __int64 (WINAPIV *MaxPlaintextLength)(PK_CryptoSystem *_this, unsigned __int64);
            unsigned __int64 (WINAPIV *CiphertextLength)(PK_CryptoSystem *_this, unsigned __int64);
            bool (WINAPIV *ParameterSupported)(PK_CryptoSystem *_this, const char *);
            unsigned __int64 (WINAPIV *FixedCiphertextLength)(PK_CryptoSystem *_this);
            unsigned __int64 (WINAPIV *FixedMaxPlaintextLength)(PK_CryptoSystem *_this);
        };
        struct  AsymmetricAlgorithm : Algorithm
        {
        public:
            AsymmetricAlgorithm(struct AsymmetricAlgorithm* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct AsymmetricAlgorithm*, struct AsymmetricAlgorithm*);
                (org_ptr(0x140633a10L))(this, arg_0);
            };
            int64_t ctor_AsymmetricAlgorithm(struct AsymmetricAlgorithm* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct AsymmetricAlgorithm*, struct AsymmetricAlgorithm*);
                return (org_ptr(0x140633a10L))(this, arg_0);
            };
            AsymmetricAlgorithm()
            {
                using org_ptr = void (WINAPIV*)(struct AsymmetricAlgorithm*);
                (org_ptr(0x140458640L))(this);
            };
            void ctor_AsymmetricAlgorithm()
            {
                using org_ptr = void (WINAPIV*)(struct AsymmetricAlgorithm*);
                (org_ptr(0x140458640L))(this);
            };
            ~AsymmetricAlgorithm()
            {
                using org_ptr = void (WINAPIV*)(struct AsymmetricAlgorithm*);
                (org_ptr(0x14044a480L))(this);
            };
            void dtor_AsymmetricAlgorithm()
            {
                using org_ptr = void (WINAPIV*)(struct AsymmetricAlgorithm*);
                (org_ptr(0x14044a480L))(this);
            };
        };
        struct  PublicKeyAlgorithm : AsymmetricAlgorithm
        {
        public:
            struct CryptoMaterial* AccessMaterial()
            {
                using org_ptr = struct CryptoMaterial* (WINAPIV*)(struct PublicKeyAlgorithm*);
                return (org_ptr(0x140454dd0L))(this);
            };
            struct CryptoMaterial* GetMaterial()
            {
                using org_ptr = struct CryptoMaterial* (WINAPIV*)(struct PublicKeyAlgorithm*);
                return (org_ptr(0x140454e60L))(this);
            };
            struct PublicKey* GetPublicKey()
            {
                using org_ptr = struct PublicKey* (WINAPIV*)(struct PublicKeyAlgorithm*);
                return (org_ptr(0x140454ef0L))(this);
            };
            PublicKeyAlgorithm()
            {
                using org_ptr = void (WINAPIV*)(struct PublicKeyAlgorithm*);
                (org_ptr(0x140458580L))(this);
            };
            void ctor_PublicKeyAlgorithm()
            {
                using org_ptr = void (WINAPIV*)(struct PublicKeyAlgorithm*);
                (org_ptr(0x140458580L))(this);
            };
            ~PublicKeyAlgorithm()
            {
                using org_ptr = void (WINAPIV*)(struct PublicKeyAlgorithm*);
                (org_ptr(0x14044a3c0L))(this);
            };
            void dtor_PublicKeyAlgorithm()
            {
                using org_ptr = void (WINAPIV*)(struct PublicKeyAlgorithm*);
                (org_ptr(0x14044a3c0L))(this);
            };
        };
        struct  PK_Encryptor : PK_CryptoSystem, PublicKeyAlgorithm
        {
                struct  InvalidPlaintextLength : Exception
                {
                };
        public:
            struct BufferedTransformation* CreateEncryptionFilter(struct RandomNumberGenerator* arg_0, struct BufferedTransformation* arg_1, struct NameValuePairs* arg_2)
            {
                using org_ptr = struct BufferedTransformation* (WINAPIV*)(struct PK_Encryptor*, struct RandomNumberGenerator*, struct BufferedTransformation*, struct NameValuePairs*);
                return (org_ptr(0x1405f5e10L))(this, arg_0, arg_1, arg_2);
            };
            PK_Encryptor()
            {
                using org_ptr = void (WINAPIV*)(struct PK_Encryptor*);
                (org_ptr(0x140458390L))(this);
            };
            void ctor_PK_Encryptor()
            {
                using org_ptr = void (WINAPIV*)(struct PK_Encryptor*);
                (org_ptr(0x140458390L))(this);
            };
            ~PK_Encryptor()
            {
                using org_ptr = void (WINAPIV*)(struct PK_Encryptor*);
                (org_ptr(0x14044a1a0L))(this);
            };
            void dtor_PK_Encryptor()
            {
                using org_ptr = void (WINAPIV*)(struct PK_Encryptor*);
                (org_ptr(0x14044a1a0L))(this);
            };
        };
        template<>
        struct DL_Base<DL_PublicKey<ECPPoint> >
        {
            DL_Base<DL_PublicKey<ECPPoint> >Vtbl *vfptr;
        };
        template<>
        struct DL_Base<DL_PublicKey<ECPPoint> >Vtbl
        {
            DL_PublicKey<ECPPoint> *(WINAPIV *AccessKeyInterface)(DL_Base<DL_PublicKey<ECPPoint> > *_this);
            DL_PublicKey<ECPPoint> *(WINAPIV *GetKeyInterface)(DL_Base<DL_PublicKey<ECPPoint> > *_this);
        };
        template<>
        struct  DL_CryptoSystemBase<PK_Encryptor,DL_PublicKey<ECPPoint> > : PK_Encryptor, DL_Base<DL_PublicKey<ECPPoint> >
        {
        };
        template<>
        struct  DL_EncryptorBase<ECPPoint> : DL_CryptoSystemBase<PK_Encryptor,DL_PublicKey<ECPPoint> >
        {
        public:
            DL_EncryptorBase()
            {
                using org_ptr = void (WINAPIV*)(struct DL_EncryptorBase<ECPPoint>*);
                (org_ptr(0x140458090L))(this);
            };
            void ctor_DL_EncryptorBase()
            {
                using org_ptr = void (WINAPIV*)(struct DL_EncryptorBase<ECPPoint>*);
                (org_ptr(0x140458090L))(this);
            };
            void Encrypt(struct RandomNumberGenerator* rng, char* plaintext, uint64_t plaintextLength, char* ciphertext, struct NameValuePairs* parameters)
            {
                using org_ptr = void (WINAPIV*)(struct DL_EncryptorBase<ECPPoint>*, struct RandomNumberGenerator*, char*, uint64_t, char*, struct NameValuePairs*);
                (org_ptr(0x1404551d0L))(this, rng, plaintext, plaintextLength, ciphertext, parameters);
            };
            ~DL_EncryptorBase()
            {
                using org_ptr = void (WINAPIV*)(struct DL_EncryptorBase<ECPPoint>*);
                (org_ptr(0x140449c00L))(this);
            };
            void dtor_DL_EncryptorBase()
            {
                using org_ptr = void (WINAPIV*)(struct DL_EncryptorBase<ECPPoint>*);
                (org_ptr(0x140449c00L))(this);
            };
        };
        template<>
        struct  AlgorithmImpl<DL_EncryptorBase<ECPPoint>,ECIES<ECP,EnumToType<enum CofactorMultiplicationOption,0>,0> > : DL_EncryptorBase<ECPPoint>
        {
        };
        template<>
        struct   DL_ObjectImplBase<DL_EncryptorBase<ECPPoint>,DL_CryptoSchemeOptions<ECIES<ECP,EnumToType<enum CofactorMultiplicationOption,0>,0>,DL_Keys_EC<ECP>,DL_KeyAgreementAlgorithm_DH<ECPPoint,EnumToType<enum CofactorMultiplicationOption,0> >,DL_KeyDerivationAlgorithm_P1363<ECPPoint,0,P1363_KDF2<SHA1> >,DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0> >,DL_PublicKey_EC<ECP> > : AlgorithmImpl<DL_EncryptorBase<ECPPoint>,ECIES<ECP,EnumToType<enum CofactorMultiplicationOption,0>,0> >
        {
            DL_PublicKey_EC<ECP> m_key;
        };
        template<>
        struct  DL_ObjectImpl<DL_EncryptorBase<ECPPoint>,DL_CryptoSchemeOptions<ECIES<ECP,EnumToType<enum CofactorMultiplicationOption,0>,0>,DL_Keys_EC<ECP>,DL_KeyAgreementAlgorithm_DH<ECPPoint,EnumToType<enum CofactorMultiplicationOption,0> >,DL_KeyDerivationAlgorithm_P1363<ECPPoint,0,P1363_KDF2<SHA1> >,DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0> >,DL_PublicKey_EC<ECP> > : DL_ObjectImplBase<DL_EncryptorBase<ECPPoint>,DL_CryptoSchemeOptions<ECIES<ECP,EnumToType<enum CofactorMultiplicationOption,0>,0>,DL_Keys_EC<ECP>,DL_KeyAgreementAlgorithm_DH<ECPPoint,EnumToType<enum CofactorMultiplicationOption,0> >,DL_KeyDerivationAlgorithm_P1363<ECPPoint,0,P1363_KDF2<SHA1> >,DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0> >,DL_PublicKey_EC<ECP> >
        {
        };
        template<>
        struct  DL_EncryptorImpl<DL_CryptoSchemeOptions<ECIES<ECP,EnumToType<enum CofactorMultiplicationOption,0>,0>,DL_Keys_EC<ECP>,DL_KeyAgreementAlgorithm_DH<ECPPoint,EnumToType<enum CofactorMultiplicationOption,0> >,DL_KeyDerivationAlgorithm_P1363<ECPPoint,0,P1363_KDF2<SHA1> >,DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0> > > : DL_ObjectImpl<DL_EncryptorBase<ECPPoint>,DL_CryptoSchemeOptions<ECIES<ECP,EnumToType<enum CofactorMultiplicationOption,0>,0>,DL_Keys_EC<ECP>,DL_KeyAgreementAlgorithm_DH<ECPPoint,EnumToType<enum CofactorMultiplicationOption,0> >,DL_KeyDerivationAlgorithm_P1363<ECPPoint,0,P1363_KDF2<SHA1> >,DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0> >,DL_PublicKey_EC<ECP> >
        {
        };
        template<>
        struct  PK_FinalTemplate<DL_EncryptorImpl<DL_CryptoSchemeOptions<ECIES<ECP,EnumToType<enum CofactorMultiplicationOption,0>,0>,DL_Keys_EC<ECP>,DL_KeyAgreementAlgorithm_DH<ECPPoint,EnumToType<enum CofactorMultiplicationOption,0> >,DL_KeyDerivationAlgorithm_P1363<ECPPoint,0,P1363_KDF2<SHA1> >,DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0> > > > : DL_EncryptorImpl<DL_CryptoSchemeOptions<ECIES<ECP,EnumToType<enum CofactorMultiplicationOption,0>,0>,DL_Keys_EC<ECP>,DL_KeyAgreementAlgorithm_DH<ECPPoint,EnumToType<enum CofactorMultiplicationOption,0> >,DL_KeyDerivationAlgorithm_P1363<ECPPoint,0,P1363_KDF2<SHA1> >,DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0> > >
        {
        };
        struct  PrivateKeyAlgorithm : AsymmetricAlgorithm
        {
        public:
            struct CryptoMaterial* AccessMaterial()
            {
                using org_ptr = struct CryptoMaterial* (WINAPIV*)(struct PrivateKeyAlgorithm*);
                return (org_ptr(0x140455ad0L))(this);
            };
            struct CryptoMaterial* GetMaterial()
            {
                using org_ptr = struct CryptoMaterial* (WINAPIV*)(struct PrivateKeyAlgorithm*);
                return (org_ptr(0x140455b60L))(this);
            };
            struct PrivateKey* GetPrivateKey()
            {
                using org_ptr = struct PrivateKey* (WINAPIV*)(struct PrivateKeyAlgorithm*);
                return (org_ptr(0x140455bf0L))(this);
            };
            PrivateKeyAlgorithm(struct PrivateKeyAlgorithm* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct PrivateKeyAlgorithm*, struct PrivateKeyAlgorithm*);
                (org_ptr(0x140633730L))(this, arg_0);
            };
            int64_t ctor_PrivateKeyAlgorithm(struct PrivateKeyAlgorithm* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct PrivateKeyAlgorithm*, struct PrivateKeyAlgorithm*);
                return (org_ptr(0x140633730L))(this, arg_0);
            };
            PrivateKeyAlgorithm()
            {
                using org_ptr = void (WINAPIV*)(struct PrivateKeyAlgorithm*);
                (org_ptr(0x1404585d0L))(this);
            };
            void ctor_PrivateKeyAlgorithm()
            {
                using org_ptr = void (WINAPIV*)(struct PrivateKeyAlgorithm*);
                (org_ptr(0x1404585d0L))(this);
            };
            ~PrivateKeyAlgorithm()
            {
                using org_ptr = void (WINAPIV*)(struct PrivateKeyAlgorithm*);
                (org_ptr(0x14044a400L))(this);
            };
            void dtor_PrivateKeyAlgorithm()
            {
                using org_ptr = void (WINAPIV*)(struct PrivateKeyAlgorithm*);
                (org_ptr(0x14044a400L))(this);
            };
        };
        struct  PK_Decryptor : PK_CryptoSystem, PrivateKeyAlgorithm
        {
        public:
            struct BufferedTransformation* CreateDecryptionFilter(struct RandomNumberGenerator* arg_0, struct BufferedTransformation* arg_1, struct NameValuePairs* arg_2)
            {
                using org_ptr = struct BufferedTransformation* (WINAPIV*)(struct PK_Decryptor*, struct RandomNumberGenerator*, struct BufferedTransformation*, struct NameValuePairs*);
                return (org_ptr(0x1405f5eb0L))(this, arg_0, arg_1, arg_2);
            };
            PK_Decryptor()
            {
                using org_ptr = void (WINAPIV*)(struct PK_Decryptor*);
                (org_ptr(0x140458450L))(this);
            };
            void ctor_PK_Decryptor()
            {
                using org_ptr = void (WINAPIV*)(struct PK_Decryptor*);
                (org_ptr(0x140458450L))(this);
            };
            ~PK_Decryptor()
            {
                using org_ptr = void (WINAPIV*)(struct PK_Decryptor*);
                (org_ptr(0x14044a270L))(this);
            };
            void dtor_PK_Decryptor()
            {
                using org_ptr = void (WINAPIV*)(struct PK_Decryptor*);
                (org_ptr(0x14044a270L))(this);
            };
        };
        template<>
        struct DL_Base<DL_PrivateKey<ECPPoint> >
        {
            DL_Base<DL_PrivateKey<ECPPoint> >Vtbl *vfptr;
        };
        template<>
        struct DL_Base<DL_PrivateKey<ECPPoint> >Vtbl
        {
            DL_PrivateKey<ECPPoint> *(WINAPIV *AccessKeyInterface)(DL_Base<DL_PrivateKey<ECPPoint> > *_this);
            DL_PrivateKey<ECPPoint> *(WINAPIV *GetKeyInterface)(DL_Base<DL_PrivateKey<ECPPoint> > *_this);
        };
        template<>
        struct  DL_CryptoSystemBase<PK_Decryptor,DL_PrivateKey<ECPPoint> > : PK_Decryptor, DL_Base<DL_PrivateKey<ECPPoint> >
        {
        };
        template<>
        struct  DL_DecryptorBase<ECPPoint> : DL_CryptoSystemBase<PK_Decryptor,DL_PrivateKey<ECPPoint> >
        {
        public:
            DL_DecryptorBase()
            {
                using org_ptr = void (WINAPIV*)(struct DL_DecryptorBase<ECPPoint>*);
                (org_ptr(0x1404580e0L))(this);
            };
            void ctor_DL_DecryptorBase()
            {
                using org_ptr = void (WINAPIV*)(struct DL_DecryptorBase<ECPPoint>*);
                (org_ptr(0x1404580e0L))(this);
            };
            struct DecodingResult* Decrypt(struct DecodingResult* result, struct RandomNumberGenerator* rng, char* ciphertext, uint64_t ciphertextLength, char* plaintext, struct NameValuePairs* parameters)
            {
                using org_ptr = struct DecodingResult* (WINAPIV*)(struct DL_DecryptorBase<ECPPoint>*, struct DecodingResult*, struct RandomNumberGenerator*, char*, uint64_t, char*, struct NameValuePairs*);
                return (org_ptr(0x140455eb0L))(this, result, rng, ciphertext, ciphertextLength, plaintext, parameters);
            };
            ~DL_DecryptorBase()
            {
                using org_ptr = void (WINAPIV*)(struct DL_DecryptorBase<ECPPoint>*);
                (org_ptr(0x140449c40L))(this);
            };
            void dtor_DL_DecryptorBase()
            {
                using org_ptr = void (WINAPIV*)(struct DL_DecryptorBase<ECPPoint>*);
                (org_ptr(0x140449c40L))(this);
            };
        };
        template<>
        struct  AlgorithmImpl<DL_DecryptorBase<ECPPoint>,ECIES<ECP,EnumToType<enum CofactorMultiplicationOption,0>,0> > : DL_DecryptorBase<ECPPoint>
        {
        };
        template<>
        struct  DL_ObjectImplBase<DL_DecryptorBase<ECPPoint>,DL_CryptoSchemeOptions<ECIES<ECP,EnumToType<enum CofactorMultiplicationOption,0>,0>,DL_Keys_EC<ECP>,DL_KeyAgreementAlgorithm_DH<ECPPoint,EnumToType<enum CofactorMultiplicationOption,0> >,DL_KeyDerivationAlgorithm_P1363<ECPPoint,0,P1363_KDF2<SHA1> >,DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0> >,DL_PrivateKey_EC<ECP> > : AlgorithmImpl<DL_DecryptorBase<ECPPoint>,ECIES<ECP,EnumToType<enum CofactorMultiplicationOption,0>,0> >
        {
            DL_PrivateKey_EC<ECP> m_key;
        };
        template<>
        struct  DL_ObjectImpl<DL_DecryptorBase<ECPPoint>,DL_CryptoSchemeOptions<ECIES<ECP,EnumToType<enum CofactorMultiplicationOption,0>,0>,DL_Keys_EC<ECP>,DL_KeyAgreementAlgorithm_DH<ECPPoint,EnumToType<enum CofactorMultiplicationOption,0> >,DL_KeyDerivationAlgorithm_P1363<ECPPoint,0,P1363_KDF2<SHA1> >,DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0> >,DL_PrivateKey_EC<ECP> > : DL_ObjectImplBase<DL_DecryptorBase<ECPPoint>,DL_CryptoSchemeOptions<ECIES<ECP,EnumToType<enum CofactorMultiplicationOption,0>,0>,DL_Keys_EC<ECP>,DL_KeyAgreementAlgorithm_DH<ECPPoint,EnumToType<enum CofactorMultiplicationOption,0> >,DL_KeyDerivationAlgorithm_P1363<ECPPoint,0,P1363_KDF2<SHA1> >,DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0> >,DL_PrivateKey_EC<ECP> >
        {
        };
        template<>
        struct  DL_DecryptorImpl<DL_CryptoSchemeOptions<ECIES<ECP,EnumToType<enum CofactorMultiplicationOption,0>,0>,DL_Keys_EC<ECP>,DL_KeyAgreementAlgorithm_DH<ECPPoint,EnumToType<enum CofactorMultiplicationOption,0> >,DL_KeyDerivationAlgorithm_P1363<ECPPoint,0,P1363_KDF2<SHA1> >,DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0> > > : DL_ObjectImpl<DL_DecryptorBase<ECPPoint>,DL_CryptoSchemeOptions<ECIES<ECP,EnumToType<enum CofactorMultiplicationOption,0>,0>,DL_Keys_EC<ECP>,DL_KeyAgreementAlgorithm_DH<ECPPoint,EnumToType<enum CofactorMultiplicationOption,0> >,DL_KeyDerivationAlgorithm_P1363<ECPPoint,0,P1363_KDF2<SHA1> >,DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0> >,DL_PrivateKey_EC<ECP> >
        {
        };
        template<>
        struct  PK_FinalTemplate<DL_DecryptorImpl<DL_CryptoSchemeOptions<ECIES<ECP,EnumToType<enum CofactorMultiplicationOption,0>,0>,DL_Keys_EC<ECP>,DL_KeyAgreementAlgorithm_DH<ECPPoint,EnumToType<enum CofactorMultiplicationOption,0> >,DL_KeyDerivationAlgorithm_P1363<ECPPoint,0,P1363_KDF2<SHA1> >,DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0> > > > : DL_DecryptorImpl<DL_CryptoSchemeOptions<ECIES<ECP,EnumToType<enum CofactorMultiplicationOption,0>,0>,DL_Keys_EC<ECP>,DL_KeyAgreementAlgorithm_DH<ECPPoint,EnumToType<enum CofactorMultiplicationOption,0> >,DL_KeyDerivationAlgorithm_P1363<ECPPoint,0,P1363_KDF2<SHA1> >,DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0> > >
        {
        };
        struct  HashTransformation : Algorithm
        {
        public:
            unsigned int BlockSize()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct HashTransformation*);
                return (org_ptr(0x1404652d0L))(this);
            };
            void CalculateDigest(char* digest, char* input, uint64_t length)
            {
                using org_ptr = void (WINAPIV*)(struct HashTransformation*, char*, char*, uint64_t);
                (org_ptr(0x14044de50L))(this, digest, input, length);
            };
            void CalculateTruncatedDigest(char* digest, uint64_t digestSize, char* input, uint64_t length)
            {
                using org_ptr = void (WINAPIV*)(struct HashTransformation*, char*, uint64_t, char*, uint64_t);
                (org_ptr(0x14044df50L))(this, digest, digestSize, input, length);
            };
            char* CreateUpdateSpace(uint64_t* size)
            {
                using org_ptr = char* (WINAPIV*)(struct HashTransformation*, uint64_t*);
                return (org_ptr(0x1404652a0L))(this, size);
            };
            void Final(char* digest)
            {
                using org_ptr = void (WINAPIV*)(struct HashTransformation*, char*);
                (org_ptr(0x14044ddd0L))(this, digest);
            };
            HashTransformation(struct HashTransformation* __that)
            {
                using org_ptr = void (WINAPIV*)(struct HashTransformation*, struct HashTransformation*);
                (org_ptr(0x1404582e0L))(this, __that);
            };
            void ctor_HashTransformation(struct HashTransformation* __that)
            {
                using org_ptr = void (WINAPIV*)(struct HashTransformation*, struct HashTransformation*);
                (org_ptr(0x1404582e0L))(this, __that);
            };
            HashTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct HashTransformation*);
                (org_ptr(0x140458ec0L))(this);
            };
            void ctor_HashTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct HashTransformation*);
                (org_ptr(0x140458ec0L))(this);
            };
            unsigned int OptimalBlockSize()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct HashTransformation*);
                return (org_ptr(0x140562e00L))(this);
            };
            unsigned int OptimalDataAlignment()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct HashTransformation*);
                return (org_ptr(0x1404652e0L))(this);
            };
            void Restart()
            {
                using org_ptr = void (WINAPIV*)(struct HashTransformation*);
                (org_ptr(0x140562dd0L))(this);
            };
            void ThrowIfInvalidTruncatedSize(uint64_t arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct HashTransformation*, uint64_t);
                (org_ptr(0x1405f4420L))(this, arg_0);
            };
            bool TruncatedVerify(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = bool (WINAPIV*)(struct HashTransformation*, uint8_t*, uint64_t);
                return (org_ptr(0x1405f4330L))(this, arg_0, arg_1);
            };
            bool Verify(char* digest)
            {
                using org_ptr = bool (WINAPIV*)(struct HashTransformation*, char*);
                return (org_ptr(0x14044ded0L))(this, digest);
            };
            bool VerifyDigest(char* digest, char* input, uint64_t length)
            {
                using org_ptr = bool (WINAPIV*)(struct HashTransformation*, char*, char*, uint64_t);
                return (org_ptr(0x14044dcf0L))(this, digest, input, length);
            };
            bool VerifyTruncatedDigest(char* digest, uint64_t digestLength, char* input, uint64_t length)
            {
                using org_ptr = bool (WINAPIV*)(struct HashTransformation*, char*, uint64_t, char*, uint64_t);
                return (org_ptr(0x14044dfe0L))(this, digest, digestLength, input, length);
            };
            ~HashTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct HashTransformation*);
                (org_ptr(0x14044e340L))(this);
            };
            void dtor_HashTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct HashTransformation*);
                (org_ptr(0x14044e340L))(this);
            };
        };
        template<>
        struct  IteratedHashBase<unsigned int,HashTransformation> : HashTransformation
        {
            unsigned int m_countLo;
            unsigned int m_countHi;
        };
        template<>
        struct  NullAllocator<unsigned int> : AllocatorBase<unsigned int>
        {
        };
        template<>
        struct  FixedSizeAllocatorWithCleanup<unsigned int,16,NullAllocator<unsigned int>,0> : AllocatorBase<unsigned int>
        {
            unsigned int m_array[16];
            NullAllocator<unsigned int> m_fallbackAllocator;
            bool m_allocated;
        };
        template<>
        struct SecBlock<unsigned int,FixedSizeAllocatorWithCleanup<unsigned int,16,NullAllocator<unsigned int>,0> >
        {
            FixedSizeAllocatorWithCleanup<unsigned int,16,NullAllocator<unsigned int>,0> m_alloc;
            unsigned __int64 m_size;
            unsigned int *m_ptr;
        };
        template<>
        struct  FixedSizeSecBlock<unsigned int,16,FixedSizeAllocatorWithCleanup<unsigned int,16,NullAllocator<unsigned int>,0> > : SecBlock<unsigned int,FixedSizeAllocatorWithCleanup<unsigned int,16,NullAllocator<unsigned int>,0> >
        {
        };
        template<>
        struct  IteratedHash<unsigned int,EnumToType<enum ByteOrder,1>,64,HashTransformation> : IteratedHashBase<unsigned int,HashTransformation>
        {
            FixedSizeSecBlock<unsigned int,16,FixedSizeAllocatorWithCleanup<unsigned int,16,NullAllocator<unsigned int>,0> > m_data;
        };
        template<>
        struct  AlgorithmImpl<IteratedHash<unsigned int,EnumToType<enum ByteOrder,1>,64,HashTransformation>,SHA256> : IteratedHash<unsigned int,EnumToType<enum ByteOrder,1>,64,HashTransformation>
        {
        };
        template<>
        struct  ClonableImpl<SHA256,AlgorithmImpl<IteratedHash<unsigned int,EnumToType<enum ByteOrder,1>,64,HashTransformation>,SHA256> > : AlgorithmImpl<IteratedHash<unsigned int,EnumToType<enum ByteOrder,1>,64,HashTransformation>,SHA256>
        {
        };
        template<>
        struct  IteratedHashWithStaticTransform<unsigned int,EnumToType<enum ByteOrder,1>,64,32,SHA256,0> : ClonableImpl<SHA256,AlgorithmImpl<IteratedHash<unsigned int,EnumToType<enum ByteOrder,1>,64,HashTransformation>,SHA256> >
        {
            FixedSizeSecBlock<unsigned int,16,FixedSizeAllocatorWithCleanup<unsigned int,16,NullAllocator<unsigned int>,0> > m_state;
        };
        template<>
        struct  SHA256 : IteratedHashWithStaticTransform<unsigned int,EnumToType<enum ByteOrder,1>,64,32,SHA256,0>
        {
        public:
            static void InitState(unsigned int* arg_0)
            {
                using org_ptr = void (WINAPIV*)(unsigned int*);
                (org_ptr(0x1406087b0L))(arg_0);
            };
            SHA256(struct SHA256* __that)
            {
                using org_ptr = void (WINAPIV*)(struct SHA256*, struct SHA256*);
                (org_ptr(0x140454710L))(this, __that);
            };
            void ctor_SHA256(struct SHA256* __that)
            {
                using org_ptr = void (WINAPIV*)(struct SHA256*, struct SHA256*);
                (org_ptr(0x140454710L))(this, __that);
            };
            SHA256()
            {
                using org_ptr = void (WINAPIV*)(struct SHA256*);
                (org_ptr(0x14044dd70L))(this);
            };
            void ctor_SHA256()
            {
                using org_ptr = void (WINAPIV*)(struct SHA256*);
                (org_ptr(0x14044dd70L))(this);
            };
            static char* StaticAlgorithmName()
            {
                using org_ptr = char* (WINAPIV*)();
                return (org_ptr(0x14044f120L))();
            };
            static void Transform(unsigned int* arg_0, unsigned int* arg_1)
            {
                using org_ptr = void (WINAPIV*)(unsigned int*, unsigned int*);
                (org_ptr(0x1406087e0L))(arg_0, arg_1);
            };
            ~SHA256()
            {
                using org_ptr = void (WINAPIV*)(struct SHA256*);
                (org_ptr(0x14044e070L))(this);
            };
            void dtor_SHA256()
            {
                using org_ptr = void (WINAPIV*)(struct SHA256*);
                (org_ptr(0x14044e070L))(this);
            };
        };
        struct  Exception : std::exception
        {
                enum ErrorType
                {
                    NOT_IMPLEMENTED = 0x0,
                    INVALID_ARGUMENT = 0x1,
                    CANNOT_FLUSH = 0x2,
                    DATA_INTEGRITY_CHECK_FAILED = 0x3,
                    INVALID_DATA_FORMAT = 0x4,
                    IO_ERROR = 0x5,
                    OTHER_ERROR = 0x6,
                };
            ErrorType m_errorType;
            std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_what;
        public:
            Exception(struct Exception* __that)
            {
                using org_ptr = void (WINAPIV*)(struct Exception*, struct Exception*);
                (org_ptr(0x14044a870L))(this, __that);
            };
            void ctor_Exception(struct Exception* __that)
            {
                using org_ptr = void (WINAPIV*)(struct Exception*, struct Exception*);
                (org_ptr(0x14044a870L))(this, __that);
            };
            Exception(struct ErrorType errorType, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* s)
            {
                using org_ptr = void (WINAPIV*)(struct Exception*, struct ErrorType, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*);
                (org_ptr(0x14044ab70L))(this, errorType, s);
            };
            void ctor_Exception(struct ErrorType errorType, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* s)
            {
                using org_ptr = void (WINAPIV*)(struct Exception*, struct ErrorType, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*);
                (org_ptr(0x14044ab70L))(this, errorType, s);
            };
            char* what()
            {
                using org_ptr = char* (WINAPIV*)(struct Exception*);
                return (org_ptr(0x14044a960L))(this);
            };
            ~Exception()
            {
                using org_ptr = void (WINAPIV*)(struct Exception*);
                (org_ptr(0x14044aa20L))(this);
            };
            void dtor_Exception()
            {
                using org_ptr = void (WINAPIV*)(struct Exception*);
                (org_ptr(0x14044aa20L))(this);
            };
        };
        struct PolynomialMod2
        {
                struct  DivideByZero : Exception
                {
                public:
                    DivideByZero(struct DivideByZero* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct DivideByZero*, struct DivideByZero*);
                        (org_ptr(0x14062c320L))(this, arg_0);
                    };
                    int64_t ctor_DivideByZero(struct DivideByZero* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct DivideByZero*, struct DivideByZero*);
                        return (org_ptr(0x14062c320L))(this, arg_0);
                    };
                    DivideByZero()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct DivideByZero*);
                        (org_ptr(0x14062c200L))(this);
                    };
                    int64_t ctor_DivideByZero()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct DivideByZero*);
                        return (org_ptr(0x14062c200L))(this);
                    };
                    ~DivideByZero()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct DivideByZero*);
                        (org_ptr(0x14062c300L))(this);
                    };
                    int64_t dtor_DivideByZero()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct DivideByZero*);
                        return (org_ptr(0x14062c300L))(this);
                    };
                };
            SecBlock<unsigned __int64,AllocatorWithCleanup<unsigned __int64,0> > reg;
        public:
            static struct PolynomialMod2* AllOnes(short retstr, struct PolynomialMod2* arg_0)
            {
                using org_ptr = struct PolynomialMod2* (WINAPIV*)(short, struct PolynomialMod2*);
                return (org_ptr(0x140626580L))(retstr, arg_0);
            };
            struct PolynomialMod2* And(short retstr, struct PolynomialMod2* arg_0)
            {
                using org_ptr = struct PolynomialMod2* (WINAPIV*)(struct PolynomialMod2*, short, struct PolynomialMod2*);
                return (org_ptr(0x1406277f0L))(this, retstr, arg_0);
            };
            void BERDecodeAsOctetString(struct BufferedTransformation* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct PolynomialMod2*, struct BufferedTransformation*, uint64_t);
                (org_ptr(0x140627110L))(this, arg_0, arg_1);
            };
            unsigned int BitCount()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct PolynomialMod2*);
                return (org_ptr(0x140627290L))(this);
            };
            unsigned int ByteCount()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct PolynomialMod2*);
                return (org_ptr(0x140627230L))(this);
            };
            unsigned int CoefficientCount()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct PolynomialMod2*);
                return (org_ptr(0x14062f650L))(this);
            };
            void DEREncodeAsOctetString(struct BufferedTransformation* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct PolynomialMod2*, struct BufferedTransformation*, uint64_t);
                (org_ptr(0x140627050L))(this, arg_0, arg_1);
            };
            void Decode(struct BufferedTransformation* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct PolynomialMod2*, struct BufferedTransformation*, uint64_t);
                (org_ptr(0x140626ee0L))(this, arg_0, arg_1);
            };
            void Decode(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct PolynomialMod2*, uint8_t*, uint64_t);
                (org_ptr(0x140626d90L))(this, arg_0, arg_1);
            };
            int64_t Degree()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PolynomialMod2*);
                return (org_ptr(0x140581880L))(this);
            };
            static void Divide(struct PolynomialMod2* arg_0, struct PolynomialMod2* arg_1, struct PolynomialMod2* arg_2, struct PolynomialMod2* arg_3)
            {
                using org_ptr = void (WINAPIV*)(struct PolynomialMod2*, struct PolynomialMod2*, struct PolynomialMod2*, struct PolynomialMod2*);
                (org_ptr(0x140627d60L))(arg_0, arg_1, arg_2, arg_3);
            };
            struct PolynomialMod2* DividedBy(short retstr, struct PolynomialMod2* arg_0)
            {
                using org_ptr = struct PolynomialMod2* (WINAPIV*)(struct PolynomialMod2*, short, struct PolynomialMod2*);
                return (org_ptr(0x140627f30L))(this, retstr, arg_0);
            };
            struct PolynomialMod2* Doubled(short retstr)
            {
                using org_ptr = struct PolynomialMod2* (WINAPIV*)(struct PolynomialMod2*, short);
                return (org_ptr(0x140555610L))(this, retstr);
            };
            void Encode(struct BufferedTransformation* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct PolynomialMod2*, struct BufferedTransformation*, uint64_t);
                (org_ptr(0x140626fe0L))(this, arg_0, arg_1);
            };
            void Encode(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct PolynomialMod2*, uint8_t*, uint64_t);
                (org_ptr(0x140626e40L))(this, arg_0, arg_1);
            };
            bool Equals(struct PolynomialMod2* arg_0)
            {
                using org_ptr = bool (WINAPIV*)(struct PolynomialMod2*, struct PolynomialMod2*);
                return (org_ptr(0x140628830L))(this, arg_0);
            };
            static struct PolynomialMod2* Gcd(short retstr, struct PolynomialMod2* arg_0, struct PolynomialMod2* arg_1)
            {
                using org_ptr = struct PolynomialMod2* (WINAPIV*)(short, struct PolynomialMod2*, struct PolynomialMod2*);
                return (org_ptr(0x140628c30L))(retstr, arg_0, arg_1);
            };
            bool GetBit(uint64_t arg_0)
            {
                using org_ptr = bool (WINAPIV*)(struct PolynomialMod2*, uint64_t);
                return (org_ptr(0x14062f610L))(this, arg_0);
            };
            uint8_t GetByte(uint64_t arg_0)
            {
                using org_ptr = uint8_t (WINAPIV*)(struct PolynomialMod2*, uint64_t);
                return (org_ptr(0x140626850L))(this, arg_0);
            };
            int64_t GetCoefficient(uint64_t arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct PolynomialMod2*, uint64_t);
                return (org_ptr(0x14062c160L))(this, arg_0);
            };
            struct PolynomialMod2* InverseMod(short retstr, struct PolynomialMod2* arg_0)
            {
                using org_ptr = struct PolynomialMod2* (WINAPIV*)(struct PolynomialMod2*, short, struct PolynomialMod2*);
                return (org_ptr(0x140628d40L))(this, retstr, arg_0);
            };
            bool IsIrreducible()
            {
                using org_ptr = bool (WINAPIV*)(struct PolynomialMod2*);
                return (org_ptr(0x140628ec0L))(this);
            };
            bool IsUnit()
            {
                using org_ptr = bool (WINAPIV*)(struct PolynomialMod2*);
                return (org_ptr(0x140555810L))(this);
            };
            bool IsZero()
            {
                using org_ptr = bool (WINAPIV*)(struct PolynomialMod2*);
                return (org_ptr(0x14062c3d0L))(this);
            };
            struct PolynomialMod2* Minus(short retstr, struct PolynomialMod2* arg_0)
            {
                using org_ptr = struct PolynomialMod2* (WINAPIV*)(struct PolynomialMod2*, short, struct PolynomialMod2*);
                return (org_ptr(0x1405554d0L))(this, retstr, arg_0);
            };
            struct PolynomialMod2* Modulo(short retstr, struct PolynomialMod2* arg_0)
            {
                using org_ptr = struct PolynomialMod2* (WINAPIV*)(struct PolynomialMod2*, short, struct PolynomialMod2*);
                return (org_ptr(0x140628030L))(this, retstr, arg_0);
            };
            static struct PolynomialMod2* Monomial(short retstr, struct PolynomialMod2* arg_0)
            {
                using org_ptr = struct PolynomialMod2* (WINAPIV*)(short, struct PolynomialMod2*);
                return (org_ptr(0x140626a10L))(retstr, arg_0);
            };
            struct PolynomialMod2* MultiplicativeInverse(short retstr)
            {
                using org_ptr = struct PolynomialMod2* (WINAPIV*)(struct PolynomialMod2*, short);
                return (org_ptr(0x1405558c0L))(this, retstr);
            };
            static struct PolynomialMod2* One()
            {
                using org_ptr = struct PolynomialMod2* (WINAPIV*)();
                return (org_ptr(0x140626d50L))();
            };
            unsigned int Parity()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct PolynomialMod2*);
                return (org_ptr(0x140627300L))(this);
            };
            static struct PolynomialMod2* Pentanomial(struct PolynomialMod2* retstr, uint64_t arg_0, uint64_t arg_1, uint64_t arg_2, uint64_t arg_3, uint64_t arg_4)
            {
                using org_ptr = struct PolynomialMod2* (WINAPIV*)(struct PolynomialMod2*, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
                return (org_ptr(0x140626be0L))(retstr, arg_0, arg_1, arg_2, arg_3, arg_4);
            };
            struct PolynomialMod2* Plus(short retstr, struct PolynomialMod2* arg_0)
            {
                using org_ptr = struct PolynomialMod2* (WINAPIV*)(struct PolynomialMod2*, short, struct PolynomialMod2*);
                return (org_ptr(0x140555260L))(this, retstr, arg_0);
            };
            PolynomialMod2(struct BufferedTransformation* arg_0, uint64_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct PolynomialMod2*, struct BufferedTransformation*, uint64_t);
                (org_ptr(0x1405815b0L))(this, arg_0, arg_1);
            };
            int64_t ctor_PolynomialMod2(struct BufferedTransformation* arg_0, uint64_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct PolynomialMod2*, struct BufferedTransformation*, uint64_t);
                return (org_ptr(0x1405815b0L))(this, arg_0, arg_1);
            };
            PolynomialMod2(struct PolynomialMod2* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct PolynomialMod2*, struct PolynomialMod2*);
                (org_ptr(0x1406263d0L))(this, arg_0);
            };
            int64_t ctor_PolynomialMod2(struct PolynomialMod2* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct PolynomialMod2*, struct PolynomialMod2*);
                return (org_ptr(0x1406263d0L))(this, arg_0);
            };
            PolynomialMod2(struct RandomNumberGenerator* arg_0, uint64_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct PolynomialMod2*, struct RandomNumberGenerator*, uint64_t);
                (org_ptr(0x14062c360L))(this, arg_0, arg_1);
            };
            int64_t ctor_PolynomialMod2(struct RandomNumberGenerator* arg_0, uint64_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct PolynomialMod2*, struct RandomNumberGenerator*, uint64_t);
                return (org_ptr(0x14062c360L))(this, arg_0, arg_1);
            };
            PolynomialMod2(uint64_t arg_0, uint64_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct PolynomialMod2*, uint64_t, uint64_t);
                (org_ptr(0x1406262e0L))(this, arg_0, arg_1);
            };
            int64_t ctor_PolynomialMod2(uint64_t arg_0, uint64_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct PolynomialMod2*, uint64_t, uint64_t);
                return (org_ptr(0x1406262e0L))(this, arg_0, arg_1);
            };
            PolynomialMod2()
            {
                using org_ptr = void (WINAPIV*)(void*);
                (org_ptr(0x1406262b0L))(arg_0);
            };
            void ctor_PolynomialMod2()
            {
                using org_ptr = void (WINAPIV*)(void*);
                (org_ptr(0x1406262b0L))(arg_0);
            };
            void Randomize(struct RandomNumberGenerator* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct PolynomialMod2*, struct RandomNumberGenerator*, uint64_t);
                (org_ptr(0x140626470L))(this, arg_0, arg_1);
            };
            void SetBit(uint64_t arg_0, int arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct PolynomialMod2*, uint64_t, int);
                (org_ptr(0x140626700L))(this, arg_0, arg_1);
            };
            void SetByte(uint64_t arg_0, uint8_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct PolynomialMod2*, uint64_t, uint8_t);
                (org_ptr(0x1406268f0L))(this, arg_0, arg_1);
            };
            void SetCoefficient(uint64_t arg_0, int arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct PolynomialMod2*, uint64_t, int);
                (org_ptr(0x14062f5e0L))(this, arg_0, arg_1);
            };
            struct PolynomialMod2* Squared(short retstr)
            {
                using org_ptr = struct PolynomialMod2* (WINAPIV*)(struct PolynomialMod2*, short);
                return (org_ptr(0x140627ab0L))(this, retstr);
            };
            struct PolynomialMod2* Times(short retstr, struct PolynomialMod2* arg_0)
            {
                using org_ptr = struct PolynomialMod2* (WINAPIV*)(struct PolynomialMod2*, short, struct PolynomialMod2*);
                return (org_ptr(0x140627940L))(this, retstr, arg_0);
            };
            static struct PolynomialMod2* Trinomial(short retstr, struct PolynomialMod2* arg_0, uint64_t arg_1, uint64_t arg_2)
            {
                using org_ptr = struct PolynomialMod2* (WINAPIV*)(short, struct PolynomialMod2*, uint64_t, uint64_t);
                return (org_ptr(0x140626ae0L))(retstr, arg_0, arg_1, arg_2);
            };
            unsigned int WordCount()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct PolynomialMod2*);
                return (org_ptr(0x1406271f0L))(this);
            };
            struct PolynomialMod2* Xor(short retstr, struct PolynomialMod2* arg_0)
            {
                using org_ptr = struct PolynomialMod2* (WINAPIV*)(struct PolynomialMod2*, short, struct PolynomialMod2*);
                return (org_ptr(0x140627430L))(this, retstr, arg_0);
            };
            static struct PolynomialMod2* Zero()
            {
                using org_ptr = struct PolynomialMod2* (WINAPIV*)();
                return (org_ptr(0x140626d10L))();
            };
            void swap(struct PolynomialMod2* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct PolynomialMod2*, struct PolynomialMod2*);
                (org_ptr(0x14062f670L))(this, arg_0);
            };
            ~PolynomialMod2()
            {
                using org_ptr = void (WINAPIV*)(void*);
                (org_ptr(0x140550d30L))(arg_0);
            };
            void dtor_PolynomialMod2()
            {
                using org_ptr = void (WINAPIV*)(void*);
                (org_ptr(0x140550d30L))(arg_0);
            };
        };
        struct EC2NPoint
        {
            bool identity;
            PolynomialMod2 x;
            PolynomialMod2 y;
        public:
            EC2NPoint(struct EC2NPoint* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct EC2NPoint*, struct EC2NPoint*);
                (org_ptr(0x14055cb20L))(this, arg_0);
            };
            int64_t ctor_EC2NPoint(struct EC2NPoint* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct EC2NPoint*, struct EC2NPoint*);
                return (org_ptr(0x14055cb20L))(this, arg_0);
            };
            EC2NPoint()
            {
                using org_ptr = int64_t (WINAPIV*)(struct EC2NPoint*);
                (org_ptr(0x140557ae0L))(this);
            };
            int64_t ctor_EC2NPoint()
            {
                using org_ptr = int64_t (WINAPIV*)(struct EC2NPoint*);
                return (org_ptr(0x140557ae0L))(this);
            };
            ~EC2NPoint()
            {
                using org_ptr = int64_t (WINAPIV*)(struct EC2NPoint*);
                (org_ptr(0x140557b50L))(this);
            };
            int64_t dtor_EC2NPoint()
            {
                using org_ptr = int64_t (WINAPIV*)(struct EC2NPoint*);
                return (org_ptr(0x140557b50L))(this);
            };
        };
        struct  PK_MessageAccumulator : HashTransformation
        {
        public:
            unsigned int DigestSize()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct PK_MessageAccumulator*);
                return (org_ptr(0x140562e10L))(this);
            };
            PK_MessageAccumulator()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_MessageAccumulator*);
                (org_ptr(0x140563160L))(this);
            };
            int64_t ctor_PK_MessageAccumulator()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_MessageAccumulator*);
                return (org_ptr(0x140563160L))(this);
            };
            void TruncatedFinal(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct PK_MessageAccumulator*, uint8_t*, uint64_t);
                (org_ptr(0x140562eb0L))(this, arg_0, arg_1);
            };
            ~PK_MessageAccumulator()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_MessageAccumulator*);
                (org_ptr(0x140563180L))(this);
            };
            int64_t dtor_PK_MessageAccumulator()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_MessageAccumulator*);
                return (org_ptr(0x140563180L))(this);
            };
        };
        struct  PK_MessageAccumulatorBase : PK_MessageAccumulator
        {
            SecBlock<unsigned char,AllocatorWithCleanup<unsigned char,0> > m_recoverableMessage;
            SecBlock<unsigned char,AllocatorWithCleanup<unsigned char,0> > m_representative;
            SecBlock<unsigned char,AllocatorWithCleanup<unsigned char,0> > m_presignature;
            SecBlock<unsigned char,AllocatorWithCleanup<unsigned char,0> > m_semisignature;
            Integer m_k;
            Integer m_s;
            bool m_empty;
        public:
            PK_MessageAccumulatorBase()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_MessageAccumulatorBase*);
                (org_ptr(0x140562f60L))(this);
            };
            int64_t ctor_PK_MessageAccumulatorBase()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_MessageAccumulatorBase*);
                return (org_ptr(0x140562f60L))(this);
            };
            void Update(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct PK_MessageAccumulatorBase*, uint8_t*, uint64_t);
                (org_ptr(0x1405630d0L))(this, arg_0, arg_1);
            };
            ~PK_MessageAccumulatorBase()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_MessageAccumulatorBase*);
                (org_ptr(0x1405631a0L))(this);
            };
            int64_t dtor_PK_MessageAccumulatorBase()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_MessageAccumulatorBase*);
                return (org_ptr(0x1405631a0L))(this);
            };
        };
        template<>
        struct  ClonableImpl<BlockCipherFinal<0,Rijndael::Enc>,Rijndael::Enc> : Rijndael::Enc
        {
        public:
            ClonableImpl(struct ClonableImpl<BlockCipherFinal<0,Rijndael::Enc>,Rijndael::Enc>* __that)
            {
                using org_ptr = void (WINAPIV*)(struct ClonableImpl<BlockCipherFinal<0,Rijndael::Enc>,Rijndael::Enc>*, struct ClonableImpl<BlockCipherFinal<0,Rijndael::Enc>,Rijndael::Enc>*);
                (org_ptr(0x14045a8b0L))(this, __that);
            };
            void ctor_ClonableImpl(struct ClonableImpl<BlockCipherFinal<0,Rijndael::Enc>,Rijndael::Enc>* __that)
            {
                using org_ptr = void (WINAPIV*)(struct ClonableImpl<BlockCipherFinal<0,Rijndael::Enc>,Rijndael::Enc>*, struct ClonableImpl<BlockCipherFinal<0,Rijndael::Enc>,Rijndael::Enc>*);
                (org_ptr(0x14045a8b0L))(this, __that);
            };
            ClonableImpl()
            {
                using org_ptr = void (WINAPIV*)(struct ClonableImpl<BlockCipherFinal<0,Rijndael::Enc>,Rijndael::Enc>*);
                (org_ptr(0x14045b930L))(this);
            };
            void ctor_ClonableImpl()
            {
                using org_ptr = void (WINAPIV*)(struct ClonableImpl<BlockCipherFinal<0,Rijndael::Enc>,Rijndael::Enc>*);
                (org_ptr(0x14045b930L))(this);
            };
            struct Clonable* Clone()
            {
                using org_ptr = struct Clonable* (WINAPIV*)(struct ClonableImpl<BlockCipherFinal<0,Rijndael::Enc>,Rijndael::Enc>*);
                return (org_ptr(0x14045a6f0L))(this);
            };
            ~ClonableImpl()
            {
                using org_ptr = void (WINAPIV*)(struct ClonableImpl<BlockCipherFinal<0,Rijndael::Enc>,Rijndael::Enc>*);
                (org_ptr(0x14044e6e0L))(this);
            };
            void dtor_ClonableImpl()
            {
                using org_ptr = void (WINAPIV*)(struct ClonableImpl<BlockCipherFinal<0,Rijndael::Enc>,Rijndael::Enc>*);
                (org_ptr(0x14044e6e0L))(this);
            };
        };
        template<>
        struct  BlockCipherFinal<0,Rijndael::Enc> : ClonableImpl<BlockCipherFinal<0,Rijndael::Enc>,Rijndael::Enc>
        {
        public:
            BlockCipherFinal(struct BlockCipherFinal<0,Rijndael::Enc>* __that)
            {
                using org_ptr = void (WINAPIV*)(struct BlockCipherFinal<0,Rijndael::Enc>*, struct BlockCipherFinal<0,Rijndael::Enc>*);
                (org_ptr(0x14045a7c0L))(this, __that);
            };
            void ctor_BlockCipherFinal(struct BlockCipherFinal<0,Rijndael::Enc>* __that)
            {
                using org_ptr = void (WINAPIV*)(struct BlockCipherFinal<0,Rijndael::Enc>*, struct BlockCipherFinal<0,Rijndael::Enc>*);
                (org_ptr(0x14045a7c0L))(this, __that);
            };
            BlockCipherFinal()
            {
                using org_ptr = void (WINAPIV*)(struct BlockCipherFinal<0,Rijndael::Enc>*);
                (org_ptr(0x14045a670L))(this);
            };
            void ctor_BlockCipherFinal()
            {
                using org_ptr = void (WINAPIV*)(struct BlockCipherFinal<0,Rijndael::Enc>*);
                (org_ptr(0x14045a670L))(this);
            };
            bool IsForwardTransformation()
            {
                using org_ptr = bool (WINAPIV*)(struct BlockCipherFinal<0,Rijndael::Enc>*);
                return (org_ptr(0x14045a6e0L))(this);
            };
            ~BlockCipherFinal()
            {
                using org_ptr = void (WINAPIV*)(struct BlockCipherFinal<0,Rijndael::Enc>*);
                (org_ptr(0x14044e660L))(this);
            };
            void dtor_BlockCipherFinal()
            {
                using org_ptr = void (WINAPIV*)(struct BlockCipherFinal<0,Rijndael::Enc>*);
                (org_ptr(0x14044e660L))(this);
            };
        };
        template<>
        struct ObjectHolder<BlockCipherFinal<0,Rijndael::Enc> >
        {
            BlockCipherFinal<0,Rijndael::Enc> m_object;
        };
        struct  CBC_Encryption : CBC_ModeBase
        {
        public:
            CBC_Encryption()
            {
                using org_ptr = void (WINAPIV*)(struct CBC_Encryption*);
                (org_ptr(0x1404578e0L))(this);
            };
            void ctor_CBC_Encryption()
            {
                using org_ptr = void (WINAPIV*)(struct CBC_Encryption*);
                (org_ptr(0x1404578e0L))(this);
            };
            void ProcessBlocks(uint8_t* arg_0, uint8_t* arg_1, uint64_t arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct CBC_Encryption*, uint8_t*, uint8_t*, uint64_t);
                (org_ptr(0x140619140L))(this, arg_0, arg_1, arg_2);
            };
            ~CBC_Encryption()
            {
                using org_ptr = void (WINAPIV*)(struct CBC_Encryption*);
                (org_ptr(0x14044e6a0L))(this);
            };
            void dtor_CBC_Encryption()
            {
                using org_ptr = void (WINAPIV*)(struct CBC_Encryption*);
                (org_ptr(0x14044e6a0L))(this);
            };
        };
        template<>
        struct  AlgorithmImpl<CBC_Encryption,CipherModeFinalTemplate_CipherHolder<BlockCipherFinal<0,Rijndael::Enc>,CBC_Encryption> > : CBC_Encryption
        {
        };
        template<>
        struct  CipherModeFinalTemplate_CipherHolder<BlockCipherFinal<0,Rijndael::Enc>,CBC_Encryption> : AlgorithmImpl<CBC_Encryption,CipherModeFinalTemplate_CipherHolder<BlockCipherFinal<0,Rijndael::Enc>,CBC_Encryption> >, ObjectHolder<BlockCipherFinal<0,Rijndael::Enc> >
        {
        public:
            CipherModeFinalTemplate_CipherHolder()
            {
                using org_ptr = void (WINAPIV*)(struct CipherModeFinalTemplate_CipherHolder<BlockCipherFinal<0,Rijndael::Enc>,CBC_Encryption>*);
                (org_ptr(0x140453380L))(this);
            };
            void ctor_CipherModeFinalTemplate_CipherHolder()
            {
                using org_ptr = void (WINAPIV*)(struct CipherModeFinalTemplate_CipherHolder<BlockCipherFinal<0,Rijndael::Enc>,CBC_Encryption>*);
                (org_ptr(0x140453380L))(this);
            };
            static struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* StaticAlgorithmName(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* result)
            {
                using org_ptr = struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (WINAPIV*)(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*);
                return (org_ptr(0x14045a460L))(result);
            };
            ~CipherModeFinalTemplate_CipherHolder()
            {
                using org_ptr = void (WINAPIV*)(struct CipherModeFinalTemplate_CipherHolder<BlockCipherFinal<0,Rijndael::Enc>,CBC_Encryption>*);
                (org_ptr(0x14044e500L))(this);
            };
            void dtor_CipherModeFinalTemplate_CipherHolder()
            {
                using org_ptr = void (WINAPIV*)(struct CipherModeFinalTemplate_CipherHolder<BlockCipherFinal<0,Rijndael::Enc>,CBC_Encryption>*);
                (org_ptr(0x14044e500L))(this);
            };
        };
        template<>
        struct  DL_Keys_EC<ECP>
        {
        };
        template<>
        struct  DL_ES<DL_Keys_EC<ECP>,DL_KeyAgreementAlgorithm_DH<ECPPoint,EnumToType<enum CofactorMultiplicationOption,0> >,DL_KeyDerivationAlgorithm_P1363<ECPPoint,0,P1363_KDF2<SHA1> >,DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0>,ECIES<ECP,EnumToType<enum CofactorMultiplicationOption,0>,0> > : DL_Keys_EC<ECP>
        {
        };
        template<>
        struct  ECIES<ECP,EnumToType<enum CofactorMultiplicationOption,0>,0> : DL_ES<DL_Keys_EC<ECP>,DL_KeyAgreementAlgorithm_DH<ECPPoint,EnumToType<enum CofactorMultiplicationOption,0> >,DL_KeyDerivationAlgorithm_P1363<ECPPoint,0,P1363_KDF2<SHA1> >,DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0>,ECIES<ECP,EnumToType<enum CofactorMultiplicationOption,0>,0> >
        {
        };
        template<>
        struct  DL_SchemeOptionsBase<ECIES<ECP,EnumToType<enum CofactorMultiplicationOption,0>,0>,DL_GroupParameters_EC<ECP> >
        {
        };
        struct  DL_Keys_DSA
        {
        };
        template<>
        struct  DL_SS<DL_Keys_DSA,DL_Algorithm_GDSA<Integer>,DL_SignatureMessageEncodingMethod_DSA,SHA1,DSA> : DL_Keys_DSA
        {
        };
        template<>
        struct  DSA : DL_SS<DL_Keys_DSA,DL_Algorithm_GDSA<Integer>,DL_SignatureMessageEncodingMethod_DSA,SHA1,DSA>
        {
        public:
            static bool GeneratePrimes(uint8_t* b, unsigned int arg_0, struct Integer* arg_1, struct Integer* arg_2, unsigned int arg_3, struct Integer* arg_4, bool arg_5)
            {
                using org_ptr = bool (WINAPIV*)(uint8_t*, unsigned int, struct Integer*, struct Integer*, unsigned int, struct Integer*, bool);
                return (org_ptr(0x1406612c0L))(b, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5);
            };
            static bool IsValidPrimeLength(unsigned int arg_0)
            {
                using org_ptr = bool (WINAPIV*)(unsigned int);
                return (org_ptr(0x140633bf0L))(arg_0);
            };
            static char* StaticAlgorithmName()
            {
                using org_ptr = char* (WINAPIV*)();
                return (org_ptr(0x1405621d0L))();
            };
        };
        template<>
        struct  DL_GroupParameters<Integer> : CryptoParameters
        {
            BYTE gap18[16];
        };
        template<>
        struct  ASN1CryptoMaterial<DL_GroupParameters<Integer> > : ASN1Object, DL_GroupParameters<Integer>
        {
        };
        template<>
        struct  DL_GroupParameters_IntegerBased : ASN1CryptoMaterial<DL_GroupParameters<Integer> >
        {
            BYTE m_q[24];
            BYTE gap48[16];
        public:
            void AssignFrom(struct NameValuePairs* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct DL_GroupParameters_IntegerBased*, struct NameValuePairs*);
                (org_ptr(0x140631e10L))(this, arg_0);
            };
            void BERDecode(struct BufferedTransformation* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct DL_GroupParameters_IntegerBased*, struct BufferedTransformation*);
                (org_ptr(0x140631930L))(this, arg_0);
            };
            struct Integer* ComputeGroupOrder(short retstr, struct Integer* arg_0)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct DL_GroupParameters_IntegerBased*, short, struct Integer*);
                return (org_ptr(0x140553360L))(this, retstr, arg_0);
            };
            struct Integer* ConvertElementToInteger(short retstr, struct Integer* arg_0)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct DL_GroupParameters_IntegerBased*, short, struct Integer*);
                return (org_ptr(0x14055c7a0L))(this, retstr, arg_0);
            };
            void DEREncode(struct BufferedTransformation* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct DL_GroupParameters_IntegerBased*, struct BufferedTransformation*);
                (org_ptr(0x140631be0L))(this, arg_0);
            };
            DL_GroupParameters_IntegerBased(struct DL_GroupParameters_IntegerBased* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_GroupParameters_IntegerBased*, struct DL_GroupParameters_IntegerBased*);
                (org_ptr(0x14055f3e0L))(this, arg_0);
            };
            int64_t ctor_DL_GroupParameters_IntegerBased(struct DL_GroupParameters_IntegerBased* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_GroupParameters_IntegerBased*, struct DL_GroupParameters_IntegerBased*);
                return (org_ptr(0x14055f3e0L))(this, arg_0);
            };
            DL_GroupParameters_IntegerBased()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_GroupParameters_IntegerBased*);
                (org_ptr(0x14055ef70L))(this);
            };
            int64_t ctor_DL_GroupParameters_IntegerBased()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_GroupParameters_IntegerBased*);
                return (org_ptr(0x14055ef70L))(this);
            };
            struct Integer* DecodeElement(short retstr, struct Integer* arg_0, uint8_t* arg_1)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct DL_GroupParameters_IntegerBased*, short, struct Integer*, uint8_t*);
                return (org_ptr(0x1406317b0L))(this, retstr, arg_0, arg_1);
            };
            void EncodeElement(bool arg_0, struct Integer* arg_1, uint8_t* arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct DL_GroupParameters_IntegerBased*, bool, struct Integer*, uint8_t*);
                (org_ptr(0x14055c700L))(this, arg_0, arg_1, arg_2);
            };
            bool FastSubgroupCheckAvailable()
            {
                using org_ptr = bool (WINAPIV*)(struct DL_GroupParameters_IntegerBased*);
                return (org_ptr(0x14055c610L))(this);
            };
            void GenerateRandom(struct RandomNumberGenerator* arg_0, struct NameValuePairs* arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct DL_GroupParameters_IntegerBased*, struct RandomNumberGenerator*, struct NameValuePairs*);
                (org_ptr(0x140631390L))(this, arg_0, arg_1);
            };
            struct OID* GetAlgorithmID(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct DL_GroupParameters_IntegerBased*, short);
                return (org_ptr(0x140631f20L))(this, retstr);
            };
            unsigned int GetDefaultSubgroupOrderSize(unsigned int arg_0)
            {
                using org_ptr = unsigned int (WINAPIV*)(struct DL_GroupParameters_IntegerBased*, unsigned int);
                return (org_ptr(0x1406323f0L))(this, arg_0);
            };
            unsigned int GetEncodedElementSize(bool arg_0)
            {
                using org_ptr = unsigned int (WINAPIV*)(struct DL_GroupParameters_IntegerBased*, bool);
                return (org_ptr(0x14055c760L))(this, arg_0);
            };
            struct Integer* GetGroupOrder(short retstr)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct DL_GroupParameters_IntegerBased*, short);
                return (org_ptr(0x14055c3d0L))(this, retstr);
            };
            struct Integer* GetMaxExponent(short retstr)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct DL_GroupParameters_IntegerBased*, short);
                return (org_ptr(0x1406321c0L))(this, retstr);
            };
            struct Integer* GetSubgroupOrder()
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct DL_GroupParameters_IntegerBased*);
                return (org_ptr(0x14055c3c0L))(this);
            };
            bool GetVoidValue(char* arg_0, struct type_info* arg_1, void* arg_2)
            {
                using org_ptr = bool (WINAPIV*)(struct DL_GroupParameters_IntegerBased*, char*, struct type_info*, void*);
                return (org_ptr(0x140631d30L))(this, arg_0, arg_1, arg_2);
            };
            void Initialize(struct DL_GroupParameters_IntegerBased* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct DL_GroupParameters_IntegerBased*, struct DL_GroupParameters_IntegerBased*);
                (org_ptr(0x140553070L))(this, arg_0);
            };
            void Initialize(struct Integer* arg_0, struct Integer* arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct DL_GroupParameters_IntegerBased*, struct Integer*, struct Integer*);
                (org_ptr(0x1405531f0L))(this, arg_0, arg_1);
            };
            void Initialize(struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct DL_GroupParameters_IntegerBased*, struct Integer*, struct Integer*, struct Integer*);
                (org_ptr(0x140553100L))(this, arg_0, arg_1, arg_2);
            };
            void SetSubgroupOrder(struct Integer* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct DL_GroupParameters_IntegerBased*, struct Integer*);
                (org_ptr(0x140553150L))(this, arg_0);
            };
            bool ValidateGroup(struct RandomNumberGenerator* arg_0, unsigned int arg_1)
            {
                using org_ptr = bool (WINAPIV*)(struct DL_GroupParameters_IntegerBased*, struct RandomNumberGenerator*, unsigned int);
                return (org_ptr(0x140630680L))(this, arg_0, arg_1);
            };
            ~DL_GroupParameters_IntegerBased()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_GroupParameters_IntegerBased*);
                (org_ptr(0x14055f040L))(this);
            };
            int64_t dtor_DL_GroupParameters_IntegerBased()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_GroupParameters_IntegerBased*);
                return (org_ptr(0x14055f040L))(this);
            };
        };
        template<>
        struct DL_GroupPrecomputation<Integer>
        {
            DL_GroupPrecomputation<Integer>Vtbl *vfptr;
        };
        template<>
        struct DL_GroupPrecomputation<Integer>Vtbl
        {
            bool (WINAPIV *NeedConversions)(DL_GroupPrecomputation<Integer> *_this);
            Integer *(WINAPIV *ConvertIn)(DL_GroupPrecomputation<Integer> *_this, Integer *result, Integer *);
            Integer *(WINAPIV *ConvertOut)(DL_GroupPrecomputation<Integer> *_this, Integer *result, Integer *);
            AbstractGroup<Integer> *(WINAPIV *GetGroup)(DL_GroupPrecomputation<Integer> *_this);
            Integer *(WINAPIV *BERDecodeElement)(DL_GroupPrecomputation<Integer> *_this, Integer *result, BufferedTransformation *);
            void (WINAPIV *DEREncodeElement)(DL_GroupPrecomputation<Integer> *_this, BufferedTransformation *, Integer *);
        };
        struct  MontgomeryRepresentation : ModularArithmetic
        {
            Integer m_u;
            SecBlock<unsigned __int64,AllocatorWithCleanup<unsigned __int64,0> > m_workspace;
        public:
            struct Integer* CascadeExponentiate(struct Integer* retstr, struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2, struct Integer* arg_3)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct MontgomeryRepresentation*, struct Integer*, struct Integer*, struct Integer*, struct Integer*, struct Integer*);
                return (org_ptr(0x140561080L))(this, retstr, arg_0, arg_1, arg_2, arg_3);
            };
            struct ModularArithmetic* Clone()
            {
                using org_ptr = struct ModularArithmetic* (WINAPIV*)(struct MontgomeryRepresentation*);
                return (org_ptr(0x140560cf0L))(this);
            };
            struct Integer* ConvertIn(short retstr, struct Integer* arg_0)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct MontgomeryRepresentation*, short, struct Integer*);
                return (org_ptr(0x140560d80L))(this, retstr, arg_0);
            };
            struct Integer* ConvertOut(short retstr, struct Integer* arg_0)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct MontgomeryRepresentation*, short, struct Integer*);
                return (org_ptr(0x1405edcd0L))(this, retstr, arg_0);
            };
            bool IsMontgomeryRepresentation()
            {
                using org_ptr = bool (WINAPIV*)(struct MontgomeryRepresentation*);
                return (org_ptr(0x140560d70L))(this);
            };
            MontgomeryRepresentation(struct Integer* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct MontgomeryRepresentation*, struct Integer*);
                (org_ptr(0x1405ed630L))(this, arg_0);
            };
            int64_t ctor_MontgomeryRepresentation(struct Integer* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct MontgomeryRepresentation*, struct Integer*);
                return (org_ptr(0x1405ed630L))(this, arg_0);
            };
            MontgomeryRepresentation(struct MontgomeryRepresentation* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct MontgomeryRepresentation*, struct MontgomeryRepresentation*);
                (org_ptr(0x140560c30L))(this, arg_0);
            };
            int64_t ctor_MontgomeryRepresentation(struct MontgomeryRepresentation* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct MontgomeryRepresentation*, struct MontgomeryRepresentation*);
                return (org_ptr(0x140560c30L))(this, arg_0);
            };
            struct Integer* MultiplicativeIdentity()
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct MontgomeryRepresentation*);
                return (org_ptr(0x140560f60L))(this);
            };
            struct Integer* MultiplicativeInverse(struct Integer* arg_0)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct MontgomeryRepresentation*, struct Integer*);
                return (org_ptr(0x1405edeb0L))(this, arg_0);
            };
            struct Integer* Multiply(struct Integer* arg_0, struct Integer* arg_1)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct MontgomeryRepresentation*, struct Integer*, struct Integer*);
                return (org_ptr(0x1405ed890L))(this, arg_0, arg_1);
            };
            void SimultaneousExponentiate(struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2, unsigned int arg_3)
            {
                using org_ptr = void (WINAPIV*)(struct MontgomeryRepresentation*, struct Integer*, struct Integer*, struct Integer*, unsigned int);
                (org_ptr(0x1405610f0L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            struct Integer* Square(struct Integer* arg_0)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct MontgomeryRepresentation*, struct Integer*);
                return (org_ptr(0x1405edb00L))(this, arg_0);
            };
            ~MontgomeryRepresentation()
            {
                using org_ptr = int64_t (WINAPIV*)(struct MontgomeryRepresentation*);
                (org_ptr(0x140561170L))(this);
            };
            int64_t dtor_MontgomeryRepresentation()
            {
                using org_ptr = int64_t (WINAPIV*)(struct MontgomeryRepresentation*);
                return (org_ptr(0x140561170L))(this);
            };
        };
        template<>
        struct member_ptr<MontgomeryRepresentation>
        {
            MontgomeryRepresentation *m_p;
        };
        template<>
        struct  value_ptr<MontgomeryRepresentation> : member_ptr<MontgomeryRepresentation>
        {
        };
        template<>
        struct  ModExpPrecomputation : DL_GroupPrecomputation<Integer>
        {
            value_ptr<MontgomeryRepresentation> m_mr;
        public:
            struct Integer* BERDecodeElement(short retstr, struct Integer* arg_0)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct ModExpPrecomputation*, short, struct Integer*);
                return (org_ptr(0x14055f210L))(this, retstr, arg_0);
            };
            struct Integer* ConvertIn(short retstr, struct Integer* arg_0)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct ModExpPrecomputation*, short, struct Integer*);
                return (org_ptr(0x14055f0f0L))(this, retstr, arg_0);
            };
            struct Integer* ConvertOut(short retstr, struct Integer* arg_0)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct ModExpPrecomputation*, short, struct Integer*);
                return (org_ptr(0x14055f160L))(this, retstr, arg_0);
            };
            void DEREncodeElement(struct BufferedTransformation* arg_0, struct Integer* arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct ModExpPrecomputation*, struct BufferedTransformation*, struct Integer*);
                (org_ptr(0x14055f250L))(this, arg_0, arg_1);
            };
            struct Integer* GetModulus()
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct ModExpPrecomputation*);
                return (org_ptr(0x140552480L))(this);
            };
            ModExpPrecomputation(struct ModExpPrecomputation* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ModExpPrecomputation*, struct ModExpPrecomputation*);
                (org_ptr(0x14055f500L))(this, arg_0);
            };
            int64_t ctor_ModExpPrecomputation(struct ModExpPrecomputation* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ModExpPrecomputation*, struct ModExpPrecomputation*);
                return (org_ptr(0x14055f500L))(this, arg_0);
            };
            ModExpPrecomputation()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ModExpPrecomputation*);
                (org_ptr(0x14055f0a0L))(this);
            };
            int64_t ctor_ModExpPrecomputation()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ModExpPrecomputation*);
                return (org_ptr(0x14055f0a0L))(this);
            };
            bool NeedConversions()
            {
                using org_ptr = bool (WINAPIV*)(struct ModExpPrecomputation*);
                return (org_ptr(0x14055f0e0L))(this);
            };
            void SetModulus(struct Integer* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct ModExpPrecomputation*, struct Integer*);
                (org_ptr(0x1405525c0L))(this, arg_0);
            };
            ~ModExpPrecomputation()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ModExpPrecomputation*);
                (org_ptr(0x14055f280L))(this);
            };
            int64_t dtor_ModExpPrecomputation()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ModExpPrecomputation*);
                return (org_ptr(0x14055f280L))(this);
            };
        };
        template<>
        struct DL_FixedBasePrecomputation<Integer>
        {
            DL_FixedBasePrecomputation<Integer>Vtbl *vfptr;
        };
        template<>
        struct DL_FixedBasePrecomputation<Integer>Vtbl
        {
            bool (WINAPIV *IsInitialized)(DL_FixedBasePrecomputation<Integer> *_this);
            void (WINAPIV *SetBase)(DL_FixedBasePrecomputation<Integer> *_this, DL_GroupPrecomputation<Integer> *, Integer *);
            Integer *(WINAPIV *GetBase)(DL_FixedBasePrecomputation<Integer> *_this, DL_GroupPrecomputation<Integer> *);
            void (WINAPIV *Precompute)(DL_FixedBasePrecomputation<Integer> *_this, DL_GroupPrecomputation<Integer> *, unsigned int, unsigned int);
            void (WINAPIV *Load)(DL_FixedBasePrecomputation<Integer> *_this, DL_GroupPrecomputation<Integer> *, BufferedTransformation *);
            void (WINAPIV *Save)(DL_FixedBasePrecomputation<Integer> *_this, DL_GroupPrecomputation<Integer> *, BufferedTransformation *);
            Integer *(WINAPIV *Exponentiate)(DL_FixedBasePrecomputation<Integer> *_this, Integer *result, DL_GroupPrecomputation<Integer> *, Integer *);
            Integer *(WINAPIV *CascadeExponentiate)(DL_FixedBasePrecomputation<Integer> *_this, Integer *result, DL_GroupPrecomputation<Integer> *, Integer *, DL_FixedBasePrecomputation<Integer> *, Integer *);
        };
        template<>
        struct  DL_FixedBasePrecomputationImpl<Integer> : DL_FixedBasePrecomputation<Integer>
        {
            Integer m_base;
            unsigned int m_windowSize;
            Integer m_exponentBase;
            std::vector<Integer,std::allocator<Integer> > m_bases;
        };
        template<>
        struct  DL_GroupParametersImpl<ModExpPrecomputation,DL_FixedBasePrecomputationImpl<Integer>,DL_GroupParameters_IntegerBased> : DL_GroupParameters_IntegerBased
        {
            DL_FixedBasePrecomputationImpl<Integer> m_gpc;
            BYTE gapE0[16];
        };
        template<>
        struct  DL_GroupParameters_IntegerBasedImpl<ModExpPrecomputation,DL_FixedBasePrecomputationImpl<Integer> > : DL_GroupParametersImpl<ModExpPrecomputation,DL_FixedBasePrecomputationImpl<Integer>,DL_GroupParameters_IntegerBased>
        {
        };
        template<>
        struct  DL_GroupParameters_GFP : DL_GroupParameters_IntegerBasedImpl<ModExpPrecomputation,DL_FixedBasePrecomputationImpl<Integer> >
        {
        public:
            struct Integer* CascadeExponentiate(struct Integer* retstr, struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2, struct Integer* arg_3)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct DL_GroupParameters_GFP*, struct Integer*, struct Integer*, struct Integer*, struct Integer*, struct Integer*);
                return (org_ptr(0x1406320a0L))(this, retstr, arg_0, arg_1, arg_2, arg_3);
            };
            DL_GroupParameters_GFP(struct DL_GroupParameters_GFP* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_GroupParameters_GFP*, struct DL_GroupParameters_GFP*);
                (org_ptr(0x14055d790L))(this, arg_0);
            };
            int64_t ctor_DL_GroupParameters_GFP(struct DL_GroupParameters_GFP* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_GroupParameters_GFP*, struct DL_GroupParameters_GFP*);
                return (org_ptr(0x14055d790L))(this, arg_0);
            };
            DL_GroupParameters_GFP()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_GroupParameters_GFP*);
                (org_ptr(0x14055d620L))(this);
            };
            int64_t ctor_DL_GroupParameters_GFP()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_GroupParameters_GFP*);
                return (org_ptr(0x14055d620L))(this);
            };
            int64_t GetFieldType()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_GroupParameters_GFP*);
                return (org_ptr(0x14055c810L))(this);
            };
            bool GetVoidValue(char* arg_0, struct type_info* arg_1, void* arg_2)
            {
                using org_ptr = bool (WINAPIV*)(struct DL_GroupParameters_GFP*, char*, struct type_info*, void*);
                return (org_ptr(0x1405ad530L))(this, arg_0, arg_1, arg_2);
            };
            bool IsIdentity(struct Integer* arg_0)
            {
                using org_ptr = bool (WINAPIV*)(struct DL_GroupParameters_GFP*, struct Integer*);
                return (org_ptr(0x14055c7e0L))(this, arg_0);
            };
            struct Integer* MultiplyElements(short retstr, struct Integer* arg_0, struct Integer* arg_1)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct DL_GroupParameters_GFP*, short, struct Integer*, struct Integer*);
                return (org_ptr(0x140632030L))(this, retstr, arg_0, arg_1);
            };
            void SimultaneousExponentiate(struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2, unsigned int arg_3)
            {
                using org_ptr = void (WINAPIV*)(struct DL_GroupParameters_GFP*, struct Integer*, struct Integer*, struct Integer*, unsigned int);
                (org_ptr(0x140631f60L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            ~DL_GroupParameters_GFP()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_GroupParameters_GFP*);
                (org_ptr(0x14055d740L))(this);
            };
            int64_t dtor_DL_GroupParameters_GFP()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_GroupParameters_GFP*);
                return (org_ptr(0x14055d740L))(this);
            };
        };
        struct  DL_GroupParameters_DSA : DL_GroupParameters_GFP
        {
        public:
            DL_GroupParameters_DSA(struct DL_GroupParameters_DSA* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_GroupParameters_DSA*, struct DL_GroupParameters_DSA*);
                (org_ptr(0x1406338d0L))(this, arg_0);
            };
            int64_t ctor_DL_GroupParameters_DSA(struct DL_GroupParameters_DSA* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_GroupParameters_DSA*, struct DL_GroupParameters_DSA*);
                return (org_ptr(0x1406338d0L))(this, arg_0);
            };
            DL_GroupParameters_DSA()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_GroupParameters_DSA*);
                (org_ptr(0x14056b140L))(this);
            };
            int64_t ctor_DL_GroupParameters_DSA()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_GroupParameters_DSA*);
                return (org_ptr(0x14056b140L))(this);
            };
            void GenerateRandom(struct RandomNumberGenerator* arg_0, struct NameValuePairs* arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct DL_GroupParameters_DSA*, struct RandomNumberGenerator*, struct NameValuePairs*);
                (org_ptr(0x14062fad0L))(this, arg_0, arg_1);
            };
            bool ValidateGroup(struct RandomNumberGenerator* arg_0, unsigned int arg_1)
            {
                using org_ptr = bool (WINAPIV*)(struct DL_GroupParameters_DSA*, struct RandomNumberGenerator*, unsigned int);
                return (org_ptr(0x140630230L))(this, arg_0, arg_1);
            };
            ~DL_GroupParameters_DSA()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_GroupParameters_DSA*);
                (org_ptr(0x140560500L))(this);
            };
            int64_t dtor_DL_GroupParameters_DSA()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_GroupParameters_DSA*);
                return (org_ptr(0x140560500L))(this);
            };
        };
        template<>
        struct  DL_SchemeOptionsBase<DSA,DL_GroupParameters_DSA>
        {
        };
        template<>
        struct  DL_Keys_ECDSA<ECP>
        {
        };
        template<>
        struct  DL_SS<DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int> : DL_Keys_ECDSA<ECP>
        {
        };
        template<>
        struct  DL_SchemeOptionsBase<DL_SS<DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_GroupParameters_EC<ECP> >
        {
        };
        template<>
        struct DL_Key<Integer>
        {
            DL_Key<Integer>Vtbl *vfptr;
        };
        template<>
        struct DL_Key<Integer>Vtbl
        {
            DL_GroupParameters<Integer> *(WINAPIV *GetAbstractGroupParameters)(DL_Key<Integer> *_this);
            DL_GroupParameters<Integer> *(WINAPIV *AccessAbstractGroupParameters)(DL_Key<Integer> *_this);
        };
        template<>
        struct  DL_PrivateKey<Integer> : DL_Key<Integer>
        {
        };
        template<>
        struct  DL_KeyImpl<PKCS8PrivateKey,DL_GroupParameters_DSA,OID> : PKCS8PrivateKey
        {
            BYTE m_groupParameters[232];
        };
        template<>
        struct  DL_PrivateKeyImpl<DL_GroupParameters_DSA> : DL_PrivateKey<Integer>, DL_KeyImpl<PKCS8PrivateKey,DL_GroupParameters_DSA,OID>
        {
            BYTE m_x[32];
        };
        template<>
        struct  DL_PrivateKey_GFP<DL_GroupParameters_DSA> : DL_PrivateKeyImpl<DL_GroupParameters_DSA>
        {
        };
        template<>
        struct  DL_PrivateKey_WithSignaturePairwiseConsistencyTest<DL_PrivateKey_GFP<DL_GroupParameters_DSA>,DSA> : DL_PrivateKey_GFP<DL_GroupParameters_DSA>
        {
        };
        template<>
        struct  DL_PublicKey<Integer> : DL_Key<Integer>
        {
        };
        template<>
        struct  DL_KeyImpl<X509PublicKey,DL_GroupParameters_DSA,OID> : X509PublicKey
        {
            BYTE m_groupParameters[232];
            BYTE gap100[8];
        };
        template<>
        struct  DL_PublicKeyImpl<DL_GroupParameters_DSA> : DL_PublicKey<Integer>, DL_KeyImpl<X509PublicKey,DL_GroupParameters_DSA,OID>
        {
            BYTE m_ypc[128];
            BYTE gap190[8];
        };
        template<>
        struct  DL_PublicKey_GFP<DL_GroupParameters_DSA> : DL_PublicKeyImpl<DL_GroupParameters_DSA>
        {
        };
        template<>
        struct  DL_KeyedSchemeOptions<DSA,DL_Keys_DSA> : DL_SchemeOptionsBase<DSA,DL_GroupParameters_DSA>
        {
        };
        template<>
        struct  DL_Keys_ECDSA<EC2N>
        {
        };
        template<>
        struct  DL_SS<DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int> : DL_Keys_ECDSA<EC2N>
        {
        };
        template<>
        struct  DL_GroupParameters<EC2NPoint> : CryptoParameters
        {
            BYTE gap18[16];
        };
        template<>
        struct DL_GroupPrecomputation<EC2NPoint>
        {
            DL_GroupPrecomputation<EC2NPoint>Vtbl *vfptr;
        };
        template<>
        const struct AbstractGroup<EC2NPoint>
        {
            AbstractGroup<EC2NPoint>Vtbl *vfptr;
        public:
            int64_t CascadeScalarMultiply(struct Integer* arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(int64_t, struct Integer*);
                return (org_ptr(0x1405746d0L))(arg_0, arg_1);
            };
        };
        template<>
        struct AbstractGroup<EC2NPoint>Vtbl
        {
            void *(WINAPIV *__vecDelDtor)(AbstractGroup<EC2NPoint> *_this, unsigned int);
            BYTE gap8[8];
            EC2NPoint *(WINAPIV *Identity)(AbstractGroup<EC2NPoint> *_this);
            EC2NPoint *(WINAPIV *Add)(AbstractGroup<EC2NPoint> *_this, EC2NPoint *, EC2NPoint *);
            EC2NPoint *(WINAPIV *Inverse)(AbstractGroup<EC2NPoint> *_this, EC2NPoint *);
            bool (WINAPIV *InversionIsFast)(AbstractGroup<EC2NPoint> *_this);
            EC2NPoint *(WINAPIV *Double)(AbstractGroup<EC2NPoint> *_this, EC2NPoint *);
            EC2NPoint *(WINAPIV *Subtract)(AbstractGroup<EC2NPoint> *_this, EC2NPoint *, EC2NPoint *);
            EC2NPoint *(WINAPIV *Accumulate)(AbstractGroup<EC2NPoint> *_this, EC2NPoint *, EC2NPoint *);
            EC2NPoint *(WINAPIV *Reduce)(AbstractGroup<EC2NPoint> *_this, EC2NPoint *, EC2NPoint *);
            EC2NPoint *(WINAPIV *ScalarMultiply)(AbstractGroup<EC2NPoint> *_this, EC2NPoint *result, EC2NPoint *, Integer *);
            EC2NPoint *(WINAPIV *CascadeScalarMultiply)(AbstractGroup<EC2NPoint> *_this, EC2NPoint *result, EC2NPoint *, Integer *, EC2NPoint *, Integer *);
            void (WINAPIV *SimultaneousMultiply)(AbstractGroup<EC2NPoint> *_this, EC2NPoint *, EC2NPoint *, Integer *, unsigned int);
        };
        template<>
        struct DL_GroupPrecomputation<EC2NPoint>Vtbl
        {
            bool (WINAPIV *NeedConversions)(DL_GroupPrecomputation<EC2NPoint> *_this);
            EC2NPoint *(WINAPIV *ConvertIn)(DL_GroupPrecomputation<EC2NPoint> *_this, EC2NPoint *result, EC2NPoint *);
            EC2NPoint *(WINAPIV *ConvertOut)(DL_GroupPrecomputation<EC2NPoint> *_this, EC2NPoint *result, EC2NPoint *);
            AbstractGroup<EC2NPoint> *(WINAPIV *GetGroup)(DL_GroupPrecomputation<EC2NPoint> *_this);
            EC2NPoint *(WINAPIV *BERDecodeElement)(DL_GroupPrecomputation<EC2NPoint> *_this, EC2NPoint *result, BufferedTransformation *);
            void (WINAPIV *DEREncodeElement)(DL_GroupPrecomputation<EC2NPoint> *_this, BufferedTransformation *, EC2NPoint *);
        };
        template<>
        struct AbstractGroup<PolynomialMod2>
        {
            AbstractGroup<PolynomialMod2>Vtbl *vfptr;
        public:
            int64_t CascadeScalarMultiply(struct Integer* arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(int64_t, struct Integer*);
                return (org_ptr(0x140572780L))(arg_0, arg_1);
            };
        };
        template<>
        struct AbstractGroup<PolynomialMod2>Vtbl
        {
            void *(WINAPIV *__vecDelDtor)(AbstractGroup<PolynomialMod2> *_this, unsigned int);
            BYTE gap8[8];
            PolynomialMod2 *(WINAPIV *Identity)(AbstractGroup<PolynomialMod2> *_this);
            PolynomialMod2 *(WINAPIV *Add)(AbstractGroup<PolynomialMod2> *_this, PolynomialMod2 *, PolynomialMod2 *);
            PolynomialMod2 *(WINAPIV *Inverse)(AbstractGroup<PolynomialMod2> *_this, PolynomialMod2 *);
            bool (WINAPIV *InversionIsFast)(AbstractGroup<PolynomialMod2> *_this);
            PolynomialMod2 *(WINAPIV *Double)(AbstractGroup<PolynomialMod2> *_this, PolynomialMod2 *);
            PolynomialMod2 *(WINAPIV *Subtract)(AbstractGroup<PolynomialMod2> *_this, PolynomialMod2 *, PolynomialMod2 *);
            PolynomialMod2 *(WINAPIV *Accumulate)(AbstractGroup<PolynomialMod2> *_this, PolynomialMod2 *, PolynomialMod2 *);
            PolynomialMod2 *(WINAPIV *Reduce)(AbstractGroup<PolynomialMod2> *_this, PolynomialMod2 *, PolynomialMod2 *);
            PolynomialMod2 *(WINAPIV *ScalarMultiply)(AbstractGroup<PolynomialMod2> *_this, PolynomialMod2 *result, PolynomialMod2 *, Integer *);
            PolynomialMod2 *(WINAPIV *CascadeScalarMultiply)(AbstractGroup<PolynomialMod2> *_this, PolynomialMod2 *result, PolynomialMod2 *, Integer *, PolynomialMod2 *, Integer *);
            void (WINAPIV *SimultaneousMultiply)(AbstractGroup<PolynomialMod2> *_this, PolynomialMod2 *, PolynomialMod2 *, Integer *, unsigned int);
        };
        template<>
        struct  AbstractRing<PolynomialMod2> : AbstractGroup<PolynomialMod2>
        {
                template<>
                struct  MultiplicativeGroupT : AbstractGroup<PolynomialMod2>
                {
                    AbstractRing<PolynomialMod2> *m_pRing;
                };
            MultiplicativeGroupT m_mg;
        };
        template<>
        struct  AbstractEuclideanDomain<PolynomialMod2> : AbstractRing<PolynomialMod2>
        {
            PolynomialMod2 result;
        };
        template<>
        struct  EuclideanDomainOf<PolynomialMod2> : AbstractEuclideanDomain<PolynomialMod2>
        {
            PolynomialMod2 result;
        public:
            int64_t DivisionAlgorithm()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PolynomialMod2*);
                return (org_ptr(0x140555b10L))(arg_0);
            };
        };
        template<>
        struct  QuotientRing<EuclideanDomainOf<PolynomialMod2> > : AbstractRing<PolynomialMod2>
        {
            EuclideanDomainOf<PolynomialMod2> m_domain;
            PolynomialMod2 m_modulus;
        };
        template<>
        struct  GF2NP : QuotientRing<EuclideanDomainOf<PolynomialMod2> >
        {
            unsigned int m;
        public:
            void BERDecodeElement(struct BufferedTransformation* arg_0, struct PolynomialMod2* arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct GF2NP*, struct BufferedTransformation*, struct PolynomialMod2*);
                (org_ptr(0x14062b540L))(this, arg_0, arg_1);
            };
            struct GF2NP* Clone()
            {
                using org_ptr = struct GF2NP* (WINAPIV*)(struct GF2NP*);
                return (org_ptr(0x140581ac0L))(this);
            };
            void DEREncode(struct BufferedTransformation* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct GF2NP*, struct BufferedTransformation*);
                (org_ptr(0x140581b40L))(this, arg_0);
            };
            void DEREncodeElement(struct BufferedTransformation* arg_0, struct PolynomialMod2* arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct GF2NP*, struct BufferedTransformation*, struct PolynomialMod2*);
                (org_ptr(0x14062b500L))(this, arg_0, arg_1);
            };
            bool Equal(struct PolynomialMod2* arg_0, struct PolynomialMod2* arg_1)
            {
                using org_ptr = bool (WINAPIV*)(struct GF2NP*, struct PolynomialMod2*, struct PolynomialMod2*);
                return (org_ptr(0x1405817f0L))(this, arg_0, arg_1);
            };
            GF2NP(struct GF2NP* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct GF2NP*, struct GF2NP*);
                (org_ptr(0x140581a70L))(this, arg_0);
            };
            int64_t ctor_GF2NP(struct GF2NP* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct GF2NP*, struct GF2NP*);
                return (org_ptr(0x140581a70L))(this, arg_0);
            };
            GF2NP(struct PolynomialMod2* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct GF2NP*, struct PolynomialMod2*);
                (org_ptr(0x1406291c0L))(this, arg_0);
            };
            int64_t ctor_GF2NP(struct PolynomialMod2* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct GF2NP*, struct PolynomialMod2*);
                return (org_ptr(0x1406291c0L))(this, arg_0);
            };
            struct PolynomialMod2* HalfTrace(short retstr, struct PolynomialMod2* arg_0)
            {
                using org_ptr = struct PolynomialMod2* (WINAPIV*)(struct GF2NP*, short, struct PolynomialMod2*);
                return (org_ptr(0x1406293b0L))(this, retstr, arg_0);
            };
            bool IsUnit(struct PolynomialMod2* arg_0)
            {
                using org_ptr = bool (WINAPIV*)(struct GF2NP*, struct PolynomialMod2*);
                return (org_ptr(0x1405818a0L))(this, arg_0);
            };
            unsigned int MaxElementBitLength()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct GF2NP*);
                return (org_ptr(0x140557890L))(this);
            };
            unsigned int MaxElementByteLength()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct GF2NP*);
                return (org_ptr(0x140557840L))(this);
            };
            struct PolynomialMod2* SolveQuadraticEquation(short retstr, struct PolynomialMod2* arg_0)
            {
                using org_ptr = struct PolynomialMod2* (WINAPIV*)(struct GF2NP*, short, struct PolynomialMod2*);
                return (org_ptr(0x140629540L))(this, retstr, arg_0);
            };
            struct PolynomialMod2* SquareRoot(short retstr, struct PolynomialMod2* arg_0)
            {
                using org_ptr = struct PolynomialMod2* (WINAPIV*)(struct GF2NP*, short, struct PolynomialMod2*);
                return (org_ptr(0x1406292b0L))(this, retstr, arg_0);
            };
            ~GF2NP()
            {
                using org_ptr = int64_t (WINAPIV*)(struct GF2NP*);
                (org_ptr(0x140581680L))(this);
            };
            int64_t dtor_GF2NP()
            {
                using org_ptr = int64_t (WINAPIV*)(struct GF2NP*);
                return (org_ptr(0x140581680L))(this);
            };
        };
        template<>
        struct member_ptr<GF2NP>
        {
            GF2NP *m_p;
        };
        template<>
        struct  clonable_ptr<GF2NP> : member_ptr<GF2NP>
        {
        };
        template<>
        struct  EC2N : AbstractGroup<EC2NPoint>
        {
            clonable_ptr<GF2NP> m_field;
            PolynomialMod2 m_a;
            PolynomialMod2 m_b;
            EC2NPoint m_R;
        public:
            struct EC2NPoint* Add(struct EC2NPoint* arg_0, struct EC2NPoint* arg_1)
            {
                using org_ptr = struct EC2NPoint* (WINAPIV*)(struct EC2N*, struct EC2NPoint*, struct EC2NPoint*);
                return (org_ptr(0x14062ebc0L))(this, arg_0, arg_1);
            };
            struct EC2NPoint* BERDecodePoint(short retstr, struct EC2NPoint* arg_0)
            {
                using org_ptr = struct EC2NPoint* (WINAPIV*)(struct EC2N*, short, struct EC2NPoint*);
                return (org_ptr(0x14062e010L))(this, retstr, arg_0);
            };
            struct EC2NPoint* CascadeMultiply(struct EC2NPoint* retstr, struct Integer* arg_0, struct EC2NPoint* arg_1, struct Integer* arg_2, struct EC2NPoint* arg_3)
            {
                using org_ptr = struct EC2NPoint* (WINAPIV*)(struct EC2N*, struct EC2NPoint*, struct Integer*, struct EC2NPoint*, struct Integer*, struct EC2NPoint*);
                return (org_ptr(0x140584340L))(this, retstr, arg_0, arg_1, arg_2, arg_3);
            };
            void DEREncode(struct BufferedTransformation* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct EC2N*, struct BufferedTransformation*);
                (org_ptr(0x14062d1b0L))(this, arg_0);
            };
            void DEREncodePoint(struct BufferedTransformation* arg_0, struct EC2NPoint* arg_1, bool arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct EC2N*, struct BufferedTransformation*, struct EC2NPoint*, bool);
                (org_ptr(0x14062e160L))(this, arg_0, arg_1, arg_2);
            };
            bool DecodePoint(struct EC2NPoint* arg_0, struct BufferedTransformation* arg_1, uint64_t arg_2)
            {
                using org_ptr = bool (WINAPIV*)(struct EC2N*, struct EC2NPoint*, struct BufferedTransformation*, uint64_t);
                return (org_ptr(0x14062d3c0L))(this, arg_0, arg_1, arg_2);
            };
            bool DecodePoint(struct EC2NPoint* arg_0, uint8_t* arg_1, uint64_t arg_2)
            {
                using org_ptr = bool (WINAPIV*)(struct EC2N*, struct EC2NPoint*, uint8_t*, uint64_t);
                return (org_ptr(0x14062d300L))(this, arg_0, arg_1, arg_2);
            };
            struct EC2NPoint* Double(struct EC2NPoint* arg_0)
            {
                using org_ptr = struct EC2NPoint* (WINAPIV*)(struct EC2N*, struct EC2NPoint*);
                return (org_ptr(0x14062f1d0L))(this, arg_0);
            };
            EC2N(struct BufferedTransformation* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct EC2N*, struct BufferedTransformation*);
                (org_ptr(0x14062cf60L))(this, arg_0);
            };
            int64_t ctor_EC2N(struct BufferedTransformation* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct EC2N*, struct BufferedTransformation*);
                return (org_ptr(0x14062cf60L))(this, arg_0);
            };
            EC2N(struct GF2NP* arg_0, struct PolynomialMod2* arg_1, struct PolynomialMod2* arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct EC2N*, struct GF2NP*, struct PolynomialMod2*, struct PolynomialMod2*);
                (org_ptr(0x140581be0L))(this, arg_0, arg_1, arg_2);
            };
            int64_t ctor_EC2N(struct GF2NP* arg_0, struct PolynomialMod2* arg_1, struct PolynomialMod2* arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct EC2N*, struct GF2NP*, struct PolynomialMod2*, struct PolynomialMod2*);
                return (org_ptr(0x140581be0L))(this, arg_0, arg_1, arg_2);
            };
            EC2N()
            {
                using org_ptr = int64_t (WINAPIV*)(struct EC2N*);
                (org_ptr(0x14055d970L))(this);
            };
            int64_t ctor_EC2N()
            {
                using org_ptr = int64_t (WINAPIV*)(struct EC2N*);
                return (org_ptr(0x14055d970L))(this);
            };
            void EncodePoint(struct BufferedTransformation* arg_0, struct EC2NPoint* arg_1, bool arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct EC2N*, struct BufferedTransformation*, struct EC2NPoint*, bool);
                (org_ptr(0x14062dcc0L))(this, arg_0, arg_1, arg_2);
            };
            void EncodePoint(uint8_t* arg_0, struct EC2NPoint* arg_1, bool arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct EC2N*, uint8_t*, struct EC2NPoint*, bool);
                (org_ptr(0x14062df00L))(this, arg_0, arg_1, arg_2);
            };
            unsigned int EncodedPointSize(bool arg_0)
            {
                using org_ptr = unsigned int (WINAPIV*)(struct EC2N*, bool);
                return (org_ptr(0x1405578a0L))(this, arg_0);
            };
            bool Equal(struct EC2NPoint* arg_0, struct EC2NPoint* arg_1)
            {
                using org_ptr = bool (WINAPIV*)(struct EC2N*, struct EC2NPoint*, struct EC2NPoint*);
                return (org_ptr(0x14062e990L))(this, arg_0, arg_1);
            };
            struct Integer* FieldSize(short retstr)
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct EC2N*, short);
                return (org_ptr(0x140583540L))(this, retstr);
            };
            struct GF2NP* GetField()
            {
                using org_ptr = struct GF2NP* (WINAPIV*)(struct EC2N*);
                return (org_ptr(0x140557900L))(this);
            };
            struct EC2NPoint* Identity()
            {
                using org_ptr = struct EC2NPoint* (WINAPIV*)(struct EC2N*);
                return (org_ptr(0x14062eac0L))(this);
            };
            struct EC2NPoint* Inverse(struct EC2NPoint* arg_0)
            {
                using org_ptr = struct EC2NPoint* (WINAPIV*)(struct EC2N*, struct EC2NPoint*);
                return (org_ptr(0x14062eb00L))(this, arg_0);
            };
            bool InversionIsFast()
            {
                using org_ptr = bool (WINAPIV*)(struct EC2N*);
                return (org_ptr(0x14055da70L))(this);
            };
            bool ValidateParameters(struct RandomNumberGenerator* arg_0, unsigned int arg_1)
            {
                using org_ptr = bool (WINAPIV*)(struct EC2N*, struct RandomNumberGenerator*, unsigned int);
                return (org_ptr(0x14062e210L))(this, arg_0, arg_1);
            };
            bool VerifyPoint(struct EC2NPoint* arg_0)
            {
                using org_ptr = bool (WINAPIV*)(struct EC2N*, struct EC2NPoint*);
                return (org_ptr(0x14062e370L))(this, arg_0);
            };
            ~EC2N()
            {
                using org_ptr = int64_t (WINAPIV*)(struct EC2N*);
                (org_ptr(0x14055dae0L))(this);
            };
            int64_t dtor_EC2N()
            {
                using org_ptr = int64_t (WINAPIV*)(struct EC2N*);
                return (org_ptr(0x14055dae0L))(this);
            };
        };
        template<>
        struct  EcPrecomputation<EC2N> : DL_GroupPrecomputation<EC2NPoint>
        {
            EC2N m_ec;
        };
        template<>
        struct DL_FixedBasePrecomputation<EC2NPoint>
        {
            DL_FixedBasePrecomputation<EC2NPoint>Vtbl *vfptr;
        };
        template<>
        struct DL_FixedBasePrecomputation<EC2NPoint>Vtbl
        {
            bool (WINAPIV *IsInitialized)(DL_FixedBasePrecomputation<EC2NPoint> *_this);
            void (WINAPIV *SetBase)(DL_FixedBasePrecomputation<EC2NPoint> *_this, DL_GroupPrecomputation<EC2NPoint> *, EC2NPoint *);
            EC2NPoint *(WINAPIV *GetBase)(DL_FixedBasePrecomputation<EC2NPoint> *_this, DL_GroupPrecomputation<EC2NPoint> *);
            void (WINAPIV *Precompute)(DL_FixedBasePrecomputation<EC2NPoint> *_this, DL_GroupPrecomputation<EC2NPoint> *, unsigned int, unsigned int);
            void (WINAPIV *Load)(DL_FixedBasePrecomputation<EC2NPoint> *_this, DL_GroupPrecomputation<EC2NPoint> *, BufferedTransformation *);
            void (WINAPIV *Save)(DL_FixedBasePrecomputation<EC2NPoint> *_this, DL_GroupPrecomputation<EC2NPoint> *, BufferedTransformation *);
            EC2NPoint *(WINAPIV *Exponentiate)(DL_FixedBasePrecomputation<EC2NPoint> *_this, EC2NPoint *result, DL_GroupPrecomputation<EC2NPoint> *, Integer *);
            EC2NPoint *(WINAPIV *CascadeExponentiate)(DL_FixedBasePrecomputation<EC2NPoint> *_this, EC2NPoint *result, DL_GroupPrecomputation<EC2NPoint> *, Integer *, DL_FixedBasePrecomputation<EC2NPoint> *, Integer *);
        };
        template<>
        struct  DL_FixedBasePrecomputationImpl<EC2NPoint> : DL_FixedBasePrecomputation<EC2NPoint>
        {
            EC2NPoint m_base;
            unsigned int m_windowSize;
            Integer m_exponentBase;
            std::vector<EC2NPoint,std::allocator<EC2NPoint> > m_bases;
        };
        template<>
        struct  DL_GroupParametersImpl<EcPrecomputation<EC2N>,DL_FixedBasePrecomputationImpl<EC2NPoint>,DL_GroupParameters<EC2NPoint> > : DL_GroupParameters<EC2NPoint>
        {
            BYTE m_groupPrecomputation[112];
            DL_FixedBasePrecomputationImpl<EC2NPoint> m_gpc;
        };
        template<>
        struct  DL_GroupParameters_EC<EC2N> : DL_GroupParametersImpl<EcPrecomputation<EC2N>,DL_FixedBasePrecomputationImpl<EC2NPoint>,DL_GroupParameters<EC2NPoint> >
        {
            BYTE m_oid[24];
            Integer m_n;
            bool m_compress;
            bool m_encodeAsOID;
            Integer m_k;
        public:
            int64_t CascadeExponentiate(struct Integer* arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct EC2NPoint*, struct Integer*);
                return (org_ptr(0x1405842d0L))(arg_0, arg_1);
            };
        };
        template<>
        struct  DL_SchemeOptionsBase<DL_SS<DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_GroupParameters_EC<EC2N> >
        {
        };
        template<>
        struct DL_ElgamalLikeSignatureAlgorithm<EC2NPoint>
        {
            DL_ElgamalLikeSignatureAlgorithm<EC2NPoint>Vtbl *vfptr;
        };
        template<>
        struct DL_Key<EC2NPoint>
        {
            DL_Key<EC2NPoint>Vtbl *vfptr;
        };
        template<>
        struct DL_Key<EC2NPoint>Vtbl
        {
            DL_GroupParameters<EC2NPoint> *(WINAPIV *GetAbstractGroupParameters)(DL_Key<EC2NPoint> *_this);
            DL_GroupParameters<EC2NPoint> *(WINAPIV *AccessAbstractGroupParameters)(DL_Key<EC2NPoint> *_this);
        };
        template<>
        const struct  DL_PublicKey<EC2NPoint> : DL_Key<EC2NPoint>
        {
        };
        template<>
        struct DL_ElgamalLikeSignatureAlgorithm<EC2NPoint>Vtbl
        {
            void (WINAPIV *Sign)(DL_ElgamalLikeSignatureAlgorithm<EC2NPoint> *_this, DL_GroupParameters<EC2NPoint> *, Integer *, Integer *, Integer *, Integer *, Integer *);
            bool (WINAPIV *Verify)(DL_ElgamalLikeSignatureAlgorithm<EC2NPoint> *_this, DL_GroupParameters<EC2NPoint> *, DL_PublicKey<EC2NPoint> *, Integer *, Integer *, Integer *);
            Integer *(WINAPIV *RecoverPresignature)(DL_ElgamalLikeSignatureAlgorithm<EC2NPoint> *_this, Integer *result, DL_GroupParameters<EC2NPoint> *, DL_PublicKey<EC2NPoint> *, Integer *, Integer *);
            unsigned __int64 (WINAPIV *RLen)(DL_ElgamalLikeSignatureAlgorithm<EC2NPoint> *_this, DL_GroupParameters<EC2NPoint> *);
            unsigned __int64 (WINAPIV *SLen)(DL_ElgamalLikeSignatureAlgorithm<EC2NPoint> *_this, DL_GroupParameters<EC2NPoint> *);
        };
        template<>
        struct  DL_Algorithm_GDSA<EC2NPoint> : DL_ElgamalLikeSignatureAlgorithm<EC2NPoint>
        {
        public:
            int64_t Sign(struct Integer* arg_0, int64_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(int64_t, struct Integer*, int64_t);
                return (org_ptr(0x14055a0e0L))(b, arg_0, arg_1);
            };
            int64_t Verify(struct Integer* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Integer*, struct Integer*);
                return (org_ptr(0x14055a360L))(a, arg_0);
            };
        };
        template<>
        struct  DL_Algorithm_ECDSA<EC2N> : DL_Algorithm_GDSA<EC2NPoint>
        {
        };
        template<>
        struct  NewObject<DL_Algorithm_ECDSA<EC2N> >
        {
        };
        template<>
        struct member_ptr<BufferedTransformation>
        {
            BufferedTransformation *m_p;
        public:
            ~member_ptr()
            {
                using org_ptr = void (WINAPIV*)(struct member_ptr<BufferedTransformation>*);
                (org_ptr(0x14045ee10L))(this);
            };
            void dtor_member_ptr()
            {
                using org_ptr = void (WINAPIV*)(struct member_ptr<BufferedTransformation>*);
                (org_ptr(0x14045ee10L))(this);
            };
        };
        struct  Filter : BufferedTransformation, NotCopyable
        {
            member_ptr<BufferedTransformation> m_attachment;
            unsigned __int64 m_inputPosition;
            int m_continueAt;
        public:
            bool Attachable()
            {
                using org_ptr = bool (WINAPIV*)(struct Filter*);
                return (org_ptr(0x14044cf80L))(this);
            };
            bool ShouldPropagateMessageEnd()
            {
                using org_ptr = bool (WINAPIV*)(struct Filter*);
                return (org_ptr(0x14044cf90L))(this);
            };
            bool ShouldPropagateMessageSeriesEnd()
            {
                using org_ptr = bool (WINAPIV*)(struct Filter*);
                return (org_ptr(0x14044cfa0L))(this);
            };
            ~Filter()
            {
                using org_ptr = void (WINAPIV*)(struct Filter*);
                (org_ptr(0x14044d850L))(this);
            };
            void dtor_Filter()
            {
                using org_ptr = void (WINAPIV*)(struct Filter*);
                (org_ptr(0x14044d850L))(this);
            };
        };
        struct  FilterWithInputQueue : Filter
        {
            ByteQueue m_inQueue;
        };
        template<>
        struct  DL_SignatureSchemeOptions<DSA,DL_Keys_DSA,DL_Algorithm_GDSA<Integer>,DL_SignatureMessageEncodingMethod_DSA,SHA1> : DL_KeyedSchemeOptions<DSA,DL_Keys_DSA>
        {
        };
        struct PK_SignatureScheme
        {
                struct  InvalidKeyLength : Exception
                {
                public:
                    InvalidKeyLength(struct InvalidKeyLength* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct InvalidKeyLength*, struct InvalidKeyLength*);
                        (org_ptr(0x1406240e0L))(this, arg_0);
                    };
                    int64_t ctor_InvalidKeyLength(struct InvalidKeyLength* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct InvalidKeyLength*, struct InvalidKeyLength*);
                        return (org_ptr(0x1406240e0L))(this, arg_0);
                    };
                    ~InvalidKeyLength()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct InvalidKeyLength*);
                        (org_ptr(0x140624600L))(this);
                    };
                    int64_t dtor_InvalidKeyLength()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct InvalidKeyLength*);
                        return (org_ptr(0x140624600L))(this);
                    };
                };
                struct  KeyTooShort : InvalidKeyLength
                {
                public:
                    KeyTooShort(struct KeyTooShort* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct KeyTooShort*, struct KeyTooShort*);
                        (org_ptr(0x1406240a0L))(this, arg_0);
                    };
                    int64_t ctor_KeyTooShort(struct KeyTooShort* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct KeyTooShort*, struct KeyTooShort*);
                        return (org_ptr(0x1406240a0L))(this, arg_0);
                    };
                    KeyTooShort()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct KeyTooShort*);
                        (org_ptr(0x140624480L))(this);
                    };
                    int64_t ctor_KeyTooShort()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct KeyTooShort*);
                        return (org_ptr(0x140624480L))(this);
                    };
                    ~KeyTooShort()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct KeyTooShort*);
                        (org_ptr(0x140624620L))(this);
                    };
                    int64_t dtor_KeyTooShort()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct KeyTooShort*);
                        return (org_ptr(0x140624620L))(this);
                    };
                };
            PK_SignatureSchemeVtbl *vfptr;
        public:
            uint64_t MaxSignatureLength(uint64_t arg_0)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct PK_SignatureScheme*, uint64_t);
                return (org_ptr(0x140561f20L))(this, arg_0);
            };
            PK_SignatureScheme(struct PK_SignatureScheme* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_SignatureScheme*, struct PK_SignatureScheme*);
                (org_ptr(0x140633720L))(this, arg_0);
            };
            int64_t ctor_PK_SignatureScheme(struct PK_SignatureScheme* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_SignatureScheme*, struct PK_SignatureScheme*);
                return (org_ptr(0x140633720L))(this, arg_0);
            };
            PK_SignatureScheme()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_SignatureScheme*);
                (org_ptr(0x14056b480L))(this);
            };
            int64_t ctor_PK_SignatureScheme()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_SignatureScheme*);
                return (org_ptr(0x14056b480L))(this);
            };
            bool SignatureUpfront()
            {
                using org_ptr = bool (WINAPIV*)(struct PK_SignatureScheme*);
                return (org_ptr(0x140561f50L))(this);
            };
            ~PK_SignatureScheme()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_SignatureScheme*);
                (org_ptr(0x140560060L))(this);
            };
            int64_t dtor_PK_SignatureScheme()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_SignatureScheme*);
                return (org_ptr(0x140560060L))(this);
            };
        };
        struct PK_SignatureSchemeVtbl
        {
            void *(WINAPIV *__vecDelDtor)(PK_SignatureScheme *_this, unsigned int);
            BYTE gap8[8];
            unsigned __int64 (WINAPIV *MaxSignatureLength)(PK_SignatureScheme *_this, unsigned __int64);
            unsigned __int64 (WINAPIV *MaxRecoverableLength)(PK_SignatureScheme *_this);
            unsigned __int64 (WINAPIV *MaxRecoverableLengthFromSignatureLength)(PK_SignatureScheme *_this, unsigned __int64);
            bool (WINAPIV *IsProbabilistic)(PK_SignatureScheme *_this);
            bool (WINAPIV *AllowNonrecoverablePart)(PK_SignatureScheme *_this);
            bool (WINAPIV *SignatureUpfront)(PK_SignatureScheme *_this);
            bool (WINAPIV *RecoverablePartFirst)(PK_SignatureScheme *_this);
        };
        struct  PK_Signer : PK_SignatureScheme, PrivateKeyAlgorithm
        {
        public:
            PK_Signer(struct PK_Signer* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_Signer*, struct PK_Signer*);
                (org_ptr(0x140633460L))(this, arg_0);
            };
            int64_t ctor_PK_Signer(struct PK_Signer* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_Signer*, struct PK_Signer*);
                return (org_ptr(0x140633460L))(this, arg_0);
            };
            PK_Signer()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_Signer*);
                (org_ptr(0x14056aeb0L))(this);
            };
            int64_t ctor_PK_Signer()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_Signer*);
                return (org_ptr(0x14056aeb0L))(this);
            };
            uint64_t Sign(struct RandomNumberGenerator* arg_0, struct PK_MessageAccumulator* arg_1, uint8_t* arg_2)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct PK_Signer*, struct RandomNumberGenerator*, struct PK_MessageAccumulator*, uint8_t*);
                return (org_ptr(0x1405f5f50L))(this, arg_0, arg_1, arg_2);
            };
            uint64_t SignMessage(struct RandomNumberGenerator* arg_0, uint8_t* arg_1, uint64_t arg_2, uint8_t* arg_3)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct PK_Signer*, struct RandomNumberGenerator*, uint8_t*, uint64_t, uint8_t*);
                return (org_ptr(0x1405f5ff0L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            uint64_t SignMessageWithRecovery(struct RandomNumberGenerator* arg_0, uint8_t* arg_1, uint64_t arg_2, uint8_t* arg_3, uint64_t arg_4, uint8_t* arg_5)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct PK_Signer*, struct RandomNumberGenerator*, uint8_t*, uint64_t, uint8_t*, uint64_t, uint8_t*);
                return (org_ptr(0x1405f60e0L))(this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5);
            };
            ~PK_Signer()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_Signer*);
                (org_ptr(0x14055fff0L))(this);
            };
            int64_t dtor_PK_Signer()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_Signer*);
                return (org_ptr(0x14055fff0L))(this);
            };
        };
        template<>
        struct DL_Base<DL_PrivateKey<Integer> >
        {
            DL_Base<DL_PrivateKey<Integer> >Vtbl *vfptr;
        };
        template<>
        struct DL_Base<DL_PrivateKey<Integer> >Vtbl
        {
            DL_PrivateKey<Integer> *(WINAPIV *AccessKeyInterface)(DL_Base<DL_PrivateKey<Integer> > *_this);
            DL_PrivateKey<Integer> *(WINAPIV *GetKeyInterface)(DL_Base<DL_PrivateKey<Integer> > *_this);
        };
        template<>
        struct  DL_SignatureSchemeBase<PK_Signer,DL_PrivateKey<Integer> > : PK_Signer, DL_Base<DL_PrivateKey<Integer> >
        {
        };
        template<>
        struct  DL_SignerBase<Integer> : DL_SignatureSchemeBase<PK_Signer,DL_PrivateKey<Integer> >
        {
        };
        template<>
        struct  AlgorithmImpl<DL_SignerBase<Integer>,DSA> : DL_SignerBase<Integer>
        {
        };
        template<>
        struct   DL_ObjectImplBase<DL_SignerBase<Integer>,DL_SignatureSchemeOptions<DSA,DL_Keys_DSA,DL_Algorithm_GDSA<Integer>,DL_SignatureMessageEncodingMethod_DSA,SHA1>,DL_PrivateKey_WithSignaturePairwiseConsistencyTest<DL_PrivateKey_GFP<DL_GroupParameters_DSA>,DSA> > : AlgorithmImpl<DL_SignerBase<Integer>,DSA>
        {
            DL_PrivateKey_WithSignaturePairwiseConsistencyTest<DL_PrivateKey_GFP<DL_GroupParameters_DSA>,DSA> m_key;
        };
        template<>
        struct  DL_ObjectImpl<DL_SignerBase<Integer>,DL_SignatureSchemeOptions<DSA,DL_Keys_DSA,DL_Algorithm_GDSA<Integer>,DL_SignatureMessageEncodingMethod_DSA,SHA1>,DL_PrivateKey_WithSignaturePairwiseConsistencyTest<DL_PrivateKey_GFP<DL_GroupParameters_DSA>,DSA> > : DL_ObjectImplBase<DL_SignerBase<Integer>,DL_SignatureSchemeOptions<DSA,DL_Keys_DSA,DL_Algorithm_GDSA<Integer>,DL_SignatureMessageEncodingMethod_DSA,SHA1>,DL_PrivateKey_WithSignaturePairwiseConsistencyTest<DL_PrivateKey_GFP<DL_GroupParameters_DSA>,DSA> >
        {
        };
        template<>
        struct  DL_SignerImpl<DL_SignatureSchemeOptions<DSA,DL_Keys_DSA,DL_Algorithm_GDSA<Integer>,DL_SignatureMessageEncodingMethod_DSA,SHA1> > : DL_ObjectImpl<DL_SignerBase<Integer>,DL_SignatureSchemeOptions<DSA,DL_Keys_DSA,DL_Algorithm_GDSA<Integer>,DL_SignatureMessageEncodingMethod_DSA,SHA1>,DL_PrivateKey_WithSignaturePairwiseConsistencyTest<DL_PrivateKey_GFP<DL_GroupParameters_DSA>,DSA> >
        {
        };
        template<>
        struct  PK_FinalTemplate<DL_SignerImpl<DL_SignatureSchemeOptions<DSA,DL_Keys_DSA,DL_Algorithm_GDSA<Integer>,DL_SignatureMessageEncodingMethod_DSA,SHA1> > > : DL_SignerImpl<DL_SignatureSchemeOptions<DSA,DL_Keys_DSA,DL_Algorithm_GDSA<Integer>,DL_SignatureMessageEncodingMethod_DSA,SHA1> >
        {
        };
        struct  PK_Verifier : PK_SignatureScheme, PublicKeyAlgorithm
        {
        public:
            PK_Verifier()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_Verifier*);
                (org_ptr(0x14056b080L))(this);
            };
            int64_t ctor_PK_Verifier()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_Verifier*);
                return (org_ptr(0x14056b080L))(this);
            };
            struct DecodingResult* Recover(short retstr, struct DecodingResult* arg_0, uint8_t* arg_1)
            {
                using org_ptr = struct DecodingResult* (WINAPIV*)(struct PK_Verifier*, short, struct DecodingResult*, uint8_t*);
                return (org_ptr(0x1405f6390L))(this, retstr, arg_0, arg_1);
            };
            struct DecodingResult* RecoverMessage(struct DecodingResult* retstr, uint8_t* arg_0, uint8_t* arg_1, uint64_t arg_2, uint8_t* arg_3, uint64_t arg_4)
            {
                using org_ptr = struct DecodingResult* (WINAPIV*)(struct PK_Verifier*, struct DecodingResult*, uint8_t*, uint8_t*, uint64_t, uint8_t*, uint64_t);
                return (org_ptr(0x1405f6430L))(this, retstr, arg_0, arg_1, arg_2, arg_3, arg_4);
            };
            bool Verify(struct PK_MessageAccumulator* arg_0)
            {
                using org_ptr = bool (WINAPIV*)(struct PK_Verifier*, struct PK_MessageAccumulator*);
                return (org_ptr(0x1405f6200L))(this, arg_0);
            };
            bool VerifyMessage(uint8_t* arg_0, uint64_t arg_1, uint8_t* arg_2, uint64_t arg_3)
            {
                using org_ptr = bool (WINAPIV*)(struct PK_Verifier*, uint8_t*, uint64_t, uint8_t*, uint64_t);
                return (org_ptr(0x1405f6290L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            ~PK_Verifier()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_Verifier*);
                (org_ptr(0x140560110L))(this);
            };
            int64_t dtor_PK_Verifier()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_Verifier*);
                return (org_ptr(0x140560110L))(this);
            };
        };
        template<>
        struct DL_Base<DL_PublicKey<Integer> >
        {
            DL_Base<DL_PublicKey<Integer> >Vtbl *vfptr;
        };
        template<>
        struct DL_Base<DL_PublicKey<Integer> >Vtbl
        {
            DL_PublicKey<Integer> *(WINAPIV *AccessKeyInterface)(DL_Base<DL_PublicKey<Integer> > *_this);
            DL_PublicKey<Integer> *(WINAPIV *GetKeyInterface)(DL_Base<DL_PublicKey<Integer> > *_this);
        };
        template<>
        struct  DL_SignatureSchemeBase<PK_Verifier,DL_PublicKey<Integer> > : PK_Verifier, DL_Base<DL_PublicKey<Integer> >
        {
        };
        template<>
        struct  DL_VerifierBase<Integer> : DL_SignatureSchemeBase<PK_Verifier,DL_PublicKey<Integer> >
        {
        };
        template<>
        struct  AlgorithmImpl<DL_VerifierBase<Integer>,DSA> : DL_VerifierBase<Integer>
        {
        };
        template<>
        struct  DL_ObjectImplBase<DL_VerifierBase<Integer>,DL_SignatureSchemeOptions<DSA,DL_Keys_DSA,DL_Algorithm_GDSA<Integer>,DL_SignatureMessageEncodingMethod_DSA,SHA1>,DL_PublicKey_GFP<DL_GroupParameters_DSA> > : AlgorithmImpl<DL_VerifierBase<Integer>,DSA>
        {
            DL_PublicKey_GFP<DL_GroupParameters_DSA> m_key;
        };
        template<>
        struct  DL_ObjectImpl<DL_VerifierBase<Integer>,DL_SignatureSchemeOptions<DSA,DL_Keys_DSA,DL_Algorithm_GDSA<Integer>,DL_SignatureMessageEncodingMethod_DSA,SHA1>,DL_PublicKey_GFP<DL_GroupParameters_DSA> > : DL_ObjectImplBase<DL_VerifierBase<Integer>,DL_SignatureSchemeOptions<DSA,DL_Keys_DSA,DL_Algorithm_GDSA<Integer>,DL_SignatureMessageEncodingMethod_DSA,SHA1>,DL_PublicKey_GFP<DL_GroupParameters_DSA> >
        {
        };
        template<>
        struct  DL_VerifierImpl<DL_SignatureSchemeOptions<DSA,DL_Keys_DSA,DL_Algorithm_GDSA<Integer>,DL_SignatureMessageEncodingMethod_DSA,SHA1> > : DL_ObjectImpl<DL_VerifierBase<Integer>,DL_SignatureSchemeOptions<DSA,DL_Keys_DSA,DL_Algorithm_GDSA<Integer>,DL_SignatureMessageEncodingMethod_DSA,SHA1>,DL_PublicKey_GFP<DL_GroupParameters_DSA> >
        {
        };
        template<>
        struct  PK_FinalTemplate<DL_VerifierImpl<DL_SignatureSchemeOptions<DSA,DL_Keys_DSA,DL_Algorithm_GDSA<Integer>,DL_SignatureMessageEncodingMethod_DSA,SHA1> > > : DL_VerifierImpl<DL_SignatureSchemeOptions<DSA,DL_Keys_DSA,DL_Algorithm_GDSA<Integer>,DL_SignatureMessageEncodingMethod_DSA,SHA1> >
        {
        };
        template<>
        struct  DL_SignatureSchemeBase<PK_Signer,DL_PrivateKey<ECPPoint> > : PK_Signer, DL_Base<DL_PrivateKey<ECPPoint> >
        {
        };
        template<>
        struct  DL_SignerBase<ECPPoint> : DL_SignatureSchemeBase<PK_Signer,DL_PrivateKey<ECPPoint> >
        {
        };
        template<>
        struct  AlgorithmImpl<DL_SignerBase<ECPPoint>,DL_SS<DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int> > : DL_SignerBase<ECPPoint>
        {
        };
        template<>
        struct  DL_PrivateKey_WithSignaturePairwiseConsistencyTest<DL_PrivateKey_EC<ECP>,ECDSA<ECP,SHA1> > : DL_PrivateKey_EC<ECP>
        {
        };
        template<>
        struct  DL_ObjectImplBase<DL_SignerBase<ECPPoint>,DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1>,DL_PrivateKey_WithSignaturePairwiseConsistencyTest<DL_PrivateKey_EC<ECP>,ECDSA<ECP,SHA1> > > : AlgorithmImpl<DL_SignerBase<ECPPoint>,DL_SS<DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int> >
        {
            DL_PrivateKey_WithSignaturePairwiseConsistencyTest<DL_PrivateKey_EC<ECP>,ECDSA<ECP,SHA1> > m_key;
        };
        template<>
        struct  DL_ObjectImpl<DL_SignerBase<ECPPoint>,DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1>,DL_PrivateKey_WithSignaturePairwiseConsistencyTest<DL_PrivateKey_EC<ECP>,ECDSA<ECP,SHA1> > > : DL_ObjectImplBase<DL_SignerBase<ECPPoint>,DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1>,DL_PrivateKey_WithSignaturePairwiseConsistencyTest<DL_PrivateKey_EC<ECP>,ECDSA<ECP,SHA1> > >
        {
        };
        template<>
        struct  DL_SignerImpl<DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1> > : DL_ObjectImpl<DL_SignerBase<ECPPoint>,DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1>,DL_PrivateKey_WithSignaturePairwiseConsistencyTest<DL_PrivateKey_EC<ECP>,ECDSA<ECP,SHA1> > >
        {
        };
        template<>
        struct  VariableKeyLength<16,0,2147483647,1,4,0>
        {
        public:
            static uint64_t StaticGetValidKeyLength(uint64_t n)
            {
                using org_ptr = uint64_t (WINAPIV*)(uint64_t);
                return (org_ptr(0x140465b20L))(n);
            };
        };
        template<>
        struct  SimpleKeyedTransformation<HashTransformation> : HashTransformation, SimpleKeyingInterface
        {
        public:
            struct Algorithm* GetAlgorithm()
            {
                using org_ptr = struct Algorithm* (WINAPIV*)(struct SimpleKeyedTransformation<HashTransformation>*);
                return (org_ptr(0x1404653d0L))(this);
            };
            SimpleKeyedTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyedTransformation<HashTransformation>*);
                (org_ptr(0x140465ac0L))(this);
            };
            void ctor_SimpleKeyedTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyedTransformation<HashTransformation>*);
                (org_ptr(0x140465ac0L))(this);
            };
            ~SimpleKeyedTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyedTransformation<HashTransformation>*);
                (org_ptr(0x1404650a0L))(this);
            };
            void dtor_SimpleKeyedTransformation()
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyedTransformation<HashTransformation>*);
                (org_ptr(0x1404650a0L))(this);
            };
        };
        template<>
        struct  HMAC_Base : SimpleKeyedTransformation<HashTransformation>, VariableKeyLength<16,0,2147483647,1,4,0>
        {
            SecBlock<unsigned char,AllocatorWithCleanup<unsigned char,0> > m_buf;
            bool m_innerHashKeyed;
        public:
            uint8_t* AccessInnerHash()
            {
                using org_ptr = uint8_t* (WINAPIV*)(struct HMAC_Base*);
                return (org_ptr(0x140624dd0L))(this);
            };
            uint8_t* AccessIpad()
            {
                using org_ptr = uint8_t* (WINAPIV*)(struct HMAC_Base*);
                return (org_ptr(0x140624d50L))(this);
            };
            uint8_t* AccessOpad()
            {
                using org_ptr = uint8_t* (WINAPIV*)(struct HMAC_Base*);
                return (org_ptr(0x140624d70L))(this);
            };
            unsigned int DigestSize()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct HMAC_Base*);
                return (org_ptr(0x140465360L))(this);
            };
            HMAC_Base()
            {
                using org_ptr = void (WINAPIV*)(struct HMAC_Base*);
                (org_ptr(0x140465a10L))(this);
            };
            void ctor_HMAC_Base()
            {
                using org_ptr = void (WINAPIV*)(struct HMAC_Base*);
                (org_ptr(0x140465a10L))(this);
            };
            void KeyInnerHash()
            {
                using org_ptr = void (WINAPIV*)(struct HMAC_Base*);
                (org_ptr(0x140624aa0L))(this);
            };
            unsigned int OptimalBlockSize()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct HMAC_Base*);
                return (org_ptr(0x1404652f0L))(this);
            };
            void Restart()
            {
                using org_ptr = void (WINAPIV*)(struct HMAC_Base*);
                (org_ptr(0x140624b50L))(this);
            };
            void TruncatedFinal(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct HMAC_Base*, uint8_t*, uint64_t);
                (org_ptr(0x140624c20L))(this, arg_0, arg_1);
            };
            void UncheckedSetKey(uint8_t* arg_0, unsigned int arg_1, struct NameValuePairs* arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct HMAC_Base*, uint8_t*, unsigned int, struct NameValuePairs*);
                (org_ptr(0x140624660L))(this, arg_0, arg_1, arg_2);
            };
            void Update(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct HMAC_Base*, uint8_t*, uint64_t);
                (org_ptr(0x140624bb0L))(this, arg_0, arg_1);
            };
            ~HMAC_Base()
            {
                using org_ptr = void (WINAPIV*)(struct HMAC_Base*);
                (org_ptr(0x140465010L))(this);
            };
            void dtor_HMAC_Base()
            {
                using org_ptr = void (WINAPIV*)(struct HMAC_Base*);
                (org_ptr(0x140465010L))(this);
            };
        };
        template<>
        struct  SimpleKeyingInterfaceImpl<HMAC_Base,HMAC<SHA1> > : HMAC_Base
        {
        };
        struct  Sink : BufferedTransformation
        {
        public:
            Sink()
            {
                using org_ptr = int64_t (WINAPIV*)(struct Sink*);
                (org_ptr(0x14054b140L))(this);
            };
            int64_t ctor_Sink()
            {
                using org_ptr = int64_t (WINAPIV*)(struct Sink*);
                return (org_ptr(0x14054b140L))(this);
            };
            ~Sink()
            {
                using org_ptr = int64_t (WINAPIV*)(struct Sink*);
                (org_ptr(0x14054b1e0L))(this);
            };
            int64_t dtor_Sink()
            {
                using org_ptr = int64_t (WINAPIV*)(struct Sink*);
                return (org_ptr(0x14054b1e0L))(this);
            };
        };
        template<>
        struct  CustomFlushPropagation<Sink> : Sink
        {
        };
        template<>
        struct  DL_KeyedSchemeOptions<ECIES<ECP,EnumToType<enum CofactorMultiplicationOption,0>,0>,DL_Keys_EC<ECP> > : DL_SchemeOptionsBase<ECIES<ECP,EnumToType<enum CofactorMultiplicationOption,0>,0>,DL_GroupParameters_EC<ECP> >
        {
        };
        template<>
        struct  InputRejecting<BufferedTransformation> : BufferedTransformation
        {
                template<>
                struct  InputRejected : NotImplemented
                {
                public:
                    InputRejected(struct InputRejected* __that)
                    {
                        using org_ptr = void (WINAPIV*)(struct InputRejected*, struct InputRejected*);
                        (org_ptr(0x1404545a0L))(this, __that);
                    };
                    void ctor_InputRejected(struct InputRejected* __that)
                    {
                        using org_ptr = void (WINAPIV*)(struct InputRejected*, struct InputRejected*);
                        (org_ptr(0x1404545a0L))(this, __that);
                    };
                    InputRejected()
                    {
                        using org_ptr = void (WINAPIV*)(struct InputRejected*);
                        (org_ptr(0x14045ab20L))(this);
                    };
                    void ctor_InputRejected()
                    {
                        using org_ptr = void (WINAPIV*)(struct InputRejected*);
                        (org_ptr(0x14045ab20L))(this);
                    };
                    ~InputRejected()
                    {
                        using org_ptr = void (WINAPIV*)(struct InputRejected*);
                        (org_ptr(0x140454560L))(this);
                    };
                    void dtor_InputRejected()
                    {
                        using org_ptr = void (WINAPIV*)(struct InputRejected*);
                        (org_ptr(0x140454560L))(this);
                    };
                };
        public:
            bool ChannelMessageSeriesEnd(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* __formal, int __formal, bool __formal)
            {
                using org_ptr = bool (WINAPIV*)(struct InputRejecting<BufferedTransformation>*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, int, bool);
                return (org_ptr(0x140453f20L))(this, __formal, __formal, __formal);
            };
            uint64_t ChannelPut2(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* channel, char* begin, uint64_t length, int messageEnd, bool blocking)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct InputRejecting<BufferedTransformation>*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, char*, uint64_t, int, bool);
                return (org_ptr(0x140453eb0L))(this, channel, begin, length, messageEnd, blocking);
            };
            InputRejecting()
            {
                using org_ptr = void (WINAPIV*)(struct InputRejecting<BufferedTransformation>*);
                (org_ptr(0x140453cc0L))(this);
            };
            void ctor_InputRejecting()
            {
                using org_ptr = void (WINAPIV*)(struct InputRejecting<BufferedTransformation>*);
                (org_ptr(0x140453cc0L))(this);
            };
            bool IsolatedFlush(bool __formal, bool __formal)
            {
                using org_ptr = bool (WINAPIV*)(struct InputRejecting<BufferedTransformation>*, bool, bool);
                return (org_ptr(0x140453e30L))(this, __formal, __formal);
            };
            bool IsolatedMessageSeriesEnd(bool __formal)
            {
                using org_ptr = bool (WINAPIV*)(struct InputRejecting<BufferedTransformation>*, bool);
                return (org_ptr(0x140453e50L))(this, __formal);
            };
            uint64_t Put2(char* begin, uint64_t length, int messageEnd, bool blocking)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct InputRejecting<BufferedTransformation>*, char*, uint64_t, int, bool);
                return (org_ptr(0x140453dc0L))(this, begin, length, messageEnd, blocking);
            };
            ~InputRejecting()
            {
                using org_ptr = void (WINAPIV*)(struct InputRejecting<BufferedTransformation>*);
                (org_ptr(0x14044db60L))(this);
            };
            void dtor_InputRejecting()
            {
                using org_ptr = void (WINAPIV*)(struct InputRejecting<BufferedTransformation>*);
                (org_ptr(0x14044db60L))(this);
            };
        };
        template<>
        struct  AutoSignaling<InputRejecting<BufferedTransformation> > : InputRejecting<BufferedTransformation>
        {
            int m_autoSignalPropagation;
        };
        template<>
        struct  Store : AutoSignaling<InputRejecting<BufferedTransformation> >
        {
            bool m_messageEnd;
        public:
            bool GetNextMessage()
            {
                using org_ptr = bool (WINAPIV*)(struct Store*);
                return (org_ptr(0x1405fe100L))(this);
            };
            void IsolatedInitialize(struct NameValuePairs* parameters)
            {
                using org_ptr = void (WINAPIV*)(struct Store*, struct NameValuePairs*);
                (org_ptr(0x140453ad0L))(this, parameters);
            };
            unsigned int NumberOfMessages()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct Store*);
                return (org_ptr(0x140453b40L))(this);
            };
            Store()
            {
                using org_ptr = void (WINAPIV*)(struct Store*);
                (org_ptr(0x140453a70L))(this);
            };
            void ctor_Store()
            {
                using org_ptr = void (WINAPIV*)(struct Store*);
                (org_ptr(0x140453a70L))(this);
            };
            ~Store()
            {
                using org_ptr = void (WINAPIV*)(struct Store*);
                (org_ptr(0x14044dae0L))(this);
            };
            void dtor_Store()
            {
                using org_ptr = void (WINAPIV*)(struct Store*);
                (org_ptr(0x14044dae0L))(this);
            };
        };
        template<>
        struct  Bufferless<Sink> : Sink
        {
        };
        template<>
        struct  ArraySink : Bufferless<Sink>
        {
            char *m_buf;
            unsigned __int64 m_size;
            unsigned __int64 m_total;
        public:
            ArraySink(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ArraySink*, uint8_t*, uint64_t);
                (org_ptr(0x14054b0b0L))(this, arg_0, arg_1);
            };
            int64_t ctor_ArraySink(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ArraySink*, uint8_t*, uint64_t);
                return (org_ptr(0x14054b0b0L))(this, arg_0, arg_1);
            };
            uint64_t AvailableSize()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct ArraySink*);
                return (org_ptr(0x140623f90L))(this);
            };
            uint8_t* CreatePutSpace(uint64_t* arg_0)
            {
                using org_ptr = uint8_t* (WINAPIV*)(struct ArraySink*, uint64_t*);
                return (org_ptr(0x1405fb730L))(this, arg_0);
            };
            void IsolatedInitialize(struct NameValuePairs* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct ArraySink*, struct NameValuePairs*);
                (org_ptr(0x1405fb780L))(this, arg_0);
            };
            uint64_t Put2(uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct ArraySink*, uint8_t*, uint64_t, int, bool);
                return (org_ptr(0x1405fb680L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            uint64_t TotalPutLength()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct ArraySink*);
                return (org_ptr(0x140611850L))(this);
            };
            ~ArraySink()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ArraySink*);
                (org_ptr(0x14054b1a0L))(this);
            };
            int64_t dtor_ArraySink()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ArraySink*);
                return (org_ptr(0x14054b1a0L))(this);
            };
        };
        struct  StringStore : Store
        {
            const char *m_store;
            unsigned __int64 m_length;
            unsigned __int64 m_count;
        public:
            void StoreInitialize(struct NameValuePairs* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct StringStore*, struct NameValuePairs*);
                (org_ptr(0x1405fe1f0L))(this, arg_0);
            };
            StringStore(char* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct StringStore*, char*);
                (org_ptr(0x14057e040L))(this, arg_0);
            };
            int64_t ctor_StringStore(char* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct StringStore*, char*);
                return (org_ptr(0x14057e040L))(this, arg_0);
            };
            StringStore(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct StringStore*, uint8_t*, uint64_t);
                (org_ptr(0x1405ef050L))(this, arg_0, arg_1);
            };
            int64_t ctor_StringStore(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct StringStore*, uint8_t*, uint64_t);
                return (org_ptr(0x1405ef050L))(this, arg_0, arg_1);
            };
            ~StringStore()
            {
                using org_ptr = int64_t (WINAPIV*)(struct StringStore*);
                (org_ptr(0x140579970L))(this);
            };
            int64_t dtor_StringStore()
            {
                using org_ptr = int64_t (WINAPIV*)(struct StringStore*);
                return (org_ptr(0x140579970L))(this);
            };
        };
        struct  GF2NT : GF2NP
        {
            unsigned int t0;
            unsigned int t1;
            PolynomialMod2 result;
        public:
            struct GF2NP* Clone()
            {
                using org_ptr = struct GF2NP* (WINAPIV*)(struct GF2NT*);
                return (org_ptr(0x14062c3f0L))(this);
            };
            void DEREncode(struct BufferedTransformation* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct GF2NT*, struct BufferedTransformation*);
                (org_ptr(0x14062b580L))(this, arg_0);
            };
            GF2NT(struct GF2NT* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct GF2NT*, struct GF2NT*);
                (org_ptr(0x14062c4f0L))(this, arg_0);
            };
            int64_t ctor_GF2NT(struct GF2NT* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct GF2NT*, struct GF2NT*);
                return (org_ptr(0x14062c4f0L))(this, arg_0);
            };
            GF2NT(unsigned int arg_0, unsigned int arg_1, unsigned int arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct GF2NT*, unsigned int, unsigned int, unsigned int);
                (org_ptr(0x140629860L))(this, arg_0, arg_1, arg_2);
            };
            int64_t ctor_GF2NT(unsigned int arg_0, unsigned int arg_1, unsigned int arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct GF2NT*, unsigned int, unsigned int, unsigned int);
                return (org_ptr(0x140629860L))(this, arg_0, arg_1, arg_2);
            };
            struct PolynomialMod2* MultiplicativeInverse(struct PolynomialMod2* arg_0)
            {
                using org_ptr = struct PolynomialMod2* (WINAPIV*)(struct GF2NT*, struct PolynomialMod2*);
                return (org_ptr(0x1406299a0L))(this, arg_0);
            };
            struct PolynomialMod2* Multiply(struct PolynomialMod2* arg_0, struct PolynomialMod2* arg_1)
            {
                using org_ptr = struct PolynomialMod2* (WINAPIV*)(struct GF2NT*, struct PolynomialMod2*, struct PolynomialMod2*);
                return (org_ptr(0x14062a7d0L))(this, arg_0, arg_1);
            };
            struct PolynomialMod2* Reduced(struct PolynomialMod2* arg_0)
            {
                using org_ptr = struct PolynomialMod2* (WINAPIV*)(struct GF2NT*, struct PolynomialMod2*);
                return (org_ptr(0x14062aaf0L))(this, arg_0);
            };
            struct PolynomialMod2* Square(struct PolynomialMod2* arg_0)
            {
                using org_ptr = struct PolynomialMod2* (WINAPIV*)(struct GF2NT*, struct PolynomialMod2*);
                return (org_ptr(0x14062c470L))(this, arg_0);
            };
            ~GF2NT()
            {
                using org_ptr = int64_t (WINAPIV*)(struct GF2NT*);
                (org_ptr(0x140581620L))(this);
            };
            int64_t dtor_GF2NT()
            {
                using org_ptr = int64_t (WINAPIV*)(struct GF2NT*);
                return (org_ptr(0x140581620L))(this);
            };
        };
        struct MaskGeneratingFunction
        {
            MaskGeneratingFunctionVtbl *vfptr;
        public:
            MaskGeneratingFunction()
            {
                using org_ptr = int64_t (WINAPIV*)(struct MaskGeneratingFunction*);
                (org_ptr(0x14055e120L))(this);
            };
            int64_t ctor_MaskGeneratingFunction()
            {
                using org_ptr = int64_t (WINAPIV*)(struct MaskGeneratingFunction*);
                return (org_ptr(0x14055e120L))(this);
            };
            ~MaskGeneratingFunction()
            {
                using org_ptr = int64_t (WINAPIV*)(struct MaskGeneratingFunction*);
                (org_ptr(0x14055e610L))(this);
            };
            int64_t dtor_MaskGeneratingFunction()
            {
                using org_ptr = int64_t (WINAPIV*)(struct MaskGeneratingFunction*);
                return (org_ptr(0x14055e610L))(this);
            };
        };
        struct MaskGeneratingFunctionVtbl
        {
            void *(WINAPIV *__vecDelDtor)(MaskGeneratingFunction *_this, unsigned int);
            void (WINAPIV *GenerateAndMask)(MaskGeneratingFunction *_this, HashTransformation *, char *, unsigned __int64, const char *, unsigned __int64, bool);
        };
        struct  P1363_MGF1 : MaskGeneratingFunction
        {
        public:
            void GenerateAndMask(struct HashTransformation* arg_0, uint8_t* arg_1, char arg_2, uint8_t* arg_3, uint64_t arg_4, bool arg_5)
            {
                using org_ptr = void (WINAPIV*)(struct P1363_MGF1*, struct HashTransformation*, uint8_t*, char, uint8_t*, uint64_t, bool);
                (org_ptr(0x14055d350L))(this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5);
            };
            P1363_MGF1()
            {
                using org_ptr = int64_t (WINAPIV*)(struct P1363_MGF1*);
                (org_ptr(0x14055d320L))(this);
            };
            int64_t ctor_P1363_MGF1()
            {
                using org_ptr = int64_t (WINAPIV*)(struct P1363_MGF1*);
                return (org_ptr(0x14055d320L))(this);
            };
            static char* StaticAlgorithmName()
            {
                using org_ptr = char* (WINAPIV*)();
                return (org_ptr(0x14055bde0L))();
            };
            ~P1363_MGF1()
            {
                using org_ptr = int64_t (WINAPIV*)(struct P1363_MGF1*);
                (org_ptr(0x14055e5f0L))(this);
            };
            int64_t dtor_P1363_MGF1()
            {
                using org_ptr = int64_t (WINAPIV*)(struct P1363_MGF1*);
                return (org_ptr(0x14055e5f0L))(this);
            };
        };
        struct  CryptoMaterial : NameValuePairs
        {
                struct  InvalidMaterial : InvalidDataFormat
                {
                public:
                    InvalidMaterial(struct InvalidMaterial* __that)
                    {
                        using org_ptr = void (WINAPIV*)(struct InvalidMaterial*, struct InvalidMaterial*);
                        (org_ptr(0x14044ada0L))(this, __that);
                    };
                    void ctor_InvalidMaterial(struct InvalidMaterial* __that)
                    {
                        using org_ptr = void (WINAPIV*)(struct InvalidMaterial*, struct InvalidMaterial*);
                        (org_ptr(0x14044ada0L))(this, __that);
                    };
                    InvalidMaterial(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* s)
                    {
                        using org_ptr = void (WINAPIV*)(struct InvalidMaterial*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*);
                        (org_ptr(0x14044aa90L))(this, s);
                    };
                    void ctor_InvalidMaterial(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* s)
                    {
                        using org_ptr = void (WINAPIV*)(struct InvalidMaterial*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*);
                        (org_ptr(0x14044aa90L))(this, s);
                    };
                    ~InvalidMaterial()
                    {
                        using org_ptr = void (WINAPIV*)(struct InvalidMaterial*);
                        (org_ptr(0x14044ad60L))(this);
                    };
                    void dtor_InvalidMaterial()
                    {
                        using org_ptr = void (WINAPIV*)(struct InvalidMaterial*);
                        (org_ptr(0x14044ad60L))(this);
                    };
                };
        public:
            CryptoMaterial(struct CryptoMaterial* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct CryptoMaterial*, struct CryptoMaterial*);
                (org_ptr(0x14055d760L))(this, arg_0);
            };
            int64_t ctor_CryptoMaterial(struct CryptoMaterial* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct CryptoMaterial*, struct CryptoMaterial*);
                return (org_ptr(0x14055d760L))(this, arg_0);
            };
            CryptoMaterial()
            {
                using org_ptr = void (WINAPIV*)(struct CryptoMaterial*);
                (org_ptr(0x14044b030L))(this);
            };
            void ctor_CryptoMaterial()
            {
                using org_ptr = void (WINAPIV*)(struct CryptoMaterial*);
                (org_ptr(0x14044b030L))(this);
            };
            void DoQuickSanityCheck()
            {
                using org_ptr = void (WINAPIV*)(struct CryptoMaterial*);
                (org_ptr(0x140562a90L))(this);
            };
            void Load(struct BufferedTransformation* bt)
            {
                using org_ptr = void (WINAPIV*)(struct CryptoMaterial*, struct BufferedTransformation*);
                (org_ptr(0x14044f5e0L))(this, bt);
            };
            void LoadPrecomputation(struct BufferedTransformation* storedPrecomputation)
            {
                using org_ptr = void (WINAPIV*)(struct CryptoMaterial*, struct BufferedTransformation*);
                (org_ptr(0x14044b8e0L))(this, storedPrecomputation);
            };
            void Precompute(unsigned int n)
            {
                using org_ptr = void (WINAPIV*)(struct CryptoMaterial*, unsigned int);
                (org_ptr(0x14044b600L))(this, n);
            };
            void Save(struct BufferedTransformation* bt)
            {
                using org_ptr = void (WINAPIV*)(struct CryptoMaterial*, struct BufferedTransformation*);
                (org_ptr(0x14044f4d0L))(this, bt);
            };
            void SavePrecomputation(struct BufferedTransformation* storedPrecomputation)
            {
                using org_ptr = void (WINAPIV*)(struct CryptoMaterial*, struct BufferedTransformation*);
                (org_ptr(0x14044ba30L))(this, storedPrecomputation);
            };
            bool SupportsPrecomputation()
            {
                using org_ptr = bool (WINAPIV*)(struct CryptoMaterial*);
                return (org_ptr(0x14044b5f0L))(this);
            };
            void ThrowIfInvalid(struct RandomNumberGenerator* rng, unsigned int level)
            {
                using org_ptr = void (WINAPIV*)(struct CryptoMaterial*, struct RandomNumberGenerator*, unsigned int);
                (org_ptr(0x14044a720L))(this, rng, level);
            };
            ~CryptoMaterial()
            {
                using org_ptr = void (WINAPIV*)(struct CryptoMaterial*);
                (org_ptr(0x140448b40L))(this);
            };
            void dtor_CryptoMaterial()
            {
                using org_ptr = void (WINAPIV*)(struct CryptoMaterial*);
                (org_ptr(0x140448b40L))(this);
            };
        };
        template<>
        struct  IteratedHashBase<unsigned __int64,HashTransformation> : HashTransformation
        {
            unsigned __int64 m_countLo;
            unsigned __int64 m_countHi;
        };
        template<>
        struct  NullAllocator<unsigned __int64> : AllocatorBase<unsigned __int64>
        {
        };
        template<>
        struct  FixedSizeAllocatorWithCleanup<unsigned __int64,16,NullAllocator<unsigned __int64>,0> : AllocatorBase<unsigned __int64>
        {
            unsigned __int64 m_array[16];
            NullAllocator<unsigned __int64> m_fallbackAllocator;
            bool m_allocated;
        };
        template<>
        struct SecBlock<unsigned __int64,FixedSizeAllocatorWithCleanup<unsigned __int64,16,NullAllocator<unsigned __int64>,0> >
        {
            FixedSizeAllocatorWithCleanup<unsigned __int64,16,NullAllocator<unsigned __int64>,0> m_alloc;
            unsigned __int64 m_size;
            unsigned __int64 *m_ptr;
        };
        template<>
        struct  FixedSizeSecBlock<unsigned __int64,16,FixedSizeAllocatorWithCleanup<unsigned __int64,16,NullAllocator<unsigned __int64>,0> > : SecBlock<unsigned __int64,FixedSizeAllocatorWithCleanup<unsigned __int64,16,NullAllocator<unsigned __int64>,0> >
        {
        };
        template<>
        struct  IteratedHash<unsigned __int64,EnumToType<enum ByteOrder,1>,128,HashTransformation> : IteratedHashBase<unsigned __int64,HashTransformation>
        {
            FixedSizeSecBlock<unsigned __int64,16,FixedSizeAllocatorWithCleanup<unsigned __int64,16,NullAllocator<unsigned __int64>,0> > m_data;
        };
        template<>
        struct  AlgorithmImpl<IteratedHash<unsigned __int64,EnumToType<enum ByteOrder,1>,128,HashTransformation>,SHA384> : IteratedHash<unsigned __int64,EnumToType<enum ByteOrder,1>,128,HashTransformation>
        {
        };
        template<>
        struct  ClonableImpl<SHA384,AlgorithmImpl<IteratedHash<unsigned __int64,EnumToType<enum ByteOrder,1>,128,HashTransformation>,SHA384> > : AlgorithmImpl<IteratedHash<unsigned __int64,EnumToType<enum ByteOrder,1>,128,HashTransformation>,SHA384>
        {
        };
        template<>
        struct  IteratedHashWithStaticTransform<unsigned __int64,EnumToType<enum ByteOrder,1>,128,64,SHA384,48> : ClonableImpl<SHA384,AlgorithmImpl<IteratedHash<unsigned __int64,EnumToType<enum ByteOrder,1>,128,HashTransformation>,SHA384> >
        {
            FixedSizeSecBlock<unsigned __int64,16,FixedSizeAllocatorWithCleanup<unsigned __int64,16,NullAllocator<unsigned __int64>,0> > m_state;
        };
        template<>
        struct  SHA384 : IteratedHashWithStaticTransform<unsigned __int64,EnumToType<enum ByteOrder,1>,128,64,SHA384,48>
        {
        public:
            static void InitState(uint64_t* arg_0)
            {
                using org_ptr = void (WINAPIV*)(uint64_t*);
                (org_ptr(0x14060a720L))(arg_0);
            };
        };
        template<>
        struct DL_KeyAgreementAlgorithm<ECPPoint>
        {
            DL_KeyAgreementAlgorithm<ECPPoint>Vtbl *vfptr;
        public:
            DL_KeyAgreementAlgorithm()
            {
                using org_ptr = void (WINAPIV*)(struct DL_KeyAgreementAlgorithm<ECPPoint>*);
                (org_ptr(0x140465f50L))(this);
            };
            void ctor_DL_KeyAgreementAlgorithm()
            {
                using org_ptr = void (WINAPIV*)(struct DL_KeyAgreementAlgorithm<ECPPoint>*);
                (org_ptr(0x140465f50L))(this);
            };
        };
        template<>
        struct DL_KeyAgreementAlgorithm<ECPPoint>Vtbl
        {
            ECPPoint *(WINAPIV *AgreeWithEphemeralPrivateKey)(DL_KeyAgreementAlgorithm<ECPPoint> *_this, ECPPoint *result, DL_GroupParameters<ECPPoint> *, DL_FixedBasePrecomputation<ECPPoint> *, Integer *);
            ECPPoint *(WINAPIV *AgreeWithStaticPrivateKey)(DL_KeyAgreementAlgorithm<ECPPoint> *_this, ECPPoint *result, DL_GroupParameters<ECPPoint> *, ECPPoint *, bool, Integer *);
        };
        template<>
        struct  DL_KeyAgreementAlgorithm_DH<ECPPoint,EnumToType<enum CofactorMultiplicationOption,0> > : DL_KeyAgreementAlgorithm<ECPPoint>
        {
        };
        template<>
        struct  NewObject<DL_KeyAgreementAlgorithm_DH<ECPPoint,EnumToType<enum CofactorMultiplicationOption,0> > >
        {
        };
        template<>
        struct AssignFromHelperClass<DL_PublicKey<EC2NPoint>,DL_PublicKey<EC2NPoint> >
        {
            DL_PublicKey<EC2NPoint> *m_pObject;
            NameValuePairs *m_source;
            bool m_done;
        };
        template<>
        struct  EnumToType<enum ByteOrder,0>
        {
        };
        template<>
        struct  AlgorithmImpl<IteratedHash<unsigned int,EnumToType<enum ByteOrder,1>,64,HashTransformation>,SHA224> : IteratedHash<unsigned int,EnumToType<enum ByteOrder,1>,64,HashTransformation>
        {
        };
        template<>
        struct  ClonableImpl<SHA224,AlgorithmImpl<IteratedHash<unsigned int,EnumToType<enum ByteOrder,1>,64,HashTransformation>,SHA224> > : AlgorithmImpl<IteratedHash<unsigned int,EnumToType<enum ByteOrder,1>,64,HashTransformation>,SHA224>
        {
        };
        template<>
        struct  IteratedHashWithStaticTransform<unsigned int,EnumToType<enum ByteOrder,1>,64,32,SHA224,28> : ClonableImpl<SHA224,AlgorithmImpl<IteratedHash<unsigned int,EnumToType<enum ByteOrder,1>,64,HashTransformation>,SHA224> >
        {
            FixedSizeSecBlock<unsigned int,16,FixedSizeAllocatorWithCleanup<unsigned int,16,NullAllocator<unsigned int>,0> > m_state;
        };
        template<>
        struct  CustomSignalPropagation<Sink> : CustomFlushPropagation<Sink>
        {
        };
        template<>
        struct  OutputProxy : CustomSignalPropagation<Sink>
        {
            BufferedTransformation *m_owner;
            bool m_passSignal;
        public:
            uint8_t* CreatePutSpace(uint64_t* arg_0)
            {
                using org_ptr = uint8_t* (WINAPIV*)(struct OutputProxy*, uint64_t*);
                return (org_ptr(0x1405fed00L))(this, arg_0);
            };
            bool Flush(bool arg_0, int arg_1, bool arg_2)
            {
                using org_ptr = bool (WINAPIV*)(struct OutputProxy*, bool, int, bool);
                return (org_ptr(0x1405feed0L))(this, arg_0, arg_1, arg_2);
            };
            void Initialize(struct NameValuePairs* arg_0, int arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct OutputProxy*, struct NameValuePairs*, int);
                (org_ptr(0x1405fee70L))(this, arg_0, arg_1);
            };
            bool MessageSeriesEnd(int arg_0, bool arg_1)
            {
                using org_ptr = bool (WINAPIV*)(struct OutputProxy*, int, bool);
                return (org_ptr(0x1405fef50L))(this, arg_0, arg_1);
            };
            OutputProxy(struct BufferedTransformation* arg_0, bool arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct OutputProxy*, struct BufferedTransformation*, bool);
                (org_ptr(0x1405fec50L))(this, arg_0, arg_1);
            };
            int64_t ctor_OutputProxy(struct BufferedTransformation* arg_0, bool arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct OutputProxy*, struct BufferedTransformation*, bool);
                return (org_ptr(0x1405fec50L))(this, arg_0, arg_1);
            };
            uint64_t Put2(uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct OutputProxy*, uint8_t*, uint64_t, int, bool);
                return (org_ptr(0x1405fed50L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            uint64_t PutModifiable2(uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct OutputProxy*, uint8_t*, uint64_t, int, bool);
                return (org_ptr(0x1405fede0L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            ~OutputProxy()
            {
                using org_ptr = int64_t (WINAPIV*)(struct OutputProxy*);
                (org_ptr(0x1405ff230L))(this);
            };
            int64_t dtor_OutputProxy()
            {
                using org_ptr = int64_t (WINAPIV*)(struct OutputProxy*);
                return (org_ptr(0x1405ff230L))(this);
            };
        };
        struct  InvalidDataFormat : Exception
        {
        public:
            InvalidDataFormat(struct InvalidDataFormat* __that)
            {
                using org_ptr = void (WINAPIV*)(struct InvalidDataFormat*, struct InvalidDataFormat*);
                (org_ptr(0x14044ae10L))(this, __that);
            };
            void ctor_InvalidDataFormat(struct InvalidDataFormat* __that)
            {
                using org_ptr = void (WINAPIV*)(struct InvalidDataFormat*, struct InvalidDataFormat*);
                (org_ptr(0x14044ae10L))(this, __that);
            };
            InvalidDataFormat(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* s)
            {
                using org_ptr = void (WINAPIV*)(struct InvalidDataFormat*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*);
                (org_ptr(0x14044ab00L))(this, s);
            };
            void ctor_InvalidDataFormat(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* s)
            {
                using org_ptr = void (WINAPIV*)(struct InvalidDataFormat*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*);
                (org_ptr(0x14044ab00L))(this, s);
            };
            ~InvalidDataFormat()
            {
                using org_ptr = void (WINAPIV*)(struct InvalidDataFormat*);
                (org_ptr(0x14044acb0L))(this);
            };
            void dtor_InvalidDataFormat()
            {
                using org_ptr = void (WINAPIV*)(struct InvalidDataFormat*);
                (org_ptr(0x14044acb0L))(this);
            };
        };
        struct  DL_BadElement : InvalidDataFormat
        {
        public:
            DL_BadElement(struct DL_BadElement* __that)
            {
                using org_ptr = void (WINAPIV*)(struct DL_BadElement*, struct DL_BadElement*);
                (org_ptr(0x140454bd0L))(this, __that);
            };
            void ctor_DL_BadElement(struct DL_BadElement* __that)
            {
                using org_ptr = void (WINAPIV*)(struct DL_BadElement*, struct DL_BadElement*);
                (org_ptr(0x140454bd0L))(this, __that);
            };
            DL_BadElement()
            {
                using org_ptr = void (WINAPIV*)(struct DL_BadElement*);
                (org_ptr(0x14044feb0L))(this);
            };
            void ctor_DL_BadElement()
            {
                using org_ptr = void (WINAPIV*)(struct DL_BadElement*);
                (org_ptr(0x14044feb0L))(this);
            };
            ~DL_BadElement()
            {
                using org_ptr = void (WINAPIV*)(struct DL_BadElement*);
                (org_ptr(0x140450040L))(this);
            };
            void dtor_DL_BadElement()
            {
                using org_ptr = void (WINAPIV*)(struct DL_BadElement*);
                (org_ptr(0x140450040L))(this);
            };
        };
        template<>
        struct  TwoBases<SimpleKeyedTransformation<StreamTransformation>,RandomNumberGenerator> : SimpleKeyedTransformation<StreamTransformation>, RandomNumberGenerator
        {
        };
        template<>
        struct  AbstractPolicyHolder<AdditiveCipherAbstractPolicy,TwoBases<SimpleKeyedTransformation<StreamTransformation>,RandomNumberGenerator> > : TwoBases<SimpleKeyedTransformation<StreamTransformation>,RandomNumberGenerator>
        {
        };
        template<>
        struct  AdditiveCipherTemplate<AbstractPolicyHolder<AdditiveCipherAbstractPolicy,TwoBases<SimpleKeyedTransformation<StreamTransformation>,RandomNumberGenerator> > > : AbstractPolicyHolder<AdditiveCipherAbstractPolicy,TwoBases<SimpleKeyedTransformation<StreamTransformation>,RandomNumberGenerator> >
        {
            SecBlock<unsigned char,AllocatorWithCleanup<unsigned char,0> > m_buffer;
            unsigned __int64 m_leftOver;
        };
        struct AdditiveCipherAbstractPolicy
        {
            AdditiveCipherAbstractPolicyVtbl *vfptr;
        public:
            AdditiveCipherAbstractPolicy()
            {
                using org_ptr = int64_t (WINAPIV*)(struct AdditiveCipherAbstractPolicy*);
                (org_ptr(0x14061bc60L))(this);
            };
            int64_t ctor_AdditiveCipherAbstractPolicy()
            {
                using org_ptr = int64_t (WINAPIV*)(struct AdditiveCipherAbstractPolicy*);
                return (org_ptr(0x14061bc60L))(this);
            };
            bool CanOperateKeystream()
            {
                using org_ptr = bool (WINAPIV*)(struct AdditiveCipherAbstractPolicy*);
                return (org_ptr(0x14061ad50L))(this);
            };
            unsigned int GetOptimalBlockSize()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct AdditiveCipherAbstractPolicy*);
                return (org_ptr(0x14061ad30L))(this);
            };
            void OperateKeystream(struct KeystreamOperation arg_0, uint8_t* arg_1, uint8_t* arg_2, uint64_t arg_3)
            {
                using org_ptr = void (WINAPIV*)(struct AdditiveCipherAbstractPolicy*, struct KeystreamOperation, uint8_t*, uint8_t*, uint64_t);
                (org_ptr(0x14061ad60L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            void SeekToIteration(uint64_t arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct AdditiveCipherAbstractPolicy*, uint64_t);
                (org_ptr(0x14061ada0L))(this, arg_0);
            };
            ~AdditiveCipherAbstractPolicy()
            {
                using org_ptr = int64_t (WINAPIV*)(struct AdditiveCipherAbstractPolicy*);
                (org_ptr(0x14061a1d0L))(this);
            };
            int64_t dtor_AdditiveCipherAbstractPolicy()
            {
                using org_ptr = int64_t (WINAPIV*)(struct AdditiveCipherAbstractPolicy*);
                return (org_ptr(0x14061a1d0L))(this);
            };
        };
        struct AdditiveCipherAbstractPolicyVtbl
        {
            void *(WINAPIV *__vecDelDtor)(AdditiveCipherAbstractPolicy *_this, unsigned int);
            __declspec(align(16)) unsigned int (WINAPIV *GetBytesPerIteration)(AdditiveCipherAbstractPolicy *_this);
            unsigned int (WINAPIV *GetOptimalBlockSize)(AdditiveCipherAbstractPolicy *_this);
            unsigned int (WINAPIV *GetIterationsToBuffer)(AdditiveCipherAbstractPolicy *_this);
            void (WINAPIV *WriteKeystream)(AdditiveCipherAbstractPolicy *_this, char *, unsigned __int64);
            bool (WINAPIV *CanOperateKeystream)(AdditiveCipherAbstractPolicy *_this);
            void (WINAPIV *OperateKeystream)(AdditiveCipherAbstractPolicy *_this, KeystreamOperation, char *, const char *, unsigned __int64);
            void (WINAPIV *CipherSetKey)(AdditiveCipherAbstractPolicy *_this, NameValuePairs *, const char *, unsigned __int64);
            void (WINAPIV *CipherResynchronize)(AdditiveCipherAbstractPolicy *_this, char *, const char *);
            bool (WINAPIV *IsRandomAccess)(AdditiveCipherAbstractPolicy *_this);
            void (WINAPIV *SeekToIteration)(AdditiveCipherAbstractPolicy *_this, unsigned __int64);
        };
        template<>
        struct AssignFromHelperClass<DL_PublicKeyImpl<DL_GroupParameters_EC<ECP> >,DL_PublicKey<ECPPoint> >
        {
            DL_PublicKeyImpl<DL_GroupParameters_EC<ECP> > *m_pObject;
            NameValuePairs *m_source;
            bool m_done;
        };
        template<>
        struct  Bufferless<Filter> : Filter
        {
        };
        template<>
        struct  MeterFilter : Bufferless<Filter>
        {
                struct MessageRange
                {
                    unsigned int message;
                    unsigned __int64 position;
                    unsigned __int64 size;
                };
            bool m_transparent;
            unsigned __int64 m_currentMessageBytes;
            unsigned __int64 m_totalBytes;
            unsigned int m_currentSeriesMessages;
            unsigned int m_totalMessages;
            unsigned int m_totalMessageSeries;
            std::deque<MessageRange,std::allocator<MessageRange> > m_rangesToSkip;
            char *m_begin;
            unsigned __int64 m_length;
        public:
            void AddRangeToSkip(unsigned int arg_0, uint64_t arg_1, uint64_t arg_2, bool arg_3)
            {
                using org_ptr = void (WINAPIV*)(struct MeterFilter*, unsigned int, uint64_t, uint64_t, bool);
                (org_ptr(0x1405f9440L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            bool IsolatedMessageSeriesEnd(bool arg_0)
            {
                using org_ptr = bool (WINAPIV*)(struct MeterFilter*, bool);
                return (org_ptr(0x1405f9d80L))(this, arg_0);
            };
            uint64_t Put2(uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct MeterFilter*, uint8_t*, uint64_t, int, bool);
                return (org_ptr(0x1405f9ce0L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            uint64_t PutMaybeModifiable(uint8_t* arg_0, char arg_1, int arg_2, bool arg_3, bool arg_4)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct MeterFilter*, uint8_t*, char, int, bool, bool);
                return (org_ptr(0x1405f9560L))(this, arg_0, arg_1, arg_2, arg_3, arg_4);
            };
            uint64_t PutModifiable2(uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct MeterFilter*, uint8_t*, uint64_t, int, bool);
                return (org_ptr(0x1405f9d30L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            void ResetMeter()
            {
                using org_ptr = void (WINAPIV*)(struct MeterFilter*);
                (org_ptr(0x1405f93d0L))(this);
            };
        };
        template<>
        struct  DL_CryptoSchemeOptions<ECIES<ECP,EnumToType<enum CofactorMultiplicationOption,0>,0>,DL_Keys_EC<ECP>,DL_KeyAgreementAlgorithm_DH<ECPPoint,EnumToType<enum CofactorMultiplicationOption,0> >,DL_KeyDerivationAlgorithm_P1363<ECPPoint,0,P1363_KDF2<SHA1> >,DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0> > : DL_KeyedSchemeOptions<ECIES<ECP,EnumToType<enum CofactorMultiplicationOption,0>,0>,DL_Keys_EC<ECP> >
        {
        };
        template<>
        struct  RandomNumberSink : Bufferless<Sink>
        {
            RandomNumberGenerator *m_rng;
        public:
            void IsolatedInitialize(struct NameValuePairs* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct RandomNumberSink*, struct NameValuePairs*);
                (org_ptr(0x1405fb5f0L))(this, arg_0);
            };
            uint64_t Put2(uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct RandomNumberSink*, uint8_t*, uint64_t, int, bool);
                return (org_ptr(0x1405fb630L))(this, arg_0, arg_1, arg_2, arg_3);
            };
        };
        template<>
        struct  CipherModeFinalTemplate_ExternalCipher<CBC_Encryption> : CBC_Encryption
        {
        };
        struct  FilterWithBufferedInput : Filter
        {
                struct BlockQueue
                {
                    SecBlock<unsigned char,AllocatorWithCleanup<unsigned char,0> > m_buffer;
                    unsigned __int64 m_blockSize;
                    unsigned __int64 m_maxBlocks;
                    unsigned __int64 m_size;
                    char *m_begin;
                public:
                    BlockQueue()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct BlockQueue*);
                        (org_ptr(0x1405feb40L))(this);
                    };
                    int64_t ctor_BlockQueue()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct BlockQueue*);
                        return (org_ptr(0x1405feb40L))(this);
                    };
                    uint64_t CurrentSize()
                    {
                        using org_ptr = uint64_t (WINAPIV*)(struct BlockQueue*);
                        return (org_ptr(0x1405fec10L))(this);
                    };
                    uint64_t GetAll(uint8_t* arg_0)
                    {
                        using org_ptr = uint64_t (WINAPIV*)(struct BlockQueue*, uint8_t*);
                        return (org_ptr(0x1405f9fd0L))(this, arg_0);
                    };
                    uint8_t* GetBlock()
                    {
                        using org_ptr = uint8_t* (WINAPIV*)(struct BlockQueue*);
                        return (org_ptr(0x1405f9e40L))(this);
                    };
                    uint8_t* GetContigousBlocks(uint64_t* arg_0)
                    {
                        using org_ptr = uint8_t* (WINAPIV*)(struct BlockQueue*, uint64_t*);
                        return (org_ptr(0x1405f9ef0L))(this, arg_0);
                    };
                    void Put(uint8_t* arg_0, uint64_t arg_1)
                    {
                        using org_ptr = void (WINAPIV*)(struct BlockQueue*, uint8_t*, uint64_t);
                        (org_ptr(0x1405fa080L))(this, arg_0, arg_1);
                    };
                    void ResetQueue(uint64_t arg_0, uint64_t arg_1)
                    {
                        using org_ptr = void (WINAPIV*)(struct BlockQueue*, uint64_t, uint64_t);
                        (org_ptr(0x1405f9dc0L))(this, arg_0, arg_1);
                    };
                    ~BlockQueue()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct BlockQueue*);
                        (org_ptr(0x1405feb20L))(this);
                    };
                    int64_t dtor_BlockQueue()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct BlockQueue*);
                        return (org_ptr(0x1405feb20L))(this);
                    };
                };
            unsigned __int64 m_firstSize;
            unsigned __int64 m_blockSize;
            unsigned __int64 m_lastSize;
            bool m_firstInputDone;
            BlockQueue m_queue;
        public:
            FilterWithBufferedInput(struct BufferedTransformation* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct FilterWithBufferedInput*, struct BufferedTransformation*);
                (org_ptr(0x1405fa240L))(this, arg_0);
            };
            int64_t ctor_FilterWithBufferedInput(struct BufferedTransformation* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct FilterWithBufferedInput*, struct BufferedTransformation*);
                return (org_ptr(0x1405fa240L))(this, arg_0);
            };
            FilterWithBufferedInput(uint64_t arg_0, uint64_t arg_1, uint64_t arg_2, struct BufferedTransformation* arg_3)
            {
                using org_ptr = int64_t (WINAPIV*)(struct FilterWithBufferedInput*, uint64_t, uint64_t, uint64_t, struct BufferedTransformation*);
                (org_ptr(0x1405fa2d0L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            int64_t ctor_FilterWithBufferedInput(uint64_t arg_0, uint64_t arg_1, uint64_t arg_2, struct BufferedTransformation* arg_3)
            {
                using org_ptr = int64_t (WINAPIV*)(struct FilterWithBufferedInput*, uint64_t, uint64_t, uint64_t, struct BufferedTransformation*);
                return (org_ptr(0x1405fa2d0L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            void FlushDerived()
            {
                using org_ptr = void (WINAPIV*)(struct FilterWithBufferedInput*);
                (org_ptr(0x1405fea30L))(this);
            };
            void ForceNextPut()
            {
                using org_ptr = void (WINAPIV*)(struct FilterWithBufferedInput*);
                (org_ptr(0x1405faf70L))(this);
            };
            void InitializeDerived(struct NameValuePairs* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct FilterWithBufferedInput*, struct NameValuePairs*);
                (org_ptr(0x1405fe9a0L))(this, arg_0);
            };
            void InitializeDerivedAndReturnNewSizes(struct NameValuePairs* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t* arg_3)
            {
                using org_ptr = void (WINAPIV*)(struct FilterWithBufferedInput*, struct NameValuePairs*, uint64_t*, uint64_t*, uint64_t*);
                (org_ptr(0x1405fe960L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            bool IsolatedFlush(bool arg_0, bool arg_1)
            {
                using org_ptr = bool (WINAPIV*)(struct FilterWithBufferedInput*, bool, bool);
                return (org_ptr(0x1405fa640L))(this, arg_0, arg_1);
            };
            void IsolatedInitialize(struct NameValuePairs* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct FilterWithBufferedInput*, struct NameValuePairs*);
                (org_ptr(0x1405fa4c0L))(this, arg_0);
            };
            int64_t NextPut(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct FilterWithBufferedInput*, uint8_t*, uint64_t);
                return (org_ptr(0x1405fea40L))(this, arg_0, arg_1);
            };
            void NextPutMaybeModifiable(uint8_t* arg_0, uint64_t arg_1, bool arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct FilterWithBufferedInput*, uint8_t*, uint64_t, bool);
                (org_ptr(0x1405feba0L))(this, arg_0, arg_1, arg_2);
            };
            void NextPutModifiable(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct FilterWithBufferedInput*, uint8_t*, uint64_t);
                (org_ptr(0x1405fe9f0L))(this, arg_0, arg_1);
            };
            void NextPutMultiple(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct FilterWithBufferedInput*, uint8_t*, uint64_t);
                (org_ptr(0x1405fb060L))(this, arg_0, arg_1);
            };
            void NextPutSingle(uint8_t* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct FilterWithBufferedInput*, uint8_t*);
                (org_ptr(0x1405fe9b0L))(this, arg_0);
            };
            uint64_t Put2(uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct FilterWithBufferedInput*, uint8_t*, uint64_t, int, bool);
                return (org_ptr(0x1405fe8c0L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            uint64_t PutMaybeModifiable(uint8_t* arg_0, char arg_1, int arg_2, bool arg_3, bool arg_4)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct FilterWithBufferedInput*, uint8_t*, char, int, bool, bool);
                return (org_ptr(0x1405fa730L))(this, arg_0, arg_1, arg_2, arg_3, arg_4);
            };
            uint64_t PutModifiable2(uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct FilterWithBufferedInput*, uint8_t*, uint64_t, int, bool);
                return (org_ptr(0x1405fe910L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            ~FilterWithBufferedInput()
            {
                using org_ptr = int64_t (WINAPIV*)(struct FilterWithBufferedInput*);
                (org_ptr(0x1405feac0L))(this);
            };
            int64_t dtor_FilterWithBufferedInput()
            {
                using org_ptr = int64_t (WINAPIV*)(struct FilterWithBufferedInput*);
                return (org_ptr(0x1405feac0L))(this);
            };
        };
        struct  ProxyFilter : FilterWithBufferedInput
        {
            member_ptr<BufferedTransformation> m_filter;
        public:
            bool IsolatedFlush(bool arg_0, bool arg_1)
            {
                using org_ptr = bool (WINAPIV*)(struct ProxyFilter*, bool, bool);
                return (org_ptr(0x1405fb350L))(this, arg_0, arg_1);
            };
            void NextPutModifiable(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct ProxyFilter*, uint8_t*, uint64_t);
                (org_ptr(0x1405fb590L))(this, arg_0, arg_1);
            };
            void NextPutMultiple(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct ProxyFilter*, uint8_t*, uint64_t);
                (org_ptr(0x1405fb530L))(this, arg_0, arg_1);
            };
            ProxyFilter(struct BufferedTransformation* arg_0, uint64_t arg_1, uint64_t arg_2, struct BufferedTransformation* arg_3)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ProxyFilter*, struct BufferedTransformation*, uint64_t, uint64_t, struct BufferedTransformation*);
                (org_ptr(0x1405fb1d0L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            int64_t ctor_ProxyFilter(struct BufferedTransformation* arg_0, uint64_t arg_1, uint64_t arg_2, struct BufferedTransformation* arg_3)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ProxyFilter*, struct BufferedTransformation*, uint64_t, uint64_t, struct BufferedTransformation*);
                return (org_ptr(0x1405fb1d0L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            void SetFilter(Filter* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct ProxyFilter*, Filter*);
                (org_ptr(0x1405fb3d0L))(this, arg_0);
            };
            ~ProxyFilter()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ProxyFilter*);
                (org_ptr(0x1405ff2d0L))(this);
            };
            int64_t dtor_ProxyFilter()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ProxyFilter*);
                return (org_ptr(0x1405ff2d0L))(this);
            };
        };
        template<>
        struct  AlgorithmImpl<IteratedHash<unsigned int,EnumToType<enum ByteOrder,1>,64,HashTransformation>,SHA1> : IteratedHash<unsigned int,EnumToType<enum ByteOrder,1>,64,HashTransformation>
        {
        };
        template<>
        struct  ClonableImpl<SHA1,AlgorithmImpl<IteratedHash<unsigned int,EnumToType<enum ByteOrder,1>,64,HashTransformation>,SHA1> > : AlgorithmImpl<IteratedHash<unsigned int,EnumToType<enum ByteOrder,1>,64,HashTransformation>,SHA1>
        {
        };
        template<>
        struct  IteratedHashWithStaticTransform<unsigned int,EnumToType<enum ByteOrder,1>,64,20,SHA1,0> : ClonableImpl<SHA1,AlgorithmImpl<IteratedHash<unsigned int,EnumToType<enum ByteOrder,1>,64,HashTransformation>,SHA1> >
        {
            FixedSizeSecBlock<unsigned int,16,FixedSizeAllocatorWithCleanup<unsigned int,16,NullAllocator<unsigned int>,0> > m_state;
        };
        struct CFB_CipherAbstractPolicy
        {
            CFB_CipherAbstractPolicyVtbl *vfptr;
        public:
            CFB_CipherAbstractPolicy()
            {
                using org_ptr = int64_t (WINAPIV*)(struct CFB_CipherAbstractPolicy*);
                (org_ptr(0x14061bc70L))(this);
            };
            int64_t ctor_CFB_CipherAbstractPolicy()
            {
                using org_ptr = int64_t (WINAPIV*)(struct CFB_CipherAbstractPolicy*);
                return (org_ptr(0x14061bc70L))(this);
            };
            bool CanIterate()
            {
                using org_ptr = bool (WINAPIV*)(struct CFB_CipherAbstractPolicy*);
                return (org_ptr(0x14061a5d0L))(this);
            };
            void Iterate(uint8_t* arg_0, uint8_t* arg_1, struct CipherDir arg_2, uint64_t arg_3)
            {
                using org_ptr = void (WINAPIV*)(struct CFB_CipherAbstractPolicy*, uint8_t*, uint8_t*, struct CipherDir, uint64_t);
                (org_ptr(0x14061a5e0L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            ~CFB_CipherAbstractPolicy()
            {
                using org_ptr = int64_t (WINAPIV*)(struct CFB_CipherAbstractPolicy*);
                (org_ptr(0x14061a270L))(this);
            };
            int64_t dtor_CFB_CipherAbstractPolicy()
            {
                using org_ptr = int64_t (WINAPIV*)(struct CFB_CipherAbstractPolicy*);
                return (org_ptr(0x14061a270L))(this);
            };
        };
        struct CFB_CipherAbstractPolicyVtbl
        {
            void *(WINAPIV *__vecDelDtor)(CFB_CipherAbstractPolicy *_this, unsigned int);
            BYTE gap8[8];
            unsigned int (WINAPIV *GetBytesPerIteration)(CFB_CipherAbstractPolicy *_this);
            char *(WINAPIV *GetRegisterBegin)(CFB_CipherAbstractPolicy *_this);
            void (WINAPIV *TransformRegister)(CFB_CipherAbstractPolicy *_this);
            bool (WINAPIV *CanIterate)(CFB_CipherAbstractPolicy *_this);
            void (WINAPIV *Iterate)(CFB_CipherAbstractPolicy *_this, char *, const char *, CipherDir, unsigned __int64);
            void (WINAPIV *CipherSetKey)(CFB_CipherAbstractPolicy *_this, NameValuePairs *, const char *, unsigned __int64);
            void (WINAPIV *CipherResynchronize)(CFB_CipherAbstractPolicy *_this, const char *);
        };
        template<>
        struct  ModePolicyCommonTemplate<CFB_CipherAbstractPolicy> : CipherModeBase, CFB_CipherAbstractPolicy
        {
        };
        template<>
        struct  CFB_ModePolicy : ModePolicyCommonTemplate<CFB_CipherAbstractPolicy>
        {
            SecBlock<unsigned char,AllocatorWithCleanup<unsigned char,0> > m_temp;
            unsigned int m_feedbackSize;
        public:
            CFB_ModePolicy()
            {
                using org_ptr = int64_t (WINAPIV*)(struct CFB_ModePolicy*);
                (org_ptr(0x14061bba0L))(this);
            };
            int64_t ctor_CFB_ModePolicy()
            {
                using org_ptr = int64_t (WINAPIV*)(struct CFB_ModePolicy*);
                return (org_ptr(0x14061bba0L))(this);
            };
            void CipherResynchronize(uint8_t* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct CFB_ModePolicy*, uint8_t*);
                (org_ptr(0x14061a810L))(this, arg_0);
            };
            unsigned int GetBytesPerIteration()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct CFB_ModePolicy*);
                return (org_ptr(0x14061a630L))(this);
            };
            uint8_t* GetRegisterBegin()
            {
                using org_ptr = uint8_t* (WINAPIV*)(struct CFB_ModePolicy*);
                return (org_ptr(0x14061a640L))(this);
            };
            struct SimpleKeyingInterface::IV_Requirement IVRequirement()
            {
                using org_ptr = struct SimpleKeyingInterface::IV_Requirement (WINAPIV*)(struct CFB_ModePolicy*);
                return (org_ptr(0x14061a620L))(this);
            };
            void ResizeBuffers()
            {
                using org_ptr = void (WINAPIV*)(struct CFB_ModePolicy*);
                (org_ptr(0x14061a9a0L))(this);
            };
            void SetFeedbackSize(unsigned int arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct CFB_ModePolicy*, unsigned int);
                (org_ptr(0x14061a8a0L))(this, arg_0);
            };
            static char* StaticAlgorithmName()
            {
                using org_ptr = char* (WINAPIV*)();
                return (org_ptr(0x14061bea0L))();
            };
            void TransformRegister()
            {
                using org_ptr = void (WINAPIV*)(struct CFB_ModePolicy*);
                (org_ptr(0x14061a690L))(this);
            };
            ~CFB_ModePolicy()
            {
                using org_ptr = int64_t (WINAPIV*)(struct CFB_ModePolicy*);
                (org_ptr(0x14061a100L))(this);
            };
            int64_t dtor_CFB_ModePolicy()
            {
                using org_ptr = int64_t (WINAPIV*)(struct CFB_ModePolicy*);
                return (org_ptr(0x14061a100L))(this);
            };
        };
        template<>
        struct  AbstractPolicyHolder<CFB_CipherAbstractPolicy,CFB_ModePolicy> : CFB_ModePolicy
        {
        };
        template<>
        struct  CFB_CipherTemplate<AbstractPolicyHolder<CFB_CipherAbstractPolicy,CFB_ModePolicy> > : AbstractPolicyHolder<CFB_CipherAbstractPolicy,CFB_ModePolicy>
        {
            unsigned __int64 m_leftOver;
        };
        template<>
        struct  CFB_EncryptionTemplate<AbstractPolicyHolder<CFB_CipherAbstractPolicy,CFB_ModePolicy> > : CFB_CipherTemplate<AbstractPolicyHolder<CFB_CipherAbstractPolicy,CFB_ModePolicy> >
        {
        };
        template<>
        struct GetValueHelperClass<DL_PublicKeyImpl<DL_GroupParameters_DSA>,DL_PublicKey<Integer> >
        {
            DL_PublicKeyImpl<DL_GroupParameters_DSA> *m_pObject;
            const char *m_name;
            type_info *m_valueType;
            void *m_pValue;
            bool m_found;
            bool m_getValueNames;
        };
        struct PK_SignatureMessageEncodingMethod
        {
                struct  HashIdentifierLookup
                {
                            template<>
                            struct  HashIdentifierLookup2<SHA1>
                            {
                            };
                };
            PK_SignatureMessageEncodingMethodVtbl *vfptr;
        public:
            bool AllowNonrecoverablePart()
            {
                using org_ptr = bool (WINAPIV*)(struct PK_SignatureMessageEncodingMethod*);
                return (org_ptr(0x140562c80L))(this);
            };
            uint64_t MaxRecoverableLength(uint64_t arg_0, uint64_t arg_1, uint64_t arg_2)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct PK_SignatureMessageEncodingMethod*, uint64_t, uint64_t, uint64_t);
                return (org_ptr(0x14058f830L))(this, arg_0, arg_1, arg_2);
            };
            uint64_t MinRepresentativeBitLength(uint64_t arg_0, uint64_t arg_1)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct PK_SignatureMessageEncodingMethod*, uint64_t, uint64_t);
                return (org_ptr(0x14058f810L))(this, arg_0, arg_1);
            };
            PK_SignatureMessageEncodingMethod()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_SignatureMessageEncodingMethod*);
                (org_ptr(0x14058ff00L))(this);
            };
            int64_t ctor_PK_SignatureMessageEncodingMethod()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_SignatureMessageEncodingMethod*);
                return (org_ptr(0x14058ff00L))(this);
            };
            void ProcessSemisignature(struct HashTransformation* arg_0, uint8_t* arg_1, uint64_t arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct PK_SignatureMessageEncodingMethod*, struct HashTransformation*, uint8_t*, uint64_t);
                (org_ptr(0x14058f8f0L))(this, arg_0, arg_1, arg_2);
            };
            bool RecoverablePartFirst()
            {
                using org_ptr = bool (WINAPIV*)(struct PK_SignatureMessageEncodingMethod*);
                return (org_ptr(0x14058f850L))(this);
            };
            ~PK_SignatureMessageEncodingMethod()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_SignatureMessageEncodingMethod*);
                (org_ptr(0x14058fef0L))(this);
            };
            int64_t dtor_PK_SignatureMessageEncodingMethod()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_SignatureMessageEncodingMethod*);
                return (org_ptr(0x14058fef0L))(this);
            };
        };
        struct DecodingResult
        {
            bool isValidCoding;
            unsigned __int64 messageLength;
        public:
            DecodingResult(uint64_t len)
            {
                using org_ptr = void (WINAPIV*)(struct DecodingResult*, uint64_t);
                (org_ptr(0x140464e80L))(this, len);
            };
            void ctor_DecodingResult(uint64_t len)
            {
                using org_ptr = void (WINAPIV*)(struct DecodingResult*, uint64_t);
                (org_ptr(0x140464e80L))(this, len);
            };
            DecodingResult()
            {
                using org_ptr = void (WINAPIV*)(struct DecodingResult*);
                (org_ptr(0x140456450L))(this);
            };
            void ctor_DecodingResult()
            {
                using org_ptr = void (WINAPIV*)(struct DecodingResult*);
                (org_ptr(0x140456450L))(this);
            };
        };
        struct PK_SignatureMessageEncodingMethodVtbl
        {
            void *(WINAPIV *__vecDelDtor)(PK_SignatureMessageEncodingMethod *_this, unsigned int);
            __declspec(align(16)) unsigned __int64 (WINAPIV *MaxRecoverableLength)(PK_SignatureMessageEncodingMethod *_this, unsigned __int64, unsigned __int64, unsigned __int64);
            bool (WINAPIV *RecoverablePartFirst)(PK_SignatureMessageEncodingMethod *_this);
            void (WINAPIV *ProcessSemisignature)(PK_SignatureMessageEncodingMethod *_this, HashTransformation *, const char *, unsigned __int64);
            void (WINAPIV *ProcessRecoverableMessage)(PK_SignatureMessageEncodingMethod *_this, HashTransformation *, const char *, unsigned __int64, const char *, unsigned __int64, SecBlock<unsigned char,AllocatorWithCleanup<unsigned char,0> > *);
            void (WINAPIV *ComputeMessageRepresentative)(PK_SignatureMessageEncodingMethod *_this, RandomNumberGenerator *, const char *, unsigned __int64, HashTransformation *, std::pair<unsigned char const *,unsigned __int64>, bool, char *, unsigned __int64);
            bool (WINAPIV *VerifyMessageRepresentative)(PK_SignatureMessageEncodingMethod *_this, HashTransformation *, std::pair<unsigned char const *,unsigned __int64>, bool, char *, unsigned __int64);
            DecodingResult *(WINAPIV *RecoverMessageFromRepresentative)(PK_SignatureMessageEncodingMethod *_this, DecodingResult *result, HashTransformation *, std::pair<unsigned char const *,unsigned __int64>, bool, char *, unsigned __int64, char *);
            DecodingResult *(WINAPIV *RecoverMessageFromSemisignature)(PK_SignatureMessageEncodingMethod *_this, DecodingResult *result, HashTransformation *, std::pair<unsigned char const *,unsigned __int64>, const char *, unsigned __int64, const char *, unsigned __int64, char *);
        };
        struct  PK_RecoverableSignatureMessageEncodingMethod : PK_SignatureMessageEncodingMethod
        {
        };
        struct TrapdoorFunctionBounds
        {
            TrapdoorFunctionBoundsVtbl *vfptr;
        };
        struct TrapdoorFunctionBoundsVtbl
        {
            void *(WINAPIV *__vecDelDtor)(TrapdoorFunctionBounds *_this, unsigned int);
            Integer *(WINAPIV *PreimageBound)(TrapdoorFunctionBounds *_this, Integer *result);
            Integer *(WINAPIV *ImageBound)(TrapdoorFunctionBounds *_this, Integer *result);
            Integer *(WINAPIV *MaxPreimage)(TrapdoorFunctionBounds *_this, Integer *result);
            Integer *(WINAPIV *MaxImage)(TrapdoorFunctionBounds *_this, Integer *result);
        };
        template<>
        struct TF_Base<TrapdoorFunctionInverse,PK_EncryptionMessageEncodingMethod>
        {
            TF_Base<TrapdoorFunctionInverse,PK_EncryptionMessageEncodingMethod>Vtbl *vfptr;
        };
        struct RandomizedTrapdoorFunctionInverse
        {
            RandomizedTrapdoorFunctionInverseVtbl *vfptr;
        };
        struct RandomizedTrapdoorFunctionInverseVtbl
        {
            void *(WINAPIV *__vecDelDtor)(RandomizedTrapdoorFunctionInverse *_this, unsigned int);
            Integer *(WINAPIV *CalculateRandomizedInverse)(RandomizedTrapdoorFunctionInverse *_this, Integer *result, RandomNumberGenerator *, Integer *);
            bool (WINAPIV *IsRandomized)(RandomizedTrapdoorFunctionInverse *_this);
        };
        const struct  TrapdoorFunctionInverse : RandomizedTrapdoorFunctionInverse
        {
        };
        const struct PK_EncryptionMessageEncodingMethod
        {
            PK_EncryptionMessageEncodingMethodVtbl *vfptr;
        };
        struct PK_EncryptionMessageEncodingMethodVtbl
        {
            void *(WINAPIV *__vecDelDtor)(PK_EncryptionMessageEncodingMethod *_this, unsigned int);
            bool (WINAPIV *ParameterSupported)(PK_EncryptionMessageEncodingMethod *_this, const char *);
            unsigned __int64 (WINAPIV *MaxUnpaddedLength)(PK_EncryptionMessageEncodingMethod *_this, unsigned __int64);
            void (WINAPIV *Pad)(PK_EncryptionMessageEncodingMethod *_this, RandomNumberGenerator *, const char *, unsigned __int64, char *, unsigned __int64, NameValuePairs *);
            DecodingResult *(WINAPIV *Unpad)(PK_EncryptionMessageEncodingMethod *_this, DecodingResult *result, const char *, unsigned __int64, char *, NameValuePairs *);
        };
        template<>
        struct TF_Base<TrapdoorFunctionInverse,PK_EncryptionMessageEncodingMethod>Vtbl
        {
            TrapdoorFunctionBounds *(WINAPIV *GetTrapdoorFunctionBounds)(TF_Base<TrapdoorFunctionInverse,PK_EncryptionMessageEncodingMethod> *_this);
            TrapdoorFunctionInverse *(WINAPIV *GetTrapdoorFunctionInterface)(TF_Base<TrapdoorFunctionInverse,PK_EncryptionMessageEncodingMethod> *_this);
            PK_EncryptionMessageEncodingMethod *(WINAPIV *GetMessageEncodingInterface)(TF_Base<TrapdoorFunctionInverse,PK_EncryptionMessageEncodingMethod> *_this);
        };
        template<>
        struct  PK_FixedLengthCryptoSystemImpl<PK_Decryptor> : PK_Decryptor
        {
        };
        template<>
        struct  TF_CryptoSystemBase<PK_Decryptor,TF_Base<TrapdoorFunctionInverse,PK_EncryptionMessageEncodingMethod> > : PK_FixedLengthCryptoSystemImpl<PK_Decryptor>, TF_Base<TrapdoorFunctionInverse,PK_EncryptionMessageEncodingMethod>
        {
        };
        template<>
        struct  DL_KeyImpl<X509PublicKey,DL_GroupParameters_EC<EC2N>,OID> : X509PublicKey
        {
            BYTE m_groupParameters[440];
            BYTE gap1D0[8];
        };
        template<>
        struct  DL_PublicKeyImpl<DL_GroupParameters_EC<EC2N> > : DL_PublicKey<EC2NPoint>, DL_KeyImpl<X509PublicKey,DL_GroupParameters_EC<EC2N>,OID>
        {
            BYTE m_ypc[144];
            BYTE gap270[8];
        };
        template<>
        struct  DL_PublicKey_EC<EC2N> : DL_PublicKeyImpl<DL_GroupParameters_EC<EC2N> >
        {
        };
        template<>
        struct DL_Base<DL_PublicKey<EC2NPoint> >
        {
            DL_Base<DL_PublicKey<EC2NPoint> >Vtbl *vfptr;
        };
        template<>
        struct DL_Base<DL_PublicKey<EC2NPoint> >Vtbl
        {
            DL_PublicKey<EC2NPoint> *(WINAPIV *AccessKeyInterface)(DL_Base<DL_PublicKey<EC2NPoint> > *_this);
            DL_PublicKey<EC2NPoint> *(WINAPIV *GetKeyInterface)(DL_Base<DL_PublicKey<EC2NPoint> > *_this);
        };
        template<>
        struct  DL_SignatureSchemeBase<PK_Verifier,DL_PublicKey<EC2NPoint> > : PK_Verifier, DL_Base<DL_PublicKey<EC2NPoint> >
        {
        };
        template<>
        struct  DL_VerifierBase<EC2NPoint> : DL_SignatureSchemeBase<PK_Verifier,DL_PublicKey<EC2NPoint> >
        {
        };
        struct  SimpleProxyFilter : ProxyFilter
        {
        };
        struct  PK_DecryptorFilter : SimpleProxyFilter
        {
        };
        template<>
        struct  CompileAssert<1>
        {
        };
        struct LazyPutter
        {
            ByteQueue *m_bq;
        public:
            LazyPutter(struct ByteQueue* arg_0, uint8_t* arg_1, uint64_t arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct LazyPutter*, struct ByteQueue*, uint8_t*, uint64_t);
                (org_ptr(0x14054e380L))(this, arg_0, arg_1, arg_2);
            };
            int64_t ctor_LazyPutter(struct ByteQueue* arg_0, uint8_t* arg_1, uint64_t arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct LazyPutter*, struct ByteQueue*, uint8_t*, uint64_t);
                return (org_ptr(0x14054e380L))(this, arg_0, arg_1, arg_2);
            };
            ~LazyPutter()
            {
                using org_ptr = int64_t (WINAPIV*)(struct LazyPutter*);
                (org_ptr(0x14054e3d0L))(this);
            };
            int64_t dtor_LazyPutter()
            {
                using org_ptr = int64_t (WINAPIV*)(struct LazyPutter*);
                return (org_ptr(0x14054e3d0L))(this);
            };
        };
        struct  LazyPutterModifiable : LazyPutter
        {
        };
        struct  PK_EncryptorFilter : SimpleProxyFilter
        {
        };
        template<>
        struct GetValueHelperClass<DL_PrivateKey<Integer>,DL_PrivateKey<Integer> >
        {
            DL_PrivateKey<Integer> *m_pObject;
            const char *m_name;
            type_info *m_valueType;
            void *m_pValue;
            bool m_found;
            bool m_getValueNames;
        };
        struct  AlgorithmParametersBase : NameValuePairs
        {
                struct  ParameterNotUsed : Exception
                {
                public:
                    ParameterNotUsed(struct ParameterNotUsed* __that)
                    {
                        using org_ptr = void (WINAPIV*)(struct ParameterNotUsed*, struct ParameterNotUsed*);
                        (org_ptr(0x14044d660L))(this, __that);
                    };
                    void ctor_ParameterNotUsed(struct ParameterNotUsed* __that)
                    {
                        using org_ptr = void (WINAPIV*)(struct ParameterNotUsed*, struct ParameterNotUsed*);
                        (org_ptr(0x14044d660L))(this, __that);
                    };
                    ParameterNotUsed(char* name)
                    {
                        using org_ptr = void (WINAPIV*)(struct ParameterNotUsed*, char*);
                        (org_ptr(0x14044d2b0L))(this, name);
                    };
                    void ctor_ParameterNotUsed(char* name)
                    {
                        using org_ptr = void (WINAPIV*)(struct ParameterNotUsed*, char*);
                        (org_ptr(0x14044d2b0L))(this, name);
                    };
                    ~ParameterNotUsed()
                    {
                        using org_ptr = void (WINAPIV*)(struct ParameterNotUsed*);
                        (org_ptr(0x14044d620L))(this);
                    };
                    void dtor_ParameterNotUsed()
                    {
                        using org_ptr = void (WINAPIV*)(struct ParameterNotUsed*);
                        (org_ptr(0x14044d620L))(this);
                    };
                };
            const char *m_name;
            bool m_throwIfNotUsed;
            bool m_used;
        public:
            AlgorithmParametersBase(struct AlgorithmParametersBase* __that)
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParametersBase*, struct AlgorithmParametersBase*);
                (org_ptr(0x140466680L))(this, __that);
            };
            void ctor_AlgorithmParametersBase(struct AlgorithmParametersBase* __that)
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParametersBase*, struct AlgorithmParametersBase*);
                (org_ptr(0x140466680L))(this, __that);
            };
            AlgorithmParametersBase(char* name, bool throwIfNotUsed)
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParametersBase*, char*, bool);
                (org_ptr(0x1404663f0L))(this, name, throwIfNotUsed);
            };
            void ctor_AlgorithmParametersBase(char* name, bool throwIfNotUsed)
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParametersBase*, char*, bool);
                (org_ptr(0x1404663f0L))(this, name, throwIfNotUsed);
            };
            bool GetVoidValue(char* arg_0, struct type_info* arg_1, void* arg_2)
            {
                using org_ptr = bool (WINAPIV*)(struct AlgorithmParametersBase*, char*, struct type_info*, void*);
                return (org_ptr(0x140606280L))(this, arg_0, arg_1, arg_2);
            };
            ~AlgorithmParametersBase()
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParametersBase*);
                (org_ptr(0x14044d1a0L))(this);
            };
            void dtor_AlgorithmParametersBase()
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParametersBase*);
                (org_ptr(0x14044d1a0L))(this);
            };
        };
        template<>
        struct  AlgorithmParametersBase2<int> : AlgorithmParametersBase
        {
            int m_value;
        };
        struct  NullNameValuePairs : NameValuePairs
        {
        public:
            bool GetVoidValue(char* name, struct type_info* valueType, void* pValue)
            {
                using org_ptr = bool (WINAPIV*)(struct NullNameValuePairs*, char*, struct type_info*, void*);
                return (org_ptr(0x140460f30L))(this, name, valueType, pValue);
            };
            NullNameValuePairs(struct NullNameValuePairs* __that)
            {
                using org_ptr = void (WINAPIV*)(struct NullNameValuePairs*, struct NullNameValuePairs*);
                (org_ptr(0x140460ec0L))(this, __that);
            };
            void ctor_NullNameValuePairs(struct NullNameValuePairs* __that)
            {
                using org_ptr = void (WINAPIV*)(struct NullNameValuePairs*, struct NullNameValuePairs*);
                (org_ptr(0x140460ec0L))(this, __that);
            };
            NullNameValuePairs()
            {
                using org_ptr = int64_t (WINAPIV*)(struct NullNameValuePairs*);
                (org_ptr(0x1405f8b80L))(this);
            };
            int64_t ctor_NullNameValuePairs()
            {
                using org_ptr = int64_t (WINAPIV*)(struct NullNameValuePairs*);
                return (org_ptr(0x1405f8b80L))(this);
            };
            ~NullNameValuePairs()
            {
                using org_ptr = void (WINAPIV*)(struct NullNameValuePairs*);
                (org_ptr(0x14044d120L))(this);
            };
            void dtor_NullNameValuePairs()
            {
                using org_ptr = void (WINAPIV*)(struct NullNameValuePairs*);
                (org_ptr(0x14044d120L))(this);
            };
        };
        template<>
        struct  ModePolicyCommonTemplate<AdditiveCipherAbstractPolicy> : CipherModeBase, AdditiveCipherAbstractPolicy
        {
        };
        template<>
        struct  CTR_ModePolicy : ModePolicyCommonTemplate<AdditiveCipherAbstractPolicy>
        {
            SecBlock<unsigned char,AllocatorWithCleanup<unsigned char,0> > m_counterArray;
        public:
            CTR_ModePolicy()
            {
                using org_ptr = int64_t (WINAPIV*)(struct CTR_ModePolicy*);
                (org_ptr(0x14061bb40L))(this);
            };
            int64_t ctor_CTR_ModePolicy()
            {
                using org_ptr = int64_t (WINAPIV*)(struct CTR_ModePolicy*);
                return (org_ptr(0x14061bb40L))(this);
            };
            bool CanOperateKeystream()
            {
                using org_ptr = bool (WINAPIV*)(struct CTR_ModePolicy*);
                return (org_ptr(0x14061b230L))(this);
            };
            void CipherResynchronize(uint8_t* arg_0, uint8_t* arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct CTR_ModePolicy*, uint8_t*, uint8_t*);
                (org_ptr(0x140618de0L))(this, arg_0, arg_1);
            };
            unsigned int GetAlignment()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct CTR_ModePolicy*);
                return (org_ptr(0x14061b160L))(this);
            };
            unsigned int GetBytesPerIteration()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct CTR_ModePolicy*);
                return (org_ptr(0x14061b190L))(this);
            };
            unsigned int GetIterationsToBuffer()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct CTR_ModePolicy*);
                return (org_ptr(0x14061b1b0L))(this);
            };
            struct SimpleKeyingInterface::IV_Requirement IVRequirement()
            {
                using org_ptr = struct SimpleKeyingInterface::IV_Requirement (WINAPIV*)(struct CTR_ModePolicy*);
                return (org_ptr(0x14061b150L))(this);
            };
            void OperateKeystream(struct KeystreamOperation arg_0, uint8_t* arg_1, uint8_t* arg_2, uint64_t arg_3)
            {
                using org_ptr = void (WINAPIV*)(struct CTR_ModePolicy*, struct KeystreamOperation, uint8_t*, uint8_t*, uint64_t);
                (org_ptr(0x140618be0L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            void ProcessMultipleBlocks(uint8_t* arg_0, uint8_t* arg_1, uint64_t arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct CTR_ModePolicy*, uint8_t*, uint8_t*, uint64_t);
                (org_ptr(0x14061a2a0L))(this, arg_0, arg_1, arg_2);
            };
            void SeekToIteration(uint64_t arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct CTR_ModePolicy*, uint64_t);
                (org_ptr(0x140618b20L))(this, arg_0);
            };
            static char* StaticAlgorithmName()
            {
                using org_ptr = char* (WINAPIV*)();
                return (org_ptr(0x14061c7d0L))();
            };
            void WriteKeystream(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct CTR_ModePolicy*, uint8_t*, uint64_t);
                (org_ptr(0x14061b1e0L))(this, arg_0, arg_1);
            };
            ~CTR_ModePolicy()
            {
                using org_ptr = int64_t (WINAPIV*)(struct CTR_ModePolicy*);
                (org_ptr(0x14061a060L))(this);
            };
            int64_t dtor_CTR_ModePolicy()
            {
                using org_ptr = int64_t (WINAPIV*)(struct CTR_ModePolicy*);
                return (org_ptr(0x14061a060L))(this);
            };
        };
        template<>
        struct  OFB_ModePolicy : ModePolicyCommonTemplate<AdditiveCipherAbstractPolicy>
        {
        public:
            void CipherResynchronize(uint8_t* arg_0, uint8_t* arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct OFB_ModePolicy*, uint8_t*, uint8_t*);
                (org_ptr(0x14061af50L))(this, arg_0, arg_1);
            };
            unsigned int GetBytesPerIteration()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct OFB_ModePolicy*);
                return (org_ptr(0x14061ae90L))(this);
            };
            unsigned int GetIterationsToBuffer()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct OFB_ModePolicy*);
                return (org_ptr(0x14061aeb0L))(this);
            };
            struct SimpleKeyingInterface::IV_Requirement IVRequirement()
            {
                using org_ptr = struct SimpleKeyingInterface::IV_Requirement (WINAPIV*)(struct OFB_ModePolicy*);
                return (org_ptr(0x14061ae80L))(this);
            };
            OFB_ModePolicy()
            {
                using org_ptr = int64_t (WINAPIV*)(struct OFB_ModePolicy*);
                (org_ptr(0x14061bb20L))(this);
            };
            int64_t ctor_OFB_ModePolicy()
            {
                using org_ptr = int64_t (WINAPIV*)(struct OFB_ModePolicy*);
                return (org_ptr(0x14061bb20L))(this);
            };
            static char* StaticAlgorithmName()
            {
                using org_ptr = char* (WINAPIV*)();
                return (org_ptr(0x14061c670L))();
            };
            void WriteKeystream(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct OFB_ModePolicy*, uint8_t*, uint64_t);
                (org_ptr(0x14061aec0L))(this, arg_0, arg_1);
            };
            ~OFB_ModePolicy()
            {
                using org_ptr = int64_t (WINAPIV*)(struct OFB_ModePolicy*);
                (org_ptr(0x14061a040L))(this);
            };
            int64_t dtor_OFB_ModePolicy()
            {
                using org_ptr = int64_t (WINAPIV*)(struct OFB_ModePolicy*);
                return (org_ptr(0x14061a040L))(this);
            };
        };
        template<>
        struct  AbstractPolicyHolder<AdditiveCipherAbstractPolicy,OFB_ModePolicy> : OFB_ModePolicy
        {
        };
        template<>
        struct  AdditiveCipherTemplate<AbstractPolicyHolder<AdditiveCipherAbstractPolicy,OFB_ModePolicy> > : AbstractPolicyHolder<AdditiveCipherAbstractPolicy,OFB_ModePolicy>
        {
            SecBlock<unsigned char,AllocatorWithCleanup<unsigned char,0> > m_buffer;
            unsigned __int64 m_leftOver;
        };
        template<>
        struct  DL_PrivateKey<EC2NPoint> : DL_Key<EC2NPoint>
        {
        };
        template<>
        struct DL_Base<DL_PrivateKey<EC2NPoint> >
        {
            DL_Base<DL_PrivateKey<EC2NPoint> >Vtbl *vfptr;
        };
        template<>
        struct DL_Base<DL_PrivateKey<EC2NPoint> >Vtbl
        {
            DL_PrivateKey<EC2NPoint> *(WINAPIV *AccessKeyInterface)(DL_Base<DL_PrivateKey<EC2NPoint> > *_this);
            DL_PrivateKey<EC2NPoint> *(WINAPIV *GetKeyInterface)(DL_Base<DL_PrivateKey<EC2NPoint> > *_this);
        };
        template<>
        struct  DL_SignatureSchemeBase<PK_Signer,DL_PrivateKey<EC2NPoint> > : PK_Signer, DL_Base<DL_PrivateKey<EC2NPoint> >
        {
        };
        template<>
        struct  DL_SignerBase<EC2NPoint> : DL_SignatureSchemeBase<PK_Signer,DL_PrivateKey<EC2NPoint> >
        {
        };
        template<>
        struct  AlgorithmImpl<DL_SignerBase<EC2NPoint>,DL_SS<DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int> > : DL_SignerBase<EC2NPoint>
        {
        };
        template<>
        struct  DL_KeyImpl<PKCS8PrivateKey,DL_GroupParameters_EC<EC2N>,OID> : PKCS8PrivateKey
        {
            BYTE m_groupParameters[440];
        };
        template<>
        struct  DL_PrivateKeyImpl<DL_GroupParameters_EC<EC2N> > : DL_PrivateKey<EC2NPoint>, DL_KeyImpl<PKCS8PrivateKey,DL_GroupParameters_EC<EC2N>,OID>
        {
            BYTE m_x[32];
        };
        template<>
        struct  DL_PrivateKey_EC<EC2N> : DL_PrivateKeyImpl<DL_GroupParameters_EC<EC2N> >
        {
        };
        template<>
        struct  DL_PrivateKey_WithSignaturePairwiseConsistencyTest<DL_PrivateKey_EC<EC2N>,ECDSA<EC2N,SHA1> > : DL_PrivateKey_EC<EC2N>
        {
        };
        template<>
        struct   DL_ObjectImplBase<DL_SignerBase<EC2NPoint>,DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1>,DL_PrivateKey_WithSignaturePairwiseConsistencyTest<DL_PrivateKey_EC<EC2N>,ECDSA<EC2N,SHA1> > > : AlgorithmImpl<DL_SignerBase<EC2NPoint>,DL_SS<DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int> >
        {
            DL_PrivateKey_WithSignaturePairwiseConsistencyTest<DL_PrivateKey_EC<EC2N>,ECDSA<EC2N,SHA1> > m_key;
        };
        template<>
        struct  DL_ObjectImpl<DL_SignerBase<EC2NPoint>,DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1>,DL_PrivateKey_WithSignaturePairwiseConsistencyTest<DL_PrivateKey_EC<EC2N>,ECDSA<EC2N,SHA1> > > : DL_ObjectImplBase<DL_SignerBase<EC2NPoint>,DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1>,DL_PrivateKey_WithSignaturePairwiseConsistencyTest<DL_PrivateKey_EC<EC2N>,ECDSA<EC2N,SHA1> > >
        {
        };
        struct DL_SymmetricEncryptionAlgorithm
        {
            DL_SymmetricEncryptionAlgorithmVtbl *vfptr;
        public:
            DL_SymmetricEncryptionAlgorithm()
            {
                using org_ptr = void (WINAPIV*)(struct DL_SymmetricEncryptionAlgorithm*);
                (org_ptr(0x140465f70L))(this);
            };
            void ctor_DL_SymmetricEncryptionAlgorithm()
            {
                using org_ptr = void (WINAPIV*)(struct DL_SymmetricEncryptionAlgorithm*);
                (org_ptr(0x140465f70L))(this);
            };
        };
        struct DL_SymmetricEncryptionAlgorithmVtbl
        {
            bool (WINAPIV *ParameterSupported)(DL_SymmetricEncryptionAlgorithm *_this, const char *);
            unsigned __int64 (WINAPIV *GetSymmetricKeyLength)(DL_SymmetricEncryptionAlgorithm *_this, unsigned __int64);
            unsigned __int64 (WINAPIV *GetSymmetricCiphertextLength)(DL_SymmetricEncryptionAlgorithm *_this, unsigned __int64);
            unsigned __int64 (WINAPIV *GetMaxSymmetricPlaintextLength)(DL_SymmetricEncryptionAlgorithm *_this, unsigned __int64);
            void (WINAPIV *SymmetricEncrypt)(DL_SymmetricEncryptionAlgorithm *_this, RandomNumberGenerator *, const char *, const char *, unsigned __int64, char *, NameValuePairs *);
            DecodingResult *(WINAPIV *SymmetricDecrypt)(DL_SymmetricEncryptionAlgorithm *_this, DecodingResult *result, const char *, const char *, unsigned __int64, char *, NameValuePairs *);
        };
        template<>
        struct GetValueHelperClass<DL_PrivateKeyImpl<DL_GroupParameters_DSA>,DL_PrivateKey<Integer> >
        {
            DL_PrivateKeyImpl<DL_GroupParameters_DSA> *m_pObject;
            const char *m_name;
            type_info *m_valueType;
            void *m_pValue;
            bool m_found;
            bool m_getValueNames;
        };
        template<>
        struct DL_ElgamalLikeSignatureAlgorithm<Integer>
        {
            DL_ElgamalLikeSignatureAlgorithm<Integer>Vtbl *vfptr;
        };
        template<>
        struct DL_ElgamalLikeSignatureAlgorithm<Integer>Vtbl
        {
            void (WINAPIV *Sign)(DL_ElgamalLikeSignatureAlgorithm<Integer> *_this, DL_GroupParameters<Integer> *, Integer *, Integer *, Integer *, Integer *, Integer *);
            bool (WINAPIV *Verify)(DL_ElgamalLikeSignatureAlgorithm<Integer> *_this, DL_GroupParameters<Integer> *, DL_PublicKey<Integer> *, Integer *, Integer *, Integer *);
            Integer *(WINAPIV *RecoverPresignature)(DL_ElgamalLikeSignatureAlgorithm<Integer> *_this, Integer *result, DL_GroupParameters<Integer> *, DL_PublicKey<Integer> *, Integer *, Integer *);
            unsigned __int64 (WINAPIV *RLen)(DL_ElgamalLikeSignatureAlgorithm<Integer> *_this, DL_GroupParameters<Integer> *);
            unsigned __int64 (WINAPIV *SLen)(DL_ElgamalLikeSignatureAlgorithm<Integer> *_this, DL_GroupParameters<Integer> *);
        };
        template<>
        struct  DL_Algorithm_GDSA<Integer> : DL_ElgamalLikeSignatureAlgorithm<Integer>
        {
        public:
            int64_t Sign(struct Integer* arg_0, int64_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(int64_t, struct Integer*, int64_t);
                return (org_ptr(0x1405527b0L))(b, arg_0, arg_1);
            };
            int64_t Verify(struct Integer* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Integer*, struct Integer*);
                return (org_ptr(0x140552b10L))(a, arg_0);
            };
        };
        template<>
        struct simple_ptr<DL_Algorithm_GDSA<Integer> >
        {
            DL_Algorithm_GDSA<Integer> *m_p;
        };
        struct  OS_Error : Exception
        {
            std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_operation;
            int m_errorCode;
        };
        template<>
        struct member_ptr<BlockTransformation>
        {
            BlockTransformation *m_p;
        };
        struct  X917RNG : RandomNumberGenerator, NotCopyable
        {
            member_ptr<BlockTransformation> cipher;
            unsigned int S;
            SecBlock<unsigned char,AllocatorWithCleanup<unsigned char,0> > dtbuf;
            SecBlock<unsigned char,AllocatorWithCleanup<unsigned char,0> > randseed;
            SecBlock<unsigned char,AllocatorWithCleanup<unsigned char,0> > m_lastBlock;
            SecBlock<unsigned char,AllocatorWithCleanup<unsigned char,0> > m_deterministicTimeVector;
        public:
            X917RNG(struct BlockTransformation* arg_0, uint8_t* arg_1, uint8_t* arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct X917RNG*, struct BlockTransformation*, uint8_t*, uint8_t*);
                (org_ptr(0x140651030L))(this, arg_0, arg_1, arg_2);
            };
            int64_t ctor_X917RNG(struct BlockTransformation* arg_0, uint8_t* arg_1, uint8_t* arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct X917RNG*, struct BlockTransformation*, uint8_t*, uint8_t*);
                return (org_ptr(0x140651030L))(this, arg_0, arg_1, arg_2);
            };
            ~X917RNG()
            {
                using org_ptr = int64_t (WINAPIV*)(struct X917RNG*);
                (org_ptr(0x140651d20L))(this);
            };
            int64_t dtor_X917RNG()
            {
                using org_ptr = int64_t (WINAPIV*)(struct X917RNG*);
                return (org_ptr(0x140651d20L))(this);
            };
        };
        template<>
        struct  DL_SignatureSchemeBase<PK_Verifier,DL_PublicKey<ECPPoint> > : PK_Verifier, DL_Base<DL_PublicKey<ECPPoint> >
        {
        };
        template<>
        struct  DL_VerifierBase<ECPPoint> : DL_SignatureSchemeBase<PK_Verifier,DL_PublicKey<ECPPoint> >
        {
        };
        template<>
        struct  AlgorithmImpl<DL_VerifierBase<ECPPoint>,DL_SS<DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int> > : DL_VerifierBase<ECPPoint>
        {
        };
        template<>
        struct   DL_ObjectImplBase<DL_VerifierBase<ECPPoint>,DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1>,DL_PublicKey_EC<ECP> > : AlgorithmImpl<DL_VerifierBase<ECPPoint>,DL_SS<DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int> >
        {
            DL_PublicKey_EC<ECP> m_key;
        };
        template<>
        struct  DL_ObjectImpl<DL_VerifierBase<ECPPoint>,DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1>,DL_PublicKey_EC<ECP> > : DL_ObjectImplBase<DL_VerifierBase<ECPPoint>,DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1>,DL_PublicKey_EC<ECP> >
        {
        };
        template<>
        struct  DL_VerifierImpl<DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1> > : DL_ObjectImpl<DL_VerifierBase<ECPPoint>,DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1>,DL_PublicKey_EC<ECP> >
        {
        };
        template<>
        struct  PK_FinalTemplate<DL_VerifierImpl<DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1> > > : DL_VerifierImpl<DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1> >
        {
        };
        template<>
        struct  AbstractPolicyHolder<CFB_CipherAbstractPolicy,SimpleKeyedTransformation<StreamTransformation> > : SimpleKeyedTransformation<StreamTransformation>
        {
        };
        template<>
        struct DL_ElgamalLikeSignatureAlgorithm<ECPPoint>
        {
            DL_ElgamalLikeSignatureAlgorithm<ECPPoint>Vtbl *vfptr;
        };
        template<>
        struct DL_ElgamalLikeSignatureAlgorithm<ECPPoint>Vtbl
        {
            void (WINAPIV *Sign)(DL_ElgamalLikeSignatureAlgorithm<ECPPoint> *_this, DL_GroupParameters<ECPPoint> *, Integer *, Integer *, Integer *, Integer *, Integer *);
            bool (WINAPIV *Verify)(DL_ElgamalLikeSignatureAlgorithm<ECPPoint> *_this, DL_GroupParameters<ECPPoint> *, DL_PublicKey<ECPPoint> *, Integer *, Integer *, Integer *);
            Integer *(WINAPIV *RecoverPresignature)(DL_ElgamalLikeSignatureAlgorithm<ECPPoint> *_this, Integer *result, DL_GroupParameters<ECPPoint> *, DL_PublicKey<ECPPoint> *, Integer *, Integer *);
            unsigned __int64 (WINAPIV *RLen)(DL_ElgamalLikeSignatureAlgorithm<ECPPoint> *_this, DL_GroupParameters<ECPPoint> *);
            unsigned __int64 (WINAPIV *SLen)(DL_ElgamalLikeSignatureAlgorithm<ECPPoint> *_this, DL_GroupParameters<ECPPoint> *);
        };
        template<>
        struct DL_KeyDerivationAlgorithm<ECPPoint>
        {
            DL_KeyDerivationAlgorithm<ECPPoint>Vtbl *vfptr;
        public:
            DL_KeyDerivationAlgorithm()
            {
                using org_ptr = void (WINAPIV*)(struct DL_KeyDerivationAlgorithm<ECPPoint>*);
                (org_ptr(0x140465f60L))(this);
            };
            void ctor_DL_KeyDerivationAlgorithm()
            {
                using org_ptr = void (WINAPIV*)(struct DL_KeyDerivationAlgorithm<ECPPoint>*);
                (org_ptr(0x140465f60L))(this);
            };
        };
        template<>
        struct DL_KeyDerivationAlgorithm<ECPPoint>Vtbl
        {
            bool (WINAPIV *ParameterSupported)(DL_KeyDerivationAlgorithm<ECPPoint> *_this, const char *);
            void (WINAPIV *Derive)(DL_KeyDerivationAlgorithm<ECPPoint> *_this, DL_GroupParameters<ECPPoint> *, char *, unsigned __int64, ECPPoint *, ECPPoint *, NameValuePairs *);
        };
        template<>
        struct  DL_KeyedSchemeOptions<DL_SS<DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<EC2N> > : DL_SchemeOptionsBase<DL_SS<DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_GroupParameters_EC<EC2N> >
        {
        };
        struct  InvalidArgument : Exception
        {
        public:
            InvalidArgument(struct InvalidArgument* __that)
            {
                using org_ptr = void (WINAPIV*)(struct InvalidArgument*, struct InvalidArgument*);
                (org_ptr(0x140452df0L))(this, __that);
            };
            void ctor_InvalidArgument(struct InvalidArgument* __that)
            {
                using org_ptr = void (WINAPIV*)(struct InvalidArgument*, struct InvalidArgument*);
                (org_ptr(0x140452df0L))(this, __that);
            };
            InvalidArgument(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* s)
            {
                using org_ptr = void (WINAPIV*)(struct InvalidArgument*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*);
                (org_ptr(0x140452cd0L))(this, s);
            };
            void ctor_InvalidArgument(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* s)
            {
                using org_ptr = void (WINAPIV*)(struct InvalidArgument*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*);
                (org_ptr(0x140452cd0L))(this, s);
            };
            ~InvalidArgument()
            {
                using org_ptr = void (WINAPIV*)(struct InvalidArgument*);
                (org_ptr(0x140452db0L))(this);
            };
            void dtor_InvalidArgument()
            {
                using org_ptr = void (WINAPIV*)(struct InvalidArgument*);
                (org_ptr(0x140452db0L))(this);
            };
        };
        struct  BERDecodeErr : InvalidArgument
        {
        public:
            BERDecodeErr(struct BERDecodeErr* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct BERDecodeErr*, struct BERDecodeErr*);
                (org_ptr(0x14054e250L))(this, arg_0);
            };
            int64_t ctor_BERDecodeErr(struct BERDecodeErr* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct BERDecodeErr*, struct BERDecodeErr*);
                return (org_ptr(0x14054e250L))(this, arg_0);
            };
            BERDecodeErr()
            {
                using org_ptr = int64_t (WINAPIV*)(struct BERDecodeErr*);
                (org_ptr(0x14054ff40L))(this);
            };
            int64_t ctor_BERDecodeErr()
            {
                using org_ptr = int64_t (WINAPIV*)(struct BERDecodeErr*);
                return (org_ptr(0x14054ff40L))(this);
            };
            ~BERDecodeErr()
            {
                using org_ptr = int64_t (WINAPIV*)(struct BERDecodeErr*);
                (org_ptr(0x140550040L))(this);
            };
            int64_t dtor_BERDecodeErr()
            {
                using org_ptr = int64_t (WINAPIV*)(struct BERDecodeErr*);
                return (org_ptr(0x140550040L))(this);
            };
        };
        struct MicrosoftCryptoProvider
        {
            unsigned __int64 m_hProvider;
        public:
            uint64_t GetProviderHandle()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct MicrosoftCryptoProvider*);
                return (org_ptr(0x140625570L))(this);
            };
            MicrosoftCryptoProvider()
            {
                using org_ptr = int64_t (WINAPIV*)(struct MicrosoftCryptoProvider*);
                (org_ptr(0x1406250a0L))(this);
            };
            int64_t ctor_MicrosoftCryptoProvider()
            {
                using org_ptr = int64_t (WINAPIV*)(struct MicrosoftCryptoProvider*);
                return (org_ptr(0x1406250a0L))(this);
            };
            ~MicrosoftCryptoProvider()
            {
                using org_ptr = int64_t (WINAPIV*)(struct MicrosoftCryptoProvider*);
                (org_ptr(0x140625190L))(this);
            };
            int64_t dtor_MicrosoftCryptoProvider()
            {
                using org_ptr = int64_t (WINAPIV*)(struct MicrosoftCryptoProvider*);
                return (org_ptr(0x140625190L))(this);
            };
        };
        template<>
        struct member_ptr<PK_MessageAccumulator>
        {
            PK_MessageAccumulator *m_p;
        };
        template<>
        struct  IteratedHashBase<unsigned int,SimpleKeyedTransformation<HashTransformation> > : SimpleKeyedTransformation<HashTransformation>
        {
            unsigned int m_countLo;
            unsigned int m_countHi;
        };
        struct  TransparentFilter : MeterFilter
        {
        };
        struct  KeyAgreementAlgorithm : AsymmetricAlgorithm
        {
        public:
            struct CryptoMaterial* AccessMaterial()
            {
                using org_ptr = struct CryptoMaterial* (WINAPIV*)(struct KeyAgreementAlgorithm*);
                return (org_ptr(0x140553db0L))(this);
            };
            struct CryptoParameters* GetCryptoParameters()
            {
                using org_ptr = struct CryptoParameters* (WINAPIV*)(struct KeyAgreementAlgorithm*);
                return (org_ptr(0x140553e70L))(this);
            };
            struct CryptoMaterial* GetMaterial()
            {
                using org_ptr = struct CryptoMaterial* (WINAPIV*)(struct KeyAgreementAlgorithm*);
                return (org_ptr(0x140553e10L))(this);
            };
            KeyAgreementAlgorithm()
            {
                using org_ptr = int64_t (WINAPIV*)(struct KeyAgreementAlgorithm*);
                (org_ptr(0x14055e1f0L))(this);
            };
            int64_t ctor_KeyAgreementAlgorithm()
            {
                using org_ptr = int64_t (WINAPIV*)(struct KeyAgreementAlgorithm*);
                return (org_ptr(0x14055e1f0L))(this);
            };
            ~KeyAgreementAlgorithm()
            {
                using org_ptr = int64_t (WINAPIV*)(struct KeyAgreementAlgorithm*);
                (org_ptr(0x14055e210L))(this);
            };
            int64_t dtor_KeyAgreementAlgorithm()
            {
                using org_ptr = int64_t (WINAPIV*)(struct KeyAgreementAlgorithm*);
                return (org_ptr(0x14055e210L))(this);
            };
        };
        template<>
        struct  EnumToType<enum CofactorMultiplicationOption,0>
        {
        };
        template<>
        struct  CFB_CipherTemplate<AbstractPolicyHolder<CFB_CipherAbstractPolicy,SimpleKeyedTransformation<StreamTransformation> > > : AbstractPolicyHolder<CFB_CipherAbstractPolicy,SimpleKeyedTransformation<StreamTransformation> >
        {
            unsigned __int64 m_leftOver;
        };
        struct  SimpleKeyAgreementDomain : KeyAgreementAlgorithm
        {
        public:
            void GenerateKeyPair(struct RandomNumberGenerator* arg_0, uint8_t* arg_1, uint8_t* arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct SimpleKeyAgreementDomain*, struct RandomNumberGenerator*, uint8_t*, uint8_t*);
                (org_ptr(0x1405f6540L))(this, arg_0, arg_1, arg_2);
            };
            SimpleKeyAgreementDomain()
            {
                using org_ptr = int64_t (WINAPIV*)(struct SimpleKeyAgreementDomain*);
                (org_ptr(0x14055d5a0L))(this);
            };
            int64_t ctor_SimpleKeyAgreementDomain()
            {
                using org_ptr = int64_t (WINAPIV*)(struct SimpleKeyAgreementDomain*);
                return (org_ptr(0x14055d5a0L))(this);
            };
            ~SimpleKeyAgreementDomain()
            {
                using org_ptr = int64_t (WINAPIV*)(struct SimpleKeyAgreementDomain*);
                (org_ptr(0x14055d5c0L))(this);
            };
            int64_t dtor_SimpleKeyAgreementDomain()
            {
                using org_ptr = int64_t (WINAPIV*)(struct SimpleKeyAgreementDomain*);
                return (org_ptr(0x14055d5c0L))(this);
            };
        };
        template<>
        struct  DL_SimpleKeyAgreementDomainBase<Integer> : SimpleKeyAgreementDomain
        {
        };
        struct  DL_GroupParameters_GFP_DefaultSafePrime : DL_GroupParameters_GFP
        {
        public:
            DL_GroupParameters_GFP_DefaultSafePrime(struct DL_GroupParameters_GFP_DefaultSafePrime* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_GroupParameters_GFP_DefaultSafePrime*, struct DL_GroupParameters_GFP_DefaultSafePrime*);
                (org_ptr(0x14055c880L))(this, arg_0);
            };
            int64_t ctor_DL_GroupParameters_GFP_DefaultSafePrime(struct DL_GroupParameters_GFP_DefaultSafePrime* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_GroupParameters_GFP_DefaultSafePrime*, struct DL_GroupParameters_GFP_DefaultSafePrime*);
                return (org_ptr(0x14055c880L))(this, arg_0);
            };
            DL_GroupParameters_GFP_DefaultSafePrime()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_GroupParameters_GFP_DefaultSafePrime*);
                (org_ptr(0x14055c2c0L))(this);
            };
            int64_t ctor_DL_GroupParameters_GFP_DefaultSafePrime()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_GroupParameters_GFP_DefaultSafePrime*);
                return (org_ptr(0x14055c2c0L))(this);
            };
            unsigned int GetDefaultSubgroupOrderSize(unsigned int arg_0)
            {
                using org_ptr = unsigned int (WINAPIV*)(struct DL_GroupParameters_GFP_DefaultSafePrime*, unsigned int);
                return (org_ptr(0x14055c820L))(this, arg_0);
            };
            ~DL_GroupParameters_GFP_DefaultSafePrime()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_GroupParameters_GFP_DefaultSafePrime*);
                (org_ptr(0x14055d720L))(this);
            };
            int64_t dtor_DL_GroupParameters_GFP_DefaultSafePrime()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_GroupParameters_GFP_DefaultSafePrime*);
                return (org_ptr(0x14055d720L))(this);
            };
        };
        template<>
        struct DL_KeyAgreementAlgorithm<Integer>
        {
            DL_KeyAgreementAlgorithm<Integer>Vtbl *vfptr;
        };
        template<>
        struct DL_KeyAgreementAlgorithm<Integer>Vtbl
        {
            Integer *(WINAPIV *AgreeWithEphemeralPrivateKey)(DL_KeyAgreementAlgorithm<Integer> *_this, Integer *result, DL_GroupParameters<Integer> *, DL_FixedBasePrecomputation<Integer> *, Integer *);
            Integer *(WINAPIV *AgreeWithStaticPrivateKey)(DL_KeyAgreementAlgorithm<Integer> *_this, Integer *result, DL_GroupParameters<Integer> *, Integer *, bool, Integer *);
        };
        template<>
        struct  DL_KeyAgreementAlgorithm_DH<Integer,EnumToType<enum CofactorMultiplicationOption,0> > : DL_KeyAgreementAlgorithm<Integer>
        {
        };
        template<>
        struct   DH_Domain<DL_GroupParameters_GFP_DefaultSafePrime,EnumToType<enum CofactorMultiplicationOption,0> > : DL_SimpleKeyAgreementDomainBase<Integer>
        {
            DL_GroupParameters_GFP_DefaultSafePrime m_groupParameters;
        };
        template<>
        struct AssignFromHelperClass<DL_PrivateKey<Integer>,DL_PrivateKey<Integer> >
        {
            DL_PrivateKey<Integer> *m_pObject;
            NameValuePairs *m_source;
            bool m_done;
        };
        template<>
        struct simple_ptr<DL_KeyAgreementAlgorithm_DH<ECPPoint,EnumToType<enum CofactorMultiplicationOption,0> > >
        {
            DL_KeyAgreementAlgorithm_DH<ECPPoint,EnumToType<enum CofactorMultiplicationOption,0> > *m_p;
        };
        template<>
        struct GetValueHelperClass<DL_PrivateKey<EC2NPoint>,DL_PrivateKey<EC2NPoint> >
        {
            DL_PrivateKey<EC2NPoint> *m_pObject;
            const char *m_name;
            type_info *m_valueType;
            void *m_pValue;
            bool m_found;
            bool m_getValueNames;
        };
        template<>
        struct  EnumToType<enum ByteOrder,1>
        {
        };
        template<>
        struct  DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1> : DL_KeyedSchemeOptions<DL_SS<DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<EC2N> >
        {
        };
        struct  NotImplemented : Exception
        {
        public:
            NotImplemented(struct NotImplemented* __that)
            {
                using org_ptr = void (WINAPIV*)(struct NotImplemented*, struct NotImplemented*);
                (org_ptr(0x14044b870L))(this, __that);
            };
            void ctor_NotImplemented(struct NotImplemented* __that)
            {
                using org_ptr = void (WINAPIV*)(struct NotImplemented*, struct NotImplemented*);
                (org_ptr(0x14044b870L))(this, __that);
            };
            NotImplemented(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* s)
            {
                using org_ptr = void (WINAPIV*)(struct NotImplemented*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*);
                (org_ptr(0x14044b750L))(this, s);
            };
            void ctor_NotImplemented(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* s)
            {
                using org_ptr = void (WINAPIV*)(struct NotImplemented*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*);
                (org_ptr(0x14044b750L))(this, s);
            };
            ~NotImplemented()
            {
                using org_ptr = void (WINAPIV*)(struct NotImplemented*);
                (org_ptr(0x14044b830L))(this);
            };
            void dtor_NotImplemented()
            {
                using org_ptr = void (WINAPIV*)(struct NotImplemented*);
                (org_ptr(0x14044b830L))(this);
            };
        };
        template<>
        struct  DL_KeyedSchemeOptions<DL_SS<DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<ECP> > : DL_SchemeOptionsBase<DL_SS<DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_GroupParameters_EC<ECP> >
        {
        };
        template<>
        struct  DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1> : DL_KeyedSchemeOptions<DL_SS<DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<ECP> >
        {
        };
        struct  CannotFlush : Exception
        {
        public:
            CannotFlush(struct CannotFlush* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct CannotFlush*, struct CannotFlush*);
                (org_ptr(0x14057e630L))(this, arg_0);
            };
            int64_t ctor_CannotFlush(struct CannotFlush* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct CannotFlush*, struct CannotFlush*);
                return (org_ptr(0x14057e630L))(this, arg_0);
            };
            ~CannotFlush()
            {
                using org_ptr = int64_t (WINAPIV*)(struct CannotFlush*);
                (org_ptr(0x14057df80L))(this);
            };
            int64_t dtor_CannotFlush()
            {
                using org_ptr = int64_t (WINAPIV*)(struct CannotFlush*);
                return (org_ptr(0x14057df80L))(this);
            };
        };
        struct  SymmetricCipherDocumentation
        {
        };
        struct  CipherModeDocumentation : SymmetricCipherDocumentation
        {
        };
        struct  CFB_FIPS_Mode_ExternalCipher : CipherModeDocumentation
        {
        };
        template<>
        struct GetValueHelperClass<DL_PrivateKeyImpl<DL_GroupParameters_EC<EC2N> >,DL_PrivateKey<EC2NPoint> >
        {
            DL_PrivateKeyImpl<DL_GroupParameters_EC<EC2N> > *m_pObject;
            const char *m_name;
            type_info *m_valueType;
            void *m_pValue;
            bool m_found;
            bool m_getValueNames;
        };
        struct FilterPutSpaceHelper
        {
            SecBlock<unsigned char,AllocatorWithCleanup<unsigned char,0> > m_tempSpace;
        public:
            FilterPutSpaceHelper()
            {
                using org_ptr = void (WINAPIV*)(struct FilterPutSpaceHelper*);
                (org_ptr(0x140453ba0L))(this);
            };
            void ctor_FilterPutSpaceHelper()
            {
                using org_ptr = void (WINAPIV*)(struct FilterPutSpaceHelper*);
                (org_ptr(0x140453ba0L))(this);
            };
            ~FilterPutSpaceHelper()
            {
                using org_ptr = void (WINAPIV*)(struct FilterPutSpaceHelper*);
                (org_ptr(0x14044dba0L))(this);
            };
            void dtor_FilterPutSpaceHelper()
            {
                using org_ptr = void (WINAPIV*)(struct FilterPutSpaceHelper*);
                (org_ptr(0x14044dba0L))(this);
            };
        };
        template<>
        struct  HashFilter : Bufferless<Filter>, FilterPutSpaceHelper
        {
            HashTransformation *m_hashModule;
            bool m_putMessage;
            int m_truncatedDigestSize;
            char *m_space;
            unsigned int m_digestSize;
        public:
            uint8_t* CreatePutSpace(uint64_t* arg_0)
            {
                using org_ptr = uint8_t* (WINAPIV*)(struct HashFilter*, uint64_t*);
                return (org_ptr(0x140623eb0L))(this, arg_0);
            };
            HashFilter(struct HashTransformation* arg_0, struct BufferedTransformation* arg_1, bool arg_2, int arg_3)
            {
                using org_ptr = int64_t (WINAPIV*)(struct HashFilter*, struct HashTransformation*, struct BufferedTransformation*, bool, int);
                (org_ptr(0x140623d40L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            int64_t ctor_HashFilter(struct HashTransformation* arg_0, struct BufferedTransformation* arg_1, bool arg_2, int arg_3)
            {
                using org_ptr = int64_t (WINAPIV*)(struct HashFilter*, struct HashTransformation*, struct BufferedTransformation*, bool, int);
                return (org_ptr(0x140623d40L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            void IsolatedInitialize(struct NameValuePairs* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct HashFilter*, struct NameValuePairs*);
                (org_ptr(0x1405fcb10L))(this, arg_0);
            };
            uint64_t Put2(uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct HashFilter*, uint8_t*, uint64_t, int, bool);
                return (org_ptr(0x1405fcb80L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            ~HashFilter()
            {
                using org_ptr = int64_t (WINAPIV*)(struct HashFilter*);
                (org_ptr(0x140623f20L))(this);
            };
            int64_t dtor_HashFilter()
            {
                using org_ptr = int64_t (WINAPIV*)(struct HashFilter*);
                return (org_ptr(0x140623f20L))(this);
            };
        };
        struct  CTR_Mode_ExternalCipher : CipherModeDocumentation
        {
        };
        template<>
        struct  StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > : Bufferless<Sink>
        {
            std::basic_string<char,std::char_traits<char>,std::allocator<char> > *m_output;
        };
        template<>
        struct GetValueHelperClass<DL_PublicKey<Integer>,DL_PublicKey<Integer> >
        {
            DL_PublicKey<Integer> *m_pObject;
            const char *m_name;
            type_info *m_valueType;
            void *m_pValue;
            bool m_found;
            bool m_getValueNames;
        };
        struct  PK_DeterministicSignatureMessageEncodingMethod : PK_SignatureMessageEncodingMethod
        {
        public:
            PK_DeterministicSignatureMessageEncodingMethod()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_DeterministicSignatureMessageEncodingMethod*);
                (org_ptr(0x14058fdf0L))(this);
            };
            int64_t ctor_PK_DeterministicSignatureMessageEncodingMethod()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_DeterministicSignatureMessageEncodingMethod*);
                return (org_ptr(0x14058fdf0L))(this);
            };
            int64_t VerifyMessageRepresentative(struct CryptoPP* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(void*, struct CryptoPP*);
                return (org_ptr(0x140622520L))(Buf1, arg_0);
            };
            ~PK_DeterministicSignatureMessageEncodingMethod()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_DeterministicSignatureMessageEncodingMethod*);
                (org_ptr(0x14058fed0L))(this);
            };
            int64_t dtor_PK_DeterministicSignatureMessageEncodingMethod()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_DeterministicSignatureMessageEncodingMethod*);
                return (org_ptr(0x14058fed0L))(this);
            };
        };
        struct  DL_SignatureMessageEncodingMethod_DSA : PK_DeterministicSignatureMessageEncodingMethod
        {
        public:
            int64_t ComputeMessageRepresentative(int64_t arg_1, int arg_2, int arg_3, uint8_t* arg_4, struct CryptoPP* arg_5)
            {
                using org_ptr = int64_t (WINAPIV*)(int64_t, int64_t, int, int, uint8_t*, struct CryptoPP*);
                return (org_ptr(0x140630320L))(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5);
            };
            DL_SignatureMessageEncodingMethod_DSA()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_SignatureMessageEncodingMethod_DSA*);
                (org_ptr(0x14058f7e0L))(this);
            };
            int64_t ctor_DL_SignatureMessageEncodingMethod_DSA()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_SignatureMessageEncodingMethod_DSA*);
                return (org_ptr(0x14058f7e0L))(this);
            };
            ~DL_SignatureMessageEncodingMethod_DSA()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_SignatureMessageEncodingMethod_DSA*);
                (org_ptr(0x14058feb0L))(this);
            };
            int64_t dtor_DL_SignatureMessageEncodingMethod_DSA()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_SignatureMessageEncodingMethod_DSA*);
                return (org_ptr(0x14058feb0L))(this);
            };
        };
        template<>
        struct  NewObject<DL_SignatureMessageEncodingMethod_DSA>
        {
        };
        struct  ArrayXorSink : ArraySink
        {
        public:
            ArrayXorSink(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ArrayXorSink*, uint8_t*, uint64_t);
                (org_ptr(0x140623fc0L))(this, arg_0, arg_1);
            };
            int64_t ctor_ArrayXorSink(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ArrayXorSink*, uint8_t*, uint64_t);
                return (org_ptr(0x140623fc0L))(this, arg_0, arg_1);
            };
            uint8_t* CreatePutSpace(uint64_t* arg_0)
            {
                using org_ptr = uint8_t* (WINAPIV*)(struct ArrayXorSink*, uint64_t*);
                return (org_ptr(0x140624010L))(this, arg_0);
            };
            uint64_t Put2(uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct ArrayXorSink*, uint8_t*, uint64_t, int, bool);
                return (org_ptr(0x1405fb8b0L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            ~ArrayXorSink()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ArrayXorSink*);
                (org_ptr(0x140624080L))(this);
            };
            int64_t dtor_ArrayXorSink()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ArrayXorSink*);
                return (org_ptr(0x140624080L))(this);
            };
        };
        struct ByteArrayParameter
        {
            char *m_data;
            unsigned __int64 m_size;
        public:
            ByteArrayParameter(uint8_t* arg_0, unsigned int arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ByteArrayParameter*, uint8_t*, unsigned int);
                (org_ptr(0x1405ff330L))(this, arg_0, arg_1);
            };
            int64_t ctor_ByteArrayParameter(uint8_t* arg_0, unsigned int arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ByteArrayParameter*, uint8_t*, unsigned int);
                return (org_ptr(0x1405ff330L))(this, arg_0, arg_1);
            };
            uint8_t* begin()
            {
                using org_ptr = uint8_t* (WINAPIV*)(struct ByteArrayParameter*);
                return (org_ptr(0x1405ff360L))(this);
            };
            uint64_t size()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct ByteArrayParameter*);
                return (org_ptr(0x1405ff370L))(this);
            };
        };
        template<>
        struct TF_Base<TrapdoorFunction,PK_SignatureMessageEncodingMethod>
        {
            TF_Base<TrapdoorFunction,PK_SignatureMessageEncodingMethod>Vtbl *vfptr;
        };
        struct  RandomizedTrapdoorFunction : TrapdoorFunctionBounds
        {
        };
        const struct  TrapdoorFunction : RandomizedTrapdoorFunction
        {
        };
        template<>
        struct TF_Base<TrapdoorFunction,PK_SignatureMessageEncodingMethod>Vtbl
        {
            TrapdoorFunctionBounds *(WINAPIV *GetTrapdoorFunctionBounds)(TF_Base<TrapdoorFunction,PK_SignatureMessageEncodingMethod> *_this);
            TrapdoorFunction *(WINAPIV *GetTrapdoorFunctionInterface)(TF_Base<TrapdoorFunction,PK_SignatureMessageEncodingMethod> *_this);
            PK_SignatureMessageEncodingMethod *(WINAPIV *GetMessageEncodingInterface)(TF_Base<TrapdoorFunction,PK_SignatureMessageEncodingMethod> *_this);
        };
        template<>
        struct  TF_SignatureSchemeBase<PK_Verifier,TF_Base<TrapdoorFunction,PK_SignatureMessageEncodingMethod> > : PK_Verifier, TF_Base<TrapdoorFunction,PK_SignatureMessageEncodingMethod>
        {
        };
        template<>
        struct  InputRejecting<Filter> : Filter
        {
                template<>
                struct  InputRejected : NotImplemented
                {
                public:
                    InputRejected(struct InputRejected* __that)
                    {
                        using org_ptr = void (WINAPIV*)(struct InputRejected*, struct InputRejected*);
                        (org_ptr(0x140454650L))(this, __that);
                    };
                    void ctor_InputRejected(struct InputRejected* __that)
                    {
                        using org_ptr = void (WINAPIV*)(struct InputRejected*, struct InputRejected*);
                        (org_ptr(0x140454650L))(this, __that);
                    };
                    InputRejected()
                    {
                        using org_ptr = void (WINAPIV*)(struct InputRejected*);
                        (org_ptr(0x14045ac40L))(this);
                    };
                    void ctor_InputRejected()
                    {
                        using org_ptr = void (WINAPIV*)(struct InputRejected*);
                        (org_ptr(0x14045ac40L))(this);
                    };
                    ~InputRejected()
                    {
                        using org_ptr = void (WINAPIV*)(struct InputRejected*);
                        (org_ptr(0x140454610L))(this);
                    };
                    void dtor_InputRejected()
                    {
                        using org_ptr = void (WINAPIV*)(struct InputRejected*);
                        (org_ptr(0x140454610L))(this);
                    };
                };
        public:
            bool ChannelMessageSeriesEnd(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* __formal, int __formal, bool __formal)
            {
                using org_ptr = bool (WINAPIV*)(struct InputRejecting<Filter>*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, int, bool);
                return (org_ptr(0x14044e9e0L))(this, __formal, __formal, __formal);
            };
            uint64_t ChannelPut2(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* channel, char* begin, uint64_t length, int messageEnd, bool blocking)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct InputRejecting<Filter>*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*, char*, uint64_t, int, bool);
                return (org_ptr(0x14044e970L))(this, channel, begin, length, messageEnd, blocking);
            };
            InputRejecting()
            {
                using org_ptr = void (WINAPIV*)(struct InputRejecting<Filter>*);
                (org_ptr(0x140453690L))(this);
            };
            void ctor_InputRejecting()
            {
                using org_ptr = void (WINAPIV*)(struct InputRejecting<Filter>*);
                (org_ptr(0x140453690L))(this);
            };
            bool IsolatedFlush(bool __formal, bool __formal)
            {
                using org_ptr = bool (WINAPIV*)(struct InputRejecting<Filter>*, bool, bool);
                return (org_ptr(0x14044e8f0L))(this, __formal, __formal);
            };
            bool IsolatedMessageSeriesEnd(bool __formal)
            {
                using org_ptr = bool (WINAPIV*)(struct InputRejecting<Filter>*, bool);
                return (org_ptr(0x14044e910L))(this, __formal);
            };
            uint64_t Put2(char* begin, uint64_t length, int messageEnd, bool blocking)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct InputRejecting<Filter>*, char*, uint64_t, int, bool);
                return (org_ptr(0x14044e880L))(this, begin, length, messageEnd, blocking);
            };
            ~InputRejecting()
            {
                using org_ptr = void (WINAPIV*)(struct InputRejecting<Filter>*);
                (org_ptr(0x14044d810L))(this);
            };
            void dtor_InputRejecting()
            {
                using org_ptr = void (WINAPIV*)(struct InputRejecting<Filter>*);
                (org_ptr(0x14044d810L))(this);
            };
        };
        template<>
        struct  Source : InputRejecting<Filter>
        {
        public:
            void PumpAll()
            {
                using org_ptr = void (WINAPIV*)(struct Source*);
                (org_ptr(0x14044d020L))(this);
            };
            uint64_t PumpAll2(bool arg_0)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct Source*, bool);
                return (org_ptr(0x1405fe0a0L))(this, arg_0);
            };
            Source(struct BufferedTransformation* attachment)
            {
                using org_ptr = void (WINAPIV*)(struct Source*, struct BufferedTransformation*);
                (org_ptr(0x1404535e0L))(this, attachment);
            };
            void ctor_Source(struct BufferedTransformation* attachment)
            {
                using org_ptr = void (WINAPIV*)(struct Source*, struct BufferedTransformation*);
                (org_ptr(0x1404535e0L))(this, attachment);
            };
            void SourceInitialize(bool pumpAll, struct NameValuePairs* parameters)
            {
                using org_ptr = void (WINAPIV*)(struct Source*, bool, struct NameValuePairs*);
                (org_ptr(0x14044cfb0L))(this, pumpAll, parameters);
            };
            ~Source()
            {
                using org_ptr = void (WINAPIV*)(struct Source*);
                (org_ptr(0x14044d7d0L))(this);
            };
            void dtor_Source()
            {
                using org_ptr = void (WINAPIV*)(struct Source*);
                (org_ptr(0x14044d7d0L))(this);
            };
        };
        template<>
        struct  SourceTemplate<StringStore> : Source
        {
            StringStore m_store;
        };
        template<>
        struct Singleton<DL_Algorithm_ECDSA<EC2N>,NewObject<DL_Algorithm_ECDSA<EC2N> >,0>
        {
            NewObject<DL_Algorithm_ECDSA<EC2N> > m_objectFactory;
        };
        template<>
        struct  StringSource : SourceTemplate<StringStore>
        {
        public:
            StringSource(char* arg_0, bool arg_1, struct BufferedTransformation* arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct StringSource*, char*, bool, struct BufferedTransformation*);
                (org_ptr(0x1405796a0L))(this, arg_0, arg_1, arg_2);
            };
            int64_t ctor_StringSource(char* arg_0, bool arg_1, struct BufferedTransformation* arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct StringSource*, char*, bool, struct BufferedTransformation*);
                return (org_ptr(0x1405796a0L))(this, arg_0, arg_1, arg_2);
            };
            ~StringSource()
            {
                using org_ptr = int64_t (WINAPIV*)(struct StringSource*);
                (org_ptr(0x140579990L))(this);
            };
            int64_t dtor_StringSource()
            {
                using org_ptr = int64_t (WINAPIV*)(struct StringSource*);
                return (org_ptr(0x140579990L))(this);
            };
        };
        template<>
        struct  AlgorithmParametersBase2<RandomNumberGenerator *> : AlgorithmParametersBase
        {
            RandomNumberGenerator *m_value;
        };
        template<>
        struct  AlgorithmParameters<NullNameValuePairs,RandomNumberGenerator *> : AlgorithmParametersBase2<RandomNumberGenerator *>
        {
            NullNameValuePairs m_parent;
        };
        struct  ECB_OneWay : BlockOrientedCipherModeBase
        {
        public:
            ECB_OneWay()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ECB_OneWay*);
                (org_ptr(0x14055d120L))(this);
            };
            int64_t ctor_ECB_OneWay()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ECB_OneWay*);
                return (org_ptr(0x14055d120L))(this);
            };
            struct SimpleKeyingInterface::IV_Requirement IVRequirement()
            {
                using org_ptr = struct SimpleKeyingInterface::IV_Requirement (WINAPIV*)(struct ECB_OneWay*);
                return (org_ptr(0x14055b260L))(this);
            };
            unsigned int OptimalBlockSize()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct ECB_OneWay*);
                return (org_ptr(0x14055b270L))(this);
            };
            void ProcessBlocks(uint8_t* arg_0, uint8_t* arg_1, uint64_t arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct ECB_OneWay*, uint8_t*, uint8_t*, uint64_t);
                (org_ptr(0x14055b2c0L))(this, arg_0, arg_1, arg_2);
            };
            void SetKey(uint8_t* arg_0, uint64_t arg_1, struct NameValuePairs* arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct ECB_OneWay*, uint8_t*, uint64_t, struct NameValuePairs*);
                (org_ptr(0x14055b200L))(this, arg_0, arg_1, arg_2);
            };
            static char* StaticAlgorithmName()
            {
                using org_ptr = char* (WINAPIV*)();
                return (org_ptr(0x14061c930L))();
            };
            ~ECB_OneWay()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ECB_OneWay*);
                (org_ptr(0x14055d140L))(this);
            };
            int64_t dtor_ECB_OneWay()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ECB_OneWay*);
                return (org_ptr(0x14055d140L))(this);
            };
        };
        template<>
        struct  AlgorithmImpl<DL_VerifierBase<EC2NPoint>,DL_SS<DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int> > : DL_VerifierBase<EC2NPoint>
        {
        };
        template<>
        struct  DL_ObjectImplBase<DL_VerifierBase<EC2NPoint>,DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1>,DL_PublicKey_EC<EC2N> > : AlgorithmImpl<DL_VerifierBase<EC2NPoint>,DL_SS<DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int> >
        {
            DL_PublicKey_EC<EC2N> m_key;
        };
        template<>
        struct GetValueHelperClass<DL_PrivateKeyImpl<DL_GroupParameters_EC<ECP> >,DL_PrivateKey<ECPPoint> >
        {
            DL_PrivateKeyImpl<DL_GroupParameters_EC<ECP> > *m_pObject;
            const char *m_name;
            type_info *m_valueType;
            void *m_pValue;
            bool m_found;
            bool m_getValueNames;
        };
        template<>
        struct  NewObject<DL_Algorithm_GDSA<Integer> >
        {
        };
        struct  LC_RNG : RandomNumberGenerator
        {
            unsigned int seed;
        public:
            void GenerateBlock(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct LC_RNG*, uint8_t*, uint64_t);
                (org_ptr(0x140650f30L))(this, arg_0, arg_1);
            };
        };
        template<>
        struct  CFB_DecryptionTemplate<AbstractPolicyHolder<CFB_CipherAbstractPolicy,CFB_ModePolicy> > : CFB_CipherTemplate<AbstractPolicyHolder<CFB_CipherAbstractPolicy,CFB_ModePolicy> >
        {
        };
        template<>
        struct  CFB_RequireFullDataBlocks<CFB_DecryptionTemplate<AbstractPolicyHolder<CFB_CipherAbstractPolicy,CFB_ModePolicy> > > : CFB_DecryptionTemplate<AbstractPolicyHolder<CFB_CipherAbstractPolicy,CFB_ModePolicy> >
        {
        };
        struct  BERGeneralDecoder : Store
        {
            BufferedTransformation *m_inQueue;
            bool m_finished;
            bool m_definiteLength;
            unsigned __int64 m_length;
        public:
            BERGeneralDecoder(struct BERGeneralDecoder* arg_0, uint8_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct BERGeneralDecoder*, struct BERGeneralDecoder*, uint8_t);
                (org_ptr(0x14054d120L))(this, arg_0, arg_1);
            };
            int64_t ctor_BERGeneralDecoder(struct BERGeneralDecoder* arg_0, uint8_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct BERGeneralDecoder*, struct BERGeneralDecoder*, uint8_t);
                return (org_ptr(0x14054d120L))(this, arg_0, arg_1);
            };
            BERGeneralDecoder(struct BufferedTransformation* arg_0, uint8_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct BERGeneralDecoder*, struct BufferedTransformation*, uint8_t);
                (org_ptr(0x14054d080L))(this, arg_0, arg_1);
            };
            int64_t ctor_BERGeneralDecoder(struct BufferedTransformation* arg_0, uint8_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct BERGeneralDecoder*, struct BufferedTransformation*, uint8_t);
                return (org_ptr(0x14054d080L))(this, arg_0, arg_1);
            };
            void CheckByte(uint8_t arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct BERGeneralDecoder*, uint8_t);
                (org_ptr(0x14054d3e0L))(this, arg_0);
            };
            bool EndReached()
            {
                using org_ptr = bool (WINAPIV*)(struct BERGeneralDecoder*);
                return (org_ptr(0x14054d310L))(this);
            };
            void Init(uint8_t arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct BERGeneralDecoder*, uint8_t);
                (org_ptr(0x14054d1c0L))(this, arg_0);
            };
            bool IsDefiniteLength()
            {
                using org_ptr = bool (WINAPIV*)(struct BERGeneralDecoder*);
                return (org_ptr(0x14054e290L))(this);
            };
            void MessageEnd()
            {
                using org_ptr = void (WINAPIV*)(struct BERGeneralDecoder*);
                (org_ptr(0x14054d430L))(this);
            };
            uint8_t PeekByte()
            {
                using org_ptr = uint8_t (WINAPIV*)(struct BERGeneralDecoder*);
                return (org_ptr(0x14054d3a0L))(this);
            };
            uint64_t ReduceLength(uint64_t arg_0)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct BERGeneralDecoder*, uint64_t);
                return (org_ptr(0x14054d5e0L))(this, arg_0);
            };
            uint64_t RemainingLength()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct BERGeneralDecoder*);
                return (org_ptr(0x14054e2a0L))(this);
            };
            void StoreInitialize(struct NameValuePairs* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct BERGeneralDecoder*, struct NameValuePairs*);
                (org_ptr(0x14054e460L))(this, arg_0);
            };
            ~BERGeneralDecoder()
            {
                using org_ptr = int64_t (WINAPIV*)(struct BERGeneralDecoder*);
                (org_ptr(0x14054d260L))(this);
            };
            int64_t dtor_BERGeneralDecoder()
            {
                using org_ptr = int64_t (WINAPIV*)(struct BERGeneralDecoder*);
                return (org_ptr(0x14054d260L))(this);
            };
        };
        template<>
        struct  TF_VerifierBase : TF_SignatureSchemeBase<PK_Verifier,TF_Base<TrapdoorFunction,PK_SignatureMessageEncodingMethod> >
        {
        public:
            void InputSignature(struct PK_MessageAccumulator* arg_0, uint8_t* arg_1, uint64_t arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct TF_VerifierBase*, struct PK_MessageAccumulator*, uint8_t*, uint64_t);
                (org_ptr(0x140623020L))(this, arg_0, arg_1, arg_2);
            };
            struct DecodingResult* RecoverAndRestart(short retstr, struct DecodingResult* arg_0, uint8_t* arg_1)
            {
                using org_ptr = struct DecodingResult* (WINAPIV*)(struct TF_VerifierBase*, short, struct DecodingResult*, uint8_t*);
                return (org_ptr(0x1406234c0L))(this, retstr, arg_0, arg_1);
            };
            bool VerifyAndRestart(struct PK_MessageAccumulator* arg_0)
            {
                using org_ptr = bool (WINAPIV*)(struct TF_VerifierBase*, struct PK_MessageAccumulator*);
                return (org_ptr(0x1406232d0L))(this, arg_0);
            };
        };
        template<>
        struct  AlgorithmImpl<IteratedHash<unsigned __int64,EnumToType<enum ByteOrder,1>,128,HashTransformation>,SHA512> : IteratedHash<unsigned __int64,EnumToType<enum ByteOrder,1>,128,HashTransformation>
        {
        };
        template<>
        struct  ClonableImpl<SHA512,AlgorithmImpl<IteratedHash<unsigned __int64,EnumToType<enum ByteOrder,1>,128,HashTransformation>,SHA512> > : AlgorithmImpl<IteratedHash<unsigned __int64,EnumToType<enum ByteOrder,1>,128,HashTransformation>,SHA512>
        {
        };
        template<>
        struct  DL_ObjectImpl<DL_VerifierBase<EC2NPoint>,DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1>,DL_PublicKey_EC<EC2N> > : DL_ObjectImplBase<DL_VerifierBase<EC2NPoint>,DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1>,DL_PublicKey_EC<EC2N> >
        {
        };
        template<>
        struct  SHA1 : IteratedHashWithStaticTransform<unsigned int,EnumToType<enum ByteOrder,1>,64,20,SHA1,0>
        {
        public:
            static void InitState(unsigned int* arg_0)
            {
                using org_ptr = void (WINAPIV*)(unsigned int*);
                (org_ptr(0x1406063e0L))(arg_0);
            };
            SHA1(struct SHA1* __that)
            {
                using org_ptr = void (WINAPIV*)(struct SHA1*, struct SHA1*);
                (org_ptr(0x140464170L))(this, __that);
            };
            void ctor_SHA1(struct SHA1* __that)
            {
                using org_ptr = void (WINAPIV*)(struct SHA1*, struct SHA1*);
                (org_ptr(0x140464170L))(this, __that);
            };
            SHA1()
            {
                using org_ptr = void (WINAPIV*)(struct SHA1*);
                (org_ptr(0x140463e80L))(this);
            };
            void ctor_SHA1()
            {
                using org_ptr = void (WINAPIV*)(struct SHA1*);
                (org_ptr(0x140463e80L))(this);
            };
            static char* StaticAlgorithmName()
            {
                using org_ptr = char* (WINAPIV*)();
                return (org_ptr(0x140464160L))();
            };
            static void Transform(unsigned int* arg_0, unsigned int* arg_1)
            {
                using org_ptr = void (WINAPIV*)(unsigned int*, unsigned int*);
                (org_ptr(0x140606430L))(arg_0, arg_1);
            };
            ~SHA1()
            {
                using org_ptr = void (WINAPIV*)(struct SHA1*);
                (org_ptr(0x140463d30L))(this);
            };
            void dtor_SHA1()
            {
                using org_ptr = void (WINAPIV*)(struct SHA1*);
                (org_ptr(0x140463d30L))(this);
            };
        };
        template<>
        struct ObjectHolder<SHA1>
        {
            SHA1 m_object;
        };
        template<>
        struct  DL_Algorithm_GDSA<ECPPoint> : DL_ElgamalLikeSignatureAlgorithm<ECPPoint>
        {
        public:
            int64_t Sign(struct Integer* arg_0, int64_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(int64_t, struct Integer*, int64_t);
                return (org_ptr(0x140559980L))(b, arg_0, arg_1);
            };
            int64_t Verify(struct Integer* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Integer*, struct Integer*);
                return (org_ptr(0x140559c00L))(a, arg_0);
            };
        };
        template<>
        struct  DL_Algorithm_ECDSA<ECP> : DL_Algorithm_GDSA<ECPPoint>
        {
        };
        struct  SignatureVerificationFilter : FilterWithBufferedInput
        {
                enum Flags
                {
                    SIGNATURE_AT_BEGIN = 0x1,
                    PUT_MESSAGE = 0x2,
                    PUT_SIGNATURE = 0x4,
                    PUT_RESULT = 0x8,
                    THROW_EXCEPTION = 0x10,
                    DEFAULT_FLAGS = 0x9,
                };
                struct  SignatureVerificationFailed : Exception
                {
                public:
                    SignatureVerificationFailed(struct SignatureVerificationFailed* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct SignatureVerificationFailed*, struct SignatureVerificationFailed*);
                        (org_ptr(0x1405ffb20L))(this, arg_0);
                    };
                    int64_t ctor_SignatureVerificationFailed(struct SignatureVerificationFailed* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct SignatureVerificationFailed*, struct SignatureVerificationFailed*);
                        return (org_ptr(0x1405ffb20L))(this, arg_0);
                    };
                    SignatureVerificationFailed()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct SignatureVerificationFailed*);
                        (org_ptr(0x1405ffa00L))(this);
                    };
                    int64_t ctor_SignatureVerificationFailed()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct SignatureVerificationFailed*);
                        return (org_ptr(0x1405ffa00L))(this);
                    };
                    ~SignatureVerificationFailed()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct SignatureVerificationFailed*);
                        (org_ptr(0x1405ffb00L))(this);
                    };
                    int64_t dtor_SignatureVerificationFailed()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct SignatureVerificationFailed*);
                        return (org_ptr(0x1405ffb00L))(this);
                    };
                };
            PK_Verifier *m_verifier;
            member_ptr<PK_MessageAccumulator> m_messageAccumulator;
            unsigned int m_flags;
            SecBlock<unsigned char,AllocatorWithCleanup<unsigned char,0> > m_signature;
            bool m_verified;
        public:
            void FirstPut(uint8_t* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct SignatureVerificationFilter*, uint8_t*);
                (org_ptr(0x1405fdaf0L))(this, arg_0);
            };
            void InitializeDerivedAndReturnNewSizes(struct NameValuePairs* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t* arg_3)
            {
                using org_ptr = void (WINAPIV*)(struct SignatureVerificationFilter*, struct NameValuePairs*, uint64_t*, uint64_t*, uint64_t*);
                (org_ptr(0x1405fd9b0L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            void LastPut(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct SignatureVerificationFilter*, uint8_t*, uint64_t);
                (org_ptr(0x1405fdd70L))(this, arg_0, arg_1);
            };
            void NextPutMultiple(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct SignatureVerificationFilter*, uint8_t*, uint64_t);
                (org_ptr(0x1405fdce0L))(this, arg_0, arg_1);
            };
            SignatureVerificationFilter(struct PK_Verifier* arg_0, struct BufferedTransformation* arg_1, unsigned int arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct SignatureVerificationFilter*, struct PK_Verifier*, struct BufferedTransformation*, unsigned int);
                (org_ptr(0x1405fd840L))(this, arg_0, arg_1, arg_2);
            };
            int64_t ctor_SignatureVerificationFilter(struct PK_Verifier* arg_0, struct BufferedTransformation* arg_1, unsigned int arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct SignatureVerificationFilter*, struct PK_Verifier*, struct BufferedTransformation*, unsigned int);
                return (org_ptr(0x1405fd840L))(this, arg_0, arg_1, arg_2);
            };
            ~SignatureVerificationFilter()
            {
                using org_ptr = int64_t (WINAPIV*)(struct SignatureVerificationFilter*);
                (org_ptr(0x1405ff970L))(this);
            };
            int64_t dtor_SignatureVerificationFilter()
            {
                using org_ptr = int64_t (WINAPIV*)(struct SignatureVerificationFilter*);
                return (org_ptr(0x1405ff970L))(this);
            };
        };
        struct ConstByteArrayParameter
        {
            bool m_deepCopy;
            const char *m_data;
            unsigned __int64 m_size;
            SecBlock<unsigned char,AllocatorWithCleanup<unsigned char,0> > m_block;
        public:
            void Assign(char* data, uint64_t size, bool deepCopy)
            {
                using org_ptr = void (WINAPIV*)(struct ConstByteArrayParameter*, char*, uint64_t, bool);
                (org_ptr(0x140463960L))(this, data, size, deepCopy);
            };
            ConstByteArrayParameter(struct ConstByteArrayParameter* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ConstByteArrayParameter*, struct ConstByteArrayParameter*);
                (org_ptr(0x1405950b0L))(this, arg_0);
            };
            int64_t ctor_ConstByteArrayParameter(struct ConstByteArrayParameter* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ConstByteArrayParameter*, struct ConstByteArrayParameter*);
                return (org_ptr(0x1405950b0L))(this, arg_0);
            };
            ConstByteArrayParameter(char* data, bool deepCopy)
            {
                using org_ptr = void (WINAPIV*)(struct ConstByteArrayParameter*, char*, bool);
                (org_ptr(0x140463860L))(this, data, deepCopy);
            };
            void ctor_ConstByteArrayParameter(char* data, bool deepCopy)
            {
                using org_ptr = void (WINAPIV*)(struct ConstByteArrayParameter*, char*, bool);
                (org_ptr(0x140463860L))(this, data, deepCopy);
            };
            ConstByteArrayParameter(uint8_t* arg_0, uint64_t arg_1, bool arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ConstByteArrayParameter*, uint8_t*, uint64_t, bool);
                (org_ptr(0x1405ef1b0L))(this, arg_0, arg_1, arg_2);
            };
            int64_t ctor_ConstByteArrayParameter(uint8_t* arg_0, uint64_t arg_1, bool arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ConstByteArrayParameter*, uint8_t*, uint64_t, bool);
                return (org_ptr(0x1405ef1b0L))(this, arg_0, arg_1, arg_2);
            };
            char* begin()
            {
                using org_ptr = char* (WINAPIV*)(struct ConstByteArrayParameter*);
                return (org_ptr(0x140463a10L))(this);
            };
            uint64_t size()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct ConstByteArrayParameter*);
                return (org_ptr(0x140463a90L))(this);
            };
            ~ConstByteArrayParameter()
            {
                using org_ptr = void (WINAPIV*)(struct ConstByteArrayParameter*);
                (org_ptr(0x140463b10L))(this);
            };
            void dtor_ConstByteArrayParameter()
            {
                using org_ptr = void (WINAPIV*)(struct ConstByteArrayParameter*);
                (org_ptr(0x140463b10L))(this);
            };
        };
        template<>
        struct  TF_DecryptorBase : TF_CryptoSystemBase<PK_Decryptor,TF_Base<TrapdoorFunctionInverse,PK_EncryptionMessageEncodingMethod> >
        {
        public:
            struct DecodingResult* Decrypt(struct DecodingResult* retstr, struct RandomNumberGenerator* arg_0, uint8_t* arg_1, uint64_t arg_2, uint8_t* arg_3, struct NameValuePairs* arg_4)
            {
                using org_ptr = struct DecodingResult* (WINAPIV*)(struct TF_DecryptorBase*, struct DecodingResult*, struct RandomNumberGenerator*, uint8_t*, uint64_t, uint8_t*, struct NameValuePairs*);
                return (org_ptr(0x1406236e0L))(this, retstr, arg_0, arg_1, arg_2, arg_3, arg_4);
            };
        };
        template<>
        struct  IteratedHashWithStaticTransform<unsigned __int64,EnumToType<enum ByteOrder,1>,128,64,SHA512,0> : ClonableImpl<SHA512,AlgorithmImpl<IteratedHash<unsigned __int64,EnumToType<enum ByteOrder,1>,128,HashTransformation>,SHA512> >
        {
            FixedSizeSecBlock<unsigned __int64,16,FixedSizeAllocatorWithCleanup<unsigned __int64,16,NullAllocator<unsigned __int64>,0> > m_state;
        };
        template<>
        struct member_ptr<RandomNumberGenerator>
        {
            RandomNumberGenerator *m_p;
        };
        template<>
        struct Singleton<DL_Algorithm_GDSA<Integer>,NewObject<DL_Algorithm_GDSA<Integer> >,0>
        {
            NewObject<DL_Algorithm_GDSA<Integer> > m_objectFactory;
        };
        struct  HashVerificationFilter : FilterWithBufferedInput
        {
                ;
                struct  HashVerificationFailed : Exception
                {
                public:
                    HashVerificationFailed(struct HashVerificationFailed* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct HashVerificationFailed*, struct HashVerificationFailed*);
                        (org_ptr(0x1405ff880L))(this, arg_0);
                    };
                    int64_t ctor_HashVerificationFailed(struct HashVerificationFailed* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct HashVerificationFailed*, struct HashVerificationFailed*);
                        return (org_ptr(0x1405ff880L))(this, arg_0);
                    };
                    HashVerificationFailed()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct HashVerificationFailed*);
                        (org_ptr(0x1405ff760L))(this);
                    };
                    int64_t ctor_HashVerificationFailed()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct HashVerificationFailed*);
                        return (org_ptr(0x1405ff760L))(this);
                    };
                    ~HashVerificationFailed()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct HashVerificationFailed*);
                        (org_ptr(0x1405ff860L))(this);
                    };
                    int64_t dtor_HashVerificationFailed()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct HashVerificationFailed*);
                        return (org_ptr(0x1405ff860L))(this);
                    };
                };
            HashTransformation *m_hashModule;
            unsigned int m_flags;
            SecBlock<unsigned char,AllocatorWithCleanup<unsigned char,0> > m_expectedHash;
            bool m_verified;
        public:
            void FirstPut(uint8_t* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct HashVerificationFilter*, uint8_t*);
                (org_ptr(0x1405fd100L))(this, arg_0);
            };
            HashVerificationFilter(struct HashTransformation* arg_0, struct BufferedTransformation* arg_1, unsigned int arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct HashVerificationFilter*, struct HashTransformation*, struct BufferedTransformation*, unsigned int);
                (org_ptr(0x1405fcec0L))(this, arg_0, arg_1, arg_2);
            };
            int64_t ctor_HashVerificationFilter(struct HashTransformation* arg_0, struct BufferedTransformation* arg_1, unsigned int arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct HashVerificationFilter*, struct HashTransformation*, struct BufferedTransformation*, unsigned int);
                return (org_ptr(0x1405fcec0L))(this, arg_0, arg_1, arg_2);
            };
            void InitializeDerivedAndReturnNewSizes(struct NameValuePairs* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t* arg_3)
            {
                using org_ptr = void (WINAPIV*)(struct HashVerificationFilter*, struct NameValuePairs*, uint64_t*, uint64_t*, uint64_t*);
                (org_ptr(0x1405fcff0L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            void LastPut(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct HashVerificationFilter*, uint8_t*, uint64_t);
                (org_ptr(0x1405fd290L))(this, arg_0, arg_1);
            };
            void NextPutMultiple(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct HashVerificationFilter*, uint8_t*, uint64_t);
                (org_ptr(0x1405fd210L))(this, arg_0, arg_1);
            };
            ~HashVerificationFilter()
            {
                using org_ptr = int64_t (WINAPIV*)(struct HashVerificationFilter*);
                (org_ptr(0x1405ff6e0L))(this);
            };
            int64_t dtor_HashVerificationFilter()
            {
                using org_ptr = int64_t (WINAPIV*)(struct HashVerificationFilter*);
                return (org_ptr(0x1405ff6e0L))(this);
            };
        };
        template<>
        struct GetValueHelperClass<DL_PublicKeyImpl<DL_GroupParameters_EC<ECP> >,DL_PublicKey<ECPPoint> >
        {
            DL_PublicKeyImpl<DL_GroupParameters_EC<ECP> > *m_pObject;
            const char *m_name;
            type_info *m_valueType;
            void *m_pValue;
            bool m_found;
            bool m_getValueNames;
        };
        template<>
        struct  AlgorithmParameters<AlgorithmParameters<NullNameValuePairs,RandomNumberGenerator *>,int> : AlgorithmParametersBase2<int>
        {
            AlgorithmParameters<NullNameValuePairs,RandomNumberGenerator *> m_parent;
        };
        template<>
        struct  AutoSeededX917RNG<Rijndael> : RandomNumberGenerator, NotCopyable
        {
            member_ptr<RandomNumberGenerator> m_rng;
        public:
            int64_t Reseed()
            {
                using org_ptr = int64_t (WINAPIV*)(uint8_t*);
                return (org_ptr(0x140588bd0L))(arg_0);
            };
        };
        template<>
        struct AssignFromHelperClass<DL_PrivateKey<ECPPoint>,DL_PrivateKey<ECPPoint> >
        {
            DL_PrivateKey<ECPPoint> *m_pObject;
            NameValuePairs *m_source;
            bool m_done;
        };
        struct  BERSequenceDecoder : BERGeneralDecoder
        {
        public:
            BERSequenceDecoder(struct BERSequenceDecoder* arg_0, uint8_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct BERSequenceDecoder*, struct BERSequenceDecoder*, uint8_t);
                (org_ptr(0x14054e580L))(this, arg_0, arg_1);
            };
            int64_t ctor_BERSequenceDecoder(struct BERSequenceDecoder* arg_0, uint8_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct BERSequenceDecoder*, struct BERSequenceDecoder*, uint8_t);
                return (org_ptr(0x14054e580L))(this, arg_0, arg_1);
            };
            BERSequenceDecoder(struct BufferedTransformation* arg_0, uint8_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct BERSequenceDecoder*, struct BufferedTransformation*, uint8_t);
                (org_ptr(0x14054e520L))(this, arg_0, arg_1);
            };
            int64_t ctor_BERSequenceDecoder(struct BufferedTransformation* arg_0, uint8_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct BERSequenceDecoder*, struct BufferedTransformation*, uint8_t);
                return (org_ptr(0x14054e520L))(this, arg_0, arg_1);
            };
            ~BERSequenceDecoder()
            {
                using org_ptr = int64_t (WINAPIV*)(struct BERSequenceDecoder*);
                (org_ptr(0x14054e620L))(this);
            };
            int64_t dtor_BERSequenceDecoder()
            {
                using org_ptr = int64_t (WINAPIV*)(struct BERSequenceDecoder*);
                return (org_ptr(0x14054e620L))(this);
            };
        };
        struct  CBC_CTS_Encryption : CBC_Encryption
        {
            char *m_stolenIV;
        public:
            CBC_CTS_Encryption()
            {
                using org_ptr = int64_t (WINAPIV*)(struct CBC_CTS_Encryption*);
                (org_ptr(0x14055d220L))(this);
            };
            int64_t ctor_CBC_CTS_Encryption()
            {
                using org_ptr = int64_t (WINAPIV*)(struct CBC_CTS_Encryption*);
                return (org_ptr(0x14055d220L))(this);
            };
            unsigned int MinLastBlockSize()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct CBC_CTS_Encryption*);
                return (org_ptr(0x14055b700L))(this);
            };
            void ProcessLastBlock(uint8_t* arg_0, uint8_t* arg_1, uint64_t arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct CBC_CTS_Encryption*, uint8_t*, uint8_t*, uint64_t);
                (org_ptr(0x140619290L))(this, arg_0, arg_1, arg_2);
            };
            void UncheckedSetKey(uint8_t* arg_0, unsigned int arg_1, struct NameValuePairs* arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct CBC_CTS_Encryption*, uint8_t*, unsigned int, struct NameValuePairs*);
                (org_ptr(0x14055b720L))(this, arg_0, arg_1, arg_2);
            };
            ~CBC_CTS_Encryption()
            {
                using org_ptr = int64_t (WINAPIV*)(struct CBC_CTS_Encryption*);
                (org_ptr(0x14055d240L))(this);
            };
            int64_t dtor_CBC_CTS_Encryption()
            {
                using org_ptr = int64_t (WINAPIV*)(struct CBC_CTS_Encryption*);
                return (org_ptr(0x14055d240L))(this);
            };
        };
        template<>
        struct  CipherModeFinalTemplate_ExternalCipher<CBC_CTS_Encryption> : CBC_CTS_Encryption
        {
        };
        struct  CBC_CTS_Decryption : CBC_Decryption
        {
        public:
            CBC_CTS_Decryption()
            {
                using org_ptr = int64_t (WINAPIV*)(struct CBC_CTS_Decryption*);
                (org_ptr(0x14055d2a0L))(this);
            };
            int64_t ctor_CBC_CTS_Decryption()
            {
                using org_ptr = int64_t (WINAPIV*)(struct CBC_CTS_Decryption*);
                return (org_ptr(0x14055d2a0L))(this);
            };
            unsigned int MinLastBlockSize()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct CBC_CTS_Decryption*);
                return (org_ptr(0x14055b8e0L))(this);
            };
            void ProcessLastBlock(uint8_t* arg_0, uint8_t* arg_1, uint64_t arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct CBC_CTS_Decryption*, uint8_t*, uint8_t*, uint64_t);
                (org_ptr(0x140619680L))(this, arg_0, arg_1, arg_2);
            };
            ~CBC_CTS_Decryption()
            {
                using org_ptr = int64_t (WINAPIV*)(struct CBC_CTS_Decryption*);
                (org_ptr(0x14055d2c0L))(this);
            };
            int64_t dtor_CBC_CTS_Decryption()
            {
                using org_ptr = int64_t (WINAPIV*)(struct CBC_CTS_Decryption*);
                return (org_ptr(0x14055d2c0L))(this);
            };
        };
        template<>
        struct  CipherModeFinalTemplate_ExternalCipher<CBC_CTS_Decryption> : CBC_CTS_Decryption
        {
        };
        struct  CBC_CTS_Mode_ExternalCipher : CipherModeDocumentation
        {
        };
        template<>
        struct GetValueHelperClass<DL_GroupParameters_IntegerBasedImpl<ModExpPrecomputation,DL_FixedBasePrecomputationImpl<Integer> >,DL_GroupParameters_IntegerBased>
        {
            DL_GroupParameters_IntegerBasedImpl<ModExpPrecomputation,DL_FixedBasePrecomputationImpl<Integer> > *m_pObject;
            const char *m_name;
            type_info *m_valueType;
            void *m_pValue;
            bool m_found;
            bool m_getValueNames;
        };
        template<>
        struct GetValueHelperClass<DL_GroupParameters<Integer>,DL_GroupParameters<Integer> >
        {
            DL_GroupParameters<Integer> *m_pObject;
            const char *m_name;
            type_info *m_valueType;
            void *m_pValue;
            bool m_found;
            bool m_getValueNames;
        };
        template<>
        struct GetValueHelperClass<DL_GroupParameters<EC2NPoint>,DL_GroupParameters<EC2NPoint> >
        {
            DL_GroupParameters<EC2NPoint> *m_pObject;
            const char *m_name;
            type_info *m_valueType;
            void *m_pValue;
            bool m_found;
            bool m_getValueNames;
        };
        template<>
        struct  DL_SignerImpl<DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1> > : DL_ObjectImpl<DL_SignerBase<EC2NPoint>,DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1>,DL_PrivateKey_WithSignaturePairwiseConsistencyTest<DL_PrivateKey_EC<EC2N>,ECDSA<EC2N,SHA1> > >
        {
        };
        template<>
        struct  PK_FinalTemplate<DL_SignerImpl<DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1> > > : DL_SignerImpl<DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1> >
        {
        };
        template<>
        struct  CFB_EncryptionTemplate<AbstractPolicyHolder<CFB_CipherAbstractPolicy,SimpleKeyedTransformation<StreamTransformation> > > : CFB_CipherTemplate<AbstractPolicyHolder<CFB_CipherAbstractPolicy,SimpleKeyedTransformation<StreamTransformation> > >
        {
        };
        struct  GF2NPP : GF2NP
        {
            unsigned int t0;
            unsigned int t1;
            unsigned int t2;
            unsigned int t3;
        public:
            struct GF2NP* Clone()
            {
                using org_ptr = struct GF2NP* (WINAPIV*)(struct GF2NPP*);
                return (org_ptr(0x140581920L))(this);
            };
            void DEREncode(struct BufferedTransformation* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct GF2NPP*, struct BufferedTransformation*);
                (org_ptr(0x14062b780L))(this, arg_0);
            };
            GF2NPP(struct GF2NPP* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct GF2NPP*, struct GF2NPP*);
                (org_ptr(0x1405819e0L))(this, arg_0);
            };
            int64_t ctor_GF2NPP(struct GF2NPP* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct GF2NPP*, struct GF2NPP*);
                return (org_ptr(0x1405819e0L))(this, arg_0);
            };
            GF2NPP(unsigned int arg_0, unsigned int arg_1, unsigned int arg_2, unsigned int arg_3, unsigned int arg_4)
            {
                using org_ptr = int64_t (WINAPIV*)(struct GF2NPP*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int);
                (org_ptr(0x1405816a0L))(this, arg_0, arg_1, arg_2, arg_3, arg_4);
            };
            int64_t ctor_GF2NPP(unsigned int arg_0, unsigned int arg_1, unsigned int arg_2, unsigned int arg_3, unsigned int arg_4)
            {
                using org_ptr = int64_t (WINAPIV*)(struct GF2NPP*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int);
                return (org_ptr(0x1405816a0L))(this, arg_0, arg_1, arg_2, arg_3, arg_4);
            };
            ~GF2NPP()
            {
                using org_ptr = int64_t (WINAPIV*)(struct GF2NPP*);
                (org_ptr(0x140581bc0L))(this);
            };
            int64_t dtor_GF2NPP()
            {
                using org_ptr = int64_t (WINAPIV*)(struct GF2NPP*);
                return (org_ptr(0x140581bc0L))(this);
            };
        };
        struct  InvalidRounds : InvalidArgument
        {
        };
        template<>
        struct  AlgorithmParametersBase2<ConstByteArrayParameter> : AlgorithmParametersBase
        {
            ConstByteArrayParameter m_value;
        };
        template<>
        struct GetValueHelperClass<DL_GroupParameters<ECPPoint>,DL_GroupParameters<ECPPoint> >
        {
            DL_GroupParameters<ECPPoint> *m_pObject;
            const char *m_name;
            type_info *m_valueType;
            void *m_pValue;
            bool m_found;
            bool m_getValueNames;
        };
        template<>
        struct  SHA512 : IteratedHashWithStaticTransform<unsigned __int64,EnumToType<enum ByteOrder,1>,128,64,SHA512,0>
        {
        public:
            static void InitState(uint64_t* arg_0)
            {
                using org_ptr = void (WINAPIV*)(uint64_t*);
                (org_ptr(0x14060a750L))(arg_0);
            };
            static void Transform(uint64_t* arg_0, uint64_t* arg_1)
            {
                using org_ptr = void (WINAPIV*)(uint64_t*, uint64_t*);
                (org_ptr(0x14060a780L))(arg_0, arg_1);
            };
        };
        template<>
        struct  AlgorithmImpl<SimpleKeyingInterfaceImpl<HMAC_Base,HMAC<SHA1> >,HMAC<SHA1> > : SimpleKeyingInterfaceImpl<HMAC_Base,HMAC<SHA1> >
        {
        };
        template<>
        struct  MessageAuthenticationCodeImpl<HMAC_Base,HMAC<SHA1> > : AlgorithmImpl<SimpleKeyingInterfaceImpl<HMAC_Base,HMAC<SHA1> >,HMAC<SHA1> >
        {
        };
        template<>
        struct  HMAC<SHA1> : MessageAuthenticationCodeImpl<HMAC_Base,HMAC<SHA1> >
        {
            SHA1 m_hash;
        public:
            struct HashTransformation* AccessHash()
            {
                using org_ptr = struct HashTransformation* (WINAPIV*)(struct HMAC<SHA1>*);
                return (org_ptr(0x1404656d0L))(this);
            };
            struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* AlgorithmName(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* result)
            {
                using org_ptr = struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (WINAPIV*)(struct HMAC<SHA1>*, struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*);
                return (org_ptr(0x1404653f0L))(this, result);
            };
            HMAC(char* key, uint64_t length)
            {
                using org_ptr = void (WINAPIV*)(struct HMAC<SHA1>*, char*, uint64_t);
                (org_ptr(0x140465160L))(this, key, length);
            };
            void ctor_HMAC(char* key, uint64_t length)
            {
                using org_ptr = void (WINAPIV*)(struct HMAC<SHA1>*, char*, uint64_t);
                (org_ptr(0x140465160L))(this, key, length);
            };
            static struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* StaticAlgorithmName(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* result)
            {
                using org_ptr = struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (WINAPIV*)(struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >*);
                return (org_ptr(0x140465b80L))(result);
            };
            ~HMAC()
            {
                using org_ptr = void (WINAPIV*)(struct HMAC<SHA1>*);
                (org_ptr(0x140464ec0L))(this);
            };
            void dtor_HMAC()
            {
                using org_ptr = void (WINAPIV*)(struct HMAC<SHA1>*);
                (org_ptr(0x140464ec0L))(this);
            };
        };
        struct  BlockCipherDocumentation
        {
        };
        template<>
        struct TF_Base<RandomizedTrapdoorFunctionInverse,PK_SignatureMessageEncodingMethod>
        {
            TF_Base<RandomizedTrapdoorFunctionInverse,PK_SignatureMessageEncodingMethod>Vtbl *vfptr;
        };
        template<>
        struct TF_Base<RandomizedTrapdoorFunctionInverse,PK_SignatureMessageEncodingMethod>Vtbl
        {
            TrapdoorFunctionBounds *(WINAPIV *GetTrapdoorFunctionBounds)(TF_Base<RandomizedTrapdoorFunctionInverse,PK_SignatureMessageEncodingMethod> *_this);
            RandomizedTrapdoorFunctionInverse *(WINAPIV *GetTrapdoorFunctionInterface)(TF_Base<RandomizedTrapdoorFunctionInverse,PK_SignatureMessageEncodingMethod> *_this);
            PK_SignatureMessageEncodingMethod *(WINAPIV *GetMessageEncodingInterface)(TF_Base<RandomizedTrapdoorFunctionInverse,PK_SignatureMessageEncodingMethod> *_this);
        };
        template<>
        struct  NewObject<DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0> >
        {
        };
        template<>
        struct Singleton<DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0>,NewObject<DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0> >,0>
        {
            NewObject<DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0> > m_objectFactory;
        };
        template<>
        struct  DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0> : DL_SymmetricEncryptionAlgorithm
        {
        public:
            DL_EncryptionAlgorithm_Xor()
            {
                using org_ptr = void (WINAPIV*)(struct DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0>*);
                (org_ptr(0x1404645d0L))(this);
            };
            void ctor_DL_EncryptionAlgorithm_Xor()
            {
                using org_ptr = void (WINAPIV*)(struct DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0>*);
                (org_ptr(0x1404645d0L))(this);
            };
            uint64_t GetMaxSymmetricPlaintextLength(uint64_t ciphertextLength)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0>*, uint64_t);
                return (org_ptr(0x1404646f0L))(this, ciphertextLength);
            };
            uint64_t GetSymmetricCiphertextLength(uint64_t plaintextLength)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0>*, uint64_t);
                return (org_ptr(0x1404646d0L))(this, plaintextLength);
            };
            uint64_t GetSymmetricKeyLength(uint64_t plaintextLength)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0>*, uint64_t);
                return (org_ptr(0x1404646b0L))(this, plaintextLength);
            };
            bool ParameterSupported(char* name)
            {
                using org_ptr = bool (WINAPIV*)(struct DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0>*, char*);
                return (org_ptr(0x140464630L))(this, name);
            };
            struct DecodingResult* SymmetricDecrypt(struct DecodingResult* result, char* key, char* ciphertext, uint64_t ciphertextLength, char* plaintext, struct NameValuePairs* parameters)
            {
                using org_ptr = struct DecodingResult* (WINAPIV*)(struct DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0>*, struct DecodingResult*, char*, char*, uint64_t, char*, struct NameValuePairs*);
                return (org_ptr(0x140464aa0L))(this, result, key, ciphertext, ciphertextLength, plaintext, parameters);
            };
            void SymmetricEncrypt(struct RandomNumberGenerator* rng, char* key, char* plaintext, uint64_t plaintextLength, char* ciphertext, struct NameValuePairs* parameters)
            {
                using org_ptr = void (WINAPIV*)(struct DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0>*, struct RandomNumberGenerator*, char*, char*, uint64_t, char*, struct NameValuePairs*);
                (org_ptr(0x140464750L))(this, rng, key, plaintext, plaintextLength, ciphertext, parameters);
            };
        };
        template<>
        struct  MaurerRandomnessTest : Bufferless<Sink>
        {
            long double sum;
            unsigned int n;
            unsigned int tab[256];
        public:
            unsigned int BytesNeeded()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct MaurerRandomnessTest*);
                return (org_ptr(0x140651ea0L))(this);
            };
            double GetTestValue()
            {
                using org_ptr = double (WINAPIV*)(struct MaurerRandomnessTest*);
                return (org_ptr(0x140651aa0L))(this);
            };
            MaurerRandomnessTest()
            {
                using org_ptr = int64_t (WINAPIV*)(struct MaurerRandomnessTest*);
                (org_ptr(0x140651930L))(this);
            };
            int64_t ctor_MaurerRandomnessTest()
            {
                using org_ptr = int64_t (WINAPIV*)(struct MaurerRandomnessTest*);
                return (org_ptr(0x140651930L))(this);
            };
            uint64_t Put2(uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct MaurerRandomnessTest*, uint8_t*, uint64_t, int, bool);
                return (org_ptr(0x1406519c0L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            ~MaurerRandomnessTest()
            {
                using org_ptr = int64_t (WINAPIV*)(struct MaurerRandomnessTest*);
                (org_ptr(0x140651e80L))(this);
            };
            int64_t dtor_MaurerRandomnessTest()
            {
                using org_ptr = int64_t (WINAPIV*)(struct MaurerRandomnessTest*);
                return (org_ptr(0x140651e80L))(this);
            };
        };
        template<>
        struct  AbstractPolicyHolder<AdditiveCipherAbstractPolicy,CTR_ModePolicy> : CTR_ModePolicy
        {
        };
        template<>
        struct  AdditiveCipherTemplate<AbstractPolicyHolder<AdditiveCipherAbstractPolicy,CTR_ModePolicy> > : AbstractPolicyHolder<AdditiveCipherAbstractPolicy,CTR_ModePolicy>
        {
            SecBlock<unsigned char,AllocatorWithCleanup<unsigned char,0> > m_buffer;
            unsigned __int64 m_leftOver;
        };
        template<>
        struct  BitBucket : Bufferless<Sink>
        {
        public:
            BitBucket()
            {
                using org_ptr = int64_t (WINAPIV*)(struct BitBucket*);
                (org_ptr(0x1405f6660L))(this);
            };
            int64_t ctor_BitBucket()
            {
                using org_ptr = int64_t (WINAPIV*)(struct BitBucket*);
                return (org_ptr(0x1405f6660L))(this);
            };
            void IsolatedInitialize(struct NameValuePairs* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct BitBucket*, struct NameValuePairs*);
                (org_ptr(0x1405f7f70L))(this, arg_0);
            };
            uint64_t Put2(uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct BitBucket*, uint8_t*, uint64_t, int, bool);
                return (org_ptr(0x1405f7f80L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            ~BitBucket()
            {
                using org_ptr = int64_t (WINAPIV*)(struct BitBucket*);
                (org_ptr(0x1405f66e0L))(this);
            };
            int64_t dtor_BitBucket()
            {
                using org_ptr = int64_t (WINAPIV*)(struct BitBucket*);
                return (org_ptr(0x1405f66e0L))(this);
            };
        };
        template<>
        struct simple_ptr<DL_Algorithm_ECDSA<EC2N> >
        {
            DL_Algorithm_ECDSA<EC2N> *m_p;
        };
        template<>
        struct  TF_SignatureSchemeBase<PK_Signer,TF_Base<RandomizedTrapdoorFunctionInverse,PK_SignatureMessageEncodingMethod> > : PK_Signer, TF_Base<RandomizedTrapdoorFunctionInverse,PK_SignatureMessageEncodingMethod>
        {
        };
        template<>
        struct  TF_SignerBase : TF_SignatureSchemeBase<PK_Signer,TF_Base<RandomizedTrapdoorFunctionInverse,PK_SignatureMessageEncodingMethod> >
        {
        public:
            void InputRecoverableMessage(struct PK_MessageAccumulator* arg_0, uint8_t* arg_1, uint64_t arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct TF_SignerBase*, struct PK_MessageAccumulator*, uint8_t*, uint64_t);
                (org_ptr(0x140622820L))(this, arg_0, arg_1, arg_2);
            };
            uint64_t SignAndRestart(struct RandomNumberGenerator* arg_0, struct PK_MessageAccumulator* arg_1, uint8_t* arg_2, bool arg_3)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct TF_SignerBase*, struct RandomNumberGenerator*, struct PK_MessageAccumulator*, uint8_t*, bool);
                return (org_ptr(0x140622bf0L))(this, arg_0, arg_1, arg_2, arg_3);
            };
        };
        struct  UnknownOID : BERDecodeErr
        {
        public:
            UnknownOID(struct UnknownOID* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct UnknownOID*, struct UnknownOID*);
                (org_ptr(0x14058a610L))(this, arg_0);
            };
            int64_t ctor_UnknownOID(struct UnknownOID* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct UnknownOID*, struct UnknownOID*);
                return (org_ptr(0x14058a610L))(this, arg_0);
            };
            UnknownOID()
            {
                using org_ptr = int64_t (WINAPIV*)(struct UnknownOID*);
                (org_ptr(0x1405799b0L))(this);
            };
            int64_t ctor_UnknownOID()
            {
                using org_ptr = int64_t (WINAPIV*)(struct UnknownOID*);
                return (org_ptr(0x1405799b0L))(this);
            };
            ~UnknownOID()
            {
                using org_ptr = int64_t (WINAPIV*)(struct UnknownOID*);
                (org_ptr(0x140579af0L))(this);
            };
            int64_t dtor_UnknownOID()
            {
                using org_ptr = int64_t (WINAPIV*)(struct UnknownOID*);
                return (org_ptr(0x140579af0L))(this);
            };
        };
        template<>
        struct AssignFromHelperClass<DL_PublicKeyImpl<DL_GroupParameters_EC<EC2N> >,DL_PublicKey<EC2NPoint> >
        {
            DL_PublicKeyImpl<DL_GroupParameters_EC<EC2N> > *m_pObject;
            NameValuePairs *m_source;
            bool m_done;
        };
        struct  EncodedObjectFilter : Filter
        {
                enum Flag
                {
                    PUT_OBJECTS = 0x1,
                    PUT_MESSANGE_END_AFTER_EACH_OBJECT = 0x2,
                    PUT_MESSANGE_END_AFTER_ALL_OBJECTS = 0x4,
                    PUT_MESSANGE_SERIES_END_AFTER_ALL_OBJECTS = 0x8,
                };
                enum State
                {
                    IDENTIFIER = 0x0,
                    LENGTH = 0x1,
                    BODY = 0x2,
                    TAIL = 0x3,
                    ALL_DONE = 0x4,
                };
            unsigned int m_flags;
            unsigned int m_nObjects;
            unsigned int m_nCurrentObject;
            unsigned int m_level;
            std::vector<unsigned int,std::allocator<unsigned int> > m_positions;
            ByteQueue m_queue;
            State m_state;
            char m_id;
            unsigned __int64 m_lengthRemaining;
        public:
            struct BufferedTransformation* CurrentTarget()
            {
                using org_ptr = struct BufferedTransformation* (WINAPIV*)(struct EncodedObjectFilter*);
                return (org_ptr(0x14054e420L))(this);
            };
            void Put(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct EncodedObjectFilter*, uint8_t*, uint64_t);
                (org_ptr(0x14054ca60L))(this, arg_0, arg_1);
            };
        };
        struct  SelfTestFailure : Exception
        {
        public:
            SelfTestFailure(struct SelfTestFailure* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct SelfTestFailure*, struct SelfTestFailure*);
                (org_ptr(0x14055c9c0L))(this, arg_0);
            };
            int64_t ctor_SelfTestFailure(struct SelfTestFailure* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct SelfTestFailure*, struct SelfTestFailure*);
                return (org_ptr(0x14055c9c0L))(this, arg_0);
            };
            ~SelfTestFailure()
            {
                using org_ptr = int64_t (WINAPIV*)(struct SelfTestFailure*);
                (org_ptr(0x140554460L))(this);
            };
            int64_t dtor_SelfTestFailure()
            {
                using org_ptr = int64_t (WINAPIV*)(struct SelfTestFailure*);
                return (org_ptr(0x140554460L))(this);
            };
        };
        template<>
        struct GetValueHelperClass<DL_PrivateKey<ECPPoint>,DL_PrivateKey<ECPPoint> >
        {
            DL_PrivateKey<ECPPoint> *m_pObject;
            const char *m_name;
            type_info *m_valueType;
            void *m_pValue;
            bool m_found;
            bool m_getValueNames;
        };
        template<>
        struct  PK_FixedLengthCryptoSystemImpl<PK_Encryptor> : PK_Encryptor
        {
        };
        struct  RandomNumberStore : Store
        {
            RandomNumberGenerator *m_rng;
            unsigned __int64 m_length;
            unsigned __int64 m_count;
        public:
            void StoreInitialize(struct NameValuePairs* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct RandomNumberStore*, struct NameValuePairs*);
                (org_ptr(0x1405fe520L))(this, arg_0);
            };
        };
        template<>
        struct  SourceTemplate<RandomNumberStore> : Source
        {
            RandomNumberStore m_store;
        };
        template<>
        struct  RandomNumberSource : SourceTemplate<RandomNumberStore>
        {
        };
        struct  HashInputTooLong : InvalidDataFormat
        {
        public:
            HashInputTooLong(struct HashInputTooLong* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct HashInputTooLong*, struct HashInputTooLong*);
                (org_ptr(0x14058a4d0L))(this, arg_0);
            };
            int64_t ctor_HashInputTooLong(struct HashInputTooLong* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct HashInputTooLong*, struct HashInputTooLong*);
                return (org_ptr(0x14058a4d0L))(this, arg_0);
            };
            ~HashInputTooLong()
            {
                using org_ptr = int64_t (WINAPIV*)(struct HashInputTooLong*);
                (org_ptr(0x1405706c0L))(this);
            };
            int64_t dtor_HashInputTooLong()
            {
                using org_ptr = int64_t (WINAPIV*)(struct HashInputTooLong*);
                return (org_ptr(0x1405706c0L))(this);
            };
        };
        template<>
        struct  DL_KeyDerivationAlgorithm_P1363<ECPPoint,0,P1363_KDF2<SHA1> > : DL_KeyDerivationAlgorithm<ECPPoint>
        {
        };
        template<>
        struct simple_ptr<DL_KeyDerivationAlgorithm_P1363<ECPPoint,0,P1363_KDF2<SHA1> > >
        {
            DL_KeyDerivationAlgorithm_P1363<ECPPoint,0,P1363_KDF2<SHA1> > *m_p;
        };
        template<>
        struct  Unflushable<Filter> : Filter
        {
        };
        template<>
        struct  Redirector : CustomSignalPropagation<Sink>
        {
                enum Behavior
                {
                    DATA_ONLY = 0x0,
                    PASS_SIGNALS = 0x1,
                    PASS_WAIT_OBJECTS = 0x2,
                    PASS_EVERYTHING = 0x3,
                };
            BufferedTransformation *m_target;
            unsigned int m_behavior;
        public:
            bool GetPassSignals()
            {
                using org_ptr = bool (WINAPIV*)(struct Redirector*);
                return (org_ptr(0x1405fec20L))(this);
            };
            void Initialize(struct NameValuePairs* arg_0, int arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct Redirector*, struct NameValuePairs*, int);
                (org_ptr(0x1405fb130L))(this, arg_0, arg_1);
            };
        };
        template<>
        struct TF_Base<RandomizedTrapdoorFunction,PK_EncryptionMessageEncodingMethod>
        {
            TF_Base<RandomizedTrapdoorFunction,PK_EncryptionMessageEncodingMethod>Vtbl *vfptr;
        };
        template<>
        struct TF_Base<RandomizedTrapdoorFunction,PK_EncryptionMessageEncodingMethod>Vtbl
        {
            TrapdoorFunctionBounds *(WINAPIV *GetTrapdoorFunctionBounds)(TF_Base<RandomizedTrapdoorFunction,PK_EncryptionMessageEncodingMethod> *_this);
            RandomizedTrapdoorFunction *(WINAPIV *GetTrapdoorFunctionInterface)(TF_Base<RandomizedTrapdoorFunction,PK_EncryptionMessageEncodingMethod> *_this);
            PK_EncryptionMessageEncodingMethod *(WINAPIV *GetMessageEncodingInterface)(TF_Base<RandomizedTrapdoorFunction,PK_EncryptionMessageEncodingMethod> *_this);
        };
        template<>
        struct  TF_CryptoSystemBase<PK_Encryptor,TF_Base<RandomizedTrapdoorFunction,PK_EncryptionMessageEncodingMethod> > : PK_FixedLengthCryptoSystemImpl<PK_Encryptor>, TF_Base<RandomizedTrapdoorFunction,PK_EncryptionMessageEncodingMethod>
        {
        };
        template<>
        struct  TF_EncryptorBase : TF_CryptoSystemBase<PK_Encryptor,TF_Base<RandomizedTrapdoorFunction,PK_EncryptionMessageEncodingMethod> >
        {
        public:
            void Encrypt(struct RandomNumberGenerator* arg_0, uint8_t* arg_1, uint64_t arg_2, uint8_t* arg_3, struct NameValuePairs* arg_4)
            {
                using org_ptr = void (WINAPIV*)(struct TF_EncryptorBase*, struct RandomNumberGenerator*, uint8_t*, uint64_t, uint8_t*, struct NameValuePairs*);
                (org_ptr(0x140623980L))(this, arg_0, arg_1, arg_2, arg_3, arg_4);
            };
        };
        template<>
        struct  SHA224 : IteratedHashWithStaticTransform<unsigned int,EnumToType<enum ByteOrder,1>,64,32,SHA224,28>
        {
        public:
            static void InitState(unsigned int* arg_0)
            {
                using org_ptr = void (WINAPIV*)(unsigned int*);
                (org_ptr(0x140608780L))(arg_0);
            };
        };
        template<>
        struct GetValueHelperClass<DL_PublicKey<EC2NPoint>,DL_PublicKey<EC2NPoint> >
        {
            DL_PublicKey<EC2NPoint> *m_pObject;
            const char *m_name;
            type_info *m_valueType;
            void *m_pValue;
            bool m_found;
            bool m_getValueNames;
        };
        template<>
        struct  PK_MessageAccumulatorImpl<SHA1> : PK_MessageAccumulatorBase, ObjectHolder<SHA1>
        {
        };
        template<>
        struct  NewObject<DL_KeyAgreementAlgorithm_DH<Integer,EnumToType<enum CofactorMultiplicationOption,0> > >
        {
        };
        template<>
        struct  IteratedHashBase<unsigned __int64,SimpleKeyedTransformation<HashTransformation> > : SimpleKeyedTransformation<HashTransformation>
        {
            unsigned __int64 m_countLo;
            unsigned __int64 m_countHi;
        };
        template<>
        struct  NewObject<DL_KeyDerivationAlgorithm_P1363<ECPPoint,0,P1363_KDF2<SHA1> > >
        {
        };
        template<>
        struct Singleton<DL_KeyDerivationAlgorithm_P1363<ECPPoint,0,P1363_KDF2<SHA1> >,NewObject<DL_KeyDerivationAlgorithm_P1363<ECPPoint,0,P1363_KDF2<SHA1> > >,0>
        {
            NewObject<DL_KeyDerivationAlgorithm_P1363<ECPPoint,0,P1363_KDF2<SHA1> > > m_objectFactory;
        };
        template<>
        struct AssignFromHelperClass<DL_PrivateKeyImpl<DL_GroupParameters_DSA>,DL_PrivateKey<Integer> >
        {
            DL_PrivateKeyImpl<DL_GroupParameters_DSA> *m_pObject;
            NameValuePairs *m_source;
            bool m_done;
        };
        template<>
        struct GetValueHelperClass<DL_PublicKey<ECPPoint>,DL_PublicKey<ECPPoint> >
        {
            DL_PublicKey<ECPPoint> *m_pObject;
            const char *m_name;
            type_info *m_valueType;
            void *m_pValue;
            bool m_found;
            bool m_getValueNames;
        };
        template<>
        struct AssignFromHelperClass<DL_PublicKey<ECPPoint>,DL_PublicKey<ECPPoint> >
        {
            DL_PublicKey<ECPPoint> *m_pObject;
            NameValuePairs *m_source;
            bool m_done;
        };
        struct  InvalidKeyLength : InvalidArgument
        {
        public:
            InvalidKeyLength(struct InvalidKeyLength* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct InvalidKeyLength*, struct InvalidKeyLength*);
                (org_ptr(0x1405f6810L))(this, arg_0);
            };
            int64_t ctor_InvalidKeyLength(struct InvalidKeyLength* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct InvalidKeyLength*, struct InvalidKeyLength*);
                return (org_ptr(0x1405f6810L))(this, arg_0);
            };
            ~InvalidKeyLength()
            {
                using org_ptr = int64_t (WINAPIV*)(struct InvalidKeyLength*);
                (org_ptr(0x1405f7ef0L))(this);
            };
            int64_t dtor_InvalidKeyLength()
            {
                using org_ptr = int64_t (WINAPIV*)(struct InvalidKeyLength*);
                return (org_ptr(0x1405f7ef0L))(this);
            };
        };
        template<>
        struct  CipherModeFinalTemplate_ExternalCipher<CBC_Decryption> : CBC_Decryption
        {
        };
        template<>
        struct  NewObject<DL_Algorithm_ECDSA<ECP> >
        {
        };
        template<>
        struct simple_ptr<DL_SignatureMessageEncodingMethod_DSA>
        {
            DL_SignatureMessageEncodingMethod_DSA *m_p;
        };
        template<>
        struct GetValueHelperClass<DL_GroupParameters_GFP,DL_GroupParameters_IntegerBased>
        {
            DL_GroupParameters_GFP *m_pObject;
            const char *m_name;
            type_info *m_valueType;
            void *m_pValue;
            bool m_found;
            bool m_getValueNames;
        };
        template<>
        struct  AlgorithmParameters<NullNameValuePairs,ConstByteArrayParameter> : AlgorithmParametersBase2<ConstByteArrayParameter>
        {
            NullNameValuePairs m_parent;
        };
        struct  CFB_Mode_ExternalCipher : CipherModeDocumentation
        {
        };
        template<>
        struct  CipherModeFinalTemplate_ExternalCipher<ECB_OneWay> : ECB_OneWay
        {
        };
        struct  InvalidCiphertext : InvalidDataFormat
        {
        public:
            InvalidCiphertext(struct InvalidCiphertext* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct InvalidCiphertext*, struct InvalidCiphertext*);
                (org_ptr(0x1405f7630L))(this, arg_0);
            };
            int64_t ctor_InvalidCiphertext(struct InvalidCiphertext* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct InvalidCiphertext*, struct InvalidCiphertext*);
                return (org_ptr(0x1405f7630L))(this, arg_0);
            };
            ~InvalidCiphertext()
            {
                using org_ptr = int64_t (WINAPIV*)(struct InvalidCiphertext*);
                (org_ptr(0x1405f7780L))(this);
            };
            int64_t dtor_InvalidCiphertext()
            {
                using org_ptr = int64_t (WINAPIV*)(struct InvalidCiphertext*);
                return (org_ptr(0x1405f7780L))(this);
            };
        };
        template<>
        struct AssignFromHelperClass<DL_PublicKey<Integer>,DL_PublicKey<Integer> >
        {
            DL_PublicKey<Integer> *m_pObject;
            NameValuePairs *m_source;
            bool m_done;
        };
        struct  AuthenticatedKeyAgreementDomain : KeyAgreementAlgorithm
        {
        public:
            void GenerateEphemeralKeyPair(struct RandomNumberGenerator* arg_0, uint8_t* arg_1, uint8_t* arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct AuthenticatedKeyAgreementDomain*, struct RandomNumberGenerator*, uint8_t*, uint8_t*);
                (org_ptr(0x1405f6600L))(this, arg_0, arg_1, arg_2);
            };
            void GenerateStaticKeyPair(struct RandomNumberGenerator* arg_0, uint8_t* arg_1, uint8_t* arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct AuthenticatedKeyAgreementDomain*, struct RandomNumberGenerator*, uint8_t*, uint8_t*);
                (org_ptr(0x1405f65a0L))(this, arg_0, arg_1, arg_2);
            };
        };
        template<>
        struct GetValueHelperClass<DL_PublicKeyImpl<DL_GroupParameters_EC<EC2N> >,DL_PublicKey<EC2NPoint> >
        {
            DL_PublicKeyImpl<DL_GroupParameters_EC<EC2N> > *m_pObject;
            const char *m_name;
            type_info *m_valueType;
            void *m_pValue;
            bool m_found;
            bool m_getValueNames;
        };
        struct  NonblockingRng : RandomNumberGenerator
        {
        public:
            void GenerateBlock(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct NonblockingRng*, uint8_t*, uint64_t);
                (org_ptr(0x140625230L))(this, arg_0, arg_1);
            };
            NonblockingRng()
            {
                using org_ptr = int64_t (WINAPIV*)(struct NonblockingRng*);
                (org_ptr(0x1406251c0L))(this);
            };
            int64_t ctor_NonblockingRng()
            {
                using org_ptr = int64_t (WINAPIV*)(struct NonblockingRng*);
                return (org_ptr(0x1406251c0L))(this);
            };
            ~NonblockingRng()
            {
                using org_ptr = int64_t (WINAPIV*)(struct NonblockingRng*);
                (org_ptr(0x140625200L))(this);
            };
            int64_t dtor_NonblockingRng()
            {
                using org_ptr = int64_t (WINAPIV*)(struct NonblockingRng*);
                return (org_ptr(0x140625200L))(this);
            };
        };
        template<>
        struct simple_ptr<DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0> >
        {
            DL_EncryptionAlgorithm_Xor<HMAC<SHA1>,0> *m_p;
        };
        struct  StreamTransformationFilter : FilterWithBufferedInput, FilterPutSpaceHelper
        {
                enum BlockPaddingScheme
                {
                    NO_PADDING = 0x0,
                    ZEROS_PADDING = 0x1,
                    PKCS_PADDING = 0x2,
                    ONE_AND_ZEROS_PADDING = 0x3,
                    DEFAULT_PADDING = 0x4,
                };
            StreamTransformation *m_cipher;
            BlockPaddingScheme m_padding;
            unsigned int m_optimalBufferSize;
        public:
            void FirstPut(uint8_t* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct StreamTransformationFilter*, uint8_t*);
                (org_ptr(0x1405fbd90L))(this, arg_0);
            };
            static uint64_t LastBlockSize(struct StreamTransformation* arg_0, struct BlockPaddingScheme arg_1)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct StreamTransformation*, struct BlockPaddingScheme);
                return (org_ptr(0x1405fb940L))(arg_0, arg_1);
            };
            void LastPut(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct StreamTransformationFilter*, uint8_t*, uint64_t);
                (org_ptr(0x1405fc030L))(this, arg_0, arg_1);
            };
            void NextPutModifiable(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct StreamTransformationFilter*, uint8_t*, uint64_t);
                (org_ptr(0x1405fbfc0L))(this, arg_0, arg_1);
            };
            void NextPutMultiple(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct StreamTransformationFilter*, uint8_t*, uint64_t);
                (org_ptr(0x1405fbe20L))(this, arg_0, arg_1);
            };
            StreamTransformationFilter(struct StreamTransformation* arg_0, struct BufferedTransformation* arg_1, struct BlockPaddingScheme arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct StreamTransformationFilter*, struct StreamTransformation*, struct BufferedTransformation*, struct BlockPaddingScheme);
                (org_ptr(0x1405fb9e0L))(this, arg_0, arg_1, arg_2);
            };
            int64_t ctor_StreamTransformationFilter(struct StreamTransformation* arg_0, struct BufferedTransformation* arg_1, struct BlockPaddingScheme arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct StreamTransformationFilter*, struct StreamTransformation*, struct BufferedTransformation*, struct BlockPaddingScheme);
                return (org_ptr(0x1405fb9e0L))(this, arg_0, arg_1, arg_2);
            };
            ~StreamTransformationFilter()
            {
                using org_ptr = int64_t (WINAPIV*)(struct StreamTransformationFilter*);
                (org_ptr(0x1405ff3d0L))(this);
            };
            int64_t dtor_StreamTransformationFilter()
            {
                using org_ptr = int64_t (WINAPIV*)(struct StreamTransformationFilter*);
                return (org_ptr(0x1405ff3d0L))(this);
            };
        };
        struct  ECB_Mode_ExternalCipher : CipherModeDocumentation
        {
        };
        template<>
        struct  DL_VerifierImpl<DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1> > : DL_ObjectImpl<DL_VerifierBase<EC2NPoint>,DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1>,DL_PublicKey_EC<EC2N> >
        {
        };
        struct  OpaqueFilter : MeterFilter
        {
        };
        template<>
        struct  SignerFilter : Unflushable<Filter>
        {
            RandomNumberGenerator *m_rng;
            PK_Signer *m_signer;
            member_ptr<PK_MessageAccumulator> m_messageAccumulator;
            bool m_putMessage;
            SecBlock<unsigned char,AllocatorWithCleanup<unsigned char,0> > m_buf;
        public:
            void IsolatedInitialize(struct NameValuePairs* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct SignerFilter*, struct NameValuePairs*);
                (org_ptr(0x1405fd4c0L))(this, arg_0);
            };
            uint64_t Put2(uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct SignerFilter*, uint8_t*, uint64_t, int, bool);
                return (org_ptr(0x1405fd530L))(this, arg_0, arg_1, arg_2, arg_3);
            };
        };
        template<>
        struct simple_ptr<DL_KeyAgreementAlgorithm_DH<Integer,EnumToType<enum CofactorMultiplicationOption,0> > >
        {
            DL_KeyAgreementAlgorithm_DH<Integer,EnumToType<enum CofactorMultiplicationOption,0> > *m_p;
        };
        struct  DERGeneralEncoder : ByteQueue
        {
            BufferedTransformation *m_outQueue;
            bool m_finished;
            char m_asnTag;
        public:
            DERGeneralEncoder(struct BufferedTransformation* arg_0, uint8_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct DERGeneralEncoder*, struct BufferedTransformation*, uint8_t);
                (org_ptr(0x14054d640L))(this, arg_0, arg_1);
            };
            int64_t ctor_DERGeneralEncoder(struct BufferedTransformation* arg_0, uint8_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct DERGeneralEncoder*, struct BufferedTransformation*, uint8_t);
                return (org_ptr(0x14054d640L))(this, arg_0, arg_1);
            };
            DERGeneralEncoder(struct DERGeneralEncoder* arg_0, uint8_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct DERGeneralEncoder*, struct DERGeneralEncoder*, uint8_t);
                (org_ptr(0x14054d6c0L))(this, arg_0, arg_1);
            };
            int64_t ctor_DERGeneralEncoder(struct DERGeneralEncoder* arg_0, uint8_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct DERGeneralEncoder*, struct DERGeneralEncoder*, uint8_t);
                return (org_ptr(0x14054d6c0L))(this, arg_0, arg_1);
            };
            void MessageEnd()
            {
                using org_ptr = void (WINAPIV*)(struct DERGeneralEncoder*);
                (org_ptr(0x14054d7f0L))(this);
            };
            ~DERGeneralEncoder()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DERGeneralEncoder*);
                (org_ptr(0x14054d740L))(this);
            };
            int64_t dtor_DERGeneralEncoder()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DERGeneralEncoder*);
                return (org_ptr(0x14054d740L))(this);
            };
        };
        struct  DERSetEncoder : DERGeneralEncoder
        {
        };
        struct  Rijndael : Rijndael_Info, BlockCipherDocumentation
        {
                template<>
                struct  Base : BlockCipherImpl<Rijndael_Info,SimpleKeyedTransformation<BlockTransformation> >
                {
                    unsigned int m_rounds;
                    SecBlock<unsigned int,AllocatorWithCleanup<unsigned int,0> > m_key;
                public:
                    Base(struct Base* __that)
                    {
                        using org_ptr = void (WINAPIV*)(struct Base*, struct Base*);
                        (org_ptr(0x140459eb0L))(this, __that);
                    };
                    void ctor_Base(struct Base* __that)
                    {
                        using org_ptr = void (WINAPIV*)(struct Base*, struct Base*);
                        (org_ptr(0x140459eb0L))(this, __that);
                    };
                    Base()
                    {
                        using org_ptr = void (WINAPIV*)(struct Base*);
                        (org_ptr(0x14045be30L))(this);
                    };
                    void ctor_Base()
                    {
                        using org_ptr = void (WINAPIV*)(struct Base*);
                        (org_ptr(0x14045be30L))(this);
                    };
                    void UncheckedSetKey(uint8_t* arg_0, unsigned int arg_1, struct NameValuePairs* arg_2)
                    {
                        using org_ptr = void (WINAPIV*)(struct Base*, uint8_t*, unsigned int, struct NameValuePairs*);
                        (org_ptr(0x14061f7a0L))(this, arg_0, arg_1, arg_2);
                    };
                    ~Base()
                    {
                        using org_ptr = void (WINAPIV*)(struct Base*);
                        (org_ptr(0x140449ae0L))(this);
                    };
                    void dtor_Base()
                    {
                        using org_ptr = void (WINAPIV*)(struct Base*);
                        (org_ptr(0x140449ae0L))(this);
                    };
                };
                struct  Dec : Base
                {
                public:
                    Dec(struct Dec* __that)
                    {
                        using org_ptr = void (WINAPIV*)(struct Dec*, struct Dec*);
                        (org_ptr(0x140459e50L))(this, __that);
                    };
                    void ctor_Dec(struct Dec* __that)
                    {
                        using org_ptr = void (WINAPIV*)(struct Dec*, struct Dec*);
                        (org_ptr(0x140459e50L))(this, __that);
                    };
                    Dec()
                    {
                        using org_ptr = void (WINAPIV*)(struct Dec*);
                        (org_ptr(0x14045bb00L))(this);
                    };
                    void ctor_Dec()
                    {
                        using org_ptr = void (WINAPIV*)(struct Dec*);
                        (org_ptr(0x14045bb00L))(this);
                    };
                    void ProcessAndXorBlock(uint8_t* arg_0, uint8_t* arg_1, uint8_t* arg_2)
                    {
                        using org_ptr = void (WINAPIV*)(struct Dec*, uint8_t*, uint8_t*, uint8_t*);
                        (org_ptr(0x140621160L))(this, arg_0, arg_1, arg_2);
                    };
                    ~Dec()
                    {
                        using org_ptr = void (WINAPIV*)(struct Dec*);
                        (org_ptr(0x140449650L))(this);
                    };
                    void dtor_Dec()
                    {
                        using org_ptr = void (WINAPIV*)(struct Dec*);
                        (org_ptr(0x140449650L))(this);
                    };
                };
                struct  Enc : Base
                {
                public:
                    Enc(struct Enc* __that)
                    {
                        using org_ptr = void (WINAPIV*)(struct Enc*, struct Enc*);
                        (org_ptr(0x14045a910L))(this, __that);
                    };
                    void ctor_Enc(struct Enc* __that)
                    {
                        using org_ptr = void (WINAPIV*)(struct Enc*, struct Enc*);
                        (org_ptr(0x14045a910L))(this, __that);
                    };
                    Enc()
                    {
                        using org_ptr = void (WINAPIV*)(struct Enc*);
                        (org_ptr(0x14045bb50L))(this);
                    };
                    void ctor_Enc()
                    {
                        using org_ptr = void (WINAPIV*)(struct Enc*);
                        (org_ptr(0x14045bb50L))(this);
                    };
                    void ProcessAndXorBlock(uint8_t* arg_0, uint8_t* arg_1, uint8_t* arg_2)
                    {
                        using org_ptr = void (WINAPIV*)(struct Enc*, uint8_t*, uint8_t*, uint8_t*);
                        (org_ptr(0x140620120L))(this, arg_0, arg_1, arg_2);
                    };
                    ~Enc()
                    {
                        using org_ptr = void (WINAPIV*)(struct Enc*);
                        (org_ptr(0x14044e720L))(this);
                    };
                    void dtor_Enc()
                    {
                        using org_ptr = void (WINAPIV*)(struct Enc*);
                        (org_ptr(0x14044e720L))(this);
                    };
                };
        };
        struct  NullStore : Store
        {
            unsigned __int64 m_size;
        public:
            uint64_t MaxRetrievable()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct NullStore*);
                return (org_ptr(0x1406117e0L))(this);
            };
            NullStore(uint64_t arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct NullStore*, uint64_t);
                (org_ptr(0x140611780L))(this, arg_0);
            };
            int64_t ctor_NullStore(uint64_t arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct NullStore*, uint64_t);
                return (org_ptr(0x140611780L))(this, arg_0);
            };
            void StoreInitialize(struct NameValuePairs* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct NullStore*, struct NameValuePairs*);
                (org_ptr(0x1406117d0L))(this, arg_0);
            };
            ~NullStore()
            {
                using org_ptr = int64_t (WINAPIV*)(struct NullStore*);
                (org_ptr(0x140611830L))(this);
            };
            int64_t dtor_NullStore()
            {
                using org_ptr = int64_t (WINAPIV*)(struct NullStore*);
                return (org_ptr(0x140611830L))(this);
            };
        };
        template<>
        struct AssignFromHelperClass<DL_PublicKeyImpl<DL_GroupParameters_DSA>,DL_PublicKey<Integer> >
        {
            DL_PublicKeyImpl<DL_GroupParameters_DSA> *m_pObject;
            NameValuePairs *m_source;
            bool m_done;
        };
        template<>
        struct Singleton<DL_KeyAgreementAlgorithm_DH<ECPPoint,EnumToType<enum CofactorMultiplicationOption,0> >,NewObject<DL_KeyAgreementAlgorithm_DH<ECPPoint,EnumToType<enum CofactorMultiplicationOption,0> > >,0>
        {
            NewObject<DL_KeyAgreementAlgorithm_DH<ECPPoint,EnumToType<enum CofactorMultiplicationOption,0> > > m_objectFactory;
        };
        template<>
        struct Singleton<DL_KeyAgreementAlgorithm_DH<Integer,EnumToType<enum CofactorMultiplicationOption,0> >,NewObject<DL_KeyAgreementAlgorithm_DH<Integer,EnumToType<enum CofactorMultiplicationOption,0> > >,0>
        {
            NewObject<DL_KeyAgreementAlgorithm_DH<Integer,EnumToType<enum CofactorMultiplicationOption,0> > > m_objectFactory;
        };
        template<>
        struct  PK_FinalTemplate<DL_VerifierImpl<DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1> > > : DL_VerifierImpl<DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<EC2N>,DL_Algorithm_ECDSA<EC2N>,DL_SignatureMessageEncodingMethod_DSA,SHA1> >
        {
        };
        template<>
        struct simple_ptr<DL_Algorithm_ECDSA<ECP> >
        {
            DL_Algorithm_ECDSA<ECP> *m_p;
        };
        template<>
        struct  CFB_DecryptionTemplate<AbstractPolicyHolder<CFB_CipherAbstractPolicy,SimpleKeyedTransformation<StreamTransformation> > > : CFB_CipherTemplate<AbstractPolicyHolder<CFB_CipherAbstractPolicy,SimpleKeyedTransformation<StreamTransformation> > >
        {
        };
        template<>
        struct AssignFromHelperClass<DL_PrivateKeyImpl<DL_GroupParameters_EC<ECP> >,DL_PrivateKey<ECPPoint> >
        {
            DL_PrivateKeyImpl<DL_GroupParameters_EC<ECP> > *m_pObject;
            NameValuePairs *m_source;
            bool m_done;
        };
        template<>
        struct  CFB_RequireFullDataBlocks<CFB_EncryptionTemplate<AbstractPolicyHolder<CFB_CipherAbstractPolicy,CFB_ModePolicy> > > : CFB_EncryptionTemplate<AbstractPolicyHolder<CFB_CipherAbstractPolicy,CFB_ModePolicy> >
        {
        };
        template<>
        struct  PK_FinalTemplate<DL_SignerImpl<DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1> > > : DL_SignerImpl<DL_SignatureSchemeOptions<DL_SS<DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1,int>,DL_Keys_ECDSA<ECP>,DL_Algorithm_ECDSA<ECP>,DL_SignatureMessageEncodingMethod_DSA,SHA1> >
        {
        };
        struct  DERSequenceEncoder : DERGeneralEncoder
        {
        public:
            DERSequenceEncoder(struct BufferedTransformation* arg_0, uint8_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct DERSequenceEncoder*, struct BufferedTransformation*, uint8_t);
                (org_ptr(0x14054e640L))(this, arg_0, arg_1);
            };
            int64_t ctor_DERSequenceEncoder(struct BufferedTransformation* arg_0, uint8_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct DERSequenceEncoder*, struct BufferedTransformation*, uint8_t);
                return (org_ptr(0x14054e640L))(this, arg_0, arg_1);
            };
            DERSequenceEncoder(struct DERSequenceEncoder* arg_0, uint8_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct DERSequenceEncoder*, struct DERSequenceEncoder*, uint8_t);
                (org_ptr(0x14054e6a0L))(this, arg_0, arg_1);
            };
            int64_t ctor_DERSequenceEncoder(struct DERSequenceEncoder* arg_0, uint8_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct DERSequenceEncoder*, struct DERSequenceEncoder*, uint8_t);
                return (org_ptr(0x14054e6a0L))(this, arg_0, arg_1);
            };
            ~DERSequenceEncoder()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DERSequenceEncoder*);
                (org_ptr(0x14054e740L))(this);
            };
            int64_t dtor_DERSequenceEncoder()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DERSequenceEncoder*);
                return (org_ptr(0x14054e740L))(this);
            };
        };
        struct  BERSetDecoder : BERGeneralDecoder
        {
        };
        template<>
        struct  AlgorithmParameters<NullNameValuePairs,int> : AlgorithmParametersBase2<int>
        {
            NullNameValuePairs m_parent;
        };
        template<>
        struct AssignFromHelperClass<DL_PrivateKey<EC2NPoint>,DL_PrivateKey<EC2NPoint> >
        {
            DL_PrivateKey<EC2NPoint> *m_pObject;
            NameValuePairs *m_source;
            bool m_done;
        };
        struct  DL_SignatureMessageEncodingMethod_NR : PK_DeterministicSignatureMessageEncodingMethod
        {
        public:
            int64_t ComputeMessageRepresentative(int64_t arg_1, int arg_2, int arg_3, uint8_t* arg_4, struct CryptoPP* arg_5)
            {
                using org_ptr = int64_t (WINAPIV*)(int64_t, int64_t, int, int, uint8_t*, struct CryptoPP*);
                return (org_ptr(0x1406304d0L))(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5);
            };
            DL_SignatureMessageEncodingMethod_NR()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_SignatureMessageEncodingMethod_NR*);
                (org_ptr(0x14063c950L))(this);
            };
            int64_t ctor_DL_SignatureMessageEncodingMethod_NR()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_SignatureMessageEncodingMethod_NR*);
                return (org_ptr(0x14063c950L))(this);
            };
            ~DL_SignatureMessageEncodingMethod_NR()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_SignatureMessageEncodingMethod_NR*);
                (org_ptr(0x14063d350L))(this);
            };
            int64_t dtor_DL_SignatureMessageEncodingMethod_NR()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DL_SignatureMessageEncodingMethod_NR*);
                return (org_ptr(0x14063d350L))(this);
            };
        };
        struct  OFB_Mode_ExternalCipher : CipherModeDocumentation
        {
        };
        template<>
        struct  P1363_KDF2<SHA1>
        {
        public:
            static void DeriveKey(char* output, uint64_t outputLength, char* input, uint64_t inputLength, char* derivationParams, uint64_t derivationParamsLength)
            {
                using org_ptr = void (WINAPIV*)(char*, uint64_t, char*, uint64_t, char*, uint64_t);
                (org_ptr(0x140463c00L))(output, outputLength, input, inputLength, derivationParams, derivationParamsLength);
            };
        };
        template<>
        struct Singleton<DL_SignatureMessageEncodingMethod_DSA,NewObject<DL_SignatureMessageEncodingMethod_DSA>,0>
        {
            NewObject<DL_SignatureMessageEncodingMethod_DSA> m_objectFactory;
        };
        template<>
        struct AssignFromHelperClass<DL_GroupParameters_IntegerBasedImpl<ModExpPrecomputation,DL_FixedBasePrecomputationImpl<Integer> >,DL_GroupParameters_IntegerBased>
        {
            DL_GroupParameters_IntegerBasedImpl<ModExpPrecomputation,DL_FixedBasePrecomputationImpl<Integer> > *m_pObject;
            NameValuePairs *m_source;
            bool m_done;
        };
        struct  OS_RNG_Err : Exception
        {
        public:
            OS_RNG_Err(struct OS_RNG_Err* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct OS_RNG_Err*, struct OS_RNG_Err*);
                (org_ptr(0x1406254f0L))(this, arg_0);
            };
            int64_t ctor_OS_RNG_Err(struct OS_RNG_Err* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct OS_RNG_Err*, struct OS_RNG_Err*);
                return (org_ptr(0x1406254f0L))(this, arg_0);
            };
            ~OS_RNG_Err()
            {
                using org_ptr = int64_t (WINAPIV*)(struct OS_RNG_Err*);
                (org_ptr(0x1406254d0L))(this);
            };
            int64_t dtor_OS_RNG_Err()
            {
                using org_ptr = int64_t (WINAPIV*)(struct OS_RNG_Err*);
                return (org_ptr(0x1406254d0L))(this);
            };
        };
        template<>
        struct AssignFromHelperClass<DL_PrivateKeyImpl<DL_GroupParameters_EC<EC2N> >,DL_PrivateKey<EC2NPoint> >
        {
            DL_PrivateKeyImpl<DL_GroupParameters_EC<EC2N> > *m_pObject;
            NameValuePairs *m_source;
            bool m_done;
        };
        template<>
        struct Singleton<DL_Algorithm_ECDSA<ECP>,NewObject<DL_Algorithm_ECDSA<ECP> >,0>
        {
            NewObject<DL_Algorithm_ECDSA<ECP> > m_objectFactory;
        };
        struct  CBC_Mode_ExternalCipher : CipherModeDocumentation
        {
        };
        struct  CombinedNameValuePairs : NameValuePairs
        {
            NameValuePairs *m_pairs1;
            NameValuePairs *m_pairs2;
        public:
            CombinedNameValuePairs(struct NameValuePairs* arg_0, struct NameValuePairs* arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct CombinedNameValuePairs*, struct NameValuePairs*, struct NameValuePairs*);
                (org_ptr(0x14063e3c0L))(this, arg_0, arg_1);
            };
            int64_t ctor_CombinedNameValuePairs(struct NameValuePairs* arg_0, struct NameValuePairs* arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct CombinedNameValuePairs*, struct NameValuePairs*, struct NameValuePairs*);
                return (org_ptr(0x14063e3c0L))(this, arg_0, arg_1);
            };
            bool GetVoidValue(char* arg_0, struct type_info* arg_1, void* arg_2)
            {
                using org_ptr = bool (WINAPIV*)(struct CombinedNameValuePairs*, char*, struct type_info*, void*);
                return (org_ptr(0x140606140L))(this, arg_0, arg_1, arg_2);
            };
            ~CombinedNameValuePairs()
            {
                using org_ptr = int64_t (WINAPIV*)(struct CombinedNameValuePairs*);
                (org_ptr(0x14063e460L))(this);
            };
            int64_t dtor_CombinedNameValuePairs()
            {
                using org_ptr = int64_t (WINAPIV*)(struct CombinedNameValuePairs*);
                return (org_ptr(0x14063e460L))(this);
            };
        };
        template<>
        struct member_ptr<std::basic_ifstream<char,std::char_traits<char> > >
        {
            std::basic_ifstream<char,std::char_traits<char> > *m_p;
        };
        struct  FileStore : Store, FilterPutSpaceHelper, NotCopyable
        {
                struct  Err : Exception
                {
                public:
                    Err(struct Err* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct Err*, struct Err*);
                        (org_ptr(0x14061e7c0L))(this, arg_0);
                    };
                    int64_t ctor_Err(struct Err* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct Err*, struct Err*);
                        return (org_ptr(0x14061e7c0L))(this, arg_0);
                    };
                    ~Err()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct Err*);
                        (org_ptr(0x14061e6f0L))(this);
                    };
                    int64_t dtor_Err()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct Err*);
                        return (org_ptr(0x14061e6f0L))(this);
                    };
                };
                struct  OpenErr : Err
                {
                public:
                    OpenErr(struct OpenErr* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct OpenErr*, struct OpenErr*);
                        (org_ptr(0x14061e780L))(this, arg_0);
                    };
                    int64_t ctor_OpenErr(struct OpenErr* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct OpenErr*, struct OpenErr*);
                        return (org_ptr(0x14061e780L))(this, arg_0);
                    };
                    ~OpenErr()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct OpenErr*);
                        (org_ptr(0x14061e710L))(this);
                    };
                    int64_t dtor_OpenErr()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct OpenErr*);
                        return (org_ptr(0x14061e710L))(this);
                    };
                };
                struct  ReadErr : Err
                {
                public:
                    ReadErr(struct ReadErr* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct ReadErr*, struct ReadErr*);
                        (org_ptr(0x14061e920L))(this, arg_0);
                    };
                    int64_t ctor_ReadErr(struct ReadErr* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct ReadErr*, struct ReadErr*);
                        return (org_ptr(0x14061e920L))(this, arg_0);
                    };
                    ReadErr()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct ReadErr*);
                        (org_ptr(0x14061e800L))(this);
                    };
                    int64_t ctor_ReadErr()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct ReadErr*);
                        return (org_ptr(0x14061e800L))(this);
                    };
                    ~ReadErr()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct ReadErr*);
                        (org_ptr(0x14061e900L))(this);
                    };
                    int64_t dtor_ReadErr()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct ReadErr*);
                        return (org_ptr(0x14061e900L))(this);
                    };
                };
            BYTE gap40[1];
            member_ptr<std::basic_ifstream<char,std::char_traits<char> > > m_file;
            std::basic_istream<char,std::char_traits<char> > *m_stream;
            char *m_space;
            unsigned __int64 m_len;
            bool m_waiting;
        public:
            FileStore()
            {
                using org_ptr = void (WINAPIV*)(struct FileStore*);
                (org_ptr(0x1404536e0L))(this);
            };
            void ctor_FileStore()
            {
                using org_ptr = void (WINAPIV*)(struct FileStore*);
                (org_ptr(0x1404536e0L))(this);
            };
            uint64_t MaxRetrievable()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct FileStore*);
                return (org_ptr(0x14061d5c0L))(this);
            };
            uint64_t Skip(uint64_t arg_0)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct FileStore*, uint64_t);
                return (org_ptr(0x14061dd10L))(this, arg_0);
            };
            void StoreInitialize(struct NameValuePairs* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct FileStore*, struct NameValuePairs*);
                (org_ptr(0x14061d310L))(this, arg_0);
            };
            ~FileStore()
            {
                using org_ptr = void (WINAPIV*)(struct FileStore*);
                (org_ptr(0x14044d9b0L))(this);
            };
            void dtor_FileStore()
            {
                using org_ptr = void (WINAPIV*)(struct FileStore*);
                (org_ptr(0x14044d9b0L))(this);
            };
        };
        template<>
        struct  SourceTemplate<FileStore> : Source
        {
            FileStore m_store;
        public:
            int GetAutoSignalPropagation()
            {
                using org_ptr = int (WINAPIV*)(struct SourceTemplate<FileStore>*);
                return (org_ptr(0x1404543a0L))(this);
            };
            void IsolatedInitialize(struct NameValuePairs* parameters)
            {
                using org_ptr = void (WINAPIV*)(struct SourceTemplate<FileStore>*, struct NameValuePairs*);
                (org_ptr(0x140454040L))(this, parameters);
            };
            uint64_t Pump2(uint64_t* byteCount, bool blocking)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct SourceTemplate<FileStore>*, uint64_t*, bool);
                return (org_ptr(0x1404540b0L))(this, byteCount, blocking);
            };
            uint64_t PumpAll2(bool blocking)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct SourceTemplate<FileStore>*, bool);
                return (org_ptr(0x1404541f0L))(this, blocking);
            };
            uint64_t PumpMessages2(unsigned int* messageCount, bool blocking)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct SourceTemplate<FileStore>*, unsigned int*, bool);
                return (org_ptr(0x140454160L))(this, messageCount, blocking);
            };
            void SetAutoSignalPropagation(int propagation)
            {
                using org_ptr = void (WINAPIV*)(struct SourceTemplate<FileStore>*, int);
                (org_ptr(0x140454330L))(this, propagation);
            };
            bool SourceExhausted()
            {
                using org_ptr = bool (WINAPIV*)(struct SourceTemplate<FileStore>*);
                return (org_ptr(0x140454270L))(this);
            };
            SourceTemplate(struct BufferedTransformation* attachment)
            {
                using org_ptr = void (WINAPIV*)(struct SourceTemplate<FileStore>*, struct BufferedTransformation*);
                (org_ptr(0x140453510L))(this, attachment);
            };
            void ctor_SourceTemplate(struct BufferedTransformation* attachment)
            {
                using org_ptr = void (WINAPIV*)(struct SourceTemplate<FileStore>*, struct BufferedTransformation*);
                (org_ptr(0x140453510L))(this, attachment);
            };
            ~SourceTemplate()
            {
                using org_ptr = void (WINAPIV*)(struct SourceTemplate<FileStore>*);
                (org_ptr(0x14044d740L))(this);
            };
            void dtor_SourceTemplate()
            {
                using org_ptr = void (WINAPIV*)(struct SourceTemplate<FileStore>*);
                (org_ptr(0x14044d740L))(this);
            };
        };
        template<>
        struct  FileSource : SourceTemplate<FileStore>
        {
        public:
            FileSource(struct BufferedTransformation* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct FileSource*, struct BufferedTransformation*);
                (org_ptr(0x14061e3d0L))(this, arg_0);
            };
            int64_t ctor_FileSource(struct BufferedTransformation* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct FileSource*, struct BufferedTransformation*);
                return (org_ptr(0x14061e3d0L))(this, arg_0);
            };
            FileSource(char* filename, bool pumpAll, struct BufferedTransformation* attachment, bool binary)
            {
                using org_ptr = void (WINAPIV*)(struct FileSource*, char*, bool, struct BufferedTransformation*, bool);
                (org_ptr(0x14044ca70L))(this, filename, pumpAll, attachment, binary);
            };
            void ctor_FileSource(char* filename, bool pumpAll, struct BufferedTransformation* attachment, bool binary)
            {
                using org_ptr = void (WINAPIV*)(struct FileSource*, char*, bool, struct BufferedTransformation*, bool);
                (org_ptr(0x14044ca70L))(this, filename, pumpAll, attachment, binary);
            };
            ~FileSource()
            {
                using org_ptr = void (WINAPIV*)(struct FileSource*);
                (org_ptr(0x14044dc70L))(this);
            };
            void dtor_FileSource()
            {
                using org_ptr = void (WINAPIV*)(struct FileSource*);
                (org_ptr(0x14044dc70L))(this);
            };
        };
        template<>
        struct  AllocatorWithCleanup<unsigned char,1> : AllocatorBase<unsigned char>
        {
        };
        template<>
        struct SecBlock<unsigned char,AllocatorWithCleanup<unsigned char,1> >
        {
            AllocatorWithCleanup<unsigned char,1> m_alloc;
            unsigned __int64 m_size;
            char *m_ptr;
        };
        template<>
        struct member_ptr<std::basic_ofstream<char,std::char_traits<char> > >
        {
            std::basic_ofstream<char,std::char_traits<char> > *m_p;
        };
        template<>
        struct  AlgorithmParametersBase2<std::basic_istream<char,std::char_traits<char> > *> : AlgorithmParametersBase
        {
            std::basic_istream<char,std::char_traits<char> > *m_value;
        };
        template<>
        struct  AlgorithmParameters<NullNameValuePairs,std::basic_istream<char,std::char_traits<char> > *> : AlgorithmParametersBase2<std::basic_istream<char,std::char_traits<char> > *>
        {
            NullNameValuePairs m_parent;
        };
        struct  FileSink : Sink, NotCopyable
        {
                struct  Err : Exception
                {
                public:
                    Err(struct Err* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct Err*, struct Err*);
                        (org_ptr(0x14061ebe0L))(this, arg_0);
                    };
                    int64_t ctor_Err(struct Err* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct Err*, struct Err*);
                        return (org_ptr(0x14061ebe0L))(this, arg_0);
                    };
                    ~Err()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct Err*);
                        (org_ptr(0x14061eb10L))(this);
                    };
                    int64_t dtor_Err()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct Err*);
                        return (org_ptr(0x14061eb10L))(this);
                    };
                };
                struct  OpenErr : Err
                {
                public:
                    OpenErr(struct OpenErr* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct OpenErr*, struct OpenErr*);
                        (org_ptr(0x14061eba0L))(this, arg_0);
                    };
                    int64_t ctor_OpenErr(struct OpenErr* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct OpenErr*, struct OpenErr*);
                        return (org_ptr(0x14061eba0L))(this, arg_0);
                    };
                    ~OpenErr()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct OpenErr*);
                        (org_ptr(0x14061eb30L))(this);
                    };
                    int64_t dtor_OpenErr()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct OpenErr*);
                        return (org_ptr(0x14061eb30L))(this);
                    };
                };
                struct  WriteErr : Err
                {
                public:
                    WriteErr(struct WriteErr* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct WriteErr*, struct WriteErr*);
                        (org_ptr(0x14061ed40L))(this, arg_0);
                    };
                    int64_t ctor_WriteErr(struct WriteErr* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct WriteErr*, struct WriteErr*);
                        return (org_ptr(0x14061ed40L))(this, arg_0);
                    };
                    WriteErr()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct WriteErr*);
                        (org_ptr(0x14061ec20L))(this);
                    };
                    int64_t ctor_WriteErr()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct WriteErr*);
                        return (org_ptr(0x14061ec20L))(this);
                    };
                    ~WriteErr()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct WriteErr*);
                        (org_ptr(0x14061ed20L))(this);
                    };
                    int64_t dtor_WriteErr()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct WriteErr*);
                        return (org_ptr(0x14061ed20L))(this);
                    };
                };
            member_ptr<std::basic_ofstream<char,std::char_traits<char> > > m_file;
            std::basic_ostream<char,std::char_traits<char> > *m_stream;
        public:
            FileSink()
            {
                using org_ptr = int64_t (WINAPIV*)(struct FileSink*);
                (org_ptr(0x14061e420L))(this);
            };
            int64_t ctor_FileSink()
            {
                using org_ptr = int64_t (WINAPIV*)(struct FileSink*);
                return (org_ptr(0x14061e420L))(this);
            };
            bool IsolatedFlush(bool arg_0, bool arg_1)
            {
                using org_ptr = bool (WINAPIV*)(struct FileSink*, bool, bool);
                return (org_ptr(0x14061e0f0L))(this, arg_0, arg_1);
            };
            void IsolatedInitialize(struct NameValuePairs* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct FileSink*, struct NameValuePairs*);
                (org_ptr(0x14061de50L))(this, arg_0);
            };
            uint64_t Put2(uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct FileSink*, uint8_t*, uint64_t, int, bool);
                return (org_ptr(0x14061e210L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            ~FileSink()
            {
                using org_ptr = int64_t (WINAPIV*)(struct FileSink*);
                (org_ptr(0x14061e500L))(this);
            };
            int64_t dtor_FileSink()
            {
                using org_ptr = int64_t (WINAPIV*)(struct FileSink*);
                return (org_ptr(0x14061e500L))(this);
            };
        };
        template<>
        struct  AlgorithmParametersBase2<char const *> : AlgorithmParametersBase
        {
            const char *m_value;
        public:
            AlgorithmParametersBase2(struct AlgorithmParametersBase2<char const *>* __that)
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParametersBase2<char const *>*, struct AlgorithmParametersBase2<char const *>*);
                (org_ptr(0x140466520L))(this, __that);
            };
            void ctor_AlgorithmParametersBase2(struct AlgorithmParametersBase2<char const *>* __that)
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParametersBase2<char const *>*, struct AlgorithmParametersBase2<char const *>*);
                (org_ptr(0x140466520L))(this, __that);
            };
            AlgorithmParametersBase2(char* name, char** value, bool throwIfNotUsed)
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParametersBase2<char const *>*, char*, char**, bool);
                (org_ptr(0x140466360L))(this, name, value, throwIfNotUsed);
            };
            void ctor_AlgorithmParametersBase2(char* name, char** value, bool throwIfNotUsed)
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParametersBase2<char const *>*, char*, char**, bool);
                (org_ptr(0x140466360L))(this, name, value, throwIfNotUsed);
            };
            void AssignValue(char* name, struct type_info* valueType, void* pValue)
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParametersBase2<char const *>*, char*, struct type_info*, void*);
                (org_ptr(0x140460200L))(this, name, valueType, pValue);
            };
            ~AlgorithmParametersBase2()
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParametersBase2<char const *>*);
                (org_ptr(0x14044d160L))(this);
            };
            void dtor_AlgorithmParametersBase2()
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParametersBase2<char const *>*);
                (org_ptr(0x14044d160L))(this);
            };
        };
        template<>
        struct  AlgorithmParametersBase2<bool> : AlgorithmParametersBase
        {
            bool m_value;
        public:
            AlgorithmParametersBase2(char* name, bool* value, bool throwIfNotUsed)
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParametersBase2<bool>*, char*, bool*, bool);
                (org_ptr(0x140466490L))(this, name, value, throwIfNotUsed);
            };
            void ctor_AlgorithmParametersBase2(char* name, bool* value, bool throwIfNotUsed)
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParametersBase2<bool>*, char*, bool*, bool);
                (org_ptr(0x140466490L))(this, name, value, throwIfNotUsed);
            };
            void AssignValue(char* name, struct type_info* valueType, void* pValue)
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParametersBase2<bool>*, char*, struct type_info*, void*);
                (org_ptr(0x1404603d0L))(this, name, valueType, pValue);
            };
            ~AlgorithmParametersBase2()
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParametersBase2<bool>*);
                (org_ptr(0x14044dcb0L))(this);
            };
            void dtor_AlgorithmParametersBase2()
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParametersBase2<bool>*);
                (org_ptr(0x14044dcb0L))(this);
            };
        };
        template<>
        struct  AlgorithmParameters<NullNameValuePairs,char const *> : AlgorithmParametersBase2<char const *>
        {
            NullNameValuePairs m_parent;
        public:
            AlgorithmParameters(struct AlgorithmParameters<NullNameValuePairs,char const *>* copy)
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParameters<NullNameValuePairs,char const *>*, struct AlgorithmParameters<NullNameValuePairs,char const *>*);
                (org_ptr(0x1404662c0L))(this, copy);
            };
            void ctor_AlgorithmParameters(struct AlgorithmParameters<NullNameValuePairs,char const *>* copy)
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParameters<NullNameValuePairs,char const *>*, struct AlgorithmParameters<NullNameValuePairs,char const *>*);
                (org_ptr(0x1404662c0L))(this, copy);
            };
            AlgorithmParameters(struct NullNameValuePairs* parent, char* name, char** value, bool throwIfNotUsed)
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParameters<NullNameValuePairs,char const *>*, struct NullNameValuePairs*, char*, char**, bool);
                (org_ptr(0x140460140L))(this, parent, name, value, throwIfNotUsed);
            };
            void ctor_AlgorithmParameters(struct NullNameValuePairs* parent, char* name, char** value, bool throwIfNotUsed)
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParameters<NullNameValuePairs,char const *>*, struct NullNameValuePairs*, char*, char**, bool);
                (org_ptr(0x140460140L))(this, parent, name, value, throwIfNotUsed);
            };
            struct NameValuePairs* GetParent()
            {
                using org_ptr = struct NameValuePairs* (WINAPIV*)(struct AlgorithmParameters<NullNameValuePairs,char const *>*);
                return (org_ptr(0x1404601e0L))(this);
            };
            ~AlgorithmParameters()
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParameters<NullNameValuePairs,char const *>*);
                (org_ptr(0x14044d090L))(this);
            };
            void dtor_AlgorithmParameters()
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParameters<NullNameValuePairs,char const *>*);
                (org_ptr(0x14044d090L))(this);
            };
        };
        template<>
        struct  AlgorithmParameters<AlgorithmParameters<NullNameValuePairs,char const *>,bool> : AlgorithmParametersBase2<bool>
        {
            AlgorithmParameters<NullNameValuePairs,char const *> m_parent;
        public:
            AlgorithmParameters(struct AlgorithmParameters<NullNameValuePairs,char const *>* parent, char* name, bool* value, bool throwIfNotUsed)
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParameters<AlgorithmParameters<NullNameValuePairs,char const *>,bool>*, struct AlgorithmParameters<NullNameValuePairs,char const *>*, char*, bool*, bool);
                (org_ptr(0x1404602d0L))(this, parent, name, value, throwIfNotUsed);
            };
            void ctor_AlgorithmParameters(struct AlgorithmParameters<NullNameValuePairs,char const *>* parent, char* name, bool* value, bool throwIfNotUsed)
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParameters<AlgorithmParameters<NullNameValuePairs,char const *>,bool>*, struct AlgorithmParameters<NullNameValuePairs,char const *>*, char*, bool*, bool);
                (org_ptr(0x1404602d0L))(this, parent, name, value, throwIfNotUsed);
            };
            struct NameValuePairs* GetParent()
            {
                using org_ptr = struct NameValuePairs* (WINAPIV*)(struct AlgorithmParameters<AlgorithmParameters<NullNameValuePairs,char const *>,bool>*);
                return (org_ptr(0x1404603b0L))(this);
            };
            ~AlgorithmParameters()
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParameters<AlgorithmParameters<NullNameValuePairs,char const *>,bool>*);
                (org_ptr(0x14044dbe0L))(this);
            };
            void dtor_AlgorithmParameters()
            {
                using org_ptr = void (WINAPIV*)(struct AlgorithmParameters<AlgorithmParameters<NullNameValuePairs,char const *>,bool>*);
                (org_ptr(0x14044dbe0L))(this);
            };
        };
        template<>
        struct  AlgorithmParametersBase2<std::basic_ostream<char,std::char_traits<char> > *> : AlgorithmParametersBase
        {
            std::basic_ostream<char,std::char_traits<char> > *m_value;
        };
        template<>
        struct  AlgorithmParameters<NullNameValuePairs,std::basic_ostream<char,std::char_traits<char> > *> : AlgorithmParametersBase2<std::basic_ostream<char,std::char_traits<char> > *>
        {
            NullNameValuePairs m_parent;
        };
        struct ByteQueueNode
        {
        public:
            ByteQueueNode(struct ByteQueueNode* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ByteQueueNode*, struct ByteQueueNode*);
                (org_ptr(0x14054add0L))(this, arg_0);
            };
            int64_t ctor_ByteQueueNode(struct ByteQueueNode* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ByteQueueNode*, struct ByteQueueNode*);
                return (org_ptr(0x14054add0L))(this, arg_0);
            };
            ByteQueueNode(uint64_t arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ByteQueueNode*, uint64_t);
                (org_ptr(0x14054acf0L))(this, arg_0);
            };
            int64_t ctor_ByteQueueNode(uint64_t arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ByteQueueNode*, uint64_t);
                return (org_ptr(0x14054acf0L))(this, arg_0);
            };
            void Clear()
            {
                using org_ptr = void (WINAPIV*)(struct ByteQueueNode*);
                (org_ptr(0x14054aec0L))(this);
            };
            uint64_t CurrentSize()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct ByteQueueNode*);
                return (org_ptr(0x14054aea0L))(this);
            };
            uint64_t Get(uint8_t* arg_0)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct ByteQueueNode*, uint8_t*);
                return (org_ptr(0x14054b000L))(this, arg_0);
            };
            uint64_t MaxSize()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct ByteQueueNode*);
                return (org_ptr(0x14054afa0L))(this);
            };
            uint64_t Peek(uint8_t* arg_0)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct ByteQueueNode*, uint8_t*);
                return (org_ptr(0x14054b050L))(this, arg_0);
            };
            uint64_t Put(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct ByteQueueNode*, uint8_t*, uint64_t);
                return (org_ptr(0x14054aee0L))(this, arg_0, arg_1);
            };
            bool UsedUp()
            {
                using org_ptr = bool (WINAPIV*)(struct ByteQueueNode*);
                return (org_ptr(0x14054afc0L))(this);
            };
            ~ByteQueueNode()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ByteQueueNode*);
                (org_ptr(0x14054ae80L))(this);
            };
            int64_t dtor_ByteQueueNode()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ByteQueueNode*);
                return (org_ptr(0x14054ae80L))(this);
            };
        }
        ;
        struct Name
        {
        public:
            char* Cofactor()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x14057ed30L))(this);
            };
            char* Curve()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x14057ea70L))(this);
            };
            char* DecodingLookupArray()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x140579d90L))(this);
            };
            char* EncodingLookupArray()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x14063e490L))(this);
            };
            char* EncodingParameters()
            {
                using org_ptr = char* (WINAPIV*)();
                return (org_ptr(0x1404646a0L))();
            };
            char* FeedbackSize()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x14061ce30L))(this);
            };
            char* GroupOID()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x14057ea80L))(this);
            };
            char* GroupSize()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x14063fe70L))(this);
            };
            char* HashVerificationFilterFlags()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x1405ff630L))(this);
            };
            char* IV()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x1405f6780L))(this);
            };
            char* InputBinaryMode()
            {
                using org_ptr = char* (WINAPIV*)();
                return (org_ptr(0x14044d080L))();
            };
            char* InputBuffer()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x1405ffb60L))(this);
            };
            char* InputFileName()
            {
                using org_ptr = char* (WINAPIV*)();
                return (org_ptr(0x14044d070L))();
            };
            char* InputStreamPointer()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x14061e560L))(this);
            };
            char* KeyDerivationParameters()
            {
                using org_ptr = char* (WINAPIV*)();
                return (org_ptr(0x140463470L))();
            };
            char* Log2Base()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x140579d80L))(this);
            };
            char* Modulus()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x140633d90L))(this);
            };
            char* OutputBinaryMode()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x14061e980L))(this);
            };
            char* OutputBuffer()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x1405ff380L))(this);
            };
            char* OutputFileName()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x14061e960L))(this);
            };
            char* OutputStreamPointer()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x14061e970L))(this);
            };
            char* Pad()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x14063fe30L))(this);
            };
            char* PaddingByte()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x14063fe40L))(this);
            };
            char* PointerToPrimeSelector()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x1405ef590L))(this);
            };
            char* PrivateExponent()
            {
                using org_ptr = char* (WINAPIV*)();
                return (org_ptr(0x1404661d0L))();
            };
            char* PublicElement()
            {
                using org_ptr = char* (WINAPIV*)();
                return (org_ptr(0x1404660a0L))();
            };
            char* PutMessage()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x1405ff5c0L))(this);
            };
            char* Rounds()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x1405f6710L))(this);
            };
            char* Separator()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x14063fe50L))(this);
            };
            char* SignatureVerificationFilterFlags()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x1405ff920L))(this);
            };
            char* StolenIV()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x14055b780L))(this);
            };
            char* SubgroupGenerator()
            {
                using org_ptr = char* (WINAPIV*)();
                return (org_ptr(0x140469cb0L))();
            };
            char* SubgroupOrder()
            {
                using org_ptr = char* (WINAPIV*)();
                return (org_ptr(0x140469ca0L))();
            };
            char* Terminator()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x14063fe60L))(this);
            };
            char* TruncatedDigestSize()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x1405ff5d0L))(this);
            };
            char* Uppercase()
            {
                using org_ptr = char* (WINAPIV*)(struct Name*);
                return (org_ptr(0x14063e480L))(this);
            };
        }
        ;
        struct BaseN_Decoder
        {
        public:
            BaseN_Decoder(int* arg_0, int arg_1, struct BufferedTransformation* arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct BaseN_Decoder*, int*, int, struct BufferedTransformation*);
                (org_ptr(0x140579b70L))(this, arg_0, arg_1, arg_2);
            };
            int64_t ctor_BaseN_Decoder(int* arg_0, int arg_1, struct BufferedTransformation* arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct BaseN_Decoder*, int*, int, struct BufferedTransformation*);
                return (org_ptr(0x140579b70L))(this, arg_0, arg_1, arg_2);
            };
            static void InitializeDecodingLookupArray(int* arg_0, uint8_t* arg_1, unsigned int arg_2, bool arg_3)
            {
                using org_ptr = void (WINAPIV*)(int*, uint8_t*, unsigned int, bool);
                (org_ptr(0x14063f670L))(arg_0, arg_1, arg_2, arg_3);
            };
            void IsolatedInitialize(struct NameValuePairs* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct BaseN_Decoder*, struct NameValuePairs*);
                (org_ptr(0x14063f020L))(this, arg_0);
            };
            uint64_t Put2(uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct BaseN_Decoder*, uint8_t*, uint64_t, int, bool);
                return (org_ptr(0x14063f1f0L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            ~BaseN_Decoder()
            {
                using org_ptr = int64_t (WINAPIV*)(struct BaseN_Decoder*);
                (org_ptr(0x140579ec0L))(this);
            };
            int64_t dtor_BaseN_Decoder()
            {
                using org_ptr = int64_t (WINAPIV*)(struct BaseN_Decoder*);
                return (org_ptr(0x140579ec0L))(this);
            };
        }
        ;
        struct HexDecoder
        {
        public:
            static int* GetDefaultDecodingLookupArray()
            {
                using org_ptr = int* (WINAPIV*)();
                return (org_ptr(0x14063e380L))();
            };
            HexDecoder(struct BufferedTransformation* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct HexDecoder*, struct BufferedTransformation*);
                (org_ptr(0x140579b10L))(this, arg_0);
            };
            int64_t ctor_HexDecoder(struct BufferedTransformation* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct HexDecoder*, struct BufferedTransformation*);
                return (org_ptr(0x140579b10L))(this, arg_0);
            };
            void IsolatedInitialize(struct NameValuePairs* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct HexDecoder*, struct NameValuePairs*);
                (org_ptr(0x14063e1f0L))(this, arg_0);
            };
            ~HexDecoder()
            {
                using org_ptr = int64_t (WINAPIV*)(struct HexDecoder*);
                (org_ptr(0x140579f80L))(this);
            };
            int64_t dtor_HexDecoder()
            {
                using org_ptr = int64_t (WINAPIV*)(struct HexDecoder*);
                return (org_ptr(0x140579f80L))(this);
            };
        }
        ;
        struct WindowSlider
        {
        public:
            void FindNextWindow()
            {
                using org_ptr = void (WINAPIV*)(struct WindowSlider*);
                (org_ptr(0x14056e6b0L))(this);
            };
            WindowSlider(struct Integer* arg_0, bool arg_1, unsigned int arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct WindowSlider*, struct Integer*, bool, unsigned int);
                (org_ptr(0x14056e500L))(this, arg_0, arg_1, arg_2);
            };
            int64_t ctor_WindowSlider(struct Integer* arg_0, bool arg_1, unsigned int arg_2)
            {
                using org_ptr = int64_t (WINAPIV*)(struct WindowSlider*, struct Integer*, bool, unsigned int);
                return (org_ptr(0x14056e500L))(this, arg_0, arg_1, arg_2);
            };
            WindowSlider(struct WindowSlider* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct WindowSlider*, struct WindowSlider*);
                (org_ptr(0x1405980d0L))(this, arg_0);
            };
            int64_t ctor_WindowSlider(struct WindowSlider* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct WindowSlider*, struct WindowSlider*);
                return (org_ptr(0x1405980d0L))(this, arg_0);
            };
            ~WindowSlider()
            {
                using org_ptr = int64_t (WINAPIV*)(struct WindowSlider*);
                (org_ptr(0x14058a3f0L))(this);
            };
            int64_t dtor_WindowSlider()
            {
                using org_ptr = int64_t (WINAPIV*)(struct WindowSlider*);
                return (org_ptr(0x14058a3f0L))(this);
            };
        }
        ;
        struct DWord
        {
        public:
            DWord(uint64_t arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct DWord*, uint64_t);
                (org_ptr(0x1405f3210L))(this, arg_0);
            };
            int64_t ctor_DWord(uint64_t arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct DWord*, uint64_t);
                return (org_ptr(0x1405f3210L))(this, arg_0);
            };
            DWord(uint64_t arg_0, uint64_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct DWord*, uint64_t, uint64_t);
                (org_ptr(0x1405eec80L))(this, arg_0, arg_1);
            };
            int64_t ctor_DWord(uint64_t arg_0, uint64_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct DWord*, uint64_t, uint64_t);
                return (org_ptr(0x1405eec80L))(this, arg_0, arg_1);
            };
            DWord()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DWord*);
                (org_ptr(0x1405f32b0L))(this);
            };
            int64_t ctor_DWord()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DWord*);
                return (org_ptr(0x1405f32b0L))(this);
            };
            uint64_t GetHighHalf()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct DWord*);
                return (org_ptr(0x1405eecc0L))(this);
            };
            uint64_t GetHighHalfAsBorrow()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct DWord*);
                return (org_ptr(0x1405f33f0L))(this);
            };
            uint64_t GetLowHalf()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct DWord*);
                return (org_ptr(0x1405eecb0L))(this);
            };
        }
        ;
        struct KDF2_RNG
        {
        public:
            void GenerateBlock(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct KDF2_RNG*, uint8_t*, uint64_t);
                (org_ptr(0x1405ef730L))(this, arg_0, arg_1);
            };
            KDF2_RNG(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct KDF2_RNG*, uint8_t*, uint64_t);
                (org_ptr(0x1405ef5a0L))(this, arg_0, arg_1);
            };
            int64_t ctor_KDF2_RNG(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct KDF2_RNG*, uint8_t*, uint64_t);
                return (org_ptr(0x1405ef5a0L))(this, arg_0, arg_1);
            };
            ~KDF2_RNG()
            {
                using org_ptr = int64_t (WINAPIV*)(struct KDF2_RNG*);
                (org_ptr(0x1405ef820L))(this);
            };
            int64_t dtor_KDF2_RNG()
            {
                using org_ptr = int64_t (WINAPIV*)(struct KDF2_RNG*);
                return (org_ptr(0x1405ef820L))(this);
            };
        }
        ;
        struct Word
        {
        public:
            unsigned int GetHighHalf()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct Word*);
                return (org_ptr(0x1405f0ec0L))(this);
            };
            unsigned int GetHighHalfAsBorrow()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct Word*);
                return (org_ptr(0x1405f2da0L))(this);
            };
            unsigned int GetLowHalf()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct Word*);
                return (org_ptr(0x1405f0eb0L))(this);
            };
            uint64_t GetWhole()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct Word*);
                return (org_ptr(0x1405efb60L))(this);
            };
            Word(unsigned int arg_0, unsigned int arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Word*, unsigned int, unsigned int);
                (org_ptr(0x1405efcb0L))(this, arg_0, arg_1);
            };
            int64_t ctor_Word(unsigned int arg_0, unsigned int arg_1)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Word*, unsigned int, unsigned int);
                return (org_ptr(0x1405efcb0L))(this, arg_0, arg_1);
            };
            Word(uint64_t arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Word*, uint64_t);
                (org_ptr(0x1405efb40L))(this, arg_0);
            };
            int64_t ctor_Word(uint64_t arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct Word*, uint64_t);
                return (org_ptr(0x1405efb40L))(this, arg_0);
            };
            Word()
            {
                using org_ptr = int64_t (WINAPIV*)(struct Word*);
                (org_ptr(0x1405f2cc0L))(this);
            };
            int64_t ctor_Word()
            {
                using org_ptr = int64_t (WINAPIV*)(struct Word*);
                return (org_ptr(0x1405f2cc0L))(this);
            };
        }
        ;
        struct ClassNullRNG
        {
        public:
            ClassNullRNG()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ClassNullRNG*);
                (org_ptr(0x1405f6870L))(this);
            };
            int64_t ctor_ClassNullRNG()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ClassNullRNG*);
                return (org_ptr(0x1405f6870L))(this);
            };
            void GenerateBlock(uint8_t* arg_0, uint64_t arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct ClassNullRNG*, uint8_t*, uint64_t);
                (org_ptr(0x1405f6900L))(this, arg_0, arg_1);
            };
            ~ClassNullRNG()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ClassNullRNG*);
                (org_ptr(0x1405f69f0L))(this);
            };
            int64_t dtor_ClassNullRNG()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ClassNullRNG*);
                return (org_ptr(0x1405f69f0L))(this);
            };
        }
        ;
        struct ProjectivePoint
        {
        public:
            ProjectivePoint(struct ProjectivePoint* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ProjectivePoint*, struct ProjectivePoint*);
                (org_ptr(0x140614de0L))(this, arg_0);
            };
            int64_t ctor_ProjectivePoint(struct ProjectivePoint* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ProjectivePoint*, struct ProjectivePoint*);
                return (org_ptr(0x140614de0L))(this, arg_0);
            };
            ProjectivePoint()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ProjectivePoint*);
                (org_ptr(0x140611b30L))(this);
            };
            int64_t ctor_ProjectivePoint()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ProjectivePoint*);
                return (org_ptr(0x140611b30L))(this);
            };
            ~ProjectivePoint()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ProjectivePoint*);
                (org_ptr(0x140612210L))(this);
            };
            int64_t dtor_ProjectivePoint()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ProjectivePoint*);
                return (org_ptr(0x140612210L))(this);
            };
        }
        ;
        struct ProjectiveDoubling
        {
        public:
            void Double()
            {
                using org_ptr = void (WINAPIV*)(struct ProjectiveDoubling*);
                (org_ptr(0x140611bc0L))(this);
            };
            ProjectiveDoubling(struct ModularArithmetic* arg_0, struct Integer* arg_1, struct Integer* arg_2, struct ECPPoint* arg_3)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ProjectiveDoubling*, struct ModularArithmetic*, struct Integer*, struct Integer*, struct ECPPoint*);
                (org_ptr(0x140611860L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            int64_t ctor_ProjectiveDoubling(struct ModularArithmetic* arg_0, struct Integer* arg_1, struct Integer* arg_2, struct ECPPoint* arg_3)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ProjectiveDoubling*, struct ModularArithmetic*, struct Integer*, struct Integer*, struct ECPPoint*);
                return (org_ptr(0x140611860L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            ~ProjectiveDoubling()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ProjectiveDoubling*);
                (org_ptr(0x140612450L))(this);
            };
            int64_t dtor_ProjectiveDoubling()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ProjectiveDoubling*);
                return (org_ptr(0x140612450L))(this);
            };
        }
        ;
        struct PrimeAndGenerator
        {
        public:
            void Generate(int arg_0, struct RandomNumberGenerator* arg_1, unsigned int arg_2, unsigned int arg_3)
            {
                using org_ptr = void (WINAPIV*)(struct PrimeAndGenerator*, int, struct RandomNumberGenerator*, unsigned int, unsigned int);
                (org_ptr(0x14064abc0L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            Generator()
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct PrimeAndGenerator*);
                (org_ptr(0x140633cf0L))(this);
            };
            struct Integer* ctor_Generator()
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct PrimeAndGenerator*);
                return (org_ptr(0x140633cf0L))(this);
            };
            struct Integer* Prime()
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct PrimeAndGenerator*);
                return (org_ptr(0x140633cd0L))(this);
            };
            PrimeAndGenerator()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PrimeAndGenerator*);
                (org_ptr(0x140633c40L))(this);
            };
            int64_t ctor_PrimeAndGenerator()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PrimeAndGenerator*);
                return (org_ptr(0x140633c40L))(this);
            };
            struct Integer* SubPrime()
            {
                using org_ptr = struct Integer* (WINAPIV*)(struct PrimeAndGenerator*);
                return (org_ptr(0x140633ce0L))(this);
            };
            ~PrimeAndGenerator()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PrimeAndGenerator*);
                (org_ptr(0x140633d00L))(this);
            };
            int64_t dtor_PrimeAndGenerator()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PrimeAndGenerator*);
                return (org_ptr(0x140633d00L))(this);
            };
        }
        ;
        struct BaseN_Encoder
        {
        public:
            void IsolatedInitialize(struct NameValuePairs* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct BaseN_Encoder*, struct NameValuePairs*);
                (org_ptr(0x14063e750L))(this, arg_0);
            };
            uint64_t Put2(uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct BaseN_Encoder*, uint8_t*, uint64_t, int, bool);
                return (org_ptr(0x14063e990L))(this, arg_0, arg_1, arg_2, arg_3);
            };
        }
        ;
        struct Grouper
        {
        public:
            void IsolatedInitialize(struct NameValuePairs* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct Grouper*, struct NameValuePairs*);
                (org_ptr(0x14063f820L))(this, arg_0);
            };
            uint64_t Put2(uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct Grouper*, uint8_t*, uint64_t, int, bool);
                return (org_ptr(0x14063f9d0L))(this, arg_0, arg_1, arg_2, arg_3);
            };
        }
        ;
        struct PrimeSieve
        {
        public:
            void DoSieve()
            {
                using org_ptr = void (WINAPIV*)(struct PrimeSieve*);
                (org_ptr(0x1406440f0L))(this);
            };
            bool NextCandidate(struct Integer* arg_0)
            {
                using org_ptr = bool (WINAPIV*)(struct PrimeSieve*, struct Integer*);
                return (org_ptr(0x1406437e0L))(this, arg_0);
            };
            PrimeSieve(struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2, int arg_3)
            {
                using org_ptr = int64_t (WINAPIV*)(struct PrimeSieve*, struct Integer*, struct Integer*, struct Integer*, int);
                (org_ptr(0x1406436a0L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            int64_t ctor_PrimeSieve(struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2, int arg_3)
            {
                using org_ptr = int64_t (WINAPIV*)(struct PrimeSieve*, struct Integer*, struct Integer*, struct Integer*, int);
                return (org_ptr(0x1406436a0L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            ~PrimeSieve()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PrimeSieve*);
                (org_ptr(0x14064ca80L))(this);
            };
            int64_t dtor_PrimeSieve()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PrimeSieve*);
                return (org_ptr(0x14064ca80L))(this);
            };
        }
        ;
        struct MessageQueue
        {
        public:
            bool AnyRetrievable()
            {
                using org_ptr = bool (WINAPIV*)(struct MessageQueue*);
                return (org_ptr(0x140655190L))(this);
            };
            bool GetNextMessage()
            {
                using org_ptr = bool (WINAPIV*)(struct MessageQueue*);
                return (org_ptr(0x140654540L))(this);
            };
            bool IsolatedFlush(bool arg_0, bool arg_1)
            {
                using org_ptr = bool (WINAPIV*)(struct MessageQueue*, bool, bool);
                return (org_ptr(0x140655100L))(this, arg_0, arg_1);
            };
            void IsolatedInitialize(struct NameValuePairs* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct MessageQueue*, struct NameValuePairs*);
                (org_ptr(0x140654fb0L))(this, arg_0);
            };
            bool IsolatedMessageSeriesEnd(bool arg_0)
            {
                using org_ptr = bool (WINAPIV*)(struct MessageQueue*, bool);
                return (org_ptr(0x140655120L))(this, arg_0);
            };
            uint64_t MaxRetrievable()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct MessageQueue*);
                return (org_ptr(0x140655160L))(this);
            };
            MessageQueue(unsigned int arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct MessageQueue*, unsigned int);
                (org_ptr(0x1406542a0L))(this, arg_0);
            };
            int64_t ctor_MessageQueue(unsigned int arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct MessageQueue*, unsigned int);
                return (org_ptr(0x1406542a0L))(this, arg_0);
            };
            unsigned int NumberOfMessageSeries()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct MessageQueue*);
                return (org_ptr(0x140655260L))(this);
            };
            unsigned int NumberOfMessages()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct MessageQueue*);
                return (org_ptr(0x140655200L))(this);
            };
            unsigned int NumberOfMessagesInThisSeries()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct MessageQueue*);
                return (org_ptr(0x140655230L))(this);
            };
            uint64_t Put2(uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct MessageQueue*, uint8_t*, uint64_t, int, bool);
                return (org_ptr(0x140655040L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            uint8_t* Spy(uint64_t* arg_0)
            {
                using org_ptr = uint8_t* (WINAPIV*)(struct MessageQueue*, uint64_t*);
                return (org_ptr(0x1406548e0L))(this, arg_0);
            };
            uint64_t TotalBytesRetrievable()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct MessageQueue*);
                return (org_ptr(0x1406551d0L))(this);
            };
            void swap(struct MessageQueue* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct MessageQueue*, struct MessageQueue*);
                (org_ptr(0x140654890L))(this, arg_0);
            };
            ~MessageQueue()
            {
                using org_ptr = int64_t (WINAPIV*)(struct MessageQueue*);
                (org_ptr(0x1406552f0L))(this);
            };
            int64_t dtor_MessageQueue()
            {
                using org_ptr = int64_t (WINAPIV*)(struct MessageQueue*);
                return (org_ptr(0x1406552f0L))(this);
            };
        }
        ;
        struct TimerBase
        {
        public:
            uint32_t ElapsedTime()
            {
                using org_ptr = uint32_t (WINAPIV*)(struct TimerBase*);
                return (org_ptr(0x140660a50L))(this);
            };
            double ElapsedTimeAsDouble()
            {
                using org_ptr = double (WINAPIV*)(struct TimerBase*);
                return (org_ptr(0x1406609a0L))(this);
            };
            void StartTimer()
            {
                using org_ptr = void (WINAPIV*)(struct TimerBase*);
                (org_ptr(0x140660950L))(this);
            };
        }
        ;
        struct Timer
        {
        public:
            uint64_t GetCurrentTimerValue()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct Timer*);
                return (org_ptr(0x140660ab0L))(this);
            };
            uint64_t TicksPerSecond()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct Timer*);
                return (org_ptr(0x140660be0L))(this);
            };
        }
        ;
        struct ThreadUserTimer
        {
        public:
            uint64_t GetCurrentTimerValue()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct ThreadUserTimer*);
                return (org_ptr(0x140660d30L))(this);
            };
            uint64_t TicksPerSecond()
            {
                using org_ptr = uint64_t (WINAPIV*)(struct ThreadUserTimer*);
                return (org_ptr(0x140660ed0L))(this);
            };
        }
        ;
        struct SosemanukPolicy
        {
        public:
            void CipherResynchronize(uint8_t* arg_0, uint8_t* arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct SosemanukPolicy*, uint8_t*, uint8_t*);
                (org_ptr(0x140661dc0L))(this, arg_0, arg_1);
            };
            void CipherSetKey(struct NameValuePairs* arg_0, uint8_t* arg_1, uint64_t arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct SosemanukPolicy*, struct NameValuePairs*, uint8_t*, uint64_t);
                (org_ptr(0x140661d70L))(this, arg_0, arg_1, arg_2);
            };
            unsigned int GetAlignment()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct SosemanukPolicy*);
                return (org_ptr(0x1406631f0L))(this);
            };
            unsigned int GetOptimalBlockSize()
            {
                using org_ptr = unsigned int (WINAPIV*)(struct SosemanukPolicy*);
                return (org_ptr(0x140663210L))(this);
            };
            void OperateKeystream(struct KeystreamOperation arg_0, uint8_t* arg_1, uint8_t* arg_2, uint64_t arg_3)
            {
                using org_ptr = void (WINAPIV*)(struct SosemanukPolicy*, struct KeystreamOperation, uint8_t*, uint8_t*, uint64_t);
                (org_ptr(0x140663230L))(this, arg_0, arg_1, arg_2, arg_3);
            };
        }
        ;
        struct PK_DefaultEncryptionFilter
        {
        public:
            PK_DefaultEncryptionFilter(struct RandomNumberGenerator* arg_0, struct PK_Encryptor* arg_1, struct BufferedTransformation* arg_2, struct NameValuePairs* arg_3)
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_DefaultEncryptionFilter*, struct RandomNumberGenerator*, struct PK_Encryptor*, struct BufferedTransformation*, struct NameValuePairs*);
                (org_ptr(0x1405f6a50L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            int64_t ctor_PK_DefaultEncryptionFilter(struct RandomNumberGenerator* arg_0, struct PK_Encryptor* arg_1, struct BufferedTransformation* arg_2, struct NameValuePairs* arg_3)
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_DefaultEncryptionFilter*, struct RandomNumberGenerator*, struct PK_Encryptor*, struct BufferedTransformation*, struct NameValuePairs*);
                return (org_ptr(0x1405f6a50L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            uint64_t Put2(uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct PK_DefaultEncryptionFilter*, uint8_t*, uint64_t, int, bool);
                return (org_ptr(0x1405f6b70L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            ~PK_DefaultEncryptionFilter()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_DefaultEncryptionFilter*);
                (org_ptr(0x1405f6f50L))(this);
            };
            int64_t dtor_PK_DefaultEncryptionFilter()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_DefaultEncryptionFilter*);
                return (org_ptr(0x1405f6f50L))(this);
            };
        }
        ;
        struct PK_DefaultDecryptionFilter
        {
        public:
            PK_DefaultDecryptionFilter(struct RandomNumberGenerator* arg_0, struct PK_Decryptor* arg_1, struct BufferedTransformation* arg_2, struct NameValuePairs* arg_3)
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_DefaultDecryptionFilter*, struct RandomNumberGenerator*, struct PK_Decryptor*, struct BufferedTransformation*, struct NameValuePairs*);
                (org_ptr(0x1405f6fe0L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            int64_t ctor_PK_DefaultDecryptionFilter(struct RandomNumberGenerator* arg_0, struct PK_Decryptor* arg_1, struct BufferedTransformation* arg_2, struct NameValuePairs* arg_3)
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_DefaultDecryptionFilter*, struct RandomNumberGenerator*, struct PK_Decryptor*, struct BufferedTransformation*, struct NameValuePairs*);
                return (org_ptr(0x1405f6fe0L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            uint64_t Put2(uint8_t* arg_0, uint64_t arg_1, int arg_2, bool arg_3)
            {
                using org_ptr = uint64_t (WINAPIV*)(struct PK_DefaultDecryptionFilter*, uint8_t*, uint64_t, int, bool);
                return (org_ptr(0x1405f7110L))(this, arg_0, arg_1, arg_2, arg_3);
            };
            ~PK_DefaultDecryptionFilter()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_DefaultDecryptionFilter*);
                (org_ptr(0x1405f7670L))(this);
            };
            int64_t dtor_PK_DefaultDecryptionFilter()
            {
                using org_ptr = int64_t (WINAPIV*)(struct PK_DefaultDecryptionFilter*);
                return (org_ptr(0x1405f7670L))(this);
            };
        }
        ;
        struct EqualityComparisonFilter
        {
        
                struct MismatchDetected
                {
                public:
                    MismatchDetected(struct MismatchDetected* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct MismatchDetected*, struct MismatchDetected*);
                        (org_ptr(0x140655510L))(this, arg_0);
                    };
                    int64_t ctor_MismatchDetected(struct MismatchDetected* arg_0)
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct MismatchDetected*, struct MismatchDetected*);
                        return (org_ptr(0x140655510L))(this, arg_0);
                    };
                    MismatchDetected()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct MismatchDetected*);
                        (org_ptr(0x1406553f0L))(this);
                    };
                    int64_t ctor_MismatchDetected()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct MismatchDetected*);
                        return (org_ptr(0x1406553f0L))(this);
                    };
                    ~MismatchDetected()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct MismatchDetected*);
                        (org_ptr(0x1406554f0L))(this);
                    };
                    int64_t dtor_MismatchDetected()
                    {
                        using org_ptr = int64_t (WINAPIV*)(struct MismatchDetected*);
                        return (org_ptr(0x1406554f0L))(this);
                    };
                }
                ;public:
            bool HandleMismatchDetected(bool arg_0)
            {
                using org_ptr = bool (WINAPIV*)(struct EqualityComparisonFilter*, bool);
                return (org_ptr(0x140654ef0L))(this, arg_0);
            };
        }
        ;
        struct RawDES
        {
        public:
            RawDES(struct RawDES* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct RawDES*, struct RawDES*);
                (org_ptr(0x14061c1f0L))(this, arg_0);
            };
            int64_t ctor_RawDES(struct RawDES* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct RawDES*, struct RawDES*);
                return (org_ptr(0x14061c1f0L))(this, arg_0);
            };
            RawDES()
            {
                using org_ptr = int64_t (WINAPIV*)(struct RawDES*);
                (org_ptr(0x14061cb30L))(this);
            };
            int64_t ctor_RawDES()
            {
                using org_ptr = int64_t (WINAPIV*)(struct RawDES*);
                return (org_ptr(0x14061cb30L))(this);
            };
            void RawProcessBlock(unsigned int* arg_0, unsigned int* arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct RawDES*, unsigned int*, unsigned int*);
                (org_ptr(0x14065f430L))(this, arg_0, arg_1);
            };
            void RawSetKey(struct CipherDir arg_0, uint8_t* arg_1)
            {
                using org_ptr = void (WINAPIV*)(struct RawDES*, struct CipherDir, uint8_t*);
                (org_ptr(0x14065f020L))(this, arg_0, arg_1);
            };
            ~RawDES()
            {
                using org_ptr = int64_t (WINAPIV*)(struct RawDES*);
                (org_ptr(0x14061a000L))(this);
            };
            int64_t dtor_RawDES()
            {
                using org_ptr = int64_t (WINAPIV*)(struct RawDES*);
                return (org_ptr(0x14061a000L))(this);
            };
        }
        ;
        struct DES_EDE2::Base
        {
        public:
            void ProcessAndXorBlock(uint8_t* arg_0, uint8_t* arg_1, uint8_t* arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct DES_EDE2::Base*, uint8_t*, uint8_t*, uint8_t*);
                (org_ptr(0x14065f7c0L))(this, arg_0, arg_1, arg_2);
            };
            void UncheckedSetKey(uint8_t* arg_0, unsigned int arg_1, struct NameValuePairs* arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct DES_EDE2::Base*, uint8_t*, unsigned int, struct NameValuePairs*);
                (org_ptr(0x14065f720L))(this, arg_0, arg_1, arg_2);
            };
        }
        ;
        struct DES_EDE3::Base
        {
        public:
            void ProcessAndXorBlock(uint8_t* arg_0, uint8_t* arg_1, uint8_t* arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct DES_EDE3::Base*, uint8_t*, uint8_t*, uint8_t*);
                (org_ptr(0x14065fda0L))(this, arg_0, arg_1, arg_2);
            };
            void UncheckedSetKey(uint8_t* arg_0, unsigned int arg_1, struct NameValuePairs* arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct DES_EDE3::Base*, uint8_t*, unsigned int, struct NameValuePairs*);
                (org_ptr(0x14065fc30L))(this, arg_0, arg_1, arg_2);
            };
        }
        ;
        struct DES_XEX3::Base
        {
        public:
            void ProcessAndXorBlock(uint8_t* arg_0, uint8_t* arg_1, uint8_t* arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct DES_XEX3::Base*, uint8_t*, uint8_t*, uint8_t*);
                (org_ptr(0x140660290L))(this, arg_0, arg_1, arg_2);
            };
            void UncheckedSetKey(uint8_t* arg_0, unsigned int arg_1, struct NameValuePairs* arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct DES_XEX3::Base*, uint8_t*, unsigned int, struct NameValuePairs*);
                (org_ptr(0x140660080L))(this, arg_0, arg_1, arg_2);
            };
        }
        ;
        struct Serpent::Enc
        {
        public:
            void ProcessAndXorBlock(uint8_t* arg_0, uint8_t* arg_1, uint8_t* arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct Serpent::Enc*, uint8_t*, uint8_t*, uint8_t*);
                (org_ptr(0x14066ae70L))(this, arg_0, arg_1, arg_2);
            };
        }
        ;
        struct Serpent::Dec
        {
        public:
            void ProcessAndXorBlock(uint8_t* arg_0, uint8_t* arg_1, uint8_t* arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct Serpent::Dec*, uint8_t*, uint8_t*, uint8_t*);
                (org_ptr(0x14066c0a0L))(this, arg_0, arg_1, arg_2);
            };
        }
        ;
        struct ZIterator
        {
        public:
            ZIterator(struct ZIterator* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ZIterator*, struct ZIterator*);
                (org_ptr(0x140612370L))(this, arg_0);
            };
            int64_t ctor_ZIterator(struct ZIterator* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct ZIterator*, struct ZIterator*);
                return (org_ptr(0x140612370L))(this, arg_0);
            };
            ZIterator()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ZIterator*);
                (org_ptr(0x1406161d0L))(this);
            };
            int64_t ctor_ZIterator()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ZIterator*);
                return (org_ptr(0x1406161d0L))(this);
            };
            ~ZIterator()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ZIterator*);
                (org_ptr(0x140612350L))(this);
            };
            int64_t dtor_ZIterator()
            {
                using org_ptr = int64_t (WINAPIV*)(struct ZIterator*);
                return (org_ptr(0x140612350L))(this);
            };
        }
        ;
        struct DES::Base
        {
        public:
            Base(struct DES::Base* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct DES::Base*, struct DES::Base*);
                (org_ptr(0x14061c130L))(this, arg_0);
            };
            int64_t ctor_Base(struct DES::Base* arg_0)
            {
                using org_ptr = int64_t (WINAPIV*)(struct DES::Base*, struct DES::Base*);
                return (org_ptr(0x14061c130L))(this, arg_0);
            };
            Base()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DES::Base*);
                (org_ptr(0x14061cab0L))(this);
            };
            int64_t ctor_Base()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DES::Base*);
                return (org_ptr(0x14061cab0L))(this);
            };
            void ProcessAndXorBlock(uint8_t* arg_0, uint8_t* arg_1, uint8_t* arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct DES::Base*, uint8_t*, uint8_t*, uint8_t*);
                (org_ptr(0x14065ffc0L))(this, arg_0, arg_1, arg_2);
            };
            void UncheckedSetKey(uint8_t* arg_0, unsigned int arg_1, struct NameValuePairs* arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct DES::Base*, uint8_t*, unsigned int, struct NameValuePairs*);
                (org_ptr(0x14065efc0L))(this, arg_0, arg_1, arg_2);
            };
            ~Base()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DES::Base*);
                (org_ptr(0x140619f10L))(this);
            };
            int64_t dtor_Base()
            {
                using org_ptr = int64_t (WINAPIV*)(struct DES::Base*);
                return (org_ptr(0x140619f10L))(this);
            };
        }
        ;
        struct HexEncoder
        {
        public:
            void IsolatedInitialize(struct NameValuePairs* arg_0)
            {
                using org_ptr = void (WINAPIV*)(struct HexEncoder*, struct NameValuePairs*);
                (org_ptr(0x14063dff0L))(this, arg_0);
            };
        }
        ;
        struct Serpent::Base
        {
        public:
            void UncheckedSetKey(uint8_t* arg_0, unsigned int arg_1, struct NameValuePairs* arg_2)
            {
                using org_ptr = void (WINAPIV*)(struct Serpent::Base*, uint8_t*, unsigned int, struct NameValuePairs*);
                (org_ptr(0x14066ae00L))(this, arg_0, arg_1, arg_2);
            };
        }
        ;
        struct ASN1
        {
        public:
            struct OID* ansi_x9_57(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x140633ed0L))(this, retstr);
            };
            struct OID* ansi_x9_62(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14057ccd0L))(this, retstr);
            };
            struct OID* ansi_x9_62_curves(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14057cc10L))(this, retstr);
            };
            struct OID* ansi_x9_62_curves_prime(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14057cb50L))(this, retstr);
            };
            struct OID* certicom(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14057d1c0L))(this, retstr);
            };
            struct OID* certicom_ellipticCurve(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14057d100L))(this, retstr);
            };
            struct OID* characteristic_two_field(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14062c5e0L))(this, retstr);
            };
            struct OID* id_characteristic_two_basis(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14062c760L))(this, retstr);
            };
            struct OID* id_dsa(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x140633da0L))(this, retstr);
            };
            struct OID* id_ecPublicKey(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x140580090L))(this, retstr);
            };
            struct OID* id_fieldType(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x1405efed0L))(this, retstr);
            };
            struct OID* id_publicKeyType(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x140580150L))(this, retstr);
            };
            struct OID* identified_organization(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14057d280L))(this, retstr);
            };
            struct OID* iso(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14057cf10L))(this, retstr);
            };
            struct OID* iso_us(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14057cd90L))(this, retstr);
            };
            struct OID* member_body(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14057ce50L))(this, retstr);
            };
            struct OID* ppBasis(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14062c820L))(this, retstr);
            };
            struct OID* prime_field(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x1405efe10L))(this, retstr);
            };
            struct OID* secp112r1(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14057d040L))(this, retstr);
            };
            struct OID* secp112r2(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14057d340L))(this, retstr);
            };
            struct OID* secp128r1(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14057d640L))(this, retstr);
            };
            struct OID* secp128r2(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14057d700L))(this, retstr);
            };
            struct OID* secp160k1(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14057d4c0L))(this, retstr);
            };
            struct OID* secp160r1(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14057d400L))(this, retstr);
            };
            struct OID* secp160r2(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14057d7c0L))(this, retstr);
            };
            struct OID* secp192k1(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14057d880L))(this, retstr);
            };
            struct OID* secp192r1(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14057c950L))(this, retstr);
            };
            struct OID* secp224k1(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14057d940L))(this, retstr);
            };
            struct OID* secp224r1(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14057da00L))(this, retstr);
            };
            struct OID* secp256k1(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14057d580L))(this, retstr);
            };
            struct OID* secp256r1(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14057cf80L))(this, retstr);
            };
            struct OID* secp384r1(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14057dac0L))(this, retstr);
            };
            struct OID* secp521r1(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14057db80L))(this, retstr);
            };
            struct OID* sect113r1(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x140581f40L))(this, retstr);
            };
            struct OID* sect113r2(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x140582000L))(this, retstr);
            };
            struct OID* sect131r1(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x140582300L))(this, retstr);
            };
            struct OID* sect131r2(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x1405823c0L))(this, retstr);
            };
            struct OID* sect163k1(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x140581d00L))(this, retstr);
            };
            struct OID* sect163r1(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x140581dc0L))(this, retstr);
            };
            struct OID* sect163r2(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x1405820c0L))(this, retstr);
            };
            struct OID* sect193r1(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x140582480L))(this, retstr);
            };
            struct OID* sect193r2(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x140582540L))(this, retstr);
            };
            struct OID* sect233k1(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x140582600L))(this, retstr);
            };
            struct OID* sect233r1(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x1405826c0L))(this, retstr);
            };
            struct OID* sect239k1(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x140581e80L))(this, retstr);
            };
            struct OID* sect283k1(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x140582180L))(this, retstr);
            };
            struct OID* sect283r1(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x140582240L))(this, retstr);
            };
            struct OID* sect409k1(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x140582780L))(this, retstr);
            };
            struct OID* sect409r1(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x140582840L))(this, retstr);
            };
            struct OID* sect571k1(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x140582900L))(this, retstr);
            };
            struct OID* sect571r1(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x1405829c0L))(this, retstr);
            };
            struct OID* tpBasis(short retstr)
            {
                using org_ptr = struct OID* (WINAPIV*)(struct ASN1*, short);
                return (org_ptr(0x14062c6a0L))(this, retstr);
            };
        }
        ;public:
        int64_t Add(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t arg_3)
        {
            using org_ptr = int64_t (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
            return (org_ptr(0x1405ee910L))(this, arg_0, arg_1, arg_2, arg_3);
        };
        unsigned int AlmostInverse(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t arg_3, uint64_t* arg_4, uint64_t arg_5)
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t, uint64_t*, uint64_t);
            return (org_ptr(0x1405e3980L))(this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5);
        };
        void AndWords(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t arg_3)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
            (org_ptr(0x14062c0c0L))(this, arg_0, arg_1, arg_2, arg_3);
        };
        struct AssignFromHelperClass<DL_PrivateKeyImpl<DL_GroupParameters_EC<ECP> >,DL_PrivateKey<ECPPoint> >* AssignFromHelper(struct DL_PrivateKeyImpl<DL_GroupParameters_EC<ECP> >* pObject, struct NameValuePairs* source, struct DL_PrivateKey<ECPPoint>* dummy)
        {
            using org_ptr = struct AssignFromHelperClass<DL_PrivateKeyImpl<DL_GroupParameters_EC<ECP> >,DL_PrivateKey<ECPPoint> >* (WINAPIV*)(struct AssignFromHelperClass<DL_PrivateKeyImpl<DL_GroupParameters_EC<ECP> >,DL_PrivateKey<ECPPoint> >*, struct DL_PrivateKeyImpl<DL_GroupParameters_EC<ECP> >*, struct NameValuePairs*, struct DL_PrivateKey<ECPPoint>*);
            return (org_ptr(0x14045f4d0L))(result, pObject, source, dummy);
        };
        struct AssignFromHelperClass<DL_PrivateKey<ECPPoint>,DL_PrivateKey<ECPPoint> >* AssignFromHelper(struct DL_PrivateKey<ECPPoint>* pObject, struct NameValuePairs* source)
        {
            using org_ptr = struct AssignFromHelperClass<DL_PrivateKey<ECPPoint>,DL_PrivateKey<ECPPoint> >* (WINAPIV*)(struct AssignFromHelperClass<DL_PrivateKey<ECPPoint>,DL_PrivateKey<ECPPoint> >*, struct DL_PrivateKey<ECPPoint>*, struct NameValuePairs*);
            return (org_ptr(0x140467710L))(result, pObject, source);
        };
        struct AssignFromHelperClass<DL_PublicKeyImpl<DL_GroupParameters_EC<ECP> >,DL_PublicKey<ECPPoint> >* AssignFromHelper(struct DL_PublicKeyImpl<DL_GroupParameters_EC<ECP> >* pObject, struct NameValuePairs* source, struct DL_PublicKey<ECPPoint>* dummy)
        {
            using org_ptr = struct AssignFromHelperClass<DL_PublicKeyImpl<DL_GroupParameters_EC<ECP> >,DL_PublicKey<ECPPoint> >* (WINAPIV*)(struct AssignFromHelperClass<DL_PublicKeyImpl<DL_GroupParameters_EC<ECP> >,DL_PublicKey<ECPPoint> >*, struct DL_PublicKeyImpl<DL_GroupParameters_EC<ECP> >*, struct NameValuePairs*, struct DL_PublicKey<ECPPoint>*);
            return (org_ptr(0x14045f3d0L))(result, pObject, source, dummy);
        };
        struct AssignFromHelperClass<DL_PublicKey<ECPPoint>,DL_PublicKey<ECPPoint> >* AssignFromHelper(struct DL_PublicKey<ECPPoint>* pObject, struct NameValuePairs* source)
        {
            using org_ptr = struct AssignFromHelperClass<DL_PublicKey<ECPPoint>,DL_PublicKey<ECPPoint> >* (WINAPIV*)(struct AssignFromHelperClass<DL_PublicKey<ECPPoint>,DL_PublicKey<ECPPoint> >*, struct DL_PublicKey<ECPPoint>*, struct NameValuePairs*);
            return (org_ptr(0x140468900L))(result, pObject, source);
        };
        bool AssignIntToInteger(struct type_info* arg_0, void* arg_1, void* arg_2)
        {
            using org_ptr = bool (WINAPIV*)(struct CryptoPP*, struct type_info*, void*, void*);
            return (org_ptr(0x1405ae320L))(this, arg_0, arg_1, arg_2);
        };
        void AsymmetricMultiply(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t arg_3, uint64_t* arg_4, uint64_t arg_5)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t, uint64_t*, uint64_t);
            (org_ptr(0x1405e2120L))(this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5);
        };
        void BERDecodeError()
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*);
            (org_ptr(0x14054e220L))(this);
        };
        struct GF2NP* BERDecodeGF2NP(struct BufferedTransformation* arg_0)
        {
            using org_ptr = struct GF2NP* (WINAPIV*)(struct CryptoPP*, struct BufferedTransformation*);
            return (org_ptr(0x14062ba00L))(this, arg_0);
        };
        void BERDecodeNull(struct BufferedTransformation* arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, struct BufferedTransformation*);
            (org_ptr(0x14054be60L))(this, arg_0);
        };
        uint64_t BERDecodeOctetString(struct BufferedTransformation* arg_0, struct BufferedTransformation* arg_1)
        {
            using org_ptr = uint64_t (WINAPIV*)(struct CryptoPP*, struct BufferedTransformation*, struct BufferedTransformation*);
            return (org_ptr(0x14054c040L))(this, arg_0, arg_1);
        };
        int64_t BERDecodeUnsigned()
        {
            using org_ptr = int64_t (WINAPIV*)(struct CryptoPP*);
            return (org_ptr(0x14054fab0L))(arg_0);
        };
        bool BERLengthDecode(struct BufferedTransformation* arg_0, uint64_t* arg_1)
        {
            using org_ptr = bool (WINAPIV*)(struct CryptoPP*, struct BufferedTransformation*, uint64_t*);
            return (org_ptr(0x14054bdc0L))(this, arg_0, arg_1);
        };
        bool BERLengthDecode(struct BufferedTransformation* arg_0, uint64_t* arg_1, bool* arg_2)
        {
            using org_ptr = bool (WINAPIV*)(struct CryptoPP*, struct BufferedTransformation*, uint64_t*, bool*);
            return (org_ptr(0x14054bcb0L))(this, arg_0, arg_1, arg_2);
        };
        void Baseline_Multiply16(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*);
            (org_ptr(0x1405bb130L))(this, arg_0, arg_1, arg_2);
        };
        void Baseline_Multiply2(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*);
            (org_ptr(0x1405ae3b0L))(this, arg_0, arg_1, arg_2);
        };
        void Baseline_Multiply4(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*);
            (org_ptr(0x1405ae6a0L))(this, arg_0, arg_1, arg_2);
        };
        void Baseline_Multiply8(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*);
            (org_ptr(0x1405af4e0L))(this, arg_0, arg_1, arg_2);
        };
        void Baseline_MultiplyBottom16(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*);
            (org_ptr(0x1405d1dc0L))(this, arg_0, arg_1, arg_2);
        };
        void Baseline_MultiplyBottom2(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*);
            (org_ptr(0x1405b5fe0L))(this, arg_0, arg_1, arg_2);
        };
        void Baseline_MultiplyBottom4(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*);
            (org_ptr(0x1405b60b0L))(this, arg_0, arg_1, arg_2);
        };
        void Baseline_MultiplyBottom8(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*);
            (org_ptr(0x1405b6670L))(this, arg_0, arg_1, arg_2);
        };
        void Baseline_MultiplyTop16(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t arg_3)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
            (org_ptr(0x1405d8c90L))(this, arg_0, arg_1, arg_2, arg_3);
        };
        void Baseline_MultiplyTop2(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t arg_3)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
            (org_ptr(0x1405b8100L))(this, arg_0, arg_1, arg_2, arg_3);
        };
        void Baseline_MultiplyTop4(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t arg_3)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
            (org_ptr(0x1405b8160L))(this, arg_0, arg_1, arg_2, arg_3);
        };
        void Baseline_MultiplyTop8(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t arg_3)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
            (org_ptr(0x1405b8c50L))(this, arg_0, arg_1, arg_2, arg_3);
        };
        void Baseline_Square16(uint64_t* arg_0, uint64_t* arg_1)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*);
            (org_ptr(0x1405c98b0L))(this, arg_0, arg_1);
        };
        void Baseline_Square2(uint64_t* arg_0, uint64_t* arg_1)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*);
            (org_ptr(0x1405b2f10L))(this, arg_0, arg_1);
        };
        void Baseline_Square4(uint64_t* arg_0, uint64_t* arg_1)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*);
            (org_ptr(0x1405b3160L))(this, arg_0, arg_1);
        };
        void Baseline_Square8(uint64_t* arg_0, uint64_t* arg_1)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*);
            (org_ptr(0x1405b3b60L))(this, arg_0, arg_1);
        };
        uint64_t BitsToBytes(uint64_t arg_0)
        {
            using org_ptr = uint64_t (WINAPIV*)(struct CryptoPP*, uint64_t);
            return (org_ptr(0x140557870L))(this, arg_0);
        };
        uint64_t BitsToWords(uint64_t arg_0)
        {
            using org_ptr = uint64_t (WINAPIV*)(struct CryptoPP*, uint64_t);
            return (org_ptr(0x1405eefd0L))(this, arg_0);
        };
        unsigned int ByteReverse()
        {
            using org_ptr = unsigned int (WINAPIV*)(unsigned int);
            return (org_ptr(0x140466a30L))(value);
        };
        uint64_t ByteReverse(uint64_t arg_0)
        {
            using org_ptr = uint64_t (WINAPIV*)(struct CryptoPP*, uint64_t);
            return (org_ptr(0x1405996f0L))(this, arg_0);
        };
        uint16_t ByteReverse(uint16_t arg_0)
        {
            using org_ptr = uint16_t (WINAPIV*)(struct CryptoPP*, uint16_t);
            return (org_ptr(0x1405f8570L))(this, arg_0);
        };
        uint64_t BytesToWords(uint64_t arg_0)
        {
            using org_ptr = uint64_t (WINAPIV*)(struct CryptoPP*, uint64_t);
            return (org_ptr(0x1405eeff0L))(this, arg_0);
        };
        struct Integer* CRT(short retstr, struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2, struct Integer* arg_3)
        {
            using org_ptr = struct Integer* (WINAPIV*)(struct Integer*, short, struct Integer*, struct Integer*, struct Integer*, struct Integer*);
            return (org_ptr(0x140647210L))(this, retstr, arg_0, arg_1, arg_2, arg_3);
        };
        struct Integer* CRT(struct Integer* retstr, struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2, struct Integer* arg_3, struct Integer* arg_4)
        {
            using org_ptr = struct Integer* (WINAPIV*)(struct Integer*, struct Integer*, struct Integer*, struct Integer*, struct Integer*, struct Integer*, struct Integer*);
            return (org_ptr(0x140646fe0L))(this, retstr, arg_0, arg_1, arg_2, arg_3, arg_4);
        };
        void CallNewHandler()
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*);
            (org_ptr(0x14061f700L))(this);
        };
        unsigned int ConditionalByteReverse(unsigned int value)
        {
            using org_ptr = unsigned int (WINAPIV*)(struct ByteOrder, unsigned int);
            return (org_ptr(0x140466930L))(order, value);
        };
        void CopyOrZero(void* arg_0, void* arg_1, uint64_t arg_2)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, void*, void*, uint64_t);
            (org_ptr(0x14061a410L))(this, arg_0, arg_1, arg_2);
        };
        void CopyWords(uint64_t* arg_0, uint64_t* arg_1, uint64_t arg_2)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t);
            (org_ptr(0x1405ee9e0L))(this, arg_0, arg_1, arg_2);
        };
        uint64_t CountWords(uint64_t* arg_0, uint64_t arg_1)
        {
            using org_ptr = uint64_t (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t);
            return (org_ptr(0x1405ef010L))(this, arg_0, arg_1);
        };
        bool CpuId(unsigned int arg_0, unsigned int* arg_1)
        {
            using org_ptr = bool (WINAPIV*)(struct CryptoPP*, unsigned int, unsigned int*);
            return (org_ptr(0x140660670L))(this, arg_0, arg_1);
        };
        uint64_t DEREncodeBitString(struct BufferedTransformation* arg_0, uint8_t* arg_1, uint64_t arg_2, unsigned int arg_3)
        {
            using org_ptr = uint64_t (WINAPIV*)(struct CryptoPP*, struct BufferedTransformation*, uint8_t*, uint64_t, unsigned int);
            return (org_ptr(0x14054c270L))(this, arg_0, arg_1, arg_2, arg_3);
        };
        void DEREncodeNull(struct BufferedTransformation* arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, struct BufferedTransformation*);
            (org_ptr(0x14054be20L))(this, arg_0);
        };
        uint64_t DEREncodeOctetString(struct BufferedTransformation* arg_0, uint8_t* arg_1, uint64_t arg_2)
        {
            using org_ptr = uint64_t (WINAPIV*)(struct CryptoPP*, struct BufferedTransformation*, uint8_t*, uint64_t);
            return (org_ptr(0x14054bed0L))(this, arg_0, arg_1, arg_2);
        };
        uint64_t DERLengthEncode(struct BufferedTransformation* arg_0, uint64_t arg_1)
        {
            using org_ptr = uint64_t (WINAPIV*)(struct CryptoPP*, struct BufferedTransformation*, uint64_t);
            return (org_ptr(0x14054bbd0L))(this, arg_0, arg_1);
        };
        void DERReencode(struct BufferedTransformation* arg_0, struct BufferedTransformation* arg_1)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, struct BufferedTransformation*, struct BufferedTransformation*);
            (org_ptr(0x14054c410L))(this, arg_0, arg_1);
        };
        void DES_VC60Workaround()
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*);
            (org_ptr(0x140669c70L))(this);
        };
        void DetectX86Features()
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*);
            (org_ptr(0x1406606a0L))(this);
        };
        unsigned int DiscreteLogWorkFactor(unsigned int arg_0)
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CryptoPP*, unsigned int);
            return (org_ptr(0x14064ab30L))(this, arg_0);
        };
        void Divide(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t* arg_3, uint64_t arg_4, uint64_t* arg_5, uint64_t arg_6)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t, uint64_t*, uint64_t);
            (org_ptr(0x1405e2f80L))(this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6);
        };
        void DivideByPower2Mod(uint64_t* arg_0, uint64_t* arg_1, uint64_t arg_2, uint64_t* arg_3, uint64_t arg_4)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t, uint64_t*, uint64_t);
            (org_ptr(0x1405e3ea0L))(this, arg_0, arg_1, arg_2, arg_3, arg_4);
        };
        int64_t DivideFourWordsByTwo()
        {
            using org_ptr = int64_t (WINAPIV*)(struct Word*);
            return (org_ptr(0x1405f0d50L))(arg_0);
        };
        int64_t DivideFourWordsByTwo()
        {
            using org_ptr = int64_t (WINAPIV*)(struct DWord*);
            return (org_ptr(0x1405f0f20L))(arg_0);
        };
        void EncryptionPairwiseConsistencyTest_FIPS_140_Only(struct PK_Encryptor* arg_0, struct PK_Decryptor* arg_1)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, struct PK_Encryptor*, struct PK_Decryptor*);
            (org_ptr(0x14062cf30L))(this, arg_0, arg_1);
        };
        struct Integer* EuclideanMultiplicativeInverse(short retstr, struct Integer* arg_0, struct Integer* arg_1)
        {
            using org_ptr = struct Integer* (WINAPIV*)(struct CryptoPP*, short, struct Integer*, struct Integer*);
            return (org_ptr(0x14064cb40L))(this, retstr, arg_0, arg_1);
        };
        bool FIPS_140_2_ComplianceEnabled()
        {
            using org_ptr = bool (WINAPIV*)(struct CryptoPP*);
            return (org_ptr(0x14062cea0L))(this);
        };
        unsigned int FactoringWorkFactor(unsigned int arg_0)
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CryptoPP*, unsigned int);
            return (org_ptr(0x14064aaa0L))(this, arg_0);
        };
        void Files_TestInstantiations()
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*);
            (org_ptr(0x14061d230L))(this);
        };
        bool FirstPrime(struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2, struct Integer* arg_3, PrimeSelector* arg_4)
        {
            using org_ptr = bool (WINAPIV*)(struct CryptoPP*, struct Integer*, struct Integer*, struct Integer*, struct Integer*, PrimeSelector*);
            return (org_ptr(0x1406446c0L))(this, arg_0, arg_1, arg_2, arg_3, arg_4);
        };
        struct Integer* GCD(short retstr, struct Integer* arg_0, struct Integer* arg_1)
        {
            using org_ptr = struct Integer* (WINAPIV*)(struct CryptoPP*, short, struct Integer*, struct Integer*);
            return (org_ptr(0x14064c910L))(this, retstr, arg_0, arg_1);
        };
        unsigned int GetAlignmentOf()
        {
            using org_ptr = unsigned int (WINAPIV*)(unsigned int*);
            return (org_ptr(0x14045f310L))(dummy);
        };
        int64_t GetCacheLineSize()
        {
            using org_ptr = int64_t (WINAPIV*)(struct CryptoPP*);
            return (org_ptr(0x140621fb0L))(this);
        };
        struct ByteOrder GetNativeByteOrder()
        {
            using org_ptr = struct ByteOrder (WINAPIV*)();
            return (org_ptr(0x140466a00L))();
        };
        uint16_t* GetPrimeTable(unsigned int* arg_0)
        {
            using org_ptr = uint16_t* (WINAPIV*)(struct CryptoPP*, unsigned int*);
            return (org_ptr(0x140640560L))(this, arg_0);
        };
        struct GetValueHelperClass<DL_GroupParameters<ECPPoint>,DL_GroupParameters<ECPPoint> >* GetValueHelper(struct DL_GroupParameters<ECPPoint>* pObject, char* name, struct type_info* valueType, void* pValue, struct NameValuePairs* searchFirst)
        {
            using org_ptr = struct GetValueHelperClass<DL_GroupParameters<ECPPoint>,DL_GroupParameters<ECPPoint> >* (WINAPIV*)(struct GetValueHelperClass<DL_GroupParameters<ECPPoint>,DL_GroupParameters<ECPPoint> >*, struct DL_GroupParameters<ECPPoint>*, char*, struct type_info*, void*, struct NameValuePairs*);
            return (org_ptr(0x140469ce0L))(result, pObject, name, valueType, pValue, searchFirst);
        };
        struct GetValueHelperClass<DL_PrivateKeyImpl<DL_GroupParameters_EC<ECP> >,DL_PrivateKey<ECPPoint> >* GetValueHelper(struct DL_PrivateKeyImpl<DL_GroupParameters_EC<ECP> >* pObject, char* name, struct type_info* valueType, void* pValue, struct NameValuePairs* searchFirst, struct DL_PrivateKey<ECPPoint>* dummy)
        {
            using org_ptr = struct GetValueHelperClass<DL_PrivateKeyImpl<DL_GroupParameters_EC<ECP> >,DL_PrivateKey<ECPPoint> >* (WINAPIV*)(struct GetValueHelperClass<DL_PrivateKeyImpl<DL_GroupParameters_EC<ECP> >,DL_PrivateKey<ECPPoint> >*, struct DL_PrivateKeyImpl<DL_GroupParameters_EC<ECP> >*, char*, struct type_info*, void*, struct NameValuePairs*, struct DL_PrivateKey<ECPPoint>*);
            return (org_ptr(0x14045f440L))(result, pObject, name, valueType, pValue, searchFirst, dummy);
        };
        struct GetValueHelperClass<DL_PrivateKey<ECPPoint>,DL_PrivateKey<ECPPoint> >* GetValueHelper(struct DL_PrivateKey<ECPPoint>* pObject, char* name, struct type_info* valueType, void* pValue, struct NameValuePairs* searchFirst)
        {
            using org_ptr = struct GetValueHelperClass<DL_PrivateKey<ECPPoint>,DL_PrivateKey<ECPPoint> >* (WINAPIV*)(struct GetValueHelperClass<DL_PrivateKey<ECPPoint>,DL_PrivateKey<ECPPoint> >*, struct DL_PrivateKey<ECPPoint>*, char*, struct type_info*, void*, struct NameValuePairs*);
            return (org_ptr(0x140467580L))(result, pObject, name, valueType, pValue, searchFirst);
        };
        struct GetValueHelperClass<DL_PublicKeyImpl<DL_GroupParameters_EC<ECP> >,DL_PublicKey<ECPPoint> >* GetValueHelper(struct DL_PublicKeyImpl<DL_GroupParameters_EC<ECP> >* pObject, char* name, struct type_info* valueType, void* pValue, struct NameValuePairs* searchFirst, struct DL_PublicKey<ECPPoint>* dummy)
        {
            using org_ptr = struct GetValueHelperClass<DL_PublicKeyImpl<DL_GroupParameters_EC<ECP> >,DL_PublicKey<ECPPoint> >* (WINAPIV*)(struct GetValueHelperClass<DL_PublicKeyImpl<DL_GroupParameters_EC<ECP> >,DL_PublicKey<ECPPoint> >*, struct DL_PublicKeyImpl<DL_GroupParameters_EC<ECP> >*, char*, struct type_info*, void*, struct NameValuePairs*, struct DL_PublicKey<ECPPoint>*);
            return (org_ptr(0x14045f340L))(result, pObject, name, valueType, pValue, searchFirst, dummy);
        };
        struct GetValueHelperClass<DL_PublicKey<ECPPoint>,DL_PublicKey<ECPPoint> >* GetValueHelper(struct DL_PublicKey<ECPPoint>* pObject, char* name, struct type_info* valueType, void* pValue, struct NameValuePairs* searchFirst)
        {
            using org_ptr = struct GetValueHelperClass<DL_PublicKey<ECPPoint>,DL_PublicKey<ECPPoint> >* (WINAPIV*)(struct GetValueHelperClass<DL_PublicKey<ECPPoint>,DL_PublicKey<ECPPoint> >*, struct DL_PublicKey<ECPPoint>*, char*, struct type_info*, void*, struct NameValuePairs*);
            return (org_ptr(0x1404673f0L))(result, pObject, name, valueType, pValue, searchFirst);
        };
        struct ECPPoint* Hack_DefaultValueFromConstReferenceType(struct ECPPoint* __formal)
        {
            using org_ptr = struct ECPPoint* (WINAPIV*)(struct ECPPoint*, struct ECPPoint*);
            return (org_ptr(0x140469340L))(result, __formal);
        };
        struct Integer* Hack_DefaultValueFromConstReferenceType(struct Integer* __formal)
        {
            using org_ptr = struct Integer* (WINAPIV*)(struct Integer*, struct Integer*);
            return (org_ptr(0x140468e30L))(result, __formal);
        };
        bool Hack_GetValueIntoConstReference(char* name, struct ECPPoint* value)
        {
            using org_ptr = bool (WINAPIV*)(struct NameValuePairs*, char*, struct ECPPoint*);
            return (org_ptr(0x1404693b0L))(source, name, value);
        };
        bool Hack_GetValueIntoConstReference(char* name, struct Integer* value)
        {
            using org_ptr = bool (WINAPIV*)(struct NameValuePairs*, char*, struct Integer*);
            return (org_ptr(0x140468ea0L))(source, name, value);
        };
        void HalfMontgomeryReduce(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t* arg_3, uint64_t* arg_4, uint64_t* arg_5, uint64_t arg_6)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
            (org_ptr(0x1405e2b70L))(this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6);
        };
        void IncrementCounterByOne(uint8_t* arg_0, uint8_t* arg_1, unsigned int arg_2)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint8_t*, uint8_t*, unsigned int);
            (org_ptr(0x14061d170L))(this, arg_0, arg_1, arg_2);
        };
        void IncrementCounterByOne(uint8_t* arg_0, unsigned int arg_1)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint8_t*, unsigned int);
            (org_ptr(0x14061d0e0L))(this, arg_0, arg_1);
        };
        struct Integer* InverseLucas(short retstr, struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2, struct Integer* arg_3)
        {
            using org_ptr = struct Integer* (WINAPIV*)(struct Integer*, short, struct Integer*, struct Integer*, struct Integer*, struct Integer*);
            return (org_ptr(0x14064a990L))(this, retstr, arg_0, arg_1, arg_2, arg_3);
        };
        struct Integer* InverseLucas(struct Integer* retstr, struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2, struct Integer* arg_3, struct Integer* arg_4)
        {
            using org_ptr = struct Integer* (WINAPIV*)(struct Integer*, struct Integer*, struct Integer*, struct Integer*, struct Integer*, struct Integer*, struct Integer*);
            return (org_ptr(0x14064a410L))(this, retstr, arg_0, arg_1, arg_2, arg_3, arg_4);
        };
        bool IsAlignedOn(unsigned int alignment)
        {
            using org_ptr = bool (WINAPIV*)(void*, unsigned int);
            return (org_ptr(0x1404587a0L))(p, alignment);
        };
        bool IsFermatProbablePrime(struct Integer* arg_0, struct Integer* arg_1)
        {
            using org_ptr = bool (WINAPIV*)(struct CryptoPP*, struct Integer*, struct Integer*);
            return (org_ptr(0x140640840L))(this, arg_0, arg_1);
        };
        bool IsLucasProbablePrime(struct Integer* arg_0)
        {
            using org_ptr = bool (WINAPIV*)(struct CryptoPP*, struct Integer*);
            return (org_ptr(0x140641d90L))(this, arg_0);
        };
        bool IsPowerOf2()
        {
            using org_ptr = bool (WINAPIV*)(unsigned int*);
            return (org_ptr(0x14045ed00L))(n);
        };
        bool IsPrime(struct Integer* arg_0)
        {
            using org_ptr = bool (WINAPIV*)(struct CryptoPP*, struct Integer*);
            return (org_ptr(0x140642dc0L))(this, arg_0);
        };
        bool IsSmallPrime(struct Integer* arg_0)
        {
            using org_ptr = bool (WINAPIV*)(struct CryptoPP*, struct Integer*);
            return (org_ptr(0x1406405c0L))(this, arg_0);
        };
        bool IsStrongLucasProbablePrime(struct Integer* arg_0)
        {
            using org_ptr = bool (WINAPIV*)(struct CryptoPP*, struct Integer*);
            return (org_ptr(0x1406422f0L))(this, arg_0);
        };
        bool IsStrongProbablePrime(struct Integer* arg_0, struct Integer* arg_1)
        {
            using org_ptr = bool (WINAPIV*)(struct CryptoPP*, struct Integer*, struct Integer*);
            return (org_ptr(0x140640e20L))(this, arg_0, arg_1);
        };
        int64_t Jacobi(struct Integer* arg_0, struct Integer* arg_1)
        {
            using org_ptr = int64_t (WINAPIV*)(struct CryptoPP*, struct Integer*, struct Integer*);
            return (org_ptr(0x140649db0L))(this, arg_0, arg_1);
        };
        struct Integer* Lucas(short retstr, struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2)
        {
            using org_ptr = struct Integer* (WINAPIV*)(struct CryptoPP*, short, struct Integer*, struct Integer*, struct Integer*);
            return (org_ptr(0x14064a020L))(this, retstr, arg_0, arg_1, arg_2);
        };
        struct AlgorithmParameters<NullNameValuePairs,char const *>* MakeParameters(char* name, char** value, bool throwIfNotUsed)
        {
            using org_ptr = struct AlgorithmParameters<NullNameValuePairs,char const *>* (WINAPIV*)(struct AlgorithmParameters<NullNameValuePairs,char const *>*, char*, char**, bool);
            return (org_ptr(0x14045f160L))(result, name, value, throwIfNotUsed);
        };
        struct Integer* MaurerProvablePrime(short retstr, struct Integer* arg_0, struct RandomNumberGenerator* arg_1)
        {
            using org_ptr = struct Integer* (WINAPIV*)(struct CryptoPP*, short, struct Integer*, struct RandomNumberGenerator*);
            return (org_ptr(0x140646270L))(this, retstr, arg_0, arg_1);
        };
        struct Integer* MihailescuProvablePrime(short retstr, struct Integer* arg_0, struct RandomNumberGenerator* arg_1)
        {
            using org_ptr = struct Integer* (WINAPIV*)(struct CryptoPP*, short, struct Integer*, struct RandomNumberGenerator*);
            return (org_ptr(0x140645280L))(this, retstr, arg_0, arg_1);
        };
        unsigned int ModPowerOf2(unsigned int* b)
        {
            using org_ptr = unsigned int (WINAPIV*)(uint64_t*, unsigned int*);
            return (org_ptr(0x14045ed80L))(a, b);
        };
        void Modes_TestInstantiations()
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*);
            (org_ptr(0x1406189b0L))(this);
        };
        struct Integer* ModularExponentiation(short retstr, struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2)
        {
            using org_ptr = struct Integer* (WINAPIV*)(struct CryptoPP*, short, struct Integer*, struct Integer*, struct Integer*);
            return (org_ptr(0x14064cb90L))(this, retstr, arg_0, arg_1, arg_2);
        };
        struct Integer* ModularRoot(short retstr, struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2, struct Integer* arg_3)
        {
            using org_ptr = struct Integer* (WINAPIV*)(struct Integer*, short, struct Integer*, struct Integer*, struct Integer*, struct Integer*);
            return (org_ptr(0x140649a60L))(this, retstr, arg_0, arg_1, arg_2, arg_3);
        };
        struct Integer* ModularRoot(struct Integer* retstr, struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2, struct Integer* arg_3, struct Integer* arg_4, struct Integer* arg_5)
        {
            using org_ptr = struct Integer* (WINAPIV*)(struct Integer*, struct Integer*, struct Integer*, struct Integer*, struct Integer*, struct Integer*, struct Integer*, struct Integer*);
            return (org_ptr(0x140649760L))(b, retstr, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5);
        };
        struct Integer* ModularSquareRoot(short retstr, struct Integer* arg_0, struct Integer* arg_1)
        {
            using org_ptr = struct Integer* (WINAPIV*)(struct CryptoPP*, short, struct Integer*, struct Integer*);
            return (org_ptr(0x140647320L))(this, retstr, arg_0, arg_1);
        };
        void MontgomeryReduce(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t* arg_3, uint64_t* arg_4, uint64_t arg_5)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
            (org_ptr(0x1405e2a00L))(this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5);
        };
        void Multiply(struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, struct Integer*, struct Integer*, struct Integer*);
            (org_ptr(0x1405e9ba0L))(this, arg_0, arg_1, arg_2);
        };
        void Multiply(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t* arg_3, uint64_t arg_4)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
            (org_ptr(0x1405eea20L))(this, arg_0, arg_1, arg_2, arg_3, arg_4);
        };
        void MultiplyBottom(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t* arg_3, uint64_t arg_4)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
            (org_ptr(0x1405eeaa0L))(this, arg_0, arg_1, arg_2, arg_3, arg_4);
        };
        void MultiplyByPower2Mod(uint64_t* arg_0, uint64_t* arg_1, uint64_t arg_2, uint64_t* arg_3, uint64_t arg_4)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t, uint64_t*, uint64_t);
            (org_ptr(0x1405e3f90L))(this, arg_0, arg_1, arg_2, arg_3, arg_4);
        };
        void MultiplyTop(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t* arg_3, uint64_t* arg_4, uint64_t arg_5)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
            (org_ptr(0x1405e1a20L))(this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5);
        };
        bool NativeByteOrderIs()
        {
            using org_ptr = bool (WINAPIV*)(struct ByteOrder);
            return (org_ptr(0x1404669a0L))(order);
        };
        struct RandomNumberGenerator* NullRNG()
        {
            using org_ptr = struct RandomNumberGenerator* (WINAPIV*)(struct CryptoPP*);
            return (org_ptr(0x1405f42c0L))(this);
        };
        void OS_GenerateRandomBlock(bool arg_0, uint8_t* arg_1, uint64_t arg_2)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, bool, uint8_t*, uint64_t);
            (org_ptr(0x140625350L))(this, arg_0, arg_1, arg_2);
        };
        void P1363_MGF1KDF2_Common(struct HashTransformation* arg_0, uint8_t* arg_1, char arg_2, uint8_t* arg_3, uint64_t arg_4, uint8_t* arg_5, uint64_t arg_6, bool arg_7, unsigned int arg_8)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, struct HashTransformation*, uint8_t*, char, uint8_t*, uint64_t, uint8_t*, uint64_t, bool, unsigned int);
            (org_ptr(0x140622290L))(this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7, arg_8);
        };
        void PositiveAdd(struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, struct Integer*, struct Integer*, struct Integer*);
            (org_ptr(0x1405e88c0L))(this, arg_0, arg_1, arg_2);
        };
        void PositiveDivide(struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2, struct Integer* arg_3)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, struct Integer*, struct Integer*, struct Integer*, struct Integer*);
            (org_ptr(0x1405e9ce0L))(this, arg_0, arg_1, arg_2, arg_3);
        };
        void PositiveMultiply(struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, struct Integer*, struct Integer*, struct Integer*);
            (org_ptr(0x1405e9a30L))(this, arg_0, arg_1, arg_2);
        };
        void PositiveSubtract(struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, struct Integer*, struct Integer*, struct Integer*);
            (org_ptr(0x1405e8e50L))(this, arg_0, arg_1, arg_2);
        };
        bool PowerUpSelfTestInProgressOnThisThread()
        {
            using org_ptr = bool (WINAPIV*)(struct CryptoPP*);
            return (org_ptr(0x14062cee0L))(this);
        };
        unsigned int PrimeSearchInterval(struct Integer* arg_0)
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CryptoPP*, struct Integer*);
            return (org_ptr(0x140643060L))(this, arg_0);
        };
        void PutWord(struct ByteOrder order, char* block, unsigned int value, char* xorBlock)
        {
            using org_ptr = void (WINAPIV*)(bool, struct ByteOrder, char*, unsigned int, char*);
            (org_ptr(0x140465e30L))(assumeAligned, order, block, value, xorBlock);
        };
        bool RabinMillerTest(struct RandomNumberGenerator* arg_0, struct Integer* arg_1, unsigned int arg_2)
        {
            using org_ptr = bool (WINAPIV*)(struct CryptoPP*, struct RandomNumberGenerator*, struct Integer*, unsigned int);
            return (org_ptr(0x140641940L))(this, arg_0, arg_1, arg_2);
        };
        void RecursiveInverseModPower2(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t arg_3)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
            (org_ptr(0x1405e26b0L))(this, arg_0, arg_1, arg_2, arg_3);
        };
        void RecursiveMultiply(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t* arg_3, uint64_t arg_4)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
            (org_ptr(0x1405e0fe0L))(this, arg_0, arg_1, arg_2, arg_3, arg_4);
        };
        void RecursiveMultiplyBottom(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t* arg_3, uint64_t arg_4)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
            (org_ptr(0x1405e1870L))(this, arg_0, arg_1, arg_2, arg_3, arg_4);
        };
        void RecursiveSquare(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t arg_3)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
            (org_ptr(0x1405e1680L))(this, arg_0, arg_1, arg_2, arg_3);
        };
        struct CipherDir ReverseCipherDir(struct CipherDir arg_0)
        {
            using org_ptr = struct CipherDir (WINAPIV*)(struct CryptoPP*, struct CipherDir);
            return (org_ptr(0x140660330L))(this, arg_0);
        };
        uint64_t* STDMIN(uint64_t* b)
        {
            using org_ptr = uint64_t* (WINAPIV*)(uint64_t*, uint64_t*);
            return (org_ptr(0x140466850L))(a, b);
        };
        uint64_t SaturatingSubtract(unsigned int* b)
        {
            using org_ptr = uint64_t (WINAPIV*)(uint64_t*, unsigned int*);
            return (org_ptr(0x140465db0L))(a, b);
        };
        void Serpent_KeySchedule(unsigned int* arg_0, unsigned int arg_1, uint8_t* arg_2, uint64_t arg_3)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, unsigned int*, unsigned int, uint8_t*, uint64_t);
            (org_ptr(0x140669c80L))(this, arg_0, arg_1, arg_2, arg_3);
        };
        void SetPowerUpSelfTestInProgressOnThisThread(bool arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, bool);
            (org_ptr(0x14062cf20L))(this, arg_0);
        };
        void SetWords(uint64_t* arg_0, uint64_t arg_1, uint64_t arg_2)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t, uint64_t);
            (org_ptr(0x1405ee990L))(this, arg_0, arg_1, arg_2);
        };
        uint64_t ShiftWordsLeftByBits(uint64_t* arg_0, uint64_t arg_1, unsigned int arg_2)
        {
            using org_ptr = uint64_t (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t, unsigned int);
            return (org_ptr(0x1405eeae0L))(this, arg_0, arg_1, arg_2);
        };
        void ShiftWordsLeftByWords(uint64_t* arg_0, uint64_t arg_1, uint64_t arg_2)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t, uint64_t);
            (org_ptr(0x1405eecd0L))(this, arg_0, arg_1, arg_2);
        };
        uint64_t ShiftWordsRightByBits(uint64_t* arg_0, uint64_t arg_1, unsigned int arg_2)
        {
            using org_ptr = uint64_t (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t, unsigned int);
            return (org_ptr(0x1405eebb0L))(this, arg_0, arg_1, arg_2);
        };
        void ShiftWordsRightByWords(uint64_t* arg_0, uint64_t arg_1, uint64_t arg_2)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t, uint64_t);
            (org_ptr(0x1405eed70L))(this, arg_0, arg_1, arg_2);
        };
        void SignaturePairwiseConsistencyTest_FIPS_140_Only(struct PK_Signer* arg_0, struct PK_Verifier* arg_1)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, struct PK_Signer*, struct PK_Verifier*);
            (org_ptr(0x14062cf50L))(this, arg_0, arg_1);
        };
        void SimulatePowerUpSelfTestFailure()
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*);
            (org_ptr(0x14062ceb0L))(this);
        };
        bool SmallDivisorsTest(struct Integer* arg_0)
        {
            using org_ptr = bool (WINAPIV*)(struct CryptoPP*, struct Integer*);
            return (org_ptr(0x1406407e0L))(this, arg_0);
        };
        bool SolveModularQuadraticEquation(struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2, struct Integer* arg_3, struct Integer* arg_4, struct Integer* arg_5)
        {
            using org_ptr = bool (WINAPIV*)(struct Integer*, struct Integer*, struct Integer*, struct Integer*, struct Integer*, struct Integer*, struct Integer*);
            return (org_ptr(0x140648240L))(this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5);
        };
        void Square(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t arg_3)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
            (org_ptr(0x1405eea60L))(this, arg_0, arg_1, arg_2, arg_3);
        };
        char* StandardReallocate(char* p, uint64_t oldSize, uint64_t newSize, bool preserve)
        {
            using org_ptr = char* (WINAPIV*)(struct AllocatorWithCleanup<unsigned char,0>*, char*, uint64_t, uint64_t, bool);
            return (org_ptr(0x14045fb70L))(a, p, oldSize, newSize, preserve);
        };
        int64_t Subtract(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t arg_3)
        {
            using org_ptr = int64_t (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
            return (org_ptr(0x1405ee950L))(this, arg_0, arg_1, arg_2, arg_3);
        };
        void TestInstantiations_gfpcrypt()
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*);
            (org_ptr(0x14062f8a0L))(this);
        };
        struct BufferedTransformation* TheBitBucket()
        {
            using org_ptr = struct BufferedTransformation* (WINAPIV*)(struct CryptoPP*);
            return (org_ptr(0x1405f34b0L))(this);
        };
        bool TrialDivision(struct Integer* arg_0, unsigned int arg_1)
        {
            using org_ptr = bool (WINAPIV*)(struct CryptoPP*, struct Integer*, unsigned int);
            return (org_ptr(0x1406406f0L))(this, arg_0, arg_1);
        };
        bool VerifyPrime(struct RandomNumberGenerator* arg_0, struct Integer* arg_1, unsigned int arg_2)
        {
            using org_ptr = bool (WINAPIV*)(struct CryptoPP*, struct RandomNumberGenerator*, struct Integer*, unsigned int);
            return (org_ptr(0x140642fa0L))(this, arg_0, arg_1, arg_2);
        };
        void XorWords(uint64_t* arg_0, uint64_t* arg_1, uint64_t* arg_2, uint64_t arg_3)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t*, uint64_t);
            (org_ptr(0x14062c050L))(this, arg_0, arg_1, arg_2, arg_3);
        };
        void XorWords(uint64_t* arg_0, uint64_t* arg_1, uint64_t arg_2)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint64_t*, uint64_t*, uint64_t);
            (org_ptr(0x14062bfe0L))(this, arg_0, arg_1, arg_2);
        };
        struct Integer* a_exp_b_mod_c(short retstr, struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2)
        {
            using org_ptr = struct Integer* (WINAPIV*)(struct CryptoPP*, short, struct Integer*, struct Integer*, struct Integer*);
            return (org_ptr(0x1405eb3c0L))(this, retstr, arg_0, arg_1, arg_2);
        };
        struct Integer* a_times_b_mod_c(short retstr, struct Integer* arg_0, struct Integer* arg_1, struct Integer* arg_2)
        {
            using org_ptr = struct Integer* (WINAPIV*)(struct CryptoPP*, short, struct Integer*, struct Integer*, struct Integer*);
            return (org_ptr(0x1405eb2e0L))(this, retstr, arg_0, arg_1, arg_2);
        };
        void xorbuf(uint8_t* arg_0, uint8_t* arg_1, uint8_t* arg_2, uint64_t arg_3)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint8_t*, uint8_t*, uint8_t*, uint64_t);
            (org_ptr(0x14061f470L))(this, arg_0, arg_1, arg_2, arg_3);
        };
        void xorbuf(uint8_t* arg_0, uint8_t* arg_1, uint64_t arg_2)
        {
            using org_ptr = void (WINAPIV*)(struct CryptoPP*, uint8_t*, uint8_t*, uint64_t);
            (org_ptr(0x14061f240L))(this, arg_0, arg_1, arg_2);
        };
    }
    ;
END_ATF_NAMESPACE
*/