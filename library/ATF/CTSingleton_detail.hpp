// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CTSingleton_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        info::CTSingletonctor_CTSingleton2_ptr CTSingletonctor_CTSingleton2_next(nullptr);
        info::CTSingletonctor_CTSingleton2_clbk CTSingletonctor_CTSingleton2_user(nullptr);
        info::CTSingletonInstance4_ptr CTSingletonInstance4_next(nullptr);
        info::CTSingletonInstance4_clbk CTSingletonInstance4_user(nullptr);
        info::CTSingletondtor_CTSingleton9_ptr CTSingletondtor_CTSingleton9_next(nullptr);
        info::CTSingletondtor_CTSingleton9_clbk CTSingletondtor_CTSingleton9_user(nullptr);
        
        void CTSingletonctor_CTSingleton2_wrapper(struct CTSingleton<CNationSettingManager>* _this)
        {
           CTSingletonctor_CTSingleton2_user(_this);
        };
        struct CNationSettingManager* CTSingletonInstance4_wrapper()
        {
           return CTSingletonInstance4_user();
        };
        void CTSingletondtor_CTSingleton9_wrapper(struct CTSingleton<CNationSettingManager>* _this)
        {
           CTSingletondtor_CTSingleton9_user(_this);
        };
        
        hook_record CTSingleton<CNationSettingManager>_functions[] = {
        {   (LPVOID)0x1402299a0L,
            (LPVOID *)&CTSingletonctor_CTSingleton2_user,
            (LPVOID *)&CTSingletonctor_CTSingleton2_next,
            (LPVOID)cast_pointer_function(CTSingletonctor_CTSingleton2_wrapper),
            (LPVOID)cast_pointer_function((void(CTSingleton<CNationSettingManager>::*)())&CTSingleton<CNationSettingManager>::ctor_CTSingleton) },
        {   (LPVOID)0x140028fb0L,
            (LPVOID *)&CTSingletonInstance4_user,
            (LPVOID *)&CTSingletonInstance4_next,
            (LPVOID)cast_pointer_function(CTSingletonInstance4_wrapper),
            (LPVOID)cast_pointer_function((struct CNationSettingManager*(CTSingleton<CNationSettingManager>::*)())&CTSingleton<CNationSettingManager>::Instance) },
        {   (LPVOID)0x1402299d0L,
            (LPVOID *)&CTSingletondtor_CTSingleton9_user,
            (LPVOID *)&CTSingletondtor_CTSingleton9_next,
            (LPVOID)cast_pointer_function(CTSingletondtor_CTSingleton9_wrapper),
            (LPVOID)cast_pointer_function((void(CTSingleton<CNationSettingManager>::*)())&CTSingleton<CNationSettingManager>::dtor_CTSingleton) },
        
        };
        
    }; // end namespace detail
END_ATF_NAMESPACE
#include "CTSingleton_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        info::CTSingletonctor_CTSingleton2_ptr CTSingletonctor_CTSingleton2_next(nullptr);
        info::CTSingletonctor_CTSingleton2_clbk CTSingletonctor_CTSingleton2_user(nullptr);
        info::CTSingletonInstance4_ptr CTSingletonInstance4_next(nullptr);
        info::CTSingletonInstance4_clbk CTSingletonInstance4_user(nullptr);
        info::CTSingletondtor_CTSingleton9_ptr CTSingletondtor_CTSingleton9_next(nullptr);
        info::CTSingletondtor_CTSingleton9_clbk CTSingletondtor_CTSingleton9_user(nullptr);
        
        void CTSingletonctor_CTSingleton2_wrapper(struct CTSingleton<CCashDBWorkManager>* _this)
        {
           CTSingletonctor_CTSingleton2_user(_this);
        };
        struct CCashDBWorkManager* CTSingletonInstance4_wrapper()
        {
           return CTSingletonInstance4_user();
        };
        void CTSingletondtor_CTSingleton9_wrapper(struct CTSingleton<CCashDBWorkManager>* _this)
        {
           CTSingletondtor_CTSingleton9_user(_this);
        };
        
        hook_record CTSingleton<CCashDBWorkManager>_functions[] = {
        {   (LPVOID)0x1402f3740L,
            (LPVOID *)&CTSingletonctor_CTSingleton2_user,
            (LPVOID *)&CTSingletonctor_CTSingleton2_next,
            (LPVOID)cast_pointer_function(CTSingletonctor_CTSingleton2_wrapper),
            (LPVOID)cast_pointer_function((void(CTSingleton<CCashDBWorkManager>::*)())&CTSingleton<CCashDBWorkManager>::ctor_CTSingleton) },
        {   (LPVOID)0x1401c7780L,
            (LPVOID *)&CTSingletonInstance4_user,
            (LPVOID *)&CTSingletonInstance4_next,
            (LPVOID)cast_pointer_function(CTSingletonInstance4_wrapper),
            (LPVOID)cast_pointer_function((struct CCashDBWorkManager*(CTSingleton<CCashDBWorkManager>::*)())&CTSingleton<CCashDBWorkManager>::Instance) },
        {   (LPVOID)0x1402f3770L,
            (LPVOID *)&CTSingletondtor_CTSingleton9_user,
            (LPVOID *)&CTSingletondtor_CTSingleton9_next,
            (LPVOID)cast_pointer_function(CTSingletondtor_CTSingleton9_wrapper),
            (LPVOID)cast_pointer_function((void(CTSingleton<CCashDBWorkManager>::*)())&CTSingleton<CCashDBWorkManager>::dtor_CTSingleton) },
        
        };
        
    }; // end namespace detail
END_ATF_NAMESPACE
#include "CTSingleton_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        info::CTSingletonctor_CTSingleton2_ptr CTSingletonctor_CTSingleton2_next(nullptr);
        info::CTSingletonctor_CTSingleton2_clbk CTSingletonctor_CTSingleton2_user(nullptr);
        info::CTSingletonInstance4_ptr CTSingletonInstance4_next(nullptr);
        info::CTSingletonInstance4_clbk CTSingletonInstance4_user(nullptr);
        info::CTSingletondtor_CTSingleton9_ptr CTSingletondtor_CTSingleton9_next(nullptr);
        info::CTSingletondtor_CTSingleton9_clbk CTSingletondtor_CTSingleton9_user(nullptr);
        
        void CTSingletonctor_CTSingleton2_wrapper(struct CTSingleton<CCryptor>* _this)
        {
           CTSingletonctor_CTSingleton2_user(_this);
        };
        struct CCryptor* CTSingletonInstance4_wrapper()
        {
           return CTSingletonInstance4_user();
        };
        void CTSingletondtor_CTSingleton9_wrapper(struct CTSingleton<CCryptor>* _this)
        {
           CTSingletondtor_CTSingleton9_user(_this);
        };
        
        hook_record CTSingleton<CCryptor>_functions[] = {
        {   (LPVOID)0x1401bfa00L,
            (LPVOID *)&CTSingletonctor_CTSingleton2_user,
            (LPVOID *)&CTSingletonctor_CTSingleton2_next,
            (LPVOID)cast_pointer_function(CTSingletonctor_CTSingleton2_wrapper),
            (LPVOID)cast_pointer_function((void(CTSingleton<CCryptor>::*)())&CTSingleton<CCryptor>::ctor_CTSingleton) },
        {   (LPVOID)0x1401bf7f0L,
            (LPVOID *)&CTSingletonInstance4_user,
            (LPVOID *)&CTSingletonInstance4_next,
            (LPVOID)cast_pointer_function(CTSingletonInstance4_wrapper),
            (LPVOID)cast_pointer_function((struct CCryptor*(CTSingleton<CCryptor>::*)())&CTSingleton<CCryptor>::Instance) },
        {   (LPVOID)0x1401bfaa0L,
            (LPVOID *)&CTSingletondtor_CTSingleton9_user,
            (LPVOID *)&CTSingletondtor_CTSingleton9_next,
            (LPVOID)cast_pointer_function(CTSingletondtor_CTSingleton9_wrapper),
            (LPVOID)cast_pointer_function((void(CTSingleton<CCryptor>::*)())&CTSingleton<CCryptor>::dtor_CTSingleton) },
        
        };
        
    }; // end namespace detail
END_ATF_NAMESPACE
#include "CTSingleton_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        info::CTSingletonctor_CTSingleton2_ptr CTSingletonctor_CTSingleton2_next(nullptr);
        info::CTSingletonctor_CTSingleton2_clbk CTSingletonctor_CTSingleton2_user(nullptr);
        info::CTSingletonInstance4_ptr CTSingletonInstance4_next(nullptr);
        info::CTSingletonInstance4_clbk CTSingletonInstance4_user(nullptr);
        info::CTSingletondtor_CTSingleton9_ptr CTSingletondtor_CTSingleton9_next(nullptr);
        info::CTSingletondtor_CTSingleton9_clbk CTSingletondtor_CTSingleton9_user(nullptr);
        
        void CTSingletonctor_CTSingleton2_wrapper(struct CTSingleton<CEngNetworkBillEX>* _this)
        {
           CTSingletonctor_CTSingleton2_user(_this);
        };
        struct CEngNetworkBillEX* CTSingletonInstance4_wrapper()
        {
           return CTSingletonInstance4_user();
        };
        void CTSingletondtor_CTSingleton9_wrapper(struct CTSingleton<CEngNetworkBillEX>* _this)
        {
           CTSingletondtor_CTSingleton9_user(_this);
        };
        
        hook_record CTSingleton<CEngNetworkBillEX>_functions[] = {
        {   (LPVOID)0x14031d5a0L,
            (LPVOID *)&CTSingletonctor_CTSingleton2_user,
            (LPVOID *)&CTSingletonctor_CTSingleton2_next,
            (LPVOID)cast_pointer_function(CTSingletonctor_CTSingleton2_wrapper),
            (LPVOID)cast_pointer_function((void(CTSingleton<CEngNetworkBillEX>::*)())&CTSingleton<CEngNetworkBillEX>::ctor_CTSingleton) },
        {   (LPVOID)0x14022c470L,
            (LPVOID *)&CTSingletonInstance4_user,
            (LPVOID *)&CTSingletonInstance4_next,
            (LPVOID)cast_pointer_function(CTSingletonInstance4_wrapper),
            (LPVOID)cast_pointer_function((struct CEngNetworkBillEX*(CTSingleton<CEngNetworkBillEX>::*)())&CTSingleton<CEngNetworkBillEX>::Instance) },
        {   (LPVOID)0x14031d5d0L,
            (LPVOID *)&CTSingletondtor_CTSingleton9_user,
            (LPVOID *)&CTSingletondtor_CTSingleton9_next,
            (LPVOID)cast_pointer_function(CTSingletondtor_CTSingleton9_wrapper),
            (LPVOID)cast_pointer_function((void(CTSingleton<CEngNetworkBillEX>::*)())&CTSingleton<CEngNetworkBillEX>::dtor_CTSingleton) },
        
        };
        
    }; // end namespace detail
END_ATF_NAMESPACE
#include "CTSingleton_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        info::CTSingletonctor_CTSingleton2_ptr CTSingletonctor_CTSingleton2_next(nullptr);
        info::CTSingletonctor_CTSingleton2_clbk CTSingletonctor_CTSingleton2_user(nullptr);
        info::CTSingletonInstance4_ptr CTSingletonInstance4_next(nullptr);
        info::CTSingletonInstance4_clbk CTSingletonInstance4_user(nullptr);
        info::CTSingletondtor_CTSingleton9_ptr CTSingletondtor_CTSingleton9_next(nullptr);
        info::CTSingletondtor_CTSingleton9_clbk CTSingletondtor_CTSingleton9_user(nullptr);
        
        void CTSingletonctor_CTSingleton2_wrapper(struct CTSingleton<CBillingManager>* _this)
        {
           CTSingletonctor_CTSingleton2_user(_this);
        };
        struct CBillingManager* CTSingletonInstance4_wrapper()
        {
           return CTSingletonInstance4_user();
        };
        void CTSingletondtor_CTSingleton9_wrapper(struct CTSingleton<CBillingManager>* _this)
        {
           CTSingletondtor_CTSingleton9_user(_this);
        };
        
        hook_record CTSingleton<CBillingManager>_functions[] = {
        {   (LPVOID)0x14028e030L,
            (LPVOID *)&CTSingletonctor_CTSingleton2_user,
            (LPVOID *)&CTSingletonctor_CTSingleton2_next,
            (LPVOID)cast_pointer_function(CTSingletonctor_CTSingleton2_wrapper),
            (LPVOID)cast_pointer_function((void(CTSingleton<CBillingManager>::*)())&CTSingleton<CBillingManager>::ctor_CTSingleton) },
        {   (LPVOID)0x14007e250L,
            (LPVOID *)&CTSingletonInstance4_user,
            (LPVOID *)&CTSingletonInstance4_next,
            (LPVOID)cast_pointer_function(CTSingletonInstance4_wrapper),
            (LPVOID)cast_pointer_function((struct CBillingManager*(CTSingleton<CBillingManager>::*)())&CTSingleton<CBillingManager>::Instance) },
        {   (LPVOID)0x14028e060L,
            (LPVOID *)&CTSingletondtor_CTSingleton9_user,
            (LPVOID *)&CTSingletondtor_CTSingleton9_next,
            (LPVOID)cast_pointer_function(CTSingletondtor_CTSingleton9_wrapper),
            (LPVOID)cast_pointer_function((void(CTSingleton<CBillingManager>::*)())&CTSingleton<CBillingManager>::dtor_CTSingleton) },
        
        };
        
    }; // end namespace detail
END_ATF_NAMESPACE
