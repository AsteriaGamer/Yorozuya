// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CCryptParamVtbl.hpp"
#include "CryptoPP.hpp"

/*
START_ATF_NAMESPACE
    struct CCryptParam
    {
        enum _STATE
        {
            CRY_NONE = 0x0,
            CRY_ALLOC = 0x1,
            CRY_LOAD = 0x2,
            CRY_CREATE_KEY = 0x4,
        };
        CCryptParamVtbl *vfptr;
        char m_byState;
        CryptoPP::AutoSeededRandomPool *m_prng;
        CryptoPP::DL_PrivateKey_EC<CryptoPP::ECP> m_PrivateKey;
        CryptoPP::DL_PublicKey_EC<CryptoPP::ECP> m_PublicKey;
        CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::Rijndael::Dec>,CryptoPP::CBC_Decryption> m_AESDecryptor;
        CryptoPP::PK_FinalTemplate<CryptoPP::DL_EncryptorImpl<CryptoPP::DL_CryptoSchemeOptions<CryptoPP::ECIES<CryptoPP::ECP,CryptoPP::EnumToType<enum CryptoPP::CofactorMultiplicationOption,0>,0>,CryptoPP::DL_Keys_EC<CryptoPP::ECP>,CryptoPP::DL_KeyAgreementAlgorithm_DH<CryptoPP::ECPPoint,CryptoPP::EnumToType<enum CryptoPP::CofactorMultiplicationOption,0> >,CryptoPP::DL_KeyDerivationAlgorithm_P1363<CryptoPP::ECPPoint,0,CryptoPP::P1363_KDF2<CryptoPP::SHA1> >,CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0> > > > m_ECPEncryptor;
        CryptoPP::PK_FinalTemplate<CryptoPP::DL_DecryptorImpl<CryptoPP::DL_CryptoSchemeOptions<CryptoPP::ECIES<CryptoPP::ECP,CryptoPP::EnumToType<enum CryptoPP::CofactorMultiplicationOption,0>,0>,CryptoPP::DL_Keys_EC<CryptoPP::ECP>,CryptoPP::DL_KeyAgreementAlgorithm_DH<CryptoPP::ECPPoint,CryptoPP::EnumToType<enum CryptoPP::CofactorMultiplicationOption,0> >,CryptoPP::DL_KeyDerivationAlgorithm_P1363<CryptoPP::ECPPoint,0,CryptoPP::P1363_KDF2<CryptoPP::SHA1> >,CryptoPP::DL_EncryptionAlgorithm_Xor<CryptoPP::HMAC<CryptoPP::SHA1>,0> > > > m_ECPDecryptor;
    public:
        void Alloc()
        {
            using org_ptr = void (WINAPIV*)(struct CCryptParam*);
            (org_ptr(0x140447bf0L))(this);
        };
        CCryptParam(struct CryptoPP::AutoSeededRandomPool* prng)
        {
            using org_ptr = void (WINAPIV*)(struct CCryptParam*, struct CryptoPP::AutoSeededRandomPool*);
            (org_ptr(0x1404472f0L))(this, prng);
        };
        void ctor_CCryptParam(struct CryptoPP::AutoSeededRandomPool* prng)
        {
            using org_ptr = void (WINAPIV*)(struct CCryptParam*, struct CryptoPP::AutoSeededRandomPool*);
            (org_ptr(0x1404472f0L))(this, prng);
        };
        void CheckPublicKeyHash(struct CryptoPP::ByteQueue* kQueuePub)
        {
            using org_ptr = void (WINAPIV*)(struct CCryptParam*, struct CryptoPP::ByteQueue*);
            (org_ptr(0x140447fc0L))(this, kQueuePub);
        };
        uint64_t CiphertextLength(uint64_t tMaxUseSize)
        {
            using org_ptr = uint64_t (WINAPIV*)(struct CCryptParam*, uint64_t);
            return (org_ptr(0x1404478a0L))(this, tMaxUseSize);
        };
        bool Encrypt(char* pText, uint64_t tLength, char* pCipherText, uint64_t tCipherTextLength)
        {
            using org_ptr = bool (WINAPIV*)(struct CCryptParam*, char*, uint64_t, char*, uint64_t);
            return (org_ptr(0x1404479c0L))(this, pText, tLength, pCipherText, tCipherTextLength);
        };
        bool Load(char* szKeyPath)
        {
            using org_ptr = bool (WINAPIV*)(struct CCryptParam*, char*);
            return (org_ptr(0x140447500L))(this, szKeyPath);
        };
        void LoadKey(struct CryptoPP::ByteQueue* kQueuePub, char* szKeyPath)
        {
            using org_ptr = void (WINAPIV*)(struct CCryptParam*, struct CryptoPP::ByteQueue*, char*);
            (org_ptr(0x140447c70L))(this, kQueuePub, szKeyPath);
        };
        uint64_t MaxPlaintextLength(uint64_t ciphertextLength)
        {
            using org_ptr = uint64_t (WINAPIV*)(struct CCryptParam*, uint64_t);
            return (org_ptr(0x140447930L))(this, ciphertextLength);
        };
        void SetAESDecryptor()
        {
            using org_ptr = void (WINAPIV*)(struct CCryptParam*);
            (org_ptr(0x140447c10L))(this);
        };
        ~CCryptParam()
        {
            using org_ptr = void (WINAPIV*)(struct CCryptParam*);
            (org_ptr(0x140448710L))(this);
        };
        void dtor_CCryptParam()
        {
            using org_ptr = void (WINAPIV*)(struct CCryptParam*);
            (org_ptr(0x140448710L))(this);
        };
    };
END_ATF_NAMESPACE
*/