// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "type_info_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        info::type_info_name_internal_method1_ptr type_info_name_internal_method1_next(nullptr);
        info::type_info_name_internal_method1_clbk type_info_name_internal_method1_user(nullptr);
        info::type_infoctor_type_info4_ptr type_infoctor_type_info4_next(nullptr);
        info::type_infoctor_type_info4_clbk type_infoctor_type_info4_user(nullptr);
        info::type_infodtor_type_info5_ptr type_infodtor_type_info5_next(nullptr);
        info::type_infodtor_type_info5_clbk type_infodtor_type_info5_user(nullptr);
        
        char* type_info_name_internal_method1_wrapper(struct type_info* _this, struct __type_info_node* arg_0)
        {
           return type_info_name_internal_method1_user(_this, arg_0, type_info_name_internal_method1_next);
        };
        void type_infoctor_type_info4_wrapper(struct type_info* _this, struct type_info* rhs)
        {
           type_infoctor_type_info4_user(_this, rhs, type_infoctor_type_info4_next);
        };
        void type_infodtor_type_info5_wrapper(void* arg_0)
        {
           type_infodtor_type_info5_user(arg_0, type_infodtor_type_info5_next);
        };
        
        hook_record type_info_functions[] = {
        {   (LPVOID)0x1404de224L,
            (LPVOID *)&type_info_name_internal_method1_user,
            (LPVOID *)&type_info_name_internal_method1_next,
            (LPVOID)cast_pointer_function(type_info_name_internal_method1_wrapper),
            (LPVOID)cast_pointer_function((char*(type_info::*)(struct __type_info_node*))&type_info::_name_internal_method) },
        {   (LPVOID)0x1404dc920L,
            (LPVOID *)&type_infoctor_type_info4_user,
            (LPVOID *)&type_infoctor_type_info4_next,
            (LPVOID)cast_pointer_function(type_infoctor_type_info4_wrapper),
            (LPVOID)cast_pointer_function((void(type_info::*)(struct type_info*))&type_info::ctor_type_info) },
        {   (LPVOID)0x1404decf4L,
            (LPVOID *)&type_infodtor_type_info5_user,
            (LPVOID *)&type_infodtor_type_info5_next,
            (LPVOID)cast_pointer_function(type_infodtor_type_info5_wrapper),
            (LPVOID)cast_pointer_function((void(type_info::*)())&type_info::dtor_type_info) },
        
        };
        
    }; // end namespace detail
END_ATF_NAMESPACE
