// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CIndexList.hpp"
#include "CPlayer.hpp"
#include "_PVP_ORDER_VIEW_DB_BASE.hpp"


START_ATF_NAMESPACE
    #pragma pack(push, 8)
    struct CPvpCashPoint
    {
        CIndexList m_KillerList;
        char m_byContPvpHave;
        char m_byContPvpLose;
        bool m_bRaceWarRecvr;
    public:
        CPvpCashPoint()
        {
            using org_ptr = void (WINAPIV*)(struct CPvpCashPoint*);
            (org_ptr(0x1403f4f80L))(this);
        };
        void ctor_CPvpCashPoint()
        {
            using org_ptr = void (WINAPIV*)(struct CPvpCashPoint*);
            (org_ptr(0x1403f4f80L))(this);
        };
        long double CalPvpCashPoint(int nDstLv, int nSrcLv, char* pSrcClass, char nParty)
        {
            using org_ptr = long double (WINAPIV*)(struct CPvpCashPoint*, int, int, char*, char);
            return (org_ptr(0x1403f50e0L))(this, nDstLv, nSrcLv, pSrcClass, nParty);
        };
        bool CheckPvpHaveCondition(struct CPlayer* pKiller, struct CPlayer* pDier, long double dOldTempPoint)
        {
            using org_ptr = bool (WINAPIV*)(struct CPvpCashPoint*, struct CPlayer*, struct CPlayer*, long double);
            return (org_ptr(0x1403f54f0L))(this, pKiller, pDier, dOldTempPoint);
        };
        bool CheckPvpLoseCondition(struct CPlayer* pKiller, struct CPlayer* pDier)
        {
            using org_ptr = bool (WINAPIV*)(struct CPvpCashPoint*, struct CPlayer*, struct CPlayer*);
            return (org_ptr(0x1403f5370L))(this, pKiller, pDier);
        };
        int GetContPvpHave()
        {
            using org_ptr = int (WINAPIV*)(struct CPvpCashPoint*);
            return (org_ptr(0x14007d610L))(this);
        };
        int GetContPvpLose()
        {
            using org_ptr = int (WINAPIV*)(struct CPvpCashPoint*);
            return (org_ptr(0x14007d630L))(this);
        };
        int GetMaxTempPoint(char nLv, bool bPremium)
        {
            using org_ptr = int (WINAPIV*)(struct CPvpCashPoint*, char, bool);
            return (org_ptr(0x1403f5230L))(this, nLv, bPremium);
        };
        int GetMinTempPoint(char nLv)
        {
            using org_ptr = int (WINAPIV*)(struct CPvpCashPoint*, char);
            return (org_ptr(0x1403f5280L))(this, nLv);
        };
        int GetMyClassVal(char* pClass)
        {
            using org_ptr = int (WINAPIV*)(struct CPvpCashPoint*, char*);
            return (org_ptr(0x1403f51e0L))(this, pClass);
        };
        bool GetRaceWarRecvr()
        {
            using org_ptr = bool (WINAPIV*)(struct CPvpCashPoint*);
            return (org_ptr(0x140284cf0L))(this);
        };
        int GetTalikRecvrPoint(char byTblCode, unsigned int dwIndex)
        {
            using org_ptr = int (WINAPIV*)(struct CPvpCashPoint*, char, unsigned int);
            return (org_ptr(0x1403f5190L))(this, byTblCode, dwIndex);
        };
        void Init(struct _PVP_ORDER_VIEW_DB_BASE* pkInfo)
        {
            using org_ptr = void (WINAPIV*)(struct CPvpCashPoint*, struct _PVP_ORDER_VIEW_DB_BASE*);
            (org_ptr(0x1403f5010L))(this, pkInfo);
        };
        bool IsPvpMap(struct CPlayer* pOne)
        {
            using org_ptr = bool (WINAPIV*)(struct CPvpCashPoint*, struct CPlayer*);
            return (org_ptr(0x1403f52d0L))(this, pOne);
        };
        void KillerListInit()
        {
            using org_ptr = void (WINAPIV*)(struct CPvpCashPoint*);
            (org_ptr(0x1403f59d0L))(this);
        };
        void SendMsg_PvpCashInform(int n, char byError)
        {
            using org_ptr = void (WINAPIV*)(struct CPvpCashPoint*, int, char);
            (org_ptr(0x1403f5940L))(this, n, byError);
        };
        void SendMsg_RecoverResult(int n, char byRet, int nRecvrPoint)
        {
            using org_ptr = void (WINAPIV*)(struct CPvpCashPoint*, int, char, int);
            (org_ptr(0x1403f58a0L))(this, n, byRet, nRecvrPoint);
        };
        void SendMsg_TalikList(int n)
        {
            using org_ptr = void (WINAPIV*)(struct CPvpCashPoint*, int);
            (org_ptr(0x1403f57a0L))(this, n);
        };
        void SetContPvpHave(char byCnt)
        {
            using org_ptr = void (WINAPIV*)(struct CPvpCashPoint*, char);
            (org_ptr(0x14007d5b0L))(this, byCnt);
        };
        void SetContPvpLose(int byCnt)
        {
            using org_ptr = void (WINAPIV*)(struct CPvpCashPoint*, int);
            (org_ptr(0x14007d5e0L))(this, byCnt);
        };
        bool SetKillerList(unsigned int dwKillerSerial)
        {
            using org_ptr = bool (WINAPIV*)(struct CPvpCashPoint*, unsigned int);
            return (org_ptr(0x1403f5640L))(this, dwKillerSerial);
        };
        void SetRaceWarRecvr(bool bUsed)
        {
            using org_ptr = void (WINAPIV*)(struct CPvpCashPoint*, bool);
            (org_ptr(0x14007c320L))(this, bUsed);
        };
        void UpdateKillerList(struct _PVP_ORDER_VIEW_DB_BASE* pkInfo)
        {
            using org_ptr = void (WINAPIV*)(struct CPvpCashPoint*, struct _PVP_ORDER_VIEW_DB_BASE*);
            (org_ptr(0x1403f56e0L))(this, pkInfo);
        };
        ~CPvpCashPoint()
        {
            using org_ptr = void (WINAPIV*)(struct CPvpCashPoint*);
            (org_ptr(0x140074750L))(this);
        };
        void dtor_CPvpCashPoint()
        {
            using org_ptr = void (WINAPIV*)(struct CPvpCashPoint*);
            (org_ptr(0x140074750L))(this);
        };
    };
    #pragma pack(pop)
END_ATF_NAMESPACE
