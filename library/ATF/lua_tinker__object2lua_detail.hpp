// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "lua_tinker__object2lua_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            static info::lua_tinker__object2luainvoke2_ptr lua_tinker__object2luainvoke2_next(nullptr);
            static info::lua_tinker__object2luainvoke2_clbk lua_tinker__object2luainvoke2_user(nullptr);
            
            static void lua_tinker__object2luainvoke2_wrapper(struct lua_tinker::object2lua<CLuaSignalReActor *>* _this, lua_State* L, struct CLuaSignalReActor* val)
            {
               lua_tinker__object2luainvoke2_user(_this, L, val);
            };
            
            static hook_record object2lua<CLuaSignalReActor *>_functions[] = {
            {   (LPVOID)0x14040b250L,
                (LPVOID *)&lua_tinker__object2luainvoke2_user,
                (LPVOID *)&lua_tinker__object2luainvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__object2luainvoke2_wrapper),
                (LPVOID)cast_pointer_function((void(lua_tinker::object2lua<CLuaSignalReActor *>::*)(struct lua_tinker::object2lua<CLuaSignalReActor *>*, lua_State*, struct CLuaSignalReActor*))&lua_tinker::object2lua<CLuaSignalReActor *>::invoke) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__object2lua_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            static info::lua_tinker__object2luainvoke2_ptr lua_tinker__object2luainvoke2_next(nullptr);
            static info::lua_tinker__object2luainvoke2_clbk lua_tinker__object2luainvoke2_user(nullptr);
            
            static void lua_tinker__object2luainvoke2_wrapper(struct lua_tinker::object2lua<CLuaEventNode *>* _this, lua_State* L, struct CLuaEventNode* val)
            {
               lua_tinker__object2luainvoke2_user(_this, L, val);
            };
            
            static hook_record object2lua<CLuaEventNode *>_functions[] = {
            {   (LPVOID)0x140404ab0L,
                (LPVOID *)&lua_tinker__object2luainvoke2_user,
                (LPVOID *)&lua_tinker__object2luainvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__object2luainvoke2_wrapper),
                (LPVOID)cast_pointer_function((void(lua_tinker::object2lua<CLuaEventNode *>::*)(struct lua_tinker::object2lua<CLuaEventNode *>*, lua_State*, struct CLuaEventNode*))&lua_tinker::object2lua<CLuaEventNode *>::invoke) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__object2lua_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            static info::lua_tinker__object2luainvoke2_ptr lua_tinker__object2luainvoke2_next(nullptr);
            static info::lua_tinker__object2luainvoke2_clbk lua_tinker__object2luainvoke2_user(nullptr);
            
            static void lua_tinker__object2luainvoke2_wrapper(struct lua_tinker::object2lua<CMonster *>* _this, lua_State* L, struct CMonster* val)
            {
               lua_tinker__object2luainvoke2_user(_this, L, val);
            };
            
            static hook_record object2lua<CMonster *>_functions[] = {
            {   (LPVOID)0x14040b350L,
                (LPVOID *)&lua_tinker__object2luainvoke2_user,
                (LPVOID *)&lua_tinker__object2luainvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__object2luainvoke2_wrapper),
                (LPVOID)cast_pointer_function((void(lua_tinker::object2lua<CMonster *>::*)(struct lua_tinker::object2lua<CMonster *>*, lua_State*, struct CMonster*))&lua_tinker::object2lua<CMonster *>::invoke) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__object2lua_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            static info::lua_tinker__object2luainvoke2_ptr lua_tinker__object2luainvoke2_next(nullptr);
            static info::lua_tinker__object2luainvoke2_clbk lua_tinker__object2luainvoke2_user(nullptr);
            
            static void lua_tinker__object2luainvoke2_wrapper(struct lua_tinker::object2lua<CLuaEventMgr *>* _this, lua_State* L, struct CLuaEventMgr* val)
            {
               lua_tinker__object2luainvoke2_user(_this, L, val);
            };
            
            static hook_record object2lua<CLuaEventMgr *>_functions[] = {
            {   (LPVOID)0x14040b2d0L,
                (LPVOID *)&lua_tinker__object2luainvoke2_user,
                (LPVOID *)&lua_tinker__object2luainvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__object2luainvoke2_wrapper),
                (LPVOID)cast_pointer_function((void(lua_tinker::object2lua<CLuaEventMgr *>::*)(struct lua_tinker::object2lua<CLuaEventMgr *>*, lua_State*, struct CLuaEventMgr*))&lua_tinker::object2lua<CLuaEventMgr *>::invoke) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__object2lua_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            static info::lua_tinker__object2luainvoke2_ptr lua_tinker__object2luainvoke2_next(nullptr);
            static info::lua_tinker__object2luainvoke2_clbk lua_tinker__object2luainvoke2_user(nullptr);
            
            static void lua_tinker__object2luainvoke2_wrapper(struct lua_tinker::object2lua<CLuaScript *>* _this, lua_State* L, struct CLuaScript* val)
            {
               lua_tinker__object2luainvoke2_user(_this, L, val);
            };
            
            static hook_record object2lua<CLuaScript *>_functions[] = {
            {   (LPVOID)0x140402fd0L,
                (LPVOID *)&lua_tinker__object2luainvoke2_user,
                (LPVOID *)&lua_tinker__object2luainvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__object2luainvoke2_wrapper),
                (LPVOID)cast_pointer_function((void(lua_tinker::object2lua<CLuaScript *>::*)(struct lua_tinker::object2lua<CLuaScript *>*, lua_State*, struct CLuaScript*))&lua_tinker::object2lua<CLuaScript *>::invoke) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
