// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CMoveMapLimitInfo.hpp"
#include "CMoveMapLimitRightInfo.hpp"
#include "CMyTimer.hpp"
#include "CPlayer.hpp"
#include "_dummy_position.hpp"
#include "std__vector.hpp"


START_ATF_NAMESPACE
    #pragma pack(push, 8)
    struct  CMoveMapLimitInfoPortal : CMoveMapLimitInfo
    {
        enum REQUEST_TYPE
        {
            RT_FORCE_MOVE_HQ = 0x0,
            RT_USE_MOVE_SCROLL = 0x1,
            RT_GOTO_LIMIT_ZONE = 0x2,
            RT_MAX = 0x3,
        };
        enum FORCE_MOVE_HQ_STATE
        {
            FMHS_WAIT = 0x0,
            FMHS_WAIT_NOTIFY_FORCE_MOVE = 0x1,
            FMHS_NOTIFY_FORCE_MOVE = 0x2,
            FMHS_WAIT_FORCE_MOVE = 0x3,
            FMHS_FORCE_MOVE = 0x4,
        };
        _dummy_position *m_pkSrcDummy;
        _dummy_position *m_pkDestDummy;
        _dummy_position *m_pkRegenDummy;
        std::vector<char *,std::allocator<char *> > m_vecAllowDummyCode;
        FORCE_MOVE_HQ_STATE m_eNotifyForceMoveHQState;
        CMyTimer *m_pkNotifyForceMoveHQTimer;
        unsigned int m_uiProcNotifyInx;
    public:
        CMoveMapLimitInfoPortal(unsigned int uiInx, int iType)
			: CMoveMapLimitInfo(uiInx, iType)
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitInfoPortal*, unsigned int, int);
            (org_ptr(0x1403a3ee0L))(this, uiInx, iType);
        };
        void ctor_CMoveMapLimitInfoPortal(unsigned int uiInx, int iType)
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitInfoPortal*, unsigned int, int);
            (org_ptr(0x1403a3ee0L))(this, uiInx, iType);
        };
        bool Init()
        {
            using org_ptr = bool (WINAPIV*)(struct CMoveMapLimitInfoPortal*);
            return (org_ptr(0x1403a4120L))(this);
        };
        void Load(struct CPlayer* pkPlayer, struct CMoveMapLimitRightInfo* pkRight)
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitInfoPortal*, struct CPlayer*, struct CMoveMapLimitRightInfo*);
            (org_ptr(0x1403a42b0L))(this, pkPlayer, pkRight);
        };
        bool LoadINI()
        {
            using org_ptr = bool (WINAPIV*)(struct CMoveMapLimitInfoPortal*);
            return (org_ptr(0x1403a56f0L))(this);
        };
        void Loop()
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitInfoPortal*);
            (org_ptr(0x1403a43d0L))(this);
        };
        char ProcForceMoveHQ(int iUserInx, char* pRequest, struct CMoveMapLimitRightInfo* pkRight)
        {
            using org_ptr = char (WINAPIV*)(struct CMoveMapLimitInfoPortal*, int, char*, struct CMoveMapLimitRightInfo*);
            return (org_ptr(0x1403a44b0L))(this, iUserInx, pRequest, pkRight);
        };
        char ProcGotoLimitZone(int iUserInx, char* pRequest, struct CMoveMapLimitRightInfo* pkRight)
        {
            using org_ptr = char (WINAPIV*)(struct CMoveMapLimitInfoPortal*, int, char*, struct CMoveMapLimitRightInfo*);
            return (org_ptr(0x1403a47b0L))(this, iUserInx, pRequest, pkRight);
        };
        char ProcUseMoveScroll(int iUserInx, char* pRequest, struct CMoveMapLimitRightInfo* pkRight)
        {
            using org_ptr = char (WINAPIV*)(struct CMoveMapLimitInfoPortal*, int, char*, struct CMoveMapLimitRightInfo*);
            return (org_ptr(0x1403a4520L))(this, iUserInx, pRequest, pkRight);
        };
        char Request(int iUserInx, int iRequetType, char* pRequest, struct CMoveMapLimitRightInfo* pkRight)
        {
            using org_ptr = char (WINAPIV*)(struct CMoveMapLimitInfoPortal*, int, int, char*, struct CMoveMapLimitRightInfo*);
            return (org_ptr(0x1403a4200L))(this, iUserInx, iRequetType, pRequest, pkRight);
        };
        void SubProcForceMoveHQ()
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitInfoPortal*);
            (org_ptr(0x1403a4a50L))(this);
        };
        char SubProcGotoLimitZone(int iUserInx, char* pRequest, struct CMoveMapLimitRightInfo* pkRight)
        {
            using org_ptr = char (WINAPIV*)(struct CMoveMapLimitInfoPortal*, int, char*, struct CMoveMapLimitRightInfo*);
            return (org_ptr(0x1403a4d10L))(this, iUserInx, pRequest, pkRight);
        };
        void SubProcNotifyForceMoveHQ()
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitInfoPortal*);
            (org_ptr(0x1403a4880L))(this);
        };
        ~CMoveMapLimitInfoPortal()
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitInfoPortal*);
            (org_ptr(0x1403a3fd0L))(this);
        };
        void dtor_CMoveMapLimitInfoPortal()
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitInfoPortal*);
            (org_ptr(0x1403a3fd0L))(this);
        };
    };
    #pragma pack(pop)
END_ATF_NAMESPACE
