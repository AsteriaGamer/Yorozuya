// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "ATL__CTime.hpp"
#include "BossSchedule_Map.hpp"
#include "_mon_active.hpp"
#include "_mon_block.hpp"


START_ATF_NAMESPACE
    struct BossSchedule
    {
        enum SAVE_KEY
        {
            KEY_MOB_CODE = 0x0,
            KEY_MOB_LASTTIME = 0x1,
            KEY_MOB_LIVE_COUNT = 0x2,
            KEY_MAX = 0x3,
        };
        char m_strSection[64];
        char m_strMonCode[64];
		struct _mon_block *m_pBlock;
		struct _mon_active *m_pMonAct;
        int m_nBlockIndex;
        int m_nActIndex;
        ATL::CTime m_LastRespawnSystemTime;
        unsigned __int16 m_LiveCount;
        BossSchedule_Map *m_pParent;
    public:
        BossSchedule()
        {
            using org_ptr = void (WINAPIV*)(struct BossSchedule*);
            (org_ptr(0x14041b680L))(this);
        };
        void ctor_BossSchedule()
        {
            using org_ptr = void (WINAPIV*)(struct BossSchedule*);
            (org_ptr(0x14041b680L))(this);
        };
        static struct ATL::CTime* Make_LastTimeRespawnSystemTime(struct ATL::CTime* result, char* strTimeValue)
        {
            using org_ptr = struct ATL::CTime* (WINAPIV*)(struct ATL::CTime*, char*);
            return (org_ptr(0x14041a670L))(result, strTimeValue);
        };
        bool Make_LastTimeRespawnSystemTimeString(char* strBuff, int nBuffSize)
        {
            using org_ptr = bool (WINAPIV*)(struct BossSchedule*, char*, int);
            return (org_ptr(0x14041a4b0L))(this, strBuff, nBuffSize);
        };
        static uint16_t Make_LiveCount(char* strTimeValue)
        {
            using org_ptr = uint16_t (WINAPIV*)(char*);
            return (org_ptr(0x14041a8c0L))(strTimeValue);
        };
        bool Make_LiveCountString(char* strBuff, int nBuffSize)
        {
            using org_ptr = bool (WINAPIV*)(struct BossSchedule*, char*, int);
            return (org_ptr(0x14041a600L))(this, strBuff, nBuffSize);
        };
        void Save_LastRespawnSystemTime(struct ATL::CTime* systime)
        {
            using org_ptr = void (WINAPIV*)(struct BossSchedule*, struct ATL::CTime*);
            (org_ptr(0x14041a250L))(this, systime);
        };
        void Save_LiveCount(uint16_t wCount)
        {
            using org_ptr = void (WINAPIV*)(struct BossSchedule*, uint16_t);
            (org_ptr(0x14041a380L))(this, wCount);
        };
        ~BossSchedule()
        {
            using org_ptr = void (WINAPIV*)(struct BossSchedule*);
            (org_ptr(0x14041a1f0L))(this);
        };
        void dtor_BossSchedule()
        {
            using org_ptr = void (WINAPIV*)(struct BossSchedule*);
            (org_ptr(0x14041a1f0L))(this);
        };
    };
END_ATF_NAMESPACE
