// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CCryptParam_info.hpp"

/*
START_ATF_NAMESPACE
    namespace detail
    {
        static info::CCryptParamAlloc2_ptr CCryptParamAlloc2_next(nullptr);
        static info::CCryptParamAlloc2_clbk CCryptParamAlloc2_user(nullptr);
        static info::CCryptParamctor_CCryptParam4_ptr CCryptParamctor_CCryptParam4_next(nullptr);
        static info::CCryptParamctor_CCryptParam4_clbk CCryptParamctor_CCryptParam4_user(nullptr);
        static info::CCryptParamCheckPublicKeyHash6_ptr CCryptParamCheckPublicKeyHash6_next(nullptr);
        static info::CCryptParamCheckPublicKeyHash6_clbk CCryptParamCheckPublicKeyHash6_user(nullptr);
        static info::CCryptParamCiphertextLength8_ptr CCryptParamCiphertextLength8_next(nullptr);
        static info::CCryptParamCiphertextLength8_clbk CCryptParamCiphertextLength8_user(nullptr);
        static info::CCryptParamEncrypt10_ptr CCryptParamEncrypt10_next(nullptr);
        static info::CCryptParamEncrypt10_clbk CCryptParamEncrypt10_user(nullptr);
        static info::CCryptParamLoad12_ptr CCryptParamLoad12_next(nullptr);
        static info::CCryptParamLoad12_clbk CCryptParamLoad12_user(nullptr);
        static info::CCryptParamLoadKey14_ptr CCryptParamLoadKey14_next(nullptr);
        static info::CCryptParamLoadKey14_clbk CCryptParamLoadKey14_user(nullptr);
        static info::CCryptParamMaxPlaintextLength16_ptr CCryptParamMaxPlaintextLength16_next(nullptr);
        static info::CCryptParamMaxPlaintextLength16_clbk CCryptParamMaxPlaintextLength16_user(nullptr);
        static info::CCryptParamSetAESDecryptor18_ptr CCryptParamSetAESDecryptor18_next(nullptr);
        static info::CCryptParamSetAESDecryptor18_clbk CCryptParamSetAESDecryptor18_user(nullptr);
        static info::CCryptParamdtor_CCryptParam23_ptr CCryptParamdtor_CCryptParam23_next(nullptr);
        static info::CCryptParamdtor_CCryptParam23_clbk CCryptParamdtor_CCryptParam23_user(nullptr);
        
        static void CCryptParamAlloc2_wrapper(struct CCryptParam* _this)
        {
           CCryptParamAlloc2_user(_this, CCryptParamAlloc2_next);
        };
        static void CCryptParamctor_CCryptParam4_wrapper(struct CCryptParam* _this, struct CryptoPP::AutoSeededRandomPool* prng)
        {
           CCryptParamctor_CCryptParam4_user(_this, prng, CCryptParamctor_CCryptParam4_next);
        };
        static void CCryptParamCheckPublicKeyHash6_wrapper(struct CCryptParam* _this, struct CryptoPP::ByteQueue* kQueuePub)
        {
           CCryptParamCheckPublicKeyHash6_user(_this, kQueuePub, CCryptParamCheckPublicKeyHash6_next);
        };
        static uint64_t CCryptParamCiphertextLength8_wrapper(struct CCryptParam* _this, uint64_t tMaxUseSize)
        {
           return CCryptParamCiphertextLength8_user(_this, tMaxUseSize, CCryptParamCiphertextLength8_next);
        };
        static bool CCryptParamEncrypt10_wrapper(struct CCryptParam* _this, char* pText, uint64_t tLength, char* pCipherText, uint64_t tCipherTextLength)
        {
           return CCryptParamEncrypt10_user(_this, pText, tLength, pCipherText, tCipherTextLength, CCryptParamEncrypt10_next);
        };
        static bool CCryptParamLoad12_wrapper(struct CCryptParam* _this, char* szKeyPath)
        {
           return CCryptParamLoad12_user(_this, szKeyPath, CCryptParamLoad12_next);
        };
        static void CCryptParamLoadKey14_wrapper(struct CCryptParam* _this, struct CryptoPP::ByteQueue* kQueuePub, char* szKeyPath)
        {
           CCryptParamLoadKey14_user(_this, kQueuePub, szKeyPath, CCryptParamLoadKey14_next);
        };
        static uint64_t CCryptParamMaxPlaintextLength16_wrapper(struct CCryptParam* _this, uint64_t ciphertextLength)
        {
           return CCryptParamMaxPlaintextLength16_user(_this, ciphertextLength, CCryptParamMaxPlaintextLength16_next);
        };
        static void CCryptParamSetAESDecryptor18_wrapper(struct CCryptParam* _this)
        {
           CCryptParamSetAESDecryptor18_user(_this, CCryptParamSetAESDecryptor18_next);
        };
        static void CCryptParamdtor_CCryptParam23_wrapper(struct CCryptParam* _this)
        {
           CCryptParamdtor_CCryptParam23_user(_this, CCryptParamdtor_CCryptParam23_next);
        };
        
        static hook_record CCryptParam_functions[] = {
        {   (LPVOID)0x140447bf0L,
            (LPVOID *)&CCryptParamAlloc2_user,
            (LPVOID *)&CCryptParamAlloc2_next,
            (LPVOID)cast_pointer_function(CCryptParamAlloc2_wrapper),
            (LPVOID)cast_pointer_function((void(CCryptParam::*)())&CCryptParam::Alloc) },
        {   (LPVOID)0x1404472f0L,
            (LPVOID *)&CCryptParamctor_CCryptParam4_user,
            (LPVOID *)&CCryptParamctor_CCryptParam4_next,
            (LPVOID)cast_pointer_function(CCryptParamctor_CCryptParam4_wrapper),
            (LPVOID)cast_pointer_function((void(CCryptParam::*)(struct CryptoPP::AutoSeededRandomPool*))&CCryptParam::ctor_CCryptParam) },
        {   (LPVOID)0x140447fc0L,
            (LPVOID *)&CCryptParamCheckPublicKeyHash6_user,
            (LPVOID *)&CCryptParamCheckPublicKeyHash6_next,
            (LPVOID)cast_pointer_function(CCryptParamCheckPublicKeyHash6_wrapper),
            (LPVOID)cast_pointer_function((void(CCryptParam::*)(struct CryptoPP::ByteQueue*))&CCryptParam::CheckPublicKeyHash) },
        {   (LPVOID)0x1404478a0L,
            (LPVOID *)&CCryptParamCiphertextLength8_user,
            (LPVOID *)&CCryptParamCiphertextLength8_next,
            (LPVOID)cast_pointer_function(CCryptParamCiphertextLength8_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CCryptParam::*)(uint64_t))&CCryptParam::CiphertextLength) },
        {   (LPVOID)0x1404479c0L,
            (LPVOID *)&CCryptParamEncrypt10_user,
            (LPVOID *)&CCryptParamEncrypt10_next,
            (LPVOID)cast_pointer_function(CCryptParamEncrypt10_wrapper),
            (LPVOID)cast_pointer_function((bool(CCryptParam::*)(char*, uint64_t, char*, uint64_t))&CCryptParam::Encrypt) },
        {   (LPVOID)0x140447500L,
            (LPVOID *)&CCryptParamLoad12_user,
            (LPVOID *)&CCryptParamLoad12_next,
            (LPVOID)cast_pointer_function(CCryptParamLoad12_wrapper),
            (LPVOID)cast_pointer_function((bool(CCryptParam::*)(char*))&CCryptParam::Load) },
        {   (LPVOID)0x140447c70L,
            (LPVOID *)&CCryptParamLoadKey14_user,
            (LPVOID *)&CCryptParamLoadKey14_next,
            (LPVOID)cast_pointer_function(CCryptParamLoadKey14_wrapper),
            (LPVOID)cast_pointer_function((void(CCryptParam::*)(struct CryptoPP::ByteQueue*, char*))&CCryptParam::LoadKey) },
        {   (LPVOID)0x140447930L,
            (LPVOID *)&CCryptParamMaxPlaintextLength16_user,
            (LPVOID *)&CCryptParamMaxPlaintextLength16_next,
            (LPVOID)cast_pointer_function(CCryptParamMaxPlaintextLength16_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CCryptParam::*)(uint64_t))&CCryptParam::MaxPlaintextLength) },
        {   (LPVOID)0x140447c10L,
            (LPVOID *)&CCryptParamSetAESDecryptor18_user,
            (LPVOID *)&CCryptParamSetAESDecryptor18_next,
            (LPVOID)cast_pointer_function(CCryptParamSetAESDecryptor18_wrapper),
            (LPVOID)cast_pointer_function((void(CCryptParam::*)())&CCryptParam::SetAESDecryptor) },
        {   (LPVOID)0x140448710L,
            (LPVOID *)&CCryptParamdtor_CCryptParam23_user,
            (LPVOID *)&CCryptParamdtor_CCryptParam23_next,
            (LPVOID)cast_pointer_function(CCryptParamdtor_CCryptParam23_wrapper),
            (LPVOID)cast_pointer_function((void(CCryptParam::*)())&CCryptParam::dtor_CCryptParam) },
        
        };
        
    }; // static end namespace detail
END_ATF_NAMESPACE
*/