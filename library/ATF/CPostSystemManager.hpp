// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CLogFile.hpp"
#include "CMyTimer.hpp"
#include "CNetIndexList.hpp"
#include "CPlayer.hpp"
#include "CPostData.hpp"
#include "_STORAGE_LIST.hpp"
#include "_STORAGE_POS_INDIV.hpp"


START_ATF_NAMESPACE
    struct CPostSystemManager
    {
        char m_byRegiNum;
        char m_byProcNum;
        CMyTimer m_tmrRegiTime;
        CMyTimer m_tmrProcTime;
        CNetIndexList m_listEmpty;
        CNetIndexList m_listRegist;
        CNetIndexList m_listProc;
        CLogFile *m_pkLogger;
        CPostData *m_PostData;
        __int64 m_tNextWrite;
        int m_nPostProcCountPerDay;
        int m_nPostReturnCountPerDay;
    public:
        CPostSystemManager()
        {
            using org_ptr = void (WINAPIV*)(struct CPostSystemManager*);
            (org_ptr(0x140324080L))(this);
        };
        void ctor_CPostSystemManager()
        {
            using org_ptr = void (WINAPIV*)(struct CPostSystemManager*);
            (org_ptr(0x140324080L))(this);
        };
        char CheckRegister(struct CPlayer* pOne, struct _STORAGE_POS_INDIV* pItemInfo, unsigned int dwGold, struct _STORAGE_LIST::_db_con** pItem)
        {
            using org_ptr = char (WINAPIV*)(struct CPostSystemManager*, struct CPlayer*, struct _STORAGE_POS_INDIV*, unsigned int, struct _STORAGE_LIST::_db_con**);
            return (org_ptr(0x140325a50L))(this, pOne, pItemInfo, dwGold, pItem);
        };
        void CompletePostReceiverCheck(char* pData)
        {
            using org_ptr = void (WINAPIV*)(struct CPostSystemManager*, char*);
            (org_ptr(0x1403267d0L))(this, pData);
        };
        void CompleteRegist(char* pData)
        {
            using org_ptr = void (WINAPIV*)(struct CPostSystemManager*, char*);
            (org_ptr(0x140325db0L))(this, pData);
        };
        void CompleteSend(char* pData)
        {
            using org_ptr = void (WINAPIV*)(struct CPostSystemManager*, char*);
            (org_ptr(0x1403261a0L))(this, pData);
        };
        static void Destroy()
        {
            using org_ptr = void (WINAPIV*)();
            (org_ptr(0x140326f00L))();
        };
        bool Init()
        {
            using org_ptr = bool (WINAPIV*)(struct CPostSystemManager*);
            return (org_ptr(0x140324430L))(this);
        };
        bool InitLogger()
        {
            using org_ptr = bool (WINAPIV*)(struct CPostSystemManager*);
            return (org_ptr(0x1403245f0L))(this);
        };
        bool InsertDefaultPSRecord()
        {
            using org_ptr = bool (WINAPIV*)(struct CPostSystemManager*);
            return (org_ptr(0x140325190L))(this);
        };
        static struct CPostSystemManager* Instace()
        {
            using org_ptr = struct CPostSystemManager* (WINAPIV*)();
            return (org_ptr(0x140326e40L))();
        };
        bool Load()
        {
            using org_ptr = bool (WINAPIV*)(struct CPostSystemManager*);
            return (org_ptr(0x1403248a0L))(this);
        };
        void Log(char* fmt)
        {
            using org_ptr = void (WINAPIV*)(struct CPostSystemManager*, char*);
            (org_ptr(0x140324780L))(this, fmt);
        };
        void Log(wchar_t* fmt)
        {
            using org_ptr = void (WINAPIV*)(struct CPostSystemManager*, wchar_t*);
            (org_ptr(0x140324810L))(this, fmt);
        };
        void Loop()
        {
            using org_ptr = void (WINAPIV*)(struct CPostSystemManager*);
            (org_ptr(0x140324910L))(this);
        };
        char PostReceiverCheck(char* pData)
        {
            using org_ptr = char (WINAPIV*)(struct CPostSystemManager*, char*);
            return (org_ptr(0x140326520L))(this, pData);
        };
        bool PostRegistryLoad()
        {
            using org_ptr = bool (WINAPIV*)(struct CPostSystemManager*);
            return (org_ptr(0x140324f30L))(this);
        };
        char PostSend(char* pData)
        {
            using org_ptr = char (WINAPIV*)(struct CPostSystemManager*, char*);
            return (org_ptr(0x140325ef0L))(this, pData);
        };
        bool PostSendRequest(struct CPlayer* pOne, char* wszRecvName, char* wszTitle, char* wszContent, struct _STORAGE_POS_INDIV* pItemInfo, unsigned int dwGold, char byRace)
        {
            using org_ptr = bool (WINAPIV*)(struct CPostSystemManager*, struct CPlayer*, char*, char*, char*, struct _STORAGE_POS_INDIV*, unsigned int, char);
            return (org_ptr(0x1403252a0L))(this, pOne, wszRecvName, wszTitle, wszContent, pItemInfo, dwGold, byRace);
        };
        void SetNextWriteTime()
        {
            using org_ptr = void (WINAPIV*)(struct CPostSystemManager*);
            (org_ptr(0x140326f80L))(this);
        };
        bool UpdateDisappearOwnerRecord()
        {
            using org_ptr = bool (WINAPIV*)(struct CPostSystemManager*);
            return (org_ptr(0x140325240L))(this);
        };
        char UpdateRegist(char* pData)
        {
            using org_ptr = char (WINAPIV*)(struct CPostSystemManager*, char*);
            return (org_ptr(0x140325c20L))(this, pData);
        };
        ~CPostSystemManager()
        {
            using org_ptr = void (WINAPIV*)(struct CPostSystemManager*);
            (org_ptr(0x140324210L))(this);
        };
        void dtor_CPostSystemManager()
        {
            using org_ptr = void (WINAPIV*)(struct CPostSystemManager*);
            (org_ptr(0x140324210L))(this);
        };
    };
END_ATF_NAMESPACE
