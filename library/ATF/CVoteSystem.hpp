// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CNetIndexList.hpp"
#include "_started_vote_inform_zocl.hpp"


START_ATF_NAMESPACE
    #pragma pack(push, 8)
    struct CVoteSystem
    {
        bool m_bActive;
        char m_byRaceCode;
        int m_nSerial;
        bool m_bHurry;
        unsigned int m_dwPoint[3];
        CNetIndexList m_listVote;
        unsigned int m_dwStartVoteTime;
        unsigned int m_dwLastBroadcastTime;
        char m_byLimGrade;
        _started_vote_inform_zocl m_SendStarted;
        bool m_bPunishment;
        char m_byPunishType;
        unsigned int m_dwAvatorSerial;
        char m_wszCharName[17];
    public:
        bool ActVote(unsigned int dwAvatorSerial, char byPoint)
        {
            using org_ptr = bool (WINAPIV*)(struct CVoteSystem*, unsigned int, char);
            return (org_ptr(0x1402b0580L))(this, dwAvatorSerial, byPoint);
        };
        CVoteSystem()
        {
            using org_ptr = void (WINAPIV*)(struct CVoteSystem*);
            (org_ptr(0x1402af7f0L))(this);
        };
        void ctor_CVoteSystem()
        {
            using org_ptr = void (WINAPIV*)(struct CVoteSystem*);
            (org_ptr(0x1402af7f0L))(this);
        };
        void CompleteSelectCharSerial(char* pData)
        {
            using org_ptr = void (WINAPIV*)(struct CVoteSystem*, char*);
            (org_ptr(0x1402b02c0L))(this, pData);
        };
        void Loop()
        {
            using org_ptr = void (WINAPIV*)(struct CVoteSystem*);
            (org_ptr(0x1402b0620L))(this);
        };
        void ProcessPunishment()
        {
            using org_ptr = void (WINAPIV*)(struct CVoteSystem*);
            (org_ptr(0x1402affd0L))(this);
        };
        void SendMsg_StartedVoteInform(int n, unsigned int dwAvatorSerial, bool bPunish)
        {
            using org_ptr = void (WINAPIV*)(struct CVoteSystem*, int, unsigned int, bool);
            (org_ptr(0x1402b0890L))(this, n, dwAvatorSerial, bPunish);
        };
        bool StartVote(char* pwszContent, char byLimGrade, char byRaceCode)
        {
            using org_ptr = bool (WINAPIV*)(struct CVoteSystem*, char*, char, char);
            return (org_ptr(0x1402af8b0L))(this, pwszContent, byLimGrade, byRaceCode);
        };
        bool StartVote(char byRaceCode, char byPunishType, char* pwszContent, char* pwszName, unsigned int dwSerial)
        {
            using org_ptr = bool (WINAPIV*)(struct CVoteSystem*, char, char, char*, char*, unsigned int);
            return (org_ptr(0x1402afbc0L))(this, byRaceCode, byPunishType, pwszContent, pwszName, dwSerial);
        };
        bool StopVote()
        {
            using org_ptr = bool (WINAPIV*)(struct CVoteSystem*);
            return (org_ptr(0x1402b03b0L))(this);
        };
        ~CVoteSystem()
        {
            using org_ptr = void (WINAPIV*)(struct CVoteSystem*);
            (org_ptr(0x1402b0fd0L))(this);
        };
        void dtor_CVoteSystem()
        {
            using org_ptr = void (WINAPIV*)(struct CVoteSystem*);
            (org_ptr(0x1402b0fd0L))(this);
        };
    };
    #pragma pack(pop)
END_ATF_NAMESPACE
