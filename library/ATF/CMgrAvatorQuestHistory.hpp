// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CFrameRate.hpp"
#include "CMyTimer.hpp"
#include "CNetIndexList.hpp"
#include "_QUEST_DB_BASE.hpp"


START_ATF_NAMESPACE
    struct CMgrAvatorQuestHistory
    {
        struct __LOG_DATA
        {
            char szFileName[64];
            int nLen;
            char sData[300];
        };
        char m_szStdPath[128];
        unsigned int m_dwLastLocalDate;
        unsigned int m_dwLastLocalHour;
        CMyTimer m_tmrUpdateTime;
        char m_szCurTime[32];
        __LOG_DATA m_LogData[2532];
        CNetIndexList m_listLogData;
        CNetIndexList m_listLogDataEmpty;
        bool m_bIOThread;
        CFrameRate m_FrameRate;
    public:
        CMgrAvatorQuestHistory()
        {
            using org_ptr = void (WINAPIV*)(struct CMgrAvatorQuestHistory*);
            (org_ptr(0x140247280L))(this);
        };
        void ctor_CMgrAvatorQuestHistory()
        {
            using org_ptr = void (WINAPIV*)(struct CMgrAvatorQuestHistory*);
            (org_ptr(0x140247280L))(this);
        };
        void GetNewFileName(unsigned int dwAvatorSerial, char* pszFileName)
        {
            using org_ptr = void (WINAPIV*)(struct CMgrAvatorQuestHistory*, unsigned int, char*);
            (org_ptr(0x1402476c0L))(this, dwAvatorSerial, pszFileName);
        };
        int GetTotalWaitSize()
        {
            using org_ptr = int (WINAPIV*)(struct CMgrAvatorQuestHistory*);
            return (org_ptr(0x140248090L))(this);
        };
        static void IOThread(void* pv)
        {
            using org_ptr = void (WINAPIV*)(void*);
            (org_ptr(0x140247ea0L))(pv);
        };
        void OnLoop()
        {
            using org_ptr = void (WINAPIV*)(struct CMgrAvatorQuestHistory*);
            (org_ptr(0x140247960L))(this);
        };
        void WriteFile(char* pszFileName, char* pszLog)
        {
            using org_ptr = void (WINAPIV*)(struct CMgrAvatorQuestHistory*, char*, char*);
            (org_ptr(0x140247d90L))(this, pszFileName, pszLog);
        };
        void char_copy(char* pszDstName, unsigned int dwDstSerial, char* pszFileName)
        {
            using org_ptr = void (WINAPIV*)(struct CMgrAvatorQuestHistory*, char*, unsigned int, char*);
            (org_ptr(0x140247d10L))(this, pszDstName, dwDstSerial, pszFileName);
        };
        void complete_quest(int nSlot, char* pszQuestCode, char* pszFileName)
        {
            using org_ptr = void (WINAPIV*)(struct CMgrAvatorQuestHistory*, int, char*, char*);
            (org_ptr(0x140247bf0L))(this, nSlot, pszQuestCode, pszFileName);
        };
        void fail_quest(int nSlot, char* pszQuestCode, char* pszFailCode, char* pszFileName)
        {
            using org_ptr = void (WINAPIV*)(struct CMgrAvatorQuestHistory*, int, char*, char*, char*);
            (org_ptr(0x140247c80L))(this, nSlot, pszQuestCode, pszFailCode, pszFileName);
        };
        void init_quest(char* pszAvatorName, struct _QUEST_DB_BASE* pQuestDB, char* pszFileName)
        {
            using org_ptr = void (WINAPIV*)(struct CMgrAvatorQuestHistory*, char*, struct _QUEST_DB_BASE*, char*);
            (org_ptr(0x1402479d0L))(this, pszAvatorName, pQuestDB, pszFileName);
        };
        void insert_quest(int nSlot, char* pszQuestCode, char* pszFileName)
        {
            using org_ptr = void (WINAPIV*)(struct CMgrAvatorQuestHistory*, int, char*, char*);
            (org_ptr(0x140247b60L))(this, nSlot, pszQuestCode, pszFileName);
        };
        ~CMgrAvatorQuestHistory()
        {
            using org_ptr = void (WINAPIV*)(struct CMgrAvatorQuestHistory*);
            (org_ptr(0x1402475a0L))(this);
        };
        void dtor_CMgrAvatorQuestHistory()
        {
            using org_ptr = void (WINAPIV*)(struct CMgrAvatorQuestHistory*);
            (org_ptr(0x1402475a0L))(this);
        };
    };
END_ATF_NAMESPACE
