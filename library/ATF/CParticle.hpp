// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "$3E60C3DACEF2E33FF1D1871D4F2565FA.hpp"
#include "CEntity.hpp"
#include "_PARTICLE_ELEMENT.hpp"


START_ATF_NAMESPACE
    struct CParticle
    {
        char mEntityName[128];
        int mNum;
        _PARTICLE_ELEMENT *mElement;
        CEntity *mEntity;
        float mTotalTime;
        float mLiveTime;
        float mStartTimeRange;
        float mTimeSpeed;
        float mGravity[3];
        float mStartPower[2][3];
        float mStartScale[2];
        float mStartZRot[2];
        float mStartYRot[2];
        char mFlickerAlpha;
        float mFlickerTime;
        float mStartARGB[4][2];
        float mOnePerTimeEpsilon;
        float mRotMat[4][4];
        $3E60C3DACEF2E33FF1D1871D4F2565FA ___u18;
        float mZFront;
        float mEmitTime;
        unsigned __int16 mSpecialID;
        unsigned __int16 mTrackCnt;
        float mTimeTrack[12];
        char mTrackFlag[12];
        char mATrack[12];
        char mRTrack[12][2];
        char mGTrack[12][2];
        char mBTrack[12][2];
        float mScaleTrack[12][2];
        float mZRotTrack[12][2];
        float mYRotTrack[12][2];
        float mPowerTrack[12][2][3];
        float mSpecialARGV[2][3];
        void *mBsp;
        unsigned int mFlag;
        unsigned int mAlphaType;
        float mStartPos[2][3];
        float mCreatePos[3];
        int mState;
        float mOnePerTime;
        float mOnePerTimeEpsilonTemp;
        float mParticleTimer;
        float mNextCreatorTime;
    public:
        void CheckCollision(int arg_0, float arg_1)
        {
            using org_ptr = void (WINAPIV*)(struct CParticle*, int, float);
            (org_ptr(0x140518ef0L))(this, arg_0, arg_1);
        };
        void CopyParticleToSaveParticle(struct _SAVE_PARTICLE* arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct CParticle*, struct _SAVE_PARTICLE*);
            (org_ptr(0x140517070L))(this, arg_0);
        };
        void CopySaveParticleToParticle(struct _SAVE_PARTICLE* arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct CParticle*, struct _SAVE_PARTICLE*);
            (org_ptr(0x140517140L))(this, arg_0);
        };
        void GetBBox(float* arg_0, float* arg_1)
        {
            using org_ptr = void (WINAPIV*)(struct CParticle*, float*, float*);
            (org_ptr(0x14051a760L))(this, arg_0, arg_1);
        };
        void GetFlickerARGB(int arg_0, uint32_t* arg_1)
        {
            using org_ptr = void (WINAPIV*)(struct CParticle*, int, uint32_t*);
            (org_ptr(0x140518580L))(this, arg_0, arg_1);
        };
        void GetPartcleStep(int arg_0, float arg_1)
        {
            using org_ptr = void (WINAPIV*)(struct CParticle*, int, float);
            (org_ptr(0x140519560L))(this, arg_0, arg_1);
        };
        uint32_t GetParticleState()
        {
            using org_ptr = uint32_t (WINAPIV*)(struct CParticle*);
            return (org_ptr(0x1405173a0L))(this);
        };
        void InitElement(int arg_0, float arg_1)
        {
            using org_ptr = void (WINAPIV*)(struct CParticle*, int, float);
            (org_ptr(0x140519af0L))(this, arg_0, arg_1);
        };
        void InitParticle()
        {
            using org_ptr = void (WINAPIV*)(struct CParticle*);
            (org_ptr(0x14051ad20L))(this);
        };
        int64_t LoadParticleSPT(char* arg_0, uint32_t arg_1)
        {
            using org_ptr = int64_t (WINAPIV*)(struct CParticle*, char*, uint32_t);
            return (org_ptr(0x140517750L))(this, arg_0, arg_1);
        };
        int32_t Loop()
        {
            using org_ptr = int32_t (WINAPIV*)(struct CParticle*);
            return (org_ptr(0x14051a710L))(this);
        };
        void ReInitParticle(int arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct CParticle*, int);
            (org_ptr(0x14051ae00L))(this, arg_0);
        };
        int32_t RealLoop()
        {
            using org_ptr = int32_t (WINAPIV*)(struct CParticle*);
            return (org_ptr(0x14051a3c0L))(this);
        };
        void ReleaseEntity()
        {
            using org_ptr = void (WINAPIV*)(struct CParticle*);
            (org_ptr(0x140518e90L))(this);
        };
        void ReleaseParticle()
        {
            using org_ptr = void (WINAPIV*)(struct CParticle*);
            (org_ptr(0x140517260L))(this);
        };
        void ResetOnePerTime()
        {
            using org_ptr = void (WINAPIV*)(struct CParticle*);
            (org_ptr(0x140517230L))(this);
        };
        void SetCreatePos(float* arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct CParticle*, float*);
            (org_ptr(0x1404ede00L))(this, arg_0);
        };
        void SetParticleState(uint32_t arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct CParticle*, uint32_t);
            (org_ptr(0x14051aeb0L))(this, arg_0);
        };
        void SetPreCalcParticle(uint32_t arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct CParticle*, uint32_t);
            (org_ptr(0x1405171e0L))(this, arg_0);
        };
        void SetStartBoxArea()
        {
            using org_ptr = void (WINAPIV*)(struct CParticle*);
            (org_ptr(0x140518600L))(this);
        };
        int32_t SpecialLoop()
        {
            using org_ptr = int32_t (WINAPIV*)(struct CParticle*);
            return (org_ptr(0x14052ac70L))(this);
        };
        int32_t SpecialLoop2()
        {
            using org_ptr = int32_t (WINAPIV*)(struct CParticle*);
            return (org_ptr(0x14052a1a0L))(this);
        };
        ~CParticle()
        {
            using org_ptr = int64_t (WINAPIV*)(struct CParticle*);
            (org_ptr(0x140516fe0L))(this);
        };
        int64_t dtor_CParticle()
        {
            using org_ptr = int64_t (WINAPIV*)(struct CParticle*);
            return (org_ptr(0x140516fe0L))(this);
        };
    };
END_ATF_NAMESPACE
