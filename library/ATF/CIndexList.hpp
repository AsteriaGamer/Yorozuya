// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CIndexListVtbl.hpp"
#include "CSyncCS.hpp"


START_ATF_NAMESPACE
    #pragma pack(push, 8)
    struct CIndexList
    {
        struct _index_node
        {
            bool m_bLoad;
            unsigned int m_dwIndex;
            unsigned int m_dwInfoDataSize;
            char *m_pInfo;
            _index_node *m_pPrev;
            _index_node *m_pNext;
        public:
            bool AllocInfo(unsigned int nSize)
            {
                using org_ptr = bool (WINAPIV*)(struct _index_node*, unsigned int);
                return (org_ptr(0x14043ab10L))(this, nSize);
            };
            _index_node()
            {
                using org_ptr = void (WINAPIV*)(struct _index_node*);
                (org_ptr(0x14043a910L))(this);
            };
            void ctor__index_node()
            {
                using org_ptr = void (WINAPIV*)(struct _index_node*);
                (org_ptr(0x14043a910L))(this);
            };
            ~_index_node()
            {
                using org_ptr = void (WINAPIV*)(struct _index_node*);
                (org_ptr(0x14043a970L))(this);
            };
            void dtor__index_node()
            {
                using org_ptr = void (WINAPIV*)(struct _index_node*);
                (org_ptr(0x14043a970L))(this);
            };
        };
        CIndexListVtbl *vfptr;
        _index_node m_Head;
        _index_node m_Tail;
        _index_node m_BufHead;
        _index_node m_BufTail;
        _index_node *m_pBufNode;
        CSyncCS m_csList;
        unsigned int m_dwCount;
        unsigned int m_dwBufCount;
        unsigned int m_dwMaxBufNum;
    public:
        CIndexList()
        {
            using org_ptr = void (WINAPIV*)(struct CIndexList*);
            (org_ptr(0x1404392f0L))(this);
        };
        void ctor_CIndexList()
        {
            using org_ptr = void (WINAPIV*)(struct CIndexList*);
            (org_ptr(0x1404392f0L))(this);
        };
        bool CopyFront(unsigned int* pdwOutIndex, char* pInfoData)
        {
            using org_ptr = bool (WINAPIV*)(struct CIndexList*, unsigned int*, char*);
            return (org_ptr(0x140439be0L))(this, pdwOutIndex, pInfoData);
        };
        bool FindNode(unsigned int dwIndex, char* pInfoData)
        {
            using org_ptr = bool (WINAPIV*)(struct CIndexList*, unsigned int, char*);
            return (org_ptr(0x140439e60L))(this, dwIndex, pInfoData);
        };
        struct _index_node* GetAllNode(unsigned int* pdwMaxNodeNum)
        {
            using org_ptr = struct _index_node* (WINAPIV*)(struct CIndexList*, unsigned int*);
            return (org_ptr(0x14043a120L))(this, pdwMaxNodeNum);
        };
        int GetSize()
        {
            using org_ptr = int (WINAPIV*)(struct CIndexList*);
            return (org_ptr(0x14043a100L))(this);
        };
        bool IsInList(unsigned int dwIndex, char* pInfoData)
        {
            using org_ptr = bool (WINAPIV*)(struct CIndexList*, unsigned int, char*);
            return (org_ptr(0x14043a010L))(this, dwIndex, pInfoData);
        };
        bool IsSetting()
        {
            using org_ptr = bool (WINAPIV*)(struct CIndexList*);
            return (org_ptr(0x1404399c0L))(this);
        };
        bool PopNode_Front(unsigned int* pdwOutIndex, char* pInfoData)
        {
            using org_ptr = bool (WINAPIV*)(struct CIndexList*, unsigned int*, char*);
            return (org_ptr(0x140439a40L))(this, pdwOutIndex, pInfoData);
        };
        bool PushNode_Back(unsigned int dwIndex, char* pInfoData)
        {
            using org_ptr = bool (WINAPIV*)(struct CIndexList*, unsigned int, char*);
            return (org_ptr(0x140439cd0L))(this, dwIndex, pInfoData);
        };
        void ResetList()
        {
            using org_ptr = void (WINAPIV*)(struct CIndexList*);
            (org_ptr(0x1404399f0L))(this);
        };
        bool SetList(unsigned int dwMaxBufNum, unsigned int nInfoSize, bool bUseMultiThread)
        {
            using org_ptr = bool (WINAPIV*)(struct CIndexList*, unsigned int, unsigned int, bool);
            return (org_ptr(0x140439720L))(this, dwMaxBufNum, nInfoSize, bUseMultiThread);
        };
        ~CIndexList()
        {
            using org_ptr = void (WINAPIV*)(struct CIndexList*);
            (org_ptr(0x140439530L))(this);
        };
        void dtor_CIndexList()
        {
            using org_ptr = void (WINAPIV*)(struct CIndexList*);
            (org_ptr(0x140439530L))(this);
        };
    };
    #pragma pack(pop)
END_ATF_NAMESPACE
