// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "_SYNC_STATE_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        static info::_SYNC_STATEInit2_ptr _SYNC_STATEInit2_next(nullptr);
        static info::_SYNC_STATEInit2_clbk _SYNC_STATEInit2_user(nullptr);
        static info::_SYNC_STATEctor__SYNC_STATE4_ptr _SYNC_STATEctor__SYNC_STATE4_next(nullptr);
        static info::_SYNC_STATEctor__SYNC_STATE4_clbk _SYNC_STATEctor__SYNC_STATE4_user(nullptr);
        static info::_SYNC_STATEchk_enter6_ptr _SYNC_STATEchk_enter6_next(nullptr);
        static info::_SYNC_STATEchk_enter6_clbk _SYNC_STATEchk_enter6_user(nullptr);
        static info::_SYNC_STATEchk_reged8_ptr _SYNC_STATEchk_reged8_next(nullptr);
        static info::_SYNC_STATEchk_reged8_clbk _SYNC_STATEchk_reged8_user(nullptr);
        static info::_SYNC_STATEchk_select10_ptr _SYNC_STATEchk_select10_next(nullptr);
        static info::_SYNC_STATEchk_select10_clbk _SYNC_STATEchk_select10_user(nullptr);
        static info::_SYNC_STATEre_lobby12_ptr _SYNC_STATEre_lobby12_next(nullptr);
        static info::_SYNC_STATEre_lobby12_clbk _SYNC_STATEre_lobby12_user(nullptr);
        
        static void _SYNC_STATEInit2_wrapper(struct _SYNC_STATE* _this)
        {
           _SYNC_STATEInit2_user(_this, _SYNC_STATEInit2_next);
        };
        static void _SYNC_STATEctor__SYNC_STATE4_wrapper(struct _SYNC_STATE* _this)
        {
           _SYNC_STATEctor__SYNC_STATE4_user(_this, _SYNC_STATEctor__SYNC_STATE4_next);
        };
        static bool _SYNC_STATEchk_enter6_wrapper(struct _SYNC_STATE* _this)
        {
           return _SYNC_STATEchk_enter6_user(_this, _SYNC_STATEchk_enter6_next);
        };
        static bool _SYNC_STATEchk_reged8_wrapper(struct _SYNC_STATE* _this)
        {
           return _SYNC_STATEchk_reged8_user(_this, _SYNC_STATEchk_reged8_next);
        };
        static bool _SYNC_STATEchk_select10_wrapper(struct _SYNC_STATE* _this)
        {
           return _SYNC_STATEchk_select10_user(_this, _SYNC_STATEchk_select10_next);
        };
        static void _SYNC_STATEre_lobby12_wrapper(struct _SYNC_STATE* _this)
        {
           _SYNC_STATEre_lobby12_user(_this, _SYNC_STATEre_lobby12_next);
        };
        
        static hook_record _SYNC_STATE_functions[] = {
        {   (LPVOID)0x14011f120L,
            (LPVOID *)&_SYNC_STATEInit2_user,
            (LPVOID *)&_SYNC_STATEInit2_next,
            (LPVOID)cast_pointer_function(_SYNC_STATEInit2_wrapper),
            (LPVOID)cast_pointer_function((void(_SYNC_STATE::*)())&_SYNC_STATE::Init) },
        {   (LPVOID)0x14011f0d0L,
            (LPVOID *)&_SYNC_STATEctor__SYNC_STATE4_user,
            (LPVOID *)&_SYNC_STATEctor__SYNC_STATE4_next,
            (LPVOID)cast_pointer_function(_SYNC_STATEctor__SYNC_STATE4_wrapper),
            (LPVOID)cast_pointer_function((void(_SYNC_STATE::*)())&_SYNC_STATE::ctor__SYNC_STATE) },
        {   (LPVOID)0x14011f200L,
            (LPVOID *)&_SYNC_STATEchk_enter6_user,
            (LPVOID *)&_SYNC_STATEchk_enter6_next,
            (LPVOID)cast_pointer_function(_SYNC_STATEchk_enter6_wrapper),
            (LPVOID)cast_pointer_function((bool(_SYNC_STATE::*)())&_SYNC_STATE::chk_enter) },
        {   (LPVOID)0x14011f510L,
            (LPVOID *)&_SYNC_STATEchk_reged8_user,
            (LPVOID *)&_SYNC_STATEchk_reged8_next,
            (LPVOID)cast_pointer_function(_SYNC_STATEchk_reged8_wrapper),
            (LPVOID)cast_pointer_function((bool(_SYNC_STATE::*)())&_SYNC_STATE::chk_reged) },
        {   (LPVOID)0x14011f8a0L,
            (LPVOID *)&_SYNC_STATEchk_select10_user,
            (LPVOID *)&_SYNC_STATEchk_select10_next,
            (LPVOID)cast_pointer_function(_SYNC_STATEchk_select10_wrapper),
            (LPVOID)cast_pointer_function((bool(_SYNC_STATE::*)())&_SYNC_STATE::chk_select) },
        {   (LPVOID)0x14011fba0L,
            (LPVOID *)&_SYNC_STATEre_lobby12_user,
            (LPVOID *)&_SYNC_STATEre_lobby12_next,
            (LPVOID)cast_pointer_function(_SYNC_STATEre_lobby12_wrapper),
            (LPVOID)cast_pointer_function((void(_SYNC_STATE::*)())&_SYNC_STATE::re_lobby) },
        
        };
        
    }; // static end namespace detail
END_ATF_NAMESPACE
