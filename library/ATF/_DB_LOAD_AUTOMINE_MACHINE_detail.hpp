// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "_DB_LOAD_AUTOMINE_MACHINE_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        static info::_DB_LOAD_AUTOMINE_MACHINEctor__DB_LOAD_AUTOMINE_MACHINE2_ptr _DB_LOAD_AUTOMINE_MACHINEctor__DB_LOAD_AUTOMINE_MACHINE2_next(nullptr);
        static info::_DB_LOAD_AUTOMINE_MACHINEctor__DB_LOAD_AUTOMINE_MACHINE2_clbk _DB_LOAD_AUTOMINE_MACHINEctor__DB_LOAD_AUTOMINE_MACHINE2_user(nullptr);
        static info::_DB_LOAD_AUTOMINE_MACHINEsize4_ptr _DB_LOAD_AUTOMINE_MACHINEsize4_next(nullptr);
        static info::_DB_LOAD_AUTOMINE_MACHINEsize4_clbk _DB_LOAD_AUTOMINE_MACHINEsize4_user(nullptr);
        
        static void _DB_LOAD_AUTOMINE_MACHINEctor__DB_LOAD_AUTOMINE_MACHINE2_wrapper(struct _DB_LOAD_AUTOMINE_MACHINE* _this)
        {
           _DB_LOAD_AUTOMINE_MACHINEctor__DB_LOAD_AUTOMINE_MACHINE2_user(_this, _DB_LOAD_AUTOMINE_MACHINEctor__DB_LOAD_AUTOMINE_MACHINE2_next);
        };
        static int _DB_LOAD_AUTOMINE_MACHINEsize4_wrapper(struct _DB_LOAD_AUTOMINE_MACHINE* _this)
        {
           return _DB_LOAD_AUTOMINE_MACHINEsize4_user(_this, _DB_LOAD_AUTOMINE_MACHINEsize4_next);
        };
        
        static hook_record _DB_LOAD_AUTOMINE_MACHINE_functions[] = {
        {   (LPVOID)0x1402d4100L,
            (LPVOID *)&_DB_LOAD_AUTOMINE_MACHINEctor__DB_LOAD_AUTOMINE_MACHINE2_user,
            (LPVOID *)&_DB_LOAD_AUTOMINE_MACHINEctor__DB_LOAD_AUTOMINE_MACHINE2_next,
            (LPVOID)cast_pointer_function(_DB_LOAD_AUTOMINE_MACHINEctor__DB_LOAD_AUTOMINE_MACHINE2_wrapper),
            (LPVOID)cast_pointer_function((void(_DB_LOAD_AUTOMINE_MACHINE::*)())&_DB_LOAD_AUTOMINE_MACHINE::ctor__DB_LOAD_AUTOMINE_MACHINE) },
        {   (LPVOID)0x1402d4070L,
            (LPVOID *)&_DB_LOAD_AUTOMINE_MACHINEsize4_user,
            (LPVOID *)&_DB_LOAD_AUTOMINE_MACHINEsize4_next,
            (LPVOID)cast_pointer_function(_DB_LOAD_AUTOMINE_MACHINEsize4_wrapper),
            (LPVOID)cast_pointer_function((int(_DB_LOAD_AUTOMINE_MACHINE::*)())&_DB_LOAD_AUTOMINE_MACHINE::size) },
        
        };
        
    }; // static end namespace detail
END_ATF_NAMESPACE
