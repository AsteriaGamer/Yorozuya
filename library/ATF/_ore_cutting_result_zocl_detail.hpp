// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "_ore_cutting_result_zocl_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        info::_ore_cutting_result_zoclctor__ore_cutting_result_zocl2_ptr _ore_cutting_result_zoclctor__ore_cutting_result_zocl2_next(nullptr);
        info::_ore_cutting_result_zoclctor__ore_cutting_result_zocl2_clbk _ore_cutting_result_zoclctor__ore_cutting_result_zocl2_user(nullptr);
        info::_ore_cutting_result_zoclsize4_ptr _ore_cutting_result_zoclsize4_next(nullptr);
        info::_ore_cutting_result_zoclsize4_clbk _ore_cutting_result_zoclsize4_user(nullptr);
        
        void _ore_cutting_result_zoclctor__ore_cutting_result_zocl2_wrapper(struct _ore_cutting_result_zocl* _this)
        {
           _ore_cutting_result_zoclctor__ore_cutting_result_zocl2_user(_this, _ore_cutting_result_zoclctor__ore_cutting_result_zocl2_next);
        };
        int _ore_cutting_result_zoclsize4_wrapper(struct _ore_cutting_result_zocl* _this)
        {
           return _ore_cutting_result_zoclsize4_user(_this, _ore_cutting_result_zoclsize4_next);
        };
        
        hook_record _ore_cutting_result_zocl_functions[] = {
        {   (LPVOID)0x1400efa50L,
            (LPVOID *)&_ore_cutting_result_zoclctor__ore_cutting_result_zocl2_user,
            (LPVOID *)&_ore_cutting_result_zoclctor__ore_cutting_result_zocl2_next,
            (LPVOID)cast_pointer_function(_ore_cutting_result_zoclctor__ore_cutting_result_zocl2_wrapper),
            (LPVOID)cast_pointer_function((void(_ore_cutting_result_zocl::*)())&_ore_cutting_result_zocl::ctor__ore_cutting_result_zocl) },
        {   (LPVOID)0x1400efa70L,
            (LPVOID *)&_ore_cutting_result_zoclsize4_user,
            (LPVOID *)&_ore_cutting_result_zoclsize4_next,
            (LPVOID)cast_pointer_function(_ore_cutting_result_zoclsize4_wrapper),
            (LPVOID)cast_pointer_function((int(_ore_cutting_result_zocl::*)())&_ore_cutting_result_zocl::size) },
        
        };
        
    }; // end namespace detail
END_ATF_NAMESPACE
