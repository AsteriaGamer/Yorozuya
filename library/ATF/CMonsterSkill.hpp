// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "_base_fld.hpp"
#include "_force_fld.hpp"
#include "_monster_fld.hpp"
#include "_monster_sp_fld.hpp"
#include "_skill_fld.hpp"


START_ATF_NAMESPACE
    #pragma pack(push, 8)
    struct CMonsterSkill
    {
        bool m_bExit;
        int m_UseType;
        int m_nSFCode;
        unsigned __int16 m_wSFIndex;
        _base_fld *m_pSF_Fld;
        _monster_sp_fld *m_pSPConst;
        unsigned int m_BefTime;
        unsigned int m_dwDelayTime;
        unsigned int m_dwCastDelay;
        float m_fAttackDist;
        int m_nMotive;
        int m_nMotivevalue;
        int m_nCaseType;
        int m_nAccumulationCount;
        int m_nSFLv;
        int m_Element;
        int m_StdDmg;
        int m_MinDmg;
        int m_MaxDmg;
        int m_MinProb;
        int m_MaxProb;
    public:
        CMonsterSkill()
        {
            using org_ptr = void (WINAPIV*)(struct CMonsterSkill*);
            (org_ptr(0x14014b5a0L))(this);
        };
        void ctor_CMonsterSkill()
        {
            using org_ptr = void (WINAPIV*)(struct CMonsterSkill*);
            (org_ptr(0x14014b5a0L))(this);
        };
        void Copy(struct CMonsterSkill* Cls)
        {
            using org_ptr = void (WINAPIV*)(struct CMonsterSkill*, struct CMonsterSkill*);
            (org_ptr(0x140156140L))(this, Cls);
        };
        int GetAccumulationCount()
        {
            using org_ptr = int (WINAPIV*)(struct CMonsterSkill*);
            return (org_ptr(0x140155730L))(this);
        };
        float GetAttackDist()
        {
            using org_ptr = float (WINAPIV*)(struct CMonsterSkill*);
            return (org_ptr(0x1401556f0L))(this);
        };
        unsigned int GetBeforeTime()
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CMonsterSkill*);
            return (org_ptr(0x140155870L))(this);
        };
        int GetDstCaseType()
        {
            using org_ptr = int (WINAPIV*)(struct CMonsterSkill*);
            return (org_ptr(0x140155850L))(this);
        };
        int GetElement()
        {
            using org_ptr = int (WINAPIV*)(struct CMonsterSkill*);
            return (org_ptr(0x14014f7e0L))(this);
        };
        int GetExceptMotive()
        {
            using org_ptr = int (WINAPIV*)(struct CMonsterSkill*);
            return (org_ptr(0x1401557d0L))(this);
        };
        int GetExceptMotiveValue()
        {
            using org_ptr = int (WINAPIV*)(struct CMonsterSkill*);
            return (org_ptr(0x140155810L))(this);
        };
        struct _base_fld* GetFld()
        {
            using org_ptr = struct _base_fld* (WINAPIV*)(struct CMonsterSkill*);
            return (org_ptr(0x14014dd80L))(this);
        };
        int GetMaxDmg()
        {
            using org_ptr = int (WINAPIV*)(struct CMonsterSkill*);
            return (org_ptr(0x14014f820L))(this);
        };
        int GetMaxProb()
        {
            using org_ptr = int (WINAPIV*)(struct CMonsterSkill*);
            return (org_ptr(0x14014f860L))(this);
        };
        int GetMinDmg()
        {
            using org_ptr = int (WINAPIV*)(struct CMonsterSkill*);
            return (org_ptr(0x14014f800L))(this);
        };
        int GetMinProb()
        {
            using org_ptr = int (WINAPIV*)(struct CMonsterSkill*);
            return (org_ptr(0x14014f840L))(this);
        };
        int GetMotive()
        {
            using org_ptr = int (WINAPIV*)(struct CMonsterSkill*);
            return (org_ptr(0x1401556b0L))(this);
        };
        int GetMotiveValue()
        {
            using org_ptr = int (WINAPIV*)(struct CMonsterSkill*);
            return (org_ptr(0x140155690L))(this);
        };
        unsigned int GetNextActionDelayTime()
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CMonsterSkill*);
            return (org_ptr(0x14014c2e0L))(this);
        };
        int GetSFLv()
        {
            using org_ptr = int (WINAPIV*)(struct CMonsterSkill*);
            return (org_ptr(0x14014dda0L))(this);
        };
        int GetSPActionProbability()
        {
            using org_ptr = int (WINAPIV*)(struct CMonsterSkill*);
            return (org_ptr(0x140155790L))(this);
        };
        int GetSPLimitCount()
        {
            using org_ptr = int (WINAPIV*)(struct CMonsterSkill*);
            return (org_ptr(0x140155750L))(this);
        };
        int GetType()
        {
            using org_ptr = int (WINAPIV*)(struct CMonsterSkill*);
            return (org_ptr(0x14014c2c0L))(this);
        };
        int GetUseType()
        {
            using org_ptr = int (WINAPIV*)(struct CMonsterSkill*);
            return (org_ptr(0x14014dd60L))(this);
        };
        void Init()
        {
            using org_ptr = void (WINAPIV*)(struct CMonsterSkill*);
            (org_ptr(0x140156030L))(this);
        };
        bool IsAttackAble()
        {
            using org_ptr = bool (WINAPIV*)(struct CMonsterSkill*);
            return (org_ptr(0x14014f880L))(this);
        };
        bool IsExit()
        {
            using org_ptr = bool (WINAPIV*)(struct CMonsterSkill*);
            return (org_ptr(0x1401556d0L))(this);
        };
        void NextPass()
        {
            using org_ptr = void (WINAPIV*)(struct CMonsterSkill*);
            (org_ptr(0x140156980L))(this);
        };
        void SetAccumulationCountAdd(int nTempAccumulationCount)
        {
            using org_ptr = void (WINAPIV*)(struct CMonsterSkill*, int);
            (org_ptr(0x140161500L))(this, nTempAccumulationCount);
        };
        int SetForce(struct _monster_fld* pMonsterFld, struct _monster_sp_fld* pSPCont, int nSFLv, struct _force_fld* pForceFld, unsigned int dwDelayTime, float fAttackDist, unsigned int dwCastDelay, int nMotive, int nMotiveValue, int skillDestType)
        {
            using org_ptr = int (WINAPIV*)(struct CMonsterSkill*, struct _monster_fld*, struct _monster_sp_fld*, int, struct _force_fld*, unsigned int, float, unsigned int, int, int, int);
            return (org_ptr(0x140156700L))(this, pMonsterFld, pSPCont, nSFLv, pForceFld, dwDelayTime, fAttackDist, dwCastDelay, nMotive, nMotiveValue, skillDestType);
        };
        int SetGen(struct _monster_fld* pMonsterFld, int nSFLv, unsigned int dwDelayTime, float fAttackDist, unsigned int dwCastDelay)
        {
            using org_ptr = int (WINAPIV*)(struct CMonsterSkill*, struct _monster_fld*, int, unsigned int, float, unsigned int);
            return (org_ptr(0x1401562b0L))(this, pMonsterFld, nSFLv, dwDelayTime, fAttackDist, dwCastDelay);
        };
        int SetSkill(struct _monster_fld* pMonsterFld, struct _monster_sp_fld* pSPCont, int nSFLv, int nEffectType, struct _skill_fld* pSkillFld, unsigned int dwDelayTime, float fAttackDist, unsigned int dwCastDelay, int nMotive, int nMotiveValue, int skillDestType)
        {
            using org_ptr = int (WINAPIV*)(struct CMonsterSkill*, struct _monster_fld*, struct _monster_sp_fld*, int, int, struct _skill_fld*, unsigned int, float, unsigned int, int, int, int);
            return (org_ptr(0x1401564a0L))(this, pMonsterFld, pSPCont, nSFLv, nEffectType, pSkillFld, dwDelayTime, fAttackDist, dwCastDelay, nMotive, nMotiveValue, skillDestType);
        };
        int Use(unsigned int dwUsedTime, bool bCount)
        {
            using org_ptr = int (WINAPIV*)(struct CMonsterSkill*, unsigned int, bool);
            return (org_ptr(0x140156920L))(this, dwUsedTime, bCount);
        };
        ~CMonsterSkill()
        {
            using org_ptr = void (WINAPIV*)(struct CMonsterSkill*);
            (org_ptr(0x14014b5f0L))(this);
        };
        void dtor_CMonsterSkill()
        {
            using org_ptr = void (WINAPIV*)(struct CMonsterSkill*);
            (org_ptr(0x14014b5f0L))(this);
        };
    };
    #pragma pack(pop)
END_ATF_NAMESPACE
