// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct INI_Section** (WINAPIV*)(struct std::allocator<INI_Section *>*, uint64_t);
            using std__allocatorallocate2_clbk = struct INI_Section** (WINAPIV*)(struct std::allocator<INI_Section *>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<INI_Section *>*, struct std::allocator<INI_Section *>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<INI_Section *>*, struct std::allocator<INI_Section *>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<INI_Section *>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<INI_Section *>*, std__allocatorctor_allocator6_ptr);
            using std__allocatordeallocate8_ptr = void (WINAPIV*)(struct std::allocator<INI_Section *>*, struct INI_Section**, uint64_t);
            using std__allocatordeallocate8_clbk = void (WINAPIV*)(struct std::allocator<INI_Section *>*, struct INI_Section**, uint64_t, std__allocatordeallocate8_ptr);
            using std__allocatormax_size10_ptr = uint64_t (WINAPIV*)(struct std::allocator<INI_Section *>*);
            using std__allocatormax_size10_clbk = uint64_t (WINAPIV*)(struct std::allocator<INI_Section *>*, std__allocatormax_size10_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct INI_Key** (WINAPIV*)(struct std::allocator<INI_Key *>*, uint64_t);
            using std__allocatorallocate2_clbk = struct INI_Key** (WINAPIV*)(struct std::allocator<INI_Key *>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<INI_Key *>*, struct std::allocator<INI_Key *>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<INI_Key *>*, struct std::allocator<INI_Key *>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<INI_Key *>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<INI_Key *>*, std__allocatorctor_allocator6_ptr);
            using std__allocatordeallocate8_ptr = void (WINAPIV*)(struct std::allocator<INI_Key *>*, struct INI_Key**, uint64_t);
            using std__allocatordeallocate8_clbk = void (WINAPIV*)(struct std::allocator<INI_Key *>*, struct INI_Key**, uint64_t, std__allocatordeallocate8_ptr);
            using std__allocatormax_size10_ptr = uint64_t (WINAPIV*)(struct std::allocator<INI_Key *>*);
            using std__allocatormax_size10_clbk = uint64_t (WINAPIV*)(struct std::allocator<INI_Key *>*, std__allocatormax_size10_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct ScheduleMSG** (WINAPIV*)(struct std::allocator<ScheduleMSG *>*, uint64_t);
            using std__allocatorallocate2_clbk = struct ScheduleMSG** (WINAPIV*)(struct std::allocator<ScheduleMSG *>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<ScheduleMSG *>*, struct std::allocator<ScheduleMSG *>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<ScheduleMSG *>*, struct std::allocator<ScheduleMSG *>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<ScheduleMSG *>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<ScheduleMSG *>*, std__allocatorctor_allocator6_ptr);
            using std__allocatordeallocate8_ptr = void (WINAPIV*)(struct std::allocator<ScheduleMSG *>*, struct ScheduleMSG**, uint64_t);
            using std__allocatordeallocate8_clbk = void (WINAPIV*)(struct std::allocator<ScheduleMSG *>*, struct ScheduleMSG**, uint64_t, std__allocatordeallocate8_ptr);
            using std__allocatormax_size10_ptr = uint64_t (WINAPIV*)(struct std::allocator<ScheduleMSG *>*);
            using std__allocatormax_size10_clbk = uint64_t (WINAPIV*)(struct std::allocator<ScheduleMSG *>*, std__allocatormax_size10_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct CGuildRoomInfo* (WINAPIV*)(struct std::allocator<CGuildRoomInfo>*, uint64_t);
            using std__allocatorallocate2_clbk = struct CGuildRoomInfo* (WINAPIV*)(struct std::allocator<CGuildRoomInfo>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<CGuildRoomInfo>*, struct std::allocator<CGuildRoomInfo>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<CGuildRoomInfo>*, struct std::allocator<CGuildRoomInfo>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<CGuildRoomInfo>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<CGuildRoomInfo>*, std__allocatorctor_allocator6_ptr);
            using std__allocatorconstruct8_ptr = void (WINAPIV*)(struct std::allocator<CGuildRoomInfo>*, struct CGuildRoomInfo*, struct CGuildRoomInfo*);
            using std__allocatorconstruct8_clbk = void (WINAPIV*)(struct std::allocator<CGuildRoomInfo>*, struct CGuildRoomInfo*, struct CGuildRoomInfo*, std__allocatorconstruct8_ptr);
            using std__allocatordeallocate10_ptr = void (WINAPIV*)(struct std::allocator<CGuildRoomInfo>*, struct CGuildRoomInfo*, uint64_t);
            using std__allocatordeallocate10_clbk = void (WINAPIV*)(struct std::allocator<CGuildRoomInfo>*, struct CGuildRoomInfo*, uint64_t, std__allocatordeallocate10_ptr);
            using std__allocatordestroy12_ptr = void (WINAPIV*)(struct std::allocator<CGuildRoomInfo>*, struct CGuildRoomInfo*);
            using std__allocatordestroy12_clbk = void (WINAPIV*)(struct std::allocator<CGuildRoomInfo>*, struct CGuildRoomInfo*, std__allocatordestroy12_ptr);
            using std__allocatormax_size14_ptr = uint64_t (WINAPIV*)(struct std::allocator<CGuildRoomInfo>*);
            using std__allocatormax_size14_clbk = uint64_t (WINAPIV*)(struct std::allocator<CGuildRoomInfo>*, std__allocatormax_size14_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct RoomCharInfo* (WINAPIV*)(struct std::allocator<RoomCharInfo>*, uint64_t);
            using std__allocatorallocate2_clbk = struct RoomCharInfo* (WINAPIV*)(struct std::allocator<RoomCharInfo>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<RoomCharInfo>*, struct std::allocator<RoomCharInfo>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<RoomCharInfo>*, struct std::allocator<RoomCharInfo>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<RoomCharInfo>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<RoomCharInfo>*, std__allocatorctor_allocator6_ptr);
            using std__allocatorconstruct8_ptr = void (WINAPIV*)(struct std::allocator<RoomCharInfo>*, struct RoomCharInfo*, struct RoomCharInfo*);
            using std__allocatorconstruct8_clbk = void (WINAPIV*)(struct std::allocator<RoomCharInfo>*, struct RoomCharInfo*, struct RoomCharInfo*, std__allocatorconstruct8_ptr);
            using std__allocatordeallocate10_ptr = void (WINAPIV*)(struct std::allocator<RoomCharInfo>*, struct RoomCharInfo*, uint64_t);
            using std__allocatordeallocate10_clbk = void (WINAPIV*)(struct std::allocator<RoomCharInfo>*, struct RoomCharInfo*, uint64_t, std__allocatordeallocate10_ptr);
            using std__allocatordestroy12_ptr = void (WINAPIV*)(struct std::allocator<RoomCharInfo>*, struct RoomCharInfo*);
            using std__allocatordestroy12_clbk = void (WINAPIV*)(struct std::allocator<RoomCharInfo>*, struct RoomCharInfo*, std__allocatordestroy12_ptr);
            using std__allocatormax_size14_ptr = uint64_t (WINAPIV*)(struct std::allocator<RoomCharInfo>*);
            using std__allocatormax_size14_clbk = uint64_t (WINAPIV*)(struct std::allocator<RoomCharInfo>*, std__allocatormax_size14_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct _PVP_RANK_REFRESH_USER** (WINAPIV*)(struct std::allocator<_PVP_RANK_REFRESH_USER *>*, uint64_t);
            using std__allocatorallocate2_clbk = struct _PVP_RANK_REFRESH_USER** (WINAPIV*)(struct std::allocator<_PVP_RANK_REFRESH_USER *>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<_PVP_RANK_REFRESH_USER *>*, struct std::allocator<_PVP_RANK_REFRESH_USER *>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<_PVP_RANK_REFRESH_USER *>*, struct std::allocator<_PVP_RANK_REFRESH_USER *>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<_PVP_RANK_REFRESH_USER *>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<_PVP_RANK_REFRESH_USER *>*, std__allocatorctor_allocator6_ptr);
            using std__allocatordeallocate8_ptr = void (WINAPIV*)(struct std::allocator<_PVP_RANK_REFRESH_USER *>*, struct _PVP_RANK_REFRESH_USER**, uint64_t);
            using std__allocatordeallocate8_clbk = void (WINAPIV*)(struct std::allocator<_PVP_RANK_REFRESH_USER *>*, struct _PVP_RANK_REFRESH_USER**, uint64_t, std__allocatordeallocate8_ptr);
            using std__allocatormax_size10_ptr = uint64_t (WINAPIV*)(struct std::allocator<_PVP_RANK_REFRESH_USER *>*);
            using std__allocatormax_size10_clbk = uint64_t (WINAPIV*)(struct std::allocator<_PVP_RANK_REFRESH_USER *>*, std__allocatormax_size10_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct _PVP_RANK_DATA** (WINAPIV*)(struct std::allocator<_PVP_RANK_DATA *>*, uint64_t);
            using std__allocatorallocate2_clbk = struct _PVP_RANK_DATA** (WINAPIV*)(struct std::allocator<_PVP_RANK_DATA *>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<_PVP_RANK_DATA *>*, struct std::allocator<_PVP_RANK_DATA *>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<_PVP_RANK_DATA *>*, struct std::allocator<_PVP_RANK_DATA *>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<_PVP_RANK_DATA *>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<_PVP_RANK_DATA *>*, std__allocatorctor_allocator6_ptr);
            using std__allocatordeallocate8_ptr = void (WINAPIV*)(struct std::allocator<_PVP_RANK_DATA *>*, struct _PVP_RANK_DATA**, uint64_t);
            using std__allocatordeallocate8_clbk = void (WINAPIV*)(struct std::allocator<_PVP_RANK_DATA *>*, struct _PVP_RANK_DATA**, uint64_t, std__allocatordeallocate8_ptr);
            using std__allocatormax_size10_ptr = uint64_t (WINAPIV*)(struct std::allocator<_PVP_RANK_DATA *>*);
            using std__allocatormax_size10_clbk = uint64_t (WINAPIV*)(struct std::allocator<_PVP_RANK_DATA *>*, std__allocatormax_size10_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct _PVP_RANK_PACKED_DATA** (WINAPIV*)(struct std::allocator<_PVP_RANK_PACKED_DATA *>*, uint64_t);
            using std__allocatorallocate2_clbk = struct _PVP_RANK_PACKED_DATA** (WINAPIV*)(struct std::allocator<_PVP_RANK_PACKED_DATA *>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<_PVP_RANK_PACKED_DATA *>*, struct std::allocator<_PVP_RANK_PACKED_DATA *>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<_PVP_RANK_PACKED_DATA *>*, struct std::allocator<_PVP_RANK_PACKED_DATA *>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<_PVP_RANK_PACKED_DATA *>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<_PVP_RANK_PACKED_DATA *>*, std__allocatorctor_allocator6_ptr);
            using std__allocatordeallocate8_ptr = void (WINAPIV*)(struct std::allocator<_PVP_RANK_PACKED_DATA *>*, struct _PVP_RANK_PACKED_DATA**, uint64_t);
            using std__allocatordeallocate8_clbk = void (WINAPIV*)(struct std::allocator<_PVP_RANK_PACKED_DATA *>*, struct _PVP_RANK_PACKED_DATA**, uint64_t, std__allocatordeallocate8_ptr);
            using std__allocatormax_size10_ptr = uint64_t (WINAPIV*)(struct std::allocator<_PVP_RANK_PACKED_DATA *>*);
            using std__allocatormax_size10_clbk = uint64_t (WINAPIV*)(struct std::allocator<_PVP_RANK_PACKED_DATA *>*, std__allocatormax_size10_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct _guild_member_refresh_data** (WINAPIV*)(struct std::allocator<_guild_member_refresh_data *>*, uint64_t);
            using std__allocatorallocate2_clbk = struct _guild_member_refresh_data** (WINAPIV*)(struct std::allocator<_guild_member_refresh_data *>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<_guild_member_refresh_data *>*, struct std::allocator<_guild_member_refresh_data *>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<_guild_member_refresh_data *>*, struct std::allocator<_guild_member_refresh_data *>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<_guild_member_refresh_data *>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<_guild_member_refresh_data *>*, std__allocatorctor_allocator6_ptr);
            using std__allocatordeallocate8_ptr = void (WINAPIV*)(struct std::allocator<_guild_member_refresh_data *>*, struct _guild_member_refresh_data**, uint64_t);
            using std__allocatordeallocate8_clbk = void (WINAPIV*)(struct std::allocator<_guild_member_refresh_data *>*, struct _guild_member_refresh_data**, uint64_t, std__allocatordeallocate8_ptr);
            using std__allocatormax_size10_ptr = uint64_t (WINAPIV*)(struct std::allocator<_guild_member_refresh_data *>*);
            using std__allocatormax_size10_clbk = uint64_t (WINAPIV*)(struct std::allocator<_guild_member_refresh_data *>*, std__allocatormax_size10_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct CHEAT_COMMAND* (WINAPIV*)(struct std::allocator<CHEAT_COMMAND>*, uint64_t);
            using std__allocatorallocate2_clbk = struct CHEAT_COMMAND* (WINAPIV*)(struct std::allocator<CHEAT_COMMAND>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<CHEAT_COMMAND>*, struct std::allocator<CHEAT_COMMAND>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<CHEAT_COMMAND>*, struct std::allocator<CHEAT_COMMAND>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<CHEAT_COMMAND>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<CHEAT_COMMAND>*, std__allocatorctor_allocator6_ptr);
            using std__allocatorconstruct8_ptr = void (WINAPIV*)(struct std::allocator<CHEAT_COMMAND>*, struct CHEAT_COMMAND*, struct CHEAT_COMMAND*);
            using std__allocatorconstruct8_clbk = void (WINAPIV*)(struct std::allocator<CHEAT_COMMAND>*, struct CHEAT_COMMAND*, struct CHEAT_COMMAND*, std__allocatorconstruct8_ptr);
            using std__allocatordeallocate10_ptr = void (WINAPIV*)(struct std::allocator<CHEAT_COMMAND>*, struct CHEAT_COMMAND*, uint64_t);
            using std__allocatordeallocate10_clbk = void (WINAPIV*)(struct std::allocator<CHEAT_COMMAND>*, struct CHEAT_COMMAND*, uint64_t, std__allocatordeallocate10_ptr);
            using std__allocatordestroy12_ptr = void (WINAPIV*)(struct std::allocator<CHEAT_COMMAND>*, struct CHEAT_COMMAND*);
            using std__allocatordestroy12_clbk = void (WINAPIV*)(struct std::allocator<CHEAT_COMMAND>*, struct CHEAT_COMMAND*, std__allocatordestroy12_ptr);
            using std__allocatormax_size14_ptr = uint64_t (WINAPIV*)(struct std::allocator<CHEAT_COMMAND>*);
            using std__allocatormax_size14_clbk = uint64_t (WINAPIV*)(struct std::allocator<CHEAT_COMMAND>*, std__allocatormax_size14_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct CryptoPP::ECPPoint* (WINAPIV*)(struct std::allocator<CryptoPP::ECPPoint>*, uint64_t);
            using std__allocatorallocate2_clbk = struct CryptoPP::ECPPoint* (WINAPIV*)(struct std::allocator<CryptoPP::ECPPoint>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<CryptoPP::ECPPoint>*, struct std::allocator<CryptoPP::ECPPoint>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<CryptoPP::ECPPoint>*, struct std::allocator<CryptoPP::ECPPoint>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<CryptoPP::ECPPoint>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<CryptoPP::ECPPoint>*, std__allocatorctor_allocator6_ptr);
            using std__allocatorconstruct8_ptr = void (WINAPIV*)(struct std::allocator<CryptoPP::ECPPoint>*, struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*);
            using std__allocatorconstruct8_clbk = void (WINAPIV*)(struct std::allocator<CryptoPP::ECPPoint>*, struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*, std__allocatorconstruct8_ptr);
            using std__allocatordeallocate10_ptr = void (WINAPIV*)(struct std::allocator<CryptoPP::ECPPoint>*, struct CryptoPP::ECPPoint*, uint64_t);
            using std__allocatordeallocate10_clbk = void (WINAPIV*)(struct std::allocator<CryptoPP::ECPPoint>*, struct CryptoPP::ECPPoint*, uint64_t, std__allocatordeallocate10_ptr);
            using std__allocatordestroy12_ptr = void (WINAPIV*)(struct std::allocator<CryptoPP::ECPPoint>*, struct CryptoPP::ECPPoint*);
            using std__allocatordestroy12_clbk = void (WINAPIV*)(struct std::allocator<CryptoPP::ECPPoint>*, struct CryptoPP::ECPPoint*, std__allocatordestroy12_ptr);
            using std__allocatormax_size14_ptr = uint64_t (WINAPIV*)(struct std::allocator<CryptoPP::ECPPoint>*);
            using std__allocatormax_size14_clbk = uint64_t (WINAPIV*)(struct std::allocator<CryptoPP::ECPPoint>*, std__allocatormax_size14_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct GUILD_BATTLE::CGuildBattleRewardItem* (WINAPIV*)(struct std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>*, uint64_t);
            using std__allocatorallocate2_clbk = struct GUILD_BATTLE::CGuildBattleRewardItem* (WINAPIV*)(struct std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>*, struct std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>*, struct std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>*, std__allocatorctor_allocator6_ptr);
            using std__allocatorconstruct8_ptr = void (WINAPIV*)(struct std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>*, struct GUILD_BATTLE::CGuildBattleRewardItem*, struct GUILD_BATTLE::CGuildBattleRewardItem*);
            using std__allocatorconstruct8_clbk = void (WINAPIV*)(struct std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>*, struct GUILD_BATTLE::CGuildBattleRewardItem*, struct GUILD_BATTLE::CGuildBattleRewardItem*, std__allocatorconstruct8_ptr);
            using std__allocatordeallocate10_ptr = void (WINAPIV*)(struct std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>*, struct GUILD_BATTLE::CGuildBattleRewardItem*, uint64_t);
            using std__allocatordeallocate10_clbk = void (WINAPIV*)(struct std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>*, struct GUILD_BATTLE::CGuildBattleRewardItem*, uint64_t, std__allocatordeallocate10_ptr);
            using std__allocatordestroy12_ptr = void (WINAPIV*)(struct std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>*, struct GUILD_BATTLE::CGuildBattleRewardItem*);
            using std__allocatordestroy12_clbk = void (WINAPIV*)(struct std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>*, struct GUILD_BATTLE::CGuildBattleRewardItem*, std__allocatordestroy12_ptr);
            using std__allocatormax_size14_ptr = uint64_t (WINAPIV*)(struct std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>*);
            using std__allocatormax_size14_clbk = uint64_t (WINAPIV*)(struct std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>*, std__allocatormax_size14_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct CLogTypeDBTask** (WINAPIV*)(struct std::allocator<CLogTypeDBTask *>*, uint64_t);
            using std__allocatorallocate2_clbk = struct CLogTypeDBTask** (WINAPIV*)(struct std::allocator<CLogTypeDBTask *>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<CLogTypeDBTask *>*, struct std::allocator<CLogTypeDBTask *>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<CLogTypeDBTask *>*, struct std::allocator<CLogTypeDBTask *>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<CLogTypeDBTask *>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<CLogTypeDBTask *>*, std__allocatorctor_allocator6_ptr);
            using std__allocatorconstruct8_ptr = void (WINAPIV*)(struct std::allocator<CLogTypeDBTask *>*, struct CLogTypeDBTask**, struct CLogTypeDBTask**);
            using std__allocatorconstruct8_clbk = void (WINAPIV*)(struct std::allocator<CLogTypeDBTask *>*, struct CLogTypeDBTask**, struct CLogTypeDBTask**, std__allocatorconstruct8_ptr);
            using std__allocatordeallocate10_ptr = void (WINAPIV*)(struct std::allocator<CLogTypeDBTask *>*, struct CLogTypeDBTask**, uint64_t);
            using std__allocatordeallocate10_clbk = void (WINAPIV*)(struct std::allocator<CLogTypeDBTask *>*, struct CLogTypeDBTask**, uint64_t, std__allocatordeallocate10_ptr);
            using std__allocatordestroy12_ptr = void (WINAPIV*)(struct std::allocator<CLogTypeDBTask *>*, struct CLogTypeDBTask**);
            using std__allocatordestroy12_clbk = void (WINAPIV*)(struct std::allocator<CLogTypeDBTask *>*, struct CLogTypeDBTask**, std__allocatordestroy12_ptr);
            using std__allocatormax_size14_ptr = uint64_t (WINAPIV*)(struct std::allocator<CLogTypeDBTask *>*);
            using std__allocatormax_size14_clbk = uint64_t (WINAPIV*)(struct std::allocator<CLogTypeDBTask *>*, std__allocatormax_size14_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct CRaceBuffInfoByHolyQuest** (WINAPIV*)(struct std::allocator<CRaceBuffInfoByHolyQuest *>*, uint64_t);
            using std__allocatorallocate2_clbk = struct CRaceBuffInfoByHolyQuest** (WINAPIV*)(struct std::allocator<CRaceBuffInfoByHolyQuest *>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<CRaceBuffInfoByHolyQuest *>*, struct std::allocator<CRaceBuffInfoByHolyQuest *>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<CRaceBuffInfoByHolyQuest *>*, struct std::allocator<CRaceBuffInfoByHolyQuest *>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<CRaceBuffInfoByHolyQuest *>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<CRaceBuffInfoByHolyQuest *>*, std__allocatorctor_allocator6_ptr);
            using std__allocatordeallocate8_ptr = void (WINAPIV*)(struct std::allocator<CRaceBuffInfoByHolyQuest *>*, struct CRaceBuffInfoByHolyQuest**, uint64_t);
            using std__allocatordeallocate8_clbk = void (WINAPIV*)(struct std::allocator<CRaceBuffInfoByHolyQuest *>*, struct CRaceBuffInfoByHolyQuest**, uint64_t, std__allocatordeallocate8_ptr);
            using std__allocatormax_size10_ptr = uint64_t (WINAPIV*)(struct std::allocator<CRaceBuffInfoByHolyQuest *>*);
            using std__allocatormax_size10_clbk = uint64_t (WINAPIV*)(struct std::allocator<CRaceBuffInfoByHolyQuest *>*, std__allocatormax_size10_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct CRaceBuffInfoByHolyQuestfGroup** (WINAPIV*)(struct std::allocator<CRaceBuffInfoByHolyQuestfGroup *>*, uint64_t);
            using std__allocatorallocate2_clbk = struct CRaceBuffInfoByHolyQuestfGroup** (WINAPIV*)(struct std::allocator<CRaceBuffInfoByHolyQuestfGroup *>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<CRaceBuffInfoByHolyQuestfGroup *>*, struct std::allocator<CRaceBuffInfoByHolyQuestfGroup *>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<CRaceBuffInfoByHolyQuestfGroup *>*, struct std::allocator<CRaceBuffInfoByHolyQuestfGroup *>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<CRaceBuffInfoByHolyQuestfGroup *>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<CRaceBuffInfoByHolyQuestfGroup *>*, std__allocatorctor_allocator6_ptr);
            using std__allocatordeallocate8_ptr = void (WINAPIV*)(struct std::allocator<CRaceBuffInfoByHolyQuestfGroup *>*, struct CRaceBuffInfoByHolyQuestfGroup**, uint64_t);
            using std__allocatordeallocate8_clbk = void (WINAPIV*)(struct std::allocator<CRaceBuffInfoByHolyQuestfGroup *>*, struct CRaceBuffInfoByHolyQuestfGroup**, uint64_t, std__allocatordeallocate8_ptr);
            using std__allocatormax_size10_ptr = uint64_t (WINAPIV*)(struct std::allocator<CRaceBuffInfoByHolyQuestfGroup *>*);
            using std__allocatormax_size10_clbk = uint64_t (WINAPIV*)(struct std::allocator<CRaceBuffInfoByHolyQuestfGroup *>*, std__allocatormax_size10_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct CMoveMapLimitRight** (WINAPIV*)(struct std::allocator<CMoveMapLimitRight *>*, uint64_t);
            using std__allocatorallocate2_clbk = struct CMoveMapLimitRight** (WINAPIV*)(struct std::allocator<CMoveMapLimitRight *>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<CMoveMapLimitRight *>*, struct std::allocator<CMoveMapLimitRight *>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<CMoveMapLimitRight *>*, struct std::allocator<CMoveMapLimitRight *>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<CMoveMapLimitRight *>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<CMoveMapLimitRight *>*, std__allocatorctor_allocator6_ptr);
            using std__allocatorconstruct8_ptr = void (WINAPIV*)(struct std::allocator<CMoveMapLimitRight *>*, struct CMoveMapLimitRight**, struct CMoveMapLimitRight**);
            using std__allocatorconstruct8_clbk = void (WINAPIV*)(struct std::allocator<CMoveMapLimitRight *>*, struct CMoveMapLimitRight**, struct CMoveMapLimitRight**, std__allocatorconstruct8_ptr);
            using std__allocatordeallocate10_ptr = void (WINAPIV*)(struct std::allocator<CMoveMapLimitRight *>*, struct CMoveMapLimitRight**, uint64_t);
            using std__allocatordeallocate10_clbk = void (WINAPIV*)(struct std::allocator<CMoveMapLimitRight *>*, struct CMoveMapLimitRight**, uint64_t, std__allocatordeallocate10_ptr);
            using std__allocatordestroy12_ptr = void (WINAPIV*)(struct std::allocator<CMoveMapLimitRight *>*, struct CMoveMapLimitRight**);
            using std__allocatordestroy12_clbk = void (WINAPIV*)(struct std::allocator<CMoveMapLimitRight *>*, struct CMoveMapLimitRight**, std__allocatordestroy12_ptr);
            using std__allocatormax_size14_ptr = uint64_t (WINAPIV*)(struct std::allocator<CMoveMapLimitRight *>*);
            using std__allocatormax_size14_clbk = uint64_t (WINAPIV*)(struct std::allocator<CMoveMapLimitRight *>*, std__allocatormax_size14_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct CMoveMapLimitRightInfo* (WINAPIV*)(struct std::allocator<CMoveMapLimitRightInfo>*, uint64_t);
            using std__allocatorallocate2_clbk = struct CMoveMapLimitRightInfo* (WINAPIV*)(struct std::allocator<CMoveMapLimitRightInfo>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<CMoveMapLimitRightInfo>*, struct std::allocator<CMoveMapLimitRightInfo>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<CMoveMapLimitRightInfo>*, struct std::allocator<CMoveMapLimitRightInfo>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<CMoveMapLimitRightInfo>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<CMoveMapLimitRightInfo>*, std__allocatorctor_allocator6_ptr);
            using std__allocatorconstruct8_ptr = void (WINAPIV*)(struct std::allocator<CMoveMapLimitRightInfo>*, struct CMoveMapLimitRightInfo*, struct CMoveMapLimitRightInfo*);
            using std__allocatorconstruct8_clbk = void (WINAPIV*)(struct std::allocator<CMoveMapLimitRightInfo>*, struct CMoveMapLimitRightInfo*, struct CMoveMapLimitRightInfo*, std__allocatorconstruct8_ptr);
            using std__allocatordeallocate10_ptr = void (WINAPIV*)(struct std::allocator<CMoveMapLimitRightInfo>*, struct CMoveMapLimitRightInfo*, uint64_t);
            using std__allocatordeallocate10_clbk = void (WINAPIV*)(struct std::allocator<CMoveMapLimitRightInfo>*, struct CMoveMapLimitRightInfo*, uint64_t, std__allocatordeallocate10_ptr);
            using std__allocatordestroy12_ptr = void (WINAPIV*)(struct std::allocator<CMoveMapLimitRightInfo>*, struct CMoveMapLimitRightInfo*);
            using std__allocatordestroy12_clbk = void (WINAPIV*)(struct std::allocator<CMoveMapLimitRightInfo>*, struct CMoveMapLimitRightInfo*, std__allocatordestroy12_ptr);
            using std__allocatormax_size14_ptr = uint64_t (WINAPIV*)(struct std::allocator<CMoveMapLimitRightInfo>*);
            using std__allocatormax_size14_clbk = uint64_t (WINAPIV*)(struct std::allocator<CMoveMapLimitRightInfo>*, std__allocatormax_size14_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = int* (WINAPIV*)(struct std::allocator<int>*, uint64_t);
            using std__allocatorallocate2_clbk = int* (WINAPIV*)(struct std::allocator<int>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<int>*, struct std::allocator<int>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<int>*, struct std::allocator<int>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<int>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<int>*, std__allocatorctor_allocator6_ptr);
            using std__allocatordeallocate8_ptr = void (WINAPIV*)(struct std::allocator<int>*, int*, uint64_t);
            using std__allocatordeallocate8_clbk = void (WINAPIV*)(struct std::allocator<int>*, int*, uint64_t, std__allocatordeallocate8_ptr);
            using std__allocatormax_size10_ptr = uint64_t (WINAPIV*)(struct std::allocator<int>*);
            using std__allocatormax_size10_clbk = uint64_t (WINAPIV*)(struct std::allocator<int>*, std__allocatormax_size10_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = char** (WINAPIV*)(struct std::allocator<char *>*, uint64_t);
            using std__allocatorallocate2_clbk = char** (WINAPIV*)(struct std::allocator<char *>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<char *>*, struct std::allocator<char *>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<char *>*, struct std::allocator<char *>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<char *>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<char *>*, std__allocatorctor_allocator6_ptr);
            using std__allocatordeallocate8_ptr = void (WINAPIV*)(struct std::allocator<char *>*, char**, uint64_t);
            using std__allocatordeallocate8_clbk = void (WINAPIV*)(struct std::allocator<char *>*, char**, uint64_t, std__allocatordeallocate8_ptr);
            using std__allocatormax_size10_ptr = uint64_t (WINAPIV*)(struct std::allocator<char *>*);
            using std__allocatormax_size10_clbk = uint64_t (WINAPIV*)(struct std::allocator<char *>*, std__allocatormax_size10_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct CMoveMapLimitInfo** (WINAPIV*)(struct std::allocator<CMoveMapLimitInfo *>*, uint64_t);
            using std__allocatorallocate2_clbk = struct CMoveMapLimitInfo** (WINAPIV*)(struct std::allocator<CMoveMapLimitInfo *>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<CMoveMapLimitInfo *>*, struct std::allocator<CMoveMapLimitInfo *>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<CMoveMapLimitInfo *>*, struct std::allocator<CMoveMapLimitInfo *>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<CMoveMapLimitInfo *>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<CMoveMapLimitInfo *>*, std__allocatorctor_allocator6_ptr);
            using std__allocatordeallocate8_ptr = void (WINAPIV*)(struct std::allocator<CMoveMapLimitInfo *>*, struct CMoveMapLimitInfo**, uint64_t);
            using std__allocatordeallocate8_clbk = void (WINAPIV*)(struct std::allocator<CMoveMapLimitInfo *>*, struct CMoveMapLimitInfo**, uint64_t, std__allocatordeallocate8_ptr);
            using std__allocatormax_size10_ptr = uint64_t (WINAPIV*)(struct std::allocator<CMoveMapLimitInfo *>*);
            using std__allocatormax_size10_clbk = uint64_t (WINAPIV*)(struct std::allocator<CMoveMapLimitInfo *>*, std__allocatormax_size10_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct CUnmannedTraderGroupDivisionVersionInfo* (WINAPIV*)(struct std::allocator<CUnmannedTraderGroupDivisionVersionInfo>*, uint64_t);
            using std__allocatorallocate2_clbk = struct CUnmannedTraderGroupDivisionVersionInfo* (WINAPIV*)(struct std::allocator<CUnmannedTraderGroupDivisionVersionInfo>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderGroupDivisionVersionInfo>*, struct std::allocator<CUnmannedTraderGroupDivisionVersionInfo>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderGroupDivisionVersionInfo>*, struct std::allocator<CUnmannedTraderGroupDivisionVersionInfo>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderGroupDivisionVersionInfo>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderGroupDivisionVersionInfo>*, std__allocatorctor_allocator6_ptr);
            using std__allocatorconstruct8_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderGroupDivisionVersionInfo>*, struct CUnmannedTraderGroupDivisionVersionInfo*, struct CUnmannedTraderGroupDivisionVersionInfo*);
            using std__allocatorconstruct8_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderGroupDivisionVersionInfo>*, struct CUnmannedTraderGroupDivisionVersionInfo*, struct CUnmannedTraderGroupDivisionVersionInfo*, std__allocatorconstruct8_ptr);
            using std__allocatordeallocate10_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderGroupDivisionVersionInfo>*, struct CUnmannedTraderGroupDivisionVersionInfo*, uint64_t);
            using std__allocatordeallocate10_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderGroupDivisionVersionInfo>*, struct CUnmannedTraderGroupDivisionVersionInfo*, uint64_t, std__allocatordeallocate10_ptr);
            using std__allocatordestroy12_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderGroupDivisionVersionInfo>*, struct CUnmannedTraderGroupDivisionVersionInfo*);
            using std__allocatordestroy12_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderGroupDivisionVersionInfo>*, struct CUnmannedTraderGroupDivisionVersionInfo*, std__allocatordestroy12_ptr);
            using std__allocatormax_size14_ptr = uint64_t (WINAPIV*)(struct std::allocator<CUnmannedTraderGroupDivisionVersionInfo>*);
            using std__allocatormax_size14_clbk = uint64_t (WINAPIV*)(struct std::allocator<CUnmannedTraderGroupDivisionVersionInfo>*, std__allocatormax_size14_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct CUnmannedTraderRegistItemInfo* (WINAPIV*)(struct std::allocator<CUnmannedTraderRegistItemInfo>*, uint64_t);
            using std__allocatorallocate2_clbk = struct CUnmannedTraderRegistItemInfo* (WINAPIV*)(struct std::allocator<CUnmannedTraderRegistItemInfo>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderRegistItemInfo>*, struct std::allocator<CUnmannedTraderRegistItemInfo>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderRegistItemInfo>*, struct std::allocator<CUnmannedTraderRegistItemInfo>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderRegistItemInfo>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderRegistItemInfo>*, std__allocatorctor_allocator6_ptr);
            using std__allocatorconstruct8_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderRegistItemInfo>*, struct CUnmannedTraderRegistItemInfo*, struct CUnmannedTraderRegistItemInfo*);
            using std__allocatorconstruct8_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderRegistItemInfo>*, struct CUnmannedTraderRegistItemInfo*, struct CUnmannedTraderRegistItemInfo*, std__allocatorconstruct8_ptr);
            using std__allocatordeallocate10_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderRegistItemInfo>*, struct CUnmannedTraderRegistItemInfo*, uint64_t);
            using std__allocatordeallocate10_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderRegistItemInfo>*, struct CUnmannedTraderRegistItemInfo*, uint64_t, std__allocatordeallocate10_ptr);
            using std__allocatordestroy12_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderRegistItemInfo>*, struct CUnmannedTraderRegistItemInfo*);
            using std__allocatordestroy12_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderRegistItemInfo>*, struct CUnmannedTraderRegistItemInfo*, std__allocatordestroy12_ptr);
            using std__allocatormax_size14_ptr = uint64_t (WINAPIV*)(struct std::allocator<CUnmannedTraderRegistItemInfo>*);
            using std__allocatormax_size14_clbk = uint64_t (WINAPIV*)(struct std::allocator<CUnmannedTraderRegistItemInfo>*, std__allocatormax_size14_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct CUnmannedTraderUserInfo* (WINAPIV*)(struct std::allocator<CUnmannedTraderUserInfo>*, uint64_t);
            using std__allocatorallocate2_clbk = struct CUnmannedTraderUserInfo* (WINAPIV*)(struct std::allocator<CUnmannedTraderUserInfo>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderUserInfo>*, struct std::allocator<CUnmannedTraderUserInfo>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderUserInfo>*, struct std::allocator<CUnmannedTraderUserInfo>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderUserInfo>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderUserInfo>*, std__allocatorctor_allocator6_ptr);
            using std__allocatorconstruct8_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderUserInfo>*, struct CUnmannedTraderUserInfo*, struct CUnmannedTraderUserInfo*);
            using std__allocatorconstruct8_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderUserInfo>*, struct CUnmannedTraderUserInfo*, struct CUnmannedTraderUserInfo*, std__allocatorconstruct8_ptr);
            using std__allocatordeallocate10_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderUserInfo>*, struct CUnmannedTraderUserInfo*, uint64_t);
            using std__allocatordeallocate10_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderUserInfo>*, struct CUnmannedTraderUserInfo*, uint64_t, std__allocatordeallocate10_ptr);
            using std__allocatordestroy12_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderUserInfo>*, struct CUnmannedTraderUserInfo*);
            using std__allocatordestroy12_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderUserInfo>*, struct CUnmannedTraderUserInfo*, std__allocatordestroy12_ptr);
            using std__allocatormax_size14_ptr = uint64_t (WINAPIV*)(struct std::allocator<CUnmannedTraderUserInfo>*);
            using std__allocatormax_size14_clbk = uint64_t (WINAPIV*)(struct std::allocator<CUnmannedTraderUserInfo>*, std__allocatormax_size14_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct CUnmannedTraderSchedule* (WINAPIV*)(struct std::allocator<CUnmannedTraderSchedule>*, uint64_t);
            using std__allocatorallocate2_clbk = struct CUnmannedTraderSchedule* (WINAPIV*)(struct std::allocator<CUnmannedTraderSchedule>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderSchedule>*, struct std::allocator<CUnmannedTraderSchedule>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderSchedule>*, struct std::allocator<CUnmannedTraderSchedule>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderSchedule>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderSchedule>*, std__allocatorctor_allocator6_ptr);
            using std__allocatorconstruct8_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderSchedule>*, struct CUnmannedTraderSchedule*, struct CUnmannedTraderSchedule*);
            using std__allocatorconstruct8_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderSchedule>*, struct CUnmannedTraderSchedule*, struct CUnmannedTraderSchedule*, std__allocatorconstruct8_ptr);
            using std__allocatordeallocate10_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderSchedule>*, struct CUnmannedTraderSchedule*, uint64_t);
            using std__allocatordeallocate10_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderSchedule>*, struct CUnmannedTraderSchedule*, uint64_t, std__allocatordeallocate10_ptr);
            using std__allocatordestroy12_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderSchedule>*, struct CUnmannedTraderSchedule*);
            using std__allocatordestroy12_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderSchedule>*, struct CUnmannedTraderSchedule*, std__allocatordestroy12_ptr);
            using std__allocatormax_size14_ptr = uint64_t (WINAPIV*)(struct std::allocator<CUnmannedTraderSchedule>*);
            using std__allocatormax_size14_clbk = uint64_t (WINAPIV*)(struct std::allocator<CUnmannedTraderSchedule>*, std__allocatormax_size14_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct TRC_AutoTrade** (WINAPIV*)(struct std::allocator<TRC_AutoTrade *>*, uint64_t);
            using std__allocatorallocate2_clbk = struct TRC_AutoTrade** (WINAPIV*)(struct std::allocator<TRC_AutoTrade *>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<TRC_AutoTrade *>*, struct std::allocator<TRC_AutoTrade *>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<TRC_AutoTrade *>*, struct std::allocator<TRC_AutoTrade *>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<TRC_AutoTrade *>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<TRC_AutoTrade *>*, std__allocatorctor_allocator6_ptr);
            using std__allocatordeallocate8_ptr = void (WINAPIV*)(struct std::allocator<TRC_AutoTrade *>*, struct TRC_AutoTrade**, uint64_t);
            using std__allocatordeallocate8_clbk = void (WINAPIV*)(struct std::allocator<TRC_AutoTrade *>*, struct TRC_AutoTrade**, uint64_t, std__allocatordeallocate8_ptr);
            using std__allocatormax_size10_ptr = uint64_t (WINAPIV*)(struct std::allocator<TRC_AutoTrade *>*);
            using std__allocatormax_size10_clbk = uint64_t (WINAPIV*)(struct std::allocator<TRC_AutoTrade *>*, std__allocatormax_size10_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct CUnmannedTraderDivisionInfo** (WINAPIV*)(struct std::allocator<CUnmannedTraderDivisionInfo *>*, uint64_t);
            using std__allocatorallocate2_clbk = struct CUnmannedTraderDivisionInfo** (WINAPIV*)(struct std::allocator<CUnmannedTraderDivisionInfo *>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderDivisionInfo *>*, struct std::allocator<CUnmannedTraderDivisionInfo *>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderDivisionInfo *>*, struct std::allocator<CUnmannedTraderDivisionInfo *>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderDivisionInfo *>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderDivisionInfo *>*, std__allocatorctor_allocator6_ptr);
            using std__allocatordeallocate8_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderDivisionInfo *>*, struct CUnmannedTraderDivisionInfo**, uint64_t);
            using std__allocatordeallocate8_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderDivisionInfo *>*, struct CUnmannedTraderDivisionInfo**, uint64_t, std__allocatordeallocate8_ptr);
            using std__allocatormax_size10_ptr = uint64_t (WINAPIV*)(struct std::allocator<CUnmannedTraderDivisionInfo *>*);
            using std__allocatormax_size10_clbk = uint64_t (WINAPIV*)(struct std::allocator<CUnmannedTraderDivisionInfo *>*, std__allocatormax_size10_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct CUnmannedTraderClassInfo** (WINAPIV*)(struct std::allocator<CUnmannedTraderClassInfo *>*, uint64_t);
            using std__allocatorallocate2_clbk = struct CUnmannedTraderClassInfo** (WINAPIV*)(struct std::allocator<CUnmannedTraderClassInfo *>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderClassInfo *>*, struct std::allocator<CUnmannedTraderClassInfo *>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderClassInfo *>*, struct std::allocator<CUnmannedTraderClassInfo *>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderClassInfo *>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderClassInfo *>*, std__allocatorctor_allocator6_ptr);
            using std__allocatorconstruct8_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderClassInfo *>*, struct CUnmannedTraderClassInfo**, struct CUnmannedTraderClassInfo**);
            using std__allocatorconstruct8_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderClassInfo *>*, struct CUnmannedTraderClassInfo**, struct CUnmannedTraderClassInfo**, std__allocatorconstruct8_ptr);
            using std__allocatordeallocate10_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderClassInfo *>*, struct CUnmannedTraderClassInfo**, uint64_t);
            using std__allocatordeallocate10_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderClassInfo *>*, struct CUnmannedTraderClassInfo**, uint64_t, std__allocatordeallocate10_ptr);
            using std__allocatordestroy12_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderClassInfo *>*, struct CUnmannedTraderClassInfo**);
            using std__allocatordestroy12_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderClassInfo *>*, struct CUnmannedTraderClassInfo**, std__allocatordestroy12_ptr);
            using std__allocatormax_size14_ptr = uint64_t (WINAPIV*)(struct std::allocator<CUnmannedTraderClassInfo *>*);
            using std__allocatormax_size14_clbk = uint64_t (WINAPIV*)(struct std::allocator<CUnmannedTraderClassInfo *>*, std__allocatormax_size14_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct CUnmannedTraderSortType** (WINAPIV*)(struct std::allocator<CUnmannedTraderSortType *>*, uint64_t);
            using std__allocatorallocate2_clbk = struct CUnmannedTraderSortType** (WINAPIV*)(struct std::allocator<CUnmannedTraderSortType *>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderSortType *>*, struct std::allocator<CUnmannedTraderSortType *>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderSortType *>*, struct std::allocator<CUnmannedTraderSortType *>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderSortType *>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderSortType *>*, std__allocatorctor_allocator6_ptr);
            using std__allocatordeallocate8_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderSortType *>*, struct CUnmannedTraderSortType**, uint64_t);
            using std__allocatordeallocate8_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderSortType *>*, struct CUnmannedTraderSortType**, uint64_t, std__allocatordeallocate8_ptr);
            using std__allocatormax_size10_ptr = uint64_t (WINAPIV*)(struct std::allocator<CUnmannedTraderSortType *>*);
            using std__allocatormax_size10_clbk = uint64_t (WINAPIV*)(struct std::allocator<CUnmannedTraderSortType *>*, std__allocatormax_size10_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct CUnmannedTraderSubClassInfo** (WINAPIV*)(struct std::allocator<CUnmannedTraderSubClassInfo *>*, uint64_t);
            using std__allocatorallocate2_clbk = struct CUnmannedTraderSubClassInfo** (WINAPIV*)(struct std::allocator<CUnmannedTraderSubClassInfo *>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderSubClassInfo *>*, struct std::allocator<CUnmannedTraderSubClassInfo *>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderSubClassInfo *>*, struct std::allocator<CUnmannedTraderSubClassInfo *>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderSubClassInfo *>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderSubClassInfo *>*, std__allocatorctor_allocator6_ptr);
            using std__allocatorconstruct8_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderSubClassInfo *>*, struct CUnmannedTraderSubClassInfo**, struct CUnmannedTraderSubClassInfo**);
            using std__allocatorconstruct8_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderSubClassInfo *>*, struct CUnmannedTraderSubClassInfo**, struct CUnmannedTraderSubClassInfo**, std__allocatorconstruct8_ptr);
            using std__allocatordeallocate10_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderSubClassInfo *>*, struct CUnmannedTraderSubClassInfo**, uint64_t);
            using std__allocatordeallocate10_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderSubClassInfo *>*, struct CUnmannedTraderSubClassInfo**, uint64_t, std__allocatordeallocate10_ptr);
            using std__allocatordestroy12_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderSubClassInfo *>*, struct CUnmannedTraderSubClassInfo**);
            using std__allocatordestroy12_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderSubClassInfo *>*, struct CUnmannedTraderSubClassInfo**, std__allocatordestroy12_ptr);
            using std__allocatormax_size14_ptr = uint64_t (WINAPIV*)(struct std::allocator<CUnmannedTraderSubClassInfo *>*);
            using std__allocatormax_size14_clbk = uint64_t (WINAPIV*)(struct std::allocator<CUnmannedTraderSubClassInfo *>*, std__allocatormax_size14_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct CUnmannedTraderItemCodeInfo* (WINAPIV*)(struct std::allocator<CUnmannedTraderItemCodeInfo>*, uint64_t);
            using std__allocatorallocate2_clbk = struct CUnmannedTraderItemCodeInfo* (WINAPIV*)(struct std::allocator<CUnmannedTraderItemCodeInfo>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderItemCodeInfo>*, struct std::allocator<CUnmannedTraderItemCodeInfo>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderItemCodeInfo>*, struct std::allocator<CUnmannedTraderItemCodeInfo>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderItemCodeInfo>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderItemCodeInfo>*, std__allocatorctor_allocator6_ptr);
            using std__allocatorconstruct8_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderItemCodeInfo>*, struct CUnmannedTraderItemCodeInfo*, struct CUnmannedTraderItemCodeInfo*);
            using std__allocatorconstruct8_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderItemCodeInfo>*, struct CUnmannedTraderItemCodeInfo*, struct CUnmannedTraderItemCodeInfo*, std__allocatorconstruct8_ptr);
            using std__allocatordeallocate10_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderItemCodeInfo>*, struct CUnmannedTraderItemCodeInfo*, uint64_t);
            using std__allocatordeallocate10_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderItemCodeInfo>*, struct CUnmannedTraderItemCodeInfo*, uint64_t, std__allocatordeallocate10_ptr);
            using std__allocatordestroy12_ptr = void (WINAPIV*)(struct std::allocator<CUnmannedTraderItemCodeInfo>*, struct CUnmannedTraderItemCodeInfo*);
            using std__allocatordestroy12_clbk = void (WINAPIV*)(struct std::allocator<CUnmannedTraderItemCodeInfo>*, struct CUnmannedTraderItemCodeInfo*, std__allocatordestroy12_ptr);
            using std__allocatormax_size14_ptr = uint64_t (WINAPIV*)(struct std::allocator<CUnmannedTraderItemCodeInfo>*);
            using std__allocatormax_size14_clbk = uint64_t (WINAPIV*)(struct std::allocator<CUnmannedTraderItemCodeInfo>*, std__allocatormax_size14_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct RECV_DATA** (WINAPIV*)(struct std::allocator<RECV_DATA *>*, uint64_t);
            using std__allocatorallocate2_clbk = struct RECV_DATA** (WINAPIV*)(struct std::allocator<RECV_DATA *>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<RECV_DATA *>*, struct std::allocator<RECV_DATA>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<RECV_DATA *>*, struct std::allocator<RECV_DATA>*, std__allocatorctor_allocator4_ptr);
            using std__allocatordeallocate6_ptr = void (WINAPIV*)(struct std::allocator<RECV_DATA *>*, struct RECV_DATA**, uint64_t);
            using std__allocatordeallocate6_clbk = void (WINAPIV*)(struct std::allocator<RECV_DATA *>*, struct RECV_DATA**, uint64_t, std__allocatordeallocate6_ptr);
            using std__allocatordestroy8_ptr = void (WINAPIV*)(struct std::allocator<RECV_DATA *>*, struct RECV_DATA**);
            using std__allocatordestroy8_clbk = void (WINAPIV*)(struct std::allocator<RECV_DATA *>*, struct RECV_DATA**, std__allocatordestroy8_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct RECV_DATA* (WINAPIV*)(struct std::allocator<RECV_DATA>*, uint64_t);
            using std__allocatorallocate2_clbk = struct RECV_DATA* (WINAPIV*)(struct std::allocator<RECV_DATA>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<RECV_DATA>*, struct std::allocator<RECV_DATA>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<RECV_DATA>*, struct std::allocator<RECV_DATA>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<RECV_DATA>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<RECV_DATA>*, std__allocatorctor_allocator6_ptr);
            using std__allocatorconstruct8_ptr = void (WINAPIV*)(struct std::allocator<RECV_DATA>*, struct RECV_DATA*, struct RECV_DATA*);
            using std__allocatorconstruct8_clbk = void (WINAPIV*)(struct std::allocator<RECV_DATA>*, struct RECV_DATA*, struct RECV_DATA*, std__allocatorconstruct8_ptr);
            using std__allocatordeallocate10_ptr = void (WINAPIV*)(struct std::allocator<RECV_DATA>*, struct RECV_DATA*, uint64_t);
            using std__allocatordeallocate10_clbk = void (WINAPIV*)(struct std::allocator<RECV_DATA>*, struct RECV_DATA*, uint64_t, std__allocatordeallocate10_ptr);
            using std__allocatordestroy12_ptr = void (WINAPIV*)(struct std::allocator<RECV_DATA>*, struct RECV_DATA*);
            using std__allocatordestroy12_clbk = void (WINAPIV*)(struct std::allocator<RECV_DATA>*, struct RECV_DATA*, std__allocatordestroy12_ptr);
            using std__allocatormax_size14_ptr = uint64_t (WINAPIV*)(struct std::allocator<RECV_DATA>*);
            using std__allocatormax_size14_clbk = uint64_t (WINAPIV*)(struct std::allocator<RECV_DATA>*, std__allocatormax_size14_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace info
        {
            using std__allocatorallocate2_ptr = struct AreaData* (WINAPIV*)(struct std::allocator<AreaData>*, uint64_t);
            using std__allocatorallocate2_clbk = struct AreaData* (WINAPIV*)(struct std::allocator<AreaData>*, uint64_t, std__allocatorallocate2_ptr);
            using std__allocatorctor_allocator4_ptr = void (WINAPIV*)(struct std::allocator<AreaData>*, struct std::allocator<AreaData>*);
            using std__allocatorctor_allocator4_clbk = void (WINAPIV*)(struct std::allocator<AreaData>*, struct std::allocator<AreaData>*, std__allocatorctor_allocator4_ptr);
            using std__allocatorctor_allocator6_ptr = void (WINAPIV*)(struct std::allocator<AreaData>*);
            using std__allocatorctor_allocator6_clbk = void (WINAPIV*)(struct std::allocator<AreaData>*, std__allocatorctor_allocator6_ptr);
            using std__allocatorconstruct8_ptr = void (WINAPIV*)(struct std::allocator<AreaData>*, struct AreaData*, struct AreaData*);
            using std__allocatorconstruct8_clbk = void (WINAPIV*)(struct std::allocator<AreaData>*, struct AreaData*, struct AreaData*, std__allocatorconstruct8_ptr);
            using std__allocatordeallocate10_ptr = void (WINAPIV*)(struct std::allocator<AreaData>*, struct AreaData*, uint64_t);
            using std__allocatordeallocate10_clbk = void (WINAPIV*)(struct std::allocator<AreaData>*, struct AreaData*, uint64_t, std__allocatordeallocate10_ptr);
            using std__allocatordestroy12_ptr = void (WINAPIV*)(struct std::allocator<AreaData>*, struct AreaData*);
            using std__allocatordestroy12_clbk = void (WINAPIV*)(struct std::allocator<AreaData>*, struct AreaData*, std__allocatordestroy12_ptr);
            using std__allocatormax_size14_ptr = uint64_t (WINAPIV*)(struct std::allocator<AreaData>*);
            using std__allocatormax_size14_clbk = uint64_t (WINAPIV*)(struct std::allocator<AreaData>*, std__allocatormax_size14_ptr);
            
        }; // end namespace info
    }; // end namespace std
END_ATF_NAMESPACE
