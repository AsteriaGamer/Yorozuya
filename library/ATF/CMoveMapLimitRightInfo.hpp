// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CPlayer.hpp"
#include "std__vector.hpp"
#include "CMoveMapLimitRight.hpp"

START_ATF_NAMESPACE
    struct CMoveMapLimitRightInfo
    {
        std::vector<CMoveMapLimitRight *> m_vecRight;
    public:
        CMoveMapLimitRightInfo(struct CMoveMapLimitRightInfo* __that)
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitRightInfo*, struct CMoveMapLimitRightInfo*);
            (org_ptr(0x1403af990L))(this, __that);
        };
        void ctor_CMoveMapLimitRightInfo(struct CMoveMapLimitRightInfo* __that)
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitRightInfo*, struct CMoveMapLimitRightInfo*);
            (org_ptr(0x1403af990L))(this, __that);
        };
        CMoveMapLimitRightInfo()
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitRightInfo*);
            (org_ptr(0x1403ae760L))(this);
        };
        void ctor_CMoveMapLimitRightInfo()
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitRightInfo*);
            (org_ptr(0x1403ae760L))(this);
        };
        void CleanUp()
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitRightInfo*);
            (org_ptr(0x1403ad710L))(this);
        };
        void CreateComplete(struct CPlayer* pkPlayer)
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitRightInfo*, struct CPlayer*);
            (org_ptr(0x1403ad150L))(this, pkPlayer);
        };
        bool IsHaveRight(int iType)
        {
            using org_ptr = bool (WINAPIV*)(struct CMoveMapLimitRightInfo*, int);
            return (org_ptr(0x1403acba0L))(this, iType);
        };
        void Load(struct CPlayer* pkPlayer)
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitRightInfo*, struct CPlayer*);
            (org_ptr(0x1403acd10L))(this, pkPlayer);
        };
        void LogIn(struct CPlayer* pkPlayer)
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitRightInfo*, struct CPlayer*);
            (org_ptr(0x1403acf30L))(this, pkPlayer);
        };
        void LogOut(struct CPlayer* pkPlayer)
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitRightInfo*, struct CPlayer*);
            (org_ptr(0x1403ad370L))(this, pkPlayer);
        };
        bool Regist(int iType)
        {
            using org_ptr = bool (WINAPIV*)(struct CMoveMapLimitRightInfo*, int);
            return (org_ptr(0x1403ac960L))(this, iType);
        };
        void SetFlag(int iType, int iSubType, bool bFlag)
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitRightInfo*, int, int, bool);
            (org_ptr(0x1403acc50L))(this, iType, iSubType, bFlag);
        };
        ~CMoveMapLimitRightInfo()
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitRightInfo*);
            (org_ptr(0x1403a3990L))(this);
        };
        void dtor_CMoveMapLimitRightInfo()
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitRightInfo*);
            (org_ptr(0x1403a3990L))(this);
        };
    };
END_ATF_NAMESPACE
