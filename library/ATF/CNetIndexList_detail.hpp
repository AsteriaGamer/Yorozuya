// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CNetIndexList_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        info::CNetIndexListctor_CNetIndexList2_ptr CNetIndexListctor_CNetIndexList2_next(nullptr);
        info::CNetIndexListctor_CNetIndexList2_clbk CNetIndexListctor_CNetIndexList2_user(nullptr);
        info::CNetIndexListCopyFront4_ptr CNetIndexListCopyFront4_next(nullptr);
        info::CNetIndexListCopyFront4_clbk CNetIndexListCopyFront4_user(nullptr);
        info::CNetIndexListCopyIndexList6_ptr CNetIndexListCopyIndexList6_next(nullptr);
        info::CNetIndexListCopyIndexList6_clbk CNetIndexListCopyIndexList6_user(nullptr);
        info::CNetIndexListFindNode8_ptr CNetIndexListFindNode8_next(nullptr);
        info::CNetIndexListFindNode8_clbk CNetIndexListFindNode8_user(nullptr);
        info::CNetIndexListIsInList10_ptr CNetIndexListIsInList10_next(nullptr);
        info::CNetIndexListIsInList10_clbk CNetIndexListIsInList10_user(nullptr);
        info::CNetIndexListPopNode_Back12_ptr CNetIndexListPopNode_Back12_next(nullptr);
        info::CNetIndexListPopNode_Back12_clbk CNetIndexListPopNode_Back12_user(nullptr);
        info::CNetIndexListPopNode_Front14_ptr CNetIndexListPopNode_Front14_next(nullptr);
        info::CNetIndexListPopNode_Front14_clbk CNetIndexListPopNode_Front14_user(nullptr);
        info::CNetIndexListPushNode_Back16_ptr CNetIndexListPushNode_Back16_next(nullptr);
        info::CNetIndexListPushNode_Back16_clbk CNetIndexListPushNode_Back16_user(nullptr);
        info::CNetIndexListPushNode_Front18_ptr CNetIndexListPushNode_Front18_next(nullptr);
        info::CNetIndexListPushNode_Front18_clbk CNetIndexListPushNode_Front18_user(nullptr);
        info::CNetIndexListResetList20_ptr CNetIndexListResetList20_next(nullptr);
        info::CNetIndexListResetList20_clbk CNetIndexListResetList20_user(nullptr);
        info::CNetIndexListSetList22_ptr CNetIndexListSetList22_next(nullptr);
        info::CNetIndexListSetList22_clbk CNetIndexListSetList22_user(nullptr);
        info::CNetIndexListsize26_ptr CNetIndexListsize26_next(nullptr);
        info::CNetIndexListsize26_clbk CNetIndexListsize26_user(nullptr);
        info::CNetIndexListdtor_CNetIndexList28_ptr CNetIndexListdtor_CNetIndexList28_next(nullptr);
        info::CNetIndexListdtor_CNetIndexList28_clbk CNetIndexListdtor_CNetIndexList28_user(nullptr);
        
        info::CNetIndexList___index_nodector__index_node2_ptr CNetIndexList___index_nodector__index_node2_next(nullptr);
        info::CNetIndexList___index_nodector__index_node2_clbk CNetIndexList___index_nodector__index_node2_user(nullptr);
        
        void CNetIndexListctor_CNetIndexList2_wrapper(struct CNetIndexList* _this)
        {
           CNetIndexListctor_CNetIndexList2_user(_this, CNetIndexListctor_CNetIndexList2_next);
        };
        bool CNetIndexListCopyFront4_wrapper(struct CNetIndexList* _this, unsigned int* pdwOutIndex)
        {
           return CNetIndexListCopyFront4_user(_this, pdwOutIndex, CNetIndexListCopyFront4_next);
        };
        int CNetIndexListCopyIndexList6_wrapper(struct CNetIndexList* _this, unsigned int* pdwList, int nMax)
        {
           return CNetIndexListCopyIndexList6_user(_this, pdwList, nMax, CNetIndexListCopyIndexList6_next);
        };
        struct CNetIndexList::_index_node* CNetIndexListFindNode8_wrapper(struct CNetIndexList* _this, unsigned int dwIndex)
        {
           return CNetIndexListFindNode8_user(_this, dwIndex, CNetIndexListFindNode8_next);
        };
        bool CNetIndexListIsInList10_wrapper(struct CNetIndexList* _this, unsigned int dwIndex)
        {
           return CNetIndexListIsInList10_user(_this, dwIndex, CNetIndexListIsInList10_next);
        };
        bool CNetIndexListPopNode_Back12_wrapper(struct CNetIndexList* _this, unsigned int* pdwOutIndex)
        {
           return CNetIndexListPopNode_Back12_user(_this, pdwOutIndex, CNetIndexListPopNode_Back12_next);
        };
        bool CNetIndexListPopNode_Front14_wrapper(struct CNetIndexList* _this, unsigned int* pdwOutIndex)
        {
           return CNetIndexListPopNode_Front14_user(_this, pdwOutIndex, CNetIndexListPopNode_Front14_next);
        };
        bool CNetIndexListPushNode_Back16_wrapper(struct CNetIndexList* _this, unsigned int dwIndex)
        {
           return CNetIndexListPushNode_Back16_user(_this, dwIndex, CNetIndexListPushNode_Back16_next);
        };
        bool CNetIndexListPushNode_Front18_wrapper(struct CNetIndexList* _this, unsigned int dwIndex)
        {
           return CNetIndexListPushNode_Front18_user(_this, dwIndex, CNetIndexListPushNode_Front18_next);
        };
        void CNetIndexListResetList20_wrapper(struct CNetIndexList* _this)
        {
           CNetIndexListResetList20_user(_this, CNetIndexListResetList20_next);
        };
        bool CNetIndexListSetList22_wrapper(struct CNetIndexList* _this, unsigned int dwMaxBufNum)
        {
           return CNetIndexListSetList22_user(_this, dwMaxBufNum, CNetIndexListSetList22_next);
        };
        int CNetIndexListsize26_wrapper(struct CNetIndexList* _this)
        {
           return CNetIndexListsize26_user(_this, CNetIndexListsize26_next);
        };
        void CNetIndexListdtor_CNetIndexList28_wrapper(struct CNetIndexList* _this)
        {
           CNetIndexListdtor_CNetIndexList28_user(_this, CNetIndexListdtor_CNetIndexList28_next);
        };
        
        void CNetIndexList___index_nodector__index_node2_wrapper(struct CNetIndexList::_index_node* _this)
        {
           CNetIndexList___index_nodector__index_node2_user(_this, CNetIndexList___index_nodector__index_node2_next);
        };
        
        hook_record CNetIndexList_functions[] = {
        {   (LPVOID)0x1400730a0L,
            (LPVOID *)&CNetIndexListctor_CNetIndexList2_user,
            (LPVOID *)&CNetIndexListctor_CNetIndexList2_next,
            (LPVOID)cast_pointer_function(CNetIndexListctor_CNetIndexList2_wrapper),
            (LPVOID)cast_pointer_function((void(CNetIndexList::*)())&CNetIndexList::ctor_CNetIndexList) },
        {   (LPVOID)0x14007dfb0L,
            (LPVOID *)&CNetIndexListCopyFront4_user,
            (LPVOID *)&CNetIndexListCopyFront4_next,
            (LPVOID)cast_pointer_function(CNetIndexListCopyFront4_wrapper),
            (LPVOID)cast_pointer_function((bool(CNetIndexList::*)(unsigned int*))&CNetIndexList::CopyFront) },
        {   (LPVOID)0x140120c80L,
            (LPVOID *)&CNetIndexListCopyIndexList6_user,
            (LPVOID *)&CNetIndexListCopyIndexList6_next,
            (LPVOID)cast_pointer_function(CNetIndexListCopyIndexList6_wrapper),
            (LPVOID)cast_pointer_function((int(CNetIndexList::*)(unsigned int*, int))&CNetIndexList::CopyIndexList) },
        {   (LPVOID)0x140090730L,
            (LPVOID *)&CNetIndexListFindNode8_user,
            (LPVOID *)&CNetIndexListFindNode8_next,
            (LPVOID)cast_pointer_function(CNetIndexListFindNode8_wrapper),
            (LPVOID)cast_pointer_function((struct CNetIndexList::_index_node*(CNetIndexList::*)(unsigned int))&CNetIndexList::FindNode) },
        {   (LPVOID)0x140078b40L,
            (LPVOID *)&CNetIndexListIsInList10_user,
            (LPVOID *)&CNetIndexListIsInList10_next,
            (LPVOID)cast_pointer_function(CNetIndexListIsInList10_wrapper),
            (LPVOID)cast_pointer_function((bool(CNetIndexList::*)(unsigned int))&CNetIndexList::IsInList) },
        {   (LPVOID)0x1402a28a0L,
            (LPVOID *)&CNetIndexListPopNode_Back12_user,
            (LPVOID *)&CNetIndexListPopNode_Back12_next,
            (LPVOID)cast_pointer_function(CNetIndexListPopNode_Back12_wrapper),
            (LPVOID)cast_pointer_function((bool(CNetIndexList::*)(unsigned int*))&CNetIndexList::PopNode_Back) },
        {   (LPVOID)0x140073770L,
            (LPVOID *)&CNetIndexListPopNode_Front14_user,
            (LPVOID *)&CNetIndexListPopNode_Front14_next,
            (LPVOID)cast_pointer_function(CNetIndexListPopNode_Front14_wrapper),
            (LPVOID)cast_pointer_function((bool(CNetIndexList::*)(unsigned int*))&CNetIndexList::PopNode_Front) },
        {   (LPVOID)0x14007a700L,
            (LPVOID *)&CNetIndexListPushNode_Back16_user,
            (LPVOID *)&CNetIndexListPushNode_Back16_next,
            (LPVOID)cast_pointer_function(CNetIndexListPushNode_Back16_wrapper),
            (LPVOID)cast_pointer_function((bool(CNetIndexList::*)(unsigned int))&CNetIndexList::PushNode_Back) },
        {   (LPVOID)0x14024fe00L,
            (LPVOID *)&CNetIndexListPushNode_Front18_user,
            (LPVOID *)&CNetIndexListPushNode_Front18_next,
            (LPVOID)cast_pointer_function(CNetIndexListPushNode_Front18_wrapper),
            (LPVOID)cast_pointer_function((bool(CNetIndexList::*)(unsigned int))&CNetIndexList::PushNode_Front) },
        {   (LPVOID)0x140073700L,
            (LPVOID *)&CNetIndexListResetList20_user,
            (LPVOID *)&CNetIndexListResetList20_next,
            (LPVOID)cast_pointer_function(CNetIndexListResetList20_wrapper),
            (LPVOID)cast_pointer_function((void(CNetIndexList::*)())&CNetIndexList::ResetList) },
        {   (LPVOID)0x140073390L,
            (LPVOID *)&CNetIndexListSetList22_user,
            (LPVOID *)&CNetIndexListSetList22_next,
            (LPVOID)cast_pointer_function(CNetIndexListSetList22_wrapper),
            (LPVOID)cast_pointer_function((bool(CNetIndexList::*)(unsigned int))&CNetIndexList::SetList) },
        {   (LPVOID)0x140028f70L,
            (LPVOID *)&CNetIndexListsize26_user,
            (LPVOID *)&CNetIndexListsize26_next,
            (LPVOID)cast_pointer_function(CNetIndexListsize26_wrapper),
            (LPVOID)cast_pointer_function((int(CNetIndexList::*)())&CNetIndexList::size) },
        {   (LPVOID)0x1400732b0L,
            (LPVOID *)&CNetIndexListdtor_CNetIndexList28_user,
            (LPVOID *)&CNetIndexListdtor_CNetIndexList28_next,
            (LPVOID)cast_pointer_function(CNetIndexListdtor_CNetIndexList28_wrapper),
            (LPVOID)cast_pointer_function((void(CNetIndexList::*)())&CNetIndexList::dtor_CNetIndexList) },
        
        {   (LPVOID)0x140073280L,
            (LPVOID *)&CNetIndexList___index_nodector__index_node2_user,
            (LPVOID *)&CNetIndexList___index_nodector__index_node2_next,
            (LPVOID)cast_pointer_function(CNetIndexList___index_nodector__index_node2_wrapper),
            (LPVOID)cast_pointer_function((void(CNetIndexList::_index_node::*)())&CNetIndexList::_index_node::ctor__index_node) },
        
        };
        
    }; // end namespace detail
END_ATF_NAMESPACE
