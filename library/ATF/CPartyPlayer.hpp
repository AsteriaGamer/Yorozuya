// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CDarkHole.hpp"
#include "CPlayer.hpp"
#include "_WA_AVATOR_CODE.hpp"


START_ATF_NAMESPACE
    struct CPartyPlayer
    {
        bool m_bLogin;
        _CLID m_id;
        char m_wszName[17];
        unsigned __int16 m_wZoneIndex;
        CPartyPlayer *m_pPartyBoss;
        CPartyPlayer *m_pPartyMember[8];
        bool m_bLock;
        char m_byLootShareSystem;
        CPartyPlayer *m_pLootAuthor;
        CDarkHole *m_pDarkHole;
    public:
        CPartyPlayer()
        {
            using org_ptr = void (WINAPIV*)(struct CPartyPlayer*);
            (org_ptr(0x140044c10L))(this);
        };
        void ctor_CPartyPlayer()
        {
            using org_ptr = void (WINAPIV*)(struct CPartyPlayer*);
            (org_ptr(0x140044c10L))(this);
        };
        bool DisjointParty()
        {
            using org_ptr = bool (WINAPIV*)(struct CPartyPlayer*);
            return (org_ptr(0x140045190L))(this);
        };
        void EnterWorld(struct _WA_AVATOR_CODE* pData, uint16_t wZoneIndex)
        {
            using org_ptr = void (WINAPIV*)(struct CPartyPlayer*, struct _WA_AVATOR_CODE*, uint16_t);
            (org_ptr(0x140044ca0L))(this, pData, wZoneIndex);
        };
        void ExitWorld(struct CPartyPlayer** ppoutNewBoss)
        {
            using org_ptr = void (WINAPIV*)(struct CPartyPlayer*, struct CPartyPlayer**);
            (org_ptr(0x140044d30L))(this, ppoutNewBoss);
        };
        bool FoundParty(struct CPartyPlayer* pParticiper)
        {
            using org_ptr = bool (WINAPIV*)(struct CPartyPlayer*, struct CPartyPlayer*);
            return (org_ptr(0x1400450e0L))(this, pParticiper);
        };
        struct CPlayer* GetLootAuthor()
        {
            using org_ptr = struct CPlayer* (WINAPIV*)(struct CPartyPlayer*);
            return (org_ptr(0x140045c50L))(this);
        };
        int GetPopPartyMember()
        {
            using org_ptr = int (WINAPIV*)(struct CPartyPlayer*);
            return (org_ptr(0x140044eb0L))(this);
        };
        struct CPartyPlayer* GetPtrFromSerial(unsigned int dwWorldSerial)
        {
            using org_ptr = struct CPartyPlayer* (WINAPIV*)(struct CPartyPlayer*, unsigned int);
            return (org_ptr(0x140044f80L))(this, dwWorldSerial);
        };
        struct CPartyPlayer** GetPtrPartyMember()
        {
            using org_ptr = struct CPartyPlayer** (WINAPIV*)(struct CPartyPlayer*);
            return (org_ptr(0x140044f50L))(this);
        };
        bool InheritBoss(struct CPartyPlayer* pSuccessor)
        {
            using org_ptr = bool (WINAPIV*)(struct CPartyPlayer*, struct CPartyPlayer*);
            return (org_ptr(0x140045830L))(this, pSuccessor);
        };
        void Init(uint16_t wIndex)
        {
            using org_ptr = void (WINAPIV*)(struct CPartyPlayer*, uint16_t);
            (org_ptr(0x140044c30L))(this, wIndex);
        };
        bool InsertPartyMember(struct CPartyPlayer* pJoiner)
        {
            using org_ptr = bool (WINAPIV*)(struct CPartyPlayer*, struct CPartyPlayer*);
            return (org_ptr(0x1400452f0L))(this, pJoiner);
        };
        bool IsJoinPartyLevel(int nJoinerLevel, float fProf)
        {
            using org_ptr = bool (WINAPIV*)(struct CPartyPlayer*, int, float);
            return (org_ptr(0x140045ea0L))(this, nJoinerLevel, fProf);
        };
        bool IsPartyBoss()
        {
            using org_ptr = bool (WINAPIV*)(struct CPartyPlayer*);
            return (org_ptr(0x140044e50L))(this);
        };
        bool IsPartyLock()
        {
            using org_ptr = bool (WINAPIV*)(struct CPartyPlayer*);
            return (org_ptr(0x140044e80L))(this);
        };
        bool IsPartyMember(struct CPlayer* pkObj)
        {
            using org_ptr = bool (WINAPIV*)(struct CPartyPlayer*, struct CPlayer*);
            return (org_ptr(0x140045030L))(this, pkObj);
        };
        bool IsPartyMode()
        {
            using org_ptr = bool (WINAPIV*)(struct CPartyPlayer*);
            return (org_ptr(0x140044e30L))(this);
        };
        void PartyListInit()
        {
            using org_ptr = void (WINAPIV*)(struct CPartyPlayer*);
            (org_ptr(0x140044db0L))(this);
        };
        bool RemovePartyMember(struct CPartyPlayer* pExiter, struct CPartyPlayer** ppoutNewBoss)
        {
            using org_ptr = bool (WINAPIV*)(struct CPartyPlayer*, struct CPartyPlayer*, struct CPartyPlayer**);
            return (org_ptr(0x1400453a0L))(this, pExiter, ppoutNewBoss);
        };
        bool SetLockMode(bool bLock)
        {
            using org_ptr = bool (WINAPIV*)(struct CPartyPlayer*, bool);
            return (org_ptr(0x140045b70L))(this, bLock);
        };
        bool SetLootShareMode(char byLootShareMode)
        {
            using org_ptr = bool (WINAPIV*)(struct CPartyPlayer*, char);
            return (org_ptr(0x140045be0L))(this, byLootShareMode);
        };
        void SetNextLootAuthor()
        {
            using org_ptr = void (WINAPIV*)(struct CPartyPlayer*);
            (org_ptr(0x140045d80L))(this);
        };
    };
END_ATF_NAMESPACE
