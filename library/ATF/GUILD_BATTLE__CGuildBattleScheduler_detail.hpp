// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "GUILD_BATTLE__CGuildBattleScheduler_info.hpp"


START_ATF_NAMESPACE
    namespace GUILD_BATTLE
    {
        namespace detail
        {
            static info::GUILD_BATTLE__CGuildBattleSchedulerctor_CGuildBattleScheduler2_ptr GUILD_BATTLE__CGuildBattleSchedulerctor_CGuildBattleScheduler2_next(nullptr);
            static info::GUILD_BATTLE__CGuildBattleSchedulerctor_CGuildBattleScheduler2_clbk GUILD_BATTLE__CGuildBattleSchedulerctor_CGuildBattleScheduler2_user(nullptr);
            static info::GUILD_BATTLE__CGuildBattleSchedulerDestroy4_ptr GUILD_BATTLE__CGuildBattleSchedulerDestroy4_next(nullptr);
            static info::GUILD_BATTLE__CGuildBattleSchedulerDestroy4_clbk GUILD_BATTLE__CGuildBattleSchedulerDestroy4_user(nullptr);
            static info::GUILD_BATTLE__CGuildBattleSchedulerInit6_ptr GUILD_BATTLE__CGuildBattleSchedulerInit6_next(nullptr);
            static info::GUILD_BATTLE__CGuildBattleSchedulerInit6_clbk GUILD_BATTLE__CGuildBattleSchedulerInit6_user(nullptr);
            static info::GUILD_BATTLE__CGuildBattleSchedulerInstance8_ptr GUILD_BATTLE__CGuildBattleSchedulerInstance8_next(nullptr);
            static info::GUILD_BATTLE__CGuildBattleSchedulerInstance8_clbk GUILD_BATTLE__CGuildBattleSchedulerInstance8_user(nullptr);
            static info::GUILD_BATTLE__CGuildBattleSchedulerUpdateClearGuildBattleScheduleDayInfo10_ptr GUILD_BATTLE__CGuildBattleSchedulerUpdateClearGuildBattleScheduleDayInfo10_next(nullptr);
            static info::GUILD_BATTLE__CGuildBattleSchedulerUpdateClearGuildBattleScheduleDayInfo10_clbk GUILD_BATTLE__CGuildBattleSchedulerUpdateClearGuildBattleScheduleDayInfo10_user(nullptr);
            static info::GUILD_BATTLE__CGuildBattleSchedulerdtor_CGuildBattleScheduler14_ptr GUILD_BATTLE__CGuildBattleSchedulerdtor_CGuildBattleScheduler14_next(nullptr);
            static info::GUILD_BATTLE__CGuildBattleSchedulerdtor_CGuildBattleScheduler14_clbk GUILD_BATTLE__CGuildBattleSchedulerdtor_CGuildBattleScheduler14_user(nullptr);
            
            static void GUILD_BATTLE__CGuildBattleSchedulerctor_CGuildBattleScheduler2_wrapper(struct GUILD_BATTLE::CGuildBattleScheduler* _this)
            {
               GUILD_BATTLE__CGuildBattleSchedulerctor_CGuildBattleScheduler2_user(_this, GUILD_BATTLE__CGuildBattleSchedulerctor_CGuildBattleScheduler2_next);
            };
            static void GUILD_BATTLE__CGuildBattleSchedulerDestroy4_wrapper()
            {
               GUILD_BATTLE__CGuildBattleSchedulerDestroy4_user(GUILD_BATTLE__CGuildBattleSchedulerDestroy4_next);
            };
            static bool GUILD_BATTLE__CGuildBattleSchedulerInit6_wrapper(struct GUILD_BATTLE::CGuildBattleScheduler* _this)
            {
               return GUILD_BATTLE__CGuildBattleSchedulerInit6_user(_this, GUILD_BATTLE__CGuildBattleSchedulerInit6_next);
            };
            static struct GUILD_BATTLE::CGuildBattleScheduler* GUILD_BATTLE__CGuildBattleSchedulerInstance8_wrapper()
            {
               return GUILD_BATTLE__CGuildBattleSchedulerInstance8_user(GUILD_BATTLE__CGuildBattleSchedulerInstance8_next);
            };
            static bool GUILD_BATTLE__CGuildBattleSchedulerUpdateClearGuildBattleScheduleDayInfo10_wrapper(struct GUILD_BATTLE::CGuildBattleScheduler* _this, unsigned int dwStartSLID, unsigned int dwEndSLID)
            {
               return GUILD_BATTLE__CGuildBattleSchedulerUpdateClearGuildBattleScheduleDayInfo10_user(_this, dwStartSLID, dwEndSLID, GUILD_BATTLE__CGuildBattleSchedulerUpdateClearGuildBattleScheduleDayInfo10_next);
            };
            static void GUILD_BATTLE__CGuildBattleSchedulerdtor_CGuildBattleScheduler14_wrapper(struct GUILD_BATTLE::CGuildBattleScheduler* _this)
            {
               GUILD_BATTLE__CGuildBattleSchedulerdtor_CGuildBattleScheduler14_user(_this, GUILD_BATTLE__CGuildBattleSchedulerdtor_CGuildBattleScheduler14_next);
            };
            
            static hook_record CGuildBattleScheduler_functions[] = {
            {   (LPVOID)0x1403deda0L,
                (LPVOID *)&GUILD_BATTLE__CGuildBattleSchedulerctor_CGuildBattleScheduler2_user,
                (LPVOID *)&GUILD_BATTLE__CGuildBattleSchedulerctor_CGuildBattleScheduler2_next,
                (LPVOID)cast_pointer_function(GUILD_BATTLE__CGuildBattleSchedulerctor_CGuildBattleScheduler2_wrapper),
                (LPVOID)cast_pointer_function((void(GUILD_BATTLE::CGuildBattleScheduler::*)())&GUILD_BATTLE::CGuildBattleScheduler::ctor_CGuildBattleScheduler) },
            {   (LPVOID)0x1403dd7c0L,
                (LPVOID *)&GUILD_BATTLE__CGuildBattleSchedulerDestroy4_user,
                (LPVOID *)&GUILD_BATTLE__CGuildBattleSchedulerDestroy4_next,
                (LPVOID)cast_pointer_function(GUILD_BATTLE__CGuildBattleSchedulerDestroy4_wrapper),
                (LPVOID)cast_pointer_function((void(*)())&GUILD_BATTLE::CGuildBattleScheduler::Destroy) },
            {   (LPVOID)0x1403dd840L,
                (LPVOID *)&GUILD_BATTLE__CGuildBattleSchedulerInit6_user,
                (LPVOID *)&GUILD_BATTLE__CGuildBattleSchedulerInit6_next,
                (LPVOID)cast_pointer_function(GUILD_BATTLE__CGuildBattleSchedulerInit6_wrapper),
                (LPVOID)cast_pointer_function((bool(GUILD_BATTLE::CGuildBattleScheduler::*)())&GUILD_BATTLE::CGuildBattleScheduler::Init) },
            {   (LPVOID)0x1403dd700L,
                (LPVOID *)&GUILD_BATTLE__CGuildBattleSchedulerInstance8_user,
                (LPVOID *)&GUILD_BATTLE__CGuildBattleSchedulerInstance8_next,
                (LPVOID)cast_pointer_function(GUILD_BATTLE__CGuildBattleSchedulerInstance8_wrapper),
                (LPVOID)cast_pointer_function((struct GUILD_BATTLE::CGuildBattleScheduler*(*)())&GUILD_BATTLE::CGuildBattleScheduler::Instance) },
            {   (LPVOID)0x1403dd8b0L,
                (LPVOID *)&GUILD_BATTLE__CGuildBattleSchedulerUpdateClearGuildBattleScheduleDayInfo10_user,
                (LPVOID *)&GUILD_BATTLE__CGuildBattleSchedulerUpdateClearGuildBattleScheduleDayInfo10_next,
                (LPVOID)cast_pointer_function(GUILD_BATTLE__CGuildBattleSchedulerUpdateClearGuildBattleScheduleDayInfo10_wrapper),
                (LPVOID)cast_pointer_function((bool(GUILD_BATTLE::CGuildBattleScheduler::*)(unsigned int, unsigned int))&GUILD_BATTLE::CGuildBattleScheduler::UpdateClearGuildBattleScheduleDayInfo) },
            {   (LPVOID)0x1403dee20L,
                (LPVOID *)&GUILD_BATTLE__CGuildBattleSchedulerdtor_CGuildBattleScheduler14_user,
                (LPVOID *)&GUILD_BATTLE__CGuildBattleSchedulerdtor_CGuildBattleScheduler14_next,
                (LPVOID)cast_pointer_function(GUILD_BATTLE__CGuildBattleSchedulerdtor_CGuildBattleScheduler14_wrapper),
                (LPVOID)cast_pointer_function((void(GUILD_BATTLE::CGuildBattleScheduler::*)())&GUILD_BATTLE::CGuildBattleScheduler::dtor_CGuildBattleScheduler) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace GUILD_BATTLE
END_ATF_NAMESPACE
