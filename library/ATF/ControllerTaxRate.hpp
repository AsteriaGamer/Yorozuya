// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "ControllerTaxRateVtbl.hpp"


START_ATF_NAMESPACE
    struct ControllerTaxRate
    {
        ControllerTaxRateVtbl *vfptr;
        bool m_bInit;
        float m_fMinTaxRate;
        float m_fMaxTaxRate;
        float m_fCurTaxRate;
    public:
        ControllerTaxRate()
        {
            using org_ptr = void (WINAPIV*)(struct ControllerTaxRate*);
            (org_ptr(0x1402d96e0L))(this);
        };
        void ctor_ControllerTaxRate()
        {
            using org_ptr = void (WINAPIV*)(struct ControllerTaxRate*);
            (org_ptr(0x1402d96e0L))(this);
        };
        unsigned int calcTaxRate(unsigned int dalant)
        {
            using org_ptr = unsigned int (WINAPIV*)(struct ControllerTaxRate*, unsigned int);
            return (org_ptr(0x1402d98c0L))(this, dalant);
        };
        bool checkLimitTaxRate(float fTaxRate)
        {
            using org_ptr = bool (WINAPIV*)(struct ControllerTaxRate*, float);
            return (org_ptr(0x1402d9b80L))(this, fTaxRate);
        };
        float getCurTaxRate()
        {
            using org_ptr = float (WINAPIV*)(struct ControllerTaxRate*);
            return (org_ptr(0x1402d9950L))(this);
        };
        void setCurTaxRate(float fTaxRate)
        {
            using org_ptr = void (WINAPIV*)(struct ControllerTaxRate*, float);
            (org_ptr(0x1402d9b50L))(this, fTaxRate);
        };
        void setLimitTaxRate(float fMin, float fMax)
        {
            using org_ptr = void (WINAPIV*)(struct ControllerTaxRate*, float, float);
            (org_ptr(0x1402d9870L))(this, fMin, fMax);
        };
        ~ControllerTaxRate()
        {
            using org_ptr = void (WINAPIV*)(struct ControllerTaxRate*);
            (org_ptr(0x1402d9730L))(this);
        };
        void dtor_ControllerTaxRate()
        {
            using org_ptr = void (WINAPIV*)(struct ControllerTaxRate*);
            (org_ptr(0x1402d9730L))(this);
        };
    };
END_ATF_NAMESPACE
