// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "_100_per_random_table_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        static info::_100_per_random_tableGetRand2_ptr _100_per_random_tableGetRand2_next(nullptr);
        static info::_100_per_random_tableGetRand2_clbk _100_per_random_tableGetRand2_user(nullptr);
        static info::_100_per_random_tablector__100_per_random_table4_ptr _100_per_random_tablector__100_per_random_table4_next(nullptr);
        static info::_100_per_random_tablector__100_per_random_table4_clbk _100_per_random_tablector__100_per_random_table4_user(nullptr);
        static info::_100_per_random_tablereset6_ptr _100_per_random_tablereset6_next(nullptr);
        static info::_100_per_random_tablereset6_clbk _100_per_random_tablereset6_user(nullptr);
        
        static uint16_t _100_per_random_tableGetRand2_wrapper(struct _100_per_random_table* _this)
        {
           return _100_per_random_tableGetRand2_user(_this, _100_per_random_tableGetRand2_next);
        };
        static void _100_per_random_tablector__100_per_random_table4_wrapper(struct _100_per_random_table* _this)
        {
           _100_per_random_tablector__100_per_random_table4_user(_this, _100_per_random_tablector__100_per_random_table4_next);
        };
        static void _100_per_random_tablereset6_wrapper(struct _100_per_random_table* _this)
        {
           _100_per_random_tablereset6_user(_this, _100_per_random_tablereset6_next);
        };
        
        static hook_record _100_per_random_table_functions[] = {
        {   (LPVOID)0x1400b81d0L,
            (LPVOID *)&_100_per_random_tableGetRand2_user,
            (LPVOID *)&_100_per_random_tableGetRand2_next,
            (LPVOID)cast_pointer_function(_100_per_random_tableGetRand2_wrapper),
            (LPVOID)cast_pointer_function((uint16_t(_100_per_random_table::*)())&_100_per_random_table::GetRand) },
        {   (LPVOID)0x1400726c0L,
            (LPVOID *)&_100_per_random_tablector__100_per_random_table4_user,
            (LPVOID *)&_100_per_random_tablector__100_per_random_table4_next,
            (LPVOID)cast_pointer_function(_100_per_random_tablector__100_per_random_table4_wrapper),
            (LPVOID)cast_pointer_function((void(_100_per_random_table::*)())&_100_per_random_table::ctor__100_per_random_table) },
        {   (LPVOID)0x1400727e0L,
            (LPVOID *)&_100_per_random_tablereset6_user,
            (LPVOID *)&_100_per_random_tablereset6_next,
            (LPVOID)cast_pointer_function(_100_per_random_tablereset6_wrapper),
            (LPVOID)cast_pointer_function((void(_100_per_random_table::*)())&_100_per_random_table::reset) },
        
        };
        
    }; // static end namespace detail
END_ATF_NAMESPACE
