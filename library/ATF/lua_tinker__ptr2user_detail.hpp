// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "lua_tinker__ptr2user_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            info::lua_tinker__ptr2userctor_ptr2user5_ptr lua_tinker__ptr2userctor_ptr2user5_next(nullptr);
            info::lua_tinker__ptr2userctor_ptr2user5_clbk lua_tinker__ptr2userctor_ptr2user5_user(nullptr);
            info::lua_tinker__ptr2userdtor_ptr2user7_ptr lua_tinker__ptr2userdtor_ptr2user7_next(nullptr);
            info::lua_tinker__ptr2userdtor_ptr2user7_clbk lua_tinker__ptr2userdtor_ptr2user7_user(nullptr);
            
            void lua_tinker__ptr2userctor_ptr2user5_wrapper(struct lua_tinker::ptr2user<CMonster>* _this, struct CMonster* t)
            {
               lua_tinker__ptr2userctor_ptr2user5_user(_this, t);
            };
            void lua_tinker__ptr2userdtor_ptr2user7_wrapper(struct lua_tinker::ptr2user<CMonster>* _this)
            {
               lua_tinker__ptr2userdtor_ptr2user7_user(_this);
            };
            
            hook_record ptr2user<CMonster>_functions[] = {
            {   (LPVOID)0x14040b880L,
                (LPVOID *)&lua_tinker__ptr2userctor_ptr2user5_user,
                (LPVOID *)&lua_tinker__ptr2userctor_ptr2user5_next,
                (LPVOID)cast_pointer_function(lua_tinker__ptr2userctor_ptr2user5_wrapper),
                (LPVOID)cast_pointer_function((void(lua_tinker::ptr2user<CMonster>::*)(struct CMonster*))&lua_tinker::ptr2user<CMonster>::ctor_ptr2user) },
            {   (LPVOID)0x14040bac0L,
                (LPVOID *)&lua_tinker__ptr2userdtor_ptr2user7_user,
                (LPVOID *)&lua_tinker__ptr2userdtor_ptr2user7_next,
                (LPVOID)cast_pointer_function(lua_tinker__ptr2userdtor_ptr2user7_wrapper),
                (LPVOID)cast_pointer_function((void(lua_tinker::ptr2user<CMonster>::*)())&lua_tinker::ptr2user<CMonster>::dtor_ptr2user) },
            
            };
            
        }; // end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__ptr2user_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            info::lua_tinker__ptr2userctor_ptr2user5_ptr lua_tinker__ptr2userctor_ptr2user5_next(nullptr);
            info::lua_tinker__ptr2userctor_ptr2user5_clbk lua_tinker__ptr2userctor_ptr2user5_user(nullptr);
            info::lua_tinker__ptr2userdtor_ptr2user7_ptr lua_tinker__ptr2userdtor_ptr2user7_next(nullptr);
            info::lua_tinker__ptr2userdtor_ptr2user7_clbk lua_tinker__ptr2userdtor_ptr2user7_user(nullptr);
            
            void lua_tinker__ptr2userctor_ptr2user5_wrapper(struct lua_tinker::ptr2user<CLuaSignalReActor>* _this, struct CLuaSignalReActor* t)
            {
               lua_tinker__ptr2userctor_ptr2user5_user(_this, t);
            };
            void lua_tinker__ptr2userdtor_ptr2user7_wrapper(struct lua_tinker::ptr2user<CLuaSignalReActor>* _this)
            {
               lua_tinker__ptr2userdtor_ptr2user7_user(_this);
            };
            
            hook_record ptr2user<CLuaSignalReActor>_functions[] = {
            {   (LPVOID)0x14040b7a0L,
                (LPVOID *)&lua_tinker__ptr2userctor_ptr2user5_user,
                (LPVOID *)&lua_tinker__ptr2userctor_ptr2user5_next,
                (LPVOID)cast_pointer_function(lua_tinker__ptr2userctor_ptr2user5_wrapper),
                (LPVOID)cast_pointer_function((void(lua_tinker::ptr2user<CLuaSignalReActor>::*)(struct CLuaSignalReActor*))&lua_tinker::ptr2user<CLuaSignalReActor>::ctor_ptr2user) },
            {   (LPVOID)0x14040ba40L,
                (LPVOID *)&lua_tinker__ptr2userdtor_ptr2user7_user,
                (LPVOID *)&lua_tinker__ptr2userdtor_ptr2user7_next,
                (LPVOID)cast_pointer_function(lua_tinker__ptr2userdtor_ptr2user7_wrapper),
                (LPVOID)cast_pointer_function((void(lua_tinker::ptr2user<CLuaSignalReActor>::*)())&lua_tinker::ptr2user<CLuaSignalReActor>::dtor_ptr2user) },
            
            };
            
        }; // end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__ptr2user_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            info::lua_tinker__ptr2userctor_ptr2user5_ptr lua_tinker__ptr2userctor_ptr2user5_next(nullptr);
            info::lua_tinker__ptr2userctor_ptr2user5_clbk lua_tinker__ptr2userctor_ptr2user5_user(nullptr);
            info::lua_tinker__ptr2userdtor_ptr2user7_ptr lua_tinker__ptr2userdtor_ptr2user7_next(nullptr);
            info::lua_tinker__ptr2userdtor_ptr2user7_clbk lua_tinker__ptr2userdtor_ptr2user7_user(nullptr);
            
            void lua_tinker__ptr2userctor_ptr2user5_wrapper(struct lua_tinker::ptr2user<CLuaEventNode>* _this, struct CLuaEventNode* t)
            {
               lua_tinker__ptr2userctor_ptr2user5_user(_this, t);
            };
            void lua_tinker__ptr2userdtor_ptr2user7_wrapper(struct lua_tinker::ptr2user<CLuaEventNode>* _this)
            {
               lua_tinker__ptr2userdtor_ptr2user7_user(_this);
            };
            
            hook_record ptr2user<CLuaEventNode>_functions[] = {
            {   (LPVOID)0x140404cb0L,
                (LPVOID *)&lua_tinker__ptr2userctor_ptr2user5_user,
                (LPVOID *)&lua_tinker__ptr2userctor_ptr2user5_next,
                (LPVOID)cast_pointer_function(lua_tinker__ptr2userctor_ptr2user5_wrapper),
                (LPVOID)cast_pointer_function((void(lua_tinker::ptr2user<CLuaEventNode>::*)(struct CLuaEventNode*))&lua_tinker::ptr2user<CLuaEventNode>::ctor_ptr2user) },
            {   (LPVOID)0x140404d90L,
                (LPVOID *)&lua_tinker__ptr2userdtor_ptr2user7_user,
                (LPVOID *)&lua_tinker__ptr2userdtor_ptr2user7_next,
                (LPVOID)cast_pointer_function(lua_tinker__ptr2userdtor_ptr2user7_wrapper),
                (LPVOID)cast_pointer_function((void(lua_tinker::ptr2user<CLuaEventNode>::*)())&lua_tinker::ptr2user<CLuaEventNode>::dtor_ptr2user) },
            
            };
            
        }; // end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__ptr2user_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            info::lua_tinker__ptr2userctor_ptr2user5_ptr lua_tinker__ptr2userctor_ptr2user5_next(nullptr);
            info::lua_tinker__ptr2userctor_ptr2user5_clbk lua_tinker__ptr2userctor_ptr2user5_user(nullptr);
            info::lua_tinker__ptr2userdtor_ptr2user7_ptr lua_tinker__ptr2userdtor_ptr2user7_next(nullptr);
            info::lua_tinker__ptr2userdtor_ptr2user7_clbk lua_tinker__ptr2userdtor_ptr2user7_user(nullptr);
            
            void lua_tinker__ptr2userctor_ptr2user5_wrapper(struct lua_tinker::ptr2user<CLuaEventMgr>* _this, struct CLuaEventMgr* t)
            {
               lua_tinker__ptr2userctor_ptr2user5_user(_this, t);
            };
            void lua_tinker__ptr2userdtor_ptr2user7_wrapper(struct lua_tinker::ptr2user<CLuaEventMgr>* _this)
            {
               lua_tinker__ptr2userdtor_ptr2user7_user(_this);
            };
            
            hook_record ptr2user<CLuaEventMgr>_functions[] = {
            {   (LPVOID)0x14040b810L,
                (LPVOID *)&lua_tinker__ptr2userctor_ptr2user5_user,
                (LPVOID *)&lua_tinker__ptr2userctor_ptr2user5_next,
                (LPVOID)cast_pointer_function(lua_tinker__ptr2userctor_ptr2user5_wrapper),
                (LPVOID)cast_pointer_function((void(lua_tinker::ptr2user<CLuaEventMgr>::*)(struct CLuaEventMgr*))&lua_tinker::ptr2user<CLuaEventMgr>::ctor_ptr2user) },
            {   (LPVOID)0x14040ba80L,
                (LPVOID *)&lua_tinker__ptr2userdtor_ptr2user7_user,
                (LPVOID *)&lua_tinker__ptr2userdtor_ptr2user7_next,
                (LPVOID)cast_pointer_function(lua_tinker__ptr2userdtor_ptr2user7_wrapper),
                (LPVOID)cast_pointer_function((void(lua_tinker::ptr2user<CLuaEventMgr>::*)())&lua_tinker::ptr2user<CLuaEventMgr>::dtor_ptr2user) },
            
            };
            
        }; // end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__ptr2user_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            info::lua_tinker__ptr2userctor_ptr2user5_ptr lua_tinker__ptr2userctor_ptr2user5_next(nullptr);
            info::lua_tinker__ptr2userctor_ptr2user5_clbk lua_tinker__ptr2userctor_ptr2user5_user(nullptr);
            info::lua_tinker__ptr2userdtor_ptr2user7_ptr lua_tinker__ptr2userdtor_ptr2user7_next(nullptr);
            info::lua_tinker__ptr2userdtor_ptr2user7_clbk lua_tinker__ptr2userdtor_ptr2user7_user(nullptr);
            
            void lua_tinker__ptr2userctor_ptr2user5_wrapper(struct lua_tinker::ptr2user<CLuaScript>* _this, struct CLuaScript* t)
            {
               lua_tinker__ptr2userctor_ptr2user5_user(_this, t);
            };
            void lua_tinker__ptr2userdtor_ptr2user7_wrapper(struct lua_tinker::ptr2user<CLuaScript>* _this)
            {
               lua_tinker__ptr2userdtor_ptr2user7_user(_this);
            };
            
            hook_record ptr2user<CLuaScript>_functions[] = {
            {   (LPVOID)0x1404031d0L,
                (LPVOID *)&lua_tinker__ptr2userctor_ptr2user5_user,
                (LPVOID *)&lua_tinker__ptr2userctor_ptr2user5_next,
                (LPVOID)cast_pointer_function(lua_tinker__ptr2userctor_ptr2user5_wrapper),
                (LPVOID)cast_pointer_function((void(lua_tinker::ptr2user<CLuaScript>::*)(struct CLuaScript*))&lua_tinker::ptr2user<CLuaScript>::ctor_ptr2user) },
            {   (LPVOID)0x140403380L,
                (LPVOID *)&lua_tinker__ptr2userdtor_ptr2user7_user,
                (LPVOID *)&lua_tinker__ptr2userdtor_ptr2user7_next,
                (LPVOID)cast_pointer_function(lua_tinker__ptr2userdtor_ptr2user7_wrapper),
                (LPVOID)cast_pointer_function((void(lua_tinker::ptr2user<CLuaScript>::*)())&lua_tinker::ptr2user<CLuaScript>::dtor_ptr2user) },
            
            };
            
        }; // end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
