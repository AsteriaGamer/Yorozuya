// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CMyTimer.hpp"
#include "CRadarItemMgr.hpp"
#include "CUserDBVtbl.hpp"
#include "_AVATOR_DATA.hpp"
#include "_BILLING_INFO.hpp"
#include "_CLID.hpp"
#include "_CUTTING_DB_BASE.hpp"
#include "_DB_QRY_SYN_DATA.hpp"
#include "_EXIT_ALTER_PARAM.hpp"
#include "_GLBID.hpp"
#include "_ITEMCOMBINE_DB_BASE.hpp"
#include "_NOT_ARRANGED_AVATOR_DB.hpp"
#include "_QUEST_DB_BASE.hpp"
#include "_REGED.hpp"
#include "_REGED_AVATOR_DB.hpp"
#include "_STORAGE_LIST.hpp"
#include "_SYNC_STATE.hpp"
#include "_SYSTEMTIME.hpp"
#include "_UNIT_DB_BASE.hpp"


START_ATF_NAMESPACE
    #pragma pack(push, 8)
    struct CUserDB
    {
        CUserDBVtbl *vfptr;
        _GLBID m_gidGlobal;
        _CLID m_idWorld;
        unsigned int m_dwIP;
        unsigned int m_dwTotalPlayMin;
        char m_szAccountID[13];
        unsigned int m_dwAccountSerial;
        unsigned int m_ipAddress;
        char m_byUserDgr;
        char m_bySubDgr;
        char m_wszAvatorName[17];
        char m_aszAvatorName[17];
        unsigned int m_dwSerial;
        char m_byNameLen;
        _REGED m_RegedList[3];
        _AVATOR_DATA m_AvatorData;
        _AVATOR_DATA m_AvatorData_bk;
        _NOT_ARRANGED_AVATOR_DB m_NotArrangedChar[50];
        unsigned int m_dwArrangePassCase0[50];
        bool m_bActive;
        bool m_bField;
        bool m_bWndFullMode;
        bool m_bDBWaitState;
        _DB_QRY_SYN_DATA *m_pDBPushData;
        bool m_bChatLock;
        _SYNC_STATE m_ss;
        unsigned int m_dwMessengerKey[4];
        unsigned int m_dwOperLobbyTime;
        bool m_bCreateTrunkFree;
        CMyTimer m_tmrCheckPlayMin;
        bool m_bDataUpdate;
        unsigned int m_dwTermContSaveTime;
        unsigned int m_dwLastContSaveTime;
        bool m_bNoneUpdateData;
        _BILLING_INFO m_BillingInfo;
        bool m_bBillingNoLogout;
        int m_nTrans;
        CRadarItemMgr m_RadarItemMgr;
        char m_byUILock;
        bool m_bUILock_Updated;
        char m_byUILock_InitFailCnt;
        char m_byUILock_FailCnt;
        char m_szUILock_PW[13];
        char m_szAccount_PW[13];
        char m_byUILock_HintIndex;
        char m_uszUILock_HintAnswer[17];
        char m_byUILock_InitFindPassFailCount;
        char m_byUILockFindPassFailCount;
        unsigned int m_dwRequestMoveCharacterSerialList[3];
        unsigned int m_dwTournamentCharacterSerialList[3];
        char m_szLobbyHistoryFileName[64];
    public:
        void Alive_Char_Complete(char byRetCode, char byCase, unsigned int dwSerial, struct _REGED* pAliveAvator)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, char, char, unsigned int, struct _REGED*);
            (org_ptr(0x14011afc0L))(this, byRetCode, byCase, dwSerial, pAliveAvator);
        };
        bool Alive_Char_Request(char byCase, unsigned int dwSerial, char* pwszName, char bySlotIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char, unsigned int, char*, char);
            return (org_ptr(0x14011abf0L))(this, byCase, dwSerial, pwszName, bySlotIndex);
        };
        CUserDB()
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*);
            (org_ptr(0x14010fb90L))(this);
        };
        void ctor_CUserDB()
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*);
            (org_ptr(0x14010fb90L))(this);
        };
        void CalcRadarDelay()
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*);
            (org_ptr(0x14011b730L))(this);
        };
        static bool CheckDQSLoadCharacterData(struct _AVATOR_DATA* pData)
        {
            using org_ptr = bool (WINAPIV*)(struct _AVATOR_DATA*);
            return (org_ptr(0x140118860L))(pData);
        };
        void ClearBillingData()
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*);
            (org_ptr(0x140118090L))(this);
        };
        void Cont_UserSave_Complete(char byResult, struct _AVATOR_DATA* pAvatorData)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, char, struct _AVATOR_DATA*);
            (org_ptr(0x1401141c0L))(this, byResult, pAvatorData);
        };
        static bool DataValidCheckRevise(struct _AVATOR_DATA* pData, bool* pDataUpdated)
        {
            using org_ptr = bool (WINAPIV*)(struct _AVATOR_DATA*, bool*);
            return (org_ptr(0x140118940L))(pData, pDataUpdated);
        };
        void DelPostData(unsigned int dwIndex)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, unsigned int);
            (org_ptr(0x140117be0L))(this, dwIndex);
        };
        void Delete_Char_Complete(char byRetCode, char bySlotIndex)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, char, char);
            (org_ptr(0x1401124d0L))(this, byRetCode, bySlotIndex);
        };
        bool Delete_Char_Request(char bySlotIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char);
            return (org_ptr(0x140112230L))(this, bySlotIndex);
        };
        void DummyCreate(unsigned int dwSerial)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, unsigned int);
            (org_ptr(0x140110550L))(this, dwSerial);
        };
        bool Enter_Account(unsigned int dwAccountSerial, unsigned int dwIP, unsigned int dwProtocolVer, unsigned int* pdwMasterKey)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, unsigned int, unsigned int, unsigned int, unsigned int*);
            return (org_ptr(0x1401105b0L))(this, dwAccountSerial, dwIP, dwProtocolVer, pdwMasterKey);
        };
        void Exit_Account_Complete(char byRetCode)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, char);
            (org_ptr(0x1401113e0L))(this, byRetCode);
        };
        void Exit_Account_Request()
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*);
            (org_ptr(0x140111020L))(this);
        };
        bool FirstSettingData()
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*);
            return (org_ptr(0x14011a600L))(this);
        };
        void ForceCloseCommand(char byKickType, unsigned int dwPushIP, bool bSlow, char* pszCause)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, char, unsigned int, bool, char*);
            (org_ptr(0x140110350L))(this, byKickType, dwPushIP, bSlow, pszCause);
        };
        unsigned int GetActPoint(char byCode)
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CUserDB*, char);
            return (org_ptr(0x14007b850L))(this, byCode);
        };
        int GetBillingType()
        {
            using org_ptr = int (WINAPIV*)(struct CUserDB*);
            return (org_ptr(0x14007da20L))(this);
        };
        unsigned int* GetPtrActPoint()
        {
            using org_ptr = unsigned int* (WINAPIV*)(struct CUserDB*);
            return (org_ptr(0x1400f7800L))(this);
        };
        void Inform_For_Exit_By_FireguardBlock()
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*);
            (org_ptr(0x1401114a0L))(this);
        };
        void Init(unsigned int dwIndex)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, unsigned int);
            (org_ptr(0x140110030L))(this, dwIndex);
        };
        bool InitClass(char* pszClassCode)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char*);
            return (org_ptr(0x1401160e0L))(this, pszClassCode);
        };
        void Insert_Char_Complete(char byRetCode, struct _REGED_AVATOR_DB* pInsertData)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, char, struct _REGED_AVATOR_DB*);
            (org_ptr(0x1401120e0L))(this, byRetCode, pInsertData);
        };
        bool Insert_Char_Request(char* pwszCharName, char bySlotIndex, char byRaceSexCode, char* pszClassCode, unsigned int dwBaseShape)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char*, char, char, char*, unsigned int);
            return (org_ptr(0x140111c90L))(this, pwszCharName, bySlotIndex, byRaceSexCode, pszClassCode, dwBaseShape);
        };
        struct _AVATOR_DATA* IsContPushBefore()
        {
            using org_ptr = struct _AVATOR_DATA* (WINAPIV*)(struct CUserDB*);
            return (org_ptr(0x140110ec0L))(this);
        };
        char IsExistRequestMoveCharacterList(unsigned int dwCharSerial)
        {
            using org_ptr = char (WINAPIV*)(struct CUserDB*, unsigned int);
            return (org_ptr(0x14011bae0L))(this, dwCharSerial);
        };
        bool IsReturnPostUpdate()
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*);
            return (org_ptr(0x140117a50L))(this);
        };
        void Lobby_Char_Complete(char byRetCode)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, char);
            (org_ptr(0x140113850L))(this, byRetCode);
        };
        bool Lobby_Char_Request()
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*);
            return (org_ptr(0x140113500L))(this);
        };
        static void OnLoop_Static()
        {
            using org_ptr = void (WINAPIV*)();
            (org_ptr(0x14010fff0L))();
        };
        void ParamInit()
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*);
            (org_ptr(0x1401100a0L))(this);
        };
        static void ReRangeClientIndex(struct _AVATOR_DATA* pData)
        {
            using org_ptr = void (WINAPIV*)(struct _AVATOR_DATA*);
            (org_ptr(0x140119ed0L))(pData);
        };
        void Reged_Char_Complete(char byRetCode, struct _REGED* pRegedList, struct _NOT_ARRANGED_AVATOR_DB* pArrangedList)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, char, struct _REGED*, struct _NOT_ARRANGED_AVATOR_DB*);
            (org_ptr(0x140111760L))(this, byRetCode, pRegedList, pArrangedList);
        };
        bool Reged_Char_Request()
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*);
            return (org_ptr(0x140111580L))(this);
        };
        void Select_Char_Complete(char byRetCode, struct _AVATOR_DATA* pLoadData, bool* pbAddItem, unsigned int dwAddDalant, unsigned int dwAddGold, unsigned int dwCheckSum, bool* pbTrunkAddItem, char byTrunkOldSlot, long double dTrunkOldDalant, long double dTrunkOldGold, bool bCreateTrunkFree, bool* pbExtTrunkAddItem, char byExtTrunkOldSlot)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, char, struct _AVATOR_DATA*, bool*, unsigned int, unsigned int, unsigned int, bool*, char, long double, long double, bool, bool*, char);
            (org_ptr(0x1401129c0L))(this, byRetCode, pLoadData, pbAddItem, dwAddDalant, dwAddGold, dwCheckSum, pbTrunkAddItem, byTrunkOldSlot, dTrunkOldDalant, dTrunkOldGold, bCreateTrunkFree, pbExtTrunkAddItem, byExtTrunkOldSlot);
        };
        bool Select_Char_Request(char bySlotIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char);
            return (org_ptr(0x1401125e0L))(this, bySlotIndex);
        };
        void SendMsgAccount_UILockRefresh_Update()
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*);
            (org_ptr(0x140118720L))(this);
        };
        void SendMsg_BillingInfo()
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*);
            (org_ptr(0x140118270L))(this);
        };
        void SendMsg_Inform_UILock()
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*);
            (org_ptr(0x140118650L))(this);
        };
        void SetActPoint(char byCode, unsigned int dwLeftPoint)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, char, unsigned int);
            (org_ptr(0x14011be90L))(this, byCode, dwLeftPoint);
        };
        void SetBillingData(struct _BILLING_INFO* pBillingInfo)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, struct _BILLING_INFO*);
            (org_ptr(0x1401180e0L))(this, pBillingInfo);
        };
        void SetBillingData(char* szCMSCode, int16_t iType, int lRemainTime, struct _SYSTEMTIME* pstEndDate)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, char*, int16_t, int, struct _SYSTEMTIME*);
            (org_ptr(0x140118150L))(this, szCMSCode, iType, lRemainTime, pstEndDate);
        };
        void SetBillingNoLogout(bool bNoLogout)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, bool);
            (org_ptr(0x14007bf80L))(this, bNoLogout);
        };
        void SetChatLock(bool bLock)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, bool);
            (org_ptr(0x1401104a0L))(this, bLock);
        };
        void SetDBPostData(int n, unsigned int dwSerial, int nNumber, char byState, int nKey, uint64_t dwDur, unsigned int dwUpt, unsigned int dwGold, bool bUpdateIndex, uint64_t lnUID)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, int, unsigned int, int, char, int, uint64_t, unsigned int, unsigned int, bool, uint64_t);
            (org_ptr(0x1401174d0L))(this, n, dwSerial, nNumber, byState, nKey, dwDur, dwUpt, dwGold, bUpdateIndex, lnUID);
        };
        void SetNewDBPostData(int n, unsigned int dwSerial, int nNumber, char byState, char* wszSendName, char* wszRecvName, char* wszTitle, char* wszContent, int nKey, uint64_t dwDur, unsigned int dwUpt, unsigned int dwGold, uint64_t lnUID)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, int, unsigned int, int, char, char*, char*, char*, char*, int, uint64_t, unsigned int, unsigned int, uint64_t);
            (org_ptr(0x1401176c0L))(this, n, dwSerial, nNumber, byState, wszSendName, wszRecvName, wszTitle, wszContent, nKey, dwDur, dwUpt, dwGold, lnUID);
        };
        void SetRadarDelay(unsigned int dwDelay)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, unsigned int);
            (org_ptr(0x14011b700L))(this, dwDelay);
        };
        void SetRemainTime(int lRemainTime)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, int);
            (org_ptr(0x14028db40L))(this, lRemainTime);
        };
        void SetWorldCLID(unsigned int dwSerial, unsigned int* pipAddr)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, unsigned int, unsigned int*);
            (org_ptr(0x1401102a0L))(this, dwSerial, pipAddr);
        };
        bool Setting_Class(char* pszClassCode)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char*);
            return (org_ptr(0x140118010L))(this, pszClassCode);
        };
        void StartFieldMode()
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*);
            (org_ptr(0x140110330L))(this);
        };
        void TotalPlayMinCheck()
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*);
            (org_ptr(0x140113ac0L))(this);
        };
        void UILockInfo_Init(char* pMsg)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, char*);
            (org_ptr(0x140118340L))(this, pMsg);
        };
        void UILockInfo_Update(char* pMsg)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, char*);
            (org_ptr(0x1401184d0L))(this, pMsg);
        };
        bool UpdateContUserSave(bool bDirect)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, bool);
            return (org_ptr(0x140113df0L))(this, bDirect);
        };
        bool Update_AddBuddy(char bySlotIndex, unsigned int dwAdderSerial, char* pwszAdderName)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char, unsigned int, char*);
            return (org_ptr(0x140116390L))(this, bySlotIndex, dwAdderSerial, pwszAdderName);
        };
        bool Update_AlterPvPCashBag(long double dNewPoint)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, long double);
            return (org_ptr(0x140115fc0L))(this, dNewPoint);
        };
        bool Update_AlterPvPPoint(long double dNewPoint)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, long double);
            return (org_ptr(0x140115f80L))(this, dNewPoint);
        };
        bool Update_AutoTradeAllClear()
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*);
            return (org_ptr(0x140116ec0L))(this);
        };
        bool Update_BagNum(char bagnum)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char);
            return (org_ptr(0x140116480L))(this, bagnum);
        };
        bool Update_Bind(char* pszMapCode, char* pDummyCode, bool bUpdate)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char*, char*, bool);
            return (org_ptr(0x1401162f0L))(this, pszMapCode, pDummyCode, bUpdate);
        };
        void Update_BossCryMsg(char bySlot, char* pwszCryMsg)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, char, char*);
            (org_ptr(0x14011b7f0L))(this, bySlot, pwszCryMsg);
        };
        bool Update_Class(char* pszClassCode, char byHistoryRecordNum, uint16_t wHistoryClassIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char*, char, uint16_t);
            return (org_ptr(0x140116000L))(this, pszClassCode, byHistoryRecordNum, wHistoryClassIndex);
        };
        bool Update_CombineExResult_Pop()
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*);
            return (org_ptr(0x1401171b0L))(this);
        };
        bool Update_CombineExResult_Push(struct _ITEMCOMBINE_DB_BASE* pItemCombineDB_IN)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, struct _ITEMCOMBINE_DB_BASE*);
            return (org_ptr(0x140117140L))(this, pItemCombineDB_IN);
        };
        bool Update_CopyAll(struct _AVATOR_DATA* pSrc)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, struct _AVATOR_DATA*);
            return (org_ptr(0x140117e30L))(this, pSrc);
        };
        bool Update_CuttingEmpty()
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*);
            return (org_ptr(0x140116800L))(this);
        };
        bool Update_CuttingPush(char resnum, struct _CUTTING_DB_BASE::_LIST* plist)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char, struct _CUTTING_DB_BASE::_LIST*);
            return (org_ptr(0x140116560L))(this, resnum, plist);
        };
        bool Update_CuttingTrans(uint16_t wResItemIndex, uint16_t wLeftAmt)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, uint16_t, uint16_t);
            return (org_ptr(0x1401166a0L))(this, wResItemIndex, wLeftAmt);
        };
        bool Update_DelBuddy(char bySlotIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char);
            return (org_ptr(0x140116420L))(this, bySlotIndex);
        };
        bool Update_DelPost(unsigned int dwSerial, int nIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, unsigned int, int);
            return (org_ptr(0x140117b00L))(this, dwSerial, nIndex);
        };
        bool Update_Exp(long double exp)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, long double);
            return (org_ptr(0x140115f00L))(this, exp);
        };
        bool Update_ExtTrunkSlotNum(char byExtSlotNum)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char);
            return (org_ptr(0x140116f70L))(this, byExtSlotNum);
        };
        bool Update_ItemAdd(char storage, char slot, struct _STORAGE_LIST::_db_con* pItem, bool bUpdate)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char, char, struct _STORAGE_LIST::_db_con*, bool);
            return (org_ptr(0x140114350L))(this, storage, slot, pItem, bUpdate);
        };
        bool Update_ItemDelete(char storage, char slot, bool bUpdate)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char, char, bool);
            return (org_ptr(0x140114850L))(this, storage, slot, bUpdate);
        };
        bool Update_ItemDur(char storage, char slot, uint64_t amount, bool bUpdate)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char, char, uint64_t, bool);
            return (org_ptr(0x140114aa0L))(this, storage, slot, amount, bUpdate);
        };
        bool Update_ItemSlot(char storage, char slot, char clientpos)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char, char, char);
            return (org_ptr(0x140115800L))(this, storage, slot, clientpos);
        };
        bool Update_ItemUpgrade(char storage, char slot, unsigned int upg, bool bUpdate)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char, char, unsigned int, bool);
            return (org_ptr(0x140114f10L))(this, storage, slot, upg, bUpdate);
        };
        void Update_LastAttBuff(bool bSet)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, bool);
            (org_ptr(0x14007e100L))(this, bSet);
        };
        bool Update_Level(char lv, long double exp)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char, long double);
            return (org_ptr(0x140115d60L))(this, lv, exp);
        };
        bool Update_LinkBoardLock(char byLBLock)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char);
            return (org_ptr(0x140115c40L))(this, byLBLock);
        };
        bool Update_LinkBoardSlot(char bySlot, char byLinkCode, uint16_t wIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char, char, uint16_t);
            return (org_ptr(0x140115b90L))(this, bySlot, byLinkCode, wIndex);
        };
        bool Update_LossExp(long double dLossExp)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, long double);
            return (org_ptr(0x140115f40L))(this, dLossExp);
        };
        bool Update_Macro(char* pBuf)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char*);
            return (org_ptr(0x140117200L))(this, pBuf);
        };
        bool Update_Map(char map, float* pos)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char, float*);
            return (org_ptr(0x140116240L))(this, map, pos);
        };
        void Update_MaxLevel(char byMaxLevel)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, char);
            (org_ptr(0x14011b850L))(this, byMaxLevel);
        };
        bool Update_Money(unsigned int dalant, unsigned int gold)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, unsigned int, unsigned int);
            return (org_ptr(0x1401161f0L))(this, dalant, gold);
        };
        bool Update_NPCQuestHistory(char byIndex, struct _QUEST_DB_BASE::_NPC_QUEST_HISTORY* pHisData)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char, struct _QUEST_DB_BASE::_NPC_QUEST_HISTORY*);
            return (org_ptr(0x14011b880L))(this, byIndex, pHisData);
        };
        bool Update_Param(struct _EXIT_ALTER_PARAM* pCon)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, struct _EXIT_ALTER_PARAM*);
            return (org_ptr(0x140116990L))(this, pCon);
        };
        bool Update_PlayTime(unsigned int dwTotalTimeMin)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, unsigned int);
            return (org_ptr(0x140116960L))(this, dwTotalTimeMin);
        };
        void Update_Post(int n, unsigned int dwSerial, int nNumber, char byState, int nKey, uint64_t dwDur, unsigned int dwUpt, unsigned int dwGold, uint64_t lnUID)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, int, unsigned int, int, char, int, uint64_t, unsigned int, unsigned int, uint64_t);
            (org_ptr(0x140117900L))(this, n, dwSerial, nNumber, byState, nKey, dwDur, dwUpt, dwGold, lnUID);
        };
        void Update_PotionNextUseTime(char byPotionClass, unsigned int dwNextUseTime)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, char, unsigned int);
            (org_ptr(0x14011ba90L))(this, byPotionClass, dwNextUseTime);
        };
        void Update_PvpPointLeak(long double dValue)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, long double);
            (org_ptr(0x14011ba60L))(this, dValue);
        };
        bool Update_QuestDelete(char bySlotIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char);
            return (org_ptr(0x140115620L))(this, bySlotIndex);
        };
        bool Update_QuestInsert(char bySlotIndex, struct _QUEST_DB_BASE::_LIST* pSlotData)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char, struct _QUEST_DB_BASE::_LIST*);
            return (org_ptr(0x140115530L))(this, bySlotIndex, pSlotData);
        };
        bool Update_QuestUpdate(char bySlotIndex, struct _QUEST_DB_BASE::_LIST* pSlotData, bool bUpdate)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char, struct _QUEST_DB_BASE::_LIST*, bool);
            return (org_ptr(0x140115700L))(this, bySlotIndex, pSlotData, bUpdate);
        };
        bool Update_RaceVoteInfoInit()
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*);
            return (org_ptr(0x14011bb90L))(this);
        };
        void Update_ReturnPost(unsigned int dwSerial)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, unsigned int);
            (org_ptr(0x140117a80L))(this, dwSerial);
        };
        bool Update_SFContDelete(char byContCode, char bySlotIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char, char);
            return (org_ptr(0x140116c30L))(this, byContCode, bySlotIndex);
        };
        bool Update_SFContInsert(char byContCode, char bySlotIndex, char byEffectCode, uint16_t wEffectIndex, char byLv, uint16_t wDurSec)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char, char, char, uint16_t, char, uint16_t);
            return (org_ptr(0x140116ad0L))(this, byContCode, bySlotIndex, byEffectCode, wEffectIndex, byLv, wDurSec);
        };
        bool Update_SFContUpdate(char byContCode, char bySlotIndex, uint16_t wTime, bool bUpdate)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char, char, uint16_t, bool);
            return (org_ptr(0x140116d80L))(this, byContCode, bySlotIndex, wTime, bUpdate);
        };
        bool Update_StartNPCQuestHistory(char byIndex, struct _QUEST_DB_BASE::_START_NPC_QUEST_HISTORY* pHisData)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char, struct _QUEST_DB_BASE::_START_NPC_QUEST_HISTORY*);
            return (org_ptr(0x14011b920L))(this, byIndex, pHisData);
        };
        bool Update_Stat(char byStatIndex, unsigned int dwNewCum, bool bUpdate)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char, unsigned int, bool);
            return (org_ptr(0x140116850L))(this, byStatIndex, dwNewCum, bUpdate);
        };
        bool Update_TakeLastCriTicket(unsigned int dwCriTicket)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, unsigned int);
            return (org_ptr(0x140117e00L))(this, dwCriTicket);
        };
        bool Update_TakeLastMentalTicket(unsigned int dwMentalTicket)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, unsigned int);
            return (org_ptr(0x140117dd0L))(this, dwMentalTicket);
        };
        bool Update_TrunkHint(char byHintIndex, char* pwszHintAnswer)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char, char*);
            return (org_ptr(0x1401170c0L))(this, byHintIndex, pwszHintAnswer);
        };
        bool Update_TrunkMoney(long double dGold, long double dDalant)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, long double, long double);
            return (org_ptr(0x140117040L))(this, dGold, dDalant);
        };
        bool Update_TrunkPassword(char* pwszPassword)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char*);
            return (org_ptr(0x140116fd0L))(this, pwszPassword);
        };
        bool Update_TrunkSlotNum(char bySlotNum)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char);
            return (org_ptr(0x140116f10L))(this, bySlotNum);
        };
        bool Update_UnitData(char bySlotIndex, struct _UNIT_DB_BASE::_LIST* pData)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char, struct _UNIT_DB_BASE::_LIST*);
            return (org_ptr(0x140115440L))(this, bySlotIndex, pData);
        };
        bool Update_UnitDelete(char bySlotIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char);
            return (org_ptr(0x140115360L))(this, bySlotIndex);
        };
        bool Update_UnitInsert(char bySlotIndex, struct _UNIT_DB_BASE::_LIST* pSlotData)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char, struct _UNIT_DB_BASE::_LIST*);
            return (org_ptr(0x140115270L))(this, bySlotIndex, pSlotData);
        };
        bool Update_UserFatigue(unsigned int dwFatigue)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, unsigned int);
            return (org_ptr(0x14011bdc0L))(this, dwFatigue);
        };
        bool Update_UserGetScaner(uint16_t wScanerCnt, uint16_t wBattleTime)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, uint16_t, uint16_t);
            return (org_ptr(0x14011bc50L))(this, wScanerCnt, wBattleTime);
        };
        bool Update_UserPlayTime(unsigned int dwAccPlayTime)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, unsigned int);
            return (org_ptr(0x14011bc10L))(this, dwAccPlayTime);
        };
        bool Update_UserTLStatus(char byStatus)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char);
            return (org_ptr(0x14011bdf0L))(this, byStatus);
        };
        bool Update_UserVoteData()
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*);
            return (org_ptr(0x14011bd80L))(this);
        };
        bool Update_User_Action_Point(char byActionCode, unsigned int dwPoint)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, char, unsigned int);
            return (org_ptr(0x14011be20L))(this, byActionCode, dwPoint);
        };
        bool Update_WindowInfo(unsigned int* pdwSkill, unsigned int* pdwForce, unsigned int* pdwChar, unsigned int* pdwAnimus, unsigned int dwInven, unsigned int* pdwInvenBag)
        {
            using org_ptr = bool (WINAPIV*)(struct CUserDB*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int*);
            return (org_ptr(0x140115c70L))(this, pdwSkill, pdwForce, pdwChar, pdwAnimus, dwInven, pdwInvenBag);
        };
        void WriteLog_ChangeClassAfterInitClass(char byType, char* szPrevClass)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, char, char*);
            (org_ptr(0x14011b280L))(this, byType, szPrevClass);
        };
        void WriteLog_CharSelect()
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*);
            (org_ptr(0x140113c00L))(this);
        };
        void WriteLog_Level(char byLv)
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*, char);
            (org_ptr(0x140113b40L))(this, byLv);
        };
        ~CUserDB()
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*);
            (org_ptr(0x14010fed0L))(this);
        };
        void dtor_CUserDB()
        {
            using org_ptr = void (WINAPIV*)(struct CUserDB*);
            (org_ptr(0x14010fed0L))(this);
        };
    };
    #pragma pack(pop)
END_ATF_NAMESPACE
