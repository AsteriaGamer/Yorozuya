// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CGameObject.hpp"
#include "CPlayer.hpp"
#include "_object_id.hpp"
#include "_parkingunit_create_setdata.hpp"


START_ATF_NAMESPACE
    #pragma pack(push, 8)
    struct  CParkingUnit : CGameObject
    {
        CPlayer *m_pOwner;
        unsigned int m_dwOwnerSerial;
        char m_byFrame;
        char m_byPartCode[6];
        char m_byCreateType;
        char m_byTransDistCode;
        unsigned int m_dwParkingStartTime;
        unsigned __int16 m_wHPRate;
        unsigned int m_dwLastDestroyTime;
    public:
        CParkingUnit()
        {
            using org_ptr = void (WINAPIV*)(struct CParkingUnit*);
            (org_ptr(0x140167900L))(this);
        };
        void ctor_CParkingUnit()
        {
            using org_ptr = void (WINAPIV*)(struct CParkingUnit*);
            (org_ptr(0x140167900L))(this);
        };
        uint16_t CalcCurHPRate()
        {
            using org_ptr = uint16_t (WINAPIV*)(struct CParkingUnit*);
            return (org_ptr(0x1401683f0L))(this);
        };
        void ChangeOwner(struct CPlayer* pNewOwner, char byUnitSlotIndex)
        {
            using org_ptr = void (WINAPIV*)(struct CParkingUnit*, struct CPlayer*, char);
            (org_ptr(0x140167c30L))(this, pNewOwner, byUnitSlotIndex);
        };
        bool Create(struct _parkingunit_create_setdata* pParam)
        {
            using org_ptr = bool (WINAPIV*)(struct CParkingUnit*, struct _parkingunit_create_setdata*);
            return (org_ptr(0x140167a40L))(this, pParam);
        };
        bool Destroy(char byDestoryType)
        {
            using org_ptr = bool (WINAPIV*)(struct CParkingUnit*, char);
            return (org_ptr(0x140167b80L))(this, byDestoryType);
        };
        void Init(struct _object_id* pID)
        {
            using org_ptr = void (WINAPIV*)(struct CParkingUnit*, struct _object_id*);
            (org_ptr(0x140167980L))(this, pID);
        };
        bool IsRideRight(struct CPlayer* pOne)
        {
            using org_ptr = bool (WINAPIV*)(struct CParkingUnit*, struct CPlayer*);
            return (org_ptr(0x140167cc0L))(this, pOne);
        };
        void Loop()
        {
            using org_ptr = void (WINAPIV*)(struct CParkingUnit*);
            (org_ptr(0x140167c20L))(this);
        };
        void SendMsg_ChangeOwner(char byUnitSlotIndex, struct CPlayer* pOldOwner)
        {
            using org_ptr = void (WINAPIV*)(struct CParkingUnit*, char, struct CPlayer*);
            (org_ptr(0x140167ec0L))(this, byUnitSlotIndex, pOldOwner);
        };
        void SendMsg_Create()
        {
            using org_ptr = void (WINAPIV*)(struct CParkingUnit*);
            (org_ptr(0x140167ce0L))(this);
        };
        void SendMsg_Destroy(char byDestoryType)
        {
            using org_ptr = void (WINAPIV*)(struct CParkingUnit*, char);
            (org_ptr(0x140167e20L))(this, byDestoryType);
        };
        void SendMsg_FixPosition(int n)
        {
            using org_ptr = void (WINAPIV*)(struct CParkingUnit*, int);
            (org_ptr(0x140167fd0L))(this, n);
        };
        ~CParkingUnit()
        {
            using org_ptr = void (WINAPIV*)(struct CParkingUnit*);
            (org_ptr(0x140168480L))(this);
        };
        void dtor_CParkingUnit()
        {
            using org_ptr = void (WINAPIV*)(struct CParkingUnit*);
            (org_ptr(0x140168480L))(this);
        };
    };
    #pragma pack(pop)
END_ATF_NAMESPACE
