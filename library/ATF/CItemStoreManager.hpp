// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CItemStore.hpp"
#include "CLogFile.hpp"
#include "CMapItemStoreList.hpp"
#include "CMyTimer.hpp"
#include "CRecordData.hpp"
#include "_limit_item_db_data.hpp"
#include "_qry_case_all_store_limit_item.hpp"


START_ATF_NAMESPACE
    struct CItemStoreManager
    {
        CLogFile *m_pkLogger;
        CMyTimer m_tmrCheckTime;
        CMyTimer m_tmrSaveTime;
        __int64 m_tNextInitTime;
        _qry_case_all_store_limit_item m_Sheet;
        int m_nInstanceItemStoreListNum;
        CMapItemStoreList *m_InstanceItemStoreList;
        CRecordData m_tblItemStore;
        int m_nMapItemStoreListNum;
        CMapItemStoreList *m_MapItemStoreList;
        CItemStore *m_pLimitInitNormalStore[3];
    public:
        CItemStoreManager()
        {
            using org_ptr = void (WINAPIV*)(struct CItemStoreManager*);
            (org_ptr(0x140348020L))(this);
        };
        void ctor_CItemStoreManager()
        {
            using org_ptr = void (WINAPIV*)(struct CItemStoreManager*);
            (org_ptr(0x140348020L))(this);
        };
        void CompleteDisableInstanceStore(char* pData)
        {
            using org_ptr = void (WINAPIV*)(struct CItemStoreManager*, char*);
            (org_ptr(0x14034a710L))(this, pData);
        };
        void CompleteStoreLimitItem()
        {
            using org_ptr = void (WINAPIV*)(struct CItemStoreManager*);
            (org_ptr(0x14034a4a0L))(this);
        };
        static void Destroy()
        {
            using org_ptr = void (WINAPIV*)();
            (org_ptr(0x140348430L))();
        };
        struct CMapItemStoreList* GetEmptyInstanceItemStore()
        {
            using org_ptr = struct CMapItemStoreList* (WINAPIV*)(struct CItemStoreManager*);
            return (org_ptr(0x140348ab0L))(this);
        };
        struct CMapItemStoreList* GetInstanceStoreListBySerial(int nSerial)
        {
            using org_ptr = struct CMapItemStoreList* (WINAPIV*)(struct CItemStoreManager*, int);
            return (org_ptr(0x140348b30L))(this, nSerial);
        };
        struct CItemStore* GetMapItemStoreFromList(int nMapNum, int nStoreNum)
        {
            using org_ptr = struct CItemStore* (WINAPIV*)(struct CItemStoreManager*, int, int);
            return (org_ptr(0x140348a20L))(this, nMapNum, nStoreNum);
        };
        struct CMapItemStoreList* GetMapItemStoreListByNum(int nNum)
        {
            using org_ptr = struct CMapItemStoreList* (WINAPIV*)(struct CItemStoreManager*, int);
            return (org_ptr(0x140348940L))(this, nNum);
        };
        struct CMapItemStoreList* GetMapItemStoreListBySerial(int nSerial)
        {
            using org_ptr = struct CMapItemStoreList* (WINAPIV*)(struct CItemStoreManager*, int);
            return (org_ptr(0x140348990L))(this, nSerial);
        };
        bool Init(int nNormalListNum, int nInstanceListNum)
        {
            using org_ptr = bool (WINAPIV*)(struct CItemStoreManager*, int, int);
            return (org_ptr(0x1403484b0L))(this, nNormalListNum, nInstanceListNum);
        };
        bool InitLogger()
        {
            using org_ptr = bool (WINAPIV*)(struct CItemStoreManager*);
            return (org_ptr(0x140348f10L))(this);
        };
        bool InsertNotEnoughLimitItemRecord(int nNum)
        {
            using org_ptr = bool (WINAPIV*)(struct CItemStoreManager*, int);
            return (org_ptr(0x14034a020L))(this, nNum);
        };
        static struct CItemStoreManager* Instance()
        {
            using org_ptr = struct CItemStoreManager* (WINAPIV*)();
            return (org_ptr(0x140348370L))();
        };
        bool Load()
        {
            using org_ptr = bool (WINAPIV*)(struct CItemStoreManager*);
            return (org_ptr(0x140349120L))(this);
        };
        void Log(char* fmt)
        {
            using org_ptr = void (WINAPIV*)(struct CItemStoreManager*, char*);
            (org_ptr(0x140349090L))(this, fmt);
        };
        void Loop()
        {
            using org_ptr = void (WINAPIV*)(struct CItemStoreManager*);
            (org_ptr(0x140349350L))(this);
        };
        void MakeLimitItemUpdateQuery(unsigned int dwSerial, char byStoreType, int nTypeSerial, unsigned int dwStoreIndex, struct _limit_item_db_data* pItemData, uint64_t dwLimitInitTime, char* pszQuery, int nBufSize)
        {
            using org_ptr = void (WINAPIV*)(struct CItemStoreManager*, unsigned int, char, int, unsigned int, struct _limit_item_db_data*, uint64_t, char*, int);
            (org_ptr(0x14034a7e0L))(this, dwSerial, byStoreType, nTypeSerial, dwStoreIndex, pItemData, dwLimitInitTime, pszQuery, nBufSize);
        };
        bool ResetInstanceItemStore(char byStoreType, int nSerial)
        {
            using org_ptr = bool (WINAPIV*)(struct CItemStoreManager*, char, int);
            return (org_ptr(0x140348bd0L))(this, byStoreType, nSerial);
        };
        bool SelectStoreLimitItem()
        {
            using org_ptr = bool (WINAPIV*)(struct CItemStoreManager*);
            return (org_ptr(0x14034a0c0L))(this);
        };
        bool SelectTotalRecordNum(unsigned int* pdwTotalNum)
        {
            using org_ptr = bool (WINAPIV*)(struct CItemStoreManager*, unsigned int*);
            return (org_ptr(0x140349fb0L))(this, pdwTotalNum);
        };
        bool SelectUsedRecordNum(unsigned int* pdwUsedNum)
        {
            using org_ptr = bool (WINAPIV*)(struct CItemStoreManager*, unsigned int*);
            return (org_ptr(0x140349f40L))(this, pdwUsedNum);
        };
        void SetEnforceInitNormalStore()
        {
            using org_ptr = void (WINAPIV*)(struct CItemStoreManager*);
            (org_ptr(0x14034a9f0L))(this);
        };
        void SetNextEnforceInitTime()
        {
            using org_ptr = void (WINAPIV*)(struct CItemStoreManager*);
            (org_ptr(0x140349c40L))(this);
        };
        void SetStoreLimitItemData(struct _qry_case_all_store_limit_item::__list* pData)
        {
            using org_ptr = void (WINAPIV*)(struct CItemStoreManager*, struct _qry_case_all_store_limit_item::__list*);
            (org_ptr(0x140349d40L))(this, pData);
        };
        void SetUpdateDBDataDoNotCheck()
        {
            using org_ptr = void (WINAPIV*)(struct CItemStoreManager*);
            (org_ptr(0x14034abb0L))(this);
        };
        char UpdateDisableInstanceStore(char* pData)
        {
            using org_ptr = char (WINAPIV*)(struct CItemStoreManager*, char*);
            return (org_ptr(0x14034a660L))(this, pData);
        };
        char UpdateStoreLimitItem()
        {
            using org_ptr = char (WINAPIV*)(struct CItemStoreManager*);
            return (org_ptr(0x14034a130L))(this);
        };
        ~CItemStoreManager()
        {
            using org_ptr = void (WINAPIV*)(struct CItemStoreManager*);
            (org_ptr(0x140348170L))(this);
        };
        void dtor_CItemStoreManager()
        {
            using org_ptr = void (WINAPIV*)(struct CItemStoreManager*);
            (org_ptr(0x140348170L))(this);
        };
    };
END_ATF_NAMESPACE
