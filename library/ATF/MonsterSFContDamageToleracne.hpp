// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CMonster.hpp"


START_ATF_NAMESPACE
    #pragma pack(push, 8)
    struct MonsterSFContDamageToleracne
    {
        CMonster *m_pMonster;
        float m_fToleranceProb;
        float m_fToleranceProbMax;
        unsigned int m_dwLastUpdateTime;
    public:
        float GetToleranceProb()
        {
            using org_ptr = float (WINAPIV*)(struct MonsterSFContDamageToleracne*);
            return (org_ptr(0x14014caf0L))(this);
        };
        void Init(float fMaxTolValue)
        {
            using org_ptr = void (WINAPIV*)(struct MonsterSFContDamageToleracne*, float);
            (org_ptr(0x140157ef0L))(this, fMaxTolValue);
        };
        bool IsSFContDamage()
        {
            using org_ptr = bool (WINAPIV*)(struct MonsterSFContDamageToleracne*);
            return (org_ptr(0x140157f90L))(this);
        };
        MonsterSFContDamageToleracne()
        {
            using org_ptr = void (WINAPIV*)(struct MonsterSFContDamageToleracne*);
            (org_ptr(0x140157e80L))(this);
        };
        void ctor_MonsterSFContDamageToleracne()
        {
            using org_ptr = void (WINAPIV*)(struct MonsterSFContDamageToleracne*);
            (org_ptr(0x140157e80L))(this);
        };
        void OnlyOnceInit(struct CMonster* pMonster)
        {
            using org_ptr = void (WINAPIV*)(struct MonsterSFContDamageToleracne*, struct CMonster*);
            (org_ptr(0x140157ed0L))(this, pMonster);
        };
        void SetSFDamageToleracne_Variation(float fAddValue)
        {
            using org_ptr = void (WINAPIV*)(struct MonsterSFContDamageToleracne*, float);
            (org_ptr(0x140158000L))(this, fAddValue);
        };
        void Update()
        {
            using org_ptr = void (WINAPIV*)(struct MonsterSFContDamageToleracne*);
            (org_ptr(0x140158080L))(this);
        };
    };
    #pragma pack(pop)
END_ATF_NAMESPACE
