// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatordeallocate8_ptr std__allocatordeallocate8_next(nullptr);
            info::std__allocatordeallocate8_clbk std__allocatordeallocate8_user(nullptr);
            info::std__allocatormax_size10_ptr std__allocatormax_size10_next(nullptr);
            info::std__allocatormax_size10_clbk std__allocatormax_size10_user(nullptr);
            
            struct INI_Section** std__allocatorallocate2_wrapper(struct std::allocator<INI_Section *>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<INI_Section *>* _this, struct std::allocator<INI_Section *>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<INI_Section *>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatordeallocate8_wrapper(struct std::allocator<INI_Section *>* _this, struct INI_Section** _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate8_user(_this, _Ptr, __formal);
            };
            uint64_t std__allocatormax_size10_wrapper(struct std::allocator<INI_Section *>* _this)
            {
               return std__allocatormax_size10_user(_this);
            };
            
            hook_record allocator<INI_Section *>_functions[] = {
            {   (LPVOID)0x140473e80L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct INI_Section**(std::allocator<INI_Section *>::*)(uint64_t))&std::allocator<INI_Section *>::allocate) },
            {   (LPVOID)0x140473e10L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<INI_Section *>::*)(struct std::allocator<INI_Section *>*))&std::allocator<INI_Section *>::ctor_allocator) },
            {   (LPVOID)0x140472780L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<INI_Section *>::*)())&std::allocator<INI_Section *>::ctor_allocator) },
            {   (LPVOID)0x140473e30L,
                (LPVOID *)&std__allocatordeallocate8_user,
                (LPVOID *)&std__allocatordeallocate8_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<INI_Section *>::*)(struct INI_Section**, uint64_t))&std::allocator<INI_Section *>::deallocate) },
            {   (LPVOID)0x1404741d0L,
                (LPVOID *)&std__allocatormax_size10_user,
                (LPVOID *)&std__allocatormax_size10_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size10_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<INI_Section *>::*)())&std::allocator<INI_Section *>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatordeallocate8_ptr std__allocatordeallocate8_next(nullptr);
            info::std__allocatordeallocate8_clbk std__allocatordeallocate8_user(nullptr);
            info::std__allocatormax_size10_ptr std__allocatormax_size10_next(nullptr);
            info::std__allocatormax_size10_clbk std__allocatormax_size10_user(nullptr);
            
            struct INI_Key** std__allocatorallocate2_wrapper(struct std::allocator<INI_Key *>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<INI_Key *>* _this, struct std::allocator<INI_Key *>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<INI_Key *>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatordeallocate8_wrapper(struct std::allocator<INI_Key *>* _this, struct INI_Key** _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate8_user(_this, _Ptr, __formal);
            };
            uint64_t std__allocatormax_size10_wrapper(struct std::allocator<INI_Key *>* _this)
            {
               return std__allocatormax_size10_user(_this);
            };
            
            hook_record allocator<INI_Key *>_functions[] = {
            {   (LPVOID)0x1404732f0L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct INI_Key**(std::allocator<INI_Key *>::*)(uint64_t))&std::allocator<INI_Key *>::allocate) },
            {   (LPVOID)0x140473280L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<INI_Key *>::*)(struct std::allocator<INI_Key *>*))&std::allocator<INI_Key *>::ctor_allocator) },
            {   (LPVOID)0x140471d30L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<INI_Key *>::*)())&std::allocator<INI_Key *>::ctor_allocator) },
            {   (LPVOID)0x1404732a0L,
                (LPVOID *)&std__allocatordeallocate8_user,
                (LPVOID *)&std__allocatordeallocate8_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<INI_Key *>::*)(struct INI_Key**, uint64_t))&std::allocator<INI_Key *>::deallocate) },
            {   (LPVOID)0x1404740d0L,
                (LPVOID *)&std__allocatormax_size10_user,
                (LPVOID *)&std__allocatormax_size10_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size10_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<INI_Key *>::*)())&std::allocator<INI_Key *>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatordeallocate8_ptr std__allocatordeallocate8_next(nullptr);
            info::std__allocatordeallocate8_clbk std__allocatordeallocate8_user(nullptr);
            info::std__allocatormax_size10_ptr std__allocatormax_size10_next(nullptr);
            info::std__allocatormax_size10_clbk std__allocatormax_size10_user(nullptr);
            
            struct ScheduleMSG** std__allocatorallocate2_wrapper(struct std::allocator<ScheduleMSG *>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<ScheduleMSG *>* _this, struct std::allocator<ScheduleMSG *>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<ScheduleMSG *>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatordeallocate8_wrapper(struct std::allocator<ScheduleMSG *>* _this, struct ScheduleMSG** _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate8_user(_this, _Ptr, __formal);
            };
            uint64_t std__allocatormax_size10_wrapper(struct std::allocator<ScheduleMSG *>* _this)
            {
               return std__allocatormax_size10_user(_this);
            };
            
            hook_record allocator<ScheduleMSG *>_functions[] = {
            {   (LPVOID)0x140423f30L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct ScheduleMSG**(std::allocator<ScheduleMSG *>::*)(uint64_t))&std::allocator<ScheduleMSG *>::allocate) },
            {   (LPVOID)0x140423ec0L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<ScheduleMSG *>::*)(struct std::allocator<ScheduleMSG *>*))&std::allocator<ScheduleMSG *>::ctor_allocator) },
            {   (LPVOID)0x140421900L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<ScheduleMSG *>::*)())&std::allocator<ScheduleMSG *>::ctor_allocator) },
            {   (LPVOID)0x140423ee0L,
                (LPVOID *)&std__allocatordeallocate8_user,
                (LPVOID *)&std__allocatordeallocate8_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<ScheduleMSG *>::*)(struct ScheduleMSG**, uint64_t))&std::allocator<ScheduleMSG *>::deallocate) },
            {   (LPVOID)0x1404258c0L,
                (LPVOID *)&std__allocatormax_size10_user,
                (LPVOID *)&std__allocatormax_size10_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size10_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<ScheduleMSG *>::*)())&std::allocator<ScheduleMSG *>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatorconstruct8_ptr std__allocatorconstruct8_next(nullptr);
            info::std__allocatorconstruct8_clbk std__allocatorconstruct8_user(nullptr);
            info::std__allocatordeallocate10_ptr std__allocatordeallocate10_next(nullptr);
            info::std__allocatordeallocate10_clbk std__allocatordeallocate10_user(nullptr);
            info::std__allocatordestroy12_ptr std__allocatordestroy12_next(nullptr);
            info::std__allocatordestroy12_clbk std__allocatordestroy12_user(nullptr);
            info::std__allocatormax_size14_ptr std__allocatormax_size14_next(nullptr);
            info::std__allocatormax_size14_clbk std__allocatormax_size14_user(nullptr);
            
            struct CGuildRoomInfo* std__allocatorallocate2_wrapper(struct std::allocator<CGuildRoomInfo>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<CGuildRoomInfo>* _this, struct std::allocator<CGuildRoomInfo>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<CGuildRoomInfo>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatorconstruct8_wrapper(struct std::allocator<CGuildRoomInfo>* _this, struct CGuildRoomInfo* _Ptr, struct CGuildRoomInfo* _Val)
            {
               std__allocatorconstruct8_user(_this, _Ptr, _Val);
            };
            void std__allocatordeallocate10_wrapper(struct std::allocator<CGuildRoomInfo>* _this, struct CGuildRoomInfo* _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate10_user(_this, _Ptr, __formal);
            };
            void std__allocatordestroy12_wrapper(struct std::allocator<CGuildRoomInfo>* _this, struct CGuildRoomInfo* _Ptr)
            {
               std__allocatordestroy12_user(_this, _Ptr);
            };
            uint64_t std__allocatormax_size14_wrapper(struct std::allocator<CGuildRoomInfo>* _this)
            {
               return std__allocatormax_size14_user(_this);
            };
            
            hook_record allocator<CGuildRoomInfo>_functions[] = {
            {   (LPVOID)0x1402ec2d0L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct CGuildRoomInfo*(std::allocator<CGuildRoomInfo>::*)(uint64_t))&std::allocator<CGuildRoomInfo>::allocate) },
            {   (LPVOID)0x1402ec260L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CGuildRoomInfo>::*)(struct std::allocator<CGuildRoomInfo>*))&std::allocator<CGuildRoomInfo>::ctor_allocator) },
            {   (LPVOID)0x1402eb8e0L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CGuildRoomInfo>::*)())&std::allocator<CGuildRoomInfo>::ctor_allocator) },
            {   (LPVOID)0x1402ee2c0L,
                (LPVOID *)&std__allocatorconstruct8_user,
                (LPVOID *)&std__allocatorconstruct8_next,
                (LPVOID)cast_pointer_function(std__allocatorconstruct8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CGuildRoomInfo>::*)(struct CGuildRoomInfo*, struct CGuildRoomInfo*))&std::allocator<CGuildRoomInfo>::construct) },
            {   (LPVOID)0x1402ec280L,
                (LPVOID *)&std__allocatordeallocate10_user,
                (LPVOID *)&std__allocatordeallocate10_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate10_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CGuildRoomInfo>::*)(struct CGuildRoomInfo*, uint64_t))&std::allocator<CGuildRoomInfo>::deallocate) },
            {   (LPVOID)0x1402ee320L,
                (LPVOID *)&std__allocatordestroy12_user,
                (LPVOID *)&std__allocatordestroy12_next,
                (LPVOID)cast_pointer_function(std__allocatordestroy12_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CGuildRoomInfo>::*)(struct CGuildRoomInfo*))&std::allocator<CGuildRoomInfo>::destroy) },
            {   (LPVOID)0x1402ecdd0L,
                (LPVOID *)&std__allocatormax_size14_user,
                (LPVOID *)&std__allocatormax_size14_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size14_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<CGuildRoomInfo>::*)())&std::allocator<CGuildRoomInfo>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatorconstruct8_ptr std__allocatorconstruct8_next(nullptr);
            info::std__allocatorconstruct8_clbk std__allocatorconstruct8_user(nullptr);
            info::std__allocatordeallocate10_ptr std__allocatordeallocate10_next(nullptr);
            info::std__allocatordeallocate10_clbk std__allocatordeallocate10_user(nullptr);
            info::std__allocatordestroy12_ptr std__allocatordestroy12_next(nullptr);
            info::std__allocatordestroy12_clbk std__allocatordestroy12_user(nullptr);
            info::std__allocatormax_size14_ptr std__allocatormax_size14_next(nullptr);
            info::std__allocatormax_size14_clbk std__allocatormax_size14_user(nullptr);
            
            struct RoomCharInfo* std__allocatorallocate2_wrapper(struct std::allocator<RoomCharInfo>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<RoomCharInfo>* _this, struct std::allocator<RoomCharInfo>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<RoomCharInfo>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatorconstruct8_wrapper(struct std::allocator<RoomCharInfo>* _this, struct RoomCharInfo* _Ptr, struct RoomCharInfo* _Val)
            {
               std__allocatorconstruct8_user(_this, _Ptr, _Val);
            };
            void std__allocatordeallocate10_wrapper(struct std::allocator<RoomCharInfo>* _this, struct RoomCharInfo* _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate10_user(_this, _Ptr, __formal);
            };
            void std__allocatordestroy12_wrapper(struct std::allocator<RoomCharInfo>* _this, struct RoomCharInfo* _Ptr)
            {
               std__allocatordestroy12_user(_this, _Ptr);
            };
            uint64_t std__allocatormax_size14_wrapper(struct std::allocator<RoomCharInfo>* _this)
            {
               return std__allocatormax_size14_user(_this);
            };
            
            hook_record allocator<RoomCharInfo>_functions[] = {
            {   (LPVOID)0x1402e7c20L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct RoomCharInfo*(std::allocator<RoomCharInfo>::*)(uint64_t))&std::allocator<RoomCharInfo>::allocate) },
            {   (LPVOID)0x1402e7bb0L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<RoomCharInfo>::*)(struct std::allocator<RoomCharInfo>*))&std::allocator<RoomCharInfo>::ctor_allocator) },
            {   (LPVOID)0x1402e77e0L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<RoomCharInfo>::*)())&std::allocator<RoomCharInfo>::ctor_allocator) },
            {   (LPVOID)0x1402e9190L,
                (LPVOID *)&std__allocatorconstruct8_user,
                (LPVOID *)&std__allocatorconstruct8_next,
                (LPVOID)cast_pointer_function(std__allocatorconstruct8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<RoomCharInfo>::*)(struct RoomCharInfo*, struct RoomCharInfo*))&std::allocator<RoomCharInfo>::construct) },
            {   (LPVOID)0x1402e7bd0L,
                (LPVOID *)&std__allocatordeallocate10_user,
                (LPVOID *)&std__allocatordeallocate10_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate10_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<RoomCharInfo>::*)(struct RoomCharInfo*, uint64_t))&std::allocator<RoomCharInfo>::deallocate) },
            {   (LPVOID)0x1402e91f0L,
                (LPVOID *)&std__allocatordestroy12_user,
                (LPVOID *)&std__allocatordestroy12_next,
                (LPVOID)cast_pointer_function(std__allocatordestroy12_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<RoomCharInfo>::*)(struct RoomCharInfo*))&std::allocator<RoomCharInfo>::destroy) },
            {   (LPVOID)0x1402e8540L,
                (LPVOID *)&std__allocatormax_size14_user,
                (LPVOID *)&std__allocatormax_size14_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size14_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<RoomCharInfo>::*)())&std::allocator<RoomCharInfo>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatordeallocate8_ptr std__allocatordeallocate8_next(nullptr);
            info::std__allocatordeallocate8_clbk std__allocatordeallocate8_user(nullptr);
            info::std__allocatormax_size10_ptr std__allocatormax_size10_next(nullptr);
            info::std__allocatormax_size10_clbk std__allocatormax_size10_user(nullptr);
            
            struct _PVP_RANK_REFRESH_USER** std__allocatorallocate2_wrapper(struct std::allocator<_PVP_RANK_REFRESH_USER *>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<_PVP_RANK_REFRESH_USER *>* _this, struct std::allocator<_PVP_RANK_REFRESH_USER *>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<_PVP_RANK_REFRESH_USER *>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatordeallocate8_wrapper(struct std::allocator<_PVP_RANK_REFRESH_USER *>* _this, struct _PVP_RANK_REFRESH_USER** _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate8_user(_this, _Ptr, __formal);
            };
            uint64_t std__allocatormax_size10_wrapper(struct std::allocator<_PVP_RANK_REFRESH_USER *>* _this)
            {
               return std__allocatormax_size10_user(_this);
            };
            
            hook_record allocator<_PVP_RANK_REFRESH_USER *>_functions[] = {
            {   (LPVOID)0x140338360L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct _PVP_RANK_REFRESH_USER**(std::allocator<_PVP_RANK_REFRESH_USER *>::*)(uint64_t))&std::allocator<_PVP_RANK_REFRESH_USER *>::allocate) },
            {   (LPVOID)0x140345ba0L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<_PVP_RANK_REFRESH_USER *>::*)(struct std::allocator<_PVP_RANK_REFRESH_USER *>*))&std::allocator<_PVP_RANK_REFRESH_USER *>::ctor_allocator) },
            {   (LPVOID)0x140345430L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<_PVP_RANK_REFRESH_USER *>::*)())&std::allocator<_PVP_RANK_REFRESH_USER *>::ctor_allocator) },
            {   (LPVOID)0x140337330L,
                (LPVOID *)&std__allocatordeallocate8_user,
                (LPVOID *)&std__allocatordeallocate8_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<_PVP_RANK_REFRESH_USER *>::*)(struct _PVP_RANK_REFRESH_USER**, uint64_t))&std::allocator<_PVP_RANK_REFRESH_USER *>::deallocate) },
            {   (LPVOID)0x1403383b0L,
                (LPVOID *)&std__allocatormax_size10_user,
                (LPVOID *)&std__allocatormax_size10_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size10_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<_PVP_RANK_REFRESH_USER *>::*)())&std::allocator<_PVP_RANK_REFRESH_USER *>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatordeallocate8_ptr std__allocatordeallocate8_next(nullptr);
            info::std__allocatordeallocate8_clbk std__allocatordeallocate8_user(nullptr);
            info::std__allocatormax_size10_ptr std__allocatormax_size10_next(nullptr);
            info::std__allocatormax_size10_clbk std__allocatormax_size10_user(nullptr);
            
            struct _PVP_RANK_DATA** std__allocatorallocate2_wrapper(struct std::allocator<_PVP_RANK_DATA *>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<_PVP_RANK_DATA *>* _this, struct std::allocator<_PVP_RANK_DATA *>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<_PVP_RANK_DATA *>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatordeallocate8_wrapper(struct std::allocator<_PVP_RANK_DATA *>* _this, struct _PVP_RANK_DATA** _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate8_user(_this, _Ptr, __formal);
            };
            uint64_t std__allocatormax_size10_wrapper(struct std::allocator<_PVP_RANK_DATA *>* _this)
            {
               return std__allocatormax_size10_user(_this);
            };
            
            hook_record allocator<_PVP_RANK_DATA *>_functions[] = {
            {   (LPVOID)0x140332790L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct _PVP_RANK_DATA**(std::allocator<_PVP_RANK_DATA *>::*)(uint64_t))&std::allocator<_PVP_RANK_DATA *>::allocate) },
            {   (LPVOID)0x140345b40L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<_PVP_RANK_DATA *>::*)(struct std::allocator<_PVP_RANK_DATA *>*))&std::allocator<_PVP_RANK_DATA *>::ctor_allocator) },
            {   (LPVOID)0x140344fb0L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<_PVP_RANK_DATA *>::*)())&std::allocator<_PVP_RANK_DATA *>::ctor_allocator) },
            {   (LPVOID)0x140330760L,
                (LPVOID *)&std__allocatordeallocate8_user,
                (LPVOID *)&std__allocatordeallocate8_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<_PVP_RANK_DATA *>::*)(struct _PVP_RANK_DATA**, uint64_t))&std::allocator<_PVP_RANK_DATA *>::deallocate) },
            {   (LPVOID)0x1403327e0L,
                (LPVOID *)&std__allocatormax_size10_user,
                (LPVOID *)&std__allocatormax_size10_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size10_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<_PVP_RANK_DATA *>::*)())&std::allocator<_PVP_RANK_DATA *>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatordeallocate8_ptr std__allocatordeallocate8_next(nullptr);
            info::std__allocatordeallocate8_clbk std__allocatordeallocate8_user(nullptr);
            info::std__allocatormax_size10_ptr std__allocatormax_size10_next(nullptr);
            info::std__allocatormax_size10_clbk std__allocatormax_size10_user(nullptr);
            
            struct _PVP_RANK_PACKED_DATA** std__allocatorallocate2_wrapper(struct std::allocator<_PVP_RANK_PACKED_DATA *>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<_PVP_RANK_PACKED_DATA *>* _this, struct std::allocator<_PVP_RANK_PACKED_DATA *>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<_PVP_RANK_PACKED_DATA *>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatordeallocate8_wrapper(struct std::allocator<_PVP_RANK_PACKED_DATA *>* _this, struct _PVP_RANK_PACKED_DATA** _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate8_user(_this, _Ptr, __formal);
            };
            uint64_t std__allocatormax_size10_wrapper(struct std::allocator<_PVP_RANK_PACKED_DATA *>* _this)
            {
               return std__allocatormax_size10_user(_this);
            };
            
            hook_record allocator<_PVP_RANK_PACKED_DATA *>_functions[] = {
            {   (LPVOID)0x1403331d0L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct _PVP_RANK_PACKED_DATA**(std::allocator<_PVP_RANK_PACKED_DATA *>::*)(uint64_t))&std::allocator<_PVP_RANK_PACKED_DATA *>::allocate) },
            {   (LPVOID)0x140345b60L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<_PVP_RANK_PACKED_DATA *>::*)(struct std::allocator<_PVP_RANK_PACKED_DATA *>*))&std::allocator<_PVP_RANK_PACKED_DATA *>::ctor_allocator) },
            {   (LPVOID)0x140345130L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<_PVP_RANK_PACKED_DATA *>::*)())&std::allocator<_PVP_RANK_PACKED_DATA *>::ctor_allocator) },
            {   (LPVOID)0x140330820L,
                (LPVOID *)&std__allocatordeallocate8_user,
                (LPVOID *)&std__allocatordeallocate8_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<_PVP_RANK_PACKED_DATA *>::*)(struct _PVP_RANK_PACKED_DATA**, uint64_t))&std::allocator<_PVP_RANK_PACKED_DATA *>::deallocate) },
            {   (LPVOID)0x140333220L,
                (LPVOID *)&std__allocatormax_size10_user,
                (LPVOID *)&std__allocatormax_size10_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size10_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<_PVP_RANK_PACKED_DATA *>::*)())&std::allocator<_PVP_RANK_PACKED_DATA *>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatordeallocate8_ptr std__allocatordeallocate8_next(nullptr);
            info::std__allocatordeallocate8_clbk std__allocatordeallocate8_user(nullptr);
            info::std__allocatormax_size10_ptr std__allocatormax_size10_next(nullptr);
            info::std__allocatormax_size10_clbk std__allocatormax_size10_user(nullptr);
            
            struct _guild_member_refresh_data** std__allocatorallocate2_wrapper(struct std::allocator<_guild_member_refresh_data *>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<_guild_member_refresh_data *>* _this, struct std::allocator<_guild_member_refresh_data *>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<_guild_member_refresh_data *>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatordeallocate8_wrapper(struct std::allocator<_guild_member_refresh_data *>* _this, struct _guild_member_refresh_data** _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate8_user(_this, _Ptr, __formal);
            };
            uint64_t std__allocatormax_size10_wrapper(struct std::allocator<_guild_member_refresh_data *>* _this)
            {
               return std__allocatormax_size10_user(_this);
            };
            
            hook_record allocator<_guild_member_refresh_data *>_functions[] = {
            {   (LPVOID)0x14033e6d0L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct _guild_member_refresh_data**(std::allocator<_guild_member_refresh_data *>::*)(uint64_t))&std::allocator<_guild_member_refresh_data *>::allocate) },
            {   (LPVOID)0x140345be0L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<_guild_member_refresh_data *>::*)(struct std::allocator<_guild_member_refresh_data *>*))&std::allocator<_guild_member_refresh_data *>::ctor_allocator) },
            {   (LPVOID)0x140345730L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<_guild_member_refresh_data *>::*)())&std::allocator<_guild_member_refresh_data *>::ctor_allocator) },
            {   (LPVOID)0x14033d170L,
                (LPVOID *)&std__allocatordeallocate8_user,
                (LPVOID *)&std__allocatordeallocate8_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<_guild_member_refresh_data *>::*)(struct _guild_member_refresh_data**, uint64_t))&std::allocator<_guild_member_refresh_data *>::deallocate) },
            {   (LPVOID)0x14033e720L,
                (LPVOID *)&std__allocatormax_size10_user,
                (LPVOID *)&std__allocatormax_size10_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size10_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<_guild_member_refresh_data *>::*)())&std::allocator<_guild_member_refresh_data *>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatorconstruct8_ptr std__allocatorconstruct8_next(nullptr);
            info::std__allocatorconstruct8_clbk std__allocatorconstruct8_user(nullptr);
            info::std__allocatordeallocate10_ptr std__allocatordeallocate10_next(nullptr);
            info::std__allocatordeallocate10_clbk std__allocatordeallocate10_user(nullptr);
            info::std__allocatordestroy12_ptr std__allocatordestroy12_next(nullptr);
            info::std__allocatordestroy12_clbk std__allocatordestroy12_user(nullptr);
            info::std__allocatormax_size14_ptr std__allocatormax_size14_next(nullptr);
            info::std__allocatormax_size14_clbk std__allocatormax_size14_user(nullptr);
            
            struct CHEAT_COMMAND* std__allocatorallocate2_wrapper(struct std::allocator<CHEAT_COMMAND>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<CHEAT_COMMAND>* _this, struct std::allocator<CHEAT_COMMAND>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<CHEAT_COMMAND>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatorconstruct8_wrapper(struct std::allocator<CHEAT_COMMAND>* _this, struct CHEAT_COMMAND* _Ptr, struct CHEAT_COMMAND* _Val)
            {
               std__allocatorconstruct8_user(_this, _Ptr, _Val);
            };
            void std__allocatordeallocate10_wrapper(struct std::allocator<CHEAT_COMMAND>* _this, struct CHEAT_COMMAND* _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate10_user(_this, _Ptr, __formal);
            };
            void std__allocatordestroy12_wrapper(struct std::allocator<CHEAT_COMMAND>* _this, struct CHEAT_COMMAND* _Ptr)
            {
               std__allocatordestroy12_user(_this, _Ptr);
            };
            uint64_t std__allocatormax_size14_wrapper(struct std::allocator<CHEAT_COMMAND>* _this)
            {
               return std__allocatormax_size14_user(_this);
            };
            
            hook_record allocator<CHEAT_COMMAND>_functions[] = {
            {   (LPVOID)0x140212d20L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct CHEAT_COMMAND*(std::allocator<CHEAT_COMMAND>::*)(uint64_t))&std::allocator<CHEAT_COMMAND>::allocate) },
            {   (LPVOID)0x140212d00L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CHEAT_COMMAND>::*)(struct std::allocator<CHEAT_COMMAND>*))&std::allocator<CHEAT_COMMAND>::ctor_allocator) },
            {   (LPVOID)0x140212bb0L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CHEAT_COMMAND>::*)())&std::allocator<CHEAT_COMMAND>::ctor_allocator) },
            {   (LPVOID)0x140221e30L,
                (LPVOID *)&std__allocatorconstruct8_user,
                (LPVOID *)&std__allocatorconstruct8_next,
                (LPVOID)cast_pointer_function(std__allocatorconstruct8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CHEAT_COMMAND>::*)(struct CHEAT_COMMAND*, struct CHEAT_COMMAND*))&std::allocator<CHEAT_COMMAND>::construct) },
            {   (LPVOID)0x140213320L,
                (LPVOID *)&std__allocatordeallocate10_user,
                (LPVOID *)&std__allocatordeallocate10_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate10_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CHEAT_COMMAND>::*)(struct CHEAT_COMMAND*, uint64_t))&std::allocator<CHEAT_COMMAND>::deallocate) },
            {   (LPVOID)0x1402134d0L,
                (LPVOID *)&std__allocatordestroy12_user,
                (LPVOID *)&std__allocatordestroy12_next,
                (LPVOID)cast_pointer_function(std__allocatordestroy12_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CHEAT_COMMAND>::*)(struct CHEAT_COMMAND*))&std::allocator<CHEAT_COMMAND>::destroy) },
            {   (LPVOID)0x140212d70L,
                (LPVOID *)&std__allocatormax_size14_user,
                (LPVOID *)&std__allocatormax_size14_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size14_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<CHEAT_COMMAND>::*)())&std::allocator<CHEAT_COMMAND>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatorconstruct8_ptr std__allocatorconstruct8_next(nullptr);
            info::std__allocatorconstruct8_clbk std__allocatorconstruct8_user(nullptr);
            info::std__allocatordeallocate10_ptr std__allocatordeallocate10_next(nullptr);
            info::std__allocatordeallocate10_clbk std__allocatordeallocate10_user(nullptr);
            info::std__allocatordestroy12_ptr std__allocatordestroy12_next(nullptr);
            info::std__allocatordestroy12_clbk std__allocatordestroy12_user(nullptr);
            info::std__allocatormax_size14_ptr std__allocatormax_size14_next(nullptr);
            info::std__allocatormax_size14_clbk std__allocatormax_size14_user(nullptr);
            
            struct CryptoPP::ECPPoint* std__allocatorallocate2_wrapper(struct std::allocator<CryptoPP::ECPPoint>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<CryptoPP::ECPPoint>* _this, struct std::allocator<CryptoPP::ECPPoint>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<CryptoPP::ECPPoint>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatorconstruct8_wrapper(struct std::allocator<CryptoPP::ECPPoint>* _this, struct CryptoPP::ECPPoint* _Ptr, struct CryptoPP::ECPPoint* _Val)
            {
               std__allocatorconstruct8_user(_this, _Ptr, _Val);
            };
            void std__allocatordeallocate10_wrapper(struct std::allocator<CryptoPP::ECPPoint>* _this, struct CryptoPP::ECPPoint* _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate10_user(_this, _Ptr, __formal);
            };
            void std__allocatordestroy12_wrapper(struct std::allocator<CryptoPP::ECPPoint>* _this, struct CryptoPP::ECPPoint* _Ptr)
            {
               std__allocatordestroy12_user(_this, _Ptr);
            };
            uint64_t std__allocatormax_size14_wrapper(struct std::allocator<CryptoPP::ECPPoint>* _this)
            {
               return std__allocatormax_size14_user(_this);
            };
            
            hook_record allocator<CryptoPP::ECPPoint>_functions[] = {
            {   (LPVOID)0x14045d250L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct CryptoPP::ECPPoint*(std::allocator<CryptoPP::ECPPoint>::*)(uint64_t))&std::allocator<CryptoPP::ECPPoint>::allocate) },
            {   (LPVOID)0x14045d1e0L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CryptoPP::ECPPoint>::*)(struct std::allocator<CryptoPP::ECPPoint>*))&std::allocator<CryptoPP::ECPPoint>::ctor_allocator) },
            {   (LPVOID)0x140458db0L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CryptoPP::ECPPoint>::*)())&std::allocator<CryptoPP::ECPPoint>::ctor_allocator) },
            {   (LPVOID)0x1404691a0L,
                (LPVOID *)&std__allocatorconstruct8_user,
                (LPVOID *)&std__allocatorconstruct8_next,
                (LPVOID)cast_pointer_function(std__allocatorconstruct8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CryptoPP::ECPPoint>::*)(struct CryptoPP::ECPPoint*, struct CryptoPP::ECPPoint*))&std::allocator<CryptoPP::ECPPoint>::construct) },
            {   (LPVOID)0x14045d200L,
                (LPVOID *)&std__allocatordeallocate10_user,
                (LPVOID *)&std__allocatordeallocate10_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate10_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CryptoPP::ECPPoint>::*)(struct CryptoPP::ECPPoint*, uint64_t))&std::allocator<CryptoPP::ECPPoint>::deallocate) },
            {   (LPVOID)0x140467b60L,
                (LPVOID *)&std__allocatordestroy12_user,
                (LPVOID *)&std__allocatordestroy12_next,
                (LPVOID)cast_pointer_function(std__allocatordestroy12_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CryptoPP::ECPPoint>::*)(struct CryptoPP::ECPPoint*))&std::allocator<CryptoPP::ECPPoint>::destroy) },
            {   (LPVOID)0x14045dd70L,
                (LPVOID *)&std__allocatormax_size14_user,
                (LPVOID *)&std__allocatormax_size14_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size14_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<CryptoPP::ECPPoint>::*)())&std::allocator<CryptoPP::ECPPoint>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatorconstruct8_ptr std__allocatorconstruct8_next(nullptr);
            info::std__allocatorconstruct8_clbk std__allocatorconstruct8_user(nullptr);
            info::std__allocatordeallocate10_ptr std__allocatordeallocate10_next(nullptr);
            info::std__allocatordeallocate10_clbk std__allocatordeallocate10_user(nullptr);
            info::std__allocatordestroy12_ptr std__allocatordestroy12_next(nullptr);
            info::std__allocatordestroy12_clbk std__allocatordestroy12_user(nullptr);
            info::std__allocatormax_size14_ptr std__allocatormax_size14_next(nullptr);
            info::std__allocatormax_size14_clbk std__allocatormax_size14_user(nullptr);
            
            struct GUILD_BATTLE::CGuildBattleRewardItem* std__allocatorallocate2_wrapper(struct std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>* _this, struct std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatorconstruct8_wrapper(struct std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>* _this, struct GUILD_BATTLE::CGuildBattleRewardItem* _Ptr, struct GUILD_BATTLE::CGuildBattleRewardItem* _Val)
            {
               std__allocatorconstruct8_user(_this, _Ptr, _Val);
            };
            void std__allocatordeallocate10_wrapper(struct std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>* _this, struct GUILD_BATTLE::CGuildBattleRewardItem* _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate10_user(_this, _Ptr, __formal);
            };
            void std__allocatordestroy12_wrapper(struct std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>* _this, struct GUILD_BATTLE::CGuildBattleRewardItem* _Ptr)
            {
               std__allocatordestroy12_user(_this, _Ptr);
            };
            uint64_t std__allocatormax_size14_wrapper(struct std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>* _this)
            {
               return std__allocatormax_size14_user(_this);
            };
            
            hook_record allocator<GUILD_BATTLE::CGuildBattleRewardItem>_functions[] = {
            {   (LPVOID)0x1403d1970L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct GUILD_BATTLE::CGuildBattleRewardItem*(std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>::*)(uint64_t))&std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>::allocate) },
            {   (LPVOID)0x1403d1900L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>::*)(struct std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>*))&std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>::ctor_allocator) },
            {   (LPVOID)0x1403d1530L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>::*)())&std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>::ctor_allocator) },
            {   (LPVOID)0x1403d2f40L,
                (LPVOID *)&std__allocatorconstruct8_user,
                (LPVOID *)&std__allocatorconstruct8_next,
                (LPVOID)cast_pointer_function(std__allocatorconstruct8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>::*)(struct GUILD_BATTLE::CGuildBattleRewardItem*, struct GUILD_BATTLE::CGuildBattleRewardItem*))&std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>::construct) },
            {   (LPVOID)0x1403d1920L,
                (LPVOID *)&std__allocatordeallocate10_user,
                (LPVOID *)&std__allocatordeallocate10_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate10_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>::*)(struct GUILD_BATTLE::CGuildBattleRewardItem*, uint64_t))&std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>::deallocate) },
            {   (LPVOID)0x1403d2fa0L,
                (LPVOID *)&std__allocatordestroy12_user,
                (LPVOID *)&std__allocatordestroy12_next,
                (LPVOID)cast_pointer_function(std__allocatordestroy12_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>::*)(struct GUILD_BATTLE::CGuildBattleRewardItem*))&std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>::destroy) },
            {   (LPVOID)0x1403d22f0L,
                (LPVOID *)&std__allocatormax_size14_user,
                (LPVOID *)&std__allocatormax_size14_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size14_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>::*)())&std::allocator<GUILD_BATTLE::CGuildBattleRewardItem>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatorconstruct8_ptr std__allocatorconstruct8_next(nullptr);
            info::std__allocatorconstruct8_clbk std__allocatorconstruct8_user(nullptr);
            info::std__allocatordeallocate10_ptr std__allocatordeallocate10_next(nullptr);
            info::std__allocatordeallocate10_clbk std__allocatordeallocate10_user(nullptr);
            info::std__allocatordestroy12_ptr std__allocatordestroy12_next(nullptr);
            info::std__allocatordestroy12_clbk std__allocatordestroy12_user(nullptr);
            info::std__allocatormax_size14_ptr std__allocatormax_size14_next(nullptr);
            info::std__allocatormax_size14_clbk std__allocatormax_size14_user(nullptr);
            
            struct CLogTypeDBTask** std__allocatorallocate2_wrapper(struct std::allocator<CLogTypeDBTask *>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<CLogTypeDBTask *>* _this, struct std::allocator<CLogTypeDBTask *>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<CLogTypeDBTask *>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatorconstruct8_wrapper(struct std::allocator<CLogTypeDBTask *>* _this, struct CLogTypeDBTask** _Ptr, struct CLogTypeDBTask** _Val)
            {
               std__allocatorconstruct8_user(_this, _Ptr, _Val);
            };
            void std__allocatordeallocate10_wrapper(struct std::allocator<CLogTypeDBTask *>* _this, struct CLogTypeDBTask** _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate10_user(_this, _Ptr, __formal);
            };
            void std__allocatordestroy12_wrapper(struct std::allocator<CLogTypeDBTask *>* _this, struct CLogTypeDBTask** _Ptr)
            {
               std__allocatordestroy12_user(_this, _Ptr);
            };
            uint64_t std__allocatormax_size14_wrapper(struct std::allocator<CLogTypeDBTask *>* _this)
            {
               return std__allocatormax_size14_user(_this);
            };
            
            hook_record allocator<CLogTypeDBTask *>_functions[] = {
            {   (LPVOID)0x1402c5c60L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct CLogTypeDBTask**(std::allocator<CLogTypeDBTask *>::*)(uint64_t))&std::allocator<CLogTypeDBTask *>::allocate) },
            {   (LPVOID)0x1402c67e0L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CLogTypeDBTask *>::*)(struct std::allocator<CLogTypeDBTask *>*))&std::allocator<CLogTypeDBTask *>::ctor_allocator) },
            {   (LPVOID)0x1402c5c00L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CLogTypeDBTask *>::*)())&std::allocator<CLogTypeDBTask *>::ctor_allocator) },
            {   (LPVOID)0x1402c8310L,
                (LPVOID *)&std__allocatorconstruct8_user,
                (LPVOID *)&std__allocatorconstruct8_next,
                (LPVOID)cast_pointer_function(std__allocatorconstruct8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CLogTypeDBTask *>::*)(struct CLogTypeDBTask**, struct CLogTypeDBTask**))&std::allocator<CLogTypeDBTask *>::construct) },
            {   (LPVOID)0x1402c5c10L,
                (LPVOID *)&std__allocatordeallocate10_user,
                (LPVOID *)&std__allocatordeallocate10_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate10_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CLogTypeDBTask *>::*)(struct CLogTypeDBTask**, uint64_t))&std::allocator<CLogTypeDBTask *>::deallocate) },
            {   (LPVOID)0x1402c8370L,
                (LPVOID *)&std__allocatordestroy12_user,
                (LPVOID *)&std__allocatordestroy12_next,
                (LPVOID)cast_pointer_function(std__allocatordestroy12_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CLogTypeDBTask *>::*)(struct CLogTypeDBTask**))&std::allocator<CLogTypeDBTask *>::destroy) },
            {   (LPVOID)0x1402c6800L,
                (LPVOID *)&std__allocatormax_size14_user,
                (LPVOID *)&std__allocatormax_size14_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size14_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<CLogTypeDBTask *>::*)())&std::allocator<CLogTypeDBTask *>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatordeallocate8_ptr std__allocatordeallocate8_next(nullptr);
            info::std__allocatordeallocate8_clbk std__allocatordeallocate8_user(nullptr);
            info::std__allocatormax_size10_ptr std__allocatormax_size10_next(nullptr);
            info::std__allocatormax_size10_clbk std__allocatormax_size10_user(nullptr);
            
            struct CRaceBuffInfoByHolyQuest** std__allocatorallocate2_wrapper(struct std::allocator<CRaceBuffInfoByHolyQuest *>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<CRaceBuffInfoByHolyQuest *>* _this, struct std::allocator<CRaceBuffInfoByHolyQuest *>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<CRaceBuffInfoByHolyQuest *>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatordeallocate8_wrapper(struct std::allocator<CRaceBuffInfoByHolyQuest *>* _this, struct CRaceBuffInfoByHolyQuest** _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate8_user(_this, _Ptr, __formal);
            };
            uint64_t std__allocatormax_size10_wrapper(struct std::allocator<CRaceBuffInfoByHolyQuest *>* _this)
            {
               return std__allocatormax_size10_user(_this);
            };
            
            hook_record allocator<CRaceBuffInfoByHolyQuest *>_functions[] = {
            {   (LPVOID)0x1403b9570L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct CRaceBuffInfoByHolyQuest**(std::allocator<CRaceBuffInfoByHolyQuest *>::*)(uint64_t))&std::allocator<CRaceBuffInfoByHolyQuest *>::allocate) },
            {   (LPVOID)0x1403b9500L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CRaceBuffInfoByHolyQuest *>::*)(struct std::allocator<CRaceBuffInfoByHolyQuest *>*))&std::allocator<CRaceBuffInfoByHolyQuest *>::ctor_allocator) },
            {   (LPVOID)0x1403b8ad0L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CRaceBuffInfoByHolyQuest *>::*)())&std::allocator<CRaceBuffInfoByHolyQuest *>::ctor_allocator) },
            {   (LPVOID)0x1403b9520L,
                (LPVOID *)&std__allocatordeallocate8_user,
                (LPVOID *)&std__allocatordeallocate8_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CRaceBuffInfoByHolyQuest *>::*)(struct CRaceBuffInfoByHolyQuest**, uint64_t))&std::allocator<CRaceBuffInfoByHolyQuest *>::deallocate) },
            {   (LPVOID)0x1403ba490L,
                (LPVOID *)&std__allocatormax_size10_user,
                (LPVOID *)&std__allocatormax_size10_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size10_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<CRaceBuffInfoByHolyQuest *>::*)())&std::allocator<CRaceBuffInfoByHolyQuest *>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatordeallocate8_ptr std__allocatordeallocate8_next(nullptr);
            info::std__allocatordeallocate8_clbk std__allocatordeallocate8_user(nullptr);
            info::std__allocatormax_size10_ptr std__allocatormax_size10_next(nullptr);
            info::std__allocatormax_size10_clbk std__allocatormax_size10_user(nullptr);
            
            struct CRaceBuffInfoByHolyQuestfGroup** std__allocatorallocate2_wrapper(struct std::allocator<CRaceBuffInfoByHolyQuestfGroup *>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<CRaceBuffInfoByHolyQuestfGroup *>* _this, struct std::allocator<CRaceBuffInfoByHolyQuestfGroup *>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<CRaceBuffInfoByHolyQuestfGroup *>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatordeallocate8_wrapper(struct std::allocator<CRaceBuffInfoByHolyQuestfGroup *>* _this, struct CRaceBuffInfoByHolyQuestfGroup** _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate8_user(_this, _Ptr, __formal);
            };
            uint64_t std__allocatormax_size10_wrapper(struct std::allocator<CRaceBuffInfoByHolyQuestfGroup *>* _this)
            {
               return std__allocatormax_size10_user(_this);
            };
            
            hook_record allocator<CRaceBuffInfoByHolyQuestfGroup *>_functions[] = {
            {   (LPVOID)0x1403b9a90L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct CRaceBuffInfoByHolyQuestfGroup**(std::allocator<CRaceBuffInfoByHolyQuestfGroup *>::*)(uint64_t))&std::allocator<CRaceBuffInfoByHolyQuestfGroup *>::allocate) },
            {   (LPVOID)0x1403b9a20L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CRaceBuffInfoByHolyQuestfGroup *>::*)(struct std::allocator<CRaceBuffInfoByHolyQuestfGroup *>*))&std::allocator<CRaceBuffInfoByHolyQuestfGroup *>::ctor_allocator) },
            {   (LPVOID)0x1403b8ef0L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CRaceBuffInfoByHolyQuestfGroup *>::*)())&std::allocator<CRaceBuffInfoByHolyQuestfGroup *>::ctor_allocator) },
            {   (LPVOID)0x1403b9a40L,
                (LPVOID *)&std__allocatordeallocate8_user,
                (LPVOID *)&std__allocatordeallocate8_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CRaceBuffInfoByHolyQuestfGroup *>::*)(struct CRaceBuffInfoByHolyQuestfGroup**, uint64_t))&std::allocator<CRaceBuffInfoByHolyQuestfGroup *>::deallocate) },
            {   (LPVOID)0x1403bac90L,
                (LPVOID *)&std__allocatormax_size10_user,
                (LPVOID *)&std__allocatormax_size10_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size10_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<CRaceBuffInfoByHolyQuestfGroup *>::*)())&std::allocator<CRaceBuffInfoByHolyQuestfGroup *>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatorconstruct8_ptr std__allocatorconstruct8_next(nullptr);
            info::std__allocatorconstruct8_clbk std__allocatorconstruct8_user(nullptr);
            info::std__allocatordeallocate10_ptr std__allocatordeallocate10_next(nullptr);
            info::std__allocatordeallocate10_clbk std__allocatordeallocate10_user(nullptr);
            info::std__allocatordestroy12_ptr std__allocatordestroy12_next(nullptr);
            info::std__allocatordestroy12_clbk std__allocatordestroy12_user(nullptr);
            info::std__allocatormax_size14_ptr std__allocatormax_size14_next(nullptr);
            info::std__allocatormax_size14_clbk std__allocatormax_size14_user(nullptr);
            
            struct CMoveMapLimitRight** std__allocatorallocate2_wrapper(struct std::allocator<CMoveMapLimitRight *>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<CMoveMapLimitRight *>* _this, struct std::allocator<CMoveMapLimitRight *>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<CMoveMapLimitRight *>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatorconstruct8_wrapper(struct std::allocator<CMoveMapLimitRight *>* _this, struct CMoveMapLimitRight** _Ptr, struct CMoveMapLimitRight** _Val)
            {
               std__allocatorconstruct8_user(_this, _Ptr, _Val);
            };
            void std__allocatordeallocate10_wrapper(struct std::allocator<CMoveMapLimitRight *>* _this, struct CMoveMapLimitRight** _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate10_user(_this, _Ptr, __formal);
            };
            void std__allocatordestroy12_wrapper(struct std::allocator<CMoveMapLimitRight *>* _this, struct CMoveMapLimitRight** _Ptr)
            {
               std__allocatordestroy12_user(_this, _Ptr);
            };
            uint64_t std__allocatormax_size14_wrapper(struct std::allocator<CMoveMapLimitRight *>* _this)
            {
               return std__allocatormax_size14_user(_this);
            };
            
            hook_record allocator<CMoveMapLimitRight *>_functions[] = {
            {   (LPVOID)0x1403b0610L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct CMoveMapLimitRight**(std::allocator<CMoveMapLimitRight *>::*)(uint64_t))&std::allocator<CMoveMapLimitRight *>::allocate) },
            {   (LPVOID)0x1403b05f0L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CMoveMapLimitRight *>::*)(struct std::allocator<CMoveMapLimitRight *>*))&std::allocator<CMoveMapLimitRight *>::ctor_allocator) },
            {   (LPVOID)0x1403af5d0L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CMoveMapLimitRight *>::*)())&std::allocator<CMoveMapLimitRight *>::ctor_allocator) },
            {   (LPVOID)0x1403b38b0L,
                (LPVOID *)&std__allocatorconstruct8_user,
                (LPVOID *)&std__allocatorconstruct8_next,
                (LPVOID)cast_pointer_function(std__allocatorconstruct8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CMoveMapLimitRight *>::*)(struct CMoveMapLimitRight**, struct CMoveMapLimitRight**))&std::allocator<CMoveMapLimitRight *>::construct) },
            {   (LPVOID)0x1403a3bb0L,
                (LPVOID *)&std__allocatordeallocate10_user,
                (LPVOID *)&std__allocatordeallocate10_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate10_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CMoveMapLimitRight *>::*)(struct CMoveMapLimitRight**, uint64_t))&std::allocator<CMoveMapLimitRight *>::deallocate) },
            {   (LPVOID)0x1403b3910L,
                (LPVOID *)&std__allocatordestroy12_user,
                (LPVOID *)&std__allocatordestroy12_next,
                (LPVOID)cast_pointer_function(std__allocatordestroy12_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CMoveMapLimitRight *>::*)(struct CMoveMapLimitRight**))&std::allocator<CMoveMapLimitRight *>::destroy) },
            {   (LPVOID)0x1403b0cc0L,
                (LPVOID *)&std__allocatormax_size14_user,
                (LPVOID *)&std__allocatormax_size14_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size14_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<CMoveMapLimitRight *>::*)())&std::allocator<CMoveMapLimitRight *>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatorconstruct8_ptr std__allocatorconstruct8_next(nullptr);
            info::std__allocatorconstruct8_clbk std__allocatorconstruct8_user(nullptr);
            info::std__allocatordeallocate10_ptr std__allocatordeallocate10_next(nullptr);
            info::std__allocatordeallocate10_clbk std__allocatordeallocate10_user(nullptr);
            info::std__allocatordestroy12_ptr std__allocatordestroy12_next(nullptr);
            info::std__allocatordestroy12_clbk std__allocatordestroy12_user(nullptr);
            info::std__allocatormax_size14_ptr std__allocatormax_size14_next(nullptr);
            info::std__allocatormax_size14_clbk std__allocatormax_size14_user(nullptr);
            
            struct CMoveMapLimitRightInfo* std__allocatorallocate2_wrapper(struct std::allocator<CMoveMapLimitRightInfo>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<CMoveMapLimitRightInfo>* _this, struct std::allocator<CMoveMapLimitRightInfo>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<CMoveMapLimitRightInfo>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatorconstruct8_wrapper(struct std::allocator<CMoveMapLimitRightInfo>* _this, struct CMoveMapLimitRightInfo* _Ptr, struct CMoveMapLimitRightInfo* _Val)
            {
               std__allocatorconstruct8_user(_this, _Ptr, _Val);
            };
            void std__allocatordeallocate10_wrapper(struct std::allocator<CMoveMapLimitRightInfo>* _this, struct CMoveMapLimitRightInfo* _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate10_user(_this, _Ptr, __formal);
            };
            void std__allocatordestroy12_wrapper(struct std::allocator<CMoveMapLimitRightInfo>* _this, struct CMoveMapLimitRightInfo* _Ptr)
            {
               std__allocatordestroy12_user(_this, _Ptr);
            };
            uint64_t std__allocatormax_size14_wrapper(struct std::allocator<CMoveMapLimitRightInfo>* _this)
            {
               return std__allocatormax_size14_user(_this);
            };
            
            hook_record allocator<CMoveMapLimitRightInfo>_functions[] = {
            {   (LPVOID)0x1403a2f00L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct CMoveMapLimitRightInfo*(std::allocator<CMoveMapLimitRightInfo>::*)(uint64_t))&std::allocator<CMoveMapLimitRightInfo>::allocate) },
            {   (LPVOID)0x1403a2e90L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CMoveMapLimitRightInfo>::*)(struct std::allocator<CMoveMapLimitRightInfo>*))&std::allocator<CMoveMapLimitRightInfo>::ctor_allocator) },
            {   (LPVOID)0x1403a2800L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CMoveMapLimitRightInfo>::*)())&std::allocator<CMoveMapLimitRightInfo>::ctor_allocator) },
            {   (LPVOID)0x1403b3190L,
                (LPVOID *)&std__allocatorconstruct8_user,
                (LPVOID *)&std__allocatorconstruct8_next,
                (LPVOID)cast_pointer_function(std__allocatorconstruct8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CMoveMapLimitRightInfo>::*)(struct CMoveMapLimitRightInfo*, struct CMoveMapLimitRightInfo*))&std::allocator<CMoveMapLimitRightInfo>::construct) },
            {   (LPVOID)0x1403a2eb0L,
                (LPVOID *)&std__allocatordeallocate10_user,
                (LPVOID *)&std__allocatordeallocate10_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate10_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CMoveMapLimitRightInfo>::*)(struct CMoveMapLimitRightInfo*, uint64_t))&std::allocator<CMoveMapLimitRightInfo>::deallocate) },
            {   (LPVOID)0x1403a3880L,
                (LPVOID *)&std__allocatordestroy12_user,
                (LPVOID *)&std__allocatordestroy12_next,
                (LPVOID)cast_pointer_function(std__allocatordestroy12_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CMoveMapLimitRightInfo>::*)(struct CMoveMapLimitRightInfo*))&std::allocator<CMoveMapLimitRightInfo>::destroy) },
            {   (LPVOID)0x1403a3230L,
                (LPVOID *)&std__allocatormax_size14_user,
                (LPVOID *)&std__allocatormax_size14_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size14_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<CMoveMapLimitRightInfo>::*)())&std::allocator<CMoveMapLimitRightInfo>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatordeallocate8_ptr std__allocatordeallocate8_next(nullptr);
            info::std__allocatordeallocate8_clbk std__allocatordeallocate8_user(nullptr);
            info::std__allocatormax_size10_ptr std__allocatormax_size10_next(nullptr);
            info::std__allocatormax_size10_clbk std__allocatormax_size10_user(nullptr);
            
            int* std__allocatorallocate2_wrapper(struct std::allocator<int>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<int>* _this, struct std::allocator<int>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<int>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatordeallocate8_wrapper(struct std::allocator<int>* _this, int* _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate8_user(_this, _Ptr, __formal);
            };
            uint64_t std__allocatormax_size10_wrapper(struct std::allocator<int>* _this)
            {
               return std__allocatormax_size10_user(_this);
            };
            
            hook_record allocator<int>_functions[] = {
            {   (LPVOID)0x1403a3170L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((int*(std::allocator<int>::*)(uint64_t))&std::allocator<int>::allocate) },
            {   (LPVOID)0x1403a3100L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<int>::*)(struct std::allocator<int>*))&std::allocator<int>::ctor_allocator) },
            {   (LPVOID)0x1403a2a60L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<int>::*)())&std::allocator<int>::ctor_allocator) },
            {   (LPVOID)0x1403a3120L,
                (LPVOID *)&std__allocatordeallocate8_user,
                (LPVOID *)&std__allocatordeallocate8_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<int>::*)(int*, uint64_t))&std::allocator<int>::deallocate) },
            {   (LPVOID)0x1403a32a0L,
                (LPVOID *)&std__allocatormax_size10_user,
                (LPVOID *)&std__allocatormax_size10_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size10_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<int>::*)())&std::allocator<int>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatordeallocate8_ptr std__allocatordeallocate8_next(nullptr);
            info::std__allocatordeallocate8_clbk std__allocatordeallocate8_user(nullptr);
            info::std__allocatormax_size10_ptr std__allocatormax_size10_next(nullptr);
            info::std__allocatormax_size10_clbk std__allocatormax_size10_user(nullptr);
            
            char** std__allocatorallocate2_wrapper(struct std::allocator<char *>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<char *>* _this, struct std::allocator<char *>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<char *>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatordeallocate8_wrapper(struct std::allocator<char *>* _this, char** _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate8_user(_this, _Ptr, __formal);
            };
            uint64_t std__allocatormax_size10_wrapper(struct std::allocator<char *>* _this)
            {
               return std__allocatormax_size10_user(_this);
            };
            
            hook_record allocator<char *>_functions[] = {
            {   (LPVOID)0x1403a9160L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((char**(std::allocator<char *>::*)(uint64_t))&std::allocator<char *>::allocate) },
            {   (LPVOID)0x1403a90f0L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<char *>::*)(struct std::allocator<char *>*))&std::allocator<char *>::ctor_allocator) },
            {   (LPVOID)0x1403a8300L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<char *>::*)())&std::allocator<char *>::ctor_allocator) },
            {   (LPVOID)0x1403a9110L,
                (LPVOID *)&std__allocatordeallocate8_user,
                (LPVOID *)&std__allocatordeallocate8_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<char *>::*)(char**, uint64_t))&std::allocator<char *>::deallocate) },
            {   (LPVOID)0x1403a9dd0L,
                (LPVOID *)&std__allocatormax_size10_user,
                (LPVOID *)&std__allocatormax_size10_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size10_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<char *>::*)())&std::allocator<char *>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatordeallocate8_ptr std__allocatordeallocate8_next(nullptr);
            info::std__allocatordeallocate8_clbk std__allocatordeallocate8_user(nullptr);
            info::std__allocatormax_size10_ptr std__allocatormax_size10_next(nullptr);
            info::std__allocatormax_size10_clbk std__allocatormax_size10_user(nullptr);
            
            struct CMoveMapLimitInfo** std__allocatorallocate2_wrapper(struct std::allocator<CMoveMapLimitInfo *>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<CMoveMapLimitInfo *>* _this, struct std::allocator<CMoveMapLimitInfo *>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<CMoveMapLimitInfo *>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatordeallocate8_wrapper(struct std::allocator<CMoveMapLimitInfo *>* _this, struct CMoveMapLimitInfo** _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate8_user(_this, _Ptr, __formal);
            };
            uint64_t std__allocatormax_size10_wrapper(struct std::allocator<CMoveMapLimitInfo *>* _this)
            {
               return std__allocatormax_size10_user(_this);
            };
            
            hook_record allocator<CMoveMapLimitInfo *>_functions[] = {
            {   (LPVOID)0x1403a2c90L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct CMoveMapLimitInfo**(std::allocator<CMoveMapLimitInfo *>::*)(uint64_t))&std::allocator<CMoveMapLimitInfo *>::allocate) },
            {   (LPVOID)0x1403a2c20L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CMoveMapLimitInfo *>::*)(struct std::allocator<CMoveMapLimitInfo *>*))&std::allocator<CMoveMapLimitInfo *>::ctor_allocator) },
            {   (LPVOID)0x1403a25a0L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CMoveMapLimitInfo *>::*)())&std::allocator<CMoveMapLimitInfo *>::ctor_allocator) },
            {   (LPVOID)0x1403a2c40L,
                (LPVOID *)&std__allocatordeallocate8_user,
                (LPVOID *)&std__allocatordeallocate8_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CMoveMapLimitInfo *>::*)(struct CMoveMapLimitInfo**, uint64_t))&std::allocator<CMoveMapLimitInfo *>::deallocate) },
            {   (LPVOID)0x1403a31c0L,
                (LPVOID *)&std__allocatormax_size10_user,
                (LPVOID *)&std__allocatormax_size10_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size10_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<CMoveMapLimitInfo *>::*)())&std::allocator<CMoveMapLimitInfo *>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatorconstruct8_ptr std__allocatorconstruct8_next(nullptr);
            info::std__allocatorconstruct8_clbk std__allocatorconstruct8_user(nullptr);
            info::std__allocatordeallocate10_ptr std__allocatordeallocate10_next(nullptr);
            info::std__allocatordeallocate10_clbk std__allocatordeallocate10_user(nullptr);
            info::std__allocatordestroy12_ptr std__allocatordestroy12_next(nullptr);
            info::std__allocatordestroy12_clbk std__allocatordestroy12_user(nullptr);
            info::std__allocatormax_size14_ptr std__allocatormax_size14_next(nullptr);
            info::std__allocatormax_size14_clbk std__allocatormax_size14_user(nullptr);
            
            struct CUnmannedTraderGroupDivisionVersionInfo* std__allocatorallocate2_wrapper(struct std::allocator<CUnmannedTraderGroupDivisionVersionInfo>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<CUnmannedTraderGroupDivisionVersionInfo>* _this, struct std::allocator<CUnmannedTraderGroupDivisionVersionInfo>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<CUnmannedTraderGroupDivisionVersionInfo>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatorconstruct8_wrapper(struct std::allocator<CUnmannedTraderGroupDivisionVersionInfo>* _this, struct CUnmannedTraderGroupDivisionVersionInfo* _Ptr, struct CUnmannedTraderGroupDivisionVersionInfo* _Val)
            {
               std__allocatorconstruct8_user(_this, _Ptr, _Val);
            };
            void std__allocatordeallocate10_wrapper(struct std::allocator<CUnmannedTraderGroupDivisionVersionInfo>* _this, struct CUnmannedTraderGroupDivisionVersionInfo* _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate10_user(_this, _Ptr, __formal);
            };
            void std__allocatordestroy12_wrapper(struct std::allocator<CUnmannedTraderGroupDivisionVersionInfo>* _this, struct CUnmannedTraderGroupDivisionVersionInfo* _Ptr)
            {
               std__allocatordestroy12_user(_this, _Ptr);
            };
            uint64_t std__allocatormax_size14_wrapper(struct std::allocator<CUnmannedTraderGroupDivisionVersionInfo>* _this)
            {
               return std__allocatormax_size14_user(_this);
            };
            
            hook_record allocator<CUnmannedTraderGroupDivisionVersionInfo>_functions[] = {
            {   (LPVOID)0x14036c740L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct CUnmannedTraderGroupDivisionVersionInfo*(std::allocator<CUnmannedTraderGroupDivisionVersionInfo>::*)(uint64_t))&std::allocator<CUnmannedTraderGroupDivisionVersionInfo>::allocate) },
            {   (LPVOID)0x14036c6d0L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderGroupDivisionVersionInfo>::*)(struct std::allocator<CUnmannedTraderGroupDivisionVersionInfo>*))&std::allocator<CUnmannedTraderGroupDivisionVersionInfo>::ctor_allocator) },
            {   (LPVOID)0x14036c2b0L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderGroupDivisionVersionInfo>::*)())&std::allocator<CUnmannedTraderGroupDivisionVersionInfo>::ctor_allocator) },
            {   (LPVOID)0x14039b3a0L,
                (LPVOID *)&std__allocatorconstruct8_user,
                (LPVOID *)&std__allocatorconstruct8_next,
                (LPVOID)cast_pointer_function(std__allocatorconstruct8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderGroupDivisionVersionInfo>::*)(struct CUnmannedTraderGroupDivisionVersionInfo*, struct CUnmannedTraderGroupDivisionVersionInfo*))&std::allocator<CUnmannedTraderGroupDivisionVersionInfo>::construct) },
            {   (LPVOID)0x14036c6f0L,
                (LPVOID *)&std__allocatordeallocate10_user,
                (LPVOID *)&std__allocatordeallocate10_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate10_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderGroupDivisionVersionInfo>::*)(struct CUnmannedTraderGroupDivisionVersionInfo*, uint64_t))&std::allocator<CUnmannedTraderGroupDivisionVersionInfo>::deallocate) },
            {   (LPVOID)0x14036cf00L,
                (LPVOID *)&std__allocatordestroy12_user,
                (LPVOID *)&std__allocatordestroy12_next,
                (LPVOID)cast_pointer_function(std__allocatordestroy12_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderGroupDivisionVersionInfo>::*)(struct CUnmannedTraderGroupDivisionVersionInfo*))&std::allocator<CUnmannedTraderGroupDivisionVersionInfo>::destroy) },
            {   (LPVOID)0x14036ca00L,
                (LPVOID *)&std__allocatormax_size14_user,
                (LPVOID *)&std__allocatormax_size14_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size14_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<CUnmannedTraderGroupDivisionVersionInfo>::*)())&std::allocator<CUnmannedTraderGroupDivisionVersionInfo>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatorconstruct8_ptr std__allocatorconstruct8_next(nullptr);
            info::std__allocatorconstruct8_clbk std__allocatorconstruct8_user(nullptr);
            info::std__allocatordeallocate10_ptr std__allocatordeallocate10_next(nullptr);
            info::std__allocatordeallocate10_clbk std__allocatordeallocate10_user(nullptr);
            info::std__allocatordestroy12_ptr std__allocatordestroy12_next(nullptr);
            info::std__allocatordestroy12_clbk std__allocatordestroy12_user(nullptr);
            info::std__allocatormax_size14_ptr std__allocatormax_size14_next(nullptr);
            info::std__allocatormax_size14_clbk std__allocatormax_size14_user(nullptr);
            
            struct CUnmannedTraderRegistItemInfo* std__allocatorallocate2_wrapper(struct std::allocator<CUnmannedTraderRegistItemInfo>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<CUnmannedTraderRegistItemInfo>* _this, struct std::allocator<CUnmannedTraderRegistItemInfo>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<CUnmannedTraderRegistItemInfo>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatorconstruct8_wrapper(struct std::allocator<CUnmannedTraderRegistItemInfo>* _this, struct CUnmannedTraderRegistItemInfo* _Ptr, struct CUnmannedTraderRegistItemInfo* _Val)
            {
               std__allocatorconstruct8_user(_this, _Ptr, _Val);
            };
            void std__allocatordeallocate10_wrapper(struct std::allocator<CUnmannedTraderRegistItemInfo>* _this, struct CUnmannedTraderRegistItemInfo* _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate10_user(_this, _Ptr, __formal);
            };
            void std__allocatordestroy12_wrapper(struct std::allocator<CUnmannedTraderRegistItemInfo>* _this, struct CUnmannedTraderRegistItemInfo* _Ptr)
            {
               std__allocatordestroy12_user(_this, _Ptr);
            };
            uint64_t std__allocatormax_size14_wrapper(struct std::allocator<CUnmannedTraderRegistItemInfo>* _this)
            {
               return std__allocatormax_size14_user(_this);
            };
            
            hook_record allocator<CUnmannedTraderRegistItemInfo>_functions[] = {
            {   (LPVOID)0x140361c60L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct CUnmannedTraderRegistItemInfo*(std::allocator<CUnmannedTraderRegistItemInfo>::*)(uint64_t))&std::allocator<CUnmannedTraderRegistItemInfo>::allocate) },
            {   (LPVOID)0x140361bf0L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderRegistItemInfo>::*)(struct std::allocator<CUnmannedTraderRegistItemInfo>*))&std::allocator<CUnmannedTraderRegistItemInfo>::ctor_allocator) },
            {   (LPVOID)0x140361670L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderRegistItemInfo>::*)())&std::allocator<CUnmannedTraderRegistItemInfo>::ctor_allocator) },
            {   (LPVOID)0x140363190L,
                (LPVOID *)&std__allocatorconstruct8_user,
                (LPVOID *)&std__allocatorconstruct8_next,
                (LPVOID)cast_pointer_function(std__allocatorconstruct8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderRegistItemInfo>::*)(struct CUnmannedTraderRegistItemInfo*, struct CUnmannedTraderRegistItemInfo*))&std::allocator<CUnmannedTraderRegistItemInfo>::construct) },
            {   (LPVOID)0x140361c10L,
                (LPVOID *)&std__allocatordeallocate10_user,
                (LPVOID *)&std__allocatordeallocate10_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate10_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderRegistItemInfo>::*)(struct CUnmannedTraderRegistItemInfo*, uint64_t))&std::allocator<CUnmannedTraderRegistItemInfo>::deallocate) },
            {   (LPVOID)0x1403631f0L,
                (LPVOID *)&std__allocatordestroy12_user,
                (LPVOID *)&std__allocatordestroy12_next,
                (LPVOID)cast_pointer_function(std__allocatordestroy12_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderRegistItemInfo>::*)(struct CUnmannedTraderRegistItemInfo*))&std::allocator<CUnmannedTraderRegistItemInfo>::destroy) },
            {   (LPVOID)0x1403626a0L,
                (LPVOID *)&std__allocatormax_size14_user,
                (LPVOID *)&std__allocatormax_size14_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size14_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<CUnmannedTraderRegistItemInfo>::*)())&std::allocator<CUnmannedTraderRegistItemInfo>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatorconstruct8_ptr std__allocatorconstruct8_next(nullptr);
            info::std__allocatorconstruct8_clbk std__allocatorconstruct8_user(nullptr);
            info::std__allocatordeallocate10_ptr std__allocatordeallocate10_next(nullptr);
            info::std__allocatordeallocate10_clbk std__allocatordeallocate10_user(nullptr);
            info::std__allocatordestroy12_ptr std__allocatordestroy12_next(nullptr);
            info::std__allocatordestroy12_clbk std__allocatordestroy12_user(nullptr);
            info::std__allocatormax_size14_ptr std__allocatormax_size14_next(nullptr);
            info::std__allocatormax_size14_clbk std__allocatormax_size14_user(nullptr);
            
            struct CUnmannedTraderUserInfo* std__allocatorallocate2_wrapper(struct std::allocator<CUnmannedTraderUserInfo>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<CUnmannedTraderUserInfo>* _this, struct std::allocator<CUnmannedTraderUserInfo>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<CUnmannedTraderUserInfo>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatorconstruct8_wrapper(struct std::allocator<CUnmannedTraderUserInfo>* _this, struct CUnmannedTraderUserInfo* _Ptr, struct CUnmannedTraderUserInfo* _Val)
            {
               std__allocatorconstruct8_user(_this, _Ptr, _Val);
            };
            void std__allocatordeallocate10_wrapper(struct std::allocator<CUnmannedTraderUserInfo>* _this, struct CUnmannedTraderUserInfo* _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate10_user(_this, _Ptr, __formal);
            };
            void std__allocatordestroy12_wrapper(struct std::allocator<CUnmannedTraderUserInfo>* _this, struct CUnmannedTraderUserInfo* _Ptr)
            {
               std__allocatordestroy12_user(_this, _Ptr);
            };
            uint64_t std__allocatormax_size14_wrapper(struct std::allocator<CUnmannedTraderUserInfo>* _this)
            {
               return std__allocatormax_size14_user(_this);
            };
            
            hook_record allocator<CUnmannedTraderUserInfo>_functions[] = {
            {   (LPVOID)0x140368180L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct CUnmannedTraderUserInfo*(std::allocator<CUnmannedTraderUserInfo>::*)(uint64_t))&std::allocator<CUnmannedTraderUserInfo>::allocate) },
            {   (LPVOID)0x140368110L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderUserInfo>::*)(struct std::allocator<CUnmannedTraderUserInfo>*))&std::allocator<CUnmannedTraderUserInfo>::ctor_allocator) },
            {   (LPVOID)0x140367870L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderUserInfo>::*)())&std::allocator<CUnmannedTraderUserInfo>::ctor_allocator) },
            {   (LPVOID)0x14036a620L,
                (LPVOID *)&std__allocatorconstruct8_user,
                (LPVOID *)&std__allocatorconstruct8_next,
                (LPVOID)cast_pointer_function(std__allocatorconstruct8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderUserInfo>::*)(struct CUnmannedTraderUserInfo*, struct CUnmannedTraderUserInfo*))&std::allocator<CUnmannedTraderUserInfo>::construct) },
            {   (LPVOID)0x140368130L,
                (LPVOID *)&std__allocatordeallocate10_user,
                (LPVOID *)&std__allocatordeallocate10_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate10_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderUserInfo>::*)(struct CUnmannedTraderUserInfo*, uint64_t))&std::allocator<CUnmannedTraderUserInfo>::deallocate) },
            {   (LPVOID)0x14036a680L,
                (LPVOID *)&std__allocatordestroy12_user,
                (LPVOID *)&std__allocatordestroy12_next,
                (LPVOID)cast_pointer_function(std__allocatordestroy12_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderUserInfo>::*)(struct CUnmannedTraderUserInfo*))&std::allocator<CUnmannedTraderUserInfo>::destroy) },
            {   (LPVOID)0x140368d30L,
                (LPVOID *)&std__allocatormax_size14_user,
                (LPVOID *)&std__allocatormax_size14_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size14_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<CUnmannedTraderUserInfo>::*)())&std::allocator<CUnmannedTraderUserInfo>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatorconstruct8_ptr std__allocatorconstruct8_next(nullptr);
            info::std__allocatorconstruct8_clbk std__allocatorconstruct8_user(nullptr);
            info::std__allocatordeallocate10_ptr std__allocatordeallocate10_next(nullptr);
            info::std__allocatordeallocate10_clbk std__allocatordeallocate10_user(nullptr);
            info::std__allocatordestroy12_ptr std__allocatordestroy12_next(nullptr);
            info::std__allocatordestroy12_clbk std__allocatordestroy12_user(nullptr);
            info::std__allocatormax_size14_ptr std__allocatormax_size14_next(nullptr);
            info::std__allocatormax_size14_clbk std__allocatormax_size14_user(nullptr);
            
            struct CUnmannedTraderSchedule* std__allocatorallocate2_wrapper(struct std::allocator<CUnmannedTraderSchedule>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<CUnmannedTraderSchedule>* _this, struct std::allocator<CUnmannedTraderSchedule>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<CUnmannedTraderSchedule>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatorconstruct8_wrapper(struct std::allocator<CUnmannedTraderSchedule>* _this, struct CUnmannedTraderSchedule* _Ptr, struct CUnmannedTraderSchedule* _Val)
            {
               std__allocatorconstruct8_user(_this, _Ptr, _Val);
            };
            void std__allocatordeallocate10_wrapper(struct std::allocator<CUnmannedTraderSchedule>* _this, struct CUnmannedTraderSchedule* _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate10_user(_this, _Ptr, __formal);
            };
            void std__allocatordestroy12_wrapper(struct std::allocator<CUnmannedTraderSchedule>* _this, struct CUnmannedTraderSchedule* _Ptr)
            {
               std__allocatordestroy12_user(_this, _Ptr);
            };
            uint64_t std__allocatormax_size14_wrapper(struct std::allocator<CUnmannedTraderSchedule>* _this)
            {
               return std__allocatormax_size14_user(_this);
            };
            
            hook_record allocator<CUnmannedTraderSchedule>_functions[] = {
            {   (LPVOID)0x140395cd0L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct CUnmannedTraderSchedule*(std::allocator<CUnmannedTraderSchedule>::*)(uint64_t))&std::allocator<CUnmannedTraderSchedule>::allocate) },
            {   (LPVOID)0x140395c60L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderSchedule>::*)(struct std::allocator<CUnmannedTraderSchedule>*))&std::allocator<CUnmannedTraderSchedule>::ctor_allocator) },
            {   (LPVOID)0x140395690L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderSchedule>::*)())&std::allocator<CUnmannedTraderSchedule>::ctor_allocator) },
            {   (LPVOID)0x1403970e0L,
                (LPVOID *)&std__allocatorconstruct8_user,
                (LPVOID *)&std__allocatorconstruct8_next,
                (LPVOID)cast_pointer_function(std__allocatorconstruct8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderSchedule>::*)(struct CUnmannedTraderSchedule*, struct CUnmannedTraderSchedule*))&std::allocator<CUnmannedTraderSchedule>::construct) },
            {   (LPVOID)0x140395c80L,
                (LPVOID *)&std__allocatordeallocate10_user,
                (LPVOID *)&std__allocatordeallocate10_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate10_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderSchedule>::*)(struct CUnmannedTraderSchedule*, uint64_t))&std::allocator<CUnmannedTraderSchedule>::deallocate) },
            {   (LPVOID)0x140397140L,
                (LPVOID *)&std__allocatordestroy12_user,
                (LPVOID *)&std__allocatordestroy12_next,
                (LPVOID)cast_pointer_function(std__allocatordestroy12_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderSchedule>::*)(struct CUnmannedTraderSchedule*))&std::allocator<CUnmannedTraderSchedule>::destroy) },
            {   (LPVOID)0x1403965b0L,
                (LPVOID *)&std__allocatormax_size14_user,
                (LPVOID *)&std__allocatormax_size14_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size14_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<CUnmannedTraderSchedule>::*)())&std::allocator<CUnmannedTraderSchedule>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatordeallocate8_ptr std__allocatordeallocate8_next(nullptr);
            info::std__allocatordeallocate8_clbk std__allocatordeallocate8_user(nullptr);
            info::std__allocatormax_size10_ptr std__allocatormax_size10_next(nullptr);
            info::std__allocatormax_size10_clbk std__allocatormax_size10_user(nullptr);
            
            struct TRC_AutoTrade** std__allocatorallocate2_wrapper(struct std::allocator<TRC_AutoTrade *>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<TRC_AutoTrade *>* _this, struct std::allocator<TRC_AutoTrade *>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<TRC_AutoTrade *>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatordeallocate8_wrapper(struct std::allocator<TRC_AutoTrade *>* _this, struct TRC_AutoTrade** _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate8_user(_this, _Ptr, __formal);
            };
            uint64_t std__allocatormax_size10_wrapper(struct std::allocator<TRC_AutoTrade *>* _this)
            {
               return std__allocatormax_size10_user(_this);
            };
            
            hook_record allocator<TRC_AutoTrade *>_functions[] = {
            {   (LPVOID)0x140390c70L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct TRC_AutoTrade**(std::allocator<TRC_AutoTrade *>::*)(uint64_t))&std::allocator<TRC_AutoTrade *>::allocate) },
            {   (LPVOID)0x140390c00L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<TRC_AutoTrade *>::*)(struct std::allocator<TRC_AutoTrade *>*))&std::allocator<TRC_AutoTrade *>::ctor_allocator) },
            {   (LPVOID)0x14038fff0L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<TRC_AutoTrade *>::*)())&std::allocator<TRC_AutoTrade *>::ctor_allocator) },
            {   (LPVOID)0x140390c20L,
                (LPVOID *)&std__allocatordeallocate8_user,
                (LPVOID *)&std__allocatordeallocate8_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<TRC_AutoTrade *>::*)(struct TRC_AutoTrade**, uint64_t))&std::allocator<TRC_AutoTrade *>::deallocate) },
            {   (LPVOID)0x140390fb0L,
                (LPVOID *)&std__allocatormax_size10_user,
                (LPVOID *)&std__allocatormax_size10_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size10_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<TRC_AutoTrade *>::*)())&std::allocator<TRC_AutoTrade *>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatordeallocate8_ptr std__allocatordeallocate8_next(nullptr);
            info::std__allocatordeallocate8_clbk std__allocatordeallocate8_user(nullptr);
            info::std__allocatormax_size10_ptr std__allocatormax_size10_next(nullptr);
            info::std__allocatormax_size10_clbk std__allocatormax_size10_user(nullptr);
            
            struct CUnmannedTraderDivisionInfo** std__allocatorallocate2_wrapper(struct std::allocator<CUnmannedTraderDivisionInfo *>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<CUnmannedTraderDivisionInfo *>* _this, struct std::allocator<CUnmannedTraderDivisionInfo *>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<CUnmannedTraderDivisionInfo *>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatordeallocate8_wrapper(struct std::allocator<CUnmannedTraderDivisionInfo *>* _this, struct CUnmannedTraderDivisionInfo** _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate8_user(_this, _Ptr, __formal);
            };
            uint64_t std__allocatormax_size10_wrapper(struct std::allocator<CUnmannedTraderDivisionInfo *>* _this)
            {
               return std__allocatormax_size10_user(_this);
            };
            
            hook_record allocator<CUnmannedTraderDivisionInfo *>_functions[] = {
            {   (LPVOID)0x14038a4e0L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct CUnmannedTraderDivisionInfo**(std::allocator<CUnmannedTraderDivisionInfo *>::*)(uint64_t))&std::allocator<CUnmannedTraderDivisionInfo *>::allocate) },
            {   (LPVOID)0x14038a470L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderDivisionInfo *>::*)(struct std::allocator<CUnmannedTraderDivisionInfo *>*))&std::allocator<CUnmannedTraderDivisionInfo *>::ctor_allocator) },
            {   (LPVOID)0x1403891f0L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderDivisionInfo *>::*)())&std::allocator<CUnmannedTraderDivisionInfo *>::ctor_allocator) },
            {   (LPVOID)0x14038a490L,
                (LPVOID *)&std__allocatordeallocate8_user,
                (LPVOID *)&std__allocatordeallocate8_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderDivisionInfo *>::*)(struct CUnmannedTraderDivisionInfo**, uint64_t))&std::allocator<CUnmannedTraderDivisionInfo *>::deallocate) },
            {   (LPVOID)0x14038b180L,
                (LPVOID *)&std__allocatormax_size10_user,
                (LPVOID *)&std__allocatormax_size10_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size10_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<CUnmannedTraderDivisionInfo *>::*)())&std::allocator<CUnmannedTraderDivisionInfo *>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatorconstruct8_ptr std__allocatorconstruct8_next(nullptr);
            info::std__allocatorconstruct8_clbk std__allocatorconstruct8_user(nullptr);
            info::std__allocatordeallocate10_ptr std__allocatordeallocate10_next(nullptr);
            info::std__allocatordeallocate10_clbk std__allocatordeallocate10_user(nullptr);
            info::std__allocatordestroy12_ptr std__allocatordestroy12_next(nullptr);
            info::std__allocatordestroy12_clbk std__allocatordestroy12_user(nullptr);
            info::std__allocatormax_size14_ptr std__allocatormax_size14_next(nullptr);
            info::std__allocatormax_size14_clbk std__allocatormax_size14_user(nullptr);
            
            struct CUnmannedTraderClassInfo** std__allocatorallocate2_wrapper(struct std::allocator<CUnmannedTraderClassInfo *>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<CUnmannedTraderClassInfo *>* _this, struct std::allocator<CUnmannedTraderClassInfo *>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<CUnmannedTraderClassInfo *>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatorconstruct8_wrapper(struct std::allocator<CUnmannedTraderClassInfo *>* _this, struct CUnmannedTraderClassInfo** _Ptr, struct CUnmannedTraderClassInfo** _Val)
            {
               std__allocatorconstruct8_user(_this, _Ptr, _Val);
            };
            void std__allocatordeallocate10_wrapper(struct std::allocator<CUnmannedTraderClassInfo *>* _this, struct CUnmannedTraderClassInfo** _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate10_user(_this, _Ptr, __formal);
            };
            void std__allocatordestroy12_wrapper(struct std::allocator<CUnmannedTraderClassInfo *>* _this, struct CUnmannedTraderClassInfo** _Ptr)
            {
               std__allocatordestroy12_user(_this, _Ptr);
            };
            uint64_t std__allocatormax_size14_wrapper(struct std::allocator<CUnmannedTraderClassInfo *>* _this)
            {
               return std__allocatormax_size14_user(_this);
            };
            
            hook_record allocator<CUnmannedTraderClassInfo *>_functions[] = {
            {   (LPVOID)0x140372230L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct CUnmannedTraderClassInfo**(std::allocator<CUnmannedTraderClassInfo *>::*)(uint64_t))&std::allocator<CUnmannedTraderClassInfo *>::allocate) },
            {   (LPVOID)0x1403721c0L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderClassInfo *>::*)(struct std::allocator<CUnmannedTraderClassInfo *>*))&std::allocator<CUnmannedTraderClassInfo *>::ctor_allocator) },
            {   (LPVOID)0x140370bf0L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderClassInfo *>::*)())&std::allocator<CUnmannedTraderClassInfo *>::ctor_allocator) },
            {   (LPVOID)0x140376b30L,
                (LPVOID *)&std__allocatorconstruct8_user,
                (LPVOID *)&std__allocatorconstruct8_next,
                (LPVOID)cast_pointer_function(std__allocatorconstruct8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderClassInfo *>::*)(struct CUnmannedTraderClassInfo**, struct CUnmannedTraderClassInfo**))&std::allocator<CUnmannedTraderClassInfo *>::construct) },
            {   (LPVOID)0x1403721e0L,
                (LPVOID *)&std__allocatordeallocate10_user,
                (LPVOID *)&std__allocatordeallocate10_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate10_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderClassInfo *>::*)(struct CUnmannedTraderClassInfo**, uint64_t))&std::allocator<CUnmannedTraderClassInfo *>::deallocate) },
            {   (LPVOID)0x140376b90L,
                (LPVOID *)&std__allocatordestroy12_user,
                (LPVOID *)&std__allocatordestroy12_next,
                (LPVOID)cast_pointer_function(std__allocatordestroy12_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderClassInfo *>::*)(struct CUnmannedTraderClassInfo**))&std::allocator<CUnmannedTraderClassInfo *>::destroy) },
            {   (LPVOID)0x140373070L,
                (LPVOID *)&std__allocatormax_size14_user,
                (LPVOID *)&std__allocatormax_size14_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size14_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<CUnmannedTraderClassInfo *>::*)())&std::allocator<CUnmannedTraderClassInfo *>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatordeallocate8_ptr std__allocatordeallocate8_next(nullptr);
            info::std__allocatordeallocate8_clbk std__allocatordeallocate8_user(nullptr);
            info::std__allocatormax_size10_ptr std__allocatormax_size10_next(nullptr);
            info::std__allocatormax_size10_clbk std__allocatormax_size10_user(nullptr);
            
            struct CUnmannedTraderSortType** std__allocatorallocate2_wrapper(struct std::allocator<CUnmannedTraderSortType *>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<CUnmannedTraderSortType *>* _this, struct std::allocator<CUnmannedTraderSortType *>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<CUnmannedTraderSortType *>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatordeallocate8_wrapper(struct std::allocator<CUnmannedTraderSortType *>* _this, struct CUnmannedTraderSortType** _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate8_user(_this, _Ptr, __formal);
            };
            uint64_t std__allocatormax_size10_wrapper(struct std::allocator<CUnmannedTraderSortType *>* _this)
            {
               return std__allocatormax_size10_user(_this);
            };
            
            hook_record allocator<CUnmannedTraderSortType *>_functions[] = {
            {   (LPVOID)0x140372c30L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct CUnmannedTraderSortType**(std::allocator<CUnmannedTraderSortType *>::*)(uint64_t))&std::allocator<CUnmannedTraderSortType *>::allocate) },
            {   (LPVOID)0x140372bc0L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderSortType *>::*)(struct std::allocator<CUnmannedTraderSortType *>*))&std::allocator<CUnmannedTraderSortType *>::ctor_allocator) },
            {   (LPVOID)0x140371450L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderSortType *>::*)())&std::allocator<CUnmannedTraderSortType *>::ctor_allocator) },
            {   (LPVOID)0x140372be0L,
                (LPVOID *)&std__allocatordeallocate8_user,
                (LPVOID *)&std__allocatordeallocate8_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderSortType *>::*)(struct CUnmannedTraderSortType**, uint64_t))&std::allocator<CUnmannedTraderSortType *>::deallocate) },
            {   (LPVOID)0x1403730e0L,
                (LPVOID *)&std__allocatormax_size10_user,
                (LPVOID *)&std__allocatormax_size10_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size10_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<CUnmannedTraderSortType *>::*)())&std::allocator<CUnmannedTraderSortType *>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatorconstruct8_ptr std__allocatorconstruct8_next(nullptr);
            info::std__allocatorconstruct8_clbk std__allocatorconstruct8_user(nullptr);
            info::std__allocatordeallocate10_ptr std__allocatordeallocate10_next(nullptr);
            info::std__allocatordeallocate10_clbk std__allocatordeallocate10_user(nullptr);
            info::std__allocatordestroy12_ptr std__allocatordestroy12_next(nullptr);
            info::std__allocatordestroy12_clbk std__allocatordestroy12_user(nullptr);
            info::std__allocatormax_size14_ptr std__allocatormax_size14_next(nullptr);
            info::std__allocatormax_size14_clbk std__allocatormax_size14_user(nullptr);
            
            struct CUnmannedTraderSubClassInfo** std__allocatorallocate2_wrapper(struct std::allocator<CUnmannedTraderSubClassInfo *>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<CUnmannedTraderSubClassInfo *>* _this, struct std::allocator<CUnmannedTraderSubClassInfo *>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<CUnmannedTraderSubClassInfo *>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatorconstruct8_wrapper(struct std::allocator<CUnmannedTraderSubClassInfo *>* _this, struct CUnmannedTraderSubClassInfo** _Ptr, struct CUnmannedTraderSubClassInfo** _Val)
            {
               std__allocatorconstruct8_user(_this, _Ptr, _Val);
            };
            void std__allocatordeallocate10_wrapper(struct std::allocator<CUnmannedTraderSubClassInfo *>* _this, struct CUnmannedTraderSubClassInfo** _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate10_user(_this, _Ptr, __formal);
            };
            void std__allocatordestroy12_wrapper(struct std::allocator<CUnmannedTraderSubClassInfo *>* _this, struct CUnmannedTraderSubClassInfo** _Ptr)
            {
               std__allocatordestroy12_user(_this, _Ptr);
            };
            uint64_t std__allocatormax_size14_wrapper(struct std::allocator<CUnmannedTraderSubClassInfo *>* _this)
            {
               return std__allocatormax_size14_user(_this);
            };
            
            hook_record allocator<CUnmannedTraderSubClassInfo *>_functions[] = {
            {   (LPVOID)0x14037fe30L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct CUnmannedTraderSubClassInfo**(std::allocator<CUnmannedTraderSubClassInfo *>::*)(uint64_t))&std::allocator<CUnmannedTraderSubClassInfo *>::allocate) },
            {   (LPVOID)0x14037fdc0L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderSubClassInfo *>::*)(struct std::allocator<CUnmannedTraderSubClassInfo *>*))&std::allocator<CUnmannedTraderSubClassInfo *>::ctor_allocator) },
            {   (LPVOID)0x14037f2a0L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderSubClassInfo *>::*)())&std::allocator<CUnmannedTraderSubClassInfo *>::ctor_allocator) },
            {   (LPVOID)0x140382cc0L,
                (LPVOID *)&std__allocatorconstruct8_user,
                (LPVOID *)&std__allocatorconstruct8_next,
                (LPVOID)cast_pointer_function(std__allocatorconstruct8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderSubClassInfo *>::*)(struct CUnmannedTraderSubClassInfo**, struct CUnmannedTraderSubClassInfo**))&std::allocator<CUnmannedTraderSubClassInfo *>::construct) },
            {   (LPVOID)0x14037fde0L,
                (LPVOID *)&std__allocatordeallocate10_user,
                (LPVOID *)&std__allocatordeallocate10_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate10_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderSubClassInfo *>::*)(struct CUnmannedTraderSubClassInfo**, uint64_t))&std::allocator<CUnmannedTraderSubClassInfo *>::deallocate) },
            {   (LPVOID)0x140382d20L,
                (LPVOID *)&std__allocatordestroy12_user,
                (LPVOID *)&std__allocatordestroy12_next,
                (LPVOID)cast_pointer_function(std__allocatordestroy12_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderSubClassInfo *>::*)(struct CUnmannedTraderSubClassInfo**))&std::allocator<CUnmannedTraderSubClassInfo *>::destroy) },
            {   (LPVOID)0x140380020L,
                (LPVOID *)&std__allocatormax_size14_user,
                (LPVOID *)&std__allocatormax_size14_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size14_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<CUnmannedTraderSubClassInfo *>::*)())&std::allocator<CUnmannedTraderSubClassInfo *>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatorconstruct8_ptr std__allocatorconstruct8_next(nullptr);
            info::std__allocatorconstruct8_clbk std__allocatorconstruct8_user(nullptr);
            info::std__allocatordeallocate10_ptr std__allocatordeallocate10_next(nullptr);
            info::std__allocatordeallocate10_clbk std__allocatordeallocate10_user(nullptr);
            info::std__allocatordestroy12_ptr std__allocatordestroy12_next(nullptr);
            info::std__allocatordestroy12_clbk std__allocatordestroy12_user(nullptr);
            info::std__allocatormax_size14_ptr std__allocatormax_size14_next(nullptr);
            info::std__allocatormax_size14_clbk std__allocatormax_size14_user(nullptr);
            
            struct CUnmannedTraderItemCodeInfo* std__allocatorallocate2_wrapper(struct std::allocator<CUnmannedTraderItemCodeInfo>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<CUnmannedTraderItemCodeInfo>* _this, struct std::allocator<CUnmannedTraderItemCodeInfo>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<CUnmannedTraderItemCodeInfo>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatorconstruct8_wrapper(struct std::allocator<CUnmannedTraderItemCodeInfo>* _this, struct CUnmannedTraderItemCodeInfo* _Ptr, struct CUnmannedTraderItemCodeInfo* _Val)
            {
               std__allocatorconstruct8_user(_this, _Ptr, _Val);
            };
            void std__allocatordeallocate10_wrapper(struct std::allocator<CUnmannedTraderItemCodeInfo>* _this, struct CUnmannedTraderItemCodeInfo* _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate10_user(_this, _Ptr, __formal);
            };
            void std__allocatordestroy12_wrapper(struct std::allocator<CUnmannedTraderItemCodeInfo>* _this, struct CUnmannedTraderItemCodeInfo* _Ptr)
            {
               std__allocatordestroy12_user(_this, _Ptr);
            };
            uint64_t std__allocatormax_size14_wrapper(struct std::allocator<CUnmannedTraderItemCodeInfo>* _this)
            {
               return std__allocatormax_size14_user(_this);
            };
            
            hook_record allocator<CUnmannedTraderItemCodeInfo>_functions[] = {
            {   (LPVOID)0x140379b50L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct CUnmannedTraderItemCodeInfo*(std::allocator<CUnmannedTraderItemCodeInfo>::*)(uint64_t))&std::allocator<CUnmannedTraderItemCodeInfo>::allocate) },
            {   (LPVOID)0x140379ae0L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderItemCodeInfo>::*)(struct std::allocator<CUnmannedTraderItemCodeInfo>*))&std::allocator<CUnmannedTraderItemCodeInfo>::ctor_allocator) },
            {   (LPVOID)0x140378e00L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderItemCodeInfo>::*)())&std::allocator<CUnmannedTraderItemCodeInfo>::ctor_allocator) },
            {   (LPVOID)0x14037b8c0L,
                (LPVOID *)&std__allocatorconstruct8_user,
                (LPVOID *)&std__allocatorconstruct8_next,
                (LPVOID)cast_pointer_function(std__allocatorconstruct8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderItemCodeInfo>::*)(struct CUnmannedTraderItemCodeInfo*, struct CUnmannedTraderItemCodeInfo*))&std::allocator<CUnmannedTraderItemCodeInfo>::construct) },
            {   (LPVOID)0x140379b00L,
                (LPVOID *)&std__allocatordeallocate10_user,
                (LPVOID *)&std__allocatordeallocate10_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate10_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderItemCodeInfo>::*)(struct CUnmannedTraderItemCodeInfo*, uint64_t))&std::allocator<CUnmannedTraderItemCodeInfo>::deallocate) },
            {   (LPVOID)0x14037b920L,
                (LPVOID *)&std__allocatordestroy12_user,
                (LPVOID *)&std__allocatordestroy12_next,
                (LPVOID)cast_pointer_function(std__allocatordestroy12_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<CUnmannedTraderItemCodeInfo>::*)(struct CUnmannedTraderItemCodeInfo*))&std::allocator<CUnmannedTraderItemCodeInfo>::destroy) },
            {   (LPVOID)0x140379d70L,
                (LPVOID *)&std__allocatormax_size14_user,
                (LPVOID *)&std__allocatormax_size14_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size14_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<CUnmannedTraderItemCodeInfo>::*)())&std::allocator<CUnmannedTraderItemCodeInfo>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatordeallocate6_ptr std__allocatordeallocate6_next(nullptr);
            info::std__allocatordeallocate6_clbk std__allocatordeallocate6_user(nullptr);
            info::std__allocatordestroy8_ptr std__allocatordestroy8_next(nullptr);
            info::std__allocatordestroy8_clbk std__allocatordestroy8_user(nullptr);
            
            struct RECV_DATA** std__allocatorallocate2_wrapper(struct std::allocator<RECV_DATA *>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<RECV_DATA *>* _this, struct std::allocator<RECV_DATA>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatordeallocate6_wrapper(struct std::allocator<RECV_DATA *>* _this, struct RECV_DATA** _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate6_user(_this, _Ptr, __formal);
            };
            void std__allocatordestroy8_wrapper(struct std::allocator<RECV_DATA *>* _this, struct RECV_DATA** _Ptr)
            {
               std__allocatordestroy8_user(_this, _Ptr);
            };
            
            hook_record allocator<RECV_DATA *>_functions[] = {
            {   (LPVOID)0x14031ad80L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct RECV_DATA**(std::allocator<RECV_DATA *>::*)(uint64_t))&std::allocator<RECV_DATA *>::allocate) },
            {   (LPVOID)0x14031fb60L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<RECV_DATA *>::*)(struct std::allocator<RECV_DATA>*))&std::allocator<RECV_DATA *>::ctor_allocator) },
            {   (LPVOID)0x14031ad30L,
                (LPVOID *)&std__allocatordeallocate6_user,
                (LPVOID *)&std__allocatordeallocate6_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<RECV_DATA *>::*)(struct RECV_DATA**, uint64_t))&std::allocator<RECV_DATA *>::deallocate) },
            {   (LPVOID)0x14031fd70L,
                (LPVOID *)&std__allocatordestroy8_user,
                (LPVOID *)&std__allocatordestroy8_next,
                (LPVOID)cast_pointer_function(std__allocatordestroy8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<RECV_DATA *>::*)(struct RECV_DATA**))&std::allocator<RECV_DATA *>::destroy) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatorconstruct8_ptr std__allocatorconstruct8_next(nullptr);
            info::std__allocatorconstruct8_clbk std__allocatorconstruct8_user(nullptr);
            info::std__allocatordeallocate10_ptr std__allocatordeallocate10_next(nullptr);
            info::std__allocatordeallocate10_clbk std__allocatordeallocate10_user(nullptr);
            info::std__allocatordestroy12_ptr std__allocatordestroy12_next(nullptr);
            info::std__allocatordestroy12_clbk std__allocatordestroy12_user(nullptr);
            info::std__allocatormax_size14_ptr std__allocatormax_size14_next(nullptr);
            info::std__allocatormax_size14_clbk std__allocatormax_size14_user(nullptr);
            
            struct RECV_DATA* std__allocatorallocate2_wrapper(struct std::allocator<RECV_DATA>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<RECV_DATA>* _this, struct std::allocator<RECV_DATA>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<RECV_DATA>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatorconstruct8_wrapper(struct std::allocator<RECV_DATA>* _this, struct RECV_DATA* _Ptr, struct RECV_DATA* _Val)
            {
               std__allocatorconstruct8_user(_this, _Ptr, _Val);
            };
            void std__allocatordeallocate10_wrapper(struct std::allocator<RECV_DATA>* _this, struct RECV_DATA* _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate10_user(_this, _Ptr, __formal);
            };
            void std__allocatordestroy12_wrapper(struct std::allocator<RECV_DATA>* _this, struct RECV_DATA* _Ptr)
            {
               std__allocatordestroy12_user(_this, _Ptr);
            };
            uint64_t std__allocatormax_size14_wrapper(struct std::allocator<RECV_DATA>* _this)
            {
               return std__allocatormax_size14_user(_this);
            };
            
            hook_record allocator<RECV_DATA>_functions[] = {
            {   (LPVOID)0x14031ab40L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct RECV_DATA*(std::allocator<RECV_DATA>::*)(uint64_t))&std::allocator<RECV_DATA>::allocate) },
            {   (LPVOID)0x14031fb40L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<RECV_DATA>::*)(struct std::allocator<RECV_DATA>*))&std::allocator<RECV_DATA>::ctor_allocator) },
            {   (LPVOID)0x14031fac0L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<RECV_DATA>::*)())&std::allocator<RECV_DATA>::ctor_allocator) },
            {   (LPVOID)0x14031ab90L,
                (LPVOID *)&std__allocatorconstruct8_user,
                (LPVOID *)&std__allocatorconstruct8_next,
                (LPVOID)cast_pointer_function(std__allocatorconstruct8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<RECV_DATA>::*)(struct RECV_DATA*, struct RECV_DATA*))&std::allocator<RECV_DATA>::construct) },
            {   (LPVOID)0x14031fd20L,
                (LPVOID *)&std__allocatordeallocate10_user,
                (LPVOID *)&std__allocatordeallocate10_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate10_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<RECV_DATA>::*)(struct RECV_DATA*, uint64_t))&std::allocator<RECV_DATA>::deallocate) },
            {   (LPVOID)0x14031eae0L,
                (LPVOID *)&std__allocatordestroy12_user,
                (LPVOID *)&std__allocatordestroy12_next,
                (LPVOID)cast_pointer_function(std__allocatordestroy12_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<RECV_DATA>::*)(struct RECV_DATA*))&std::allocator<RECV_DATA>::destroy) },
            {   (LPVOID)0x14031add0L,
                (LPVOID *)&std__allocatormax_size14_user,
                (LPVOID *)&std__allocatormax_size14_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size14_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<RECV_DATA>::*)())&std::allocator<RECV_DATA>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
#include "std__allocator_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            info::std__allocatorallocate2_ptr std__allocatorallocate2_next(nullptr);
            info::std__allocatorallocate2_clbk std__allocatorallocate2_user(nullptr);
            info::std__allocatorctor_allocator4_ptr std__allocatorctor_allocator4_next(nullptr);
            info::std__allocatorctor_allocator4_clbk std__allocatorctor_allocator4_user(nullptr);
            info::std__allocatorctor_allocator6_ptr std__allocatorctor_allocator6_next(nullptr);
            info::std__allocatorctor_allocator6_clbk std__allocatorctor_allocator6_user(nullptr);
            info::std__allocatorconstruct8_ptr std__allocatorconstruct8_next(nullptr);
            info::std__allocatorconstruct8_clbk std__allocatorconstruct8_user(nullptr);
            info::std__allocatordeallocate10_ptr std__allocatordeallocate10_next(nullptr);
            info::std__allocatordeallocate10_clbk std__allocatordeallocate10_user(nullptr);
            info::std__allocatordestroy12_ptr std__allocatordestroy12_next(nullptr);
            info::std__allocatordestroy12_clbk std__allocatordestroy12_user(nullptr);
            info::std__allocatormax_size14_ptr std__allocatormax_size14_next(nullptr);
            info::std__allocatormax_size14_clbk std__allocatormax_size14_user(nullptr);
            
            struct AreaData* std__allocatorallocate2_wrapper(struct std::allocator<AreaData>* _this, uint64_t _Count)
            {
               return std__allocatorallocate2_user(_this, _Count);
            };
            void std__allocatorctor_allocator4_wrapper(struct std::allocator<AreaData>* _this, struct std::allocator<AreaData>* __formal)
            {
               std__allocatorctor_allocator4_user(_this, __formal);
            };
            void std__allocatorctor_allocator6_wrapper(struct std::allocator<AreaData>* _this)
            {
               std__allocatorctor_allocator6_user(_this);
            };
            void std__allocatorconstruct8_wrapper(struct std::allocator<AreaData>* _this, struct AreaData* _Ptr, struct AreaData* _Val)
            {
               std__allocatorconstruct8_user(_this, _Ptr, _Val);
            };
            void std__allocatordeallocate10_wrapper(struct std::allocator<AreaData>* _this, struct AreaData* _Ptr, uint64_t __formal)
            {
               std__allocatordeallocate10_user(_this, _Ptr, __formal);
            };
            void std__allocatordestroy12_wrapper(struct std::allocator<AreaData>* _this, struct AreaData* _Ptr)
            {
               std__allocatordestroy12_user(_this, _Ptr);
            };
            uint64_t std__allocatormax_size14_wrapper(struct std::allocator<AreaData>* _this)
            {
               return std__allocatormax_size14_user(_this);
            };
            
            hook_record allocator<AreaData>_functions[] = {
            {   (LPVOID)0x14018fe70L,
                (LPVOID *)&std__allocatorallocate2_user,
                (LPVOID *)&std__allocatorallocate2_next,
                (LPVOID)cast_pointer_function(std__allocatorallocate2_wrapper),
                (LPVOID)cast_pointer_function((struct AreaData*(std::allocator<AreaData>::*)(uint64_t))&std::allocator<AreaData>::allocate) },
            {   (LPVOID)0x14018fe50L,
                (LPVOID *)&std__allocatorctor_allocator4_user,
                (LPVOID *)&std__allocatorctor_allocator4_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator4_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<AreaData>::*)(struct std::allocator<AreaData>*))&std::allocator<AreaData>::ctor_allocator) },
            {   (LPVOID)0x14018d5f0L,
                (LPVOID *)&std__allocatorctor_allocator6_user,
                (LPVOID *)&std__allocatorctor_allocator6_next,
                (LPVOID)cast_pointer_function(std__allocatorctor_allocator6_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<AreaData>::*)())&std::allocator<AreaData>::ctor_allocator) },
            {   (LPVOID)0x1401934b0L,
                (LPVOID *)&std__allocatorconstruct8_user,
                (LPVOID *)&std__allocatorconstruct8_next,
                (LPVOID)cast_pointer_function(std__allocatorconstruct8_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<AreaData>::*)(struct AreaData*, struct AreaData*))&std::allocator<AreaData>::construct) },
            {   (LPVOID)0x14018d600L,
                (LPVOID *)&std__allocatordeallocate10_user,
                (LPVOID *)&std__allocatordeallocate10_next,
                (LPVOID)cast_pointer_function(std__allocatordeallocate10_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<AreaData>::*)(struct AreaData*, uint64_t))&std::allocator<AreaData>::deallocate) },
            {   (LPVOID)0x140193510L,
                (LPVOID *)&std__allocatordestroy12_user,
                (LPVOID *)&std__allocatordestroy12_next,
                (LPVOID)cast_pointer_function(std__allocatordestroy12_wrapper),
                (LPVOID)cast_pointer_function((void(std::allocator<AreaData>::*)(struct AreaData*))&std::allocator<AreaData>::destroy) },
            {   (LPVOID)0x140191340L,
                (LPVOID *)&std__allocatormax_size14_user,
                (LPVOID *)&std__allocatormax_size14_next,
                (LPVOID)cast_pointer_function(std__allocatormax_size14_wrapper),
                (LPVOID)cast_pointer_function((uint64_t(std::allocator<AreaData>::*)())&std::allocator<AreaData>::max_size) },
            
            };
            
        }; // end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
