// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "_max_point_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        static info::_max_pointctor__max_point2_ptr _max_pointctor__max_point2_next(nullptr);
        static info::_max_pointctor__max_point2_clbk _max_pointctor__max_point2_user(nullptr);
        static info::_max_pointinit4_ptr _max_pointinit4_next(nullptr);
        static info::_max_pointinit4_clbk _max_pointinit4_user(nullptr);
        static info::_max_pointsize6_ptr _max_pointsize6_next(nullptr);
        static info::_max_pointsize6_clbk _max_pointsize6_user(nullptr);
        
        static void _max_pointctor__max_point2_wrapper(struct _max_point* _this)
        {
           _max_pointctor__max_point2_user(_this, _max_pointctor__max_point2_next);
        };
        static void _max_pointinit4_wrapper(struct _max_point* _this)
        {
           _max_pointinit4_user(_this, _max_pointinit4_next);
        };
        static int _max_pointsize6_wrapper(struct _max_point* _this)
        {
           return _max_pointsize6_user(_this, _max_pointsize6_next);
        };
        
        static hook_record _max_point_functions[] = {
        {   (LPVOID)0x1403f7040L,
            (LPVOID *)&_max_pointctor__max_point2_user,
            (LPVOID *)&_max_pointctor__max_point2_next,
            (LPVOID)cast_pointer_function(_max_pointctor__max_point2_wrapper),
            (LPVOID)cast_pointer_function((void(_max_point::*)())&_max_point::ctor__max_point) },
        {   (LPVOID)0x1403f7090L,
            (LPVOID *)&_max_pointinit4_user,
            (LPVOID *)&_max_pointinit4_next,
            (LPVOID)cast_pointer_function(_max_pointinit4_wrapper),
            (LPVOID)cast_pointer_function((void(_max_point::*)())&_max_point::init) },
        {   (LPVOID)0x1403f70f0L,
            (LPVOID *)&_max_pointsize6_user,
            (LPVOID *)&_max_pointsize6_next,
            (LPVOID)cast_pointer_function(_max_pointsize6_wrapper),
            (LPVOID)cast_pointer_function((int(_max_point::*)())&_max_point::size) },
        
        };
        
    }; // static end namespace detail
END_ATF_NAMESPACE
