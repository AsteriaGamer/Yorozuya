// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CNetCriticalSection_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        static info::CNetCriticalSectionctor_CNetCriticalSection2_ptr CNetCriticalSectionctor_CNetCriticalSection2_next(nullptr);
        static info::CNetCriticalSectionctor_CNetCriticalSection2_clbk CNetCriticalSectionctor_CNetCriticalSection2_user(nullptr);
        static info::CNetCriticalSectionLock4_ptr CNetCriticalSectionLock4_next(nullptr);
        static info::CNetCriticalSectionLock4_clbk CNetCriticalSectionLock4_user(nullptr);
        static info::CNetCriticalSectionUnlock6_ptr CNetCriticalSectionUnlock6_next(nullptr);
        static info::CNetCriticalSectionUnlock6_clbk CNetCriticalSectionUnlock6_user(nullptr);
        static info::CNetCriticalSectiondtor_CNetCriticalSection10_ptr CNetCriticalSectiondtor_CNetCriticalSection10_next(nullptr);
        static info::CNetCriticalSectiondtor_CNetCriticalSection10_clbk CNetCriticalSectiondtor_CNetCriticalSection10_user(nullptr);
        
        static void CNetCriticalSectionctor_CNetCriticalSection2_wrapper(struct CNetCriticalSection* _this)
        {
           CNetCriticalSectionctor_CNetCriticalSection2_user(_this, CNetCriticalSectionctor_CNetCriticalSection2_next);
        };
        static void CNetCriticalSectionLock4_wrapper(struct CNetCriticalSection* _this)
        {
           CNetCriticalSectionLock4_user(_this, CNetCriticalSectionLock4_next);
        };
        static void CNetCriticalSectionUnlock6_wrapper(struct CNetCriticalSection* _this)
        {
           CNetCriticalSectionUnlock6_user(_this, CNetCriticalSectionUnlock6_next);
        };
        static void CNetCriticalSectiondtor_CNetCriticalSection10_wrapper(struct CNetCriticalSection* _this)
        {
           CNetCriticalSectiondtor_CNetCriticalSection10_user(_this, CNetCriticalSectiondtor_CNetCriticalSection10_next);
        };
        
        static hook_record CNetCriticalSection_functions[] = {
        {   (LPVOID)0x140073230L,
            (LPVOID *)&CNetCriticalSectionctor_CNetCriticalSection2_user,
            (LPVOID *)&CNetCriticalSectionctor_CNetCriticalSection2_next,
            (LPVOID)cast_pointer_function(CNetCriticalSectionctor_CNetCriticalSection2_wrapper),
            (LPVOID)cast_pointer_function((void(CNetCriticalSection::*)())&CNetCriticalSection::ctor_CNetCriticalSection) },
        {   (LPVOID)0x140073900L,
            (LPVOID *)&CNetCriticalSectionLock4_user,
            (LPVOID *)&CNetCriticalSectionLock4_next,
            (LPVOID)cast_pointer_function(CNetCriticalSectionLock4_wrapper),
            (LPVOID)cast_pointer_function((void(CNetCriticalSection::*)())&CNetCriticalSection::Lock) },
        {   (LPVOID)0x140073950L,
            (LPVOID *)&CNetCriticalSectionUnlock6_user,
            (LPVOID *)&CNetCriticalSectionUnlock6_next,
            (LPVOID)cast_pointer_function(CNetCriticalSectionUnlock6_wrapper),
            (LPVOID)cast_pointer_function((void(CNetCriticalSection::*)())&CNetCriticalSection::Unlock) },
        {   (LPVOID)0x140073340L,
            (LPVOID *)&CNetCriticalSectiondtor_CNetCriticalSection10_user,
            (LPVOID *)&CNetCriticalSectiondtor_CNetCriticalSection10_next,
            (LPVOID)cast_pointer_function(CNetCriticalSectiondtor_CNetCriticalSection10_wrapper),
            (LPVOID)cast_pointer_function((void(CNetCriticalSection::*)())&CNetCriticalSection::dtor_CNetCriticalSection) },
        
        };
        
    }; // static end namespace detail
END_ATF_NAMESPACE
