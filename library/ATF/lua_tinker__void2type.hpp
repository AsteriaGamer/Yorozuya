// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2type<void (__cdecl*)(void)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__var_base.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2type<var_base *>
        {
        public:
            static struct var_base* invoke(struct void2type<var_base *>* _this, void* ptr)
            {
                using org_ptr = struct var_base* (WINAPIV*)(struct void2type<var_base *>*, void*);
                return (org_ptr(0x1404472a0L))(_this, ptr);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2type<bool (__cdecl CLuaSignalReActor::*)(unsigned char,unsigned char,char const *,char const *)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "CLuaSignalReActor.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2type<CLuaSignalReActor *>
        {
        public:
            static struct CLuaSignalReActor* invoke(struct void2type<CLuaSignalReActor *>* _this, void* ptr)
            {
                using org_ptr = struct CLuaSignalReActor* (WINAPIV*)(struct void2type<CLuaSignalReActor *>*, void*);
                return (org_ptr(0x14040b3d0L))(_this, ptr);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__user.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2type<user *>
        {
        public:
            static struct user* invoke(struct void2type<user *>* _this, void* ptr)
            {
                using org_ptr = struct user* (WINAPIV*)(struct void2type<user *>*, void*);
                return (org_ptr(0x140409d10L))(_this, ptr);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "CLuaScript.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2type<CLuaScript *>
        {
        public:
            static struct CLuaScript* invoke(struct void2type<CLuaScript *>* _this, void* ptr)
            {
                using org_ptr = struct CLuaScript* (WINAPIV*)(struct void2type<CLuaScript *>*, void*);
                return (org_ptr(0x14040ad30L))(_this, ptr);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "LuaParam3.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2type<LuaParam3 *>
        {
        public:
            static struct LuaParam3* invoke(struct void2type<LuaParam3 *>* _this, void* ptr)
            {
                using org_ptr = struct LuaParam3* (WINAPIV*)(struct void2type<LuaParam3 *>*, void*);
                return (org_ptr(0x140409b20L))(_this, ptr);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2type<CLuaSignalReActor * (__cdecl CMonster::*)(void)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2type<char const * (__cdecl CLuaScript::*)(void)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2type<CLuaEventNode * (__cdecl CLuaEventMgr::*)(char const *)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2type<CMonster * (__cdecl*)(char *,char *,float,float,float)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "CLuaEventMgr.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2type<CLuaEventMgr *>
        {
        public:
            static struct CLuaEventMgr* invoke(struct void2type<CLuaEventMgr *>* _this, void* ptr)
            {
                using org_ptr = struct CLuaEventMgr* (WINAPIV*)(struct void2type<CLuaEventMgr *>*, void*);
                return (org_ptr(0x14040ad70L))(_this, ptr);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2type<void (__cdecl CLuaEventNode::*)(char const *,unsigned long)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "LuaParam3.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2type<LuaParam3>
        {
        public:
            static struct LuaParam3* invoke(struct LuaParam3* result, void* ptr)
            {
                using org_ptr = struct LuaParam3* (WINAPIV*)(struct LuaParam3*, void*);
                return (org_ptr(0x14040adb0L))(result, ptr);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "CMonster.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2type<CMonster *>
        {
        public:
            static struct CMonster* invoke(struct void2type<CMonster *>* _this, void* ptr)
            {
                using org_ptr = struct CMonster* (WINAPIV*)(struct void2type<CMonster *>*, void*);
                return (org_ptr(0x14040b410L))(_this, ptr);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2type<void (__cdecl CLuaEventMgr::*)(CLuaEventNode *)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "CLuaEventNode.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2type<CLuaEventNode *>
        {
        public:
            static struct CLuaEventNode* invoke(struct void2type<CLuaEventNode *>* _this, void* ptr)
            {
                using org_ptr = struct CLuaEventNode* (WINAPIV*)(struct void2type<CLuaEventNode *>*, void*);
                return (org_ptr(0x14040acf0L))(_this, ptr);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2type<CLuaEventMgr * (__cdecl*)(void)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2type<void (__cdecl*)(char *,char *,LuaParam3,LuaParam3)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2type<void (__cdecl CLuaEventNode::*)(char const *)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2type<CLuaEventNode * (__cdecl CLuaEventMgr::*)(void)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2type<bool (__cdecl CLuaEventMgr::*)(CLuaEventNode *)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  void2type<void (__cdecl CLuaEventNode::*)(CLuaScript *)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
