// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "SF_Timer_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        static info::SF_TimerCheckTime2_ptr SF_TimerCheckTime2_next(nullptr);
        static info::SF_TimerCheckTime2_clbk SF_TimerCheckTime2_user(nullptr);
        static info::SF_Timerctor_SF_Timer4_ptr SF_Timerctor_SF_Timer4_next(nullptr);
        static info::SF_Timerctor_SF_Timer4_clbk SF_Timerctor_SF_Timer4_user(nullptr);
        static info::SF_TimerSet6_ptr SF_TimerSet6_next(nullptr);
        static info::SF_TimerSet6_clbk SF_TimerSet6_user(nullptr);
        
        static int SF_TimerCheckTime2_wrapper(struct SF_Timer* _this, unsigned int dwLoopTime)
        {
           return SF_TimerCheckTime2_user(_this, dwLoopTime, SF_TimerCheckTime2_next);
        };
        static void SF_Timerctor_SF_Timer4_wrapper(struct SF_Timer* _this)
        {
           SF_Timerctor_SF_Timer4_user(_this, SF_Timerctor_SF_Timer4_next);
        };
        static void SF_TimerSet6_wrapper(struct SF_Timer* _this, unsigned int dwTimeDelay)
        {
           SF_TimerSet6_user(_this, dwTimeDelay, SF_TimerSet6_next);
        };
        
        static hook_record SF_Timer_functions[] = {
        {   (LPVOID)0x140155620L,
            (LPVOID *)&SF_TimerCheckTime2_user,
            (LPVOID *)&SF_TimerCheckTime2_next,
            (LPVOID)cast_pointer_function(SF_TimerCheckTime2_wrapper),
            (LPVOID)cast_pointer_function((int(SF_Timer::*)(unsigned int))&SF_Timer::CheckTime) },
        {   (LPVOID)0x14014fc70L,
            (LPVOID *)&SF_Timerctor_SF_Timer4_user,
            (LPVOID *)&SF_Timerctor_SF_Timer4_next,
            (LPVOID)cast_pointer_function(SF_Timerctor_SF_Timer4_wrapper),
            (LPVOID)cast_pointer_function((void(SF_Timer::*)())&SF_Timer::ctor_SF_Timer) },
        {   (LPVOID)0x140155920L,
            (LPVOID *)&SF_TimerSet6_user,
            (LPVOID *)&SF_TimerSet6_next,
            (LPVOID)cast_pointer_function(SF_TimerSet6_wrapper),
            (LPVOID)cast_pointer_function((void(SF_Timer::*)(unsigned int))&SF_Timer::Set) },
        
        };
        
    }; // static end namespace detail
END_ATF_NAMESPACE
