// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "std___Iterator_base_info.hpp"


START_ATF_NAMESPACE
    namespace std
    {
        namespace detail
        {
            static info::std___Iterator_base_Clean_up_iter_debug2_ptr std___Iterator_base_Clean_up_iter_debug2_next(nullptr);
            static info::std___Iterator_base_Clean_up_iter_debug2_clbk std___Iterator_base_Clean_up_iter_debug2_user(nullptr);
            static info::std___Iterator_basector__Iterator_base4_ptr std___Iterator_basector__Iterator_base4_next(nullptr);
            static info::std___Iterator_basector__Iterator_base4_clbk std___Iterator_basector__Iterator_base4_user(nullptr);
            static info::std___Iterator_basector__Iterator_base6_ptr std___Iterator_basector__Iterator_base6_next(nullptr);
            static info::std___Iterator_basector__Iterator_base6_clbk std___Iterator_basector__Iterator_base6_user(nullptr);
            static info::std___Iterator_basedtor__Iterator_base10_ptr std___Iterator_basedtor__Iterator_base10_next(nullptr);
            static info::std___Iterator_basedtor__Iterator_base10_clbk std___Iterator_basedtor__Iterator_base10_user(nullptr);
            
            static void std___Iterator_base_Clean_up_iter_debug2_wrapper(struct std::_Iterator_base* _this)
            {
               std___Iterator_base_Clean_up_iter_debug2_user(_this, std___Iterator_base_Clean_up_iter_debug2_next);
            };
            static void std___Iterator_basector__Iterator_base4_wrapper(struct std::_Iterator_base* _this, struct std::_Iterator_base* _Right)
            {
               std___Iterator_basector__Iterator_base4_user(_this, _Right, std___Iterator_basector__Iterator_base4_next);
            };
            static void std___Iterator_basector__Iterator_base6_wrapper(struct std::_Iterator_base* _this)
            {
               std___Iterator_basector__Iterator_base6_user(_this, std___Iterator_basector__Iterator_base6_next);
            };
            static void std___Iterator_basedtor__Iterator_base10_wrapper(struct std::_Iterator_base* _this)
            {
               std___Iterator_basedtor__Iterator_base10_user(_this, std___Iterator_basedtor__Iterator_base10_next);
            };
            
            static hook_record _Iterator_base_functions[] = {
            {   (LPVOID)0x1401234a0L,
                (LPVOID *)&std___Iterator_base_Clean_up_iter_debug2_user,
                (LPVOID *)&std___Iterator_base_Clean_up_iter_debug2_next,
                (LPVOID)cast_pointer_function(std___Iterator_base_Clean_up_iter_debug2_wrapper),
                (LPVOID)cast_pointer_function((void(std::_Iterator_base::*)())&std::_Iterator_base::_Clean_up_iter_debug) },
            {   (LPVOID)0x140123b90L,
                (LPVOID *)&std___Iterator_basector__Iterator_base4_user,
                (LPVOID *)&std___Iterator_basector__Iterator_base4_next,
                (LPVOID)cast_pointer_function(std___Iterator_basector__Iterator_base4_wrapper),
                (LPVOID)cast_pointer_function((void(std::_Iterator_base::*)(struct std::_Iterator_base*))&std::_Iterator_base::ctor__Iterator_base) },
            {   (LPVOID)0x140123a90L,
                (LPVOID *)&std___Iterator_basector__Iterator_base6_user,
                (LPVOID *)&std___Iterator_basector__Iterator_base6_next,
                (LPVOID)cast_pointer_function(std___Iterator_basector__Iterator_base6_wrapper),
                (LPVOID)cast_pointer_function((void(std::_Iterator_base::*)())&std::_Iterator_base::ctor__Iterator_base) },
            {   (LPVOID)0x140123420L,
                (LPVOID *)&std___Iterator_basedtor__Iterator_base10_user,
                (LPVOID *)&std___Iterator_basedtor__Iterator_base10_next,
                (LPVOID)cast_pointer_function(std___Iterator_basedtor__Iterator_base10_wrapper),
                (LPVOID)cast_pointer_function((void(std::_Iterator_base::*)())&std::_Iterator_base::dtor__Iterator_base) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace std
END_ATF_NAMESPACE
