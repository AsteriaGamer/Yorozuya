// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CMonster.hpp"
#include "lua_tinker__user.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  ptr2user<CMonster> : user
        {
        public:
            ptr2user(struct CMonster* t)
            {
                using org_ptr = void (WINAPIV*)(struct ptr2user<CMonster>*, struct CMonster*);
                (org_ptr(0x14040b880L))(this, t);
            };
            void ctor_ptr2user(struct CMonster* t)
            {
                using org_ptr = void (WINAPIV*)(struct ptr2user<CMonster>*, struct CMonster*);
                (org_ptr(0x14040b880L))(this, t);
            };
            ~ptr2user()
            {
                using org_ptr = void (WINAPIV*)(struct ptr2user<CMonster>*);
                (org_ptr(0x14040bac0L))(this);
            };
            void dtor_ptr2user()
            {
                using org_ptr = void (WINAPIV*)(struct ptr2user<CMonster>*);
                (org_ptr(0x14040bac0L))(this);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "CLuaSignalReActor.hpp"
#include "lua_tinker__user.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  ptr2user<CLuaSignalReActor> : user
        {
        public:
            ptr2user(struct CLuaSignalReActor* t)
            {
                using org_ptr = void (WINAPIV*)(struct ptr2user<CLuaSignalReActor>*, struct CLuaSignalReActor*);
                (org_ptr(0x14040b7a0L))(this, t);
            };
            void ctor_ptr2user(struct CLuaSignalReActor* t)
            {
                using org_ptr = void (WINAPIV*)(struct ptr2user<CLuaSignalReActor>*, struct CLuaSignalReActor*);
                (org_ptr(0x14040b7a0L))(this, t);
            };
            ~ptr2user()
            {
                using org_ptr = void (WINAPIV*)(struct ptr2user<CLuaSignalReActor>*);
                (org_ptr(0x14040ba40L))(this);
            };
            void dtor_ptr2user()
            {
                using org_ptr = void (WINAPIV*)(struct ptr2user<CLuaSignalReActor>*);
                (org_ptr(0x14040ba40L))(this);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "CLuaEventNode.hpp"
#include "lua_tinker__user.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  ptr2user<CLuaEventNode> : user
        {
        public:
            ptr2user(struct CLuaEventNode* t)
            {
                using org_ptr = void (WINAPIV*)(struct ptr2user<CLuaEventNode>*, struct CLuaEventNode*);
                (org_ptr(0x140404cb0L))(this, t);
            };
            void ctor_ptr2user(struct CLuaEventNode* t)
            {
                using org_ptr = void (WINAPIV*)(struct ptr2user<CLuaEventNode>*, struct CLuaEventNode*);
                (org_ptr(0x140404cb0L))(this, t);
            };
            ~ptr2user()
            {
                using org_ptr = void (WINAPIV*)(struct ptr2user<CLuaEventNode>*);
                (org_ptr(0x140404d90L))(this);
            };
            void dtor_ptr2user()
            {
                using org_ptr = void (WINAPIV*)(struct ptr2user<CLuaEventNode>*);
                (org_ptr(0x140404d90L))(this);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "CLuaEventMgr.hpp"
#include "lua_tinker__user.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  ptr2user<CLuaEventMgr> : user
        {
        public:
            ptr2user(struct CLuaEventMgr* t)
            {
                using org_ptr = void (WINAPIV*)(struct ptr2user<CLuaEventMgr>*, struct CLuaEventMgr*);
                (org_ptr(0x14040b810L))(this, t);
            };
            void ctor_ptr2user(struct CLuaEventMgr* t)
            {
                using org_ptr = void (WINAPIV*)(struct ptr2user<CLuaEventMgr>*, struct CLuaEventMgr*);
                (org_ptr(0x14040b810L))(this, t);
            };
            ~ptr2user()
            {
                using org_ptr = void (WINAPIV*)(struct ptr2user<CLuaEventMgr>*);
                (org_ptr(0x14040ba80L))(this);
            };
            void dtor_ptr2user()
            {
                using org_ptr = void (WINAPIV*)(struct ptr2user<CLuaEventMgr>*);
                (org_ptr(0x14040ba80L))(this);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "CLuaScript.hpp"
#include "lua_tinker__user.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  ptr2user<CLuaScript> : user
        {
        public:
            ptr2user(struct CLuaScript* t)
            {
                using org_ptr = void (WINAPIV*)(struct ptr2user<CLuaScript>*, struct CLuaScript*);
                (org_ptr(0x1404031d0L))(this, t);
            };
            void ctor_ptr2user(struct CLuaScript* t)
            {
                using org_ptr = void (WINAPIV*)(struct ptr2user<CLuaScript>*, struct CLuaScript*);
                (org_ptr(0x1404031d0L))(this, t);
            };
            ~ptr2user()
            {
                using org_ptr = void (WINAPIV*)(struct ptr2user<CLuaScript>*);
                (org_ptr(0x140403380L))(this);
            };
            void dtor_ptr2user()
            {
                using org_ptr = void (WINAPIV*)(struct ptr2user<CLuaScript>*);
                (org_ptr(0x140403380L))(this);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
