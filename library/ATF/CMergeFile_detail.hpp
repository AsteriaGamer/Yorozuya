// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CMergeFile_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        static info::CMergeFileGetFileOffset1_ptr CMergeFileGetFileOffset1_next(nullptr);
        static info::CMergeFileGetFileOffset1_clbk CMergeFileGetFileOffset1_user(nullptr);
        static info::CMergeFileGetFileSize2_ptr CMergeFileGetFileSize2_next(nullptr);
        static info::CMergeFileGetFileSize2_clbk CMergeFileGetFileSize2_user(nullptr);
        static info::CMergeFileIsExistFile3_ptr CMergeFileIsExistFile3_next(nullptr);
        static info::CMergeFileIsExistFile3_clbk CMergeFileIsExistFile3_user(nullptr);
        static info::CMergeFileLoadFileOffset4_ptr CMergeFileLoadFileOffset4_next(nullptr);
        static info::CMergeFileLoadFileOffset4_clbk CMergeFileLoadFileOffset4_user(nullptr);
        static info::CMergeFileLoadMergeFileHeader5_ptr CMergeFileLoadMergeFileHeader5_next(nullptr);
        static info::CMergeFileLoadMergeFileHeader5_clbk CMergeFileLoadMergeFileHeader5_user(nullptr);
        static info::CMergeFileReleaseMergeFileHeader6_ptr CMergeFileReleaseMergeFileHeader6_next(nullptr);
        static info::CMergeFileReleaseMergeFileHeader6_clbk CMergeFileReleaseMergeFileHeader6_user(nullptr);
        
        static uint32_t CMergeFileGetFileOffset1_wrapper(struct CMergeFile* _this, uint32_t arg_0, char* arg_1)
        {
           return CMergeFileGetFileOffset1_user(_this, arg_0, arg_1, CMergeFileGetFileOffset1_next);
        };
        static uint32_t CMergeFileGetFileSize2_wrapper(struct CMergeFile* _this, uint32_t arg_0, char* arg_1)
        {
           return CMergeFileGetFileSize2_user(_this, arg_0, arg_1, CMergeFileGetFileSize2_next);
        };
        static int CMergeFileIsExistFile3_wrapper(struct CMergeFile* _this, char* arg_0)
        {
           return CMergeFileIsExistFile3_user(_this, arg_0, CMergeFileIsExistFile3_next);
        };
        static struct _iobuf* CMergeFileLoadFileOffset4_wrapper(struct CMergeFile* _this, char* Mode, char* arg_0)
        {
           return CMergeFileLoadFileOffset4_user(_this, Mode, arg_0, CMergeFileLoadFileOffset4_next);
        };
        static int64_t CMergeFileLoadMergeFileHeader5_wrapper(struct CMergeFile* _this, char* arg_0)
        {
           return CMergeFileLoadMergeFileHeader5_user(_this, arg_0, CMergeFileLoadMergeFileHeader5_next);
        };
        static void CMergeFileReleaseMergeFileHeader6_wrapper(struct CMergeFile* _this)
        {
           CMergeFileReleaseMergeFileHeader6_user(_this, CMergeFileReleaseMergeFileHeader6_next);
        };
        
        static hook_record CMergeFile_functions[] = {
        {   (LPVOID)0x14050a060L,
            (LPVOID *)&CMergeFileGetFileOffset1_user,
            (LPVOID *)&CMergeFileGetFileOffset1_next,
            (LPVOID)cast_pointer_function(CMergeFileGetFileOffset1_wrapper),
            (LPVOID)cast_pointer_function((uint32_t(CMergeFile::*)(uint32_t, char*))&CMergeFile::GetFileOffset) },
        {   (LPVOID)0x14050a1e0L,
            (LPVOID *)&CMergeFileGetFileSize2_user,
            (LPVOID *)&CMergeFileGetFileSize2_next,
            (LPVOID)cast_pointer_function(CMergeFileGetFileSize2_wrapper),
            (LPVOID)cast_pointer_function((uint32_t(CMergeFile::*)(uint32_t, char*))&CMergeFile::GetFileSize) },
        {   (LPVOID)0x14050a3e0L,
            (LPVOID *)&CMergeFileIsExistFile3_user,
            (LPVOID *)&CMergeFileIsExistFile3_next,
            (LPVOID)cast_pointer_function(CMergeFileIsExistFile3_wrapper),
            (LPVOID)cast_pointer_function((int(CMergeFile::*)(char*))&CMergeFile::IsExistFile) },
        {   (LPVOID)0x14050a370L,
            (LPVOID *)&CMergeFileLoadFileOffset4_user,
            (LPVOID *)&CMergeFileLoadFileOffset4_next,
            (LPVOID)cast_pointer_function(CMergeFileLoadFileOffset4_wrapper),
            (LPVOID)cast_pointer_function((struct _iobuf*(CMergeFile::*)(char*, char*))&CMergeFile::LoadFileOffset) },
        {   (LPVOID)0x140509dd0L,
            (LPVOID *)&CMergeFileLoadMergeFileHeader5_user,
            (LPVOID *)&CMergeFileLoadMergeFileHeader5_next,
            (LPVOID)cast_pointer_function(CMergeFileLoadMergeFileHeader5_wrapper),
            (LPVOID)cast_pointer_function((int64_t(CMergeFile::*)(char*))&CMergeFile::LoadMergeFileHeader) },
        {   (LPVOID)0x140509f50L,
            (LPVOID *)&CMergeFileReleaseMergeFileHeader6_user,
            (LPVOID *)&CMergeFileReleaseMergeFileHeader6_next,
            (LPVOID)cast_pointer_function(CMergeFileReleaseMergeFileHeader6_wrapper),
            (LPVOID)cast_pointer_function((void(CMergeFile::*)())&CMergeFile::ReleaseMergeFileHeader) },
        
        };
        
    }; // static end namespace detail
END_ATF_NAMESPACE
