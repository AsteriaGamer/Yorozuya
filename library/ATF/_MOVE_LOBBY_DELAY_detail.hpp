// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "_MOVE_LOBBY_DELAY_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        static info::_MOVE_LOBBY_DELAYProcess2_ptr _MOVE_LOBBY_DELAYProcess2_next(nullptr);
        static info::_MOVE_LOBBY_DELAYProcess2_clbk _MOVE_LOBBY_DELAYProcess2_user(nullptr);
        static info::_MOVE_LOBBY_DELAYctor__MOVE_LOBBY_DELAY4_ptr _MOVE_LOBBY_DELAYctor__MOVE_LOBBY_DELAY4_next(nullptr);
        static info::_MOVE_LOBBY_DELAYctor__MOVE_LOBBY_DELAY4_clbk _MOVE_LOBBY_DELAYctor__MOVE_LOBBY_DELAY4_user(nullptr);
        static info::_MOVE_LOBBY_DELAYdtor__MOVE_LOBBY_DELAY6_ptr _MOVE_LOBBY_DELAYdtor__MOVE_LOBBY_DELAY6_next(nullptr);
        static info::_MOVE_LOBBY_DELAYdtor__MOVE_LOBBY_DELAY6_clbk _MOVE_LOBBY_DELAYdtor__MOVE_LOBBY_DELAY6_user(nullptr);
        
        static void _MOVE_LOBBY_DELAYProcess2_wrapper(struct _MOVE_LOBBY_DELAY* _this, unsigned int dwIndex, unsigned int dwSerial)
        {
           _MOVE_LOBBY_DELAYProcess2_user(_this, dwIndex, dwSerial, _MOVE_LOBBY_DELAYProcess2_next);
        };
        static void _MOVE_LOBBY_DELAYctor__MOVE_LOBBY_DELAY4_wrapper(struct _MOVE_LOBBY_DELAY* _this)
        {
           _MOVE_LOBBY_DELAYctor__MOVE_LOBBY_DELAY4_user(_this, _MOVE_LOBBY_DELAYctor__MOVE_LOBBY_DELAY4_next);
        };
        static void _MOVE_LOBBY_DELAYdtor__MOVE_LOBBY_DELAY6_wrapper(struct _MOVE_LOBBY_DELAY* _this)
        {
           _MOVE_LOBBY_DELAYdtor__MOVE_LOBBY_DELAY6_user(_this, _MOVE_LOBBY_DELAYdtor__MOVE_LOBBY_DELAY6_next);
        };
        
        static hook_record _MOVE_LOBBY_DELAY_functions[] = {
        {   (LPVOID)0x14011b430L,
            (LPVOID *)&_MOVE_LOBBY_DELAYProcess2_user,
            (LPVOID *)&_MOVE_LOBBY_DELAYProcess2_next,
            (LPVOID)cast_pointer_function(_MOVE_LOBBY_DELAYProcess2_wrapper),
            (LPVOID)cast_pointer_function((void(_MOVE_LOBBY_DELAY::*)(unsigned int, unsigned int))&_MOVE_LOBBY_DELAY::Process) },
        {   (LPVOID)0x140120ee0L,
            (LPVOID *)&_MOVE_LOBBY_DELAYctor__MOVE_LOBBY_DELAY4_user,
            (LPVOID *)&_MOVE_LOBBY_DELAYctor__MOVE_LOBBY_DELAY4_next,
            (LPVOID)cast_pointer_function(_MOVE_LOBBY_DELAYctor__MOVE_LOBBY_DELAY4_wrapper),
            (LPVOID)cast_pointer_function((void(_MOVE_LOBBY_DELAY::*)())&_MOVE_LOBBY_DELAY::ctor__MOVE_LOBBY_DELAY) },
        {   (LPVOID)0x140120f50L,
            (LPVOID *)&_MOVE_LOBBY_DELAYdtor__MOVE_LOBBY_DELAY6_user,
            (LPVOID *)&_MOVE_LOBBY_DELAYdtor__MOVE_LOBBY_DELAY6_next,
            (LPVOID)cast_pointer_function(_MOVE_LOBBY_DELAYdtor__MOVE_LOBBY_DELAY6_wrapper),
            (LPVOID)cast_pointer_function((void(_MOVE_LOBBY_DELAY::*)())&_MOVE_LOBBY_DELAY::dtor__MOVE_LOBBY_DELAY) },
        
        };
        
    }; // static end namespace detail
END_ATF_NAMESPACE
