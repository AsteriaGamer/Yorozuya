// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"


START_ATF_NAMESPACE
    #pragma pack(push, 8)
    struct _effect_parameter
    {
        struct __param_data
        {
            float m_fEff_Rate[62];
            float m_fEff_Plus[42];
            bool m_bEff_State[29];
            float m_fEff_Have[83];
        };
        __param_data *m_pDataParam;
        bool m_bLock;
    public:
        void AllocEffParam()
        {
            using org_ptr = void (WINAPIV*)(struct _effect_parameter*);
            (org_ptr(0x1400748f0L))(this);
        };
        float GetEff_Have(int nParamIndex)
        {
            using org_ptr = float (WINAPIV*)(struct _effect_parameter*, int);
            return (org_ptr(0x140078d80L))(this, nParamIndex);
        };
        float GetEff_Plus(int nParamIndex)
        {
            using org_ptr = float (WINAPIV*)(struct _effect_parameter*, int);
            return (org_ptr(0x1400789f0L))(this, nParamIndex);
        };
        float GetEff_Rate(int nParamIndex)
        {
            using org_ptr = float (WINAPIV*)(struct _effect_parameter*, int);
            return (org_ptr(0x1400742c0L))(this, nParamIndex);
        };
        bool GetEff_State(int nParamIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct _effect_parameter*, int);
            return (org_ptr(0x14007a590L))(this, nParamIndex);
        };
        void InitEffHave()
        {
            using org_ptr = void (WINAPIV*)(struct _effect_parameter*);
            (org_ptr(0x14007aa90L))(this);
        };
        void InitEffParam()
        {
            using org_ptr = void (WINAPIV*)(struct _effect_parameter*);
            (org_ptr(0x140074960L))(this);
        };
        bool SetEff_Plus(int nParamIndex, float fVar, bool bAdd)
        {
            using org_ptr = bool (WINAPIV*)(struct _effect_parameter*, int, float, bool);
            return (org_ptr(0x14007ad40L))(this, nParamIndex, fVar, bAdd);
        };
        bool SetEff_Rate(int nParamIndex, float fVar, bool bAdd)
        {
            using org_ptr = bool (WINAPIV*)(struct _effect_parameter*, int, float, bool);
            return (org_ptr(0x14007ac80L))(this, nParamIndex, fVar, bAdd);
        };
        bool SetEff_State(int nParamIndex, bool bVar)
        {
            using org_ptr = bool (WINAPIV*)(struct _effect_parameter*, int, bool);
            return (org_ptr(0x14007ae20L))(this, nParamIndex, bVar);
        };
        void SetLock(bool bLock)
        {
            using org_ptr = void (WINAPIV*)(struct _effect_parameter*, bool);
            (org_ptr(0x14007a8b0L))(this, bLock);
        };
        _effect_parameter()
        {
            using org_ptr = void (WINAPIV*)(struct _effect_parameter*);
            (org_ptr(0x14017a410L))(this);
        };
        void ctor__effect_parameter()
        {
            using org_ptr = void (WINAPIV*)(struct _effect_parameter*);
            (org_ptr(0x14017a410L))(this);
        };
        ~_effect_parameter()
        {
            using org_ptr = void (WINAPIV*)(struct _effect_parameter*);
            (org_ptr(0x14017a450L))(this);
        };
        void dtor__effect_parameter()
        {
            using org_ptr = void (WINAPIV*)(struct _effect_parameter*);
            (org_ptr(0x14017a450L))(this);
        };
    };
    #pragma pack(pop)
END_ATF_NAMESPACE
