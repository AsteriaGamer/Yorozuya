// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "_CRYMSG_LIST_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        info::_CRYMSG_LISTInit2_ptr _CRYMSG_LISTInit2_next(nullptr);
        info::_CRYMSG_LISTInit2_clbk _CRYMSG_LISTInit2_user(nullptr);
        info::_CRYMSG_LISTctor__CRYMSG_LIST4_ptr _CRYMSG_LISTctor__CRYMSG_LIST4_next(nullptr);
        info::_CRYMSG_LISTctor__CRYMSG_LIST4_clbk _CRYMSG_LISTctor__CRYMSG_LIST4_user(nullptr);
        
        info::_CRYMSG_LIST___LISTInit2_ptr _CRYMSG_LIST___LISTInit2_next(nullptr);
        info::_CRYMSG_LIST___LISTInit2_clbk _CRYMSG_LIST___LISTInit2_user(nullptr);
        info::_CRYMSG_LIST___LISTctor__LIST4_ptr _CRYMSG_LIST___LISTctor__LIST4_next(nullptr);
        info::_CRYMSG_LIST___LISTctor__LIST4_clbk _CRYMSG_LIST___LISTctor__LIST4_user(nullptr);
        
        void _CRYMSG_LISTInit2_wrapper(struct _CRYMSG_LIST* _this)
        {
           _CRYMSG_LISTInit2_user(_this, _CRYMSG_LISTInit2_next);
        };
        void _CRYMSG_LISTctor__CRYMSG_LIST4_wrapper(struct _CRYMSG_LIST* _this)
        {
           _CRYMSG_LISTctor__CRYMSG_LIST4_user(_this, _CRYMSG_LISTctor__CRYMSG_LIST4_next);
        };
        
        void _CRYMSG_LIST___LISTInit2_wrapper(struct _CRYMSG_LIST::_LIST* _this)
        {
           _CRYMSG_LIST___LISTInit2_user(_this, _CRYMSG_LIST___LISTInit2_next);
        };
        void _CRYMSG_LIST___LISTctor__LIST4_wrapper(struct _CRYMSG_LIST::_LIST* _this)
        {
           _CRYMSG_LIST___LISTctor__LIST4_user(_this, _CRYMSG_LIST___LISTctor__LIST4_next);
        };
        
        hook_record _CRYMSG_LIST_functions[] = {
        {   (LPVOID)0x140073a80L,
            (LPVOID *)&_CRYMSG_LISTInit2_user,
            (LPVOID *)&_CRYMSG_LISTInit2_next,
            (LPVOID)cast_pointer_function(_CRYMSG_LISTInit2_wrapper),
            (LPVOID)cast_pointer_function((void(_CRYMSG_LIST::*)())&_CRYMSG_LIST::Init) },
        {   (LPVOID)0x1400739a0L,
            (LPVOID *)&_CRYMSG_LISTctor__CRYMSG_LIST4_user,
            (LPVOID *)&_CRYMSG_LISTctor__CRYMSG_LIST4_next,
            (LPVOID)cast_pointer_function(_CRYMSG_LISTctor__CRYMSG_LIST4_wrapper),
            (LPVOID)cast_pointer_function((void(_CRYMSG_LIST::*)())&_CRYMSG_LIST::ctor__CRYMSG_LIST) },
        
        {   (LPVOID)0x140073a60L,
            (LPVOID *)&_CRYMSG_LIST___LISTInit2_user,
            (LPVOID *)&_CRYMSG_LIST___LISTInit2_next,
            (LPVOID)cast_pointer_function(_CRYMSG_LIST___LISTInit2_wrapper),
            (LPVOID)cast_pointer_function((void(_CRYMSG_LIST::_LIST::*)())&_CRYMSG_LIST::_LIST::Init) },
        {   (LPVOID)0x140073a10L,
            (LPVOID *)&_CRYMSG_LIST___LISTctor__LIST4_user,
            (LPVOID *)&_CRYMSG_LIST___LISTctor__LIST4_next,
            (LPVOID)cast_pointer_function(_CRYMSG_LIST___LISTctor__LIST4_wrapper),
            (LPVOID)cast_pointer_function((void(_CRYMSG_LIST::_LIST::*)())&_CRYMSG_LIST::_LIST::ctor__LIST) },
        
        };
        
    }; // end namespace detail
END_ATF_NAMESPACE
