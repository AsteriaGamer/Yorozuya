// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CMapData.hpp"
#include "CMyTimer.hpp"
#include "CNetIndexList.hpp"


START_ATF_NAMESPACE
    struct CTransportShip
    {
        struct __mgr_member
        {
            CPlayer *pPtr;
            unsigned int dwSerial;
        public:
            __mgr_member()
            {
                using org_ptr = void (WINAPIV*)(struct __mgr_member*);
                (org_ptr(0x140265d20L))(this);
            };
            void ctor___mgr_member()
            {
                using org_ptr = void (WINAPIV*)(struct __mgr_member*);
                (org_ptr(0x140265d20L))(this);
            };
            void init()
            {
                using org_ptr = void (WINAPIV*)(struct __mgr_member*);
                (org_ptr(0x140265dc0L))(this);
            };
            bool is_fill()
            {
                using org_ptr = bool (WINAPIV*)(struct __mgr_member*);
                return (org_ptr(0x140265de0L))(this);
            };
        };
        struct __mgr_ticket
        {
            int nCurTicketNum;
            int nReserTicketNum;
            unsigned int dwNextUpdateTime;
            struct _TicketItem_fld *pLinkTicketItem;
        public:
            __mgr_ticket()
            {
                using org_ptr = void (WINAPIV*)(struct __mgr_ticket*);
                (org_ptr(0x140265d40L))(this);
            };
            void ctor___mgr_ticket()
            {
                using org_ptr = void (WINAPIV*)(struct __mgr_ticket*);
                (org_ptr(0x140265d40L))(this);
            };
            void init()
            {
                using org_ptr = void (WINAPIV*)(struct __mgr_ticket*);
                (org_ptr(0x140265d90L))(this);
            };
        };
        bool m_bAnchor;
        char m_byDirect;
        bool m_bHurry;
        unsigned int m_dwNextHurryTime;
        unsigned int m_dwEventCreateTime;
        char m_byRaceCode_Layer;
        CMapData *m_pLinkShipMap;
        CMapData *m_pLinkPortMap[2];
        CMyTimer m_tmrCheckState;
        __mgr_member m_NewMember[2532];
        __mgr_member m_OldMember[2532];
        CNetIndexList m_listLogoffMember;
        __mgr_ticket m_MgrTicket[2];
    public:
        void AlterState(bool bAnchor, char byDirect, int nPassMin, int nNextSubEventTerm)
        {
            using org_ptr = void (WINAPIV*)(struct CTransportShip*, bool, char, int, int);
            (org_ptr(0x140263c00L))(this, bAnchor, byDirect, nPassMin, nNextSubEventTerm);
        };
        void ApplyTicketReserver()
        {
            using org_ptr = void (WINAPIV*)(struct CTransportShip*);
            (org_ptr(0x140264f80L))(this);
        };
        CTransportShip()
        {
            using org_ptr = void (WINAPIV*)(struct CTransportShip*);
            (org_ptr(0x140263820L))(this);
        };
        void ctor_CTransportShip()
        {
            using org_ptr = void (WINAPIV*)(struct CTransportShip*);
            (org_ptr(0x140263820L))(this);
        };
        void CheckHurry()
        {
            using org_ptr = void (WINAPIV*)(struct CTransportShip*);
            (org_ptr(0x140263e80L))(this);
        };
        void CheckTicket()
        {
            using org_ptr = void (WINAPIV*)(struct CTransportShip*);
            (org_ptr(0x140263dd0L))(this);
        };
        void CheckTicket_Kick(struct CPlayer* pPtr, int nPortalIndex)
        {
            using org_ptr = void (WINAPIV*)(struct CTransportShip*, struct CPlayer*, int);
            (org_ptr(0x1402642d0L))(this, pPtr, nPortalIndex);
        };
        void CheckTicket_Pass(struct CPlayer* pPtr, int nPortalIndex)
        {
            using org_ptr = void (WINAPIV*)(struct CTransportShip*, struct CPlayer*, int);
            (org_ptr(0x140264170L))(this, pPtr, nPortalIndex);
        };
        void EnterMember(struct CPlayer* pEnter)
        {
            using org_ptr = void (WINAPIV*)(struct CTransportShip*, struct CPlayer*);
            (org_ptr(0x140264830L))(this, pEnter);
        };
        void ExitMember(struct CPlayer* pExiter, bool bLogoff)
        {
            using org_ptr = void (WINAPIV*)(struct CTransportShip*, struct CPlayer*, bool);
            (org_ptr(0x1402649c0L))(this, pExiter, bLogoff);
        };
        bool GetCurRideShipThisTicket(struct _TicketItem_fld* pTicketFld)
        {
            using org_ptr = bool (WINAPIV*)(struct CTransportShip*, struct _TicketItem_fld*);
            return (org_ptr(0x140265040L))(this, pTicketFld);
        };
        struct __mgr_member* GetEmptyNewMember()
        {
            using org_ptr = struct __mgr_member* (WINAPIV*)(struct CTransportShip*);
            return (org_ptr(0x1402652a0L))(this);
        };
        int GetLeftTicketIncludeReserNum(char* pszTarMapCode, int nAdd)
        {
            using org_ptr = int (WINAPIV*)(struct CTransportShip*, char*, int);
            return (org_ptr(0x140264e00L))(this, pszTarMapCode, nAdd);
        };
        struct CMapData* GetMapCurDirect()
        {
            using org_ptr = struct CMapData* (WINAPIV*)(struct CTransportShip*);
            return (org_ptr(0x140264dd0L))(this);
        };
        int GetOutPortalIndex(int nRaceCode, char byExitDirect)
        {
            using org_ptr = int (WINAPIV*)(struct CTransportShip*, int, char);
            return (org_ptr(0x140265110L))(this, nRaceCode, byExitDirect);
        };
        int GetRideLimLevel()
        {
            using org_ptr = int (WINAPIV*)(struct CTransportShip*);
            return (org_ptr(0x140265140L))(this);
        };
        int GetRideUpLimLevel()
        {
            using org_ptr = int (WINAPIV*)(struct CTransportShip*);
            return (org_ptr(0x1402651f0L))(this);
        };
        void GetStartPosInShip(float* pfPos)
        {
            using org_ptr = void (WINAPIV*)(struct CTransportShip*, float*);
            (org_ptr(0x140264d70L))(this, pfPos);
        };
        bool InitShip(struct CMapData* pLinkShipMap, struct CMapData* pLinkMainbaseMap, struct CMapData* pLinkPlatformMap, char byRaceCode_Layer)
        {
            using org_ptr = bool (WINAPIV*)(struct CTransportShip*, struct CMapData*, struct CMapData*, struct CMapData*, char);
            return (org_ptr(0x1402639c0L))(this, pLinkShipMap, pLinkMainbaseMap, pLinkPlatformMap, byRaceCode_Layer);
        };
        void InitTicketReserver()
        {
            using org_ptr = void (WINAPIV*)(struct CTransportShip*);
            (org_ptr(0x140264f10L))(this);
        };
        bool IsMemberBeforeLogoff(unsigned int dwPlayerSerial)
        {
            using org_ptr = bool (WINAPIV*)(struct CTransportShip*, unsigned int);
            return (org_ptr(0x140078ae0L))(this, dwPlayerSerial);
        };
        bool IsOldMember(struct CPlayer* pMember)
        {
            using org_ptr = bool (WINAPIV*)(struct CTransportShip*, struct CPlayer*);
            return (org_ptr(0x140264cc0L))(this, pMember);
        };
        void KickFreeMember()
        {
            using org_ptr = void (WINAPIV*)(struct CTransportShip*);
            (org_ptr(0x140263f10L))(this);
        };
        void KickOldMember(char byKickDirectCode)
        {
            using org_ptr = void (WINAPIV*)(struct CTransportShip*, char);
            (org_ptr(0x140264030L))(this, byKickDirectCode);
        };
        void Loop()
        {
            using org_ptr = void (WINAPIV*)(struct CTransportShip*);
            (org_ptr(0x140263d70L))(this);
        };
        void ReEnterMember(struct CPlayer* pExiter)
        {
            using org_ptr = void (WINAPIV*)(struct CTransportShip*, struct CPlayer*);
            (org_ptr(0x140264b30L))(this, pExiter);
        };
        bool RenewOldMember(struct CPlayer* pMember)
        {
            using org_ptr = bool (WINAPIV*)(struct CTransportShip*, struct CPlayer*);
            return (org_ptr(0x140264bc0L))(this, pMember);
        };
        void SendMsg_KickForSail(int n)
        {
            using org_ptr = void (WINAPIV*)(struct CTransportShip*, int);
            (org_ptr(0x1402653d0L))(this, n);
        };
        void SendMsg_TicketCheck(int n, bool bPass, uint16_t wTicketSerial)
        {
            using org_ptr = void (WINAPIV*)(struct CTransportShip*, int, bool, uint16_t);
            (org_ptr(0x140265330L))(this, n, bPass, wTicketSerial);
        };
        void SendMsg_TransportShipState(int n)
        {
            using org_ptr = void (WINAPIV*)(struct CTransportShip*, int);
            (org_ptr(0x140265450L))(this, n);
        };
        bool Ticketting(struct CPlayer* pExiter)
        {
            using org_ptr = bool (WINAPIV*)(struct CTransportShip*, struct CPlayer*);
            return (org_ptr(0x140264450L))(this, pExiter);
        };
        ~CTransportShip()
        {
            using org_ptr = void (WINAPIV*)(struct CTransportShip*);
            (org_ptr(0x140265e00L))(this);
        };
        void dtor_CTransportShip()
        {
            using org_ptr = void (WINAPIV*)(struct CTransportShip*);
            (org_ptr(0x140265e00L))(this);
        };
    };
END_ATF_NAMESPACE
