// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CLogFile.hpp"
#include "_PVP_RANK_DATA.hpp"
#include "_PVP_RANK_PACKED_DATA.hpp"
#include "std__vector.hpp"


START_ATF_NAMESPACE
    struct CPvpUserRankingInfo
    {
        std::vector<_PVP_RANK_DATA *,std::allocator<_PVP_RANK_DATA *> > m_vecPvpRankDataCurrent;
        std::vector<_PVP_RANK_DATA *,std::allocator<_PVP_RANK_DATA *> > m_vecPvpRankDataTomorrow;
        std::vector<_PVP_RANK_PACKED_DATA *,std::allocator<_PVP_RANK_PACKED_DATA *> > m_vecPackedRankData;
        char m_byPvpRankDataVersion;
        std::vector<unsigned long *,std::allocator<unsigned long *> > m_dwUpdateRaceBossSerial;
        std::vector<unsigned long *,std::allocator<unsigned long *> > m_dwCurrentRaceBossSerial;
    public:
        CPvpUserRankingInfo()
        {
            using org_ptr = void (WINAPIV*)(struct CPvpUserRankingInfo*);
            (org_ptr(0x140344090L))(this);
        };
        void ctor_CPvpUserRankingInfo()
        {
            using org_ptr = void (WINAPIV*)(struct CPvpUserRankingInfo*);
            (org_ptr(0x140344090L))(this);
        };
        void ClearTomorrowPvpRankData()
        {
            using org_ptr = void (WINAPIV*)(struct CPvpUserRankingInfo*);
            (org_ptr(0x14032d7b0L))(this);
        };
        void DoDayChangedWork(struct CLogFile* pkLogger)
        {
            using org_ptr = void (WINAPIV*)(struct CPvpUserRankingInfo*, struct CLogFile*);
            (org_ptr(0x14032d450L))(this, pkLogger);
        };
        unsigned int FindRank(char byRaceCode, unsigned int dwAvatorSerial)
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CPvpUserRankingInfo*, char, unsigned int);
            return (org_ptr(0x14032ca60L))(this, byRaceCode, dwAvatorSerial);
        };
        void FlipPvPRankTop()
        {
            using org_ptr = void (WINAPIV*)(struct CPvpUserRankingInfo*);
            (org_ptr(0x14032d160L))(this);
        };
        char GetBossType(char byRaceCode, unsigned int dwSerial)
        {
            using org_ptr = char (WINAPIV*)(struct CPvpUserRankingInfo*, char, unsigned int);
            return (org_ptr(0x14032d8f0L))(this, byRaceCode, dwSerial);
        };
        struct _PVP_RANK_DATA* GetCurrentPvpRankData(char byRace, char byNth)
        {
            using org_ptr = struct _PVP_RANK_DATA* (WINAPIV*)(struct CPvpUserRankingInfo*, char, char);
            return (org_ptr(0x14032d6b0L))(this, byRace, byNth);
        };
        unsigned int GetCurrentRaceBossSerial(char byRace, char byNth)
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CPvpUserRankingInfo*, char, char);
            return (org_ptr(0x140079ba0L))(this, byRace, byNth);
        };
        char GetPvpRankDataVersion()
        {
            using org_ptr = char (WINAPIV*)(struct CPvpUserRankingInfo*);
            return (org_ptr(0x140344810L))(this);
        };
        struct _PVP_RANK_PACKED_DATA* GetRankPackedData(char byRace, char byPage)
        {
            using org_ptr = struct _PVP_RANK_PACKED_DATA* (WINAPIV*)(struct CPvpUserRankingInfo*, char, char);
            return (org_ptr(0x14032d730L))(this, byRace, byPage);
        };
        struct _PVP_RANK_DATA* GetTomorrowPvpRankData(char byRace, char byNth)
        {
            using org_ptr = struct _PVP_RANK_DATA* (WINAPIV*)(struct CPvpUserRankingInfo*, char, char);
            return (org_ptr(0x14032d860L))(this, byRace, byNth);
        };
        void IncreaseVesion()
        {
            using org_ptr = void (WINAPIV*)(struct CPvpUserRankingInfo*);
            (org_ptr(0x1402b9b40L))(this);
        };
        bool IsCurrentRaceBossGroup(char byRace, unsigned int dwSerial)
        {
            using org_ptr = bool (WINAPIV*)(struct CPvpUserRankingInfo*, char, unsigned int);
            return (org_ptr(0x14032da20L))(this, byRace, dwSerial);
        };
        bool IsRaceViceBoss(char byRace, unsigned int dwSerial)
        {
            using org_ptr = bool (WINAPIV*)(struct CPvpUserRankingInfo*, char, unsigned int);
            return (org_ptr(0x14032d990L))(this, byRace, dwSerial);
        };
        bool LoadPvpRank(char* szDate)
        {
            using org_ptr = bool (WINAPIV*)(struct CPvpUserRankingInfo*, char*);
            return (org_ptr(0x14032caf0L))(this, szDate);
        };
        void PvpRankDataPacking(struct CLogFile* pkLogger)
        {
            using org_ptr = void (WINAPIV*)(struct CPvpUserRankingInfo*, struct CLogFile*);
            (org_ptr(0x14032cd10L))(this, pkLogger);
        };
        void PvpRankListRequest(uint16_t wIndex, char byRace, char byVersion, char byPage)
        {
            using org_ptr = void (WINAPIV*)(struct CPvpUserRankingInfo*, uint16_t, char, char, char);
            (org_ptr(0x14032dab0L))(this, wIndex, byRace, byVersion, byPage);
        };
        void SendMsg_PvpRankListData(uint16_t wIndex, char byRace, char byVersion, char byPage)
        {
            using org_ptr = void (WINAPIV*)(struct CPvpUserRankingInfo*, uint16_t, char, char, char);
            (org_ptr(0x14032e020L))(this, wIndex, byRace, byVersion, byPage);
        };
        void SendMsg_PvpRankListNodata(uint16_t wIndex, char byRace, char byPage, char byRet)
        {
            using org_ptr = void (WINAPIV*)(struct CPvpUserRankingInfo*, uint16_t, char, char, char);
            (org_ptr(0x14032df70L))(this, wIndex, byRace, byPage, byRet);
        };
        void SetCurrentRaceBossSerial(char byRace, char byNth, unsigned int dwSerial)
        {
            using org_ptr = void (WINAPIV*)(struct CPvpUserRankingInfo*, char, char, unsigned int);
            (org_ptr(0x14032d630L))(this, byRace, byNth, dwSerial);
        };
        void SetUpdateRaceBossSerial(char byRace, char byNth, unsigned int dwSerial)
        {
            using org_ptr = void (WINAPIV*)(struct CPvpUserRankingInfo*, char, char, unsigned int);
            (org_ptr(0x14032d5b0L))(this, byRace, byNth, dwSerial);
        };
        char UpdateRaceRankStep1(char* szData)
        {
            using org_ptr = char (WINAPIV*)(struct CPvpUserRankingInfo*, char*);
            return (org_ptr(0x14032db50L))(this, szData);
        };
        char UpdateRaceRankStep10(char* szData)
        {
            using org_ptr = char (WINAPIV*)(struct CPvpUserRankingInfo*, char*);
            return (org_ptr(0x14032deb0L))(this, szData);
        };
        char UpdateRaceRankStep2(char* szData)
        {
            using org_ptr = char (WINAPIV*)(struct CPvpUserRankingInfo*, char*);
            return (org_ptr(0x14032dbb0L))(this, szData);
        };
        char UpdateRaceRankStep3(char* szData)
        {
            using org_ptr = char (WINAPIV*)(struct CPvpUserRankingInfo*, char*);
            return (org_ptr(0x14032dc10L))(this, szData);
        };
        char UpdateRaceRankStep4(char* szData)
        {
            using org_ptr = char (WINAPIV*)(struct CPvpUserRankingInfo*, char*);
            return (org_ptr(0x14032dc70L))(this, szData);
        };
        char UpdateRaceRankStep5(char* szData)
        {
            using org_ptr = char (WINAPIV*)(struct CPvpUserRankingInfo*, char*);
            return (org_ptr(0x14032dcd0L))(this, szData);
        };
        char UpdateRaceRankStep6(char* szData)
        {
            using org_ptr = char (WINAPIV*)(struct CPvpUserRankingInfo*, char*);
            return (org_ptr(0x14032dd30L))(this, szData);
        };
        char UpdateRaceRankStep7(char* szData)
        {
            using org_ptr = char (WINAPIV*)(struct CPvpUserRankingInfo*, char*);
            return (org_ptr(0x14032dd90L))(this, szData);
        };
        char UpdateRaceRankStep8(char* szData)
        {
            using org_ptr = char (WINAPIV*)(struct CPvpUserRankingInfo*, char*);
            return (org_ptr(0x14032ddf0L))(this, szData);
        };
        char UpdateRaceRankStep9(char* szData)
        {
            using org_ptr = char (WINAPIV*)(struct CPvpUserRankingInfo*, char*);
            return (org_ptr(0x14032de50L))(this, szData);
        };
        bool assign()
        {
            using org_ptr = bool (WINAPIV*)(struct CPvpUserRankingInfo*);
            return (org_ptr(0x14032c7a0L))(this);
        };
        ~CPvpUserRankingInfo()
        {
            using org_ptr = void (WINAPIV*)(struct CPvpUserRankingInfo*);
            (org_ptr(0x14032bc00L))(this);
        };
        void dtor_CPvpUserRankingInfo()
        {
            using org_ptr = void (WINAPIV*)(struct CPvpUserRankingInfo*);
            (org_ptr(0x14032bc00L))(this);
        };
    };
END_ATF_NAMESPACE
