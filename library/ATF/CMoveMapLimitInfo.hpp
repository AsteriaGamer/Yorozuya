// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CMerchant.hpp"
#include "CMoveMapLimitInfoVtbl.hpp"
#include "CMoveMapLimitRightInfo.hpp"
#include "CPlayer.hpp"


START_ATF_NAMESPACE
    struct CMoveMapLimitInfo
    {
        enum OBJ_TYPE
        {
            OT_NONE = 0xFFFFFFFF,
            OT_PORTAL = 0x0,
            MAX_TYPE_NUM = 0x1,
        };
        CMoveMapLimitInfoVtbl *vfptr;
        OBJ_TYPE m_eType;
        unsigned int m_uiInx;
        int m_iMapInx;
        CMerchant *m_pStoreNPC;
    public:
        CMoveMapLimitInfo(unsigned int uiInx, int iType)
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitInfo*, unsigned int, int);
            (org_ptr(0x1403a3d00L))(this, uiInx, iType);
        };
        void ctor_CMoveMapLimitInfo(unsigned int uiInx, int iType)
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitInfo*, unsigned int, int);
            (org_ptr(0x1403a3d00L))(this, uiInx, iType);
        };
        static struct CMoveMapLimitInfo* Create(unsigned int uiInx, int iType)
        {
            using org_ptr = struct CMoveMapLimitInfo* (WINAPIV*)(unsigned int, int);
            return (org_ptr(0x1403a3db0L))(uiInx, iType);
        };
        unsigned int GetInx()
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CMoveMapLimitInfo*);
            return (org_ptr(0x1403a74a0L))(this);
        };
        int GetType()
        {
            using org_ptr = int (WINAPIV*)(struct CMoveMapLimitInfo*);
            return (org_ptr(0x1403a6f50L))(this);
        };
        bool IsEqualLimit(int iType, int iMapInx, unsigned int dwStoreRecordIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct CMoveMapLimitInfo*, int, int, unsigned int);
            return (org_ptr(0x1403a3e70L))(this, iType, iMapInx, dwStoreRecordIndex);
        };
        void Load(struct CPlayer* pkPlayer, struct CMoveMapLimitRightInfo* pkRight)
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitInfo*, struct CPlayer*, struct CMoveMapLimitRightInfo*);
            (org_ptr(0x1403a6ee0L))(this, pkPlayer, pkRight);
        };
        void LogIn(struct CPlayer* pkPlayer, struct CMoveMapLimitRightInfo* pkRight)
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitInfo*, struct CPlayer*, struct CMoveMapLimitRightInfo*);
            (org_ptr(0x1403a6f00L))(this, pkPlayer, pkRight);
        };
        void LogOut(struct CPlayer* pkPlayer, struct CMoveMapLimitRightInfo* pkRight)
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitInfo*, struct CPlayer*, struct CMoveMapLimitRightInfo*);
            (org_ptr(0x1403a6f20L))(this, pkPlayer, pkRight);
        };
        void Loop()
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitInfo*);
            (org_ptr(0x1403a6f40L))(this);
        };
        ~CMoveMapLimitInfo()
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitInfo*);
            (org_ptr(0x1403a3d60L))(this);
        };
        void dtor_CMoveMapLimitInfo()
        {
            using org_ptr = void (WINAPIV*)(struct CMoveMapLimitInfo*);
            (org_ptr(0x1403a3d60L))(this);
        };
    };
END_ATF_NAMESPACE
