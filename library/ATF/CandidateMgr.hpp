// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CLogFile.hpp"
#include "CPlayer.hpp"
#include "_PVP_RANK_DATA.hpp"
#include "_candidate_info.hpp"


START_ATF_NAMESPACE
    struct CandidateMgr
    {
        int _nMaxNum;
        _candidate_info *_kCandidate[3];
        _candidate_info *_kCandidate_old[3];
        _candidate_info *_kPatriarchGroup[3];
        int _nCandidateCnt_1st[3];
        _candidate_info *_pkCandidateLink_1st[3][500];
        int _nCandidateCnt_2st[3];
        _candidate_info *_pkCandidateLink_2st[3][8];
        _candidate_info *_pkLeader[3][9];
        CLogFile _kSysLog;
        CLogFile _kVoteResultLog;
    public:
        void AddScore(char byRace, char* wszName, char byScore)
        {
            using org_ptr = void (WINAPIV*)(struct CandidateMgr*, char, char*, char);
            (org_ptr(0x1402b38a0L))(this, byRace, wszName, byScore);
        };
        void ApplyPatriarchGroup()
        {
            using org_ptr = void (WINAPIV*)(struct CandidateMgr*);
            (org_ptr(0x1402b4870L))(this);
        };
        bool AppointPatriarchGroup(struct CPlayer* pOne, _candidate_info::ClassType eClassType)
        {
            using org_ptr = bool (WINAPIV*)(struct CandidateMgr*, struct CPlayer*, _candidate_info::ClassType);
            return (org_ptr(0x1402b4c20L))(this, pOne, eClassType);
        };
        CandidateMgr()
        {
            using org_ptr = void (WINAPIV*)(struct CandidateMgr*);
            (org_ptr(0x1402b1020L))(this);
        };
        void ctor_CandidateMgr()
        {
            using org_ptr = void (WINAPIV*)(struct CandidateMgr*);
            (org_ptr(0x1402b1020L))(this);
        };
        void ChangeState_1to2()
        {
            using org_ptr = void (WINAPIV*)(struct CandidateMgr*);
            (org_ptr(0x1402b2260L))(this);
        };
        int CheckDBValidCharacter(char byProc)
        {
            using org_ptr = int (WINAPIV*)(struct CandidateMgr*, char);
            return (org_ptr(0x1402b4fb0L))(this, byProc);
        };
        void CompleteInsertCandidate(char byRet, char* p)
        {
            using org_ptr = void (WINAPIV*)(struct CandidateMgr*, char, char*);
            (org_ptr(0x1402b4960L))(this, byRet, p);
        };
        bool DischargePatriarchGroup(char byRace, _candidate_info::ClassType eClassType)
        {
            using org_ptr = bool (WINAPIV*)(struct CandidateMgr*, char, _candidate_info::ClassType);
            return (org_ptr(0x1402b4ea0L))(this, byRace, eClassType);
        };
        void FinalDecision()
        {
            using org_ptr = void (WINAPIV*)(struct CandidateMgr*);
            (org_ptr(0x1402b2f90L))(this);
        };
        struct _candidate_info* GetCandidate(char byRace, unsigned int dwIdx)
        {
            using org_ptr = struct _candidate_info* (WINAPIV*)(struct CandidateMgr*, char, unsigned int);
            return (org_ptr(0x1402b7eb0L))(this, byRace, dwIdx);
        };
        struct _candidate_info* GetCandidateBySerial(char byRace, unsigned int dwASerial)
        {
            using org_ptr = struct _candidate_info* (WINAPIV*)(struct CandidateMgr*, char, unsigned int);
            return (org_ptr(0x1402b34a0L))(this, byRace, dwASerial);
        };
        int GetCandidateCnt_1st(char byRace)
        {
            using org_ptr = int (WINAPIV*)(struct CandidateMgr*, char);
            return (org_ptr(0x1402b7e90L))(this, byRace);
        };
        int GetCandidateCnt_2st(char byRace)
        {
            using org_ptr = int (WINAPIV*)(struct CandidateMgr*, char);
            return (org_ptr(0x1402c0530L))(this, byRace);
        };
        struct _candidate_info* GetCandidate_2st(char byRace, int nIdx)
        {
            using org_ptr = struct _candidate_info* (WINAPIV*)(struct CandidateMgr*, char, int);
            return (org_ptr(0x1402b6480L))(this, byRace, nIdx);
        };
        struct _candidate_info* GetEmpty(char byRace)
        {
            using org_ptr = struct _candidate_info* (WINAPIV*)(struct CandidateMgr*, char);
            return (org_ptr(0x1402b20a0L))(this, byRace);
        };
        struct _candidate_info* GetEmptyPatriarchGroup(char byRace)
        {
            using org_ptr = struct _candidate_info* (WINAPIV*)(struct CandidateMgr*, char);
            return (org_ptr(0x1402b2130L))(this, byRace);
        };
        struct _candidate_info* GetLeader(char byRace, int nIdx)
        {
            using org_ptr = struct _candidate_info* (WINAPIV*)(struct CandidateMgr*, char, int);
            return (org_ptr(0x1402b64f0L))(this, byRace, nIdx);
        };
        int GetMaxNum()
        {
            using org_ptr = int (WINAPIV*)(struct CandidateMgr*);
            return (org_ptr(0x1402b7e70L))(this);
        };
        struct _candidate_info* GetPatriarchGroup(char byRace, _candidate_info::ClassType eType)
        {
            using org_ptr = struct _candidate_info* (WINAPIV*)(struct CandidateMgr*, char, _candidate_info::ClassType);
            return (org_ptr(0x1402b32f0L))(this, byRace, eType);
        };
        struct _candidate_info* GetPatriarchGroupBySerial(char byRace, unsigned int dwASerial)
        {
            using org_ptr = struct _candidate_info* (WINAPIV*)(struct CandidateMgr*, char, unsigned int);
            return (org_ptr(0x1402b33d0L))(this, byRace, dwASerial);
        };
        unsigned int GetWinCnt(char byRace, unsigned int dwAvatorSerial)
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CandidateMgr*, char, unsigned int);
            return (org_ptr(0x1402b21c0L))(this, byRace, dwAvatorSerial);
        };
        void InitCandidate()
        {
            using org_ptr = void (WINAPIV*)(struct CandidateMgr*);
            (org_ptr(0x1402b4700L))(this);
        };
        bool Initialize(int nMaxNum)
        {
            using org_ptr = bool (WINAPIV*)(struct CandidateMgr*, int);
            return (org_ptr(0x1402b1200L))(this, nMaxNum);
        };
        int Insert_Candidate(char* p)
        {
            using org_ptr = int (WINAPIV*)(struct CandidateMgr*, char*);
            return (org_ptr(0x1402b39a0L))(this, p);
        };
        static struct CandidateMgr* Instance()
        {
            using org_ptr = struct CandidateMgr* (WINAPIV*)();
            return (org_ptr(0x1402b1140L))();
        };
        bool IsRegistedAvator_1(char byRace, unsigned int dwAvatorSerial)
        {
            using org_ptr = bool (WINAPIV*)(struct CandidateMgr*, char, unsigned int);
            return (org_ptr(0x1402b35e0L))(this, byRace, dwAvatorSerial);
        };
        bool IsRegistedAvator_2(char byRace, char* wszName)
        {
            using org_ptr = bool (WINAPIV*)(struct CandidateMgr*, char, char*);
            return (org_ptr(0x1402b37a0L))(this, byRace, wszName);
        };
        bool IsRegistedAvator_2(char byRace, unsigned int dwAvatorSerial)
        {
            using org_ptr = bool (WINAPIV*)(struct CandidateMgr*, char, unsigned int);
            return (org_ptr(0x1402b36c0L))(this, byRace, dwAvatorSerial);
        };
        bool LoadDatabase()
        {
            using org_ptr = bool (WINAPIV*)(struct CandidateMgr*);
            return (org_ptr(0x1402b1730L))(this);
        };
        bool LoadLeaderPreVersion(char byRace)
        {
            using org_ptr = bool (WINAPIV*)(struct CandidateMgr*, char);
            return (org_ptr(0x1402b4690L))(this, byRace);
        };
        bool LoadPatriarchGroup()
        {
            using org_ptr = bool (WINAPIV*)(struct CandidateMgr*);
            return (org_ptr(0x1402b1b00L))(this);
        };
        bool Regist(struct CPlayer* pOne)
        {
            using org_ptr = bool (WINAPIV*)(struct CandidateMgr*, struct CPlayer*);
            return (org_ptr(0x1402b1ba0L))(this, pOne);
        };
        bool Regist(char byRace, struct _PVP_RANK_DATA* pData)
        {
            using org_ptr = bool (WINAPIV*)(struct CandidateMgr*, char, struct _PVP_RANK_DATA*);
            return (org_ptr(0x1402b1e70L))(this, byRace, pData);
        };
        void Release()
        {
            using org_ptr = void (WINAPIV*)(struct CandidateMgr*);
            (org_ptr(0x1402b1640L))(this);
        };
        int Update_ClassType()
        {
            using org_ptr = int (WINAPIV*)(struct CandidateMgr*);
            return (org_ptr(0x1402b3f90L))(this);
        };
        int Update_DischargePatriarch(char* p)
        {
            using org_ptr = int (WINAPIV*)(struct CandidateMgr*, char*);
            return (org_ptr(0x1402b3e80L))(this, p);
        };
        int Update_Refund()
        {
            using org_ptr = int (WINAPIV*)(struct CandidateMgr*);
            return (org_ptr(0x1402b4480L))(this);
        };
        int Update_RegistCandidate_2st()
        {
            using org_ptr = int (WINAPIV*)(struct CandidateMgr*);
            return (org_ptr(0x1402b3c30L))(this);
        };
        int Update_Score()
        {
            using org_ptr = int (WINAPIV*)(struct CandidateMgr*);
            return (org_ptr(0x1402b4140L))(this);
        };
        int Update_VoteTime(unsigned int dwSerial)
        {
            using org_ptr = int (WINAPIV*)(struct CandidateMgr*, unsigned int);
            return (org_ptr(0x1402b4360L))(this, dwSerial);
        };
        void __AddWinner(char byRace, char byNum)
        {
            using org_ptr = void (WINAPIV*)(struct CandidateMgr*, char, char);
            (org_ptr(0x1402b2490L))(this, byRace, byNum);
        };
        int __SortByPvpPoint()
        {
            using org_ptr = int (WINAPIV*)(struct CandidateMgr*);
            return (org_ptr(0x1402b2ce0L))(this);
        };
        int __SortByRank()
        {
            using org_ptr = int (WINAPIV*)(struct CandidateMgr*);
            return (org_ptr(0x1402b2a40L))(this);
        };
        int __SortByScore()
        {
            using org_ptr = int (WINAPIV*)(struct CandidateMgr*);
            return (org_ptr(0x1402b27a0L))(this);
        };
        ~CandidateMgr()
        {
            using org_ptr = void (WINAPIV*)(struct CandidateMgr*);
            (org_ptr(0x1402b10b0L))(this);
        };
        void dtor_CandidateMgr()
        {
            using org_ptr = void (WINAPIV*)(struct CandidateMgr*);
            (org_ptr(0x1402b10b0L))(this);
        };
    };
END_ATF_NAMESPACE
