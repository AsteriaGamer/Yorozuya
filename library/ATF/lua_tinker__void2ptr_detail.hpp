// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "lua_tinker__void2ptr_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            info::lua_tinker__void2ptrinvoke2_ptr lua_tinker__void2ptrinvoke2_next(nullptr);
            info::lua_tinker__void2ptrinvoke2_clbk lua_tinker__void2ptrinvoke2_user(nullptr);
            
            struct lua_tinker::var_base* lua_tinker__void2ptrinvoke2_wrapper(void* input)
            {
               return lua_tinker__void2ptrinvoke2_user(input);
            };
            
            hook_record void2ptr<lua_tinker::var_base>_functions[] = {
            {   (LPVOID)0x1404472e0L,
                (LPVOID *)&lua_tinker__void2ptrinvoke2_user,
                (LPVOID *)&lua_tinker__void2ptrinvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__void2ptrinvoke2_wrapper),
                (LPVOID)cast_pointer_function((struct lua_tinker::var_base*(lua_tinker::void2ptr<lua_tinker::var_base>::*)(void*))&lua_tinker::void2ptr<lua_tinker::var_base>::invoke) },
            
            };
            
        }; // end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__void2ptr_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            info::lua_tinker__void2ptrinvoke2_ptr lua_tinker__void2ptrinvoke2_next(nullptr);
            info::lua_tinker__void2ptrinvoke2_clbk lua_tinker__void2ptrinvoke2_user(nullptr);
            
            struct CLuaSignalReActor* lua_tinker__void2ptrinvoke2_wrapper(void* input)
            {
               return lua_tinker__void2ptrinvoke2_user(input);
            };
            
            hook_record void2ptr<CLuaSignalReActor>_functions[] = {
            {   (LPVOID)0x14040b780L,
                (LPVOID *)&lua_tinker__void2ptrinvoke2_user,
                (LPVOID *)&lua_tinker__void2ptrinvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__void2ptrinvoke2_wrapper),
                (LPVOID)cast_pointer_function((struct CLuaSignalReActor*(lua_tinker::void2ptr<CLuaSignalReActor>::*)(void*))&lua_tinker::void2ptr<CLuaSignalReActor>::invoke) },
            
            };
            
        }; // end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__void2ptr_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            info::lua_tinker__void2ptrinvoke2_ptr lua_tinker__void2ptrinvoke2_next(nullptr);
            info::lua_tinker__void2ptrinvoke2_clbk lua_tinker__void2ptrinvoke2_user(nullptr);
            
            struct CLuaEventMgr* lua_tinker__void2ptrinvoke2_wrapper(void* input)
            {
               return lua_tinker__void2ptrinvoke2_user(input);
            };
            
            hook_record void2ptr<CLuaEventMgr>_functions[] = {
            {   (LPVOID)0x14040af10L,
                (LPVOID *)&lua_tinker__void2ptrinvoke2_user,
                (LPVOID *)&lua_tinker__void2ptrinvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__void2ptrinvoke2_wrapper),
                (LPVOID)cast_pointer_function((struct CLuaEventMgr*(lua_tinker::void2ptr<CLuaEventMgr>::*)(void*))&lua_tinker::void2ptr<CLuaEventMgr>::invoke) },
            
            };
            
        }; // end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__void2ptr_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            info::lua_tinker__void2ptrinvoke2_ptr lua_tinker__void2ptrinvoke2_next(nullptr);
            info::lua_tinker__void2ptrinvoke2_clbk lua_tinker__void2ptrinvoke2_user(nullptr);
            
            struct LuaParam3* lua_tinker__void2ptrinvoke2_wrapper(void* input)
            {
               return lua_tinker__void2ptrinvoke2_user(input);
            };
            
            hook_record void2ptr<LuaParam3>_functions[] = {
            {   (LPVOID)0x140409d00L,
                (LPVOID *)&lua_tinker__void2ptrinvoke2_user,
                (LPVOID *)&lua_tinker__void2ptrinvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__void2ptrinvoke2_wrapper),
                (LPVOID)cast_pointer_function((struct LuaParam3*(lua_tinker::void2ptr<LuaParam3>::*)(void*))&lua_tinker::void2ptr<LuaParam3>::invoke) },
            
            };
            
        }; // end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__void2ptr_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            info::lua_tinker__void2ptrinvoke2_ptr lua_tinker__void2ptrinvoke2_next(nullptr);
            info::lua_tinker__void2ptrinvoke2_clbk lua_tinker__void2ptrinvoke2_user(nullptr);
            
            struct lua_tinker::user* lua_tinker__void2ptrinvoke2_wrapper(void* input)
            {
               return lua_tinker__void2ptrinvoke2_user(input);
            };
            
            hook_record void2ptr<lua_tinker::user>_functions[] = {
            {   (LPVOID)0x140409de0L,
                (LPVOID *)&lua_tinker__void2ptrinvoke2_user,
                (LPVOID *)&lua_tinker__void2ptrinvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__void2ptrinvoke2_wrapper),
                (LPVOID)cast_pointer_function((struct lua_tinker::user*(lua_tinker::void2ptr<lua_tinker::user>::*)(void*))&lua_tinker::void2ptr<lua_tinker::user>::invoke) },
            
            };
            
        }; // end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__void2ptr_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            info::lua_tinker__void2ptrinvoke2_ptr lua_tinker__void2ptrinvoke2_next(nullptr);
            info::lua_tinker__void2ptrinvoke2_clbk lua_tinker__void2ptrinvoke2_user(nullptr);
            
            struct CMonster* lua_tinker__void2ptrinvoke2_wrapper(void* input)
            {
               return lua_tinker__void2ptrinvoke2_user(input);
            };
            
            hook_record void2ptr<CMonster>_functions[] = {
            {   (LPVOID)0x14040b790L,
                (LPVOID *)&lua_tinker__void2ptrinvoke2_user,
                (LPVOID *)&lua_tinker__void2ptrinvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__void2ptrinvoke2_wrapper),
                (LPVOID)cast_pointer_function((struct CMonster*(lua_tinker::void2ptr<CMonster>::*)(void*))&lua_tinker::void2ptr<CMonster>::invoke) },
            
            };
            
        }; // end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__void2ptr_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            info::lua_tinker__void2ptrinvoke2_ptr lua_tinker__void2ptrinvoke2_next(nullptr);
            info::lua_tinker__void2ptrinvoke2_clbk lua_tinker__void2ptrinvoke2_user(nullptr);
            
            struct CLuaEventNode* lua_tinker__void2ptrinvoke2_wrapper(void* input)
            {
               return lua_tinker__void2ptrinvoke2_user(input);
            };
            
            hook_record void2ptr<CLuaEventNode>_functions[] = {
            {   (LPVOID)0x14040aef0L,
                (LPVOID *)&lua_tinker__void2ptrinvoke2_user,
                (LPVOID *)&lua_tinker__void2ptrinvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__void2ptrinvoke2_wrapper),
                (LPVOID)cast_pointer_function((struct CLuaEventNode*(lua_tinker::void2ptr<CLuaEventNode>::*)(void*))&lua_tinker::void2ptr<CLuaEventNode>::invoke) },
            
            };
            
        }; // end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__void2ptr_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            info::lua_tinker__void2ptrinvoke2_ptr lua_tinker__void2ptrinvoke2_next(nullptr);
            info::lua_tinker__void2ptrinvoke2_clbk lua_tinker__void2ptrinvoke2_user(nullptr);
            
            struct CLuaScript* lua_tinker__void2ptrinvoke2_wrapper(void* input)
            {
               return lua_tinker__void2ptrinvoke2_user(input);
            };
            
            hook_record void2ptr<CLuaScript>_functions[] = {
            {   (LPVOID)0x14040af00L,
                (LPVOID *)&lua_tinker__void2ptrinvoke2_user,
                (LPVOID *)&lua_tinker__void2ptrinvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__void2ptrinvoke2_wrapper),
                (LPVOID)cast_pointer_function((struct CLuaScript*(lua_tinker::void2ptr<CLuaScript>::*)(void*))&lua_tinker::void2ptr<CLuaScript>::invoke) },
            
            };
            
        }; // end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
