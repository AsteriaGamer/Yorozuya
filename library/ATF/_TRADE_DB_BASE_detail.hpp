// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "_TRADE_DB_BASE_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        static info::_TRADE_DB_BASEClear2_ptr _TRADE_DB_BASEClear2_next(nullptr);
        static info::_TRADE_DB_BASEClear2_clbk _TRADE_DB_BASEClear2_user(nullptr);
        static info::_TRADE_DB_BASEInit4_ptr _TRADE_DB_BASEInit4_next(nullptr);
        static info::_TRADE_DB_BASEInit4_clbk _TRADE_DB_BASEInit4_user(nullptr);
        static info::_TRADE_DB_BASEctor__TRADE_DB_BASE6_ptr _TRADE_DB_BASEctor__TRADE_DB_BASE6_next(nullptr);
        static info::_TRADE_DB_BASEctor__TRADE_DB_BASE6_clbk _TRADE_DB_BASEctor__TRADE_DB_BASE6_user(nullptr);
        
        static info::_TRADE_DB_BASE___LISTClear2_ptr _TRADE_DB_BASE___LISTClear2_next(nullptr);
        static info::_TRADE_DB_BASE___LISTClear2_clbk _TRADE_DB_BASE___LISTClear2_user(nullptr);
        static info::_TRADE_DB_BASE___LISTIsEmpty4_ptr _TRADE_DB_BASE___LISTIsEmpty4_next(nullptr);
        static info::_TRADE_DB_BASE___LISTIsEmpty4_clbk _TRADE_DB_BASE___LISTIsEmpty4_user(nullptr);
        static info::_TRADE_DB_BASE___LISTctor__LIST6_ptr _TRADE_DB_BASE___LISTctor__LIST6_next(nullptr);
        static info::_TRADE_DB_BASE___LISTctor__LIST6_clbk _TRADE_DB_BASE___LISTctor__LIST6_user(nullptr);
        
        static void _TRADE_DB_BASEClear2_wrapper(struct _TRADE_DB_BASE* _this)
        {
           _TRADE_DB_BASEClear2_user(_this, _TRADE_DB_BASEClear2_next);
        };
        static void _TRADE_DB_BASEInit4_wrapper(struct _TRADE_DB_BASE* _this)
        {
           _TRADE_DB_BASEInit4_user(_this, _TRADE_DB_BASEInit4_next);
        };
        static void _TRADE_DB_BASEctor__TRADE_DB_BASE6_wrapper(struct _TRADE_DB_BASE* _this)
        {
           _TRADE_DB_BASEctor__TRADE_DB_BASE6_user(_this, _TRADE_DB_BASEctor__TRADE_DB_BASE6_next);
        };
        
        static void _TRADE_DB_BASE___LISTClear2_wrapper(struct _TRADE_DB_BASE::_LIST* _this)
        {
           _TRADE_DB_BASE___LISTClear2_user(_this, _TRADE_DB_BASE___LISTClear2_next);
        };
        static bool _TRADE_DB_BASE___LISTIsEmpty4_wrapper(struct _TRADE_DB_BASE::_LIST* _this)
        {
           return _TRADE_DB_BASE___LISTIsEmpty4_user(_this, _TRADE_DB_BASE___LISTIsEmpty4_next);
        };
        static void _TRADE_DB_BASE___LISTctor__LIST6_wrapper(struct _TRADE_DB_BASE::_LIST* _this)
        {
           _TRADE_DB_BASE___LISTctor__LIST6_user(_this, _TRADE_DB_BASE___LISTctor__LIST6_next);
        };
        
        static hook_record _TRADE_DB_BASE_functions[] = {
        {   (LPVOID)0x140076e70L,
            (LPVOID *)&_TRADE_DB_BASEClear2_user,
            (LPVOID *)&_TRADE_DB_BASEClear2_next,
            (LPVOID)cast_pointer_function(_TRADE_DB_BASEClear2_wrapper),
            (LPVOID)cast_pointer_function((void(_TRADE_DB_BASE::*)())&_TRADE_DB_BASE::Clear) },
        {   (LPVOID)0x140077ca0L,
            (LPVOID *)&_TRADE_DB_BASEInit4_user,
            (LPVOID *)&_TRADE_DB_BASEInit4_next,
            (LPVOID)cast_pointer_function(_TRADE_DB_BASEInit4_wrapper),
            (LPVOID)cast_pointer_function((void(_TRADE_DB_BASE::*)())&_TRADE_DB_BASE::Init) },
        {   (LPVOID)0x140076d40L,
            (LPVOID *)&_TRADE_DB_BASEctor__TRADE_DB_BASE6_user,
            (LPVOID *)&_TRADE_DB_BASEctor__TRADE_DB_BASE6_next,
            (LPVOID)cast_pointer_function(_TRADE_DB_BASEctor__TRADE_DB_BASE6_wrapper),
            (LPVOID)cast_pointer_function((void(_TRADE_DB_BASE::*)())&_TRADE_DB_BASE::ctor__TRADE_DB_BASE) },
        
        {   (LPVOID)0x140076e00L,
            (LPVOID *)&_TRADE_DB_BASE___LISTClear2_user,
            (LPVOID *)&_TRADE_DB_BASE___LISTClear2_next,
            (LPVOID)cast_pointer_function(_TRADE_DB_BASE___LISTClear2_wrapper),
            (LPVOID)cast_pointer_function((void(_TRADE_DB_BASE::_LIST::*)())&_TRADE_DB_BASE::_LIST::Clear) },
        {   (LPVOID)0x14035fdf0L,
            (LPVOID *)&_TRADE_DB_BASE___LISTIsEmpty4_user,
            (LPVOID *)&_TRADE_DB_BASE___LISTIsEmpty4_next,
            (LPVOID)cast_pointer_function(_TRADE_DB_BASE___LISTIsEmpty4_wrapper),
            (LPVOID)cast_pointer_function((bool(_TRADE_DB_BASE::_LIST::*)())&_TRADE_DB_BASE::_LIST::IsEmpty) },
        {   (LPVOID)0x140076db0L,
            (LPVOID *)&_TRADE_DB_BASE___LISTctor__LIST6_user,
            (LPVOID *)&_TRADE_DB_BASE___LISTctor__LIST6_next,
            (LPVOID)cast_pointer_function(_TRADE_DB_BASE___LISTctor__LIST6_wrapper),
            (LPVOID)cast_pointer_function((void(_TRADE_DB_BASE::_LIST::*)())&_TRADE_DB_BASE::_LIST::ctor__LIST) },
        
        };
        
    }; // static end namespace detail
END_ATF_NAMESPACE
