// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CAtlTraceSettings_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        info::CAtlTraceSettingsctor_CAtlTraceSettings1_ptr CAtlTraceSettingsctor_CAtlTraceSettings1_next(nullptr);
        info::CAtlTraceSettingsctor_CAtlTraceSettings1_clbk CAtlTraceSettingsctor_CAtlTraceSettings1_user(nullptr);
        info::CAtlTraceSettingsMarkValid2_ptr CAtlTraceSettingsMarkValid2_next(nullptr);
        info::CAtlTraceSettingsMarkValid2_clbk CAtlTraceSettingsMarkValid2_user(nullptr);
        info::CAtlTraceSettingsRelease3_ptr CAtlTraceSettingsRelease3_next(nullptr);
        info::CAtlTraceSettingsRelease3_clbk CAtlTraceSettingsRelease3_user(nullptr);
        info::CAtlTraceSettingsTryAddRef4_ptr CAtlTraceSettingsTryAddRef4_next(nullptr);
        info::CAtlTraceSettingsTryAddRef4_clbk CAtlTraceSettingsTryAddRef4_user(nullptr);
        info::CAtlTraceSettingsTryAllocate5_ptr CAtlTraceSettingsTryAllocate5_next(nullptr);
        info::CAtlTraceSettingsTryAllocate5_clbk CAtlTraceSettingsTryAllocate5_user(nullptr);
        
        void CAtlTraceSettingsctor_CAtlTraceSettings1_wrapper(struct CAtlTraceSettings* _this)
        {
           CAtlTraceSettingsctor_CAtlTraceSettings1_user(_this, CAtlTraceSettingsctor_CAtlTraceSettings1_next);
        };
        void CAtlTraceSettingsMarkValid2_wrapper(struct CAtlTraceSettings* _this, int nCookie)
        {
           CAtlTraceSettingsMarkValid2_user(_this, nCookie, CAtlTraceSettingsMarkValid2_next);
        };
        void CAtlTraceSettingsRelease3_wrapper(struct CAtlTraceSettings* _this)
        {
           CAtlTraceSettingsRelease3_user(_this, CAtlTraceSettingsRelease3_next);
        };
        bool CAtlTraceSettingsTryAddRef4_wrapper(struct CAtlTraceSettings* _this)
        {
           return CAtlTraceSettingsTryAddRef4_user(_this, CAtlTraceSettingsTryAddRef4_next);
        };
        bool CAtlTraceSettingsTryAllocate5_wrapper(struct CAtlTraceSettings* _this)
        {
           return CAtlTraceSettingsTryAllocate5_user(_this, CAtlTraceSettingsTryAllocate5_next);
        };
        
        hook_record CAtlTraceSettings_functions[] = {
        {   (LPVOID)0x140676250L,
            (LPVOID *)&CAtlTraceSettingsctor_CAtlTraceSettings1_user,
            (LPVOID *)&CAtlTraceSettingsctor_CAtlTraceSettings1_next,
            (LPVOID)cast_pointer_function(CAtlTraceSettingsctor_CAtlTraceSettings1_wrapper),
            (LPVOID)cast_pointer_function((void(CAtlTraceSettings::*)())&CAtlTraceSettings::ctor_CAtlTraceSettings) },
        {   (LPVOID)0x140675500L,
            (LPVOID *)&CAtlTraceSettingsMarkValid2_user,
            (LPVOID *)&CAtlTraceSettingsMarkValid2_next,
            (LPVOID)cast_pointer_function(CAtlTraceSettingsMarkValid2_wrapper),
            (LPVOID)cast_pointer_function((void(CAtlTraceSettings::*)(int))&CAtlTraceSettings::MarkValid) },
        {   (LPVOID)0x1406755e0L,
            (LPVOID *)&CAtlTraceSettingsRelease3_user,
            (LPVOID *)&CAtlTraceSettingsRelease3_next,
            (LPVOID)cast_pointer_function(CAtlTraceSettingsRelease3_wrapper),
            (LPVOID)cast_pointer_function((void(CAtlTraceSettings::*)())&CAtlTraceSettings::Release) },
        {   (LPVOID)0x140675590L,
            (LPVOID *)&CAtlTraceSettingsTryAddRef4_user,
            (LPVOID *)&CAtlTraceSettingsTryAddRef4_next,
            (LPVOID)cast_pointer_function(CAtlTraceSettingsTryAddRef4_wrapper),
            (LPVOID)cast_pointer_function((bool(CAtlTraceSettings::*)())&CAtlTraceSettings::TryAddRef) },
        {   (LPVOID)0x1406754b0L,
            (LPVOID *)&CAtlTraceSettingsTryAllocate5_user,
            (LPVOID *)&CAtlTraceSettingsTryAllocate5_next,
            (LPVOID)cast_pointer_function(CAtlTraceSettingsTryAllocate5_wrapper),
            (LPVOID)cast_pointer_function((bool(CAtlTraceSettings::*)())&CAtlTraceSettings::TryAllocate) },
        
        };
        
    }; // end namespace detail
END_ATF_NAMESPACE
