// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CDarkHole.hpp"
#include "CDarkHoleChannelVtbl.hpp"
#include "CGameObject.hpp"
#include "CIndexList.hpp"
#include "CMapData.hpp"
#include "CPartyPlayer.hpp"
#include "CPlayer.hpp"
#include "EM_DH_EVENT.hpp"
#include "_ENTER_DUNGEON_NEW_POS.hpp"
#include "_LAYER_SET.hpp"
#include "_dh_mission_mgr.hpp"
#include "_dh_mission_setup.hpp"
#include "_dh_player_mgr.hpp"
#include "_dh_quest_setup.hpp"


START_ATF_NAMESPACE
    #pragma pack(push, 8)
    struct CDarkHoleChannel
    {
        struct __enter_member
        {
            bool bActive;
            bool bDisnormalClose;
            unsigned int dwDisconnectTime;
        public:
            __enter_member(bool active, bool disnormal, unsigned int time)
            {
                using org_ptr = void (WINAPIV*)(struct __enter_member*, bool, bool, unsigned int);
                (org_ptr(0x14026f420L))(this, active, disnormal, time);
            };
            void ctor___enter_member(bool active, bool disnormal, unsigned int time)
            {
                using org_ptr = void (WINAPIV*)(struct __enter_member*, bool, bool, unsigned int);
                (org_ptr(0x14026f420L))(this, active, disnormal, time);
            };
            __enter_member()
            {
                using org_ptr = void (WINAPIV*)(struct __enter_member*);
                (org_ptr(0x14026ea50L))(this);
            };
            void ctor___enter_member()
            {
                using org_ptr = void (WINAPIV*)(struct __enter_member*);
                (org_ptr(0x14026ea50L))(this);
            };
        };
        CDarkHoleChannelVtbl *vfptr;
        unsigned __int16 m_wChannelIndex;
        unsigned int m_dwChannelSerial;
        CDarkHole *m_pHoleObj;
        unsigned int m_dwHoleSerial;
        unsigned int m_dwQuestStartTime;
        _dh_quest_setup *m_pQuestSetup;
        unsigned __int16 m_wLayerIndex;
        _LAYER_SET *m_pLayerSet;
        _dh_mission_mgr m_MissionMgr;
        char m_wszOpenerName[17];
        char m_aszOpenerName[17];
        unsigned int m_dwOpenerSerial;
        int m_nOpenerDegree;
        int m_nOpenerSubDegree;
        bool m_bCheckMemberClose;
        CPartyPlayer *m_pPartyMng;
        _dh_player_mgr m_Quester[32];
        _dh_player_mgr *m_pLeaderPtr;
        unsigned int m_dwEnterOrderCounter;
        unsigned int m_dwNextCloseTime;
        unsigned int m_dwSendNewMissionMsgNextTime;
        CIndexList m_listEnterMember;
        bool m_bMoveNextMission;
    public:
        void AddMonster()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*);
            (org_ptr(0x140268f40L))(this);
        };
        CDarkHoleChannel()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*);
            (org_ptr(0x140266830L))(this);
        };
        void ctor_CDarkHoleChannel()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*);
            (org_ptr(0x140266830L))(this);
        };
        bool CanYouEnterHole(struct CPlayer* pEnter)
        {
            using org_ptr = bool (WINAPIV*)(struct CDarkHoleChannel*, struct CPlayer*);
            return (org_ptr(0x14026a710L))(this, pEnter);
        };
        void ChangeMonster()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*);
            (org_ptr(0x140268570L))(this);
        };
        void ChangeMonsterApparition(int nTermMSec)
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*, int);
            (org_ptr(0x140269700L))(this, nTermMSec);
        };
        void CheckCurrentMission()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*);
            (org_ptr(0x1402691e0L))(this);
        };
        bool CheckEvent(EM_DH_EVENT eventType, int nContentTable, int nContentIndex, int nCount, struct CGameObject* pObj)
        {
            using org_ptr = bool (WINAPIV*)(struct CDarkHoleChannel*, EM_DH_EVENT, int, int, int, struct CGameObject*);
            return (org_ptr(0x140266c60L))(this, eventType, nContentTable, nContentIndex, nCount, pObj);
        };
        void CheckInnerEventDummy()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*);
            (org_ptr(0x1402699f0L))(this);
        };
        void CheckMember()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*);
            (org_ptr(0x140269880L))(this);
        };
        void CheckRespawnMonster()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*);
            (org_ptr(0x14026a0d0L))(this);
        };
        void CheckSendNewMissionMsg()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*);
            (org_ptr(0x140267640L))(this);
        };
        void CheckWaitNextMission()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*);
            (org_ptr(0x1402676b0L))(this);
        };
        bool ClearMember(struct CPlayer* pMember, bool bDisconnect, struct _dh_player_mgr::_pos* poutPlayerPos)
        {
            using org_ptr = bool (WINAPIV*)(struct CDarkHoleChannel*, struct CPlayer*, bool, struct _dh_player_mgr::_pos*);
            return (org_ptr(0x14026ab00L))(this, pMember, bDisconnect, poutPlayerPos);
        };
        void CloseDungeon()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*);
            (org_ptr(0x140267ba0L))(this);
        };
        void CreateMonster()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*);
            (org_ptr(0x1402682c0L))(this);
        };
        int GetAllMemberNum()
        {
            using org_ptr = int (WINAPIV*)(struct CDarkHoleChannel*);
            return (org_ptr(0x14026a6c0L))(this);
        };
        int GetCurrentMemberNum()
        {
            using org_ptr = int (WINAPIV*)(struct CDarkHoleChannel*);
            return (org_ptr(0x14026a630L))(this);
        };
        bool GetEnterNewPos(struct _ENTER_DUNGEON_NEW_POS* pNewPos)
        {
            using org_ptr = bool (WINAPIV*)(struct CDarkHoleChannel*, struct _ENTER_DUNGEON_NEW_POS*);
            return (org_ptr(0x14026a570L))(this, pNewPos);
        };
        unsigned int GetLeaderSerial()
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CDarkHoleChannel*);
            return (org_ptr(0x14026ae60L))(this);
        };
        int GetMonsterNumInCurMissionArea(int nMonsterRecIndex)
        {
            using org_ptr = int (WINAPIV*)(struct CDarkHoleChannel*, int);
            return (org_ptr(0x14026b170L))(this, nMonsterRecIndex);
        };
        struct _dh_player_mgr* GetPlayerInfo(unsigned int dwSerial)
        {
            using org_ptr = struct _dh_player_mgr* (WINAPIV*)(struct CDarkHoleChannel*, unsigned int);
            return (org_ptr(0x14026adb0L))(this, dwSerial);
        };
        bool GotoNextMission()
        {
            using org_ptr = bool (WINAPIV*)(struct CDarkHoleChannel*);
            return (org_ptr(0x140267730L))(this);
        };
        bool GotoNextMissionByPosition(float* pfStartPos)
        {
            using org_ptr = bool (WINAPIV*)(struct CDarkHoleChannel*, float*);
            return (org_ptr(0x140267840L))(this, pfStartPos);
        };
        void Init()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*);
            (org_ptr(0x140266980L))(this);
        };
        bool IsAllMemberNearPosition(float* pfCenterPos, int nLen)
        {
            using org_ptr = bool (WINAPIV*)(struct CDarkHoleChannel*, float*, int);
            return (org_ptr(0x14026afb0L))(this, pfCenterPos, nLen);
        };
        bool IsFill()
        {
            using org_ptr = bool (WINAPIV*)(struct CDarkHoleChannel*);
            return (org_ptr(0x140266ac0L))(this);
        };
        bool IsMoveNextMission(int nPortalIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct CDarkHoleChannel*, int);
            return (org_ptr(0x14026aef0L))(this, nPortalIndex);
        };
        bool IsOpenPartyMember(struct CPlayer* pOpener)
        {
            using org_ptr = bool (WINAPIV*)(struct CDarkHoleChannel*, struct CPlayer*);
            return (org_ptr(0x14026af60L))(this, pOpener);
        };
        bool IsReEnterable(unsigned int dwEnterSerial)
        {
            using org_ptr = bool (WINAPIV*)(struct CDarkHoleChannel*, unsigned int);
            return (org_ptr(0x14026a4e0L))(this, dwEnterSerial);
        };
        void NextMissionOtherQuester(struct CPlayer* pLeader, struct _dh_mission_setup* pNextMission)
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*, struct CPlayer*, struct _dh_mission_setup*);
            (org_ptr(0x140267400L))(this, pLeader, pNextMission);
        };
        void OnLoop()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*);
            (org_ptr(0x140266ae0L))(this);
        };
        void OpenDungeon(struct _dh_quest_setup* pQuestSetup, int nLayerIndex, struct CPlayer* pOpener, struct CDarkHole* pHoleObj)
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*, struct _dh_quest_setup*, int, struct CPlayer*, struct CDarkHole*);
            (org_ptr(0x1402678f0L))(this, pQuestSetup, nLayerIndex, pOpener, pHoleObj);
        };
        bool PushMember(struct CPlayer* pMember, bool bReconnect, struct CMapData* pOldMap, uint16_t wLastLayer, float* pfOldPos)
        {
            using org_ptr = bool (WINAPIV*)(struct CDarkHoleChannel*, struct CPlayer*, bool, struct CMapData*, uint16_t, float*);
            return (org_ptr(0x14026a8c0L))(this, pMember, bReconnect, pOldMap, wLastLayer, pfOldPos);
        };
        struct _dh_mission_setup* SearchMissionFromPos(float* pfStartPos)
        {
            using org_ptr = struct _dh_mission_setup* (WINAPIV*)(struct CDarkHoleChannel*, float*);
            return (org_ptr(0x14026b090L))(this, pfStartPos);
        };
        void SendMsg_AskReEnter(struct CPlayer* pDst)
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*, struct CPlayer*);
            (org_ptr(0x14026c9b0L))(this, pDst);
        };
        void SendMsg_ChannelClose()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*);
            (org_ptr(0x14026c4a0L))(this);
        };
        void SendMsg_GateDestroy(char* byType, char* pSend, int nSize)
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*, char*, char*, int);
            (org_ptr(0x14026cd30L))(this, byType, pSend, nSize);
        };
        void SendMsg_JobCount(int nJobIndex, int nCount)
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*, int, int);
            (org_ptr(0x14026bcf0L))(this, nJobIndex, nCount);
        };
        void SendMsg_JobPass(int nJobIndex)
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*, int);
            (org_ptr(0x14026c140L))(this, nJobIndex);
        };
        void SendMsg_LeaderChange(struct CPlayer* pNewLeader)
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*, struct CPlayer*);
            (org_ptr(0x14026b540L))(this, pNewLeader);
        };
        void SendMsg_MemberInfo(struct CPlayer* pDst)
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*, struct CPlayer*);
            (org_ptr(0x14026bb00L))(this, pDst);
        };
        void SendMsg_MissionInfo(struct CPlayer* pDst)
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*, struct CPlayer*);
            (org_ptr(0x14026b7c0L))(this, pDst);
        };
        void SendMsg_MissionPass()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*);
            (org_ptr(0x14026c230L))(this);
        };
        void SendMsg_NewMember(struct CPlayer* pNewMember, bool bReconnect)
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*, struct CPlayer*, bool);
            (org_ptr(0x14026b2e0L))(this, pNewMember, bReconnect);
        };
        void SendMsg_NewMission()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*);
            (org_ptr(0x14026c580L))(this);
        };
        void SendMsg_OpenPortalByReact(int nPortalIndex)
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*, int);
            (org_ptr(0x14026be00L))(this, nPortalIndex);
        };
        void SendMsg_OpenPortalByResult(int nPortalIndex)
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*, int);
            (org_ptr(0x14026bef0L))(this, nPortalIndex);
        };
        void SendMsg_PopMember(struct CPlayer* pPopMember, bool bDisconnect)
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*, struct CPlayer*, bool);
            (org_ptr(0x14026b430L))(this, pPopMember, bDisconnect);
        };
        void SendMsg_QuestInfo(struct CPlayer* pDst)
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*, struct CPlayer*);
            (org_ptr(0x14026b640L))(this, pDst);
        };
        void SendMsg_QuestPass()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*);
            (org_ptr(0x14026c3c0L))(this);
        };
        void SendMsg_RealAddLimTime(int nAddSec, char* pMsg)
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*, int, char*);
            (org_ptr(0x14026cb80L))(this, nAddSec, pMsg);
        };
        void SendMsg_RealMsgInform(char* pMsg)
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*, char*);
            (org_ptr(0x14026ca60L))(this, pMsg);
        };
        void SendMsg_TimeOut()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*);
            (org_ptr(0x14026c8d0L))(this);
        };
        void ShareItemToMonster()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*);
            (org_ptr(0x140268990L))(this);
        };
        void WaitNextMission()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*);
            (org_ptr(0x1402677f0L))(this);
        };
        bool _Reward()
        {
            using org_ptr = bool (WINAPIV*)(struct CDarkHoleChannel*);
            return (org_ptr(0x140267ef0L))(this);
        };
        ~CDarkHoleChannel()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*);
            (org_ptr(0x140266920L))(this);
        };
        void dtor_CDarkHoleChannel()
        {
            using org_ptr = void (WINAPIV*)(struct CDarkHoleChannel*);
            (org_ptr(0x140266920L))(this);
        };
    };
    #pragma pack(pop)
END_ATF_NAMESPACE
