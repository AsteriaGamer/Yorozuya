// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "D3DXMATRIX.hpp"


START_ATF_NAMESPACE
    struct R3Camera
    {
        float mPos[3];
        float mPoint[3];
        D3DXMATRIX mMatView;
        float mTh;
        float mPh;
        float mDist;
        float mFixXrot;
        float mTime;
        float mOldPh;
        float mPhDist;
        float mPhSign;
        float mCharYangle;
        float mCharYangleForTime;
        float mPointSmooth;
        float mRotSmooth;
        float mTarPoint[3];
        float mTarTh;
        float mTarPh;
        float mTarDist;
        void *mBsp;
    public:
        float GetDist()
        {
            using org_ptr = float (WINAPIV*)(struct R3Camera*);
            return (org_ptr(0x1405134f0L))(this);
        };
        float GetPh()
        {
            using org_ptr = float (WINAPIV*)(struct R3Camera*);
            return (org_ptr(0x1405134e0L))(this);
        };
        void GetPoint(float* arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct R3Camera*, float*);
            (org_ptr(0x140513500L))(this, arg_0);
        };
        void GetPos(float* arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct R3Camera*, float*);
            (org_ptr(0x140513520L))(this, arg_0);
        };
        void GetSmoothTarPoint(float* arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct R3Camera*, float*);
            (org_ptr(0x1405135c0L))(this, arg_0);
        };
        float GetTh()
        {
            using org_ptr = float (WINAPIV*)(struct R3Camera*);
            return (org_ptr(0x1405134d0L))(this);
        };
        struct D3DXMATRIX* GetViewMatrix()
        {
            using org_ptr = struct D3DXMATRIX* (WINAPIV*)(struct R3Camera*);
            return (org_ptr(0x140513540L))(this);
        };
        void MakeCameraAndViewMatrix()
        {
            using org_ptr = void (WINAPIV*)(struct R3Camera*);
            (org_ptr(0x140513a60L))(this);
        };
        void MakeViewMatrix(struct D3DXMATRIX* arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct R3Camera*, struct D3DXMATRIX*);
            (org_ptr(0x1405136f0L))(this, arg_0);
        };
        void SetBspPtr(void* arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct R3Camera*, void*);
            (org_ptr(0x1405136e0L))(this, arg_0);
        };
        void SetDist(float arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct R3Camera*, float);
            (org_ptr(0x140513590L))(this, arg_0);
        };
        void SetMatrix(struct Matrix4* arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct R3Camera*, struct Matrix4*);
            (org_ptr(0x140513ae0L))(this, arg_0);
        };
        void SetPoint(float arg_0, float arg_1, float arg_2)
        {
            using org_ptr = void (WINAPIV*)(struct R3Camera*, float, float, float);
            (org_ptr(0x140513550L))(this, arg_0, arg_1, arg_2);
        };
        void SetPos(float arg_0, float arg_1, float arg_2)
        {
            using org_ptr = void (WINAPIV*)(struct R3Camera*, float, float, float);
            (org_ptr(0x140513570L))(this, arg_0, arg_1, arg_2);
        };
        void SetSmoothDistLoop(float arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct R3Camera*, float);
            (org_ptr(0x140513b30L))(this, arg_0);
        };
        void SetSmoothPointLoop(float arg_0, float arg_1, float arg_2)
        {
            using org_ptr = void (WINAPIV*)(struct R3Camera*, float, float, float);
            (org_ptr(0x1405135e0L))(this, arg_0, arg_1, arg_2);
        };
        void SetSmoothTarPoint(float arg_0, float arg_1, float arg_2)
        {
            using org_ptr = void (WINAPIV*)(struct R3Camera*, float, float, float);
            (org_ptr(0x1405135a0L))(this, arg_0, arg_1, arg_2);
        };
        void SetSmoothThPhLoop(float arg_0, float arg_1)
        {
            using org_ptr = void (WINAPIV*)(struct R3Camera*, float, float);
            (org_ptr(0x140513630L))(this, arg_0, arg_1);
        };
        void SetSmoothValue(float arg_0, float arg_1)
        {
            using org_ptr = void (WINAPIV*)(struct R3Camera*, float, float);
            (org_ptr(0x1405136c0L))(this, arg_0, arg_1);
        };
        void SetThPh(float arg_0, float arg_1)
        {
            using org_ptr = void (WINAPIV*)(struct R3Camera*, float, float);
            (org_ptr(0x140513580L))(this, arg_0, arg_1);
        };
        void SetViewMatrix()
        {
            using org_ptr = void (WINAPIV*)(struct R3Camera*);
            (org_ptr(0x140513b00L))(this);
        };
        ~R3Camera()
        {
            using org_ptr = int64_t (WINAPIV*)(struct R3Camera*);
            (org_ptr(0x1405134c0L))(this);
        };
        int64_t dtor_R3Camera()
        {
            using org_ptr = int64_t (WINAPIV*)(struct R3Camera*);
            return (org_ptr(0x1405134c0L))(this);
        };
    };
END_ATF_NAMESPACE
