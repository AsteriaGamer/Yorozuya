// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CMapData.hpp"
#include "std__vector.hpp"
#include "tagTIMESTAMP_STRUCT.hpp"


START_ATF_NAMESPACE
    struct CGuildRoomSystem
    {
        std::vector<CGuildRoomInfo,std::allocator<CGuildRoomInfo> > m_vecGuildRoom;
        CMapData *m_pRoomMap[3][2];
    public:
        CGuildRoomSystem()
        {
            using org_ptr = void (WINAPIV*)(struct CGuildRoomSystem*);
            (org_ptr(0x1402e9610L))(this);
        };
        void ctor_CGuildRoomSystem()
        {
            using org_ptr = void (WINAPIV*)(struct CGuildRoomSystem*);
            (org_ptr(0x1402e9610L))(this);
        };
        static struct CGuildRoomSystem* GetInstance()
        {
            using org_ptr = struct CGuildRoomSystem* (WINAPIV*)();
            return (org_ptr(0x14007a070L))();
        };
        struct CMapData* GetMapData(char byRace, char byMapType)
        {
            using org_ptr = struct CMapData* (WINAPIV*)(struct CGuildRoomSystem*, char, char);
            return (org_ptr(0x1402ea9c0L))(this, byRace, byMapType);
        };
        bool GetMapPos(unsigned int dwGuildSerial, float* pPos, struct CMapData* pMap, uint16_t* wMapLayer, char* byRoomType)
        {
            using org_ptr = bool (WINAPIV*)(struct CGuildRoomSystem*, unsigned int, float*, struct CMapData*, uint16_t*, char*);
            return (org_ptr(0x1402ea790L))(this, dwGuildSerial, pPos, pMap, wMapLayer, byRoomType);
        };
        bool GetRestTime(unsigned int dwGuildSerial, int* tt)
        {
            using org_ptr = bool (WINAPIV*)(struct CGuildRoomSystem*, unsigned int, int*);
            return (org_ptr(0x1402eaa10L))(this, dwGuildSerial, tt);
        };
        int GetRoomCountByType(char byRace, char byRoomType)
        {
            using org_ptr = int (WINAPIV*)(struct CGuildRoomSystem*, char, char);
            return (org_ptr(0x1402ea460L))(this, byRace, byRoomType);
        };
        char GetRoomType(unsigned int dwGuildSerial)
        {
            using org_ptr = char (WINAPIV*)(struct CGuildRoomSystem*, unsigned int);
            return (org_ptr(0x1402eaae0L))(this, dwGuildSerial);
        };
        bool Init()
        {
            using org_ptr = bool (WINAPIV*)(struct CGuildRoomSystem*);
            return (org_ptr(0x1402e9a00L))(this);
        };
        bool IsGuildRoomMemberIn(unsigned int dwGuildSerial, int n, unsigned int dwCharSerial)
        {
            using org_ptr = bool (WINAPIV*)(struct CGuildRoomSystem*, unsigned int, int, unsigned int);
            return (org_ptr(0x1402eaba0L))(this, dwGuildSerial, n, dwCharSerial);
        };
        bool IsRoomRented(unsigned int dwGuildSerial)
        {
            using org_ptr = bool (WINAPIV*)(struct CGuildRoomSystem*, unsigned int);
            return (org_ptr(0x1402ea540L))(this, dwGuildSerial);
        };
        bool Load_db()
        {
            using org_ptr = bool (WINAPIV*)(struct CGuildRoomSystem*);
            return (org_ptr(0x1402e9690L))(this);
        };
        char RentRoom(char byRace, char byRoomType, int iGuildInx, unsigned int dwGuildSerial, struct tagTIMESTAMP_STRUCT* ts, bool bRestore)
        {
            using org_ptr = char (WINAPIV*)(struct CGuildRoomSystem*, char, char, int, unsigned int, struct tagTIMESTAMP_STRUCT*, bool);
            return (org_ptr(0x1402ea230L))(this, byRace, byRoomType, iGuildInx, dwGuildSerial, ts, bRestore);
        };
        void RentRoomTimer()
        {
            using org_ptr = void (WINAPIV*)(struct CGuildRoomSystem*);
            (org_ptr(0x1402ea1a0L))(this);
        };
        int RoomIn(unsigned int dwGuildSerial, int n, unsigned int dwCharSerial)
        {
            using org_ptr = int (WINAPIV*)(struct CGuildRoomSystem*, unsigned int, int, unsigned int);
            return (org_ptr(0x1402ea5f0L))(this, dwGuildSerial, n, dwCharSerial);
        };
        int RoomOut(unsigned int dwGuildSerial, int n, unsigned int dwCharSerial)
        {
            using org_ptr = int (WINAPIV*)(struct CGuildRoomSystem*, unsigned int, int, unsigned int);
            return (org_ptr(0x1402ea6c0L))(this, dwGuildSerial, n, dwCharSerial);
        };
        int SetPlayerOut(unsigned int dwGuildSerial, int n, unsigned int dwCharSerial)
        {
            using org_ptr = int (WINAPIV*)(struct CGuildRoomSystem*, unsigned int, int, unsigned int);
            return (org_ptr(0x1402ea8d0L))(this, dwGuildSerial, n, dwCharSerial);
        };
        ~CGuildRoomSystem()
        {
            using org_ptr = void (WINAPIV*)(struct CGuildRoomSystem*);
            (org_ptr(0x1402e9650L))(this);
        };
        void dtor_CGuildRoomSystem()
        {
            using org_ptr = void (WINAPIV*)(struct CGuildRoomSystem*);
            (org_ptr(0x1402e9650L))(this);
        };
    };
END_ATF_NAMESPACE
