// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CSyncCS_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        static info::CSyncCSctor_CSyncCS2_ptr CSyncCSctor_CSyncCS2_next(nullptr);
        static info::CSyncCSctor_CSyncCS2_clbk CSyncCSctor_CSyncCS2_user(nullptr);
        static info::CSyncCSIsUse4_ptr CSyncCSIsUse4_next(nullptr);
        static info::CSyncCSIsUse4_clbk CSyncCSIsUse4_user(nullptr);
        static info::CSyncCSLock6_ptr CSyncCSLock6_next(nullptr);
        static info::CSyncCSLock6_clbk CSyncCSLock6_user(nullptr);
        static info::CSyncCSSetUse8_ptr CSyncCSSetUse8_next(nullptr);
        static info::CSyncCSSetUse8_clbk CSyncCSSetUse8_user(nullptr);
        static info::CSyncCSUnlock10_ptr CSyncCSUnlock10_next(nullptr);
        static info::CSyncCSUnlock10_clbk CSyncCSUnlock10_user(nullptr);
        static info::CSyncCSdtor_CSyncCS15_ptr CSyncCSdtor_CSyncCS15_next(nullptr);
        static info::CSyncCSdtor_CSyncCS15_clbk CSyncCSdtor_CSyncCS15_user(nullptr);
        
        static void CSyncCSctor_CSyncCS2_wrapper(struct CSyncCS* _this)
        {
           CSyncCSctor_CSyncCS2_user(_this, CSyncCSctor_CSyncCS2_next);
        };
        static bool CSyncCSIsUse4_wrapper(struct CSyncCS* _this)
        {
           return CSyncCSIsUse4_user(_this, CSyncCSIsUse4_next);
        };
        static void CSyncCSLock6_wrapper(struct CSyncCS* _this)
        {
           CSyncCSLock6_user(_this, CSyncCSLock6_next);
        };
        static void CSyncCSSetUse8_wrapper(struct CSyncCS* _this, bool bUse)
        {
           CSyncCSSetUse8_user(_this, bUse, CSyncCSSetUse8_next);
        };
        static void CSyncCSUnlock10_wrapper(struct CSyncCS* _this)
        {
           CSyncCSUnlock10_user(_this, CSyncCSUnlock10_next);
        };
        static void CSyncCSdtor_CSyncCS15_wrapper(struct CSyncCS* _this)
        {
           CSyncCSdtor_CSyncCS15_user(_this, CSyncCSdtor_CSyncCS15_next);
        };
        
        static hook_record CSyncCS_functions[] = {
        {   (LPVOID)0x140439140L,
            (LPVOID *)&CSyncCSctor_CSyncCS2_user,
            (LPVOID *)&CSyncCSctor_CSyncCS2_next,
            (LPVOID)cast_pointer_function(CSyncCSctor_CSyncCS2_wrapper),
            (LPVOID)cast_pointer_function((void(CSyncCS::*)())&CSyncCS::ctor_CSyncCS) },
        {   (LPVOID)0x14043abc0L,
            (LPVOID *)&CSyncCSIsUse4_user,
            (LPVOID *)&CSyncCSIsUse4_next,
            (LPVOID)cast_pointer_function(CSyncCSIsUse4_wrapper),
            (LPVOID)cast_pointer_function((bool(CSyncCS::*)())&CSyncCS::IsUse) },
        {   (LPVOID)0x140439250L,
            (LPVOID *)&CSyncCSLock6_user,
            (LPVOID *)&CSyncCSLock6_next,
            (LPVOID)cast_pointer_function(CSyncCSLock6_wrapper),
            (LPVOID)cast_pointer_function((void(CSyncCS::*)())&CSyncCS::Lock) },
        {   (LPVOID)0x1404391d0L,
            (LPVOID *)&CSyncCSSetUse8_user,
            (LPVOID *)&CSyncCSSetUse8_next,
            (LPVOID)cast_pointer_function(CSyncCSSetUse8_wrapper),
            (LPVOID)cast_pointer_function((void(CSyncCS::*)(bool))&CSyncCS::SetUse) },
        {   (LPVOID)0x1404392a0L,
            (LPVOID *)&CSyncCSUnlock10_user,
            (LPVOID *)&CSyncCSUnlock10_next,
            (LPVOID)cast_pointer_function(CSyncCSUnlock10_wrapper),
            (LPVOID)cast_pointer_function((void(CSyncCS::*)())&CSyncCS::Unlock) },
        {   (LPVOID)0x140439170L,
            (LPVOID *)&CSyncCSdtor_CSyncCS15_user,
            (LPVOID *)&CSyncCSdtor_CSyncCS15_next,
            (LPVOID)cast_pointer_function(CSyncCSdtor_CSyncCS15_wrapper),
            (LPVOID)cast_pointer_function((void(CSyncCS::*)())&CSyncCS::dtor_CSyncCS) },
        
        };
        
    }; // static end namespace detail
END_ATF_NAMESPACE
