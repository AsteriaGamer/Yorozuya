// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CLogFile.hpp"
#include "CNetCriticalSection.hpp"
#include "CNetFrameRate.hpp"
#include "CNetIndexList.hpp"
#include "CNetProcessVtbl.hpp"
#include "CNetSocket.hpp"
#include "CNetTimer.hpp"
#include "_ANSYNC_CONNECT_DATA.hpp"
#include "_FORCE_CLOSE.hpp"
#include "_KEY_CHECK_NODE.hpp"
#include "_MSG_HEADER.hpp"
#include "_NET_BUFFER.hpp"
#include "_NET_TYPE_PARAM.hpp"
#include "_thread_parameter.hpp"
#include "sockaddr_in.hpp"


START_ATF_NAMESPACE
    #pragma pack(push, 8)
    struct CNetProcess
    {
        CNetProcessVtbl *vfptr;
        CNetSocket m_NetSocket;
        _FORCE_CLOSE m_FC;
        _NET_TYPE_PARAM m_Type;
        int m_nIndex;
        int m_nOddMsgNum;
        unsigned int m_nTryConnectCount;
        bool m_bPassablePacket[256][256];
        bool m_bUseFG;
        bool m_bSetProcess;
        int m_nEventThreadNum;
        struct CNetWorking *m_pNetwork;
        CLogFile m_LogFile[3];
        CLogFile m_LogHack;
        CNetCriticalSection *m_csRecv;
        _NET_BUFFER *m_pRecvBuffer;
        _NET_BUFFER *m_pSendBuffer;
        _thread_parameter m_pmAcceptThread;
        _thread_parameter m_pmEventThread[81];
        _thread_parameter m_pmRecvThread[8];
        _thread_parameter m_pmSendThread;
        _thread_parameter m_pmConnectThread;
        CNetIndexList m_listAcceptEvent;
        CNetIndexList m_listCloseEvent;
        CNetIndexList m_listRecvEvent;
        CNetIndexList m_listAcceptReady;
        _ANSYNC_CONNECT_DATA *m_AnsyncConnectData;
        CNetIndexList m_listAnsyncConnect;
        CNetIndexList m_listAnsyncConnectComplete;
        CNetFrameRate m_fpsSendThread;
        int m_nKeyCheckNodeNum;
        _KEY_CHECK_NODE *m_ndKeyCheck;
        unsigned int *m_dwKeyCheckBufferList;
        CNetIndexList m_listKeyCheck;
        CNetIndexList m_listKeyCheck_Empty;
        CNetTimer m_tmrListCheckerKeyCheck;
        CNetTimer m_tmrCheckResSH;
        CNetTimer m_tmrCheckKeyCT;
        CNetTimer m_tmrCheckRecvBreak;
        char *m_sTempSendBuffer;
        char *m_sTempRecvBuffer;
        unsigned int m_dwCurTime;
    public:
        static void AcceptThread(void* pv)
        {
            using org_ptr = void (WINAPIV*)(void*);
            (org_ptr(0x140477fb0L))(pv);
        };
        CNetProcess()
        {
            using org_ptr = void (WINAPIV*)(struct CNetProcess*);
            (org_ptr(0x140475e00L))(this);
        };
        void ctor_CNetProcess()
        {
            using org_ptr = void (WINAPIV*)(struct CNetProcess*);
            (org_ptr(0x140475e00L))(this);
        };
        void CloseAll()
        {
            using org_ptr = void (WINAPIV*)(struct CNetProcess*);
            (org_ptr(0x140477c40L))(this);
        };
        void CloseSocket(unsigned int dwSocketIndex, bool bSlowClose)
        {
            using org_ptr = void (WINAPIV*)(struct CNetProcess*, unsigned int, bool);
            (org_ptr(0x14047a140L))(this, dwSocketIndex, bSlowClose);
        };
        void CompleteAnsyncConnect()
        {
            using org_ptr = void (WINAPIV*)(struct CNetProcess*);
            (org_ptr(0x140479970L))(this);
        };
        static void ConnectThread(void* pv)
        {
            using org_ptr = void (WINAPIV*)(void*);
            (org_ptr(0x14047b230L))(pv);
        };
        bool FindKeyFromWaitList(unsigned int dwSocketIndex, unsigned int dwSerial, unsigned int* pdwKey, int nUseKeyNum)
        {
            using org_ptr = bool (WINAPIV*)(struct CNetProcess*, unsigned int, unsigned int, unsigned int*, int);
            return (org_ptr(0x140479d50L))(this, dwSocketIndex, dwSerial, pdwKey, nUseKeyNum);
        };
        void* GetContextHandle(uint16_t wIndex)
        {
            using org_ptr = void* (WINAPIV*)(struct CNetProcess*, uint16_t);
            return (org_ptr(0x14047a1f0L))(this, wIndex);
        };
        unsigned int GetSendThreadFrame()
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CNetProcess*);
            return (org_ptr(0x140479f80L))(this);
        };
        void IOLogFileOperSetting(bool bOper)
        {
            using org_ptr = void (WINAPIV*)(struct CNetProcess*, bool);
            (org_ptr(0x14047a0d0L))(this, bOper);
        };
        int LoadSendMsg(unsigned int dwClientIndex, char* pbyType, char* szMsg, uint16_t nLen)
        {
            using org_ptr = int (WINAPIV*)(struct CNetProcess*, unsigned int, char*, char*, uint16_t);
            return (org_ptr(0x140478f90L))(this, dwClientIndex, pbyType, szMsg, nLen);
        };
        int LoadSendMsg(unsigned int dwClientIndex, uint16_t wType, char* szMsg, uint16_t nLen)
        {
            using org_ptr = int (WINAPIV*)(struct CNetProcess*, unsigned int, uint16_t, char*, uint16_t);
            return (org_ptr(0x140479680L))(this, dwClientIndex, wType, szMsg, nLen);
        };
        void LogFileOperSetting(bool bRecv, bool bSend, bool bSystem)
        {
            using org_ptr = void (WINAPIV*)(struct CNetProcess*, bool, bool, bool);
            (org_ptr(0x14047a040L))(this, bRecv, bSend, bSystem);
        };
        static void NetEventThread(void* pv)
        {
            using org_ptr = void (WINAPIV*)(void*);
            (org_ptr(0x140478100L))(pv);
        };
        void OnLoop()
        {
            using org_ptr = void (WINAPIV*)(struct CNetProcess*);
            (org_ptr(0x140477cb0L))(this);
        };
        void OnLoop_Receipt()
        {
            using org_ptr = void (WINAPIV*)(struct CNetProcess*);
            (org_ptr(0x140477dd0L))(this);
        };
        bool PushAnsyncConnect(unsigned int dwSocketIndex, struct sockaddr_in* pAddr)
        {
            using org_ptr = bool (WINAPIV*)(struct CNetProcess*, unsigned int, struct sockaddr_in*);
            return (org_ptr(0x140479890L))(this, dwSocketIndex, pAddr);
        };
        void PushCloseNode(int nIndex)
        {
            using org_ptr = void (WINAPIV*)(struct CNetProcess*, int);
            (org_ptr(0x140479fa0L))(this, nIndex);
        };
        bool PushKeyCheckList(unsigned int dwSerial, unsigned int dwIP, unsigned int* pdwKey, int nUseKeyNum)
        {
            using org_ptr = bool (WINAPIV*)(struct CNetProcess*, unsigned int, unsigned int, unsigned int*, int);
            return (org_ptr(0x140479b30L))(this, dwSerial, dwIP, pdwKey, nUseKeyNum);
        };
        static void RecvThread(void* pv)
        {
            using org_ptr = void (WINAPIV*)(void*);
            (org_ptr(0x140478340L))(pv);
        };
        void Release()
        {
            using org_ptr = void (WINAPIV*)(struct CNetProcess*);
            (org_ptr(0x1404777b0L))(this);
        };
        static void SendThread(void* pv)
        {
            using org_ptr = void (WINAPIV*)(void*);
            (org_ptr(0x140478bd0L))(pv);
        };
        void SetContextHandle(void* hContextHandle, uint16_t wIndex)
        {
            using org_ptr = void (WINAPIV*)(struct CNetProcess*, void*, uint16_t);
            (org_ptr(0x14047a1a0L))(this, hContextHandle, wIndex);
        };
        bool SetProcess(int nIndex, struct _NET_TYPE_PARAM* pType, struct CNetWorking* pNetwork, bool bUseFG)
        {
            using org_ptr = bool (WINAPIV*)(struct CNetProcess*, int, struct _NET_TYPE_PARAM*, struct CNetWorking*, bool);
            return (org_ptr(0x140476340L))(this, nIndex, pType, pNetwork, bUseFG);
        };
        bool StartSpeedHackCheck(unsigned int dwClientIndex, char* pszID)
        {
            using org_ptr = bool (WINAPIV*)(struct CNetProcess*, unsigned int, char*);
            return (org_ptr(0x1404796e0L))(this, dwClientIndex, pszID);
        };
        void _CheckSend(uint16_t wSocketIndex)
        {
            using org_ptr = void (WINAPIV*)(struct CNetProcess*, uint16_t);
            (org_ptr(0x140479a30L))(this, wSocketIndex);
        };
        void _CheckWaitKey()
        {
            using org_ptr = void (WINAPIV*)(struct CNetProcess*);
            (org_ptr(0x14047a920L))(this);
        };
        void _CkeckKeyCertifyDeley()
        {
            using org_ptr = void (WINAPIV*)(struct CNetProcess*);
            (org_ptr(0x14047aed0L))(this);
        };
        void _CkeckRecvBreak()
        {
            using org_ptr = void (WINAPIV*)(struct CNetProcess*);
            (org_ptr(0x14047b010L))(this);
        };
        void _CkeckSpeedHackDeley()
        {
            using org_ptr = void (WINAPIV*)(struct CNetProcess*);
            (org_ptr(0x14047ad20L))(this);
        };
        void _ForceCloseLoop()
        {
            using org_ptr = void (WINAPIV*)(struct CNetProcess*);
            (org_ptr(0x14047aa40L))(this);
        };
        bool _InternalPacketProcess(unsigned int dwSocketIndex, struct _MSG_HEADER* pMsgHeader, char* pMsg)
        {
            using org_ptr = bool (WINAPIV*)(struct CNetProcess*, unsigned int, struct _MSG_HEADER*, char*);
            return (org_ptr(0x14047a4f0L))(this, dwSocketIndex, pMsgHeader, pMsg);
        };
        void _PopRecvMsg(uint16_t wSocketIndex)
        {
            using org_ptr = void (WINAPIV*)(struct CNetProcess*, uint16_t);
            (org_ptr(0x140478680L))(this, wSocketIndex);
        };
        void _Receipt()
        {
            using org_ptr = void (WINAPIV*)(struct CNetProcess*);
            (org_ptr(0x14047a220L))(this);
        };
        void _ResponSpeedHack()
        {
            using org_ptr = void (WINAPIV*)(struct CNetProcess*);
            (org_ptr(0x14047ab90L))(this);
        };
        void _SendLoop(unsigned int n)
        {
            using org_ptr = void (WINAPIV*)(struct CNetProcess*, unsigned int);
            (org_ptr(0x140478d60L))(this, n);
        };
        void _SendSpeedHackCheckMsg(int n)
        {
            using org_ptr = void (WINAPIV*)(struct CNetProcess*, int);
            (org_ptr(0x14047b0e0L))(this, n);
        };
        bool wt_AcceptClient(unsigned int* pdwClientIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct CNetProcess*, unsigned int*);
            return (org_ptr(0x140477e10L))(this, pdwClientIndex);
        };
        bool wt_CloseClient(unsigned int dwClientIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct CNetProcess*, unsigned int);
            return (org_ptr(0x140477f00L))(this, dwClientIndex);
        };
        ~CNetProcess()
        {
            using org_ptr = void (WINAPIV*)(struct CNetProcess*);
            (org_ptr(0x140477400L))(this);
        };
        void dtor_CNetProcess()
        {
            using org_ptr = void (WINAPIV*)(struct CNetProcess*);
            (org_ptr(0x140477400L))(this);
        };
    };
    #pragma pack(pop)
END_ATF_NAMESPACE
