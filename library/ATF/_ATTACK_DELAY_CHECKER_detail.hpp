// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "_ATTACK_DELAY_CHECKER_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        static info::_ATTACK_DELAY_CHECKERInit2_ptr _ATTACK_DELAY_CHECKERInit2_next(nullptr);
        static info::_ATTACK_DELAY_CHECKERInit2_clbk _ATTACK_DELAY_CHECKERInit2_user(nullptr);
        static info::_ATTACK_DELAY_CHECKERIsDelay4_ptr _ATTACK_DELAY_CHECKERIsDelay4_next(nullptr);
        static info::_ATTACK_DELAY_CHECKERIsDelay4_clbk _ATTACK_DELAY_CHECKERIsDelay4_user(nullptr);
        static info::_ATTACK_DELAY_CHECKERSetDelay6_ptr _ATTACK_DELAY_CHECKERSetDelay6_next(nullptr);
        static info::_ATTACK_DELAY_CHECKERSetDelay6_clbk _ATTACK_DELAY_CHECKERSetDelay6_user(nullptr);
        static info::_ATTACK_DELAY_CHECKERctor__ATTACK_DELAY_CHECKER8_ptr _ATTACK_DELAY_CHECKERctor__ATTACK_DELAY_CHECKER8_next(nullptr);
        static info::_ATTACK_DELAY_CHECKERctor__ATTACK_DELAY_CHECKER8_clbk _ATTACK_DELAY_CHECKERctor__ATTACK_DELAY_CHECKER8_user(nullptr);
        static info::_ATTACK_DELAY_CHECKER_delay_check10_ptr _ATTACK_DELAY_CHECKER_delay_check10_next(nullptr);
        static info::_ATTACK_DELAY_CHECKER_delay_check10_clbk _ATTACK_DELAY_CHECKER_delay_check10_user(nullptr);
        
        static info::_ATTACK_DELAY_CHECKER___eff_listctor__eff_list2_ptr _ATTACK_DELAY_CHECKER___eff_listctor__eff_list2_next(nullptr);
        static info::_ATTACK_DELAY_CHECKER___eff_listctor__eff_list2_clbk _ATTACK_DELAY_CHECKER___eff_listctor__eff_list2_user(nullptr);
        static info::_ATTACK_DELAY_CHECKER___eff_listfill4_ptr _ATTACK_DELAY_CHECKER___eff_listfill4_next(nullptr);
        static info::_ATTACK_DELAY_CHECKER___eff_listfill4_clbk _ATTACK_DELAY_CHECKER___eff_listfill4_user(nullptr);
        static info::_ATTACK_DELAY_CHECKER___eff_listinit6_ptr _ATTACK_DELAY_CHECKER___eff_listinit6_next(nullptr);
        static info::_ATTACK_DELAY_CHECKER___eff_listinit6_clbk _ATTACK_DELAY_CHECKER___eff_listinit6_user(nullptr);
        
        static info::_ATTACK_DELAY_CHECKER___mas_listctor__mas_list2_ptr _ATTACK_DELAY_CHECKER___mas_listctor__mas_list2_next(nullptr);
        static info::_ATTACK_DELAY_CHECKER___mas_listctor__mas_list2_clbk _ATTACK_DELAY_CHECKER___mas_listctor__mas_list2_user(nullptr);
        static info::_ATTACK_DELAY_CHECKER___mas_listfill4_ptr _ATTACK_DELAY_CHECKER___mas_listfill4_next(nullptr);
        static info::_ATTACK_DELAY_CHECKER___mas_listfill4_clbk _ATTACK_DELAY_CHECKER___mas_listfill4_user(nullptr);
        static info::_ATTACK_DELAY_CHECKER___mas_listinit6_ptr _ATTACK_DELAY_CHECKER___mas_listinit6_next(nullptr);
        static info::_ATTACK_DELAY_CHECKER___mas_listinit6_clbk _ATTACK_DELAY_CHECKER___mas_listinit6_user(nullptr);
        
        static void _ATTACK_DELAY_CHECKERInit2_wrapper(struct _ATTACK_DELAY_CHECKER* _this)
        {
           _ATTACK_DELAY_CHECKERInit2_user(_this, _ATTACK_DELAY_CHECKERInit2_next);
        };
        static bool _ATTACK_DELAY_CHECKERIsDelay4_wrapper(struct _ATTACK_DELAY_CHECKER* _this, char code, uint16_t index, char mastery)
        {
           return _ATTACK_DELAY_CHECKERIsDelay4_user(_this, code, index, mastery, _ATTACK_DELAY_CHECKERIsDelay4_next);
        };
        static void _ATTACK_DELAY_CHECKERSetDelay6_wrapper(struct _ATTACK_DELAY_CHECKER* _this, unsigned int delay)
        {
           _ATTACK_DELAY_CHECKERSetDelay6_user(_this, delay, _ATTACK_DELAY_CHECKERSetDelay6_next);
        };
        static void _ATTACK_DELAY_CHECKERctor__ATTACK_DELAY_CHECKER8_wrapper(struct _ATTACK_DELAY_CHECKER* _this)
        {
           _ATTACK_DELAY_CHECKERctor__ATTACK_DELAY_CHECKER8_user(_this, _ATTACK_DELAY_CHECKERctor__ATTACK_DELAY_CHECKER8_next);
        };
        static bool _ATTACK_DELAY_CHECKER_delay_check10_wrapper(struct _ATTACK_DELAY_CHECKER* _this, char code, uint16_t index, char mastery)
        {
           return _ATTACK_DELAY_CHECKER_delay_check10_user(_this, code, index, mastery, _ATTACK_DELAY_CHECKER_delay_check10_next);
        };
        
        static void _ATTACK_DELAY_CHECKER___eff_listctor__eff_list2_wrapper(struct _ATTACK_DELAY_CHECKER::_eff_list* _this)
        {
           _ATTACK_DELAY_CHECKER___eff_listctor__eff_list2_user(_this, _ATTACK_DELAY_CHECKER___eff_listctor__eff_list2_next);
        };
        static bool _ATTACK_DELAY_CHECKER___eff_listfill4_wrapper(struct _ATTACK_DELAY_CHECKER::_eff_list* _this)
        {
           return _ATTACK_DELAY_CHECKER___eff_listfill4_user(_this, _ATTACK_DELAY_CHECKER___eff_listfill4_next);
        };
        static void _ATTACK_DELAY_CHECKER___eff_listinit6_wrapper(struct _ATTACK_DELAY_CHECKER::_eff_list* _this)
        {
           _ATTACK_DELAY_CHECKER___eff_listinit6_user(_this, _ATTACK_DELAY_CHECKER___eff_listinit6_next);
        };
        
        static void _ATTACK_DELAY_CHECKER___mas_listctor__mas_list2_wrapper(struct _ATTACK_DELAY_CHECKER::_mas_list* _this)
        {
           _ATTACK_DELAY_CHECKER___mas_listctor__mas_list2_user(_this, _ATTACK_DELAY_CHECKER___mas_listctor__mas_list2_next);
        };
        static bool _ATTACK_DELAY_CHECKER___mas_listfill4_wrapper(struct _ATTACK_DELAY_CHECKER::_mas_list* _this)
        {
           return _ATTACK_DELAY_CHECKER___mas_listfill4_user(_this, _ATTACK_DELAY_CHECKER___mas_listfill4_next);
        };
        static void _ATTACK_DELAY_CHECKER___mas_listinit6_wrapper(struct _ATTACK_DELAY_CHECKER::_mas_list* _this)
        {
           _ATTACK_DELAY_CHECKER___mas_listinit6_user(_this, _ATTACK_DELAY_CHECKER___mas_listinit6_next);
        };
        
        static hook_record _ATTACK_DELAY_CHECKER_functions[] = {
        {   (LPVOID)0x140072e60L,
            (LPVOID *)&_ATTACK_DELAY_CHECKERInit2_user,
            (LPVOID *)&_ATTACK_DELAY_CHECKERInit2_next,
            (LPVOID)cast_pointer_function(_ATTACK_DELAY_CHECKERInit2_wrapper),
            (LPVOID)cast_pointer_function((void(_ATTACK_DELAY_CHECKER::*)())&_ATTACK_DELAY_CHECKER::Init) },
        {   (LPVOID)0x14008ec60L,
            (LPVOID *)&_ATTACK_DELAY_CHECKERIsDelay4_user,
            (LPVOID *)&_ATTACK_DELAY_CHECKERIsDelay4_next,
            (LPVOID)cast_pointer_function(_ATTACK_DELAY_CHECKERIsDelay4_wrapper),
            (LPVOID)cast_pointer_function((bool(_ATTACK_DELAY_CHECKER::*)(char, uint16_t, char))&_ATTACK_DELAY_CHECKER::IsDelay) },
        {   (LPVOID)0x14008e760L,
            (LPVOID *)&_ATTACK_DELAY_CHECKERSetDelay6_user,
            (LPVOID *)&_ATTACK_DELAY_CHECKERSetDelay6_next,
            (LPVOID)cast_pointer_function(_ATTACK_DELAY_CHECKERSetDelay6_wrapper),
            (LPVOID)cast_pointer_function((void(_ATTACK_DELAY_CHECKER::*)(unsigned int))&_ATTACK_DELAY_CHECKER::SetDelay) },
        {   (LPVOID)0x140072d80L,
            (LPVOID *)&_ATTACK_DELAY_CHECKERctor__ATTACK_DELAY_CHECKER8_user,
            (LPVOID *)&_ATTACK_DELAY_CHECKERctor__ATTACK_DELAY_CHECKER8_next,
            (LPVOID)cast_pointer_function(_ATTACK_DELAY_CHECKERctor__ATTACK_DELAY_CHECKER8_wrapper),
            (LPVOID)cast_pointer_function((void(_ATTACK_DELAY_CHECKER::*)())&_ATTACK_DELAY_CHECKER::ctor__ATTACK_DELAY_CHECKER) },
        {   (LPVOID)0x14008ed10L,
            (LPVOID *)&_ATTACK_DELAY_CHECKER_delay_check10_user,
            (LPVOID *)&_ATTACK_DELAY_CHECKER_delay_check10_next,
            (LPVOID)cast_pointer_function(_ATTACK_DELAY_CHECKER_delay_check10_wrapper),
            (LPVOID)cast_pointer_function((bool(_ATTACK_DELAY_CHECKER::*)(char, uint16_t, char))&_ATTACK_DELAY_CHECKER::_delay_check) },
        
        {   (LPVOID)0x140072e20L,
            (LPVOID *)&_ATTACK_DELAY_CHECKER___eff_listctor__eff_list2_user,
            (LPVOID *)&_ATTACK_DELAY_CHECKER___eff_listctor__eff_list2_next,
            (LPVOID)cast_pointer_function(_ATTACK_DELAY_CHECKER___eff_listctor__eff_list2_wrapper),
            (LPVOID)cast_pointer_function((void(_ATTACK_DELAY_CHECKER::_eff_list::*)())&_ATTACK_DELAY_CHECKER::_eff_list::ctor__eff_list) },
        {   (LPVOID)0x14008eb90L,
            (LPVOID *)&_ATTACK_DELAY_CHECKER___eff_listfill4_user,
            (LPVOID *)&_ATTACK_DELAY_CHECKER___eff_listfill4_next,
            (LPVOID)cast_pointer_function(_ATTACK_DELAY_CHECKER___eff_listfill4_wrapper),
            (LPVOID)cast_pointer_function((bool(_ATTACK_DELAY_CHECKER::_eff_list::*)())&_ATTACK_DELAY_CHECKER::_eff_list::fill) },
        {   (LPVOID)0x140072f70L,
            (LPVOID *)&_ATTACK_DELAY_CHECKER___eff_listinit6_user,
            (LPVOID *)&_ATTACK_DELAY_CHECKER___eff_listinit6_next,
            (LPVOID)cast_pointer_function(_ATTACK_DELAY_CHECKER___eff_listinit6_wrapper),
            (LPVOID)cast_pointer_function((void(_ATTACK_DELAY_CHECKER::_eff_list::*)())&_ATTACK_DELAY_CHECKER::_eff_list::init) },
        
        {   (LPVOID)0x140072e40L,
            (LPVOID *)&_ATTACK_DELAY_CHECKER___mas_listctor__mas_list2_user,
            (LPVOID *)&_ATTACK_DELAY_CHECKER___mas_listctor__mas_list2_next,
            (LPVOID)cast_pointer_function(_ATTACK_DELAY_CHECKER___mas_listctor__mas_list2_wrapper),
            (LPVOID)cast_pointer_function((void(_ATTACK_DELAY_CHECKER::_mas_list::*)())&_ATTACK_DELAY_CHECKER::_mas_list::ctor__mas_list) },
        {   (LPVOID)0x14008ebc0L,
            (LPVOID *)&_ATTACK_DELAY_CHECKER___mas_listfill4_user,
            (LPVOID *)&_ATTACK_DELAY_CHECKER___mas_listfill4_next,
            (LPVOID)cast_pointer_function(_ATTACK_DELAY_CHECKER___mas_listfill4_wrapper),
            (LPVOID)cast_pointer_function((bool(_ATTACK_DELAY_CHECKER::_mas_list::*)())&_ATTACK_DELAY_CHECKER::_mas_list::fill) },
        {   (LPVOID)0x140072f90L,
            (LPVOID *)&_ATTACK_DELAY_CHECKER___mas_listinit6_user,
            (LPVOID *)&_ATTACK_DELAY_CHECKER___mas_listinit6_next,
            (LPVOID)cast_pointer_function(_ATTACK_DELAY_CHECKER___mas_listinit6_wrapper),
            (LPVOID)cast_pointer_function((void(_ATTACK_DELAY_CHECKER::_mas_list::*)())&_ATTACK_DELAY_CHECKER::_mas_list::init) },
        
        };
        
    }; // static end namespace detail
END_ATF_NAMESPACE
