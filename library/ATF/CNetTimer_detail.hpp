// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CNetTimer_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        static info::CNetTimerBeginTimer2_ptr CNetTimerBeginTimer2_next(nullptr);
        static info::CNetTimerBeginTimer2_clbk CNetTimerBeginTimer2_user(nullptr);
        static info::CNetTimerctor_CNetTimer4_ptr CNetTimerctor_CNetTimer4_next(nullptr);
        static info::CNetTimerctor_CNetTimer4_clbk CNetTimerctor_CNetTimer4_user(nullptr);
        static info::CNetTimerCountingTimer6_ptr CNetTimerCountingTimer6_next(nullptr);
        static info::CNetTimerCountingTimer6_clbk CNetTimerCountingTimer6_user(nullptr);
        
        static void CNetTimerBeginTimer2_wrapper(struct CNetTimer* _this, unsigned int dwTerm)
        {
           CNetTimerBeginTimer2_user(_this, dwTerm, CNetTimerBeginTimer2_next);
        };
        static void CNetTimerctor_CNetTimer4_wrapper(struct CNetTimer* _this)
        {
           CNetTimerctor_CNetTimer4_user(_this, CNetTimerctor_CNetTimer4_next);
        };
        static bool CNetTimerCountingTimer6_wrapper(struct CNetTimer* _this)
        {
           return CNetTimerCountingTimer6_user(_this, CNetTimerCountingTimer6_next);
        };
        
        static hook_record CNetTimer_functions[] = {
        {   (LPVOID)0x140304b40L,
            (LPVOID *)&CNetTimerBeginTimer2_user,
            (LPVOID *)&CNetTimerBeginTimer2_next,
            (LPVOID)cast_pointer_function(CNetTimerBeginTimer2_wrapper),
            (LPVOID)cast_pointer_function((void(CNetTimer::*)(unsigned int))&CNetTimer::BeginTimer) },
        {   (LPVOID)0x1403044c0L,
            (LPVOID *)&CNetTimerctor_CNetTimer4_user,
            (LPVOID *)&CNetTimerctor_CNetTimer4_next,
            (LPVOID)cast_pointer_function(CNetTimerctor_CNetTimer4_wrapper),
            (LPVOID)cast_pointer_function((void(CNetTimer::*)())&CNetTimer::ctor_CNetTimer) },
        {   (LPVOID)0x140416b00L,
            (LPVOID *)&CNetTimerCountingTimer6_user,
            (LPVOID *)&CNetTimerCountingTimer6_next,
            (LPVOID)cast_pointer_function(CNetTimerCountingTimer6_wrapper),
            (LPVOID)cast_pointer_function((bool(CNetTimer::*)())&CNetTimer::CountingTimer) },
        
        };
        
    }; // static end namespace detail
END_ATF_NAMESPACE
