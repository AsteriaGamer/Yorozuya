// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CSize_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        static info::CSizector_CSize1_ptr CSizector_CSize1_next(nullptr);
        static info::CSizector_CSize1_clbk CSizector_CSize1_user(nullptr);
        static info::CSizector_CSize2_ptr CSizector_CSize2_next(nullptr);
        static info::CSizector_CSize2_clbk CSizector_CSize2_user(nullptr);
        static info::CSizector_CSize3_ptr CSizector_CSize3_next(nullptr);
        static info::CSizector_CSize3_clbk CSizector_CSize3_user(nullptr);
        static info::CSizector_CSize4_ptr CSizector_CSize4_next(nullptr);
        static info::CSizector_CSize4_clbk CSizector_CSize4_user(nullptr);
        static info::CSizector_CSize5_ptr CSizector_CSize5_next(nullptr);
        static info::CSizector_CSize5_clbk CSizector_CSize5_user(nullptr);
        static info::CSizeSetSize6_ptr CSizeSetSize6_next(nullptr);
        static info::CSizeSetSize6_clbk CSizeSetSize6_user(nullptr);
        
        static void CSizector_CSize1_wrapper(struct CSize* _this, int initCX, int initCY)
        {
           CSizector_CSize1_user(_this, initCX, initCY, CSizector_CSize1_next);
        };
        static void CSizector_CSize2_wrapper(struct CSize* _this, struct tagPOINT initPt)
        {
           CSizector_CSize2_user(_this, initPt, CSizector_CSize2_next);
        };
        static void CSizector_CSize3_wrapper(struct CSize* _this, struct tagSIZE initSize)
        {
           CSizector_CSize3_user(_this, initSize, CSizector_CSize3_next);
        };
        static void CSizector_CSize4_wrapper(struct CSize* _this, unsigned int dwSize)
        {
           CSizector_CSize4_user(_this, dwSize, CSizector_CSize4_next);
        };
        static void CSizector_CSize5_wrapper(struct CSize* _this)
        {
           CSizector_CSize5_user(_this, CSizector_CSize5_next);
        };
        static void CSizeSetSize6_wrapper(struct CSize* _this, int CX, int CY)
        {
           CSizeSetSize6_user(_this, CX, CY, CSizeSetSize6_next);
        };
        
        static hook_record CSize_functions[] = {
        {   (LPVOID)0x1406705f0L,
            (LPVOID *)&CSizector_CSize1_user,
            (LPVOID *)&CSizector_CSize1_next,
            (LPVOID)cast_pointer_function(CSizector_CSize1_wrapper),
            (LPVOID)cast_pointer_function((void(CSize::*)(int, int))&CSize::ctor_CSize) },
        {   (LPVOID)0x140670660L,
            (LPVOID *)&CSizector_CSize2_user,
            (LPVOID *)&CSizector_CSize2_next,
            (LPVOID)cast_pointer_function(CSizector_CSize2_wrapper),
            (LPVOID)cast_pointer_function((void(CSize::*)(struct tagPOINT))&CSize::ctor_CSize) },
        {   (LPVOID)0x140670630L,
            (LPVOID *)&CSizector_CSize3_user,
            (LPVOID *)&CSizector_CSize3_next,
            (LPVOID)cast_pointer_function(CSizector_CSize3_wrapper),
            (LPVOID)cast_pointer_function((void(CSize::*)(struct tagSIZE))&CSize::ctor_CSize) },
        {   (LPVOID)0x140670690L,
            (LPVOID *)&CSizector_CSize4_user,
            (LPVOID *)&CSizector_CSize4_next,
            (LPVOID)cast_pointer_function(CSizector_CSize4_wrapper),
            (LPVOID)cast_pointer_function((void(CSize::*)(unsigned int))&CSize::ctor_CSize) },
        {   (LPVOID)0x1406705d0L,
            (LPVOID *)&CSizector_CSize5_user,
            (LPVOID *)&CSizector_CSize5_next,
            (LPVOID)cast_pointer_function(CSizector_CSize5_wrapper),
            (LPVOID)cast_pointer_function((void(CSize::*)())&CSize::ctor_CSize) },
        {   (LPVOID)0x1406707f0L,
            (LPVOID *)&CSizeSetSize6_user,
            (LPVOID *)&CSizeSetSize6_next,
            (LPVOID)cast_pointer_function(CSizeSetSize6_wrapper),
            (LPVOID)cast_pointer_function((void(CSize::*)(int, int))&CSize::SetSize) },
        
        };
        
    }; // static end namespace detail
END_ATF_NAMESPACE
