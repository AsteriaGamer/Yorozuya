// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CPvpPointLimiter_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        info::CPvpPointLimiterctor_CPvpPointLimiter2_ptr CPvpPointLimiterctor_CPvpPointLimiter2_next(nullptr);
        info::CPvpPointLimiterctor_CPvpPointLimiter2_clbk CPvpPointLimiterctor_CPvpPointLimiter2_user(nullptr);
        info::CPvpPointLimiterCheatUpdate4_ptr CPvpPointLimiterCheatUpdate4_next(nullptr);
        info::CPvpPointLimiterCheatUpdate4_clbk CPvpPointLimiterCheatUpdate4_user(nullptr);
        info::CPvpPointLimiterClear6_ptr CPvpPointLimiterClear6_next(nullptr);
        info::CPvpPointLimiterClear6_clbk CPvpPointLimiterClear6_user(nullptr);
        info::CPvpPointLimiterSet8_ptr CPvpPointLimiterSet8_next(nullptr);
        info::CPvpPointLimiterSet8_clbk CPvpPointLimiterSet8_user(nullptr);
        info::CPvpPointLimiterTakePvpPoint10_ptr CPvpPointLimiterTakePvpPoint10_next(nullptr);
        info::CPvpPointLimiterTakePvpPoint10_clbk CPvpPointLimiterTakePvpPoint10_user(nullptr);
        info::CPvpPointLimiterUpdate12_ptr CPvpPointLimiterUpdate12_next(nullptr);
        info::CPvpPointLimiterUpdate12_clbk CPvpPointLimiterUpdate12_user(nullptr);
        info::CPvpPointLimiterdtor_CPvpPointLimiter14_ptr CPvpPointLimiterdtor_CPvpPointLimiter14_next(nullptr);
        info::CPvpPointLimiterdtor_CPvpPointLimiter14_clbk CPvpPointLimiterdtor_CPvpPointLimiter14_user(nullptr);
        
        void CPvpPointLimiterctor_CPvpPointLimiter2_wrapper(struct CPvpPointLimiter* _this)
        {
           CPvpPointLimiterctor_CPvpPointLimiter2_user(_this, CPvpPointLimiterctor_CPvpPointLimiter2_next);
        };
        void CPvpPointLimiterCheatUpdate4_wrapper(struct CPvpPointLimiter* _this, long double dOriginalPvpPoint)
        {
           CPvpPointLimiterCheatUpdate4_user(_this, dOriginalPvpPoint, CPvpPointLimiterCheatUpdate4_next);
        };
        void CPvpPointLimiterClear6_wrapper(struct CPvpPointLimiter* _this, int64_t tUpdateTime, long double dOriginalPvpPoint, struct CPlayer* pkSelf)
        {
           CPvpPointLimiterClear6_user(_this, tUpdateTime, dOriginalPvpPoint, pkSelf, CPvpPointLimiterClear6_next);
        };
        bool CPvpPointLimiterSet8_wrapper(struct CPvpPointLimiter* _this, long double dOriginalPvpPoint, struct _PVPPOINT_LIMIT_DB_BASE* pkInfo)
        {
           return CPvpPointLimiterSet8_user(_this, dOriginalPvpPoint, pkInfo, CPvpPointLimiterSet8_next);
        };
        bool CPvpPointLimiterTakePvpPoint10_wrapper(struct CPvpPointLimiter* _this, long double* dPvpPoint, struct CPlayer* pkSelf, struct CPlayer* pkDest)
        {
           return CPvpPointLimiterTakePvpPoint10_user(_this, dPvpPoint, pkSelf, pkDest, CPvpPointLimiterTakePvpPoint10_next);
        };
        void CPvpPointLimiterUpdate12_wrapper(struct CPvpPointLimiter* _this, int64_t tUpdateTime, long double dOriginalPvpPoint, long double dUsePoint, bool bUseUp)
        {
           CPvpPointLimiterUpdate12_user(_this, tUpdateTime, dOriginalPvpPoint, dUsePoint, bUseUp, CPvpPointLimiterUpdate12_next);
        };
        void CPvpPointLimiterdtor_CPvpPointLimiter14_wrapper(struct CPvpPointLimiter* _this)
        {
           CPvpPointLimiterdtor_CPvpPointLimiter14_user(_this, CPvpPointLimiterdtor_CPvpPointLimiter14_next);
        };
        
        hook_record CPvpPointLimiter_functions[] = {
        {   (LPVOID)0x1401250f0L,
            (LPVOID *)&CPvpPointLimiterctor_CPvpPointLimiter2_user,
            (LPVOID *)&CPvpPointLimiterctor_CPvpPointLimiter2_next,
            (LPVOID)cast_pointer_function(CPvpPointLimiterctor_CPvpPointLimiter2_wrapper),
            (LPVOID)cast_pointer_function((void(CPvpPointLimiter::*)())&CPvpPointLimiter::ctor_CPvpPointLimiter) },
        {   (LPVOID)0x140125b60L,
            (LPVOID *)&CPvpPointLimiterCheatUpdate4_user,
            (LPVOID *)&CPvpPointLimiterCheatUpdate4_next,
            (LPVOID)cast_pointer_function(CPvpPointLimiterCheatUpdate4_wrapper),
            (LPVOID)cast_pointer_function((void(CPvpPointLimiter::*)(long double))&CPvpPointLimiter::CheatUpdate) },
        {   (LPVOID)0x140125850L,
            (LPVOID *)&CPvpPointLimiterClear6_user,
            (LPVOID *)&CPvpPointLimiterClear6_next,
            (LPVOID)cast_pointer_function(CPvpPointLimiterClear6_wrapper),
            (LPVOID)cast_pointer_function((void(CPvpPointLimiter::*)(int64_t, long double, struct CPlayer*))&CPvpPointLimiter::Clear) },
        {   (LPVOID)0x140125120L,
            (LPVOID *)&CPvpPointLimiterSet8_user,
            (LPVOID *)&CPvpPointLimiterSet8_next,
            (LPVOID)cast_pointer_function(CPvpPointLimiterSet8_wrapper),
            (LPVOID)cast_pointer_function((bool(CPvpPointLimiter::*)(long double, struct _PVPPOINT_LIMIT_DB_BASE*))&CPvpPointLimiter::Set) },
        {   (LPVOID)0x140125300L,
            (LPVOID *)&CPvpPointLimiterTakePvpPoint10_user,
            (LPVOID *)&CPvpPointLimiterTakePvpPoint10_next,
            (LPVOID)cast_pointer_function(CPvpPointLimiterTakePvpPoint10_wrapper),
            (LPVOID)cast_pointer_function((bool(CPvpPointLimiter::*)(long double*, struct CPlayer*, struct CPlayer*))&CPvpPointLimiter::TakePvpPoint) },
        {   (LPVOID)0x140125a10L,
            (LPVOID *)&CPvpPointLimiterUpdate12_user,
            (LPVOID *)&CPvpPointLimiterUpdate12_next,
            (LPVOID)cast_pointer_function(CPvpPointLimiterUpdate12_wrapper),
            (LPVOID)cast_pointer_function((void(CPvpPointLimiter::*)(int64_t, long double, long double, bool))&CPvpPointLimiter::Update) },
        {   (LPVOID)0x140125110L,
            (LPVOID *)&CPvpPointLimiterdtor_CPvpPointLimiter14_user,
            (LPVOID *)&CPvpPointLimiterdtor_CPvpPointLimiter14_next,
            (LPVOID)cast_pointer_function(CPvpPointLimiterdtor_CPvpPointLimiter14_wrapper),
            (LPVOID)cast_pointer_function((void(CPvpPointLimiter::*)())&CPvpPointLimiter::dtor_CPvpPointLimiter) },
        
        };
        
    }; // end namespace detail
END_ATF_NAMESPACE
