// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "US__ThreadParamInterface_info.hpp"


START_ATF_NAMESPACE
    namespace US
    {
        namespace detail
        {
            info::US__ThreadParamInterfaceGetMyThreadPool2_ptr US__ThreadParamInterfaceGetMyThreadPool2_next(nullptr);
            info::US__ThreadParamInterfaceGetMyThreadPool2_clbk US__ThreadParamInterfaceGetMyThreadPool2_user(nullptr);
            info::US__ThreadParamInterfacector_ThreadParamInterface4_ptr US__ThreadParamInterfacector_ThreadParamInterface4_next(nullptr);
            info::US__ThreadParamInterfacector_ThreadParamInterface4_clbk US__ThreadParamInterfacector_ThreadParamInterface4_user(nullptr);
            
            struct US::AbstractThreadPool* US__ThreadParamInterfaceGetMyThreadPool2_wrapper(struct US::ThreadParamInterface<CBossMonsterScheduleSystem,US::AbstractThreadPool>* _this)
            {
               return US__ThreadParamInterfaceGetMyThreadPool2_user(_this);
            };
            void US__ThreadParamInterfacector_ThreadParamInterface4_wrapper(struct US::ThreadParamInterface<CBossMonsterScheduleSystem,US::AbstractThreadPool>* _this)
            {
               US__ThreadParamInterfacector_ThreadParamInterface4_user(_this);
            };
            
            hook_record ThreadParamInterface<CBossMonsterScheduleSystem,US::AbstractThreadPool>_functions[] = {
            {   (LPVOID)0x14041fa60L,
                (LPVOID *)&US__ThreadParamInterfaceGetMyThreadPool2_user,
                (LPVOID *)&US__ThreadParamInterfaceGetMyThreadPool2_next,
                (LPVOID)cast_pointer_function(US__ThreadParamInterfaceGetMyThreadPool2_wrapper),
                (LPVOID)cast_pointer_function((struct US::AbstractThreadPool*(US::ThreadParamInterface<CBossMonsterScheduleSystem,US::AbstractThreadPool>::*)())&US::ThreadParamInterface<CBossMonsterScheduleSystem,US::AbstractThreadPool>::GetMyThreadPool) },
            {   (LPVOID)0x14041b9f0L,
                (LPVOID *)&US__ThreadParamInterfacector_ThreadParamInterface4_user,
                (LPVOID *)&US__ThreadParamInterfacector_ThreadParamInterface4_next,
                (LPVOID)cast_pointer_function(US__ThreadParamInterfacector_ThreadParamInterface4_wrapper),
                (LPVOID)cast_pointer_function((void(US::ThreadParamInterface<CBossMonsterScheduleSystem,US::AbstractThreadPool>::*)())&US::ThreadParamInterface<CBossMonsterScheduleSystem,US::AbstractThreadPool>::ctor_ThreadParamInterface) },
            
            };
            
        }; // end namespace detail
    }; // end namespace US
END_ATF_NAMESPACE
