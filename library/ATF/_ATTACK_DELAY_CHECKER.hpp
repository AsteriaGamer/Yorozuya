// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"


START_ATF_NAMESPACE
    #pragma pack(push, 4)
    struct _ATTACK_DELAY_CHECKER
    {
        struct _eff_list
        {
            char byEffectCode;
            unsigned __int16 wEffectIndex;
            unsigned int dwNextTime;
        public:
            _eff_list()
            {
                using org_ptr = void (WINAPIV*)(struct _eff_list*);
                (org_ptr(0x140072e20L))(this);
            };
            void ctor__eff_list()
            {
                using org_ptr = void (WINAPIV*)(struct _eff_list*);
                (org_ptr(0x140072e20L))(this);
            };
            bool fill()
            {
                using org_ptr = bool (WINAPIV*)(struct _eff_list*);
                return (org_ptr(0x14008eb90L))(this);
            };
            void init()
            {
                using org_ptr = void (WINAPIV*)(struct _eff_list*);
                (org_ptr(0x140072f70L))(this);
            };
        };
        struct _mas_list
        {
            char byEffectCode;
            char byMastery;
            unsigned int dwNextTime;
        public:
            _mas_list()
            {
                using org_ptr = void (WINAPIV*)(struct _mas_list*);
                (org_ptr(0x140072e40L))(this);
            };
            void ctor__mas_list()
            {
                using org_ptr = void (WINAPIV*)(struct _mas_list*);
                (org_ptr(0x140072e40L))(this);
            };
            bool fill()
            {
                using org_ptr = bool (WINAPIV*)(struct _mas_list*);
                return (org_ptr(0x14008ebc0L))(this);
            };
            void init()
            {
                using org_ptr = void (WINAPIV*)(struct _mas_list*);
                (org_ptr(0x140072f90L))(this);
            };
        };
        _eff_list EFF[10];
        _mas_list MAS[10];
        unsigned int dwNextEffTime;
        unsigned int dwNextGenTime;
        unsigned int dwLastGnAttackTime;
        unsigned int dwLastSFAttackTime;
        int nFailCount;
        int m_nNextAddTime;
        char byTemp_EffectCode;
        unsigned __int16 wTemp_EffectIndex;
        char byTemp_EffectMastery;
    public:
        void Init()
        {
            using org_ptr = void (WINAPIV*)(struct _ATTACK_DELAY_CHECKER*);
            (org_ptr(0x140072e60L))(this);
        };
        bool IsDelay(char code, uint16_t index, char mastery)
        {
            using org_ptr = bool (WINAPIV*)(struct _ATTACK_DELAY_CHECKER*, char, uint16_t, char);
            return (org_ptr(0x14008ec60L))(this, code, index, mastery);
        };
        void SetDelay(unsigned int delay)
        {
            using org_ptr = void (WINAPIV*)(struct _ATTACK_DELAY_CHECKER*, unsigned int);
            (org_ptr(0x14008e760L))(this, delay);
        };
        _ATTACK_DELAY_CHECKER()
        {
            using org_ptr = void (WINAPIV*)(struct _ATTACK_DELAY_CHECKER*);
            (org_ptr(0x140072d80L))(this);
        };
        void ctor__ATTACK_DELAY_CHECKER()
        {
            using org_ptr = void (WINAPIV*)(struct _ATTACK_DELAY_CHECKER*);
            (org_ptr(0x140072d80L))(this);
        };
        bool _delay_check(char code, uint16_t index, char mastery)
        {
            using org_ptr = bool (WINAPIV*)(struct _ATTACK_DELAY_CHECKER*, char, uint16_t, char);
            return (org_ptr(0x14008ed10L))(this, code, index, mastery);
        };
    };
    #pragma pack(pop)
END_ATF_NAMESPACE
