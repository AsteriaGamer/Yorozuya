// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CIndexList.hpp"
#include "CPlayer.hpp"
#include "std__vector.hpp"


START_ATF_NAMESPACE
    #pragma pack(push, 8)
    struct CRealMoveRequestDelayChecker
    {
        enum DEFINE_TAG
        {
            CHECK_LIMIT_DELAY = 0x1F4,
            TOTAL_DELAY_LIST_COUNT = 0xA,
            CONTINUE_MISS_LIMIT_COUNT = 0x3,
            SINGLE_MISS_LIMIT_COUNT = 0xA,
            PROC_CLOSE_LIMIT_COUNT = 0x5,
            UNIT_FAIL_COUNT_CLEAR_COUNT = 0x3,
            TOTAL_COUNT_CLEAR_UNIT_COUNT = 0x3,
            TOTAL_COUNT_CLEAR_COUNT = 0x2,
        };
        CIndexList m_kNodeInxOrderList;
        std::vector<unsigned long> m_vecDelayList;
        unsigned __int16 m_wTotalMissCount;
        bool m_bPrevRet;
        unsigned __int16 m_wContinueMissCount;
        unsigned __int16 m_wSingleMissCount;
        unsigned __int16 m_wContinueValiedCount;
        unsigned __int16 m_wTotalContinueValiedCount;
    public:
        CRealMoveRequestDelayChecker()
        {
            using org_ptr = void (WINAPIV*)(struct CRealMoveRequestDelayChecker*);
            (org_ptr(0x140073be0L))(this);
        };
        void ctor_CRealMoveRequestDelayChecker()
        {
            using org_ptr = void (WINAPIV*)(struct CRealMoveRequestDelayChecker*);
            (org_ptr(0x140073be0L))(this);
        };
        bool Check(struct CPlayer* pkUser)
        {
            using org_ptr = bool (WINAPIV*)(struct CRealMoveRequestDelayChecker*, struct CPlayer*);
            return (org_ptr(0x140122240L))(this, pkUser);
        };
        bool CheckDelay(unsigned int dwCurTime, unsigned int dwIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct CRealMoveRequestDelayChecker*, unsigned int, unsigned int);
            return (org_ptr(0x140122780L))(this, dwCurTime, dwIndex);
        };
        bool GetCurInx(unsigned int* pInx)
        {
            using org_ptr = bool (WINAPIV*)(struct CRealMoveRequestDelayChecker*, unsigned int*);
            return (org_ptr(0x1401226c0L))(this, pInx);
        };
        void IncNodeIndex()
        {
            using org_ptr = void (WINAPIV*)(struct CRealMoveRequestDelayChecker*);
            (org_ptr(0x140122810L))(this);
        };
        bool Init(unsigned int dwListCnt)
        {
            using org_ptr = bool (WINAPIV*)(struct CRealMoveRequestDelayChecker*, unsigned int);
            return (org_ptr(0x1401220e0L))(this, dwListCnt);
        };
        void Reset()
        {
            using org_ptr = void (WINAPIV*)(struct CRealMoveRequestDelayChecker*);
            (org_ptr(0x1401221a0L))(this);
        };
        ~CRealMoveRequestDelayChecker()
        {
            using org_ptr = void (WINAPIV*)(struct CRealMoveRequestDelayChecker*);
            (org_ptr(0x140073cf0L))(this);
        };
        void dtor_CRealMoveRequestDelayChecker()
        {
            using org_ptr = void (WINAPIV*)(struct CRealMoveRequestDelayChecker*);
            (org_ptr(0x140073cf0L))(this);
        };
    };
    #pragma pack(pop)
END_ATF_NAMESPACE
