// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "lua_tinker__void2type_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            static info::lua_tinker__void2typeinvoke2_ptr lua_tinker__void2typeinvoke2_next(nullptr);
            static info::lua_tinker__void2typeinvoke2_clbk lua_tinker__void2typeinvoke2_user(nullptr);
            
            static struct lua_tinker::var_base* lua_tinker__void2typeinvoke2_wrapper(struct lua_tinker::void2type<lua_tinker::var_base *>* _this, void* ptr)
            {
               return lua_tinker__void2typeinvoke2_user(_this, ptr);
            };
            
            static hook_record void2type<lua_tinker::var_base *>_functions[] = {
            {   (LPVOID)0x1404472a0L,
                (LPVOID *)&lua_tinker__void2typeinvoke2_user,
                (LPVOID *)&lua_tinker__void2typeinvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__void2typeinvoke2_wrapper),
                (LPVOID)cast_pointer_function((struct lua_tinker::var_base*(lua_tinker::void2type<lua_tinker::var_base *>::*)(struct lua_tinker::void2type<lua_tinker::var_base *>*, void*))&lua_tinker::void2type<lua_tinker::var_base *>::invoke) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__void2type_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            static info::lua_tinker__void2typeinvoke2_ptr lua_tinker__void2typeinvoke2_next(nullptr);
            static info::lua_tinker__void2typeinvoke2_clbk lua_tinker__void2typeinvoke2_user(nullptr);
            
            static struct CLuaSignalReActor* lua_tinker__void2typeinvoke2_wrapper(struct lua_tinker::void2type<CLuaSignalReActor *>* _this, void* ptr)
            {
               return lua_tinker__void2typeinvoke2_user(_this, ptr);
            };
            
            static hook_record void2type<CLuaSignalReActor *>_functions[] = {
            {   (LPVOID)0x14040b3d0L,
                (LPVOID *)&lua_tinker__void2typeinvoke2_user,
                (LPVOID *)&lua_tinker__void2typeinvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__void2typeinvoke2_wrapper),
                (LPVOID)cast_pointer_function((struct CLuaSignalReActor*(lua_tinker::void2type<CLuaSignalReActor *>::*)(struct lua_tinker::void2type<CLuaSignalReActor *>*, void*))&lua_tinker::void2type<CLuaSignalReActor *>::invoke) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__void2type_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            static info::lua_tinker__void2typeinvoke2_ptr lua_tinker__void2typeinvoke2_next(nullptr);
            static info::lua_tinker__void2typeinvoke2_clbk lua_tinker__void2typeinvoke2_user(nullptr);
            
            static struct lua_tinker::user* lua_tinker__void2typeinvoke2_wrapper(struct lua_tinker::void2type<lua_tinker::user *>* _this, void* ptr)
            {
               return lua_tinker__void2typeinvoke2_user(_this, ptr);
            };
            
            static hook_record void2type<lua_tinker::user *>_functions[] = {
            {   (LPVOID)0x140409d10L,
                (LPVOID *)&lua_tinker__void2typeinvoke2_user,
                (LPVOID *)&lua_tinker__void2typeinvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__void2typeinvoke2_wrapper),
                (LPVOID)cast_pointer_function((struct lua_tinker::user*(lua_tinker::void2type<lua_tinker::user *>::*)(struct lua_tinker::void2type<lua_tinker::user *>*, void*))&lua_tinker::void2type<lua_tinker::user *>::invoke) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__void2type_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            static info::lua_tinker__void2typeinvoke2_ptr lua_tinker__void2typeinvoke2_next(nullptr);
            static info::lua_tinker__void2typeinvoke2_clbk lua_tinker__void2typeinvoke2_user(nullptr);
            
            static struct CLuaScript* lua_tinker__void2typeinvoke2_wrapper(struct lua_tinker::void2type<CLuaScript *>* _this, void* ptr)
            {
               return lua_tinker__void2typeinvoke2_user(_this, ptr);
            };
            
            static hook_record void2type<CLuaScript *>_functions[] = {
            {   (LPVOID)0x14040ad30L,
                (LPVOID *)&lua_tinker__void2typeinvoke2_user,
                (LPVOID *)&lua_tinker__void2typeinvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__void2typeinvoke2_wrapper),
                (LPVOID)cast_pointer_function((struct CLuaScript*(lua_tinker::void2type<CLuaScript *>::*)(struct lua_tinker::void2type<CLuaScript *>*, void*))&lua_tinker::void2type<CLuaScript *>::invoke) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__void2type_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            static info::lua_tinker__void2typeinvoke2_ptr lua_tinker__void2typeinvoke2_next(nullptr);
            static info::lua_tinker__void2typeinvoke2_clbk lua_tinker__void2typeinvoke2_user(nullptr);
            
            static struct LuaParam3* lua_tinker__void2typeinvoke2_wrapper(struct lua_tinker::void2type<LuaParam3 *>* _this, void* ptr)
            {
               return lua_tinker__void2typeinvoke2_user(_this, ptr);
            };
            
            static hook_record void2type<LuaParam3 *>_functions[] = {
            {   (LPVOID)0x140409b20L,
                (LPVOID *)&lua_tinker__void2typeinvoke2_user,
                (LPVOID *)&lua_tinker__void2typeinvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__void2typeinvoke2_wrapper),
                (LPVOID)cast_pointer_function((struct LuaParam3*(lua_tinker::void2type<LuaParam3 *>::*)(struct lua_tinker::void2type<LuaParam3 *>*, void*))&lua_tinker::void2type<LuaParam3 *>::invoke) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__void2type_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            static info::lua_tinker__void2typeinvoke2_ptr lua_tinker__void2typeinvoke2_next(nullptr);
            static info::lua_tinker__void2typeinvoke2_clbk lua_tinker__void2typeinvoke2_user(nullptr);
            
            static struct CLuaEventMgr* lua_tinker__void2typeinvoke2_wrapper(struct lua_tinker::void2type<CLuaEventMgr *>* _this, void* ptr)
            {
               return lua_tinker__void2typeinvoke2_user(_this, ptr);
            };
            
            static hook_record void2type<CLuaEventMgr *>_functions[] = {
            {   (LPVOID)0x14040ad70L,
                (LPVOID *)&lua_tinker__void2typeinvoke2_user,
                (LPVOID *)&lua_tinker__void2typeinvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__void2typeinvoke2_wrapper),
                (LPVOID)cast_pointer_function((struct CLuaEventMgr*(lua_tinker::void2type<CLuaEventMgr *>::*)(struct lua_tinker::void2type<CLuaEventMgr *>*, void*))&lua_tinker::void2type<CLuaEventMgr *>::invoke) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__void2type_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            static info::lua_tinker__void2typeinvoke2_ptr lua_tinker__void2typeinvoke2_next(nullptr);
            static info::lua_tinker__void2typeinvoke2_clbk lua_tinker__void2typeinvoke2_user(nullptr);
            
            static struct LuaParam3* lua_tinker__void2typeinvoke2_wrapper(struct LuaParam3* result, void* ptr)
            {
               return lua_tinker__void2typeinvoke2_user(result, ptr);
            };
            
            static hook_record void2type<LuaParam3>_functions[] = {
            {   (LPVOID)0x14040adb0L,
                (LPVOID *)&lua_tinker__void2typeinvoke2_user,
                (LPVOID *)&lua_tinker__void2typeinvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__void2typeinvoke2_wrapper),
                (LPVOID)cast_pointer_function((struct LuaParam3*(lua_tinker::void2type<LuaParam3>::*)(struct LuaParam3*, void*))&lua_tinker::void2type<LuaParam3>::invoke) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__void2type_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            static info::lua_tinker__void2typeinvoke2_ptr lua_tinker__void2typeinvoke2_next(nullptr);
            static info::lua_tinker__void2typeinvoke2_clbk lua_tinker__void2typeinvoke2_user(nullptr);
            
            static struct CMonster* lua_tinker__void2typeinvoke2_wrapper(struct lua_tinker::void2type<CMonster *>* _this, void* ptr)
            {
               return lua_tinker__void2typeinvoke2_user(_this, ptr);
            };
            
            static hook_record void2type<CMonster *>_functions[] = {
            {   (LPVOID)0x14040b410L,
                (LPVOID *)&lua_tinker__void2typeinvoke2_user,
                (LPVOID *)&lua_tinker__void2typeinvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__void2typeinvoke2_wrapper),
                (LPVOID)cast_pointer_function((struct CMonster*(lua_tinker::void2type<CMonster *>::*)(struct lua_tinker::void2type<CMonster *>*, void*))&lua_tinker::void2type<CMonster *>::invoke) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__void2type_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            static info::lua_tinker__void2typeinvoke2_ptr lua_tinker__void2typeinvoke2_next(nullptr);
            static info::lua_tinker__void2typeinvoke2_clbk lua_tinker__void2typeinvoke2_user(nullptr);
            
            static struct CLuaEventNode* lua_tinker__void2typeinvoke2_wrapper(struct lua_tinker::void2type<CLuaEventNode *>* _this, void* ptr)
            {
               return lua_tinker__void2typeinvoke2_user(_this, ptr);
            };
            
            static hook_record void2type<CLuaEventNode *>_functions[] = {
            {   (LPVOID)0x14040acf0L,
                (LPVOID *)&lua_tinker__void2typeinvoke2_user,
                (LPVOID *)&lua_tinker__void2typeinvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__void2typeinvoke2_wrapper),
                (LPVOID)cast_pointer_function((struct CLuaEventNode*(lua_tinker::void2type<CLuaEventNode *>::*)(struct lua_tinker::void2type<CLuaEventNode *>*, void*))&lua_tinker::void2type<CLuaEventNode *>::invoke) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
