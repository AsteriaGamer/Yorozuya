// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CIniFileVtbl.hpp"
#include "INI_Key.hpp"
#include "INI_Section.hpp"
#include "std__vector.hpp"


START_ATF_NAMESPACE
    struct CIniFile
    {
        CIniFileVtbl *vfptr;
        char m_strPath[260];
        std::vector<INI_Section *,std::allocator<INI_Section *> > m_SectionList;
    public:
        CIniFile(char* strPath)
        {
            using org_ptr = void (WINAPIV*)(struct CIniFile*, char*);
            (org_ptr(0x14046c530L))(this, strPath);
        };
        void ctor_CIniFile(char* strPath)
        {
            using org_ptr = void (WINAPIV*)(struct CIniFile*, char*);
            (org_ptr(0x14046c530L))(this, strPath);
        };
        CIniFile()
        {
            using org_ptr = void (WINAPIV*)(struct CIniFile*);
            (org_ptr(0x14046c4d0L))(this);
        };
        void ctor_CIniFile()
        {
            using org_ptr = void (WINAPIV*)(struct CIniFile*);
            (org_ptr(0x14046c4d0L))(this);
        };
        void Clear()
        {
            using org_ptr = void (WINAPIV*)(struct CIniFile*);
            (org_ptr(0x14046c8c0L))(this);
        };
        bool DeleteKey(struct INI_Key* pKey)
        {
            using org_ptr = bool (WINAPIV*)(struct CIniFile*, struct INI_Key*);
            return (org_ptr(0x14046da40L))(this, pKey);
        };
        int DeleteKey(char* lpSection, char* lpKey)
        {
            using org_ptr = int (WINAPIV*)(struct CIniFile*, char*, char*);
            return (org_ptr(0x14046d490L))(this, lpSection, lpKey);
        };
        bool DeleteSection(struct INI_Section* pSection)
        {
            using org_ptr = bool (WINAPIV*)(struct CIniFile*, struct INI_Section*);
            return (org_ptr(0x14046d4f0L))(this, pSection);
        };
        int DeleteSection(char* lpSection)
        {
            using org_ptr = int (WINAPIV*)(struct CIniFile*, char*);
            return (org_ptr(0x14046d430L))(this, lpSection);
        };
        struct INI_Key* GetKey(char* strSection, char* strKey)
        {
            using org_ptr = struct INI_Key* (WINAPIV*)(struct CIniFile*, char*, char*);
            return (org_ptr(0x14046d3c0L))(this, strSection, strKey);
        };
        struct INI_Section* GetSection(char* strSection)
        {
            using org_ptr = struct INI_Section* (WINAPIV*)(struct CIniFile*, char*);
            return (org_ptr(0x14046d160L))(this, strSection);
        };
        struct INI_Section* GetSection(unsigned int dwIndex)
        {
            using org_ptr = struct INI_Section* (WINAPIV*)(struct CIniFile*, unsigned int);
            return (org_ptr(0x14041b830L))(this, dwIndex);
        };
        unsigned int GetSectionSize()
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CIniFile*);
            return (org_ptr(0x14041b7e0L))(this);
        };
        bool Load()
        {
            using org_ptr = bool (WINAPIV*)(struct CIniFile*);
            return (org_ptr(0x14046c6d0L))(this);
        };
        struct INI_Key* LoadKey(char* strSection, char* strKey)
        {
            using org_ptr = struct INI_Key* (WINAPIV*)(struct CIniFile*, char*, char*);
            return (org_ptr(0x14046cf90L))(this, strSection, strKey);
        };
        struct INI_Section* LoadSection(char* strSection)
        {
            using org_ptr = struct INI_Section* (WINAPIV*)(struct CIniFile*, char*);
            return (org_ptr(0x14046cc20L))(this, strSection);
        };
        bool Merge_Intersection(struct CIniFile* rhs)
        {
            using org_ptr = bool (WINAPIV*)(struct CIniFile*, struct CIniFile*);
            return (org_ptr(0x14046e6a0L))(this, rhs);
        };
        bool Merge_SumOfSets(struct CIniFile* rhs)
        {
            using org_ptr = bool (WINAPIV*)(struct CIniFile*, struct CIniFile*);
            return (org_ptr(0x14046e230L))(this, rhs);
        };
        void Save()
        {
            using org_ptr = void (WINAPIV*)(struct CIniFile*);
            (org_ptr(0x14046dd10L))(this);
        };
        bool SaveKey(struct INI_Key* pKey)
        {
            using org_ptr = bool (WINAPIV*)(struct CIniFile*, struct INI_Key*);
            return (org_ptr(0x14046e1a0L))(this, pKey);
        };
        bool SaveSection(struct INI_Section* pSection)
        {
            using org_ptr = bool (WINAPIV*)(struct CIniFile*, struct INI_Section*);
            return (org_ptr(0x14046df30L))(this, pSection);
        };
        void SetIniFilename(char* strPath)
        {
            using org_ptr = void (WINAPIV*)(struct CIniFile*, char*);
            (org_ptr(0x14046c660L))(this, strPath);
        };
        bool SplitKey(char* strBase, char* strKey, int nKeyLen)
        {
            using org_ptr = bool (WINAPIV*)(struct CIniFile*, char*, char*, int);
            return (org_ptr(0x14046cb30L))(this, strBase, strKey, nKeyLen);
        };
        bool WriteString(char* strSection, char* strKey, char* strValue)
        {
            using org_ptr = bool (WINAPIV*)(struct CIniFile*, char*, char*, char*);
            return (org_ptr(0x14046eb50L))(this, strSection, strKey, strValue);
        };
        ~CIniFile()
        {
            using org_ptr = void (WINAPIV*)(struct CIniFile*);
            (org_ptr(0x14046c5d0L))(this);
        };
        void dtor_CIniFile()
        {
            using org_ptr = void (WINAPIV*)(struct CIniFile*);
            (org_ptr(0x14046c5d0L))(this);
        };
    };
END_ATF_NAMESPACE
