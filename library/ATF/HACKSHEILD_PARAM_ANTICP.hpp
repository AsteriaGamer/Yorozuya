// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "BASE_HACKSHEILD_PARAM.hpp"
#include "CHackShieldExSystem.hpp"
#include "_HSHIELD_CLIENT_CONTEXT.hpp"


START_ATF_NAMESPACE
    #pragma pack(push, 8)
    struct  HACKSHEILD_PARAM_ANTICP : BASE_HACKSHEILD_PARAM
    {
        enum KICK_REASON
        {
            KICK_REASON_CRC_ACK_DELAY = 0x1,
            KICK_REASON_FIRST_GUID_INVALID = 0x2,
            KICK_REASON_CRC_ACK_INVALID = 0x3,
            KICK_REASON_NOT_HACKSHEILD_CLIENT = 0x4,
        };
        int m_nSocketIndex;
        unsigned int m_dwLastSyncQryTime;
        char m_byVerifyState;
        _HSHIELD_CLIENT_CONTEXT m_CrcInfo;
        char m_byGUIDClientInfo[20];
    public:
        void CheckClient()
        {
            using org_ptr = void (WINAPIV*)(struct HACKSHEILD_PARAM_ANTICP*);
            (org_ptr(0x140417b60L))(this);
        };
        HACKSHEILD_PARAM_ANTICP()
        {
            using org_ptr = void (WINAPIV*)(struct HACKSHEILD_PARAM_ANTICP*);
            (org_ptr(0x1404177d0L))(this);
        };
        void ctor_HACKSHEILD_PARAM_ANTICP()
        {
            using org_ptr = void (WINAPIV*)(struct HACKSHEILD_PARAM_ANTICP*);
            (org_ptr(0x1404177d0L))(this);
        };
        void Init()
        {
            using org_ptr = void (WINAPIV*)(struct HACKSHEILD_PARAM_ANTICP*);
            (org_ptr(0x140417890L))(this);
        };
        bool IsLogPass()
        {
            using org_ptr = bool (WINAPIV*)(struct HACKSHEILD_PARAM_ANTICP*);
            return (org_ptr(0x140417a50L))(this);
        };
        void Kick(char byReason, unsigned int dwRet)
        {
            using org_ptr = void (WINAPIV*)(struct HACKSHEILD_PARAM_ANTICP*, char, unsigned int);
            (org_ptr(0x140417d60L))(this, byReason, dwRet);
        };
        bool OnCheckSession_FirstVerify(int n)
        {
            using org_ptr = bool (WINAPIV*)(struct HACKSHEILD_PARAM_ANTICP*, int);
            return (org_ptr(0x140417960L))(this, n);
        };
        void OnConnect(int nIndex)
        {
            using org_ptr = void (WINAPIV*)(struct HACKSHEILD_PARAM_ANTICP*, int);
            (org_ptr(0x1404179d0L))(this, nIndex);
        };
        void OnDisConnect()
        {
            using org_ptr = void (WINAPIV*)(struct HACKSHEILD_PARAM_ANTICP*);
            (org_ptr(0x140417a10L))(this);
        };
        void OnLoop()
        {
            using org_ptr = void (WINAPIV*)(struct HACKSHEILD_PARAM_ANTICP*);
            (org_ptr(0x140417aa0L))(this);
        };
        bool OnRecvSession(struct CHackShieldExSystem* mgr, int nIndex, char byProtocol, uint64_t tSize, char* pMsg)
        {
            using org_ptr = bool (WINAPIV*)(struct HACKSHEILD_PARAM_ANTICP*, struct CHackShieldExSystem*, int, char, uint64_t, char*);
            return (org_ptr(0x140417f10L))(this, mgr, nIndex, byProtocol, tSize, pMsg);
        };
        bool OnRecvSession_ClientCheckSum_Response(uint64_t tSize, char* pMsg)
        {
            using org_ptr = bool (WINAPIV*)(struct HACKSHEILD_PARAM_ANTICP*, uint64_t, char*);
            return (org_ptr(0x140418120L))(this, tSize, pMsg);
        };
        bool OnRecvSession_ClientCrc_Response(uint64_t tSize, char* pMsg)
        {
            using org_ptr = bool (WINAPIV*)(struct HACKSHEILD_PARAM_ANTICP*, uint64_t, char*);
            return (org_ptr(0x140418290L))(this, tSize, pMsg);
        };
        bool OnRecvSession_ServerCheckSum_Request(int nIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct HACKSHEILD_PARAM_ANTICP*, int);
            return (org_ptr(0x140417fb0L))(this, nIndex);
        };
    };
    #pragma pack(pop)
END_ATF_NAMESPACE
