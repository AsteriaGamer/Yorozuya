// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CNetIndexList.hpp"
#include "CNetSocketVtbl.hpp"
#include "CNetTimer.hpp"
#include "_IP_CHECK_NODE.hpp"
#include "_SOCK_TYPE_PARAM.hpp"
#include "_socket.hpp"
#include "_total_count.hpp"
#include "sockaddr_in.hpp"


START_ATF_NAMESPACE
    #pragma pack(push, 8)
    struct CNetSocket
    {
        CNetSocketVtbl *vfptr;
        unsigned __int64 m_sAccept;
        void *m_AcceptEvent;
        _socket *m_Socket;
        void **m_Event;
        _SOCK_TYPE_PARAM m_SockType;
        _total_count m_TotalCount;
        bool m_bSetSocket;
        unsigned int m_dwSerialCounter;
        int m_nIPCheckNodeNum;
        _IP_CHECK_NODE *m_ndIPCheck;
        unsigned int *m_dwIPCheckBufferList;
        CNetIndexList m_listIPCheck;
        CNetIndexList m_listIPCheck_Empty;
        CNetTimer m_tmrListCheckerIPCheck;
    public:
        bool Accept_Client(unsigned int dwSocketIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct CNetSocket*, unsigned int);
            return (org_ptr(0x14047e750L))(this, dwSocketIndex);
        };
        unsigned int Accept_Server()
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CNetSocket*);
            return (org_ptr(0x14047e3b0L))(this);
        };
        CNetSocket()
        {
            using org_ptr = void (WINAPIV*)(struct CNetSocket*);
            (org_ptr(0x14047db60L))(this);
        };
        void ctor_CNetSocket()
        {
            using org_ptr = void (WINAPIV*)(struct CNetSocket*);
            (org_ptr(0x14047db60L))(this);
        };
        void CloseAll()
        {
            using org_ptr = void (WINAPIV*)(struct CNetSocket*);
            (org_ptr(0x14047f060L))(this);
        };
        bool CloseSocket(unsigned int n)
        {
            using org_ptr = bool (WINAPIV*)(struct CNetSocket*, unsigned int);
            return (org_ptr(0x14047ec40L))(this, n);
        };
        int Connect(unsigned int n, struct sockaddr_in* pAddr)
        {
            using org_ptr = int (WINAPIV*)(struct CNetSocket*, unsigned int, struct sockaddr_in*);
            return (org_ptr(0x14047e830L))(this, n, pAddr);
        };
        void EmptySocketBuffer(unsigned int n)
        {
            using org_ptr = void (WINAPIV*)(struct CNetSocket*, unsigned int);
            (org_ptr(0x14047eb70L))(this, n);
        };
        unsigned int FindEmptySocket()
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CNetSocket*);
            return (org_ptr(0x14047f180L))(this);
        };
        struct _socket* GetSocket(unsigned int dwIndex)
        {
            using org_ptr = struct _socket* (WINAPIV*)(struct CNetSocket*, unsigned int);
            return (org_ptr(0x14047d3b0L))(this, dwIndex);
        };
        unsigned int GetSocketIPAddress(unsigned int dwIndex)
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CNetSocket*, unsigned int);
            return (org_ptr(0x14047f150L))(this, dwIndex);
        };
        struct _SOCK_TYPE_PARAM* GetSocketType()
        {
            using org_ptr = struct _SOCK_TYPE_PARAM* (WINAPIV*)(struct CNetSocket*);
            return (org_ptr(0x14047f110L))(this);
        };
        struct _total_count* GetTotalCount()
        {
            using org_ptr = struct _total_count* (WINAPIV*)(struct CNetSocket*);
            return (org_ptr(0x14047f130L))(this);
        };
        bool InitAcceptSocket(char* pszErrMsg)
        {
            using org_ptr = bool (WINAPIV*)(struct CNetSocket*, char*);
            return (org_ptr(0x14047ee00L))(this, pszErrMsg);
        };
        void OnLoop()
        {
            using org_ptr = void (WINAPIV*)(struct CNetSocket*);
            (org_ptr(0x14047e2b0L))(this);
        };
        bool PushIPCheckList(unsigned int dwIP)
        {
            using org_ptr = bool (WINAPIV*)(struct CNetSocket*, unsigned int);
            return (org_ptr(0x14047ed20L))(this, dwIP);
        };
        bool Recv(unsigned int n, char* pBuf, int nBufMaxSize, int* pnRet)
        {
            using org_ptr = bool (WINAPIV*)(struct CNetSocket*, unsigned int, char*, int, int*);
            return (org_ptr(0x14047e9c0L))(this, n, pBuf, nBufMaxSize, pnRet);
        };
        void Release()
        {
            using org_ptr = void (WINAPIV*)(struct CNetSocket*);
            (org_ptr(0x14047e140L))(this);
        };
        bool Send(unsigned int n, char* pBuf, int nSize, int* pnRet)
        {
            using org_ptr = bool (WINAPIV*)(struct CNetSocket*, unsigned int, char*, int, int*);
            return (org_ptr(0x14047ea70L))(this, n, pBuf, nSize, pnRet);
        };
        bool SetSocket(struct _SOCK_TYPE_PARAM* pType, char* pszErrMsg)
        {
            using org_ptr = bool (WINAPIV*)(struct CNetSocket*, struct _SOCK_TYPE_PARAM*, char*);
            return (org_ptr(0x14047dda0L))(this, pType, pszErrMsg);
        };
        ~CNetSocket()
        {
            using org_ptr = void (WINAPIV*)(struct CNetSocket*);
            (org_ptr(0x14047dcc0L))(this);
        };
        void dtor_CNetSocket()
        {
            using org_ptr = void (WINAPIV*)(struct CNetSocket*);
            (org_ptr(0x14047dcc0L))(this);
        };
    };
    #pragma pack(pop)
END_ATF_NAMESPACE
