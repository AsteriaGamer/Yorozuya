// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"


START_ATF_NAMESPACE
    struct _dh_mission_mgr
    {
        enum E_POTAL_NUM
        {
            max_portal_quest = 0x80,
        };
        struct _count
        {
            int nCount;
            bool bPass;
        public:
            void Init()
            {
                using org_ptr = void (WINAPIV*)(struct _count*);
                (org_ptr(0x14026eea0L))(this);
            };
        };
        struct _if_change
        {
            struct _dh_mission_setup *pMissionPtr;
            char *pszDespt;
            char *pszComMsg;
        public:
            void Init()
            {
                using org_ptr = void (WINAPIV*)(struct _if_change*);
                (org_ptr(0x14026ec70L))(this);
            };
            bool IsFill()
            {
                using org_ptr = bool (WINAPIV*)(struct _if_change*);
                return (org_ptr(0x14026f320L))(this);
            };
            _if_change()
            {
                using org_ptr = void (WINAPIV*)(struct _if_change*);
                (org_ptr(0x14026ec20L))(this);
            };
            void ctor__if_change()
            {
                using org_ptr = void (WINAPIV*)(struct _if_change*);
                (org_ptr(0x14026ec20L))(this);
            };
        };
        struct _respawn_monster_act
        {
            struct _monster_data
            {
				struct CMonster *pMon;
                unsigned int dwSerial;
            };
			struct __respawn_monster *pData;
            int nCum;
            unsigned int dwLastRespawnTime;
            _monster_data NowMonster[128];
            bool bStart;
        public:
            _respawn_monster_act()
            {
                using org_ptr = void (WINAPIV*)(struct _respawn_monster_act*);
                (org_ptr(0x14026ecb0L))(this);
            };
            void ctor__respawn_monster_act()
            {
                using org_ptr = void (WINAPIV*)(struct _respawn_monster_act*);
                (org_ptr(0x14026ecb0L))(this);
            };
            void init()
            {
                using org_ptr = void (WINAPIV*)(struct _respawn_monster_act*);
                (org_ptr(0x14026ed00L))(this);
            };
            void set(struct __respawn_monster* data)
            {
                using org_ptr = void (WINAPIV*)(struct _respawn_monster_act*, struct __respawn_monster*);
                (org_ptr(0x14026f0f0L))(this, data);
            };
        };
		struct _dh_mission_setup *pCurMssionPtr;
        _count Count[8];
        bool bOpenPortal[128];
        unsigned int dwMissionStartTime;
        unsigned int dwMissionEndTime;
        int nAddLimMSecTime;
        bool bInnerCheck[64];
        _if_change IfCont[100];
        int nRespawnActNum;
        _respawn_monster_act RespawnMonsterAct[32];
    public:
        unsigned int GetLimMSecTime()
        {
            using org_ptr = unsigned int (WINAPIV*)(struct _dh_mission_mgr*);
            return (org_ptr(0x14026ef40L))(this);
        };
        struct _if_change* GetMissionCont(struct _dh_mission_setup* pMsSetup)
        {
            using org_ptr = struct _if_change* (WINAPIV*)(struct _dh_mission_mgr*, struct _dh_mission_setup*);
            return (org_ptr(0x14026f220L))(this, pMsSetup);
        };
        void Init()
        {
            using org_ptr = void (WINAPIV*)(struct _dh_mission_mgr*);
            (org_ptr(0x14026ed50L))(this);
        };
        bool IsOpenPortal(int nIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct _dh_mission_mgr*, int);
            return (org_ptr(0x14026f4a0L))(this, nIndex);
        };
        void NextMission(struct _dh_mission_setup* pNextMssionPtr)
        {
            using org_ptr = void (WINAPIV*)(struct _dh_mission_mgr*, struct _dh_mission_setup*);
            (org_ptr(0x14026efc0L))(this, pNextMssionPtr);
        };
        void OpenPortal(int nIndex)
        {
            using org_ptr = void (WINAPIV*)(struct _dh_mission_mgr*, int);
            (org_ptr(0x1400c2d10L))(this, nIndex);
        };
        struct _if_change* SearchCurMissionCont()
        {
            using org_ptr = struct _if_change* (WINAPIV*)(struct _dh_mission_mgr*);
            return (org_ptr(0x14026f580L))(this);
        };
        _dh_mission_mgr()
        {
            using org_ptr = void (WINAPIV*)(struct _dh_mission_mgr*);
            (org_ptr(0x14026eb70L))(this);
        };
        void ctor__dh_mission_mgr()
        {
            using org_ptr = void (WINAPIV*)(struct _dh_mission_mgr*);
            (org_ptr(0x14026eb70L))(this);
        };
    };
END_ATF_NAMESPACE
