// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "$AA71CF500467BE6311B9AA077EFAA38D.hpp"
#include "CAlpha.hpp"
#include "CEntity.hpp"
#include "CExtDummy.hpp"
#include "CIndexBuffer.hpp"
#include "CMergeFileManager.hpp"
#include "CParticle.hpp"
#include "CPathFinder.hpp"
#include "CVertexBuffer.hpp"
#include "_ANI_OBJECT.hpp"
#include "_BSP_C_FACE.hpp"
#include "_BSP_FILE_HEADER.hpp"
#include "_BSP_LEAF.hpp"
#include "_BSP_MAT_GROUP.hpp"
#include "_BSP_NODE.hpp"
#include "_ENTITY_LIST.hpp"
#include "_EXT_BSP_FILE_HEADER.hpp"
#include "_LEAF_ENTITIES_LIST_INFO.hpp"
#include "_LEAF_SOUND_ENTITIES_LIST_INFO.hpp"
#include "_MAP_ENTITIES_LIST.hpp"
#include "_SOUND_ENTITIES_LIST.hpp"
#include "_SOUND_ENTITY_LIST.hpp"
#include "_TOOL_COL_LEAF.hpp"
#include "_TOOL_COL_LINE.hpp"


START_ATF_NAMESPACE
    struct CBsp
    {
        float (*mCVertex)[3];
        float (*mCNNormal)[3];
        unsigned int *mCVertexId;
        _BSP_C_FACE *mCFace;
        float (*mCNEdgeNormal)[4];
        unsigned int *mCFaceId;
        unsigned int *mVertexColor;
        __int16 (*mLgtUV)[2];
        int mNowCFaceId;
        unsigned __int16 *MatListInLeafId;
        unsigned int mMatGroupNum;
        _BSP_MAT_GROUP *mMatGroup;
        unsigned int mCVertexNum;
        unsigned int mCFaceNum;
        unsigned int mVertexNum;
        unsigned int mFaceNum;
        int mIsLoaded;
        unsigned int mObjectNum;
        _ANI_OBJECT *mObject;
        unsigned __int16 *mEventObjectID;
        unsigned int mEnvID[2];
        $AA71CF500467BE6311B9AA077EFAA38D ___u21;
        CMergeFileManager mMapEntityMFM;
        int mIsLoadEBP;
        char *mEntityCache;
        unsigned int mEntityCacheSize;
        unsigned int mNowRenderMatGroupNum;
        unsigned int mNowShadowMatGroupNum;
        CEntity *mEntity;
        CParticle *mParticle;
        _ENTITY_LIST *mEntityList;
        unsigned __int16 *mEntityID;
        _LEAF_ENTITIES_LIST_INFO *mLeafEntityList;
        _MAP_ENTITIES_LIST *mMapEntitiesList;
        unsigned int mEntityListNum;
        unsigned int mLeafEntityListNum;
        unsigned int mEntityIDNum;
        unsigned int mMapEntitiesListNum;
        char *mSoundEntityCache;
        unsigned int mSoundEntityCacheSize;
        unsigned int mSoundEntityIDNum;
        unsigned int mLeafSoundEntityListNum;
        unsigned int mSoundEntityListNum;
        unsigned int mSoundEntitiesListNum;
        _SOUND_ENTITY_LIST *mSoundEntityList;
        _SOUND_ENTITIES_LIST *mSoundEntitiesList;
        unsigned __int16 *mSoundEntityID;
        _LEAF_SOUND_ENTITIES_LIST_INFO *mLeafSoundEntityList;
        unsigned int mTotalAllocSize;
        unsigned int mTotalWaveSize;
        unsigned int mVertexBufferSize;
        _BSP_NODE *mNode;
        _BSP_LEAF *mLeaf;
        unsigned int mLeafNum;
        unsigned int mNodeNum;
        unsigned int mCFVertexNum;
        unsigned int mCFLineNum;
        unsigned int mCFLineIdNum;
        float (*mCFVertex)[3];
        _TOOL_COL_LINE *mCFLine;
        unsigned __int16 *mCFLineId;
        _TOOL_COL_LEAF *mCFLeaf;
        float (*mCFVNormal)[3];
        float (*mCFNormal)[4];
        CExtDummy *mDummy;
        CPathFinder mPathFinder;
        int mColFaceId;
        unsigned int mFindPathCnt;
        __int16 mNowPlayerNum;
        unsigned int mStaticVBCnt;
        CVertexBuffer mStaticVertexBuffer[80];
        unsigned int mVBVertexNum[80];
        CIndexBuffer mStaticIndexedBuffer;
        void *mMultiLayerUV;
        void *mMultiLayerST;
        char *mStaticAlloc;
        unsigned int mStaticAllocSize;
        char *mExtBspStaticAlloc;
        unsigned int mExtBspStaticAllocSize;
        int mPickPoly;
        char *mMatGroupCache;
        int mMatGroupCacheSize;
        float mTempCamera[3];
        __int16 mTempSearchOk;
        __int16 mNowLeafNum;
        _BSP_FILE_HEADER mBSPHeader;
        _EXT_BSP_FILE_HEADER mExtBSPHeader;
        CAlpha mAlpha;
    public:
        CBsp()
        {
            using org_ptr = int64_t (WINAPIV*)(struct CBsp*);
            (org_ptr(0x1404f62a0L))(this);
        };
        int64_t ctor_CBsp()
        {
            using org_ptr = int64_t (WINAPIV*)(struct CBsp*);
            return (org_ptr(0x1404f62a0L))(this);
        };
        void CalcEntitiesMainColor()
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*);
            (org_ptr(0x1404f9bd0L))(this);
        };
        void CalcObjectLoop()
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*);
            (org_ptr(0x1404fdca0L))(this);
        };
        int64_t CanYouGoThere(float* arg_0, float* arg_1, float** arg_2)
        {
            using org_ptr = int64_t (WINAPIV*)(struct CBsp*, float*, float*, float**);
            return (org_ptr(0x1404e7580L))(this, arg_0, arg_1, arg_2);
        };
        void ClearVariable()
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*);
            (org_ptr(0x1404f6190L))(this);
        };
        void DrawAlphaRender(float* arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, float*);
            (org_ptr(0x1404fbe80L))(this, arg_0);
        };
        void DrawBspRender()
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*);
            (org_ptr(0x1404fbd10L))(this);
        };
        void DrawCollisionPoly()
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*);
            (org_ptr(0x1404f2540L))(this);
        };
        void DrawDynamicLightSub(float* arg_0, float* arg_1)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, float*, float*);
            (org_ptr(0x1404fedb0L))(this, arg_0, arg_1);
        };
        void DrawDynamicLights()
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*);
            (org_ptr(0x1404ff640L))(this);
        };
        void DrawLeafBBox()
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*);
            (org_ptr(0x1404fc9c0L))(this);
        };
        void DrawLeafCollisionPoly(int16_t arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, int16_t);
            (org_ptr(0x1404f2ae0L))(this, arg_0);
        };
        void DrawMagicLightSub(float* arg_0, float* arg_1)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, float*, float*);
            (org_ptr(0x1404ff190L))(this, arg_0, arg_1);
        };
        void DrawMapEntitiesRender()
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*);
            (org_ptr(0x1404fbbb0L))(this);
        };
        void DrawMatBBox()
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*);
            (org_ptr(0x1404fd0f0L))(this);
        };
        void DrawShadowRender(float* arg_0, float* arg_1, float* arg_2)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, float*, float*, float*);
            (org_ptr(0x1404fe7c0L))(this, arg_0, arg_1, arg_2);
        };
        int EdgeTest(float* arg_0, int arg_1)
        {
            using org_ptr = int (WINAPIV*)(struct CBsp*, float*, int);
            return (org_ptr(0x14050c910L))(this, arg_0, arg_1);
        };
        void FastWalkNodeForLeafListFromBBox(int8_t arg_0, int16_t arg_1, int16_t arg_2, float** arg_3)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, int8_t, int16_t, int16_t, float**);
            (org_ptr(0x1404fc450L))(this, arg_0, arg_1, arg_2, arg_3);
        };
        void FrameMoveEnvironment()
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*);
            (org_ptr(0x1404f2ff0L))(this);
        };
        void FrameMoveMapEntities()
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*);
            (org_ptr(0x1404fb7d0L))(this);
        };
        float GetBestYposInLeaf(float* arg_0, float* arg_1, float arg_2, float arg_3, int arg_4)
        {
            using org_ptr = float (WINAPIV*)(struct CBsp*, float*, float*, float, float, int);
            return (org_ptr(0x1404e4720L))(this, arg_0, arg_1, arg_2, arg_3, arg_4);
        };
        void GetBspObjectMatrix(float** arg_0, uint16_t arg_1)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, float**, uint16_t);
            (org_ptr(0x1404fa360L))(this, arg_0, arg_1);
        };
        uint32_t GetColorFromPoint(int arg_0, float* arg_1)
        {
            using org_ptr = uint32_t (WINAPIV*)(struct CBsp*, int, float*);
            return (org_ptr(0x1404e3b20L))(this, arg_0, arg_1);
        };
        void* GetDynamicVertexBuffer()
        {
            using org_ptr = void* (WINAPIV*)(struct CBsp*);
            return (org_ptr(0x1404f64a0L))(this);
        };
        uint32_t GetEventAnimationState(uint16_t arg_0)
        {
            using org_ptr = uint32_t (WINAPIV*)(struct CBsp*, uint16_t);
            return (org_ptr(0x1404fa310L))(this, arg_0);
        };
        void GetFaceFrontPoint(float** arg_0, int arg_1)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, float**, int);
            (org_ptr(0x14050d7a0L))(this, arg_0, arg_1);
        };
        void GetFastLeafListFromBBox(float* arg_0, float* arg_1, int32_t* arg_2, int16_t* arg_3, uint32_t arg_4)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, float*, float*, int32_t*, int16_t*, uint32_t);
            (org_ptr(0x1404fc8b0L))(this, arg_0, arg_1, arg_2, arg_3, arg_4);
        };
        int64_t GetFinalPath(void* arg_0, float* arg_1, float** arg_2)
        {
            using org_ptr = int64_t (WINAPIV*)(struct CBsp*, void*, float*, float**);
            return (org_ptr(0x14050ded0L))(this, arg_0, arg_1, arg_2);
        };
        float GetFirstYpos(float* arg_0, float* arg_1, float* arg_2)
        {
            using org_ptr = float (WINAPIV*)(struct CBsp*, float*, float*, float*);
            return (org_ptr(0x1404e7500L))(this, arg_0, arg_1, arg_2);
        };
        float GetFirstYpos(float* arg_0, int arg_1)
        {
            using org_ptr = float (WINAPIV*)(struct CBsp*, float*, int);
            return (org_ptr(0x1404e5620L))(this, arg_0, arg_1);
        };
        float GetFirstYpos(float* arg_0, int16_t* arg_1, int16_t* arg_2)
        {
            using org_ptr = float (WINAPIV*)(struct CBsp*, float*, int16_t*, int16_t*);
            return (org_ptr(0x1404e5aa0L))(this, arg_0, arg_1, arg_2);
        };
        void GetHeight(float* arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, float*);
            (org_ptr(0x1404fbfa0L))(this, arg_0);
        };
        void GetLeafList(float* arg_0, float* arg_1, int32_t* arg_2, int16_t* arg_3, uint32_t arg_4)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, float*, float*, int32_t*, int16_t*, uint32_t);
            (org_ptr(0x1404fc350L))(this, arg_0, arg_1, arg_2, arg_3, arg_4);
        };
        int16_t GetLeafNum(float* arg_0)
        {
            using org_ptr = int16_t (WINAPIV*)(struct CBsp*, float*);
            return (org_ptr(0x1404fb510L))(this, arg_0);
        };
        uint32_t GetLightFromPoint(float* arg_0, uint32_t arg_1)
        {
            using org_ptr = uint32_t (WINAPIV*)(struct CBsp*, float*, uint32_t);
            return (org_ptr(0x1404e50c0L))(this, arg_0, arg_1);
        };
        void GetLightMapUVFromPoint(float* arg_0, int arg_1, float* arg_2)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, float*, int, float*);
            (org_ptr(0x1404e3370L))(this, arg_0, arg_1, arg_2);
        };
        struct _BSP_MAT_GROUP* GetMatGroup()
        {
            using org_ptr = struct _BSP_MAT_GROUP* (WINAPIV*)(struct CBsp*);
            return (org_ptr(0x1404f6490L))(this);
        };
        float GetMatGroupPoint(uint16_t arg_0, float* arg_1)
        {
            using org_ptr = float (WINAPIV*)(struct CBsp*, uint16_t, float*);
            return (org_ptr(0x1404fbf30L))(this, arg_0, arg_1);
        };
        void GetPath(float* arg_0, float* arg_1)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, float*, float*);
            (org_ptr(0x14050d800L))(this, arg_0, arg_1);
        };
        int64_t GetPathCrossPoint(float* arg_0, float* arg_1, float** arg_2, int arg_3, int arg_4)
        {
            using org_ptr = int64_t (WINAPIV*)(struct CBsp*, float*, float*, float**, int, int);
            return (org_ptr(0x14050cbb0L))(this, arg_0, arg_1, arg_2, arg_3, arg_4);
        };
        uint32_t GetPathFind(float* arg_0, float* arg_1, float** arg_2, uint32_t* arg_3, int arg_4)
        {
            using org_ptr = uint32_t (WINAPIV*)(struct CBsp*, float*, float*, float**, uint32_t*, int);
            return (org_ptr(0x14050e210L))(this, arg_0, arg_1, arg_2, arg_3, arg_4);
        };
        int64_t GetPointFromScreenRay(float arg_0, float arg_1, float* arg_2, float* arg_3)
        {
            using org_ptr = int64_t (WINAPIV*)(struct CBsp*, float, float, float*, float*);
            return (org_ptr(0x1404e75c0L))(this, arg_0, arg_1, arg_2, arg_3);
        };
        int64_t GetPointFromScreenRayFar(float arg_0, float arg_1, float* arg_2, float* arg_3)
        {
            using org_ptr = int64_t (WINAPIV*)(struct CBsp*, float, float, float*, float*);
            return (org_ptr(0x1404e7bd0L))(this, arg_0, arg_1, arg_2, arg_3);
        };
        void GetVertexNormal()
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*);
            (org_ptr(0x1404f64b0L))(this);
        };
        float GetYposInLeaf(float* arg_0, float* arg_1, float arg_2, float arg_3, int arg_4)
        {
            using org_ptr = float (WINAPIV*)(struct CBsp*, float*, float*, float, float, int);
            return (org_ptr(0x1404e4360L))(this, arg_0, arg_1, arg_2, arg_3, arg_4);
        };
        float GetYposInLeafNoAttr(float* arg_0, float* arg_1, float arg_2, float arg_3, int arg_4)
        {
            using org_ptr = float (WINAPIV*)(struct CBsp*, float*, float*, float, float, int);
            return (org_ptr(0x1404e4ab0L))(this, arg_0, arg_1, arg_2, arg_3, arg_4);
        };
        float GetYposInLeafUseEdgeNormal(float* arg_0, float* arg_1, float arg_2, float arg_3, int arg_4)
        {
            using org_ptr = float (WINAPIV*)(struct CBsp*, float*, float*, float, float, int);
            return (org_ptr(0x1404e4e70L))(this, arg_0, arg_1, arg_2, arg_3, arg_4);
        };
        void HearMapSound()
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*);
            (org_ptr(0x1404fd620L))(this);
        };
        int64_t IsCollisionFace(float* arg_0, float* arg_1)
        {
            using org_ptr = int64_t (WINAPIV*)(struct CBsp*, float*, float*);
            return (org_ptr(0x1404e5ee0L))(this, arg_0, arg_1);
        };
        int64_t IsCollisionFace(float* arg_0, float* arg_1, float** arg_2, float** arg_3)
        {
            using org_ptr = int64_t (WINAPIV*)(struct CBsp*, float*, float*, float**, float**);
            return (org_ptr(0x1404e63f0L))(this, arg_0, arg_1, arg_2, arg_3);
        };
        int64_t IsCollisionFace(float* arg_0, float* arg_1, float** arg_2, float arg_3)
        {
            using org_ptr = int64_t (WINAPIV*)(struct CBsp*, float*, float*, float**, float);
            return (org_ptr(0x1404e6850L))(this, arg_0, arg_1, arg_2, arg_3);
        };
        int64_t IsCollisionFaceForServer(float* arg_0, float* arg_1)
        {
            using org_ptr = int64_t (WINAPIV*)(struct CBsp*, float*, float*);
            return (org_ptr(0x1404e6200L))(this, arg_0, arg_1);
        };
        int64_t IsCollisionFaceForServer(float* arg_0, float* arg_1, float** arg_2, float arg_3)
        {
            using org_ptr = int64_t (WINAPIV*)(struct CBsp*, float*, float*, float**, float);
            return (org_ptr(0x1404e7150L))(this, arg_0, arg_1, arg_2, arg_3);
        };
        int64_t IsCollisionFromPath(float* arg_0, float* arg_1)
        {
            using org_ptr = int64_t (WINAPIV*)(struct CBsp*, float*, float*);
            return (org_ptr(0x14050d2a0L))(this, arg_0, arg_1);
        };
        int64_t IsExistSelfPoint(int arg_0, int arg_1)
        {
            using org_ptr = int64_t (WINAPIV*)(struct CBsp*, int, int);
            return (org_ptr(0x14050d600L))(this, arg_0, arg_1);
        };
        int64_t IsInViewFrustum(uint16_t arg_0)
        {
            using org_ptr = int64_t (WINAPIV*)(struct CBsp*, uint16_t);
            return (org_ptr(0x1404fbce0L))(this, arg_0);
        };
        int64_t IsInWater(float* arg_0, float* arg_1, float** arg_2, float arg_3)
        {
            using org_ptr = int64_t (WINAPIV*)(struct CBsp*, float*, float*, float**, float);
            return (org_ptr(0x1404e6d30L))(this, arg_0, arg_1, arg_2, arg_3);
        };
        int64_t IsLoaded()
        {
            using org_ptr = int64_t (WINAPIV*)(struct CBsp*);
            return (org_ptr(0x140512d00L))(this);
        };
        void LoadBsp(char* arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, char*);
            (org_ptr(0x1404fe030L))(this, arg_0);
        };
        void LoadEntities(struct _READ_MAP_ENTITIES_LIST* arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, struct _READ_MAP_ENTITIES_LIST*);
            (org_ptr(0x1404f96c0L))(this, arg_0);
        };
        void LoadEnvironment()
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*);
            (org_ptr(0x1404f8f70L))(this);
        };
        void LoadExtBsp(char* arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, char*);
            (org_ptr(0x1404ff7e0L))(this, arg_0);
        };
        void LoadSoundEntities(struct _READ_SOUND_ENTITY_LIST* arg_0, struct _READ_SOUND_ENTITIES_LIST* arg_1)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, struct _READ_SOUND_ENTITY_LIST*, struct _READ_SOUND_ENTITIES_LIST*);
            (org_ptr(0x1404f9200L))(this, arg_0, arg_1);
        };
        void LoopInitRenderedMatGroup()
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*);
            (org_ptr(0x1404fa020L))(this);
        };
        void MakeEdgeNormal()
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*);
            (org_ptr(0x1404f6b10L))(this);
        };
        void OnlyStoreCollisionStructure(struct _BSP_READ_M_GROUP* arg_0, char** arg_1, int16_t** arg_2, float** arg_3, uint32_t* arg_4, struct _BSP_READ_FACE* arg_5, uint32_t* arg_6)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, struct _BSP_READ_M_GROUP*, char**, int16_t**, float**, uint32_t*, struct _BSP_READ_FACE*, uint32_t*);
            (org_ptr(0x1404f65a0L))(this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6);
        };
        void PrepareAnimation()
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*);
            (org_ptr(0x1404fb560L))(this);
        };
        void PrepareShadowRender(float* arg_0, void* arg_1, float arg_2, uint32_t arg_3, float arg_4, float arg_5)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, float*, void*, float, uint32_t, float, float);
            (org_ptr(0x1404fbe20L))(this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5);
        };
        void ReadDynamicDataExtBsp(FILE* File)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, FILE*);
            (org_ptr(0x1404fdf40L))(this, File);
        };
        void ReadDynamicDataFillVertexBuffer(FILE* File)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, FILE*);
            (org_ptr(0x1404f7030L))(this, File);
        };
        void ReadyBspRender(float* arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, float*);
            (org_ptr(0x1404fe720L))(this, arg_0);
        };
        void ReleaseBsp()
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*);
            (org_ptr(0x1404f9e80L))(this);
        };
        void ReleaseEntities()
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*);
            (org_ptr(0x1404f9cb0L))(this);
        };
        void ReleaseEnvironment()
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*);
            (org_ptr(0x1404f9140L))(this);
        };
        void ReleaseSoundEntities()
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*);
            (org_ptr(0x1404f9640L))(this);
        };
        void RenderCollisionLeaf(int16_t arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, int16_t);
            (org_ptr(0x1404faff0L))(this, arg_0);
        };
        void RenderEnvironment()
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*);
            (org_ptr(0x1404f3540L))(this);
        };
        void RenderIndepentMatGroup(uint16_t arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, uint16_t);
            (org_ptr(0x1404fa8a0L))(this, arg_0);
        };
        void RenderLeaf(int16_t arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, int16_t);
            (org_ptr(0x1404fae40L))(this, arg_0);
        };
        void RenderMatGroup(uint16_t arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, uint16_t);
            (org_ptr(0x1404fa560L))(this, arg_0);
        };
        void RenderOneEntityRender(uint16_t arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, uint16_t);
            (org_ptr(0x1404fb590L))(this, arg_0);
        };
        void RenderReflectionMatGroup(uint16_t arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, uint16_t);
            (org_ptr(0x1404fadb0L))(this, arg_0);
        };
        void RenderShadowMatGroup(uint16_t arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, uint16_t);
            (org_ptr(0x1404fa0d0L))(this, arg_0);
        };
        void SaveExtBsp(char* arg_0, struct _ADD_BSP_SAVE* arg_1)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, char*, struct _ADD_BSP_SAVE*);
            (org_ptr(0x1404fdcc0L))(this, arg_0, arg_1);
        };
        void SearchNode(int16_t arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, int16_t);
            (org_ptr(0x1404fb410L))(this, arg_0);
        };
        int64_t SetAllAnimationState(uint32_t arg_0)
        {
            using org_ptr = int64_t (WINAPIV*)(struct CBsp*, uint32_t);
            return (org_ptr(0x1404fa250L))(this, arg_0);
        };
        void SetCFNormal()
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*);
            (org_ptr(0x1404f8be0L))(this);
        };
        int64_t SetEventAnimationState(uint16_t arg_0, uint32_t arg_1)
        {
            using org_ptr = int64_t (WINAPIV*)(struct CBsp*, uint16_t, uint32_t);
            return (org_ptr(0x1404fa170L))(this, arg_0, arg_1);
        };
        void SetIsLoaded(int arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, int);
            (org_ptr(0x1404dfbd0L))(this, arg_0);
        };
        void SubLeafList(float arg_0, struct _BSP_NODE* arg_1, float* arg_2, float* arg_3, int16_t* arg_4, int* arg_5)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, float, struct _BSP_NODE*, float*, float*, int16_t*, int*);
            (org_ptr(0x1404fc0d0L))(this, arg_0, arg_1, arg_2, arg_3, arg_4, arg_5);
        };
        void SubLeafListFromBBox(float arg_0, struct _BSP_NODE* arg_1, float** arg_2, int16_t* arg_3, int* arg_4)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, float, struct _BSP_NODE*, float**, int16_t*, int*);
            (org_ptr(0x1404fc3a0L))(this, arg_0, arg_1, arg_2, arg_3, arg_4);
        };
        void WalkLeaf(int16_t arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, int16_t);
            (org_ptr(0x1404faec0L))(this, arg_0);
        };
        void WalkNode(int16_t arg_0)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, int16_t);
            (org_ptr(0x1404fb2f0L))(this, arg_0);
        };
        void WalkNodeForLeafList(int8_t arg_0, int16_t arg_1, int16_t arg_2, float* arg_3, float arg_4)
        {
            using org_ptr = void (WINAPIV*)(struct CBsp*, int8_t, int16_t, int16_t, float*, float);
            (org_ptr(0x1404fc190L))(this, arg_0, arg_1, arg_2, arg_3, arg_4);
        };
        ~CBsp()
        {
            using org_ptr = int64_t (WINAPIV*)(struct CBsp*);
            (org_ptr(0x1404f63b0L))(this);
        };
        int64_t dtor_CBsp()
        {
            using org_ptr = int64_t (WINAPIV*)(struct CBsp*);
            return (org_ptr(0x1404f63b0L))(this);
        };
    };
END_ATF_NAMESPACE
