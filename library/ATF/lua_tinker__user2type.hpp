// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  user2type<void (__cdecl*)(void)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__var_base.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  user2type<var_base *>
        {
        public:
            static struct var_base* invoke(struct user2type<var_base *>* _this, lua_State* L, int index)
            {
                using org_ptr = struct var_base* (WINAPIV*)(struct user2type<var_base *>*, lua_State*, int);
                return (org_ptr(0x140447240L))(_this, L, index);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  user2type<void (__cdecl CLuaEventNode::*)(char const *)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  user2type<bool (__cdecl CLuaEventMgr::*)(CLuaEventNode *)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  user2type<void (__cdecl*)(char *,char *,LuaParam3,LuaParam3)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  user2type<CLuaEventNode * (__cdecl CLuaEventMgr::*)(char const *)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  user2type<CMonster * (__cdecl*)(char *,char *,float,float,float)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  user2type<bool (__cdecl CLuaSignalReActor::*)(unsigned char,unsigned char,char const *,char const *)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  user2type<void (__cdecl CLuaEventNode::*)(char const *,unsigned long)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__user.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  user2type<user *>
        {
        public:
            static struct user* invoke(struct user2type<user *>* _this, lua_State* L, int index)
            {
                using org_ptr = struct user* (WINAPIV*)(struct user2type<user *>*, lua_State*, int);
                return (org_ptr(0x140409b60L))(_this, L, index);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  user2type<CLuaEventNode * (__cdecl CLuaEventMgr::*)(void)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  user2type<void (__cdecl CLuaEventMgr::*)(CLuaEventNode *)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  user2type<CLuaEventMgr * (__cdecl*)(void)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  user2type<char const * (__cdecl CLuaScript::*)(void)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  user2type<void (__cdecl CLuaEventNode::*)(CLuaScript *)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  user2type<CLuaSignalReActor * (__cdecl CMonster::*)(void)>
        {
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
