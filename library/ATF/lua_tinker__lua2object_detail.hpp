// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "lua_tinker__lua2object_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            static info::lua_tinker__lua2objectinvoke2_ptr lua_tinker__lua2objectinvoke2_next(nullptr);
            static info::lua_tinker__lua2objectinvoke2_clbk lua_tinker__lua2objectinvoke2_user(nullptr);
            
            static struct CMonster* lua_tinker__lua2objectinvoke2_wrapper(struct lua_tinker::lua2object<CMonster *>* _this, lua_State* L, int index)
            {
               return lua_tinker__lua2objectinvoke2_user(_this, L, index);
            };
            
            static hook_record lua2object<CMonster *>_functions[] = {
            {   (LPVOID)0x14040b1c0L,
                (LPVOID *)&lua_tinker__lua2objectinvoke2_user,
                (LPVOID *)&lua_tinker__lua2objectinvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__lua2objectinvoke2_wrapper),
                (LPVOID)cast_pointer_function((struct CMonster*(lua_tinker::lua2object<CMonster *>::*)(struct lua_tinker::lua2object<CMonster *>*, lua_State*, int))&lua_tinker::lua2object<CMonster *>::invoke) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__lua2object_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            static info::lua_tinker__lua2objectinvoke2_ptr lua_tinker__lua2objectinvoke2_next(nullptr);
            static info::lua_tinker__lua2objectinvoke2_clbk lua_tinker__lua2objectinvoke2_user(nullptr);
            
            static struct CLuaEventNode* lua_tinker__lua2objectinvoke2_wrapper(struct lua_tinker::lua2object<CLuaEventNode *>* _this, lua_State* L, int index)
            {
               return lua_tinker__lua2objectinvoke2_user(_this, L, index);
            };
            
            static hook_record lua2object<CLuaEventNode *>_functions[] = {
            {   (LPVOID)0x14040a890L,
                (LPVOID *)&lua_tinker__lua2objectinvoke2_user,
                (LPVOID *)&lua_tinker__lua2objectinvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__lua2objectinvoke2_wrapper),
                (LPVOID)cast_pointer_function((struct CLuaEventNode*(lua_tinker::lua2object<CLuaEventNode *>::*)(struct lua_tinker::lua2object<CLuaEventNode *>*, lua_State*, int))&lua_tinker::lua2object<CLuaEventNode *>::invoke) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__lua2object_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            static info::lua_tinker__lua2objectinvoke2_ptr lua_tinker__lua2objectinvoke2_next(nullptr);
            static info::lua_tinker__lua2objectinvoke2_clbk lua_tinker__lua2objectinvoke2_user(nullptr);
            
            static struct CLuaSignalReActor* lua_tinker__lua2objectinvoke2_wrapper(struct lua_tinker::lua2object<CLuaSignalReActor *>* _this, lua_State* L, int index)
            {
               return lua_tinker__lua2objectinvoke2_user(_this, L, index);
            };
            
            static hook_record lua2object<CLuaSignalReActor *>_functions[] = {
            {   (LPVOID)0x14040b130L,
                (LPVOID *)&lua_tinker__lua2objectinvoke2_user,
                (LPVOID *)&lua_tinker__lua2objectinvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__lua2objectinvoke2_wrapper),
                (LPVOID)cast_pointer_function((struct CLuaSignalReActor*(lua_tinker::lua2object<CLuaSignalReActor *>::*)(struct lua_tinker::lua2object<CLuaSignalReActor *>*, lua_State*, int))&lua_tinker::lua2object<CLuaSignalReActor *>::invoke) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__lua2object_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            static info::lua_tinker__lua2objectinvoke2_ptr lua_tinker__lua2objectinvoke2_next(nullptr);
            static info::lua_tinker__lua2objectinvoke2_clbk lua_tinker__lua2objectinvoke2_user(nullptr);
            
            static struct CLuaScript* lua_tinker__lua2objectinvoke2_wrapper(struct lua_tinker::lua2object<CLuaScript *>* _this, lua_State* L, int index)
            {
               return lua_tinker__lua2objectinvoke2_user(_this, L, index);
            };
            
            static hook_record lua2object<CLuaScript *>_functions[] = {
            {   (LPVOID)0x14040a920L,
                (LPVOID *)&lua_tinker__lua2objectinvoke2_user,
                (LPVOID *)&lua_tinker__lua2objectinvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__lua2objectinvoke2_wrapper),
                (LPVOID)cast_pointer_function((struct CLuaScript*(lua_tinker::lua2object<CLuaScript *>::*)(struct lua_tinker::lua2object<CLuaScript *>*, lua_State*, int))&lua_tinker::lua2object<CLuaScript *>::invoke) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__lua2object_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            static info::lua_tinker__lua2objectinvoke2_ptr lua_tinker__lua2objectinvoke2_next(nullptr);
            static info::lua_tinker__lua2objectinvoke2_clbk lua_tinker__lua2objectinvoke2_user(nullptr);
            
            static struct LuaParam3* lua_tinker__lua2objectinvoke2_wrapper(struct lua_tinker::lua2object<LuaParam3 *>* _this, lua_State* L, int index)
            {
               return lua_tinker__lua2objectinvoke2_user(_this, L, index);
            };
            
            static hook_record lua2object<LuaParam3 *>_functions[] = {
            {   (LPVOID)0x1404098b0L,
                (LPVOID *)&lua_tinker__lua2objectinvoke2_user,
                (LPVOID *)&lua_tinker__lua2objectinvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__lua2objectinvoke2_wrapper),
                (LPVOID)cast_pointer_function((struct LuaParam3*(lua_tinker::lua2object<LuaParam3 *>::*)(struct lua_tinker::lua2object<LuaParam3 *>*, lua_State*, int))&lua_tinker::lua2object<LuaParam3 *>::invoke) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__lua2object_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            static info::lua_tinker__lua2objectinvoke2_ptr lua_tinker__lua2objectinvoke2_next(nullptr);
            static info::lua_tinker__lua2objectinvoke2_clbk lua_tinker__lua2objectinvoke2_user(nullptr);
            
            static struct CLuaEventMgr* lua_tinker__lua2objectinvoke2_wrapper(struct lua_tinker::lua2object<CLuaEventMgr *>* _this, lua_State* L, int index)
            {
               return lua_tinker__lua2objectinvoke2_user(_this, L, index);
            };
            
            static hook_record lua2object<CLuaEventMgr *>_functions[] = {
            {   (LPVOID)0x14040a9b0L,
                (LPVOID *)&lua_tinker__lua2objectinvoke2_user,
                (LPVOID *)&lua_tinker__lua2objectinvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__lua2objectinvoke2_wrapper),
                (LPVOID)cast_pointer_function((struct CLuaEventMgr*(lua_tinker::lua2object<CLuaEventMgr *>::*)(struct lua_tinker::lua2object<CLuaEventMgr *>*, lua_State*, int))&lua_tinker::lua2object<CLuaEventMgr *>::invoke) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
#include "lua_tinker__lua2object_info.hpp"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        namespace detail
        {
            static info::lua_tinker__lua2objectinvoke2_ptr lua_tinker__lua2objectinvoke2_next(nullptr);
            static info::lua_tinker__lua2objectinvoke2_clbk lua_tinker__lua2objectinvoke2_user(nullptr);
            
            static struct LuaParam3* lua_tinker__lua2objectinvoke2_wrapper(struct LuaParam3* result, lua_State* L, int index)
            {
               return lua_tinker__lua2objectinvoke2_user(result, L, index);
            };
            
            static hook_record lua2object<LuaParam3>_functions[] = {
            {   (LPVOID)0x14040aa40L,
                (LPVOID *)&lua_tinker__lua2objectinvoke2_user,
                (LPVOID *)&lua_tinker__lua2objectinvoke2_next,
                (LPVOID)cast_pointer_function(lua_tinker__lua2objectinvoke2_wrapper),
                (LPVOID)cast_pointer_function((struct LuaParam3*(lua_tinker::lua2object<LuaParam3>::*)(struct LuaParam3*, lua_State*, int))&lua_tinker::lua2object<LuaParam3>::invoke) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
