// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CConnNumPHMgr_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        static info::CConnNumPHMgrctor_CConnNumPHMgr2_ptr CConnNumPHMgrctor_CConnNumPHMgr2_next(nullptr);
        static info::CConnNumPHMgrctor_CConnNumPHMgr2_clbk CConnNumPHMgrctor_CConnNumPHMgr2_user(nullptr);
        static info::CConnNumPHMgrCheck4_ptr CConnNumPHMgrCheck4_next(nullptr);
        static info::CConnNumPHMgrCheck4_clbk CConnNumPHMgrCheck4_user(nullptr);
        static info::CConnNumPHMgrGetCurHour6_ptr CConnNumPHMgrGetCurHour6_next(nullptr);
        static info::CConnNumPHMgrGetCurHour6_clbk CConnNumPHMgrGetCurHour6_user(nullptr);
        static info::CConnNumPHMgrInit8_ptr CConnNumPHMgrInit8_next(nullptr);
        static info::CConnNumPHMgrInit8_clbk CConnNumPHMgrInit8_user(nullptr);
        
        static info::CConnNumPHMgr____cnt_per_hGetAverageUserNumPerHour2_ptr CConnNumPHMgr____cnt_per_hGetAverageUserNumPerHour2_next(nullptr);
        static info::CConnNumPHMgr____cnt_per_hGetAverageUserNumPerHour2_clbk CConnNumPHMgr____cnt_per_hGetAverageUserNumPerHour2_user(nullptr);
        static info::CConnNumPHMgr____cnt_per_hInit4_ptr CConnNumPHMgr____cnt_per_hInit4_next(nullptr);
        static info::CConnNumPHMgr____cnt_per_hInit4_clbk CConnNumPHMgr____cnt_per_hInit4_user(nullptr);
        static info::CConnNumPHMgr____cnt_per_hctor___cnt_per_h6_ptr CConnNumPHMgr____cnt_per_hctor___cnt_per_h6_next(nullptr);
        static info::CConnNumPHMgr____cnt_per_hctor___cnt_per_h6_clbk CConnNumPHMgr____cnt_per_hctor___cnt_per_h6_user(nullptr);
        
        static void CConnNumPHMgrctor_CConnNumPHMgr2_wrapper(struct CConnNumPHMgr* _this)
        {
           CConnNumPHMgrctor_CConnNumPHMgr2_user(_this, CConnNumPHMgrctor_CConnNumPHMgr2_next);
        };
        static struct _USER_NUM_SHEET* CConnNumPHMgrCheck4_wrapper(struct CConnNumPHMgr* _this, int nLoginNum)
        {
           return CConnNumPHMgrCheck4_user(_this, nLoginNum, CConnNumPHMgrCheck4_next);
        };
        static int CConnNumPHMgrGetCurHour6_wrapper(struct CConnNumPHMgr* _this)
        {
           return CConnNumPHMgrGetCurHour6_user(_this, CConnNumPHMgrGetCurHour6_next);
        };
        static void CConnNumPHMgrInit8_wrapper(struct CConnNumPHMgr* _this)
        {
           CConnNumPHMgrInit8_user(_this, CConnNumPHMgrInit8_next);
        };
        
        static int CConnNumPHMgr____cnt_per_hGetAverageUserNumPerHour2_wrapper(struct CConnNumPHMgr::__cnt_per_h* _this)
        {
           return CConnNumPHMgr____cnt_per_hGetAverageUserNumPerHour2_user(_this, CConnNumPHMgr____cnt_per_hGetAverageUserNumPerHour2_next);
        };
        static void CConnNumPHMgr____cnt_per_hInit4_wrapper(struct CConnNumPHMgr::__cnt_per_h* _this)
        {
           CConnNumPHMgr____cnt_per_hInit4_user(_this, CConnNumPHMgr____cnt_per_hInit4_next);
        };
        static void CConnNumPHMgr____cnt_per_hctor___cnt_per_h6_wrapper(struct CConnNumPHMgr::__cnt_per_h* _this)
        {
           CConnNumPHMgr____cnt_per_hctor___cnt_per_h6_user(_this, CConnNumPHMgr____cnt_per_hctor___cnt_per_h6_next);
        };
        
        static hook_record CConnNumPHMgr_functions[] = {
        {   (LPVOID)0x140202d70L,
            (LPVOID *)&CConnNumPHMgrctor_CConnNumPHMgr2_user,
            (LPVOID *)&CConnNumPHMgrctor_CConnNumPHMgr2_next,
            (LPVOID)cast_pointer_function(CConnNumPHMgrctor_CConnNumPHMgr2_wrapper),
            (LPVOID)cast_pointer_function((void(CConnNumPHMgr::*)())&CConnNumPHMgr::ctor_CConnNumPHMgr) },
        {   (LPVOID)0x140207e60L,
            (LPVOID *)&CConnNumPHMgrCheck4_user,
            (LPVOID *)&CConnNumPHMgrCheck4_next,
            (LPVOID)cast_pointer_function(CConnNumPHMgrCheck4_wrapper),
            (LPVOID)cast_pointer_function((struct _USER_NUM_SHEET*(CConnNumPHMgr::*)(int))&CConnNumPHMgr::Check) },
        {   (LPVOID)0x140202ee0L,
            (LPVOID *)&CConnNumPHMgrGetCurHour6_user,
            (LPVOID *)&CConnNumPHMgrGetCurHour6_next,
            (LPVOID)cast_pointer_function(CConnNumPHMgrGetCurHour6_wrapper),
            (LPVOID)cast_pointer_function((int(CConnNumPHMgr::*)())&CConnNumPHMgr::GetCurHour) },
        {   (LPVOID)0x140202e70L,
            (LPVOID *)&CConnNumPHMgrInit8_user,
            (LPVOID *)&CConnNumPHMgrInit8_next,
            (LPVOID)cast_pointer_function(CConnNumPHMgrInit8_wrapper),
            (LPVOID)cast_pointer_function((void(CConnNumPHMgr::*)())&CConnNumPHMgr::Init) },
        
        {   (LPVOID)0x140208010L,
            (LPVOID *)&CConnNumPHMgr____cnt_per_hGetAverageUserNumPerHour2_user,
            (LPVOID *)&CConnNumPHMgr____cnt_per_hGetAverageUserNumPerHour2_next,
            (LPVOID)cast_pointer_function(CConnNumPHMgr____cnt_per_hGetAverageUserNumPerHour2_wrapper),
            (LPVOID)cast_pointer_function((int(CConnNumPHMgr::__cnt_per_h::*)())&CConnNumPHMgr::__cnt_per_h::GetAverageUserNumPerHour) },
        {   (LPVOID)0x140202e20L,
            (LPVOID *)&CConnNumPHMgr____cnt_per_hInit4_user,
            (LPVOID *)&CConnNumPHMgr____cnt_per_hInit4_next,
            (LPVOID)cast_pointer_function(CConnNumPHMgr____cnt_per_hInit4_wrapper),
            (LPVOID)cast_pointer_function((void(CConnNumPHMgr::__cnt_per_h::*)())&CConnNumPHMgr::__cnt_per_h::Init) },
        {   (LPVOID)0x140202dd0L,
            (LPVOID *)&CConnNumPHMgr____cnt_per_hctor___cnt_per_h6_user,
            (LPVOID *)&CConnNumPHMgr____cnt_per_hctor___cnt_per_h6_next,
            (LPVOID)cast_pointer_function(CConnNumPHMgr____cnt_per_hctor___cnt_per_h6_wrapper),
            (LPVOID)cast_pointer_function((void(CConnNumPHMgr::__cnt_per_h::*)())&CConnNumPHMgr::__cnt_per_h::ctor___cnt_per_h) },
        
        };
        
    }; // static end namespace detail
END_ATF_NAMESPACE
