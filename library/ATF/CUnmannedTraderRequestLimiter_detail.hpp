// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CUnmannedTraderRequestLimiter_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        info::CUnmannedTraderRequestLimiterctor_CUnmannedTraderRequestLimiter2_ptr CUnmannedTraderRequestLimiterctor_CUnmannedTraderRequestLimiter2_next(nullptr);
        info::CUnmannedTraderRequestLimiterctor_CUnmannedTraderRequestLimiter2_clbk CUnmannedTraderRequestLimiterctor_CUnmannedTraderRequestLimiter2_user(nullptr);
        info::CUnmannedTraderRequestLimiterClearRequset4_ptr CUnmannedTraderRequestLimiterClearRequset4_next(nullptr);
        info::CUnmannedTraderRequestLimiterClearRequset4_clbk CUnmannedTraderRequestLimiterClearRequset4_user(nullptr);
        info::CUnmannedTraderRequestLimiterIsEmpty6_ptr CUnmannedTraderRequestLimiterIsEmpty6_next(nullptr);
        info::CUnmannedTraderRequestLimiterIsEmpty6_clbk CUnmannedTraderRequestLimiterIsEmpty6_user(nullptr);
        info::CUnmannedTraderRequestLimiterSetRequest8_ptr CUnmannedTraderRequestLimiterSetRequest8_next(nullptr);
        info::CUnmannedTraderRequestLimiterSetRequest8_clbk CUnmannedTraderRequestLimiterSetRequest8_user(nullptr);
        info::CUnmannedTraderRequestLimiterdtor_CUnmannedTraderRequestLimiter10_ptr CUnmannedTraderRequestLimiterdtor_CUnmannedTraderRequestLimiter10_next(nullptr);
        info::CUnmannedTraderRequestLimiterdtor_CUnmannedTraderRequestLimiter10_clbk CUnmannedTraderRequestLimiterdtor_CUnmannedTraderRequestLimiter10_user(nullptr);
        
        void CUnmannedTraderRequestLimiterctor_CUnmannedTraderRequestLimiter2_wrapper(struct CUnmannedTraderRequestLimiter* _this)
        {
           CUnmannedTraderRequestLimiterctor_CUnmannedTraderRequestLimiter2_user(_this, CUnmannedTraderRequestLimiterctor_CUnmannedTraderRequestLimiter2_next);
        };
        void CUnmannedTraderRequestLimiterClearRequset4_wrapper(struct CUnmannedTraderRequestLimiter* _this)
        {
           CUnmannedTraderRequestLimiterClearRequset4_user(_this, CUnmannedTraderRequestLimiterClearRequset4_next);
        };
        bool CUnmannedTraderRequestLimiterIsEmpty6_wrapper(struct CUnmannedTraderRequestLimiter* _this)
        {
           return CUnmannedTraderRequestLimiterIsEmpty6_user(_this, CUnmannedTraderRequestLimiterIsEmpty6_next);
        };
        void CUnmannedTraderRequestLimiterSetRequest8_wrapper(struct CUnmannedTraderRequestLimiter* _this, int iRequest)
        {
           CUnmannedTraderRequestLimiterSetRequest8_user(_this, iRequest, CUnmannedTraderRequestLimiterSetRequest8_next);
        };
        void CUnmannedTraderRequestLimiterdtor_CUnmannedTraderRequestLimiter10_wrapper(struct CUnmannedTraderRequestLimiter* _this)
        {
           CUnmannedTraderRequestLimiterdtor_CUnmannedTraderRequestLimiter10_user(_this, CUnmannedTraderRequestLimiterdtor_CUnmannedTraderRequestLimiter10_next);
        };
        
        hook_record CUnmannedTraderRequestLimiter_functions[] = {
        {   (LPVOID)0x14035f1f0L,
            (LPVOID *)&CUnmannedTraderRequestLimiterctor_CUnmannedTraderRequestLimiter2_user,
            (LPVOID *)&CUnmannedTraderRequestLimiterctor_CUnmannedTraderRequestLimiter2_next,
            (LPVOID)cast_pointer_function(CUnmannedTraderRequestLimiterctor_CUnmannedTraderRequestLimiter2_wrapper),
            (LPVOID)cast_pointer_function((void(CUnmannedTraderRequestLimiter::*)())&CUnmannedTraderRequestLimiter::ctor_CUnmannedTraderRequestLimiter) },
        {   (LPVOID)0x14035f6a0L,
            (LPVOID *)&CUnmannedTraderRequestLimiterClearRequset4_user,
            (LPVOID *)&CUnmannedTraderRequestLimiterClearRequset4_next,
            (LPVOID)cast_pointer_function(CUnmannedTraderRequestLimiterClearRequset4_wrapper),
            (LPVOID)cast_pointer_function((void(CUnmannedTraderRequestLimiter::*)())&CUnmannedTraderRequestLimiter::ClearRequset) },
        {   (LPVOID)0x140360550L,
            (LPVOID *)&CUnmannedTraderRequestLimiterIsEmpty6_user,
            (LPVOID *)&CUnmannedTraderRequestLimiterIsEmpty6_next,
            (LPVOID)cast_pointer_function(CUnmannedTraderRequestLimiterIsEmpty6_wrapper),
            (LPVOID)cast_pointer_function((bool(CUnmannedTraderRequestLimiter::*)())&CUnmannedTraderRequestLimiter::IsEmpty) },
        {   (LPVOID)0x14035f6c0L,
            (LPVOID *)&CUnmannedTraderRequestLimiterSetRequest8_user,
            (LPVOID *)&CUnmannedTraderRequestLimiterSetRequest8_next,
            (LPVOID)cast_pointer_function(CUnmannedTraderRequestLimiterSetRequest8_wrapper),
            (LPVOID)cast_pointer_function((void(CUnmannedTraderRequestLimiter::*)(int))&CUnmannedTraderRequestLimiter::SetRequest) },
        {   (LPVOID)0x14035f210L,
            (LPVOID *)&CUnmannedTraderRequestLimiterdtor_CUnmannedTraderRequestLimiter10_user,
            (LPVOID *)&CUnmannedTraderRequestLimiterdtor_CUnmannedTraderRequestLimiter10_next,
            (LPVOID)cast_pointer_function(CUnmannedTraderRequestLimiterdtor_CUnmannedTraderRequestLimiter10_wrapper),
            (LPVOID)cast_pointer_function((void(CUnmannedTraderRequestLimiter::*)())&CUnmannedTraderRequestLimiter::dtor_CUnmannedTraderRequestLimiter) },
        
        };
        
    }; // end namespace detail
END_ATF_NAMESPACE
