// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CPoint.hpp"
#include "CSize.hpp"
#include "tagPOINT.hpp"
#include "tagRECT.hpp"
#include "tagSIZE.hpp"


START_ATF_NAMESPACE
    struct  CRect : tagRECT
    {
    public:
        struct CPoint* BottomRight()
        {
            using org_ptr = struct CPoint* (WINAPIV*)(struct CRect*);
            return (org_ptr(0x140671260L))(this);
        };
        CRect(int l, int t, int r, int b)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, int, int, int, int);
            (org_ptr(0x140671050L))(this, l, t, r, b);
        };
        void ctor_CRect(int l, int t, int r, int b)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, int, int, int, int);
            (org_ptr(0x140671050L))(this, l, t, r, b);
        };
        CRect(struct tagPOINT topLeft, struct tagPOINT bottomRight)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, struct tagPOINT, struct tagPOINT);
            (org_ptr(0x140671160L))(this, topLeft, bottomRight);
        };
        void ctor_CRect(struct tagPOINT topLeft, struct tagPOINT bottomRight)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, struct tagPOINT, struct tagPOINT);
            (org_ptr(0x140671160L))(this, topLeft, bottomRight);
        };
        CRect(struct tagPOINT point, struct tagSIZE size)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, struct tagPOINT, struct tagSIZE);
            (org_ptr(0x140671100L))(this, point, size);
        };
        void ctor_CRect(struct tagPOINT point, struct tagSIZE size)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, struct tagPOINT, struct tagSIZE);
            (org_ptr(0x140671100L))(this, point, size);
        };
        CRect(struct tagRECT& srcRect)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, struct tagRECT&);
            (org_ptr(0x1406710a0L))(this, srcRect);
        };
        void ctor_CRect(struct tagRECT& srcRect)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, struct tagRECT&);
            (org_ptr(0x1406710a0L))(this, srcRect);
        };
        CRect(struct tagRECT* lpSrcRect)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, struct tagRECT*);
            (org_ptr(0x1406710d0L))(this, lpSrcRect);
        };
        void ctor_CRect(struct tagRECT* lpSrcRect)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, struct tagRECT*);
            (org_ptr(0x1406710d0L))(this, lpSrcRect);
        };
        CRect()
        {
            using org_ptr = void (WINAPIV*)(struct CRect*);
            (org_ptr(0x140671030L))(this);
        };
        void ctor_CRect()
        {
            using org_ptr = void (WINAPIV*)(struct CRect*);
            (org_ptr(0x140671030L))(this);
        };
        struct CPoint* CenterPoint(struct CPoint* result)
        {
            using org_ptr = struct CPoint* (WINAPIV*)(struct CRect*, struct CPoint*);
            return (org_ptr(0x1406712c0L))(this, result);
        };
        void CopyRect(struct tagRECT* lpSrcRect)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, struct tagRECT*);
            (org_ptr(0x140671520L))(this, lpSrcRect);
        };
        void DeflateRect(int x, int y)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, int, int);
            (org_ptr(0x1406715f0L))(this, x, y);
        };
        void DeflateRect(int l, int t, int r, int b)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, int, int, int, int);
            (org_ptr(0x1406720c0L))(this, l, t, r, b);
        };
        void DeflateRect(struct tagRECT* lpRect)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, struct tagRECT*);
            (org_ptr(0x140672040L))(this, lpRect);
        };
        void DeflateRect(struct tagSIZE size)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, struct tagSIZE);
            (org_ptr(0x140671630L))(this, size);
        };
        int EqualRect(struct tagRECT* lpRect)
        {
            using org_ptr = int (WINAPIV*)(struct CRect*, struct tagRECT*);
            return (org_ptr(0x140671550L))(this, lpRect);
        };
        int Height()
        {
            using org_ptr = int (WINAPIV*)(struct CRect*);
            return (org_ptr(0x1406711d0L))(this);
        };
        void InflateRect(int x, int y)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, int, int);
            (org_ptr(0x140671580L))(this, x, y);
        };
        void InflateRect(int l, int t, int r, int b)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, int, int, int, int);
            (org_ptr(0x140671fd0L))(this, l, t, r, b);
        };
        void InflateRect(struct tagRECT* lpRect)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, struct tagRECT*);
            (org_ptr(0x140671f50L))(this, lpRect);
        };
        void InflateRect(struct tagSIZE size)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, struct tagSIZE);
            (org_ptr(0x1406715c0L))(this, size);
        };
        int IntersectRect(struct tagRECT* lpRect1, struct tagRECT* lpRect2)
        {
            using org_ptr = int (WINAPIV*)(struct CRect*, struct tagRECT*, struct tagRECT*);
            return (org_ptr(0x140671810L))(this, lpRect1, lpRect2);
        };
        int IsRectEmpty()
        {
            using org_ptr = int (WINAPIV*)(struct CRect*);
            return (org_ptr(0x1406713c0L))(this);
        };
        int IsRectNull()
        {
            using org_ptr = int (WINAPIV*)(struct CRect*);
            return (org_ptr(0x1406713e0L))(this);
        };
        void MoveToX(int x)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, int);
            (org_ptr(0x140671750L))(this, x);
        };
        void MoveToXY(int x, int y)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, int, int);
            (org_ptr(0x140671790L))(this, x, y);
        };
        void MoveToXY(struct tagPOINT pt)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, struct tagPOINT);
            (org_ptr(0x1406717d0L))(this, pt);
        };
        void MoveToY(int y)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, int);
            (org_ptr(0x140671710L))(this, y);
        };
        struct CRect* MulDiv(struct CRect* result, int nMultiplier, int nDivisor)
        {
            using org_ptr = struct CRect* (WINAPIV*)(struct CRect*, struct CRect*, int, int);
            return (org_ptr(0x140672130L))(this, result, nMultiplier, nDivisor);
        };
        void NormalizeRect()
        {
            using org_ptr = void (WINAPIV*)(struct CRect*);
            (org_ptr(0x140671ec0L))(this);
        };
        void OffsetRect(int x, int y)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, int, int);
            (org_ptr(0x140671670L))(this, x, y);
        };
        void OffsetRect(struct tagPOINT point)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, struct tagPOINT);
            (org_ptr(0x1406716b0L))(this, point);
        };
        void OffsetRect(struct tagSIZE size)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, struct tagSIZE);
            (org_ptr(0x1406716e0L))(this, size);
        };
        int PtInRect(struct tagPOINT point)
        {
            using org_ptr = int (WINAPIV*)(struct CRect*, struct tagPOINT);
            return (org_ptr(0x140671440L))(this, point);
        };
        void SetRect(int x1, int y1, int x2, int y2)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, int, int, int, int);
            (org_ptr(0x140671470L))(this, x1, y1, x2, y2);
        };
        void SetRect(struct tagPOINT topLeft, struct tagPOINT bottomRight)
        {
            using org_ptr = void (WINAPIV*)(struct CRect*, struct tagPOINT, struct tagPOINT);
            (org_ptr(0x1406714c0L))(this, topLeft, bottomRight);
        };
        void SetRectEmpty()
        {
            using org_ptr = void (WINAPIV*)(struct CRect*);
            (org_ptr(0x140671500L))(this);
        };
        struct CSize* Size(struct CSize* result)
        {
            using org_ptr = struct CSize* (WINAPIV*)(struct CRect*, struct CSize*);
            return (org_ptr(0x1406711f0L))(this, result);
        };
        int SubtractRect(struct tagRECT* lpRectSrc1, struct tagRECT* lpRectSrc2)
        {
            using org_ptr = int (WINAPIV*)(struct CRect*, struct tagRECT*, struct tagRECT*);
            return (org_ptr(0x140671e80L))(this, lpRectSrc1, lpRectSrc2);
        };
        static void SwapLeftRight(struct tagRECT* lpRect)
        {
            using org_ptr = void (WINAPIV*)(struct tagRECT*);
            (org_ptr(0x140671340L))(lpRect);
        };
        void SwapLeftRight()
        {
            using org_ptr = void (WINAPIV*)(struct CRect*);
            (org_ptr(0x140671320L))(this);
        };
        struct CPoint* TopLeft()
        {
            using org_ptr = struct CPoint* (WINAPIV*)(struct CRect*);
            return (org_ptr(0x140671240L))(this);
        };
        int UnionRect(struct tagRECT* lpRect1, struct tagRECT* lpRect2)
        {
            using org_ptr = int (WINAPIV*)(struct CRect*, struct tagRECT*, struct tagRECT*);
            return (org_ptr(0x140671850L))(this, lpRect1, lpRect2);
        };
        int Width()
        {
            using org_ptr = int (WINAPIV*)(struct CRect*);
            return (org_ptr(0x1406711b0L))(this);
        };
    };
END_ATF_NAMESPACE
