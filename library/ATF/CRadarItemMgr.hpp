// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CMapData.hpp"
#include "CPlayer.hpp"
#include "_RadarItem_fld.hpp"
#include "_detected_char_list.hpp"


START_ATF_NAMESPACE
    #pragma pack(push, 8)
    struct CRadarItemMgr
    {
        bool m_bUse;
        bool m_bUpdate;
        unsigned int m_dwStartTime;
        unsigned int m_dwDurTime;
        unsigned int m_dwDelayTime;
        CPlayer *m_pMaster;
        char m_strRadarCode[64];
        CMapData *m_pDestMap;
        bool m_bPlayerEnd;
        bool m_bMonEnd;
        int m_nPlayerNum;
        int m_nMonNum;
        bool m_bSameRace;
        bool m_bNorDiffRace;
        bool m_bChiefDiffRace;
        bool m_bEliteMonster;
        _detected_char_list m_RadarResult;
    public:
        CRadarItemMgr()
        {
            using org_ptr = void (WINAPIV*)(struct CRadarItemMgr*);
            (org_ptr(0x1402e49c0L))(this);
        };
        void ctor_CRadarItemMgr()
        {
            using org_ptr = void (WINAPIV*)(struct CRadarItemMgr*);
            (org_ptr(0x1402e49c0L))(this);
        };
        unsigned int CalcDelay()
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CRadarItemMgr*);
            return (org_ptr(0x1402e5410L))(this);
        };
        unsigned int GetDelayTime()
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CRadarItemMgr*);
            return (org_ptr(0x1402e54c0L))(this);
        };
        unsigned int GetStartTime()
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CRadarItemMgr*);
            return (org_ptr(0x1402e54e0L))(this);
        };
        void Init(unsigned int dwDelayTime)
        {
            using org_ptr = void (WINAPIV*)(struct CRadarItemMgr*, unsigned int);
            (org_ptr(0x1402e4b00L))(this, dwDelayTime);
        };
        void Init()
        {
            using org_ptr = void (WINAPIV*)(struct CRadarItemMgr*);
            (org_ptr(0x1402e4a20L))(this);
        };
        bool IsRadarUse()
        {
            using org_ptr = bool (WINAPIV*)(struct CRadarItemMgr*);
            return (org_ptr(0x1402e4d00L))(this);
        };
        bool IsUpdate()
        {
            using org_ptr = bool (WINAPIV*)(struct CRadarItemMgr*);
            return (org_ptr(0x1402e4db0L))(this);
        };
        bool IsUse()
        {
            using org_ptr = bool (WINAPIV*)(struct CRadarItemMgr*);
            return (org_ptr(0x1402e4d90L))(this);
        };
        bool RadarProc(struct _RadarItem_fld* pRadarFld)
        {
            using org_ptr = bool (WINAPIV*)(struct CRadarItemMgr*, struct _RadarItem_fld*);
            return (org_ptr(0x1402e4e30L))(this, pRadarFld);
        };
        void ResetFlags()
        {
            using org_ptr = void (WINAPIV*)(struct CRadarItemMgr*);
            (org_ptr(0x1402e4dd0L))(this);
        };
        void ResetUpdate()
        {
            using org_ptr = void (WINAPIV*)(struct CRadarItemMgr*);
            (org_ptr(0x1402e4e10L))(this);
        };
        void SetUseRadar(char** strRadarCode, struct CPlayer* pMaster, unsigned int dwDurTime, unsigned int dwDelayTime)
        {
            using org_ptr = void (WINAPIV*)(struct CRadarItemMgr*, char**, struct CPlayer*, unsigned int, unsigned int);
            (org_ptr(0x1402e4c20L))(this, strRadarCode, pMaster, dwDurTime, dwDelayTime);
        };
        ~CRadarItemMgr()
        {
            using org_ptr = void (WINAPIV*)(struct CRadarItemMgr*);
            (org_ptr(0x1402e4a10L))(this);
        };
        void dtor_CRadarItemMgr()
        {
            using org_ptr = void (WINAPIV*)(struct CRadarItemMgr*);
            (org_ptr(0x1402e4a10L))(this);
        };
    };
    #pragma pack(pop)
END_ATF_NAMESPACE
