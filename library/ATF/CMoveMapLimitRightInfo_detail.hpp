// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CMoveMapLimitRightInfo_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        static info::CMoveMapLimitRightInfoctor_CMoveMapLimitRightInfo2_ptr CMoveMapLimitRightInfoctor_CMoveMapLimitRightInfo2_next(nullptr);
        static info::CMoveMapLimitRightInfoctor_CMoveMapLimitRightInfo2_clbk CMoveMapLimitRightInfoctor_CMoveMapLimitRightInfo2_user(nullptr);
        static info::CMoveMapLimitRightInfoctor_CMoveMapLimitRightInfo4_ptr CMoveMapLimitRightInfoctor_CMoveMapLimitRightInfo4_next(nullptr);
        static info::CMoveMapLimitRightInfoctor_CMoveMapLimitRightInfo4_clbk CMoveMapLimitRightInfoctor_CMoveMapLimitRightInfo4_user(nullptr);
        static info::CMoveMapLimitRightInfoCleanUp6_ptr CMoveMapLimitRightInfoCleanUp6_next(nullptr);
        static info::CMoveMapLimitRightInfoCleanUp6_clbk CMoveMapLimitRightInfoCleanUp6_user(nullptr);
        static info::CMoveMapLimitRightInfoCreateComplete8_ptr CMoveMapLimitRightInfoCreateComplete8_next(nullptr);
        static info::CMoveMapLimitRightInfoCreateComplete8_clbk CMoveMapLimitRightInfoCreateComplete8_user(nullptr);
        static info::CMoveMapLimitRightInfoIsHaveRight10_ptr CMoveMapLimitRightInfoIsHaveRight10_next(nullptr);
        static info::CMoveMapLimitRightInfoIsHaveRight10_clbk CMoveMapLimitRightInfoIsHaveRight10_user(nullptr);
        static info::CMoveMapLimitRightInfoLoad12_ptr CMoveMapLimitRightInfoLoad12_next(nullptr);
        static info::CMoveMapLimitRightInfoLoad12_clbk CMoveMapLimitRightInfoLoad12_user(nullptr);
        static info::CMoveMapLimitRightInfoLogIn14_ptr CMoveMapLimitRightInfoLogIn14_next(nullptr);
        static info::CMoveMapLimitRightInfoLogIn14_clbk CMoveMapLimitRightInfoLogIn14_user(nullptr);
        static info::CMoveMapLimitRightInfoLogOut16_ptr CMoveMapLimitRightInfoLogOut16_next(nullptr);
        static info::CMoveMapLimitRightInfoLogOut16_clbk CMoveMapLimitRightInfoLogOut16_user(nullptr);
        static info::CMoveMapLimitRightInfoRegist18_ptr CMoveMapLimitRightInfoRegist18_next(nullptr);
        static info::CMoveMapLimitRightInfoRegist18_clbk CMoveMapLimitRightInfoRegist18_user(nullptr);
        static info::CMoveMapLimitRightInfoSetFlag20_ptr CMoveMapLimitRightInfoSetFlag20_next(nullptr);
        static info::CMoveMapLimitRightInfoSetFlag20_clbk CMoveMapLimitRightInfoSetFlag20_user(nullptr);
        static info::CMoveMapLimitRightInfodtor_CMoveMapLimitRightInfo26_ptr CMoveMapLimitRightInfodtor_CMoveMapLimitRightInfo26_next(nullptr);
        static info::CMoveMapLimitRightInfodtor_CMoveMapLimitRightInfo26_clbk CMoveMapLimitRightInfodtor_CMoveMapLimitRightInfo26_user(nullptr);
        
        static void CMoveMapLimitRightInfoctor_CMoveMapLimitRightInfo2_wrapper(struct CMoveMapLimitRightInfo* _this, struct CMoveMapLimitRightInfo* __that)
        {
           CMoveMapLimitRightInfoctor_CMoveMapLimitRightInfo2_user(_this, __that, CMoveMapLimitRightInfoctor_CMoveMapLimitRightInfo2_next);
        };
        static void CMoveMapLimitRightInfoctor_CMoveMapLimitRightInfo4_wrapper(struct CMoveMapLimitRightInfo* _this)
        {
           CMoveMapLimitRightInfoctor_CMoveMapLimitRightInfo4_user(_this, CMoveMapLimitRightInfoctor_CMoveMapLimitRightInfo4_next);
        };
        static void CMoveMapLimitRightInfoCleanUp6_wrapper(struct CMoveMapLimitRightInfo* _this)
        {
           CMoveMapLimitRightInfoCleanUp6_user(_this, CMoveMapLimitRightInfoCleanUp6_next);
        };
        static void CMoveMapLimitRightInfoCreateComplete8_wrapper(struct CMoveMapLimitRightInfo* _this, struct CPlayer* pkPlayer)
        {
           CMoveMapLimitRightInfoCreateComplete8_user(_this, pkPlayer, CMoveMapLimitRightInfoCreateComplete8_next);
        };
        static bool CMoveMapLimitRightInfoIsHaveRight10_wrapper(struct CMoveMapLimitRightInfo* _this, int iType)
        {
           return CMoveMapLimitRightInfoIsHaveRight10_user(_this, iType, CMoveMapLimitRightInfoIsHaveRight10_next);
        };
        static void CMoveMapLimitRightInfoLoad12_wrapper(struct CMoveMapLimitRightInfo* _this, struct CPlayer* pkPlayer)
        {
           CMoveMapLimitRightInfoLoad12_user(_this, pkPlayer, CMoveMapLimitRightInfoLoad12_next);
        };
        static void CMoveMapLimitRightInfoLogIn14_wrapper(struct CMoveMapLimitRightInfo* _this, struct CPlayer* pkPlayer)
        {
           CMoveMapLimitRightInfoLogIn14_user(_this, pkPlayer, CMoveMapLimitRightInfoLogIn14_next);
        };
        static void CMoveMapLimitRightInfoLogOut16_wrapper(struct CMoveMapLimitRightInfo* _this, struct CPlayer* pkPlayer)
        {
           CMoveMapLimitRightInfoLogOut16_user(_this, pkPlayer, CMoveMapLimitRightInfoLogOut16_next);
        };
        static bool CMoveMapLimitRightInfoRegist18_wrapper(struct CMoveMapLimitRightInfo* _this, int iType)
        {
           return CMoveMapLimitRightInfoRegist18_user(_this, iType, CMoveMapLimitRightInfoRegist18_next);
        };
        static void CMoveMapLimitRightInfoSetFlag20_wrapper(struct CMoveMapLimitRightInfo* _this, int iType, int iSubType, bool bFlag)
        {
           CMoveMapLimitRightInfoSetFlag20_user(_this, iType, iSubType, bFlag, CMoveMapLimitRightInfoSetFlag20_next);
        };
        static void CMoveMapLimitRightInfodtor_CMoveMapLimitRightInfo26_wrapper(struct CMoveMapLimitRightInfo* _this)
        {
           CMoveMapLimitRightInfodtor_CMoveMapLimitRightInfo26_user(_this, CMoveMapLimitRightInfodtor_CMoveMapLimitRightInfo26_next);
        };
        
        static hook_record CMoveMapLimitRightInfo_functions[] = {
        {   (LPVOID)0x1403af990L,
            (LPVOID *)&CMoveMapLimitRightInfoctor_CMoveMapLimitRightInfo2_user,
            (LPVOID *)&CMoveMapLimitRightInfoctor_CMoveMapLimitRightInfo2_next,
            (LPVOID)cast_pointer_function(CMoveMapLimitRightInfoctor_CMoveMapLimitRightInfo2_wrapper),
            (LPVOID)cast_pointer_function((void(CMoveMapLimitRightInfo::*)(struct CMoveMapLimitRightInfo*))&CMoveMapLimitRightInfo::ctor_CMoveMapLimitRightInfo) },
        {   (LPVOID)0x1403ae760L,
            (LPVOID *)&CMoveMapLimitRightInfoctor_CMoveMapLimitRightInfo4_user,
            (LPVOID *)&CMoveMapLimitRightInfoctor_CMoveMapLimitRightInfo4_next,
            (LPVOID)cast_pointer_function(CMoveMapLimitRightInfoctor_CMoveMapLimitRightInfo4_wrapper),
            (LPVOID)cast_pointer_function((void(CMoveMapLimitRightInfo::*)())&CMoveMapLimitRightInfo::ctor_CMoveMapLimitRightInfo) },
        {   (LPVOID)0x1403ad710L,
            (LPVOID *)&CMoveMapLimitRightInfoCleanUp6_user,
            (LPVOID *)&CMoveMapLimitRightInfoCleanUp6_next,
            (LPVOID)cast_pointer_function(CMoveMapLimitRightInfoCleanUp6_wrapper),
            (LPVOID)cast_pointer_function((void(CMoveMapLimitRightInfo::*)())&CMoveMapLimitRightInfo::CleanUp) },
        {   (LPVOID)0x1403ad150L,
            (LPVOID *)&CMoveMapLimitRightInfoCreateComplete8_user,
            (LPVOID *)&CMoveMapLimitRightInfoCreateComplete8_next,
            (LPVOID)cast_pointer_function(CMoveMapLimitRightInfoCreateComplete8_wrapper),
            (LPVOID)cast_pointer_function((void(CMoveMapLimitRightInfo::*)(struct CPlayer*))&CMoveMapLimitRightInfo::CreateComplete) },
        {   (LPVOID)0x1403acba0L,
            (LPVOID *)&CMoveMapLimitRightInfoIsHaveRight10_user,
            (LPVOID *)&CMoveMapLimitRightInfoIsHaveRight10_next,
            (LPVOID)cast_pointer_function(CMoveMapLimitRightInfoIsHaveRight10_wrapper),
            (LPVOID)cast_pointer_function((bool(CMoveMapLimitRightInfo::*)(int))&CMoveMapLimitRightInfo::IsHaveRight) },
        {   (LPVOID)0x1403acd10L,
            (LPVOID *)&CMoveMapLimitRightInfoLoad12_user,
            (LPVOID *)&CMoveMapLimitRightInfoLoad12_next,
            (LPVOID)cast_pointer_function(CMoveMapLimitRightInfoLoad12_wrapper),
            (LPVOID)cast_pointer_function((void(CMoveMapLimitRightInfo::*)(struct CPlayer*))&CMoveMapLimitRightInfo::Load) },
        {   (LPVOID)0x1403acf30L,
            (LPVOID *)&CMoveMapLimitRightInfoLogIn14_user,
            (LPVOID *)&CMoveMapLimitRightInfoLogIn14_next,
            (LPVOID)cast_pointer_function(CMoveMapLimitRightInfoLogIn14_wrapper),
            (LPVOID)cast_pointer_function((void(CMoveMapLimitRightInfo::*)(struct CPlayer*))&CMoveMapLimitRightInfo::LogIn) },
        {   (LPVOID)0x1403ad370L,
            (LPVOID *)&CMoveMapLimitRightInfoLogOut16_user,
            (LPVOID *)&CMoveMapLimitRightInfoLogOut16_next,
            (LPVOID)cast_pointer_function(CMoveMapLimitRightInfoLogOut16_wrapper),
            (LPVOID)cast_pointer_function((void(CMoveMapLimitRightInfo::*)(struct CPlayer*))&CMoveMapLimitRightInfo::LogOut) },
        {   (LPVOID)0x1403ac960L,
            (LPVOID *)&CMoveMapLimitRightInfoRegist18_user,
            (LPVOID *)&CMoveMapLimitRightInfoRegist18_next,
            (LPVOID)cast_pointer_function(CMoveMapLimitRightInfoRegist18_wrapper),
            (LPVOID)cast_pointer_function((bool(CMoveMapLimitRightInfo::*)(int))&CMoveMapLimitRightInfo::Regist) },
        {   (LPVOID)0x1403acc50L,
            (LPVOID *)&CMoveMapLimitRightInfoSetFlag20_user,
            (LPVOID *)&CMoveMapLimitRightInfoSetFlag20_next,
            (LPVOID)cast_pointer_function(CMoveMapLimitRightInfoSetFlag20_wrapper),
            (LPVOID)cast_pointer_function((void(CMoveMapLimitRightInfo::*)(int, int, bool))&CMoveMapLimitRightInfo::SetFlag) },
        {   (LPVOID)0x1403a3990L,
            (LPVOID *)&CMoveMapLimitRightInfodtor_CMoveMapLimitRightInfo26_user,
            (LPVOID *)&CMoveMapLimitRightInfodtor_CMoveMapLimitRightInfo26_next,
            (LPVOID)cast_pointer_function(CMoveMapLimitRightInfodtor_CMoveMapLimitRightInfo26_wrapper),
            (LPVOID)cast_pointer_function((void(CMoveMapLimitRightInfo::*)())&CMoveMapLimitRightInfo::dtor_CMoveMapLimitRightInfo) },
        
        };
        
    }; // static end namespace detail
END_ATF_NAMESPACE
