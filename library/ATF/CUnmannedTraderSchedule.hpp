// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"


START_ATF_NAMESPACE
    struct CUnmannedTraderSchedule
    {
        enum STATE
        {
            EMPTY = 0x0,
            REG_WAIT = 0x1,
            WAIT_CANCEL = 0x2,
            CANCEL_SUCC_COMPLETE = 0x3,
            CANCEL_FAIL_COMPLETE = 0x4,
        };
        STATE m_eState;
        char m_byType;
        unsigned int m_dwRegistSerial;
        __int64 m_tEndTime;
        unsigned int m_dwOwnerSerial;
        char m_byItemTableCode;
        unsigned __int16 m_wItemTableIndex;
    public:
        CUnmannedTraderSchedule()
        {
            using org_ptr = void (WINAPIV*)(struct CUnmannedTraderSchedule*);
            (org_ptr(0x140394580L))(this);
        };
        void ctor_CUnmannedTraderSchedule()
        {
            using org_ptr = void (WINAPIV*)(struct CUnmannedTraderSchedule*);
            (org_ptr(0x140394580L))(this);
        };
        void Clear()
        {
            using org_ptr = void (WINAPIV*)(struct CUnmannedTraderSchedule*);
            (org_ptr(0x140351b00L))(this);
        };
        void CompleteClear(char byDBQueryRet, char byProcRet)
        {
            using org_ptr = void (WINAPIV*)(struct CUnmannedTraderSchedule*, char, char);
            (org_ptr(0x1403978c0L))(this, byDBQueryRet, byProcRet);
        };
        unsigned int GetOwnerSerial()
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CUnmannedTraderSchedule*);
            return (org_ptr(0x140394710L))(this);
        };
        unsigned int GetRegistSerial()
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CUnmannedTraderSchedule*);
            return (org_ptr(0x140394ac0L))(this);
        };
        char GetType()
        {
            using org_ptr = char (WINAPIV*)(struct CUnmannedTraderSchedule*);
            return (org_ptr(0x140394aa0L))(this);
        };
        bool IsDone()
        {
            using org_ptr = bool (WINAPIV*)(struct CUnmannedTraderSchedule*);
            return (org_ptr(0x140394730L))(this);
        };
        bool IsWait()
        {
            using org_ptr = bool (WINAPIV*)(struct CUnmannedTraderSchedule*);
            return (org_ptr(0x140394c10L))(this);
        };
        void PushClear(bool bTimeLimit)
        {
            using org_ptr = void (WINAPIV*)(struct CUnmannedTraderSchedule*, bool);
            (org_ptr(0x1403976e0L))(this, bTimeLimit);
        };
        void Set(char byType, unsigned int dwSerial, int64_t tEndTime, unsigned int dwOwnerSerial, unsigned int dwK)
        {
            using org_ptr = void (WINAPIV*)(struct CUnmannedTraderSchedule*, char, unsigned int, int64_t, unsigned int, unsigned int);
            (org_ptr(0x140397620L))(this, byType, dwSerial, tEndTime, dwOwnerSerial, dwK);
        };
        ~CUnmannedTraderSchedule()
        {
            using org_ptr = void (WINAPIV*)(struct CUnmannedTraderSchedule*);
            (org_ptr(0x1403945d0L))(this);
        };
        void dtor_CUnmannedTraderSchedule()
        {
            using org_ptr = void (WINAPIV*)(struct CUnmannedTraderSchedule*);
            (org_ptr(0x1403945d0L))(this);
        };
    };
END_ATF_NAMESPACE
