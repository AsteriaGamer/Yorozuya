// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CDummyPosTable.hpp"
#include "CExtDummy.hpp"
#include "CGameObject.hpp"
#include "CLevel.hpp"
#include "CMapDataVtbl.hpp"
#include "CMyTimer.hpp"
#include "CObjectList.hpp"
#include "CRecordData.hpp"
#include "_LAYER_SET.hpp"
#include "_MULTI_BLOCK.hpp"
#include "_bind_dummy.hpp"
#include "_bsp_info.hpp"
#include "_dummy_position.hpp"
#include "_map_fld.hpp"
#include "_mon_block.hpp"
#include "_pnt_rect.hpp"
#include "_portal_dummy.hpp"
#include "_quest_dummy.hpp"
#include "_res_dummy.hpp"
#include "_safe_dummy.hpp"
#include "_sec_info.hpp"
#include "_start_dummy.hpp"
#include "_store_dummy.hpp"


START_ATF_NAMESPACE
    #pragma pack(push, 8)
    struct CMapData
    {
        CMapDataVtbl *vfptr;
        bool m_bUse;
        bool m_bLoad;
        int m_nMapIndex;
        CLevel m_Level;
        int m_nMapCode;
        _LAYER_SET *m_ls;
        _MULTI_BLOCK *m_mb;
        CExtDummy m_Dummy;
        int m_nMapInPlayerNum;
        int m_nMapInMonsterNum;
        int m_nMonBlockNum;
        _mon_block *m_pMonBlock;
        int m_nMonDumNum;
        int m_nPortalNum;
        _portal_dummy *m_pPortal;
        int m_nItemStoreDumNum;
        _store_dummy *m_pItemStoreDummy;
        int m_nStartDumNum;
        _start_dummy *m_pStartDummy;
        int m_nBindDumNum;
        _bind_dummy *m_pBindDummy;
        int m_nResDumNum;
        _res_dummy *m_pResDummy;
        int m_nQuestDumNum;
        _quest_dummy *m_pQuestDummy;
        _map_fld *m_pMapSet;
        CExtDummy *m_pExtDummy_Town;
        int m_nSafeDumNum;
        _safe_dummy *m_pSafeDummy;
        CDummyPosTable m_tbSafeDumPos;
        CRecordData m_tbMonBlk;
        CRecordData m_tbPortal;
        CDummyPosTable m_tbMonDumPos;
        CDummyPosTable m_tbPortalDumPos;
        CDummyPosTable m_tbStoreDumPos;
        CDummyPosTable m_tbStartDumPos;
        CDummyPosTable m_tbBindDumPos;
        CDummyPosTable m_tbResDumPosHigh;
        CDummyPosTable m_tbResDumPosMiddle;
        CDummyPosTable m_tbResDumPosLow;
        CDummyPosTable m_tbQuestDumPos;
        _bsp_info m_BspInfo;
        _sec_info m_SecInfo;
        CMyTimer m_tmrMineGradeReSet;
        int m_nMonTotalCount;
    public:
        CMapData()
        {
            using org_ptr = void (WINAPIV*)(struct CMapData*);
            (org_ptr(0x140180050L))(this);
        };
        void ctor_CMapData()
        {
            using org_ptr = void (WINAPIV*)(struct CMapData*);
            (org_ptr(0x140180050L))(this);
        };
        bool CheckCenterPosDummy(struct _dummy_position* pPos)
        {
            using org_ptr = bool (WINAPIV*)(struct CMapData*, struct _dummy_position*);
            return (org_ptr(0x1401855d0L))(this, pPos);
        };
        bool ConvertLocal(struct _dummy_position* pPos)
        {
            using org_ptr = bool (WINAPIV*)(struct CMapData*, struct _dummy_position*);
            return (org_ptr(0x140185100L))(this, pPos);
        };
        bool ConvertLocalToWorldDummy(struct CDummyPosTable* pPosTable, bool bCheckCenter)
        {
            using org_ptr = bool (WINAPIV*)(struct CMapData*, struct CDummyPosTable*, bool);
            return (org_ptr(0x140185050L))(this, pPosTable, bCheckCenter);
        };
        void EnterMap(struct CGameObject* pObj, unsigned int dwSecIndex)
        {
            using org_ptr = void (WINAPIV*)(struct CMapData*, struct CGameObject*, unsigned int);
            (org_ptr(0x140184d30L))(this, pObj, dwSecIndex);
        };
        void ExitMap(struct CGameObject* pObj, unsigned int dwSecIndex)
        {
            using org_ptr = void (WINAPIV*)(struct CMapData*, struct CGameObject*, unsigned int);
            (org_ptr(0x140184ec0L))(this, pObj, dwSecIndex);
        };
        struct _bsp_info* GetBspInfo()
        {
            using org_ptr = struct _bsp_info* (WINAPIV*)(struct CMapData*);
            return (org_ptr(0x1401843c0L))(this);
        };
        struct _dummy_position* GetDummyPostion(char* pszDummyCode)
        {
            using org_ptr = struct _dummy_position* (WINAPIV*)(struct CMapData*, char*);
            return (org_ptr(0x140186440L))(this, pszDummyCode);
        };
        int GetLevelLimit()
        {
            using org_ptr = int (WINAPIV*)(struct CMapData*);
            return (org_ptr(0x140186690L))(this);
        };
        struct _portal_dummy* GetLinkPortal(char* pPortalCode)
        {
            using org_ptr = struct _portal_dummy* (WINAPIV*)(struct CMapData*, char*);
            return (org_ptr(0x1401846e0L))(this, pPortalCode);
        };
        char GetMapCode()
        {
            using org_ptr = char (WINAPIV*)(struct CMapData*);
            return (org_ptr(0x1400c2cd0L))(this);
        };
        struct _portal_dummy* GetPortal(char* pPortalCode)
        {
            using org_ptr = struct _portal_dummy* (WINAPIV*)(struct CMapData*, char*);
            return (org_ptr(0x140184550L))(this, pPortalCode);
        };
        struct _portal_dummy* GetPortal(int nPortalIndex)
        {
            using org_ptr = struct _portal_dummy* (WINAPIV*)(struct CMapData*, int);
            return (org_ptr(0x1401846a0L))(this, nPortalIndex);
        };
        int GetPortalInx(char* pPortalCode)
        {
            using org_ptr = int (WINAPIV*)(struct CMapData*, char*);
            return (org_ptr(0x140184600L))(this, pPortalCode);
        };
        char GetRaceTown(float* fPos, char byRaceCode)
        {
            using org_ptr = char (WINAPIV*)(struct CMapData*, float*, char);
            return (org_ptr(0x1401862d0L))(this, fPos, byRaceCode);
        };
        bool GetRandPosInDummy(struct _dummy_position* pPos, float* pNewPos, bool bRePos)
        {
            using org_ptr = bool (WINAPIV*)(struct CMapData*, struct _dummy_position*, float*, bool);
            return (org_ptr(0x1401857a0L))(this, pPos, pNewPos, bRePos);
        };
        bool GetRandPosInRange(float* pStdPos, int nRange, float* pNewPos)
        {
            using org_ptr = bool (WINAPIV*)(struct CMapData*, float*, int, float*);
            return (org_ptr(0x140185b10L))(this, pStdPos, nRange, pNewPos);
        };
        bool GetRandPosVirtualDum(float* pStdPos, int nRange, float* pNewPos)
        {
            using org_ptr = bool (WINAPIV*)(struct CMapData*, float*, int, float*);
            return (org_ptr(0x140185c70L))(this, pStdPos, nRange, pNewPos);
        };
        bool GetRandPosVirtualDumExcludeStdRange(float* pStdPos, int nRange, int iExcludeRange, float* pNewPos)
        {
            using org_ptr = bool (WINAPIV*)(struct CMapData*, float*, int, int, float*);
            return (org_ptr(0x140185ee0L))(this, pStdPos, nRange, iExcludeRange, pNewPos);
        };
        void GetRectInRadius(struct _pnt_rect* pRect, int nRadius, int nSecNum)
        {
            using org_ptr = void (WINAPIV*)(struct CMapData*, struct _pnt_rect*, int, int);
            (org_ptr(0x1401843e0L))(this, pRect, nRadius, nSecNum);
        };
        int GetResDummySector(int nDummyIndex, float* pCurPos)
        {
            using org_ptr = int (WINAPIV*)(struct CMapData*, int, float*);
            return (org_ptr(0x140184950L))(this, nDummyIndex, pCurPos);
        };
        struct _sec_info* GetSecInfo()
        {
            using org_ptr = struct _sec_info* (WINAPIV*)(struct CMapData*);
            return (org_ptr(0x1401843a0L))(this);
        };
        int GetSectorIndex(float* pPos)
        {
            using org_ptr = int (WINAPIV*)(struct CMapData*, float*);
            return (org_ptr(0x140184790L))(this, pPos);
        };
        struct CObjectList* GetSectorListObj(uint16_t wLayerIndex, unsigned int dwSecIndex)
        {
            using org_ptr = struct CObjectList* (WINAPIV*)(struct CMapData*, uint16_t, unsigned int);
            return (org_ptr(0x140184890L))(this, wLayerIndex, dwSecIndex);
        };
        struct CObjectList* GetSectorListPlayer(uint16_t wLayerIndex, unsigned int dwSecIndex)
        {
            using org_ptr = struct CObjectList* (WINAPIV*)(struct CMapData*, uint16_t, unsigned int);
            return (org_ptr(0x1401848d0L))(this, wLayerIndex, dwSecIndex);
        };
        struct CObjectList* GetSectorListTower(uint16_t wLayerIndex, unsigned int dwSecIndex)
        {
            using org_ptr = struct CObjectList* (WINAPIV*)(struct CMapData*, uint16_t, unsigned int);
            return (org_ptr(0x140184910L))(this, wLayerIndex, dwSecIndex);
        };
        int GetSectorNumByLayerIndex(uint16_t wLayerIndex)
        {
            using org_ptr = int (WINAPIV*)(struct CMapData*, uint16_t);
            return (org_ptr(0x1401866d0L))(this, wLayerIndex);
        };
        void Init(struct _map_fld* pMapSet)
        {
            using org_ptr = void (WINAPIV*)(struct CMapData*, struct _map_fld*);
            (org_ptr(0x140180d40L))(this, pMapSet);
        };
        bool IsMapIn(float* fPos)
        {
            using org_ptr = bool (WINAPIV*)(struct CMapData*, float*);
            return (org_ptr(0x140184b40L))(this, fPos);
        };
        bool LoadDummy(char* pszDummyCode, struct _dummy_position* pPos)
        {
            using org_ptr = bool (WINAPIV*)(struct CMapData*, char*, struct _dummy_position*);
            return (org_ptr(0x140184250L))(this, pszDummyCode, pPos);
        };
        bool LoadHolySystemDummy(char* pszDummyCode, struct _dummy_position* pPos)
        {
            using org_ptr = bool (WINAPIV*)(struct CMapData*, char*, struct _dummy_position*);
            return (org_ptr(0x140183e30L))(this, pszDummyCode, pPos);
        };
        void OnLoop()
        {
            using org_ptr = void (WINAPIV*)(struct CMapData*);
            (org_ptr(0x140181510L))(this);
        };
        bool OpenMap(char* pszMapCode, struct _map_fld* pMapSet, bool bUse)
        {
            using org_ptr = bool (WINAPIV*)(struct CMapData*, char*, struct _map_fld*, bool);
            return (org_ptr(0x140180d80L))(this, pszMapCode, pMapSet, bUse);
        };
        bool UpdateSecterList(struct CGameObject* pObj, unsigned int dwOldSec, unsigned int dwNewSec)
        {
            using org_ptr = bool (WINAPIV*)(struct CMapData*, struct CGameObject*, unsigned int, unsigned int);
            return (org_ptr(0x140184be0L))(this, pObj, dwOldSec, dwNewSec);
        };
        bool _LoadBind(char* pszMapCode)
        {
            using org_ptr = bool (WINAPIV*)(struct CMapData*, char*);
            return (org_ptr(0x1401832e0L))(this, pszMapCode);
        };
        bool _LoadBspSec(char* pszMapCode)
        {
            using org_ptr = bool (WINAPIV*)(struct CMapData*, char*);
            return (org_ptr(0x1401815a0L))(this, pszMapCode);
        };
        bool _LoadMonBlk(char* pszMapCode, struct _map_fld* pMapFld)
        {
            using org_ptr = bool (WINAPIV*)(struct CMapData*, char*, struct _map_fld*);
            return (org_ptr(0x140181850L))(this, pszMapCode, pMapFld);
        };
        bool _LoadPortal(char* pszMapCode)
        {
            using org_ptr = bool (WINAPIV*)(struct CMapData*, char*);
            return (org_ptr(0x1401825b0L))(this, pszMapCode);
        };
        bool _LoadQuest(char* pszMapCode)
        {
            using org_ptr = bool (WINAPIV*)(struct CMapData*, char*);
            return (org_ptr(0x140183b60L))(this, pszMapCode);
        };
        bool _LoadResource(char* pszMapCode)
        {
            using org_ptr = bool (WINAPIV*)(struct CMapData*, char*);
            return (org_ptr(0x1401835b0L))(this, pszMapCode);
        };
        bool _LoadSafe(char* pszMapCode)
        {
            using org_ptr = bool (WINAPIV*)(struct CMapData*, char*);
            return (org_ptr(0x140183f80L))(this, pszMapCode);
        };
        bool _LoadStart(char* pszMapCode)
        {
            using org_ptr = bool (WINAPIV*)(struct CMapData*, char*);
            return (org_ptr(0x140182ee0L))(this, pszMapCode);
        };
        bool _LoadStoreDummy(char* pszMapCode)
        {
            using org_ptr = bool (WINAPIV*)(struct CMapData*, char*);
            return (org_ptr(0x140182a10L))(this, pszMapCode);
        };
        ~CMapData()
        {
            using org_ptr = void (WINAPIV*)(struct CMapData*);
            (org_ptr(0x140180590L))(this);
        };
        void dtor_CMapData()
        {
            using org_ptr = void (WINAPIV*)(struct CMapData*);
            (org_ptr(0x140180590L))(this);
        };
    };
    #pragma pack(pop)
END_ATF_NAMESPACE
