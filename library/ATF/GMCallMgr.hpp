// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CNetIndexList.hpp"
#include "CPlayer.hpp"
#include "GMCallMgrVtbl.hpp"
#include "GMRequestData.hpp"


START_ATF_NAMESPACE
    struct GMCallMgr
    {
        enum GMAcceptErrorCode
        {
            eAcceptOk = 0x0,
            eAcceptErrorNotUser = 0x1,
            eAcceptErrorCannotMove = 0x2,
            eAcceptErrorAssert = 0x3,
        };
        GMCallMgrVtbl *vfptr;
        GMRequestData m_buffGMRequestData[2532];
        CNetIndexList m_listGMRequestDataEmpty;
        CNetIndexList m_listGMRequestDataTask;
    public:
        GMCallMgr()
        {
            using org_ptr = void (WINAPIV*)(struct GMCallMgr*);
            (org_ptr(0x1402aa0b0L))(this);
        };
        void ctor_GMCallMgr()
        {
            using org_ptr = void (WINAPIV*)(struct GMCallMgr*);
            (org_ptr(0x1402aa0b0L))(this);
        };
        struct GMRequestData* GetGMRequestDataPtr(struct CPlayer* pOne)
        {
            using org_ptr = struct GMRequestData* (WINAPIV*)(struct GMCallMgr*, struct CPlayer*);
            return (org_ptr(0x1402aa5a0L))(this, pOne);
        };
        void Init()
        {
            using org_ptr = void (WINAPIV*)(struct GMCallMgr*);
            (org_ptr(0x1402aa300L))(this);
        };
        void InitReqBuff()
        {
            using org_ptr = void (WINAPIV*)(struct GMCallMgr*);
            (org_ptr(0x1402aa340L))(this);
        };
        struct GMRequestData* PopReqEmptNode()
        {
            using org_ptr = struct GMRequestData* (WINAPIV*)(struct GMCallMgr*);
            return (org_ptr(0x1402aa3e0L))(this);
        };
        void PushReqNode(struct GMRequestData* pInst)
        {
            using org_ptr = void (WINAPIV*)(struct GMCallMgr*, struct GMRequestData*);
            (org_ptr(0x1402aa4f0L))(this, pInst);
        };
        bool RequestAcceptGMCall(struct CPlayer* pOne, unsigned int dwUserSerial)
        {
            using org_ptr = bool (WINAPIV*)(struct GMCallMgr*, struct CPlayer*, unsigned int);
            return (org_ptr(0x1402aa810L))(this, pOne, dwUserSerial);
        };
        bool RequestGMCall(struct CPlayer* pOne, int bCall)
        {
            using org_ptr = bool (WINAPIV*)(struct GMCallMgr*, struct CPlayer*, int);
            return (org_ptr(0x1402aa6a0L))(this, pOne, bCall);
        };
        bool RequestGMList(struct CPlayer* pOne, int nCurrPageIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct GMCallMgr*, struct CPlayer*, int);
            return (org_ptr(0x1402aa7a0L))(this, pOne, nCurrPageIndex);
        };
        void SendResponseAcceptResult(struct CPlayer* pOneGM, struct CPlayer* pOneUser, int nErrorCode)
        {
            using org_ptr = void (WINAPIV*)(struct GMCallMgr*, struct CPlayer*, struct CPlayer*, int);
            (org_ptr(0x1402aae40L))(this, pOneGM, pOneUser, nErrorCode);
        };
        bool SendResponseGMCall(struct CPlayer* pOne, int bCallState)
        {
            using org_ptr = bool (WINAPIV*)(struct GMCallMgr*, struct CPlayer*, int);
            return (org_ptr(0x1402aaa60L))(this, pOne, bCallState);
        };
        bool SendResponseGMList(struct CPlayer* pOne, int nCurrPageIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct GMCallMgr*, struct CPlayer*, int);
            return (org_ptr(0x1402aab10L))(this, pOne, nCurrPageIndex);
        };
        ~GMCallMgr()
        {
            using org_ptr = void (WINAPIV*)(struct GMCallMgr*);
            (org_ptr(0x1402aa200L))(this);
        };
        void dtor_GMCallMgr()
        {
            using org_ptr = void (WINAPIV*)(struct GMCallMgr*);
            (org_ptr(0x1402aa200L))(this);
        };
    };
END_ATF_NAMESPACE
