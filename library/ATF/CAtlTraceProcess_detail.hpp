// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CAtlTraceProcess_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        static info::CAtlTraceProcessBase1_ptr CAtlTraceProcessBase1_next(nullptr);
        static info::CAtlTraceProcessBase1_clbk CAtlTraceProcessBase1_user(nullptr);
        static info::CAtlTraceProcessctor_CAtlTraceProcess2_ptr CAtlTraceProcessctor_CAtlTraceProcess2_next(nullptr);
        static info::CAtlTraceProcessctor_CAtlTraceProcess2_clbk CAtlTraceProcessctor_CAtlTraceProcess2_user(nullptr);
        static info::CAtlTraceProcessCategoryCount3_ptr CAtlTraceProcessCategoryCount3_next(nullptr);
        static info::CAtlTraceProcessCategoryCount3_clbk CAtlTraceProcessCategoryCount3_user(nullptr);
        static info::CAtlTraceProcessDecRef4_ptr CAtlTraceProcessDecRef4_next(nullptr);
        static info::CAtlTraceProcessDecRef4_clbk CAtlTraceProcessDecRef4_user(nullptr);
        static info::CAtlTraceProcessGetNextCookie5_ptr CAtlTraceProcessGetNextCookie5_next(nullptr);
        static info::CAtlTraceProcessGetNextCookie5_clbk CAtlTraceProcessGetNextCookie5_user(nullptr);
        static info::CAtlTraceProcessId6_ptr CAtlTraceProcessId6_next(nullptr);
        static info::CAtlTraceProcessId6_clbk CAtlTraceProcessId6_user(nullptr);
        static info::CAtlTraceProcessIncCategoryCount7_ptr CAtlTraceProcessIncCategoryCount7_next(nullptr);
        static info::CAtlTraceProcessIncCategoryCount7_clbk CAtlTraceProcessIncCategoryCount7_user(nullptr);
        static info::CAtlTraceProcessIncModuleCount8_ptr CAtlTraceProcessIncModuleCount8_next(nullptr);
        static info::CAtlTraceProcessIncModuleCount8_clbk CAtlTraceProcessIncModuleCount8_user(nullptr);
        static info::CAtlTraceProcessIncRef9_ptr CAtlTraceProcessIncRef9_next(nullptr);
        static info::CAtlTraceProcessIncRef9_clbk CAtlTraceProcessIncRef9_user(nullptr);
        static info::CAtlTraceProcessMaxSize10_ptr CAtlTraceProcessMaxSize10_next(nullptr);
        static info::CAtlTraceProcessMaxSize10_clbk CAtlTraceProcessMaxSize10_user(nullptr);
        static info::CAtlTraceProcessModuleCount11_ptr CAtlTraceProcessModuleCount11_next(nullptr);
        static info::CAtlTraceProcessModuleCount11_clbk CAtlTraceProcessModuleCount11_user(nullptr);
        
        static void* CAtlTraceProcessBase1_wrapper(struct CAtlTraceProcess* _this)
        {
           return CAtlTraceProcessBase1_user(_this, CAtlTraceProcessBase1_next);
        };
        static void CAtlTraceProcessctor_CAtlTraceProcess2_wrapper(struct CAtlTraceProcess* _this, uint64_t dwMaxSize)
        {
           CAtlTraceProcessctor_CAtlTraceProcess2_user(_this, dwMaxSize, CAtlTraceProcessctor_CAtlTraceProcess2_next);
        };
        static int CAtlTraceProcessCategoryCount3_wrapper(struct CAtlTraceProcess* _this)
        {
           return CAtlTraceProcessCategoryCount3_user(_this, CAtlTraceProcessCategoryCount3_next);
        };
        static unsigned int CAtlTraceProcessDecRef4_wrapper(struct CAtlTraceProcess* _this)
        {
           return CAtlTraceProcessDecRef4_user(_this, CAtlTraceProcessDecRef4_next);
        };
        static int CAtlTraceProcessGetNextCookie5_wrapper(struct CAtlTraceProcess* _this)
        {
           return CAtlTraceProcessGetNextCookie5_user(_this, CAtlTraceProcessGetNextCookie5_next);
        };
        static unsigned int CAtlTraceProcessId6_wrapper(struct CAtlTraceProcess* _this)
        {
           return CAtlTraceProcessId6_user(_this, CAtlTraceProcessId6_next);
        };
        static void CAtlTraceProcessIncCategoryCount7_wrapper(struct CAtlTraceProcess* _this, unsigned int nCategories)
        {
           CAtlTraceProcessIncCategoryCount7_user(_this, nCategories, CAtlTraceProcessIncCategoryCount7_next);
        };
        static void CAtlTraceProcessIncModuleCount8_wrapper(struct CAtlTraceProcess* _this, unsigned int nModules)
        {
           CAtlTraceProcessIncModuleCount8_user(_this, nModules, CAtlTraceProcessIncModuleCount8_next);
        };
        static unsigned int CAtlTraceProcessIncRef9_wrapper(struct CAtlTraceProcess* _this)
        {
           return CAtlTraceProcessIncRef9_user(_this, CAtlTraceProcessIncRef9_next);
        };
        static uint64_t CAtlTraceProcessMaxSize10_wrapper(struct CAtlTraceProcess* _this)
        {
           return CAtlTraceProcessMaxSize10_user(_this, CAtlTraceProcessMaxSize10_next);
        };
        static int CAtlTraceProcessModuleCount11_wrapper(struct CAtlTraceProcess* _this)
        {
           return CAtlTraceProcessModuleCount11_user(_this, CAtlTraceProcessModuleCount11_next);
        };
        
        static hook_record CAtlTraceProcess_functions[] = {
        {   (LPVOID)0x140675400L,
            (LPVOID *)&CAtlTraceProcessBase1_user,
            (LPVOID *)&CAtlTraceProcessBase1_next,
            (LPVOID)cast_pointer_function(CAtlTraceProcessBase1_wrapper),
            (LPVOID)cast_pointer_function((void*(CAtlTraceProcess::*)())&CAtlTraceProcess::Base) },
        {   (LPVOID)0x140676120L,
            (LPVOID *)&CAtlTraceProcessctor_CAtlTraceProcess2_user,
            (LPVOID *)&CAtlTraceProcessctor_CAtlTraceProcess2_next,
            (LPVOID)cast_pointer_function(CAtlTraceProcessctor_CAtlTraceProcess2_wrapper),
            (LPVOID)cast_pointer_function((void(CAtlTraceProcess::*)(uint64_t))&CAtlTraceProcess::ctor_CAtlTraceProcess) },
        {   (LPVOID)0x140675490L,
            (LPVOID *)&CAtlTraceProcessCategoryCount3_user,
            (LPVOID *)&CAtlTraceProcessCategoryCount3_next,
            (LPVOID)cast_pointer_function(CAtlTraceProcessCategoryCount3_wrapper),
            (LPVOID)cast_pointer_function((int(CAtlTraceProcess::*)())&CAtlTraceProcess::CategoryCount) },
        {   (LPVOID)0x140675420L,
            (LPVOID *)&CAtlTraceProcessDecRef4_user,
            (LPVOID *)&CAtlTraceProcessDecRef4_next,
            (LPVOID)cast_pointer_function(CAtlTraceProcessDecRef4_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CAtlTraceProcess::*)())&CAtlTraceProcess::DecRef) },
        {   (LPVOID)0x140676230L,
            (LPVOID *)&CAtlTraceProcessGetNextCookie5_user,
            (LPVOID *)&CAtlTraceProcessGetNextCookie5_next,
            (LPVOID)cast_pointer_function(CAtlTraceProcessGetNextCookie5_wrapper),
            (LPVOID)cast_pointer_function((int(CAtlTraceProcess::*)())&CAtlTraceProcess::GetNextCookie) },
        {   (LPVOID)0x140670030L,
            (LPVOID *)&CAtlTraceProcessId6_user,
            (LPVOID *)&CAtlTraceProcessId6_next,
            (LPVOID)cast_pointer_function(CAtlTraceProcessId6_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CAtlTraceProcess::*)())&CAtlTraceProcess::Id) },
        {   (LPVOID)0x140675620L,
            (LPVOID *)&CAtlTraceProcessIncCategoryCount7_user,
            (LPVOID *)&CAtlTraceProcessIncCategoryCount7_next,
            (LPVOID)cast_pointer_function(CAtlTraceProcessIncCategoryCount7_wrapper),
            (LPVOID)cast_pointer_function((void(CAtlTraceProcess::*)(unsigned int))&CAtlTraceProcess::IncCategoryCount) },
        {   (LPVOID)0x140675560L,
            (LPVOID *)&CAtlTraceProcessIncModuleCount8_user,
            (LPVOID *)&CAtlTraceProcessIncModuleCount8_next,
            (LPVOID)cast_pointer_function(CAtlTraceProcessIncModuleCount8_wrapper),
            (LPVOID)cast_pointer_function((void(CAtlTraceProcess::*)(unsigned int))&CAtlTraceProcess::IncModuleCount) },
        {   (LPVOID)0x1406753d0L,
            (LPVOID *)&CAtlTraceProcessIncRef9_user,
            (LPVOID *)&CAtlTraceProcessIncRef9_next,
            (LPVOID)cast_pointer_function(CAtlTraceProcessIncRef9_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(CAtlTraceProcess::*)())&CAtlTraceProcess::IncRef) },
        {   (LPVOID)0x140675470L,
            (LPVOID *)&CAtlTraceProcessMaxSize10_user,
            (LPVOID *)&CAtlTraceProcessMaxSize10_next,
            (LPVOID)cast_pointer_function(CAtlTraceProcessMaxSize10_wrapper),
            (LPVOID)cast_pointer_function((uint64_t(CAtlTraceProcess::*)())&CAtlTraceProcess::MaxSize) },
        {   (LPVOID)0x140675450L,
            (LPVOID *)&CAtlTraceProcessModuleCount11_user,
            (LPVOID *)&CAtlTraceProcessModuleCount11_next,
            (LPVOID)cast_pointer_function(CAtlTraceProcessModuleCount11_wrapper),
            (LPVOID)cast_pointer_function((int(CAtlTraceProcess::*)())&CAtlTraceProcess::ModuleCount) },
        
        };
        
    }; // static end namespace detail
END_ATF_NAMESPACE
