// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CCharacter.hpp"
#include "CHolyScheduleData.hpp"
#include "CHolyStoneSaveData.hpp"
#include "CLogFile.hpp"
#include "CMapData.hpp"
#include "CMyTimer.hpp"
#include "CPlayer.hpp"
#include "CRecordData.hpp"
#include "_QUEST_CASH.hpp"
#include "_QUEST_CASH_OTHER.hpp"
#include "__holy_keeper_data.hpp"
#include "__holy_stone_data.hpp"
#include "_portal_dummy.hpp"


START_ATF_NAMESPACE
    #pragma pack(push, 8)
    struct CHolyStoneSystem
    {
        enum _Change_Reason
        {
            eSchedule = 0x0,
            echeetkey = 0x1,
            eContinue = 0x2,
            eKeeper_Die = 0x3,
            eKeeper_Keep = 0x4,
            eTouchDown = 0x5,
        };
        CRecordData m_tblQuest;
        CLogFile m_logQuest;
        CLogFile m_logQuestDestroy;
        CLogFile m_logPer10Min;
        CMyTimer m_tmrHSKSystem;
        CPlayer *m_pkDestroyer;
        unsigned int m_dwNextStartTime;
        int m_nHolyStoneNum;
        __holy_keeper_data m_HolyKeeperData;
        __holy_stone_data m_HolyStoneData[3];
        unsigned int m_dwCheckTime[7];
        CHolyScheduleData m_ScheculeData;
        CHolyStoneSaveData m_SaveData;
        CMyTimer m_tmrCumPlayer;
        char m_strHolyMental[64];
        _QUEST_CASH m_cashQuest[5064];
        float m_fKeeperHPRate;
        float m_fFirstKeeperHPRate;
        int m_bScheduleCodePre;
        _QUEST_CASH_OTHER m_cashQuestOther[5064];
        _portal_dummy *m_pPortalDummy[3];
        int m_nRaceBattlePoint[3][2];
        char m_byKeeperDestroyRace;
        bool m_bConsumable;
        bool m_pMentalPass;
        bool bFreeMining;
    public:
        void AlterSchedule(char byScheduleCode, char byNumOfTime)
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*, char, char);
            (org_ptr(0x14027b2b0L))(this, byScheduleCode, byNumOfTime);
        };
        bool AuthMiningTicket(unsigned int dwKey)
        {
            using org_ptr = bool (WINAPIV*)(struct CHolyStoneSystem*, unsigned int);
            return (org_ptr(0x14027dbd0L))(this, dwKey);
        };
        CHolyStoneSystem()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x14027a780L))(this);
        };
        void ctor_CHolyStoneSystem()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x14027a780L))(this);
        };
        void CheckDestroyerIsArriveMine()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x14027ced0L))(this);
        };
        bool CheckHolyMaster(struct CPlayer* pAtter, char byDestroyStoneRaceCode)
        {
            using org_ptr = bool (WINAPIV*)(struct CHolyStoneSystem*, struct CPlayer*, char);
            return (org_ptr(0x14027dd50L))(this, pAtter, byDestroyStoneRaceCode);
        };
        void CheckKeeperPlusTime()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x14027dcb0L))(this);
        };
        bool ContinueStartSystem()
        {
            using org_ptr = bool (WINAPIV*)(struct CHolyStoneSystem*);
            return (org_ptr(0x14027aff0L))(this);
        };
        void CreateHolyKeeper(int nCreateType)
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*, int);
            (org_ptr(0x14027d8b0L))(this, nCreateType);
        };
        void CreateHolyStone()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x14027d4a0L))(this);
        };
        void DestroyHolyKeeper()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x14027db80L))(this);
        };
        void DestroyHolyStone()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x14027d790L))(this);
        };
        struct _QUEST_CASH* FindStoragedQuestCash(unsigned int dwAvatorSerial)
        {
            using org_ptr = struct _QUEST_CASH* (WINAPIV*)(struct CHolyStoneSystem*, unsigned int);
            return (org_ptr(0x140079640L))(this, dwAvatorSerial);
        };
        int GetControlLeftTime()
        {
            using org_ptr = int (WINAPIV*)(struct CHolyStoneSystem*);
            return (org_ptr(0x14027e690L))(this);
        };
        int GetDestroyStoneRace()
        {
            using org_ptr = int (WINAPIV*)(struct CHolyStoneSystem*);
            return (org_ptr(0x1403b7d80L))(this);
        };
        unsigned int GetDestroyerGuildSerial()
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CHolyStoneSystem*);
            return (org_ptr(0x140079620L))(this);
        };
        unsigned int GetDestroyerSerial()
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CHolyStoneSystem*);
            return (org_ptr(0x14007da40L))(this);
        };
        int GetDestroyerState()
        {
            using org_ptr = int (WINAPIV*)(struct CHolyStoneSystem*);
            return (org_ptr(0x1400a6a40L))(this);
        };
        bool GetGoldBoxConsumable()
        {
            using org_ptr = bool (WINAPIV*)(struct CHolyStoneSystem*);
            return (org_ptr(0x140416c40L))(this);
        };
        int GetHolyMasterRace()
        {
            using org_ptr = int (WINAPIV*)(struct CHolyStoneSystem*);
            return (org_ptr(0x1400ef2b0L))(this);
        };
        char* GetHolyMentalString()
        {
            using org_ptr = char* (WINAPIV*)(struct CHolyStoneSystem*);
            return (org_ptr(0x14029d6b0L))(this);
        };
        char GetKeeperDestroyRace()
        {
            using org_ptr = char (WINAPIV*)(struct CHolyStoneSystem*);
            return (org_ptr(0x140284d10L))(this);
        };
        struct CMapData* GetMapData()
        {
            using org_ptr = struct CMapData* (WINAPIV*)(struct CHolyStoneSystem*);
            return (org_ptr(0x1400d02c0L))(this);
        };
        char GetNumOfTime()
        {
            using org_ptr = char (WINAPIV*)(struct CHolyStoneSystem*);
            return (org_ptr(0x1400795e0L))(this);
        };
        struct _portal_dummy* GetPortalDummy(char byRace)
        {
            using org_ptr = struct _portal_dummy* (WINAPIV*)(struct CHolyStoneSystem*, char);
            return (org_ptr(0x140282130L))(this, byRace);
        };
        int GetSceneCode()
        {
            using org_ptr = int (WINAPIV*)(struct CHolyStoneSystem*);
            return (org_ptr(0x140079600L))(this);
        };
        unsigned int GetStartBattleTickTime()
        {
            using org_ptr = unsigned int (WINAPIV*)(struct CHolyStoneSystem*);
            return (org_ptr(0x14027b5c0L))(this);
        };
        char GetStartDay()
        {
            using org_ptr = char (WINAPIV*)(struct CHolyStoneSystem*);
            return (org_ptr(0x1400795a0L))(this);
        };
        char GetStartHour()
        {
            using org_ptr = char (WINAPIV*)(struct CHolyStoneSystem*);
            return (org_ptr(0x1400795c0L))(this);
        };
        char GetStartMin()
        {
            using org_ptr = char (WINAPIV*)(struct CHolyStoneSystem*);
            return (org_ptr(0x1402845f0L))(this);
        };
        char GetStartMonth()
        {
            using org_ptr = char (WINAPIV*)(struct CHolyStoneSystem*);
            return (org_ptr(0x140079580L))(this);
        };
        uint16_t GetStartYear()
        {
            using org_ptr = uint16_t (WINAPIV*)(struct CHolyStoneSystem*);
            return (org_ptr(0x140079560L))(this);
        };
        void GiveHSKQuest()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x14027d1a0L))(this);
        };
        void HSKRespawnSystem()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x14027ca40L))(this);
        };
        bool InitHolySystem()
        {
            using org_ptr = bool (WINAPIV*)(struct CHolyStoneSystem*);
            return (org_ptr(0x14027ac60L))(this);
        };
        void InitQuestCash()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x140284a00L))(this);
        };
        void InitQuestCash_Other()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x140281ef0L))(this);
        };
        bool IsControlScene()
        {
            using org_ptr = bool (WINAPIV*)(struct CHolyStoneSystem*);
            return (org_ptr(0x14007a010L))(this);
        };
        bool IsItemLootAuthority(struct CPlayer* pOne, char byCreateCode)
        {
            using org_ptr = bool (WINAPIV*)(struct CHolyStoneSystem*, struct CPlayer*, char);
            return (org_ptr(0x1402811d0L))(this, pOne, byCreateCode);
        };
        bool IsMentalPass()
        {
            using org_ptr = bool (WINAPIV*)(struct CHolyStoneSystem*);
            return (org_ptr(0x140282170L))(this);
        };
        bool IsMinigeTicketCheck()
        {
            using org_ptr = bool (WINAPIV*)(struct CHolyStoneSystem*);
            return (org_ptr(0x1400d0140L))(this);
        };
        bool IsUseReturnItem(unsigned int dwObjSerial)
        {
            using org_ptr = bool (WINAPIV*)(struct CHolyStoneSystem*, unsigned int);
            return (org_ptr(0x1400c8c70L))(this, dwObjSerial);
        };
        void OnLoop()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x14027b490L))(this);
        };
        void On_HS_SCENE_BATTLE_END_WAIT_TIME()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x14027c3e0L))(this);
        };
        void On_HS_SCENE_BATTLE_TIME()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x14027c120L))(this);
        };
        void On_HS_SCENE_INIT()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x14027c0d0L))(this);
        };
        void On_HS_SCENE_KEEPER_ATTACKABLE_TIME()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x14027c540L))(this);
        };
        void On_HS_SCENE_KEEPER_CHAOS_TIME()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x14027c770L))(this);
        };
        void On_HS_SCENE_KEEPER_DEATTACKABLE_TIME()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x14027c610L))(this);
        };
        void On_HS_SCENE_KEEPER_DIE_TIME()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x14027c720L))(this);
        };
        void PeneltyFailRace(char byFailRace)
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*, char);
            (org_ptr(0x140280dd0L))(this, byFailRace);
        };
        void PeneltyLoseRace(char byDestroyedRace)
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*, char);
            (org_ptr(0x140280b30L))(this, byDestroyedRace);
        };
        struct _QUEST_CASH_OTHER* PopStoredQuestCash_Other(unsigned int dwAvatorSerial)
        {
            using org_ptr = struct _QUEST_CASH_OTHER* (WINAPIV*)(struct CHolyStoneSystem*, unsigned int);
            return (org_ptr(0x140282080L))(this, dwAvatorSerial);
        };
        void PushQuestCash_Other(unsigned int dwAvatorSerial, char byStoneMapMoveInfo)
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*, unsigned int, char);
            (org_ptr(0x140281f70L))(this, dwAvatorSerial, byStoneMapMoveInfo);
        };
        void PushStoreQuestCash(unsigned int dwAvatorSerial, char byQuestType, int nPvpPoint, uint16_t wKillPoint, uint16_t wDiePoint, char byCristalBattleDBInfo, char byHSKTime)
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*, unsigned int, char, int, uint16_t, uint16_t, char, char);
            (org_ptr(0x140280310L))(this, dwAvatorSerial, byQuestType, nPvpPoint, wKillPoint, wDiePoint, byCristalBattleDBInfo, byHSKTime);
        };
        void ReceiveDestroyKeeper(struct CCharacter* pCharacter)
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*, struct CCharacter*);
            (org_ptr(0x14027cd30L))(this, pCharacter);
        };
        void RecoverPvpCash()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x140281070L))(this);
        };
        void ReleaseLastAttBuff()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x1402814b0L))(this);
        };
        void SendHolyStoneHP(struct CPlayer* pkPlayer)
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*, struct CPlayer*);
            (org_ptr(0x14027ffc0L))(this, pkPlayer);
        };
        void SendHolyStoneHPToRaceBoss()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x14027e9c0L))(this);
        };
        void SendIsArriveDestroyer(char byArrive)
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*, char);
            (org_ptr(0x14027e860L))(this, byArrive);
        };
        void SendMsg_CreateHolyMaster(struct CPlayer* pkDestroyer, int nControlSec)
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*, struct CPlayer*, int);
            (org_ptr(0x14027f280L))(this, pkDestroyer, nControlSec);
        };
        void SendMsg_EndBattle(char byLoseRace)
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*, char);
            (org_ptr(0x14027ec30L))(this, byLoseRace);
        };
        void SendMsg_EnterKeeper(int n)
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*, int);
            (org_ptr(0x14027f510L))(this, n);
        };
        void SendMsg_EnterStone(int n)
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*, int);
            (org_ptr(0x14027f9a0L))(this, n);
        };
        void SendMsg_ExitStone()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x14027eb70L))(this);
        };
        void SendMsg_HolyKeeperAttackAbleState(bool bAttackAble)
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*, bool);
            (org_ptr(0x14027fee0L))(this, bAttackAble);
        };
        void SendMsg_HolyKeeperStateChaos()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x14027fe10L))(this);
        };
        void SendMsg_HolyStoneSystemState(int nPlayerIndex)
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*, int);
            (org_ptr(0x14027f410L))(this, nPlayerIndex);
        };
        void SendMsg_NoticeNextQuest(int n, char byStoneMapMoveInfo)
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*, int, char);
            (org_ptr(0x140280150L))(this, n, byStoneMapMoveInfo);
        };
        void SendMsg_NotifyHolyKeeperAttackTimeBeKeepKeeper(bool bKeepKeeper)
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*, bool);
            (org_ptr(0x14027c7e0L))(this, bKeepKeeper);
        };
        void SendMsg_StartBattle()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x14027fd40L))(this);
        };
        void SendMsg_WaitKeeper(int n, char byWaitType)
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*, int, char);
            (org_ptr(0x14027f7c0L))(this, n, byWaitType);
        };
        void SendMsg_WaitStone(int n)
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*, int);
            (org_ptr(0x14027f8c0L))(this, n);
        };
        void SendMsg_to_webagent_about_last_attacker_for_keeper(struct CPlayer* pPlayer, int bByAnimus)
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*, struct CPlayer*, int);
            (org_ptr(0x14027c8a0L))(this, pPlayer, bByAnimus);
        };
        void SendNotifyHolyStoneDestroyedToRaceBoss()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x14027fc00L))(this);
        };
        void SendSMS_CompleteQuest(char byDestroyedRace, char* pwszMasterName, int nControlSec, char* szMasterClass, char byMasterLv)
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*, char, char*, int, char*, char);
            (org_ptr(0x14027ed20L))(this, byDestroyedRace, pwszMasterName, nControlSec, szMasterClass, byMasterLv);
        };
        void SendSMS_MineTimeExtend(int nControlSec)
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*, int);
            (org_ptr(0x14027e720L))(this, nControlSec);
        };
        void SetDestroyStoneRace(int nRace)
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*, int);
            (org_ptr(0x140284b90L))(this, nRace);
        };
        void SetEffectToDestroyerGuildMember()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x1402813a0L))(this);
        };
        void SetGoldBoxConsumable(bool bFlag)
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*, bool);
            (org_ptr(0x1400f77d0L))(this, bFlag);
        };
        void SetHolyMasterRace(int nMaster)
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*, int);
            (org_ptr(0x140284b60L))(this, nMaster);
        };
        void SetKeeperDestroyRace(char byRace)
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*, char);
            (org_ptr(0x1402847a0L))(this, byRace);
        };
        bool SetScene(char byNumOfTime, int nSceneCode, unsigned int nPassTime, int nChangeReason)
        {
            using org_ptr = bool (WINAPIV*)(struct CHolyStoneSystem*, char, int, unsigned int, int);
            return (org_ptr(0x14027b840L))(this, byNumOfTime, nSceneCode, nPassTime, nChangeReason);
        };
        void SetTermTimeDefault(char byNumOfTime)
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*, char);
            (org_ptr(0x14027b520L))(this, byNumOfTime);
        };
        void UnAllRegisterPerAutoMine()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x14027b740L))(this);
        };
        void UpdateNotifyHolyStoneHPToRaceBoss()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x14027cc80L))(this);
        };
        void WriteLogPer10Min_Combat()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x1402804e0L))(this);
        };
        bool ct_KeeperStart(int nKeeperState, int nRace, int nPassTime)
        {
            using org_ptr = bool (WINAPIV*)(struct CHolyStoneSystem*, int, int, int);
            return (org_ptr(0x140281610L))(this, nKeeperState, nRace, nPassTime);
        };
        bool ct_State(struct CPlayer* pOne)
        {
            using org_ptr = bool (WINAPIV*)(struct CHolyStoneSystem*, struct CPlayer*);
            return (org_ptr(0x1402816b0L))(this, pOne);
        };
        bool ct_StopBattle()
        {
            using org_ptr = bool (WINAPIV*)(struct CHolyStoneSystem*);
            return (org_ptr(0x1402815b0L))(this);
        };
        ~CHolyStoneSystem()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x14027aa80L))(this);
        };
        void dtor_CHolyStoneSystem()
        {
            using org_ptr = void (WINAPIV*)(struct CHolyStoneSystem*);
            (org_ptr(0x14027aa80L))(this);
        };
    };
    #pragma pack(pop)
END_ATF_NAMESPACE
