// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "AP_BatterySlot.hpp"
#include "CCharacter.hpp"
#include "CLogFile.hpp"
#include "CPlayer.hpp"
#include "_STORAGE_LIST.hpp"
#include "_qry_case_update_mineore.hpp"
#include "_personal_amine_mineore_zocl.hpp"


START_ATF_NAMESPACE
    struct  AutominePersonal : CCharacter
    {
        bool m_bDBLoad;
        bool m_bOpenUI_Inven;
        bool m_bOpenUI_Battery;
        bool m_bInstalled;
        bool m_bInvenFull;
        bool m_bStart;
        char m_bySelOre;
        unsigned __int16 m_wItemSerial;
        char m_byFilledSlotCnt;
        unsigned int m_dwNextSendTime_CurState;
        char m_dwDelaySec;
        unsigned int m_dwDelay;
        unsigned int m_dwNextMineTime;
        unsigned int m_dwChangeSendTime;
        int m_nMaxHP;
        _STORAGE_LIST::_db_con *m_pItem;
        CPlayer *m_pOwner;
        char m_byUseBattery;
        AP_BatterySlot *m_pBatterySlot;
        bool m_bChanged;
        _personal_amine_mineore_zocl m_changed_packet;
        unsigned int m_dwMineCount[15];
        _qry_case_update_mineore m_update_mineore_old;
        _qry_case_update_mineore m_update_mineore_new;
        CLogFile m_logProcess;
        CLogFile m_logSysErr;
    public:
        AutominePersonal()
        {
            using org_ptr = void (WINAPIV*)(struct AutominePersonal*);
            (org_ptr(0x1402da090L))(this);
        };
        void ctor_AutominePersonal()
        {
            using org_ptr = void (WINAPIV*)(struct AutominePersonal*);
            (org_ptr(0x1402da090L))(this);
        };
        int GetDefFC(int nAttactPart, struct CCharacter* pAttChar, int* pnConvertPart)
        {
            using org_ptr = int (WINAPIV*)(struct AutominePersonal*, int, struct CCharacter*, int*);
            return (org_ptr(0x1402db7e0L))(this, nAttactPart, pAttChar, pnConvertPart);
        };
        float GetDefFacing(int nPart)
        {
            using org_ptr = float (WINAPIV*)(struct AutominePersonal*, int);
            return (org_ptr(0x1402db730L))(this, nPart);
        };
        float GetDefGap(int nPart)
        {
            using org_ptr = float (WINAPIV*)(struct AutominePersonal*, int);
            return (org_ptr(0x1402db680L))(this, nPart);
        };
        int GetHP()
        {
            using org_ptr = int (WINAPIV*)(struct AutominePersonal*);
            return (org_ptr(0x1402ddbf0L))(this);
        };
        int GetMaxHP()
        {
            using org_ptr = int (WINAPIV*)(struct AutominePersonal*);
            return (org_ptr(0x1402ddbd0L))(this);
        };
        int GetObjRace()
        {
            using org_ptr = int (WINAPIV*)(struct AutominePersonal*);
            return (org_ptr(0x1402ddc60L))(this);
        };
        struct CPlayer* GetOwner()
        {
            using org_ptr = struct CPlayer* (WINAPIV*)(struct AutominePersonal*);
            return (org_ptr(0x1402dcfc0L))(this);
        };
        bool IsBeAttackedAble(bool bFirst)
        {
            using org_ptr = bool (WINAPIV*)(struct AutominePersonal*, bool);
            return (org_ptr(0x1402ddd00L))(this, bFirst);
        };
        bool IsBeDamagedAble(struct CCharacter* pAtter)
        {
            using org_ptr = bool (WINAPIV*)(struct AutominePersonal*, struct CCharacter*);
            return (org_ptr(0x1402ddce0L))(this, pAtter);
        };
        void LoadDBComplete()
        {
            using org_ptr = void (WINAPIV*)(struct AutominePersonal*);
            (org_ptr(0x1402da620L))(this);
        };
        void Loop()
        {
            using org_ptr = void (WINAPIV*)(struct AutominePersonal*);
            (org_ptr(0x1402dc310L))(this);
        };
        void SendMsg_FixPosition(int n)
        {
            using org_ptr = void (WINAPIV*)(struct AutominePersonal*, int);
            (org_ptr(0x1402dcd60L))(this, n);
        };
        int SetDamage(int nDam, struct CCharacter* pDst, int nDstLv, bool bCrt, int nAttackType, unsigned int dwAttackSerial, bool bJadeReturn)
        {
            using org_ptr = int (WINAPIV*)(struct AutominePersonal*, int, struct CCharacter*, int, bool, int, unsigned int, bool);
            return (org_ptr(0x1402db890L))(this, nDam, pDst, nDstLv, bCrt, nAttackType, dwAttackSerial, bJadeReturn);
        };
        bool do_automine(unsigned int dwTime)
        {
            using org_ptr = bool (WINAPIV*)(struct AutominePersonal*, unsigned int);
            return (org_ptr(0x1402db9c0L))(this, dwTime);
        };
        bool extract_battery(char bySlotIdx, struct _STORAGE_LIST::_db_con* pBattery)
        {
            using org_ptr = bool (WINAPIV*)(struct AutominePersonal*, char, struct _STORAGE_LIST::_db_con*);
            return (org_ptr(0x1402da880L))(this, bySlotIdx, pBattery);
        };
        unsigned int get_battery(int n)
        {
            using org_ptr = unsigned int (WINAPIV*)(struct AutominePersonal*, int);
            return (org_ptr(0x1402e1ac0L))(this, n);
        };
        unsigned int get_battery()
        {
            using org_ptr = unsigned int (WINAPIV*)(struct AutominePersonal*);
            return (org_ptr(0x1402de0b0L))(this);
        };
        struct _STORAGE_LIST::_db_con* get_item()
        {
            using org_ptr = struct _STORAGE_LIST::_db_con* (WINAPIV*)(struct AutominePersonal*);
            return (org_ptr(0x1402e1810L))(this);
        };
        uint16_t get_itemserial()
        {
            using org_ptr = uint16_t (WINAPIV*)(struct AutominePersonal*);
            return (org_ptr(0x1402e19d0L))(this);
        };
        unsigned int get_objserial()
        {
            using org_ptr = unsigned int (WINAPIV*)(struct AutominePersonal*);
            return (org_ptr(0x14029d690L))(this);
        };
        struct CPlayer* get_owner()
        {
            using org_ptr = struct CPlayer* (WINAPIV*)(struct AutominePersonal*);
            return (org_ptr(0x1402e1a50L))(this);
        };
        unsigned int get_ownerserial()
        {
            using org_ptr = unsigned int (WINAPIV*)(struct AutominePersonal*);
            return (org_ptr(0x1402de040L))(this);
        };
        bool initialize(uint16_t wIndex)
        {
            using org_ptr = bool (WINAPIV*)(struct AutominePersonal*, uint16_t);
            return (org_ptr(0x1402da3d0L))(this, wIndex);
        };
        bool insert_battery(char bySlotIdx, uint16_t wItemSerial)
        {
            using org_ptr = bool (WINAPIV*)(struct AutominePersonal*, char, uint16_t);
            return (org_ptr(0x1402da640L))(this, bySlotIdx, wItemSerial);
        };
        bool is_installed()
        {
            using org_ptr = bool (WINAPIV*)(struct AutominePersonal*);
            return (org_ptr(0x1400d3dd0L))(this);
        };
        bool is_run()
        {
            using org_ptr = bool (WINAPIV*)(struct AutominePersonal*);
            return (org_ptr(0x1402e1aa0L))(this);
        };
        void make_minepacket(uint16_t wItemIndex, uint16_t wItemSerial, char byStorageIndex, uint16_t nNewOre, unsigned int dwDur)
        {
            using org_ptr = void (WINAPIV*)(struct AutominePersonal*, uint16_t, uint16_t, char, uint16_t, unsigned int);
            (org_ptr(0x1402dc130L))(this, wItemIndex, wItemSerial, byStorageIndex, nNewOre, dwDur);
        };
        bool regist_to_map(struct CPlayer* pOne, struct _STORAGE_LIST::_db_con* pDstItem, char byDummyIndex, unsigned int dwObjSerial, float fDelayProf)
        {
            using org_ptr = bool (WINAPIV*)(struct AutominePersonal*, struct CPlayer*, struct _STORAGE_LIST::_db_con*, char, unsigned int, float);
            return (org_ptr(0x1402dabc0L))(this, pOne, pDstItem, byDummyIndex, dwObjSerial, fDelayProf);
        };
        void send_attacked()
        {
            using org_ptr = void (WINAPIV*)(struct AutominePersonal*);
            (org_ptr(0x1402dcb70L))(this);
        };
        void send_changed_packet(int n)
        {
            using org_ptr = void (WINAPIV*)(struct AutominePersonal*, int);
            (org_ptr(0x1402dc930L))(this, n);
        };
        void send_current_state()
        {
            using org_ptr = void (WINAPIV*)(struct AutominePersonal*);
            (org_ptr(0x1402dcea0L))(this);
        };
        void send_ecode(char byCode)
        {
            using org_ptr = void (WINAPIV*)(struct AutominePersonal*, char);
            (org_ptr(0x1402dcc90L))(this, byCode);
        };
        void send_installed()
        {
            using org_ptr = void (WINAPIV*)(struct AutominePersonal*);
            (org_ptr(0x1402dc9f0L))(this);
        };
        void set_delay(unsigned int dwDelay)
        {
            using org_ptr = void (WINAPIV*)(struct AutominePersonal*, unsigned int);
            (org_ptr(0x14029d540L))(this, dwDelay);
        };
        void set_delaysec(unsigned int dwDS)
        {
            using org_ptr = void (WINAPIV*)(struct AutominePersonal*, unsigned int);
            (org_ptr(0x14029d570L))(this, dwDS);
        };
        void set_openUI_Inven(bool bFlag)
        {
            using org_ptr = void (WINAPIV*)(struct AutominePersonal*, bool);
            (org_ptr(0x1402e1b20L))(this, bFlag);
        };
        void set_openUI_battery(bool bFlag)
        {
            using org_ptr = void (WINAPIV*)(struct AutominePersonal*, bool);
            (org_ptr(0x1402e1b50L))(this, bFlag);
        };
        void set_selore(char bySelOre)
        {
            using org_ptr = void (WINAPIV*)(struct AutominePersonal*, char);
            (org_ptr(0x1402e1940L))(this, bySelOre);
        };
        void set_work(bool bWork)
        {
            using org_ptr = void (WINAPIV*)(struct AutominePersonal*, bool);
            (org_ptr(0x1402e1a70L))(this, bWork);
        };
        char sub_battery(unsigned int dwUsed)
        {
            using org_ptr = char (WINAPIV*)(struct AutominePersonal*, unsigned int);
            return (org_ptr(0x1402da990L))(this, dwUsed);
        };
        void sub_filledslot()
        {
            using org_ptr = void (WINAPIV*)(struct AutominePersonal*);
            (org_ptr(0x1402e1be0L))(this);
        };
        bool unregist_from_map(char byDestroyType)
        {
            using org_ptr = bool (WINAPIV*)(struct AutominePersonal*, char);
            return (org_ptr(0x1402db110L))(this, byDestroyType);
        };
        ~AutominePersonal()
        {
            using org_ptr = void (WINAPIV*)(struct AutominePersonal*);
            (org_ptr(0x1402da210L))(this);
        };
        void dtor_AutominePersonal()
        {
            using org_ptr = void (WINAPIV*)(struct AutominePersonal*);
            (org_ptr(0x1402da210L))(this);
        };
    };
END_ATF_NAMESPACE
