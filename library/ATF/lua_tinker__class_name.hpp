// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  class_name<CLuaEventNode>
        {
        public:
            static name(char* name)
            {
                using org_ptr = char* (WINAPIV*)(char*);
                (org_ptr(0x140404c40L))(name);
            };
            static char* ctor_name(char* name)
            {
                using org_ptr = char* (WINAPIV*)(char*);
                return (org_ptr(0x140404c40L))(name);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  class_name<LuaParam3>
        {
        public:
            static name(char* name)
            {
                using org_ptr = char* (WINAPIV*)(char*);
                (org_ptr(0x140407ff0L))(name);
            };
            static char* ctor_name(char* name)
            {
                using org_ptr = char* (WINAPIV*)(char*);
                return (org_ptr(0x140407ff0L))(name);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  class_name<CLuaEventMgr>
        {
        public:
            static name(char* name)
            {
                using org_ptr = char* (WINAPIV*)(char*);
                (org_ptr(0x1404081c0L))(name);
            };
            static char* ctor_name(char* name)
            {
                using org_ptr = char* (WINAPIV*)(char*);
                return (org_ptr(0x1404081c0L))(name);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  class_name<CMonster>
        {
        public:
            static name(char* name)
            {
                using org_ptr = char* (WINAPIV*)(char*);
                (org_ptr(0x1404082a0L))(name);
            };
            static char* ctor_name(char* name)
            {
                using org_ptr = char* (WINAPIV*)(char*);
                return (org_ptr(0x1404082a0L))(name);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  class_name<CLuaScript>
        {
        public:
            static name(char* name)
            {
                using org_ptr = char* (WINAPIV*)(char*);
                (org_ptr(0x140403160L))(name);
            };
            static char* ctor_name(char* name)
            {
                using org_ptr = char* (WINAPIV*)(char*);
                return (org_ptr(0x140403160L))(name);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE


START_ATF_NAMESPACE
    namespace lua_tinker
    {
        template<>
        struct  class_name<CLuaSignalReActor>
        {
        public:
            static name(char* name)
            {
                using org_ptr = char* (WINAPIV*)(char*);
                (org_ptr(0x140408230L))(name);
            };
            static char* ctor_name(char* name)
            {
                using org_ptr = char* (WINAPIV*)(char*);
                return (org_ptr(0x140408230L))(name);
            };
        };
    }; // end namespace lua_tinker
END_ATF_NAMESPACE
