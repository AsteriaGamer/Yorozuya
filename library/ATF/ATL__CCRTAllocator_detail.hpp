// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "ATL__CCRTAllocator_info.hpp"


START_ATF_NAMESPACE
    namespace ATL
    {
        namespace detail
        {
            static info::ATL__CCRTAllocatorAllocate2_ptr ATL__CCRTAllocatorAllocate2_next(nullptr);
            static info::ATL__CCRTAllocatorAllocate2_clbk ATL__CCRTAllocatorAllocate2_user(nullptr);
            static info::ATL__CCRTAllocatorFree4_ptr ATL__CCRTAllocatorFree4_next(nullptr);
            static info::ATL__CCRTAllocatorFree4_clbk ATL__CCRTAllocatorFree4_user(nullptr);
            
            static void* ATL__CCRTAllocatorAllocate2_wrapper(uint64_t nBytes)
            {
               return ATL__CCRTAllocatorAllocate2_user(nBytes, ATL__CCRTAllocatorAllocate2_next);
            };
            static void ATL__CCRTAllocatorFree4_wrapper(void* p)
            {
               ATL__CCRTAllocatorFree4_user(p, ATL__CCRTAllocatorFree4_next);
            };
            
            static hook_record CCRTAllocator_functions[] = {
            {   (LPVOID)0x140026cd0L,
                (LPVOID *)&ATL__CCRTAllocatorAllocate2_user,
                (LPVOID *)&ATL__CCRTAllocatorAllocate2_next,
                (LPVOID)cast_pointer_function(ATL__CCRTAllocatorAllocate2_wrapper),
                (LPVOID)cast_pointer_function((void*(*)(uint64_t))&CCRTAllocator::Allocate) },
            {   (LPVOID)0x140026da0L,
                (LPVOID *)&ATL__CCRTAllocatorFree4_user,
                (LPVOID *)&ATL__CCRTAllocatorFree4_next,
                (LPVOID)cast_pointer_function(ATL__CCRTAllocatorFree4_wrapper),
                (LPVOID)cast_pointer_function((void(*)(void*))&CCRTAllocator::Free) },
            
            };
            
        }; // static end namespace detail
    }; // end namespace ATL
END_ATF_NAMESPACE
