// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CGuild.hpp"
#include "CWeeklyGuildRankOwnerInfo.hpp"
#include "CWeeklyGuildRankRecord.hpp"
#include "_pvppoint_guild_rank_info.hpp"
#include "_weekly_guild_rank_result_zocl.hpp"
#include "_weeklyguildrank_owner_info.hpp"


START_ATF_NAMESPACE
    struct CWeeklyGuildRankInfo
    {
        bool m_bInit;
        bool m_NoDataPrev;
        bool m_bNoDataToday;
        unsigned int m_dwRecordCnt[3];
        CWeeklyGuildRankRecord **m_ppkRaceStartPos[3];
        CWeeklyGuildRankOwnerInfo m_kOwnerInfo[3][2];
        unsigned int m_dwMaxCnt;
        CWeeklyGuildRankRecord **m_ppkInfo;
        _weekly_guild_rank_result_zocl *m_pkSendList;
    public:
        CWeeklyGuildRankInfo()
        {
            using org_ptr = void (WINAPIV*)(struct CWeeklyGuildRankInfo*);
            (org_ptr(0x1402ca640L))(this);
        };
        void ctor_CWeeklyGuildRankInfo()
        {
            using org_ptr = void (WINAPIV*)(struct CWeeklyGuildRankInfo*);
            (org_ptr(0x1402ca640L))(this);
        };
        bool CheckEmpty(struct _pvppoint_guild_rank_info* pkInfo)
        {
            using org_ptr = bool (WINAPIV*)(struct CWeeklyGuildRankInfo*, struct _pvppoint_guild_rank_info*);
            return (org_ptr(0x1402cb7d0L))(this, pkInfo);
        };
        void Clear()
        {
            using org_ptr = void (WINAPIV*)(struct CWeeklyGuildRankInfo*);
            (org_ptr(0x1402cf820L))(this);
        };
        void ClearOwner()
        {
            using org_ptr = void (WINAPIV*)(struct CWeeklyGuildRankInfo*);
            (org_ptr(0x1402caf30L))(this);
        };
        void ClearRank()
        {
            using org_ptr = void (WINAPIV*)(struct CWeeklyGuildRankInfo*);
            (org_ptr(0x1402caac0L))(this);
        };
        int Find(char byRace, unsigned int dwGuildSerial)
        {
            using org_ptr = int (WINAPIV*)(struct CWeeklyGuildRankInfo*, char, unsigned int);
            return (org_ptr(0x1402cb700L))(this, byRace, dwGuildSerial);
        };
        struct CGuild* GetCurOwnerGuild(char byRace, char byNth)
        {
            using org_ptr = struct CGuild* (WINAPIV*)(struct CWeeklyGuildRankInfo*, char, char);
            return (org_ptr(0x1402cb630L))(this, byRace, byNth);
        };
        struct CGuild* GetOwnerGuild(char byRace, char byNth)
        {
            using org_ptr = struct CGuild* (WINAPIV*)(struct CWeeklyGuildRankInfo*, char, char);
            return (org_ptr(0x1402cbd80L))(this, byRace, byNth);
        };
        struct CGuild* GetPrevOwnerGuild(char byRace, char byNth)
        {
            using org_ptr = struct CGuild* (WINAPIV*)(struct CWeeklyGuildRankInfo*, char, char);
            return (org_ptr(0x1402cb560L))(this, byRace, byNth);
        };
        bool Init()
        {
            using org_ptr = bool (WINAPIV*)(struct CWeeklyGuildRankInfo*);
            return (org_ptr(0x1402ca8e0L))(this);
        };
        bool IsNoDataPrev()
        {
            using org_ptr = bool (WINAPIV*)(struct CWeeklyGuildRankInfo*);
            return (org_ptr(0x1402cfd60L))(this);
        };
        bool IsNoDataToday()
        {
            using org_ptr = bool (WINAPIV*)(struct CWeeklyGuildRankInfo*);
            return (org_ptr(0x1402cfb90L))(this);
        };
        bool Load(struct _pvppoint_guild_rank_info* pkInfo, bool* bNoData)
        {
            using org_ptr = bool (WINAPIV*)(struct CWeeklyGuildRankInfo*, struct _pvppoint_guild_rank_info*, bool*);
            return (org_ptr(0x1402cb890L))(this, pkInfo, bNoData);
        };
        bool LoadOwner(struct _weeklyguildrank_owner_info* pkInfo)
        {
            using org_ptr = bool (WINAPIV*)(struct CWeeklyGuildRankInfo*, struct _weeklyguildrank_owner_info*);
            return (org_ptr(0x1402cac50L))(this, pkInfo);
        };
        bool LoadPrev(struct _pvppoint_guild_rank_info* pkInfo)
        {
            using org_ptr = bool (WINAPIV*)(struct CWeeklyGuildRankInfo*, struct _pvppoint_guild_rank_info*);
            return (org_ptr(0x1402cfd80L))(this, pkInfo);
        };
        bool LoadToday(struct _pvppoint_guild_rank_info* pkInfo)
        {
            using org_ptr = bool (WINAPIV*)(struct CWeeklyGuildRankInfo*, struct _pvppoint_guild_rank_info*);
            return (org_ptr(0x1402cfb30L))(this, pkInfo);
        };
        void Send(unsigned int dwVer, int n, char byTabRace, char bySelfRace, unsigned int dwGuildSerial)
        {
            using org_ptr = void (WINAPIV*)(struct CWeeklyGuildRankInfo*, unsigned int, int, char, char, unsigned int);
            (org_ptr(0x1402cafd0L))(this, dwVer, n, byTabRace, bySelfRace, dwGuildSerial);
        };
        void SetNoDataFlagToday()
        {
            using org_ptr = void (WINAPIV*)(struct CWeeklyGuildRankInfo*);
            (org_ptr(0x1402cfb10L))(this);
        };
        bool Update(struct _pvppoint_guild_rank_info* pkInfo)
        {
            using org_ptr = bool (WINAPIV*)(struct CWeeklyGuildRankInfo*, struct _pvppoint_guild_rank_info*);
            return (org_ptr(0x1402cfbb0L))(this, pkInfo);
        };
        bool UpdateOwner(struct _weeklyguildrank_owner_info* pkInfo)
        {
            using org_ptr = bool (WINAPIV*)(struct CWeeklyGuildRankInfo*, struct _weeklyguildrank_owner_info*);
            return (org_ptr(0x1402cfcf0L))(this, pkInfo);
        };
        ~CWeeklyGuildRankInfo()
        {
            using org_ptr = void (WINAPIV*)(struct CWeeklyGuildRankInfo*);
            (org_ptr(0x1402ca720L))(this);
        };
        void dtor_CWeeklyGuildRankInfo()
        {
            using org_ptr = void (WINAPIV*)(struct CWeeklyGuildRankInfo*);
            (org_ptr(0x1402ca720L))(this);
        };
    };
END_ATF_NAMESPACE
