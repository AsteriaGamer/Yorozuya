// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "TInvenSlot_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        static info::TInvenSlotctor_TInvenSlot2_ptr TInvenSlotctor_TInvenSlot2_next(nullptr);
        static info::TInvenSlotctor_TInvenSlot2_clbk TInvenSlotctor_TInvenSlot2_user(nullptr);
        static info::TInvenSlotctor_TInvenSlot4_ptr TInvenSlotctor_TInvenSlot4_next(nullptr);
        static info::TInvenSlotctor_TInvenSlot4_clbk TInvenSlotctor_TInvenSlot4_user(nullptr);
        static info::TInvenSlotable_overlap8_ptr TInvenSlotable_overlap8_next(nullptr);
        static info::TInvenSlotable_overlap8_clbk TInvenSlotable_overlap8_user(nullptr);
        static info::TInvenSlotclear10_ptr TInvenSlotclear10_next(nullptr);
        static info::TInvenSlotclear10_clbk TInvenSlotclear10_user(nullptr);
        static info::TInvenSlotget_overlapnum12_ptr TInvenSlotget_overlapnum12_next(nullptr);
        static info::TInvenSlotget_overlapnum12_clbk TInvenSlotget_overlapnum12_user(nullptr);
        static info::TInvenSlotget_pitem14_ptr TInvenSlotget_pitem14_next(nullptr);
        static info::TInvenSlotget_pitem14_clbk TInvenSlotget_pitem14_user(nullptr);
        static info::TInvenSlotis_empty16_ptr TInvenSlotis_empty16_next(nullptr);
        static info::TInvenSlotis_empty16_clbk TInvenSlotis_empty16_user(nullptr);
        static info::TInvenSlotpop20_ptr TInvenSlotpop20_next(nullptr);
        static info::TInvenSlotpop20_clbk TInvenSlotpop20_user(nullptr);
        static info::TInvenSlotpush22_ptr TInvenSlotpush22_next(nullptr);
        static info::TInvenSlotpush22_clbk TInvenSlotpush22_user(nullptr);
        static info::TInvenSlotset_overlapnum24_ptr TInvenSlotset_overlapnum24_next(nullptr);
        static info::TInvenSlotset_overlapnum24_clbk TInvenSlotset_overlapnum24_user(nullptr);
        static info::TInvenSlotdtor_TInvenSlot26_ptr TInvenSlotdtor_TInvenSlot26_next(nullptr);
        static info::TInvenSlotdtor_TInvenSlot26_clbk TInvenSlotdtor_TInvenSlot26_user(nullptr);
        
        static void TInvenSlotctor_TInvenSlot2_wrapper(struct TInvenSlot<_INVENKEY>* _this, struct TInvenSlot<_INVENKEY>* rhs)
        {
           TInvenSlotctor_TInvenSlot2_user(_this, rhs);
        };
        static void TInvenSlotctor_TInvenSlot4_wrapper(struct TInvenSlot<_INVENKEY>* _this)
        {
           TInvenSlotctor_TInvenSlot4_user(_this);
        };
        static bool TInvenSlotable_overlap8_wrapper(struct TInvenSlot<_INVENKEY>* _this, struct _INVENKEY* pItem, int nNum)
        {
           return TInvenSlotable_overlap8_user(_this, pItem, nNum);
        };
        static void TInvenSlotclear10_wrapper(struct TInvenSlot<_INVENKEY>* _this)
        {
           TInvenSlotclear10_user(_this);
        };
        static unsigned int TInvenSlotget_overlapnum12_wrapper(struct TInvenSlot<_INVENKEY>* _this)
        {
           return TInvenSlotget_overlapnum12_user(_this);
        };
        static struct _INVENKEY* TInvenSlotget_pitem14_wrapper(struct TInvenSlot<_INVENKEY>* _this)
        {
           return TInvenSlotget_pitem14_user(_this);
        };
        static bool TInvenSlotis_empty16_wrapper(struct TInvenSlot<_INVENKEY>* _this)
        {
           return TInvenSlotis_empty16_user(_this);
        };
        static int TInvenSlotpop20_wrapper(struct TInvenSlot<_INVENKEY>* _this, struct _INVENKEY* pItem, int nNum)
        {
           return TInvenSlotpop20_user(_this, pItem, nNum);
        };
        static int TInvenSlotpush22_wrapper(struct TInvenSlot<_INVENKEY>* _this, struct _INVENKEY* pItem, int nNum)
        {
           return TInvenSlotpush22_user(_this, pItem, nNum);
        };
        static void TInvenSlotset_overlapnum24_wrapper(struct TInvenSlot<_INVENKEY>* _this, int n)
        {
           TInvenSlotset_overlapnum24_user(_this, n);
        };
        static void TInvenSlotdtor_TInvenSlot26_wrapper(struct TInvenSlot<_INVENKEY>* _this)
        {
           TInvenSlotdtor_TInvenSlot26_user(_this);
        };
        
        static hook_record TInvenSlot<_INVENKEY>_functions[] = {
        {   (LPVOID)0x1402d4ee0L,
            (LPVOID *)&TInvenSlotctor_TInvenSlot2_user,
            (LPVOID *)&TInvenSlotctor_TInvenSlot2_next,
            (LPVOID)cast_pointer_function(TInvenSlotctor_TInvenSlot2_wrapper),
            (LPVOID)cast_pointer_function((void(TInvenSlot<_INVENKEY>::*)(struct TInvenSlot<_INVENKEY>*))&TInvenSlot<_INVENKEY>::ctor_TInvenSlot) },
        {   (LPVOID)0x1402d5670L,
            (LPVOID *)&TInvenSlotctor_TInvenSlot4_user,
            (LPVOID *)&TInvenSlotctor_TInvenSlot4_next,
            (LPVOID)cast_pointer_function(TInvenSlotctor_TInvenSlot4_wrapper),
            (LPVOID)cast_pointer_function((void(TInvenSlot<_INVENKEY>::*)())&TInvenSlot<_INVENKEY>::ctor_TInvenSlot) },
        {   (LPVOID)0x1402d5a20L,
            (LPVOID *)&TInvenSlotable_overlap8_user,
            (LPVOID *)&TInvenSlotable_overlap8_next,
            (LPVOID)cast_pointer_function(TInvenSlotable_overlap8_wrapper),
            (LPVOID)cast_pointer_function((bool(TInvenSlot<_INVENKEY>::*)(struct _INVENKEY*, int))&TInvenSlot<_INVENKEY>::able_overlap) },
        {   (LPVOID)0x1402d5020L,
            (LPVOID *)&TInvenSlotclear10_user,
            (LPVOID *)&TInvenSlotclear10_next,
            (LPVOID)cast_pointer_function(TInvenSlotclear10_wrapper),
            (LPVOID)cast_pointer_function((void(TInvenSlot<_INVENKEY>::*)())&TInvenSlot<_INVENKEY>::clear) },
        {   (LPVOID)0x1402d4d60L,
            (LPVOID *)&TInvenSlotget_overlapnum12_user,
            (LPVOID *)&TInvenSlotget_overlapnum12_next,
            (LPVOID)cast_pointer_function(TInvenSlotget_overlapnum12_wrapper),
            (LPVOID)cast_pointer_function((unsigned int(TInvenSlot<_INVENKEY>::*)())&TInvenSlot<_INVENKEY>::get_overlapnum) },
        {   (LPVOID)0x1402d4de0L,
            (LPVOID *)&TInvenSlotget_pitem14_user,
            (LPVOID *)&TInvenSlotget_pitem14_next,
            (LPVOID)cast_pointer_function(TInvenSlotget_pitem14_wrapper),
            (LPVOID)cast_pointer_function((struct _INVENKEY*(TInvenSlot<_INVENKEY>::*)())&TInvenSlot<_INVENKEY>::get_pitem) },
        {   (LPVOID)0x1402d4d80L,
            (LPVOID *)&TInvenSlotis_empty16_user,
            (LPVOID *)&TInvenSlotis_empty16_next,
            (LPVOID)cast_pointer_function(TInvenSlotis_empty16_wrapper),
            (LPVOID)cast_pointer_function((bool(TInvenSlot<_INVENKEY>::*)())&TInvenSlot<_INVENKEY>::is_empty) },
        {   (LPVOID)0x1402d56f0L,
            (LPVOID *)&TInvenSlotpop20_user,
            (LPVOID *)&TInvenSlotpop20_next,
            (LPVOID)cast_pointer_function(TInvenSlotpop20_wrapper),
            (LPVOID)cast_pointer_function((int(TInvenSlot<_INVENKEY>::*)(struct _INVENKEY*, int))&TInvenSlot<_INVENKEY>::pop) },
        {   (LPVOID)0x1402d5aa0L,
            (LPVOID *)&TInvenSlotpush22_user,
            (LPVOID *)&TInvenSlotpush22_next,
            (LPVOID)cast_pointer_function(TInvenSlotpush22_wrapper),
            (LPVOID)cast_pointer_function((int(TInvenSlot<_INVENKEY>::*)(struct _INVENKEY*, int))&TInvenSlot<_INVENKEY>::push) },
        {   (LPVOID)0x1402d5000L,
            (LPVOID *)&TInvenSlotset_overlapnum24_user,
            (LPVOID *)&TInvenSlotset_overlapnum24_next,
            (LPVOID)cast_pointer_function(TInvenSlotset_overlapnum24_wrapper),
            (LPVOID)cast_pointer_function((void(TInvenSlot<_INVENKEY>::*)(int))&TInvenSlot<_INVENKEY>::set_overlapnum) },
        {   (LPVOID)0x1402d4f70L,
            (LPVOID *)&TInvenSlotdtor_TInvenSlot26_user,
            (LPVOID *)&TInvenSlotdtor_TInvenSlot26_next,
            (LPVOID)cast_pointer_function(TInvenSlotdtor_TInvenSlot26_wrapper),
            (LPVOID)cast_pointer_function((void(TInvenSlot<_INVENKEY>::*)())&TInvenSlot<_INVENKEY>::dtor_TInvenSlot) },
        
        };
        
    }; // static end namespace detail
END_ATF_NAMESPACE
