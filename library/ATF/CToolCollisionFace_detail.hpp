// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CToolCollisionFace_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        info::CToolCollisionFaceDrawCollisionPoint1_ptr CToolCollisionFaceDrawCollisionPoint1_next(nullptr);
        info::CToolCollisionFaceDrawCollisionPoint1_clbk CToolCollisionFaceDrawCollisionPoint1_user(nullptr);
        info::CToolCollisionFaceDrawCollisionPoly2_ptr CToolCollisionFaceDrawCollisionPoly2_next(nullptr);
        info::CToolCollisionFaceDrawCollisionPoly2_clbk CToolCollisionFaceDrawCollisionPoly2_user(nullptr);
        
        void CToolCollisionFaceDrawCollisionPoint1_wrapper(struct CToolCollisionFace* _this)
        {
           CToolCollisionFaceDrawCollisionPoint1_user(_this, CToolCollisionFaceDrawCollisionPoint1_next);
        };
        void CToolCollisionFaceDrawCollisionPoly2_wrapper(struct CToolCollisionFace* _this)
        {
           CToolCollisionFaceDrawCollisionPoly2_user(_this, CToolCollisionFaceDrawCollisionPoly2_next);
        };
        
        hook_record CToolCollisionFace_functions[] = {
        {   (LPVOID)0x1404f1b50L,
            (LPVOID *)&CToolCollisionFaceDrawCollisionPoint1_user,
            (LPVOID *)&CToolCollisionFaceDrawCollisionPoint1_next,
            (LPVOID)cast_pointer_function(CToolCollisionFaceDrawCollisionPoint1_wrapper),
            (LPVOID)cast_pointer_function((void(CToolCollisionFace::*)())&CToolCollisionFace::DrawCollisionPoint) },
        {   (LPVOID)0x1404f1d90L,
            (LPVOID *)&CToolCollisionFaceDrawCollisionPoly2_user,
            (LPVOID *)&CToolCollisionFaceDrawCollisionPoly2_next,
            (LPVOID)cast_pointer_function(CToolCollisionFaceDrawCollisionPoly2_wrapper),
            (LPVOID)cast_pointer_function((void(CToolCollisionFace::*)())&CToolCollisionFace::DrawCollisionPoly) },
        
        };
        
    }; // end namespace detail
END_ATF_NAMESPACE
