// This file auto generated by plugin for ida pro. Generated code only for x64. Please, dont change manually
#pragma once

#include "./common/common.h"
#include "CAtlTraceModuleInfo_info.hpp"


START_ATF_NAMESPACE
    namespace detail
    {
        info::CAtlTraceModuleInfoctor_CAtlTraceModuleInfo1_ptr CAtlTraceModuleInfoctor_CAtlTraceModuleInfo1_next(nullptr);
        info::CAtlTraceModuleInfoctor_CAtlTraceModuleInfo1_clbk CAtlTraceModuleInfoctor_CAtlTraceModuleInfo1_user(nullptr);
        info::CAtlTraceModuleInfoName2_ptr CAtlTraceModuleInfoName2_next(nullptr);
        info::CAtlTraceModuleInfoName2_clbk CAtlTraceModuleInfoName2_user(nullptr);
        info::CAtlTraceModuleInfoPath3_ptr CAtlTraceModuleInfoPath3_next(nullptr);
        info::CAtlTraceModuleInfoPath3_clbk CAtlTraceModuleInfoPath3_user(nullptr);
        info::CAtlTraceModuleInfoReset4_ptr CAtlTraceModuleInfoReset4_next(nullptr);
        info::CAtlTraceModuleInfoReset4_clbk CAtlTraceModuleInfoReset4_user(nullptr);
        
        void CAtlTraceModuleInfoctor_CAtlTraceModuleInfo1_wrapper(struct CAtlTraceModuleInfo* _this)
        {
           CAtlTraceModuleInfoctor_CAtlTraceModuleInfo1_user(_this, CAtlTraceModuleInfoctor_CAtlTraceModuleInfo1_next);
        };
        wchar_t* CAtlTraceModuleInfoName2_wrapper(struct CAtlTraceModuleInfo* _this)
        {
           return CAtlTraceModuleInfoName2_user(_this, CAtlTraceModuleInfoName2_next);
        };
        wchar_t* CAtlTraceModuleInfoPath3_wrapper(struct CAtlTraceModuleInfo* _this)
        {
           return CAtlTraceModuleInfoPath3_user(_this, CAtlTraceModuleInfoPath3_next);
        };
        void CAtlTraceModuleInfoReset4_wrapper(struct CAtlTraceModuleInfo* _this, struct HINSTANCE__* hInst)
        {
           CAtlTraceModuleInfoReset4_user(_this, hInst, CAtlTraceModuleInfoReset4_next);
        };
        
        hook_record CAtlTraceModuleInfo_functions[] = {
        {   (LPVOID)0x140675cb0L,
            (LPVOID *)&CAtlTraceModuleInfoctor_CAtlTraceModuleInfo1_user,
            (LPVOID *)&CAtlTraceModuleInfoctor_CAtlTraceModuleInfo1_next,
            (LPVOID)cast_pointer_function(CAtlTraceModuleInfoctor_CAtlTraceModuleInfo1_wrapper),
            (LPVOID)cast_pointer_function((void(CAtlTraceModuleInfo::*)())&CAtlTraceModuleInfo::ctor_CAtlTraceModuleInfo) },
        {   (LPVOID)0x140670010L,
            (LPVOID *)&CAtlTraceModuleInfoName2_user,
            (LPVOID *)&CAtlTraceModuleInfoName2_next,
            (LPVOID)cast_pointer_function(CAtlTraceModuleInfoName2_wrapper),
            (LPVOID)cast_pointer_function((wchar_t*(CAtlTraceModuleInfo::*)())&CAtlTraceModuleInfo::Name) },
        {   (LPVOID)0x140670000L,
            (LPVOID *)&CAtlTraceModuleInfoPath3_user,
            (LPVOID *)&CAtlTraceModuleInfoPath3_next,
            (LPVOID)cast_pointer_function(CAtlTraceModuleInfoPath3_wrapper),
            (LPVOID)cast_pointer_function((wchar_t*(CAtlTraceModuleInfo::*)())&CAtlTraceModuleInfo::Path) },
        {   (LPVOID)0x140675d10L,
            (LPVOID *)&CAtlTraceModuleInfoReset4_user,
            (LPVOID *)&CAtlTraceModuleInfoReset4_next,
            (LPVOID)cast_pointer_function(CAtlTraceModuleInfoReset4_wrapper),
            (LPVOID)cast_pointer_function((void(CAtlTraceModuleInfo::*)(struct HINSTANCE__*))&CAtlTraceModuleInfo::Reset) },
        
        };
        
    }; // end namespace detail
END_ATF_NAMESPACE
